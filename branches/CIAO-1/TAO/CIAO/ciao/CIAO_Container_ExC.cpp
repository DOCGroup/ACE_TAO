// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:320

#include "CIAO_Container_ExC.h"

#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo_i.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "CIAO_Container_ExC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_BadComponentReferenceReason[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  47,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f42), 
  ACE_NTOHL (0x6164436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7452), 
  ACE_NTOHL (0x65666572), 
  ACE_NTOHL (0x656e6365), 
  ACE_NTOHL (0x52656173), 
  ACE_NTOHL (0x6f6e3a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/BadComponentReferenceReason:1.0
  28,
  ACE_NTOHL (0x42616443), 
  ACE_NTOHL (0x6f6d706f), 
  ACE_NTOHL (0x6e656e74), 
  ACE_NTOHL (0x52656665), 
  ACE_NTOHL (0x72656e63), 
  ACE_NTOHL (0x65526561), 
  ACE_NTOHL (0x736f6e00),  // name = BadComponentReferenceReason
  3, // member count
  20,
  ACE_NTOHL (0x4e4f4e5f), 
  ACE_NTOHL (0x4c4f4341), 
  ACE_NTOHL (0x4c5f5245), 
  ACE_NTOHL (0x46455245), 
  ACE_NTOHL (0x4e434500),  // name = NON_LOCAL_REFERENCE
  24,
  ACE_NTOHL (0x4e4f4e5f), 
  ACE_NTOHL (0x434f4d50), 
  ACE_NTOHL (0x4f4e454e), 
  ACE_NTOHL (0x545f5245), 
  ACE_NTOHL (0x46455245), 
  ACE_NTOHL (0x4e434500),  // name = NON_COMPONENT_REFERENCE
  16,
  ACE_NTOHL (0x57524f4e), 
  ACE_NTOHL (0x475f434f), 
  ACE_NTOHL (0x4e544149), 
  ACE_NTOHL (0x4e455200),  // name = WRONG_CONTAINER
};

static CORBA::TypeCode _tc_TAO_tc_Components_BadComponentReferenceReason (
    CORBA::tk_enum,
    sizeof (_oc_Components_BadComponentReferenceReason),
    (char *) &_oc_Components_BadComponentReferenceReason,
    0,
    sizeof (Components::BadComponentReferenceReason)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_BadComponentReferenceReason,
    &_tc_TAO_tc_Components_BadComponentReferenceReason
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_CatalogBase[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f43), 
  ACE_NTOHL (0x6174616c), 
  ACE_NTOHL (0x6f674261), 
  ACE_NTOHL (0x73653a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/CatalogBase:1.0
  12,
  ACE_NTOHL (0x43617461), 
  ACE_NTOHL (0x6c6f6742), 
  ACE_NTOHL (0x61736500),  // name = CatalogBase
  CORBA::tk_objref, // typecode kind
  64, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    39,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x436f7350), 
    ACE_NTOHL (0x65727369), 
    ACE_NTOHL (0x7374656e), 
    ACE_NTOHL (0x74537461), 
    ACE_NTOHL (0x74652f43), 
    ACE_NTOHL (0x6174616c), 
    ACE_NTOHL (0x6f674261), 
    ACE_NTOHL (0x73653a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:CosPersistentState/CatalogBase:1.0
    12,
    ACE_NTOHL (0x43617461), 
    ACE_NTOHL (0x6c6f6742), 
    ACE_NTOHL (0x61736500),  // name = CatalogBase

};

static CORBA::TypeCode _tc_TAO_tc_Components_CatalogBase (
    CORBA::tk_alias,
    sizeof (_oc_Components_CatalogBase),
    (char *) &_oc_Components_CatalogBase,
    0,
    sizeof (Components::CatalogBase)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_CatalogBase,
    &_tc_TAO_tc_Components_CatalogBase
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_TypeId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  26,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f54), 
  ACE_NTOHL (0x79706549), 
  ACE_NTOHL (0x643a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:Components/TypeId:1.0
  7,
  ACE_NTOHL (0x54797065), 
  ACE_NTOHL (0x49640000),  // name = TypeId
  CORBA::tk_alias, // typecode kind for typedefs
  76, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x436f7350), 
    ACE_NTOHL (0x65727369), 
    ACE_NTOHL (0x7374656e), 
    ACE_NTOHL (0x74537461), 
    ACE_NTOHL (0x74652f54), 
    ACE_NTOHL (0x79706549), 
    ACE_NTOHL (0x643a312e), 
    ACE_NTOHL (0x30000000),  // repository ID = IDL:CosPersistentState/TypeId:1.0
    7,
    ACE_NTOHL (0x54797065), 
    ACE_NTOHL (0x49640000),  // name = TypeId
    CORBA::tk_sequence, // typecode kind
    12, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      CORBA::tk_octet,

      0U,


};

static CORBA::TypeCode _tc_TAO_tc_Components_TypeId (
    CORBA::tk_alias,
    sizeof (_oc_Components_TypeId),
    (char *) &_oc_Components_TypeId,
    0,
    sizeof (Components::TypeId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_TypeId,
    &_tc_TAO_tc_Components_TypeId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_SegmentId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  29,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f53), 
  ACE_NTOHL (0x65676d65), 
  ACE_NTOHL (0x6e744964), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:Components/SegmentId:1.0
  10,
  ACE_NTOHL (0x5365676d), 
  ACE_NTOHL (0x656e7449), 
  ACE_NTOHL (0x64000000),  // name = SegmentId
  CORBA::tk_short,

};

static CORBA::TypeCode _tc_TAO_tc_Components_SegmentId (
    CORBA::tk_alias,
    sizeof (_oc_Components_SegmentId),
    (char *) &_oc_Components_SegmentId,
    0,
    sizeof (Components::SegmentId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_SegmentId,
    &_tc_TAO_tc_Components_SegmentId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_FacetId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  27,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f46), 
  ACE_NTOHL (0x61636574), 
  ACE_NTOHL (0x49643a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/FacetId:1.0
  8,
  ACE_NTOHL (0x46616365), 
  ACE_NTOHL (0x74496400),  // name = FacetId
  CORBA::tk_short,

};

static CORBA::TypeCode _tc_TAO_tc_Components_FacetId (
    CORBA::tk_alias,
    sizeof (_oc_Components_FacetId),
    (char *) &_oc_Components_FacetId,
    0,
    sizeof (Components::FacetId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_FacetId,
    &_tc_TAO_tc_Components_FacetId
  )
TAO_NAMESPACE_END

#if !defined (_COMPONENTS_IDDATA_CS_)
#define _COMPONENTS_IDDATA_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// Components::IdData
// *************************************************************

Components::IdData::IdData (void)
{}

Components::IdData::IdData (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

Components::IdData::IdData (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Octet *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

Components::IdData::IdData (const IdData &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

Components::IdData::~IdData (void) // dtor
{}

void Components::IdData::_tao_any_destructor (void *_tao_void_pointer)
{
  IdData *tmp = ACE_static_cast (IdData*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_IdData[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  26,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f49), 
  ACE_NTOHL (0x64446174), 
  ACE_NTOHL (0x613a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:Components/IdData:1.0
  7,
  ACE_NTOHL (0x49644461), 
  ACE_NTOHL (0x74610000),  // name = IdData
  CORBA::tk_sequence, // typecode kind
  12, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_octet,

    0U,

};

static CORBA::TypeCode _tc_TAO_tc_Components_IdData (
    CORBA::tk_alias,
    sizeof (_oc_Components_IdData),
    (char *) &_oc_Components_IdData,
    0,
    sizeof (Components::IdData)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_IdData,
    &_tc_TAO_tc_Components_IdData
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_PersistentId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f50), 
  ACE_NTOHL (0x65727369), 
  ACE_NTOHL (0x7374656e), 
  ACE_NTOHL (0x7449643a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:Components/PersistentId:1.0
  13,
  ACE_NTOHL (0x50657273), 
  ACE_NTOHL (0x69737465), 
  ACE_NTOHL (0x6e744964), 
  ACE_NTOHL (0x0),  // name = PersistentId
  CORBA::tk_alias, // typecode kind for typedefs
  56, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    31,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x436f7350), 
    ACE_NTOHL (0x65727369), 
    ACE_NTOHL (0x7374656e), 
    ACE_NTOHL (0x74537461), 
    ACE_NTOHL (0x74652f50), 
    ACE_NTOHL (0x69643a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:CosPersistentState/Pid:1.0
    4,
    ACE_NTOHL (0x50696400),  // name = Pid
    CORBA::tk_string, 
    0U, // string length

};

static CORBA::TypeCode _tc_TAO_tc_Components_PersistentId (
    CORBA::tk_alias,
    sizeof (_oc_Components_PersistentId),
    (char *) &_oc_Components_PersistentId,
    0,
    sizeof (Components::PersistentId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_PersistentId,
    &_tc_TAO_tc_Components_PersistentId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_StateIdType[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f53), 
  ACE_NTOHL (0x74617465), 
  ACE_NTOHL (0x49645479), 
  ACE_NTOHL (0x70653a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/StateIdType:1.0
  12,
  ACE_NTOHL (0x53746174), 
  ACE_NTOHL (0x65496454), 
  ACE_NTOHL (0x79706500),  // name = StateIdType
  CORBA::tk_short,

};

static CORBA::TypeCode _tc_TAO_tc_Components_StateIdType (
    CORBA::tk_alias,
    sizeof (_oc_Components_StateIdType),
    (char *) &_oc_Components_StateIdType,
    0,
    sizeof (Components::StateIdType)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_StateIdType,
    &_tc_TAO_tc_Components_StateIdType
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::BadComponentReference::BadComponentReference (void)
  : CORBA_UserException (
        "IDL:Components/BadComponentReference:1.0",
        "BadComponentReference"
      )
{
}

Components::BadComponentReference::~BadComponentReference (void)
{
}

Components::BadComponentReference::BadComponentReference (const ::Components::BadComponentReference &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->reason = _tao_excp.reason;
}

Components::BadComponentReference&
Components::BadComponentReference::operator= (const ::Components::BadComponentReference &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  this->reason = _tao_excp.reason;
  return *this;
}

void Components::BadComponentReference::_tao_any_destructor (void *_tao_void_pointer)
{
  BadComponentReference *tmp = ACE_static_cast (BadComponentReference*, _tao_void_pointer);
  delete tmp;
}

Components::BadComponentReference *
Components::BadComponentReference::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:Components/BadComponentReference:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (BadComponentReference *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::BadComponentReference::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::BadComponentReference, 0);
  return retval;
}

CORBA::Exception *
Components::BadComponentReference::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::BadComponentReference (*this),
      0
    );
  return result;
}

void Components::BadComponentReference::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::BadComponentReference::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::BadComponentReference::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_ctor.cpp:66

Components::BadComponentReference::BadComponentReference (
    Components::BadComponentReferenceReason _tao_reason
  )  : CORBA_UserException (
        "IDL:Components/BadComponentReference:1.0",
        "BadComponentReference"
      )
{
  this->reason = _tao_reason;
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::BadComponentReference::_type (void) const
{
  return ::Components::_tc_BadComponentReference;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_BadComponentReference[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  41,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f42), 
  ACE_NTOHL (0x6164436f), 
  ACE_NTOHL (0x6d706f6e), 
  ACE_NTOHL (0x656e7452), 
  ACE_NTOHL (0x65666572), 
  ACE_NTOHL (0x656e6365), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:Components/BadComponentReference:1.0
  22,
  ACE_NTOHL (0x42616443), 
  ACE_NTOHL (0x6f6d706f), 
  ACE_NTOHL (0x6e656e74), 
  ACE_NTOHL (0x52656665), 
  ACE_NTOHL (0x72656e63), 
  ACE_NTOHL (0x65000000),  // name = BadComponentReference
  1, // member count
  7,
  ACE_NTOHL (0x72656173), 
  ACE_NTOHL (0x6f6e0000),  // name = reason
  CORBA::tk_enum, // typecode kind
  164, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    47,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x436f6d70), 
    ACE_NTOHL (0x6f6e656e), 
    ACE_NTOHL (0x74732f42), 
    ACE_NTOHL (0x6164436f), 
    ACE_NTOHL (0x6d706f6e), 
    ACE_NTOHL (0x656e7452), 
    ACE_NTOHL (0x65666572), 
    ACE_NTOHL (0x656e6365), 
    ACE_NTOHL (0x52656173), 
    ACE_NTOHL (0x6f6e3a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/BadComponentReferenceReason:1.0
    28,
    ACE_NTOHL (0x42616443), 
    ACE_NTOHL (0x6f6d706f), 
    ACE_NTOHL (0x6e656e74), 
    ACE_NTOHL (0x52656665), 
    ACE_NTOHL (0x72656e63), 
    ACE_NTOHL (0x65526561), 
    ACE_NTOHL (0x736f6e00),  // name = BadComponentReferenceReason
    3, // member count
    20,
    ACE_NTOHL (0x4e4f4e5f), 
    ACE_NTOHL (0x4c4f4341), 
    ACE_NTOHL (0x4c5f5245), 
    ACE_NTOHL (0x46455245), 
    ACE_NTOHL (0x4e434500),  // name = NON_LOCAL_REFERENCE
    24,
    ACE_NTOHL (0x4e4f4e5f), 
    ACE_NTOHL (0x434f4d50), 
    ACE_NTOHL (0x4f4e454e), 
    ACE_NTOHL (0x545f5245), 
    ACE_NTOHL (0x46455245), 
    ACE_NTOHL (0x4e434500),  // name = NON_COMPONENT_REFERENCE
    16,
    ACE_NTOHL (0x57524f4e), 
    ACE_NTOHL (0x475f434f), 
    ACE_NTOHL (0x4e544149), 
    ACE_NTOHL (0x4e455200),  // name = WRONG_CONTAINER

};

static CORBA::TypeCode _tc_TAO_tc_Components_BadComponentReference (
    CORBA::tk_except,
    sizeof (_oc_Components_BadComponentReference),
    (char *) &_oc_Components_BadComponentReference,
    0,
    sizeof (Components::BadComponentReference)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_BadComponentReference,
    &_tc_TAO_tc_Components_BadComponentReference
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::PolicyMismatch::PolicyMismatch (void)
  : CORBA_UserException (
        "IDL:Components/PolicyMismatch:1.0",
        "PolicyMismatch"
      )
{
}

Components::PolicyMismatch::~PolicyMismatch (void)
{
}

Components::PolicyMismatch::PolicyMismatch (const ::Components::PolicyMismatch &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Components::PolicyMismatch&
Components::PolicyMismatch::operator= (const ::Components::PolicyMismatch &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

void Components::PolicyMismatch::_tao_any_destructor (void *_tao_void_pointer)
{
  PolicyMismatch *tmp = ACE_static_cast (PolicyMismatch*, _tao_void_pointer);
  delete tmp;
}

Components::PolicyMismatch *
Components::PolicyMismatch::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:Components/PolicyMismatch:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (PolicyMismatch *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::PolicyMismatch::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::PolicyMismatch, 0);
  return retval;
}

CORBA::Exception *
Components::PolicyMismatch::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::PolicyMismatch (*this),
      0
    );
  return result;
}

void Components::PolicyMismatch::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::PolicyMismatch::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::PolicyMismatch::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::PolicyMismatch::_type (void) const
{
  return ::Components::_tc_PolicyMismatch;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_PolicyMismatch[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f50), 
  ACE_NTOHL (0x6f6c6963), 
  ACE_NTOHL (0x794d6973), 
  ACE_NTOHL (0x6d617463), 
  ACE_NTOHL (0x683a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:Components/PolicyMismatch:1.0
  15,
  ACE_NTOHL (0x506f6c69), 
  ACE_NTOHL (0x63794d69), 
  ACE_NTOHL (0x736d6174), 
  ACE_NTOHL (0x63680000),  // name = PolicyMismatch
  0, // member count
};

static CORBA::TypeCode _tc_TAO_tc_Components_PolicyMismatch (
    CORBA::tk_except,
    sizeof (_oc_Components_PolicyMismatch),
    (char *) &_oc_Components_PolicyMismatch,
    0,
    sizeof (Components::PolicyMismatch)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_PolicyMismatch,
    &_tc_TAO_tc_Components_PolicyMismatch
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::PersistenceNotAvailable::PersistenceNotAvailable (void)
  : CORBA_UserException (
        "IDL:Components/PersistenceNotAvailable:1.0",
        "PersistenceNotAvailable"
      )
{
}

Components::PersistenceNotAvailable::~PersistenceNotAvailable (void)
{
}

Components::PersistenceNotAvailable::PersistenceNotAvailable (const ::Components::PersistenceNotAvailable &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Components::PersistenceNotAvailable&
Components::PersistenceNotAvailable::operator= (const ::Components::PersistenceNotAvailable &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

void Components::PersistenceNotAvailable::_tao_any_destructor (void *_tao_void_pointer)
{
  PersistenceNotAvailable *tmp = ACE_static_cast (PersistenceNotAvailable*, _tao_void_pointer);
  delete tmp;
}

Components::PersistenceNotAvailable *
Components::PersistenceNotAvailable::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:Components/PersistenceNotAvailable:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (PersistenceNotAvailable *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::PersistenceNotAvailable::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::PersistenceNotAvailable, 0);
  return retval;
}

CORBA::Exception *
Components::PersistenceNotAvailable::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::PersistenceNotAvailable (*this),
      0
    );
  return result;
}

void Components::PersistenceNotAvailable::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::PersistenceNotAvailable::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::PersistenceNotAvailable::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::PersistenceNotAvailable::_type (void) const
{
  return ::Components::_tc_PersistenceNotAvailable;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_PersistenceNotAvailable[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f50), 
  ACE_NTOHL (0x65727369), 
  ACE_NTOHL (0x7374656e), 
  ACE_NTOHL (0x63654e6f), 
  ACE_NTOHL (0x74417661), 
  ACE_NTOHL (0x696c6162), 
  ACE_NTOHL (0x6c653a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/PersistenceNotAvailable:1.0
  24,
  ACE_NTOHL (0x50657273), 
  ACE_NTOHL (0x69737465), 
  ACE_NTOHL (0x6e63654e), 
  ACE_NTOHL (0x6f744176), 
  ACE_NTOHL (0x61696c61), 
  ACE_NTOHL (0x626c6500),  // name = PersistenceNotAvailable
  0, // member count
};

static CORBA::TypeCode _tc_TAO_tc_Components_PersistenceNotAvailable (
    CORBA::tk_except,
    sizeof (_oc_Components_PersistenceNotAvailable),
    (char *) &_oc_Components_PersistenceNotAvailable,
    0,
    sizeof (Components::PersistenceNotAvailable)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_PersistenceNotAvailable,
    &_tc_TAO_tc_Components_PersistenceNotAvailable
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::UnknownActualHome::UnknownActualHome (void)
  : CORBA_UserException (
        "IDL:Components/UnknownActualHome:1.0",
        "UnknownActualHome"
      )
{
}

Components::UnknownActualHome::~UnknownActualHome (void)
{
}

Components::UnknownActualHome::UnknownActualHome (const ::Components::UnknownActualHome &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Components::UnknownActualHome&
Components::UnknownActualHome::operator= (const ::Components::UnknownActualHome &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

void Components::UnknownActualHome::_tao_any_destructor (void *_tao_void_pointer)
{
  UnknownActualHome *tmp = ACE_static_cast (UnknownActualHome*, _tao_void_pointer);
  delete tmp;
}

Components::UnknownActualHome *
Components::UnknownActualHome::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:Components/UnknownActualHome:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (UnknownActualHome *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::UnknownActualHome::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::UnknownActualHome, 0);
  return retval;
}

CORBA::Exception *
Components::UnknownActualHome::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::UnknownActualHome (*this),
      0
    );
  return result;
}

void Components::UnknownActualHome::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::UnknownActualHome::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::UnknownActualHome::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::UnknownActualHome::_type (void) const
{
  return ::Components::_tc_UnknownActualHome;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_UnknownActualHome[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f55), 
  ACE_NTOHL (0x6e6b6e6f), 
  ACE_NTOHL (0x776e4163), 
  ACE_NTOHL (0x7475616c), 
  ACE_NTOHL (0x486f6d65), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:Components/UnknownActualHome:1.0
  18,
  ACE_NTOHL (0x556e6b6e), 
  ACE_NTOHL (0x6f776e41), 
  ACE_NTOHL (0x63747561), 
  ACE_NTOHL (0x6c486f6d), 
  ACE_NTOHL (0x65000000),  // name = UnknownActualHome
  0, // member count
};

static CORBA::TypeCode _tc_TAO_tc_Components_UnknownActualHome (
    CORBA::tk_except,
    sizeof (_oc_Components_UnknownActualHome),
    (char *) &_oc_Components_UnknownActualHome,
    0,
    sizeof (Components::UnknownActualHome)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_UnknownActualHome,
    &_tc_TAO_tc_Components_UnknownActualHome
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::ProxyHomeNotSupported::ProxyHomeNotSupported (void)
  : CORBA_UserException (
        "IDL:Components/ProxyHomeNotSupported:1.0",
        "ProxyHomeNotSupported"
      )
{
}

Components::ProxyHomeNotSupported::~ProxyHomeNotSupported (void)
{
}

Components::ProxyHomeNotSupported::ProxyHomeNotSupported (const ::Components::ProxyHomeNotSupported &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Components::ProxyHomeNotSupported&
Components::ProxyHomeNotSupported::operator= (const ::Components::ProxyHomeNotSupported &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

void Components::ProxyHomeNotSupported::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyHomeNotSupported *tmp = ACE_static_cast (ProxyHomeNotSupported*, _tao_void_pointer);
  delete tmp;
}

Components::ProxyHomeNotSupported *
Components::ProxyHomeNotSupported::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:Components/ProxyHomeNotSupported:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (ProxyHomeNotSupported *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::ProxyHomeNotSupported::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::ProxyHomeNotSupported, 0);
  return retval;
}

CORBA::Exception *
Components::ProxyHomeNotSupported::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::ProxyHomeNotSupported (*this),
      0
    );
  return result;
}

void Components::ProxyHomeNotSupported::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::ProxyHomeNotSupported::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::ProxyHomeNotSupported::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::ProxyHomeNotSupported::_type (void) const
{
  return ::Components::_tc_ProxyHomeNotSupported;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_ProxyHomeNotSupported[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  41,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f50), 
  ACE_NTOHL (0x726f7879), 
  ACE_NTOHL (0x486f6d65), 
  ACE_NTOHL (0x4e6f7453), 
  ACE_NTOHL (0x7570706f), 
  ACE_NTOHL (0x72746564), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:Components/ProxyHomeNotSupported:1.0
  22,
  ACE_NTOHL (0x50726f78), 
  ACE_NTOHL (0x79486f6d), 
  ACE_NTOHL (0x654e6f74), 
  ACE_NTOHL (0x53757070), 
  ACE_NTOHL (0x6f727465), 
  ACE_NTOHL (0x64000000),  // name = ProxyHomeNotSupported
  0, // member count
};

static CORBA::TypeCode _tc_TAO_tc_Components_ProxyHomeNotSupported (
    CORBA::tk_except,
    sizeof (_oc_Components_ProxyHomeNotSupported),
    (char *) &_oc_Components_ProxyHomeNotSupported,
    0,
    sizeof (Components::ProxyHomeNotSupported)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ProxyHomeNotSupported,
    &_tc_TAO_tc_Components_ProxyHomeNotSupported
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

Components::InvalidStateIdData::InvalidStateIdData (void)
  : CORBA_UserException (
        "IDL:Components/InvalidStateIdData:1.0",
        "InvalidStateIdData"
      )
{
}

Components::InvalidStateIdData::~InvalidStateIdData (void)
{
}

Components::InvalidStateIdData::InvalidStateIdData (const ::Components::InvalidStateIdData &_tao_excp)
  : CORBA_UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

Components::InvalidStateIdData&
Components::InvalidStateIdData::operator= (const ::Components::InvalidStateIdData &_tao_excp)
{
  this->CORBA_UserException::operator= (_tao_excp);
  return *this;
}

void Components::InvalidStateIdData::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidStateIdData *tmp = ACE_static_cast (InvalidStateIdData*, _tao_void_pointer);
  delete tmp;
}

Components::InvalidStateIdData *
Components::InvalidStateIdData::_downcast (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:Components/InvalidStateIdData:1.0", exc->_rep_id ()))
    {
      return ACE_dynamic_cast (InvalidStateIdData *, exc);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *Components::InvalidStateIdData::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Components::InvalidStateIdData, 0);
  return retval;
}

CORBA::Exception *
Components::InvalidStateIdData::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::Components::InvalidStateIdData (*this),
      0
    );
  return result;
}

void Components::InvalidStateIdData::_raise (void)
{
  TAO_RAISE (*this);
}

void Components::InvalidStateIdData::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void Components::InvalidStateIdData::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr Components::InvalidStateIdData::_type (void) const
{
  return ::Components::_tc_InvalidStateIdData;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_InvalidStateIdData[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f49), 
  ACE_NTOHL (0x6e76616c), 
  ACE_NTOHL (0x69645374), 
  ACE_NTOHL (0x61746549), 
  ACE_NTOHL (0x64446174), 
  ACE_NTOHL (0x613a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:Components/InvalidStateIdData:1.0
  19,
  ACE_NTOHL (0x496e7661), 
  ACE_NTOHL (0x6c696453), 
  ACE_NTOHL (0x74617465), 
  ACE_NTOHL (0x49644461), 
  ACE_NTOHL (0x74610000),  // name = InvalidStateIdData
  0, // member count
};

static CORBA::TypeCode _tc_TAO_tc_Components_InvalidStateIdData (
    CORBA::tk_except,
    sizeof (_oc_Components_InvalidStateIdData),
    (char *) &_oc_Components_InvalidStateIdData,
    0,
    sizeof (Components::InvalidStateIdData)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_InvalidStateIdData,
    &_tc_TAO_tc_Components_InvalidStateIdData
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::HomeRegistration::_tao_class_id = 0;

Components::HomeRegistration_ptr
tao_Components_HomeRegistration_duplicate (
    Components::HomeRegistration_ptr p
  )
{
  return Components::HomeRegistration::_duplicate (p);
}

void
tao_Components_HomeRegistration_release (
    Components::HomeRegistration_ptr p
  )
{
  CORBA::release (p);
}

Components::HomeRegistration_ptr
tao_Components_HomeRegistration_nil (
    void
  )
{
  return Components::HomeRegistration::_nil ();
}

Components::HomeRegistration_ptr
tao_Components_HomeRegistration_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::HomeRegistration::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_HomeRegistration_upcast (
    void *src
  )
{
  Components::HomeRegistration **tmp =
    ACE_static_cast (Components::HomeRegistration **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::HomeRegistration_var
// *************************************************************

Components::HomeRegistration_var::HomeRegistration_var (void)
  : ptr_ (HomeRegistration::_nil ())
{}

::Components::HomeRegistration_ptr
Components::HomeRegistration_var::ptr (void) const
{
  return this->ptr_;
}

Components::HomeRegistration_var::HomeRegistration_var (const ::Components::HomeRegistration_var &p)
  : TAO_Base_var (),
    ptr_ (HomeRegistration::_duplicate (p.ptr ()))
{}

Components::HomeRegistration_var::~HomeRegistration_var (void)
{
  CORBA::release (this->ptr_);
}

Components::HomeRegistration_var &
Components::HomeRegistration_var::operator= (HomeRegistration_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::HomeRegistration_var &
Components::HomeRegistration_var::operator= (const ::Components::HomeRegistration_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::HomeRegistration::_duplicate (p.ptr ());
  }
  return *this;
}

Components::HomeRegistration_var::operator const ::Components::HomeRegistration_ptr &() const // cast
{
  return this->ptr_;
}

Components::HomeRegistration_var::operator ::Components::HomeRegistration_ptr &() // cast 
{
  return this->ptr_;
}

::Components::HomeRegistration_ptr
Components::HomeRegistration_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::HomeRegistration_ptr
Components::HomeRegistration_var::in (void) const
{
  return this->ptr_;
}

::Components::HomeRegistration_ptr &
Components::HomeRegistration_var::inout (void)
{
  return this->ptr_;
}

::Components::HomeRegistration_ptr &
Components::HomeRegistration_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::HomeRegistration::_nil ();
  return this->ptr_;
}

::Components::HomeRegistration_ptr
Components::HomeRegistration_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::HomeRegistration_ptr val = this->ptr_;
  this->ptr_ = ::Components::HomeRegistration::_nil ();
  return val;
}

::Components::HomeRegistration_ptr
Components::HomeRegistration_var::tao_duplicate (HomeRegistration_ptr p)
{
  return ::Components::HomeRegistration::_duplicate (p);
}

void
Components::HomeRegistration_var::tao_release (HomeRegistration_ptr p)
{
  CORBA::release (p);
}

::Components::HomeRegistration_ptr
Components::HomeRegistration_var::tao_nil (void)
{
  return ::Components::HomeRegistration::_nil ();
}

::Components::HomeRegistration_ptr
Components::HomeRegistration_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::HomeRegistration::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::HomeRegistration_var::tao_upcast (void *src)
{
  HomeRegistration **tmp =
    ACE_static_cast (HomeRegistration **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::HomeRegistration_out
// *************************************************************

Components::HomeRegistration_out::HomeRegistration_out (HomeRegistration_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::HomeRegistration::_nil ();
}

Components::HomeRegistration_out::HomeRegistration_out (HomeRegistration_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::HomeRegistration::_nil ();
}

Components::HomeRegistration_out::HomeRegistration_out (const ::Components::HomeRegistration_out &p)
  : ptr_ (ACE_const_cast (HomeRegistration_out &, p).ptr_)
{}

::Components::HomeRegistration_out &
Components::HomeRegistration_out::operator= (const ::Components::HomeRegistration_out &p)
{
  this->ptr_ = ACE_const_cast (HomeRegistration_out&, p).ptr_;
  return *this;
}

Components::HomeRegistration_out &
Components::HomeRegistration_out::operator= (const ::Components::HomeRegistration_var &p)
{
  this->ptr_ = ::Components::HomeRegistration::_duplicate (p.ptr ());
  return *this;
}

Components::HomeRegistration_out &
Components::HomeRegistration_out::operator= (HomeRegistration_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::HomeRegistration_out::operator ::Components::HomeRegistration_ptr &() // cast
{
  return this->ptr_;
}

::Components::HomeRegistration_ptr &
Components::HomeRegistration_out::ptr (void)
{
  return this->ptr_;
}

::Components::HomeRegistration_ptr
Components::HomeRegistration_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::HomeRegistration::HomeRegistration (void)
{}

Components::HomeRegistration::~HomeRegistration (void)
{}

void 
Components::HomeRegistration::_tao_any_destructor (void *_tao_void_pointer)
{
  HomeRegistration *tmp = ACE_static_cast (HomeRegistration *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::HomeRegistration_ptr
Components::HomeRegistration::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return HomeRegistration::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::HomeRegistration_ptr 
Components::HomeRegistration::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return HomeRegistration::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          HomeRegistration_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &HomeRegistration::_tao_class_id
                )
            )
        );
}

Components::HomeRegistration_ptr
Components::HomeRegistration::_duplicate (HomeRegistration_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *Components::HomeRegistration::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, HomeRegistration)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::HomeRegistration::_interface_repository_id (void) const
{
  return "IDL:Components/HomeRegistration:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_HomeRegistration[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  36,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f48), 
  ACE_NTOHL (0x6f6d6552), 
  ACE_NTOHL (0x65676973), 
  ACE_NTOHL (0x74726174), 
  ACE_NTOHL (0x696f6e3a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:Components/HomeRegistration:1.0
  17,
  ACE_NTOHL (0x486f6d65), 
  ACE_NTOHL (0x52656769), 
  ACE_NTOHL (0x73747261), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x0),  // name = HomeRegistration
};

static CORBA::TypeCode _tc_TAO_tc_Components_HomeRegistration (
    CORBA::tk_objref,
    sizeof (_oc_Components_HomeRegistration),
    (char *) &_oc_Components_HomeRegistration,
    0,
    sizeof (Components::HomeRegistration)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_HomeRegistration,
    &_tc_TAO_tc_Components_HomeRegistration
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::CCM2Context::_tao_class_id = 0;

Components::CCM2Context_ptr
tao_Components_CCM2Context_duplicate (
    Components::CCM2Context_ptr p
  )
{
  return Components::CCM2Context::_duplicate (p);
}

void
tao_Components_CCM2Context_release (
    Components::CCM2Context_ptr p
  )
{
  CORBA::release (p);
}

Components::CCM2Context_ptr
tao_Components_CCM2Context_nil (
    void
  )
{
  return Components::CCM2Context::_nil ();
}

Components::CCM2Context_ptr
tao_Components_CCM2Context_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::CCM2Context::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_CCM2Context_upcast (
    void *src
  )
{
  Components::CCM2Context **tmp =
    ACE_static_cast (Components::CCM2Context **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::CCM2Context_var
// *************************************************************

Components::CCM2Context_var::CCM2Context_var (void)
  : ptr_ (CCM2Context::_nil ())
{}

::Components::CCM2Context_ptr
Components::CCM2Context_var::ptr (void) const
{
  return this->ptr_;
}

Components::CCM2Context_var::CCM2Context_var (const ::Components::CCM2Context_var &p)
  : TAO_Base_var (),
    ptr_ (CCM2Context::_duplicate (p.ptr ()))
{}

Components::CCM2Context_var::~CCM2Context_var (void)
{
  CORBA::release (this->ptr_);
}

Components::CCM2Context_var &
Components::CCM2Context_var::operator= (CCM2Context_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::CCM2Context_var &
Components::CCM2Context_var::operator= (const ::Components::CCM2Context_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::CCM2Context::_duplicate (p.ptr ());
  }
  return *this;
}

Components::CCM2Context_var::operator const ::Components::CCM2Context_ptr &() const // cast
{
  return this->ptr_;
}

Components::CCM2Context_var::operator ::Components::CCM2Context_ptr &() // cast 
{
  return this->ptr_;
}

::Components::CCM2Context_ptr
Components::CCM2Context_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::CCM2Context_ptr
Components::CCM2Context_var::in (void) const
{
  return this->ptr_;
}

::Components::CCM2Context_ptr &
Components::CCM2Context_var::inout (void)
{
  return this->ptr_;
}

::Components::CCM2Context_ptr &
Components::CCM2Context_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::CCM2Context::_nil ();
  return this->ptr_;
}

::Components::CCM2Context_ptr
Components::CCM2Context_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::CCM2Context_ptr val = this->ptr_;
  this->ptr_ = ::Components::CCM2Context::_nil ();
  return val;
}

::Components::CCM2Context_ptr
Components::CCM2Context_var::tao_duplicate (CCM2Context_ptr p)
{
  return ::Components::CCM2Context::_duplicate (p);
}

void
Components::CCM2Context_var::tao_release (CCM2Context_ptr p)
{
  CORBA::release (p);
}

::Components::CCM2Context_ptr
Components::CCM2Context_var::tao_nil (void)
{
  return ::Components::CCM2Context::_nil ();
}

::Components::CCM2Context_ptr
Components::CCM2Context_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::CCM2Context::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::CCM2Context_var::tao_upcast (void *src)
{
  CCM2Context **tmp =
    ACE_static_cast (CCM2Context **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::CCM2Context_out
// *************************************************************

Components::CCM2Context_out::CCM2Context_out (CCM2Context_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::CCM2Context::_nil ();
}

Components::CCM2Context_out::CCM2Context_out (CCM2Context_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::CCM2Context::_nil ();
}

Components::CCM2Context_out::CCM2Context_out (const ::Components::CCM2Context_out &p)
  : ptr_ (ACE_const_cast (CCM2Context_out &, p).ptr_)
{}

::Components::CCM2Context_out &
Components::CCM2Context_out::operator= (const ::Components::CCM2Context_out &p)
{
  this->ptr_ = ACE_const_cast (CCM2Context_out&, p).ptr_;
  return *this;
}

Components::CCM2Context_out &
Components::CCM2Context_out::operator= (const ::Components::CCM2Context_var &p)
{
  this->ptr_ = ::Components::CCM2Context::_duplicate (p.ptr ());
  return *this;
}

Components::CCM2Context_out &
Components::CCM2Context_out::operator= (CCM2Context_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::CCM2Context_out::operator ::Components::CCM2Context_ptr &() // cast
{
  return this->ptr_;
}

::Components::CCM2Context_ptr &
Components::CCM2Context_out::ptr (void)
{
  return this->ptr_;
}

::Components::CCM2Context_ptr
Components::CCM2Context_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::CCM2Context::CCM2Context (void)
{}

Components::CCM2Context::~CCM2Context (void)
{}

void 
Components::CCM2Context::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM2Context *tmp = ACE_static_cast (CCM2Context *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::CCM2Context_ptr
Components::CCM2Context::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM2Context::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::CCM2Context_ptr 
Components::CCM2Context::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM2Context::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM2Context_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM2Context::_tao_class_id
                )
            )
        );
}

Components::CCM2Context_ptr
Components::CCM2Context::_duplicate (CCM2Context_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *Components::CCM2Context::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, CCM2Context)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::CCMContext::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::CCMContext_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::CCM2Context::_interface_repository_id (void) const
{
  return "IDL:Components/CCM2Context:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_CCM2Context[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f43), 
  ACE_NTOHL (0x434d3243), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/CCM2Context:1.0
  12,
  ACE_NTOHL (0x43434d32), 
  ACE_NTOHL (0x436f6e74), 
  ACE_NTOHL (0x65787400),  // name = CCM2Context
};

static CORBA::TypeCode _tc_TAO_tc_Components_CCM2Context (
    CORBA::tk_objref,
    sizeof (_oc_Components_CCM2Context),
    (char *) &_oc_Components_CCM2Context,
    0,
    sizeof (Components::CCM2Context)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_CCM2Context,
    &_tc_TAO_tc_Components_CCM2Context
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::ProxyHomeRegistration::_tao_class_id = 0;

Components::ProxyHomeRegistration_ptr
tao_Components_ProxyHomeRegistration_duplicate (
    Components::ProxyHomeRegistration_ptr p
  )
{
  return Components::ProxyHomeRegistration::_duplicate (p);
}

void
tao_Components_ProxyHomeRegistration_release (
    Components::ProxyHomeRegistration_ptr p
  )
{
  CORBA::release (p);
}

Components::ProxyHomeRegistration_ptr
tao_Components_ProxyHomeRegistration_nil (
    void
  )
{
  return Components::ProxyHomeRegistration::_nil ();
}

Components::ProxyHomeRegistration_ptr
tao_Components_ProxyHomeRegistration_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::ProxyHomeRegistration::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_ProxyHomeRegistration_upcast (
    void *src
  )
{
  Components::ProxyHomeRegistration **tmp =
    ACE_static_cast (Components::ProxyHomeRegistration **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::ProxyHomeRegistration_var
// *************************************************************

Components::ProxyHomeRegistration_var::ProxyHomeRegistration_var (void)
  : ptr_ (ProxyHomeRegistration::_nil ())
{}

::Components::ProxyHomeRegistration_ptr
Components::ProxyHomeRegistration_var::ptr (void) const
{
  return this->ptr_;
}

Components::ProxyHomeRegistration_var::ProxyHomeRegistration_var (const ::Components::ProxyHomeRegistration_var &p)
  : TAO_Base_var (),
    ptr_ (ProxyHomeRegistration::_duplicate (p.ptr ()))
{}

Components::ProxyHomeRegistration_var::~ProxyHomeRegistration_var (void)
{
  CORBA::release (this->ptr_);
}

Components::ProxyHomeRegistration_var &
Components::ProxyHomeRegistration_var::operator= (ProxyHomeRegistration_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::ProxyHomeRegistration_var &
Components::ProxyHomeRegistration_var::operator= (const ::Components::ProxyHomeRegistration_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::ProxyHomeRegistration::_duplicate (p.ptr ());
  }
  return *this;
}

Components::ProxyHomeRegistration_var::operator const ::Components::ProxyHomeRegistration_ptr &() const // cast
{
  return this->ptr_;
}

Components::ProxyHomeRegistration_var::operator ::Components::ProxyHomeRegistration_ptr &() // cast 
{
  return this->ptr_;
}

::Components::ProxyHomeRegistration_ptr
Components::ProxyHomeRegistration_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::ProxyHomeRegistration_ptr
Components::ProxyHomeRegistration_var::in (void) const
{
  return this->ptr_;
}

::Components::ProxyHomeRegistration_ptr &
Components::ProxyHomeRegistration_var::inout (void)
{
  return this->ptr_;
}

::Components::ProxyHomeRegistration_ptr &
Components::ProxyHomeRegistration_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::ProxyHomeRegistration::_nil ();
  return this->ptr_;
}

::Components::ProxyHomeRegistration_ptr
Components::ProxyHomeRegistration_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::ProxyHomeRegistration_ptr val = this->ptr_;
  this->ptr_ = ::Components::ProxyHomeRegistration::_nil ();
  return val;
}

::Components::ProxyHomeRegistration_ptr
Components::ProxyHomeRegistration_var::tao_duplicate (ProxyHomeRegistration_ptr p)
{
  return ::Components::ProxyHomeRegistration::_duplicate (p);
}

void
Components::ProxyHomeRegistration_var::tao_release (ProxyHomeRegistration_ptr p)
{
  CORBA::release (p);
}

::Components::ProxyHomeRegistration_ptr
Components::ProxyHomeRegistration_var::tao_nil (void)
{
  return ::Components::ProxyHomeRegistration::_nil ();
}

::Components::ProxyHomeRegistration_ptr
Components::ProxyHomeRegistration_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::ProxyHomeRegistration::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::ProxyHomeRegistration_var::tao_upcast (void *src)
{
  ProxyHomeRegistration **tmp =
    ACE_static_cast (ProxyHomeRegistration **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::ProxyHomeRegistration_out
// *************************************************************

Components::ProxyHomeRegistration_out::ProxyHomeRegistration_out (ProxyHomeRegistration_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::ProxyHomeRegistration::_nil ();
}

Components::ProxyHomeRegistration_out::ProxyHomeRegistration_out (ProxyHomeRegistration_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::ProxyHomeRegistration::_nil ();
}

Components::ProxyHomeRegistration_out::ProxyHomeRegistration_out (const ::Components::ProxyHomeRegistration_out &p)
  : ptr_ (ACE_const_cast (ProxyHomeRegistration_out &, p).ptr_)
{}

::Components::ProxyHomeRegistration_out &
Components::ProxyHomeRegistration_out::operator= (const ::Components::ProxyHomeRegistration_out &p)
{
  this->ptr_ = ACE_const_cast (ProxyHomeRegistration_out&, p).ptr_;
  return *this;
}

Components::ProxyHomeRegistration_out &
Components::ProxyHomeRegistration_out::operator= (const ::Components::ProxyHomeRegistration_var &p)
{
  this->ptr_ = ::Components::ProxyHomeRegistration::_duplicate (p.ptr ());
  return *this;
}

Components::ProxyHomeRegistration_out &
Components::ProxyHomeRegistration_out::operator= (ProxyHomeRegistration_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::ProxyHomeRegistration_out::operator ::Components::ProxyHomeRegistration_ptr &() // cast
{
  return this->ptr_;
}

::Components::ProxyHomeRegistration_ptr &
Components::ProxyHomeRegistration_out::ptr (void)
{
  return this->ptr_;
}

::Components::ProxyHomeRegistration_ptr
Components::ProxyHomeRegistration_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::ProxyHomeRegistration::ProxyHomeRegistration (void)
{}

Components::ProxyHomeRegistration::~ProxyHomeRegistration (void)
{}

void 
Components::ProxyHomeRegistration::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyHomeRegistration *tmp = ACE_static_cast (ProxyHomeRegistration *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::ProxyHomeRegistration_ptr
Components::ProxyHomeRegistration::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return ProxyHomeRegistration::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::ProxyHomeRegistration_ptr 
Components::ProxyHomeRegistration::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ProxyHomeRegistration::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          ProxyHomeRegistration_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &ProxyHomeRegistration::_tao_class_id
                )
            )
        );
}

Components::ProxyHomeRegistration_ptr
Components::ProxyHomeRegistration::_duplicate (ProxyHomeRegistration_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *Components::ProxyHomeRegistration::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, ProxyHomeRegistration)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, HomeRegistration)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::HomeRegistration_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::ProxyHomeRegistration::_interface_repository_id (void) const
{
  return "IDL:Components/ProxyHomeRegistration:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_ProxyHomeRegistration[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  41,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f50), 
  ACE_NTOHL (0x726f7879), 
  ACE_NTOHL (0x486f6d65), 
  ACE_NTOHL (0x52656769), 
  ACE_NTOHL (0x73747261), 
  ACE_NTOHL (0x74696f6e), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:Components/ProxyHomeRegistration:1.0
  22,
  ACE_NTOHL (0x50726f78), 
  ACE_NTOHL (0x79486f6d), 
  ACE_NTOHL (0x65526567), 
  ACE_NTOHL (0x69737472), 
  ACE_NTOHL (0x6174696f), 
  ACE_NTOHL (0x6e000000),  // name = ProxyHomeRegistration
};

static CORBA::TypeCode _tc_TAO_tc_Components_ProxyHomeRegistration (
    CORBA::tk_objref,
    sizeof (_oc_Components_ProxyHomeRegistration),
    (char *) &_oc_Components_ProxyHomeRegistration,
    0,
    sizeof (Components::ProxyHomeRegistration)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ProxyHomeRegistration,
    &_tc_TAO_tc_Components_ProxyHomeRegistration
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::Session2Context::_tao_class_id = 0;

Components::Session2Context_ptr
tao_Components_Session2Context_duplicate (
    Components::Session2Context_ptr p
  )
{
  return Components::Session2Context::_duplicate (p);
}

void
tao_Components_Session2Context_release (
    Components::Session2Context_ptr p
  )
{
  CORBA::release (p);
}

Components::Session2Context_ptr
tao_Components_Session2Context_nil (
    void
  )
{
  return Components::Session2Context::_nil ();
}

Components::Session2Context_ptr
tao_Components_Session2Context_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::Session2Context::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_Session2Context_upcast (
    void *src
  )
{
  Components::Session2Context **tmp =
    ACE_static_cast (Components::Session2Context **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::Session2Context_var
// *************************************************************

Components::Session2Context_var::Session2Context_var (void)
  : ptr_ (Session2Context::_nil ())
{}

::Components::Session2Context_ptr
Components::Session2Context_var::ptr (void) const
{
  return this->ptr_;
}

Components::Session2Context_var::Session2Context_var (const ::Components::Session2Context_var &p)
  : TAO_Base_var (),
    ptr_ (Session2Context::_duplicate (p.ptr ()))
{}

Components::Session2Context_var::~Session2Context_var (void)
{
  CORBA::release (this->ptr_);
}

Components::Session2Context_var &
Components::Session2Context_var::operator= (Session2Context_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::Session2Context_var &
Components::Session2Context_var::operator= (const ::Components::Session2Context_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::Session2Context::_duplicate (p.ptr ());
  }
  return *this;
}

Components::Session2Context_var::operator const ::Components::Session2Context_ptr &() const // cast
{
  return this->ptr_;
}

Components::Session2Context_var::operator ::Components::Session2Context_ptr &() // cast 
{
  return this->ptr_;
}

::Components::Session2Context_ptr
Components::Session2Context_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::Session2Context_ptr
Components::Session2Context_var::in (void) const
{
  return this->ptr_;
}

::Components::Session2Context_ptr &
Components::Session2Context_var::inout (void)
{
  return this->ptr_;
}

::Components::Session2Context_ptr &
Components::Session2Context_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Session2Context::_nil ();
  return this->ptr_;
}

::Components::Session2Context_ptr
Components::Session2Context_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::Session2Context_ptr val = this->ptr_;
  this->ptr_ = ::Components::Session2Context::_nil ();
  return val;
}

::Components::Session2Context_ptr
Components::Session2Context_var::tao_duplicate (Session2Context_ptr p)
{
  return ::Components::Session2Context::_duplicate (p);
}

void
Components::Session2Context_var::tao_release (Session2Context_ptr p)
{
  CORBA::release (p);
}

::Components::Session2Context_ptr
Components::Session2Context_var::tao_nil (void)
{
  return ::Components::Session2Context::_nil ();
}

::Components::Session2Context_ptr
Components::Session2Context_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::Session2Context::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::Session2Context_var::tao_upcast (void *src)
{
  Session2Context **tmp =
    ACE_static_cast (Session2Context **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::Session2Context_out
// *************************************************************

Components::Session2Context_out::Session2Context_out (Session2Context_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::Session2Context::_nil ();
}

Components::Session2Context_out::Session2Context_out (Session2Context_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Session2Context::_nil ();
}

Components::Session2Context_out::Session2Context_out (const ::Components::Session2Context_out &p)
  : ptr_ (ACE_const_cast (Session2Context_out &, p).ptr_)
{}

::Components::Session2Context_out &
Components::Session2Context_out::operator= (const ::Components::Session2Context_out &p)
{
  this->ptr_ = ACE_const_cast (Session2Context_out&, p).ptr_;
  return *this;
}

Components::Session2Context_out &
Components::Session2Context_out::operator= (const ::Components::Session2Context_var &p)
{
  this->ptr_ = ::Components::Session2Context::_duplicate (p.ptr ());
  return *this;
}

Components::Session2Context_out &
Components::Session2Context_out::operator= (Session2Context_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::Session2Context_out::operator ::Components::Session2Context_ptr &() // cast
{
  return this->ptr_;
}

::Components::Session2Context_ptr &
Components::Session2Context_out::ptr (void)
{
  return this->ptr_;
}

::Components::Session2Context_ptr
Components::Session2Context_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::Session2Context::Session2Context (void)
{}

Components::Session2Context::~Session2Context (void)
{}

void 
Components::Session2Context::_tao_any_destructor (void *_tao_void_pointer)
{
  Session2Context *tmp = ACE_static_cast (Session2Context *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::Session2Context_ptr
Components::Session2Context::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return Session2Context::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::Session2Context_ptr 
Components::Session2Context::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return Session2Context::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          Session2Context_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &Session2Context::_tao_class_id
                )
            )
        );
}

Components::Session2Context_ptr
Components::Session2Context::_duplicate (Session2Context_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *Components::Session2Context::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, Session2Context)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::SessionContext::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::SessionContext_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, CCM2Context)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::CCM2Context_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::CCMContext::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::CCMContext_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::Session2Context::_interface_repository_id (void) const
{
  return "IDL:Components/Session2Context:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Session2Context[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f53), 
  ACE_NTOHL (0x65737369), 
  ACE_NTOHL (0x6f6e3243), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/Session2Context:1.0
  16,
  ACE_NTOHL (0x53657373), 
  ACE_NTOHL (0x696f6e32), 
  ACE_NTOHL (0x436f6e74), 
  ACE_NTOHL (0x65787400),  // name = Session2Context
};

static CORBA::TypeCode _tc_TAO_tc_Components_Session2Context (
    CORBA::tk_objref,
    sizeof (_oc_Components_Session2Context),
    (char *) &_oc_Components_Session2Context,
    0,
    sizeof (Components::Session2Context)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Session2Context,
    &_tc_TAO_tc_Components_Session2Context
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_StateIdValue[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f53), 
  ACE_NTOHL (0x74617465), 
  ACE_NTOHL (0x49645661), 
  ACE_NTOHL (0x6c75653a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:Components/StateIdValue:1.0
  13,
  ACE_NTOHL (0x53746174), 
  ACE_NTOHL (0x65496456), 
  ACE_NTOHL (0x616c7565), 
  ACE_NTOHL (0x0),  // name = StateIdValue
  2, // value modifier
  CORBA::tk_null, // no stateful base valuetype

  0, // member count
};

static CORBA::TypeCode _tc_TAO_tc_Components_StateIdValue (
    CORBA::tk_value,
    sizeof (_oc_Components_StateIdValue),
    (char *) &_oc_Components_StateIdValue,
    0,
    sizeof (Components::StateIdValue)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_StateIdValue,
    &_tc_TAO_tc_Components_StateIdValue
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_cs.cpp:95

void
tao_Components_StateIdValue_add_ref (
    Components::StateIdValue *p
  )
{
  CORBA::add_ref (p);
}

void
tao_Components_StateIdValue_remove_ref (
    Components::StateIdValue *p
  )
{
  CORBA::remove_ref (p);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:298

// *************************************************************
// Operations for class Components::StateIdValue_var
// *************************************************************

Components::StateIdValue_var::StateIdValue_var (void)
  : ptr_ (0)
{}

Components::StateIdValue_var::StateIdValue_var (StateIdValue* p)
  : ptr_ (p)
{}

Components::StateIdValue_var::StateIdValue_var (const StateIdValue* p)
  : ptr_ (ACE_const_cast (StateIdValue *, p))
{}

Components::StateIdValue *
Components::StateIdValue_var::ptr (void) const
{
  return this->ptr_;
}

Components::StateIdValue_var::StateIdValue_var (const StateIdValue_var &p)
{
  CORBA::add_ref (p.ptr ());
  this->ptr_ = p.ptr ();
}

Components::StateIdValue_var::~StateIdValue_var (void) // destructor
{
  CORBA::remove_ref (this->ptr_);
}

Components::StateIdValue_var &
Components::StateIdValue_var::operator= (StateIdValue *p)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::StateIdValue_var &
Components::StateIdValue_var::operator= (const StateIdValue_var &p)
{
  if (this != &p)
  {
    CORBA::remove_ref (this->ptr_);
    StateIdValue *tmp = p.ptr ();
    CORBA::add_ref (tmp);
    this->ptr_ = tmp;
  }
  
  return *this;
}

Components::StateIdValue_var::operator const Components::StateIdValue* () const // cast
{
  return this->ptr_;
}

Components::StateIdValue_var::operator Components::StateIdValue* () // cast 
{
  return this->ptr_;
}

Components::StateIdValue *
Components::StateIdValue_var::operator-> (void) const
{
  return this->ptr_;
}

Components::StateIdValue *
Components::StateIdValue_var::in (void) const
{
  return this->ptr_;
}

Components::StateIdValue *&
Components::StateIdValue_var::inout (void)
{
  return this->ptr_;
}

Components::StateIdValue *&
Components::StateIdValue_var::out (void)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
  return this->ptr_;
}

Components::StateIdValue *
Components::StateIdValue_var::_retn (void)
{
  // yield ownership of managed obj reference
  StateIdValue* tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

void
Components::StateIdValue_var::tao_add_ref (
    StateIdValue *p
  )
{
  CORBA::add_ref (p);
}

void
Components::StateIdValue_var::tao_remove_ref (
    StateIdValue *p
  )
{
  CORBA::remove_ref (p);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:568

// *************************************************************
// Operations for class Components::StateIdValue_out
// *************************************************************

Components::StateIdValue_out::StateIdValue_out (StateIdValue *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

Components::StateIdValue_out::StateIdValue_out (StateIdValue_var &p)
  : ptr_ (p.out ())
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
}

Components::StateIdValue_out::StateIdValue_out (const StateIdValue_out &p)
  : ptr_ (ACE_const_cast (StateIdValue_out&, p).ptr_)
{}

Components::StateIdValue_out &
Components::StateIdValue_out::operator= (const StateIdValue_out &p)
{
  this->ptr_ = ACE_const_cast (StateIdValue_out&, p).ptr_;
  return *this;
}

Components::StateIdValue_out &
Components::StateIdValue_out::operator= (const StateIdValue_var &p)
{
  StateIdValue *tmp = p.ptr ();
  CORBA::add_ref (tmp);
  this->ptr_ = tmp;
  return *this;
}

Components::StateIdValue_out &
Components::StateIdValue_out::operator= (StateIdValue *p)
{
  this->ptr_ = p;
  return *this;
}

Components::StateIdValue_out::operator Components::StateIdValue*& () // cast
{
  return this->ptr_;
}

Components::StateIdValue *&
Components::StateIdValue_out::ptr (void) // ptr
{
  return this->ptr_;
}

Components::StateIdValue *
Components::StateIdValue_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_cs.cpp:138

Components::StateIdValue *
Components::StateIdValue::_downcast (CORBA::ValueBase *v)
{
  if (v == 0)
    {
      return 0;
    }
  
  return (StateIdValue *) v->_tao_obv_narrow ((ptr_arith_t) &_downcast);
}

const char *
Components::StateIdValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void *
Components::StateIdValue::_tao_obv_narrow (ptr_arith_t type_id)
{
  if (type_id == (ptr_arith_t) &_downcast)
    {
      return this;
    }
  
  void *rval = 0;
  
  return rval;
}

void
Components::StateIdValue::_tao_any_destructor (void *_tao_void_pointer)
{
  StateIdValue *tmp =
    ACE_static_cast (
        StateIdValue *,
        _tao_void_pointer
      );
  delete tmp;
}

CORBA::Boolean Components::StateIdValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    StateIdValue *&new_object
  )
{
  CORBA::ValueBase *base = 0;
  CORBA::ValueFactory_var factory;
  CORBA::Boolean retval =
    CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        factory,
        base,
        StateIdValue::_tao_obv_static_repository_id ()
      );
  
  if (retval == 0)
    {
      return 0;
    }
  
  if (factory.in () != 0)
    {
      base = factory->create_for_unmarshal ();
      
      if (base == 0)
        {
          return 0;  // %! except.?
        }
      
      retval = base->_tao_unmarshal_v (strm);
      
      if (retval == 0)
        {
          return 0;
        }
    }
  
  // Now base must be null or point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = StateIdValue::_downcast (base);
  return retval;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::StateIdFactory::_tao_class_id = 0;

Components::StateIdFactory_ptr
tao_Components_StateIdFactory_duplicate (
    Components::StateIdFactory_ptr p
  )
{
  return Components::StateIdFactory::_duplicate (p);
}

void
tao_Components_StateIdFactory_release (
    Components::StateIdFactory_ptr p
  )
{
  CORBA::release (p);
}

Components::StateIdFactory_ptr
tao_Components_StateIdFactory_nil (
    void
  )
{
  return Components::StateIdFactory::_nil ();
}

Components::StateIdFactory_ptr
tao_Components_StateIdFactory_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::StateIdFactory::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_StateIdFactory_upcast (
    void *src
  )
{
  Components::StateIdFactory **tmp =
    ACE_static_cast (Components::StateIdFactory **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::StateIdFactory_var
// *************************************************************

Components::StateIdFactory_var::StateIdFactory_var (void)
  : ptr_ (StateIdFactory::_nil ())
{}

::Components::StateIdFactory_ptr
Components::StateIdFactory_var::ptr (void) const
{
  return this->ptr_;
}

Components::StateIdFactory_var::StateIdFactory_var (const ::Components::StateIdFactory_var &p)
  : TAO_Base_var (),
    ptr_ (StateIdFactory::_duplicate (p.ptr ()))
{}

Components::StateIdFactory_var::~StateIdFactory_var (void)
{
  CORBA::release (this->ptr_);
}

Components::StateIdFactory_var &
Components::StateIdFactory_var::operator= (StateIdFactory_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::StateIdFactory_var &
Components::StateIdFactory_var::operator= (const ::Components::StateIdFactory_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::StateIdFactory::_duplicate (p.ptr ());
  }
  return *this;
}

Components::StateIdFactory_var::operator const ::Components::StateIdFactory_ptr &() const // cast
{
  return this->ptr_;
}

Components::StateIdFactory_var::operator ::Components::StateIdFactory_ptr &() // cast 
{
  return this->ptr_;
}

::Components::StateIdFactory_ptr
Components::StateIdFactory_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::StateIdFactory_ptr
Components::StateIdFactory_var::in (void) const
{
  return this->ptr_;
}

::Components::StateIdFactory_ptr &
Components::StateIdFactory_var::inout (void)
{
  return this->ptr_;
}

::Components::StateIdFactory_ptr &
Components::StateIdFactory_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::StateIdFactory::_nil ();
  return this->ptr_;
}

::Components::StateIdFactory_ptr
Components::StateIdFactory_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::StateIdFactory_ptr val = this->ptr_;
  this->ptr_ = ::Components::StateIdFactory::_nil ();
  return val;
}

::Components::StateIdFactory_ptr
Components::StateIdFactory_var::tao_duplicate (StateIdFactory_ptr p)
{
  return ::Components::StateIdFactory::_duplicate (p);
}

void
Components::StateIdFactory_var::tao_release (StateIdFactory_ptr p)
{
  CORBA::release (p);
}

::Components::StateIdFactory_ptr
Components::StateIdFactory_var::tao_nil (void)
{
  return ::Components::StateIdFactory::_nil ();
}

::Components::StateIdFactory_ptr
Components::StateIdFactory_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::StateIdFactory::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::StateIdFactory_var::tao_upcast (void *src)
{
  StateIdFactory **tmp =
    ACE_static_cast (StateIdFactory **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::StateIdFactory_out
// *************************************************************

Components::StateIdFactory_out::StateIdFactory_out (StateIdFactory_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::StateIdFactory::_nil ();
}

Components::StateIdFactory_out::StateIdFactory_out (StateIdFactory_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::StateIdFactory::_nil ();
}

Components::StateIdFactory_out::StateIdFactory_out (const ::Components::StateIdFactory_out &p)
  : ptr_ (ACE_const_cast (StateIdFactory_out &, p).ptr_)
{}

::Components::StateIdFactory_out &
Components::StateIdFactory_out::operator= (const ::Components::StateIdFactory_out &p)
{
  this->ptr_ = ACE_const_cast (StateIdFactory_out&, p).ptr_;
  return *this;
}

Components::StateIdFactory_out &
Components::StateIdFactory_out::operator= (const ::Components::StateIdFactory_var &p)
{
  this->ptr_ = ::Components::StateIdFactory::_duplicate (p.ptr ());
  return *this;
}

Components::StateIdFactory_out &
Components::StateIdFactory_out::operator= (StateIdFactory_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::StateIdFactory_out::operator ::Components::StateIdFactory_ptr &() // cast
{
  return this->ptr_;
}

::Components::StateIdFactory_ptr &
Components::StateIdFactory_out::ptr (void)
{
  return this->ptr_;
}

::Components::StateIdFactory_ptr
Components::StateIdFactory_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::StateIdFactory::StateIdFactory (void)
{}

Components::StateIdFactory::~StateIdFactory (void)
{}

void 
Components::StateIdFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  StateIdFactory *tmp = ACE_static_cast (StateIdFactory *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::StateIdFactory_ptr
Components::StateIdFactory::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return StateIdFactory::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::StateIdFactory_ptr 
Components::StateIdFactory::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return StateIdFactory::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          StateIdFactory_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &StateIdFactory::_tao_class_id
                )
            )
        );
}

Components::StateIdFactory_ptr
Components::StateIdFactory::_duplicate (StateIdFactory_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *Components::StateIdFactory::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, StateIdFactory)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::StateIdFactory::_interface_repository_id (void) const
{
  return "IDL:Components/StateIdFactory:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_StateIdFactory[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f53), 
  ACE_NTOHL (0x74617465), 
  ACE_NTOHL (0x49644661), 
  ACE_NTOHL (0x63746f72), 
  ACE_NTOHL (0x793a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:Components/StateIdFactory:1.0
  15,
  ACE_NTOHL (0x53746174), 
  ACE_NTOHL (0x65496446), 
  ACE_NTOHL (0x6163746f), 
  ACE_NTOHL (0x72790000),  // name = StateIdFactory
};

static CORBA::TypeCode _tc_TAO_tc_Components_StateIdFactory (
    CORBA::tk_objref,
    sizeof (_oc_Components_StateIdFactory),
    (char *) &_oc_Components_StateIdFactory,
    0,
    sizeof (Components::StateIdFactory)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_StateIdFactory,
    &_tc_TAO_tc_Components_StateIdFactory
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_PersistentIdValue[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  37,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f50), 
  ACE_NTOHL (0x65727369), 
  ACE_NTOHL (0x7374656e), 
  ACE_NTOHL (0x74496456), 
  ACE_NTOHL (0x616c7565), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:Components/PersistentIdValue:1.0
  18,
  ACE_NTOHL (0x50657273), 
  ACE_NTOHL (0x69737465), 
  ACE_NTOHL (0x6e744964), 
  ACE_NTOHL (0x56616c75), 
  ACE_NTOHL (0x65000000),  // name = PersistentIdValue
  0, // value modifier
  CORBA::tk_null, // no stateful base valuetype

  1, // member count
  4,
  ACE_NTOHL (0x70696400),  // name = pid
  CORBA::tk_alias, // typecode kind for typedefs
  124, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    32,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x436f6d70), 
    ACE_NTOHL (0x6f6e656e), 
    ACE_NTOHL (0x74732f50), 
    ACE_NTOHL (0x65727369), 
    ACE_NTOHL (0x7374656e), 
    ACE_NTOHL (0x7449643a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:Components/PersistentId:1.0
    13,
    ACE_NTOHL (0x50657273), 
    ACE_NTOHL (0x69737465), 
    ACE_NTOHL (0x6e744964), 
    ACE_NTOHL (0x0),  // name = PersistentId
    CORBA::tk_alias, // typecode kind for typedefs
    56, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      31,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x436f7350), 
      ACE_NTOHL (0x65727369), 
      ACE_NTOHL (0x7374656e), 
      ACE_NTOHL (0x74537461), 
      ACE_NTOHL (0x74652f50), 
      ACE_NTOHL (0x69643a31), 
      ACE_NTOHL (0x2e300000),  // repository ID = IDL:CosPersistentState/Pid:1.0
      4,
      ACE_NTOHL (0x50696400),  // name = Pid
      CORBA::tk_string, 
      0U, // string length


  0, // data member visibility marker

};

static CORBA::TypeCode _tc_TAO_tc_Components_PersistentIdValue (
    CORBA::tk_value,
    sizeof (_oc_Components_PersistentIdValue),
    (char *) &_oc_Components_PersistentIdValue,
    0,
    sizeof (Components::PersistentIdValue)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_PersistentIdValue,
    &_tc_TAO_tc_Components_PersistentIdValue
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_cs.cpp:95

void
tao_Components_PersistentIdValue_add_ref (
    Components::PersistentIdValue *p
  )
{
  CORBA::add_ref (p);
}

void
tao_Components_PersistentIdValue_remove_ref (
    Components::PersistentIdValue *p
  )
{
  CORBA::remove_ref (p);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:298

// *************************************************************
// Operations for class Components::PersistentIdValue_var
// *************************************************************

Components::PersistentIdValue_var::PersistentIdValue_var (void)
  : ptr_ (0)
{}

Components::PersistentIdValue_var::PersistentIdValue_var (PersistentIdValue* p)
  : ptr_ (p)
{}

Components::PersistentIdValue_var::PersistentIdValue_var (const PersistentIdValue* p)
  : ptr_ (ACE_const_cast (PersistentIdValue *, p))
{}

Components::PersistentIdValue *
Components::PersistentIdValue_var::ptr (void) const
{
  return this->ptr_;
}

Components::PersistentIdValue_var::PersistentIdValue_var (const PersistentIdValue_var &p)
{
  CORBA::add_ref (p.ptr ());
  this->ptr_ = p.ptr ();
}

Components::PersistentIdValue_var::~PersistentIdValue_var (void) // destructor
{
  CORBA::remove_ref (this->ptr_);
}

Components::PersistentIdValue_var &
Components::PersistentIdValue_var::operator= (PersistentIdValue *p)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::PersistentIdValue_var &
Components::PersistentIdValue_var::operator= (const PersistentIdValue_var &p)
{
  if (this != &p)
  {
    CORBA::remove_ref (this->ptr_);
    PersistentIdValue *tmp = p.ptr ();
    CORBA::add_ref (tmp);
    this->ptr_ = tmp;
  }
  
  return *this;
}

Components::PersistentIdValue_var::operator const Components::PersistentIdValue* () const // cast
{
  return this->ptr_;
}

Components::PersistentIdValue_var::operator Components::PersistentIdValue* () // cast 
{
  return this->ptr_;
}

Components::PersistentIdValue *
Components::PersistentIdValue_var::operator-> (void) const
{
  return this->ptr_;
}

Components::PersistentIdValue *
Components::PersistentIdValue_var::in (void) const
{
  return this->ptr_;
}

Components::PersistentIdValue *&
Components::PersistentIdValue_var::inout (void)
{
  return this->ptr_;
}

Components::PersistentIdValue *&
Components::PersistentIdValue_var::out (void)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
  return this->ptr_;
}

Components::PersistentIdValue *
Components::PersistentIdValue_var::_retn (void)
{
  // yield ownership of managed obj reference
  PersistentIdValue* tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

void
Components::PersistentIdValue_var::tao_add_ref (
    PersistentIdValue *p
  )
{
  CORBA::add_ref (p);
}

void
Components::PersistentIdValue_var::tao_remove_ref (
    PersistentIdValue *p
  )
{
  CORBA::remove_ref (p);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:568

// *************************************************************
// Operations for class Components::PersistentIdValue_out
// *************************************************************

Components::PersistentIdValue_out::PersistentIdValue_out (PersistentIdValue *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

Components::PersistentIdValue_out::PersistentIdValue_out (PersistentIdValue_var &p)
  : ptr_ (p.out ())
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
}

Components::PersistentIdValue_out::PersistentIdValue_out (const PersistentIdValue_out &p)
  : ptr_ (ACE_const_cast (PersistentIdValue_out&, p).ptr_)
{}

Components::PersistentIdValue_out &
Components::PersistentIdValue_out::operator= (const PersistentIdValue_out &p)
{
  this->ptr_ = ACE_const_cast (PersistentIdValue_out&, p).ptr_;
  return *this;
}

Components::PersistentIdValue_out &
Components::PersistentIdValue_out::operator= (const PersistentIdValue_var &p)
{
  PersistentIdValue *tmp = p.ptr ();
  CORBA::add_ref (tmp);
  this->ptr_ = tmp;
  return *this;
}

Components::PersistentIdValue_out &
Components::PersistentIdValue_out::operator= (PersistentIdValue *p)
{
  this->ptr_ = p;
  return *this;
}

Components::PersistentIdValue_out::operator Components::PersistentIdValue*& () // cast
{
  return this->ptr_;
}

Components::PersistentIdValue *&
Components::PersistentIdValue_out::ptr (void) // ptr
{
  return this->ptr_;
}

Components::PersistentIdValue *
Components::PersistentIdValue_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_cs.cpp:138

Components::PersistentIdValue *
Components::PersistentIdValue::_downcast (CORBA::ValueBase *v)
{
  if (v == 0)
    {
      return 0;
    }
  
  return (PersistentIdValue *) v->_tao_obv_narrow ((ptr_arith_t) &_downcast);
}

const char *
Components::PersistentIdValue::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void *
Components::PersistentIdValue::_tao_obv_narrow (ptr_arith_t type_id)
{
  if (type_id == (ptr_arith_t) &_downcast)
    {
      return this;
    }
  
  void *rval = 0;
  
  if (rval == 0)
    {
      rval = ACE_NESTED_CLASS (Components,StateIdValue)::_tao_obv_narrow (type_id);
    }
  
  return rval;
}

void
Components::PersistentIdValue::_tao_any_destructor (void *_tao_void_pointer)
{
  PersistentIdValue *tmp =
    ACE_static_cast (
        PersistentIdValue *,
        _tao_void_pointer
      );
  delete tmp;
}

CORBA::Boolean Components::PersistentIdValue::_tao_marshal_v (TAO_OutputCDR & strm)
{
  return this->_tao_marshal__Components_PersistentIdValue (strm);
}

CORBA::Boolean Components::PersistentIdValue::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  return this->_tao_unmarshal__Components_PersistentIdValue (strm);
}

CORBA::Boolean Components::PersistentIdValue::_tao_unmarshal (
    TAO_InputCDR &strm,
    PersistentIdValue *&new_object
  )
{
  CORBA::ValueBase *base = 0;
  CORBA::ValueFactory_var factory;
  CORBA::Boolean retval =
    CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        factory,
        base,
        PersistentIdValue::_tao_obv_static_repository_id ()
      );
  
  if (retval == 0)
    {
      return 0;
    }
  
  if (factory.in () != 0)
    {
      base = factory->create_for_unmarshal ();
      
      if (base == 0)
        {
          return 0;  // %! except.?
        }
      
      retval = base->_tao_unmarshal_v (strm);
      
      if (retval == 0)
        {
          return 0;
        }
    }
  
  // Now base must be null or point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = PersistentIdValue::_downcast (base);
  return retval;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_init_cs.cpp:84

Components::PersistentIdValue_init::PersistentIdValue_init (void)
{
}

Components::PersistentIdValue_init::~PersistentIdValue_init (void)
{
}

const char* 
Components::PersistentIdValue_init::tao_repository_id (void)
{
  return Components::PersistentIdValue::_tao_obv_static_repository_id ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_SegmentDescr[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  32,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f53), 
  ACE_NTOHL (0x65676d65), 
  ACE_NTOHL (0x6e744465), 
  ACE_NTOHL (0x7363723a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:Components/SegmentDescr:1.0
  13,
  ACE_NTOHL (0x5365676d), 
  ACE_NTOHL (0x656e7444), 
  ACE_NTOHL (0x65736372), 
  ACE_NTOHL (0x0),  // name = SegmentDescr
  0, // value modifier
  CORBA::tk_null, // no stateful base valuetype

  2, // member count
  4,
  ACE_NTOHL (0x73696400),  // name = sid
  CORBA::tk_value, // typecode kind
  72, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    32,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x436f6d70), 
    ACE_NTOHL (0x6f6e656e), 
    ACE_NTOHL (0x74732f53), 
    ACE_NTOHL (0x74617465), 
    ACE_NTOHL (0x49645661), 
    ACE_NTOHL (0x6c75653a), 
    ACE_NTOHL (0x312e3000),  // repository ID = IDL:Components/StateIdValue:1.0
    13,
    ACE_NTOHL (0x53746174), 
    ACE_NTOHL (0x65496456), 
    ACE_NTOHL (0x616c7565), 
    ACE_NTOHL (0x0),  // name = StateIdValue
    2, // value modifier
    CORBA::tk_null, // no stateful base valuetype

    0, // member count

  0, // data member visibility marker

  4,
  ACE_NTOHL (0x73656700),  // name = seg
  CORBA::tk_alias, // typecode kind for typedefs
  60, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    29,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x436f6d70), 
    ACE_NTOHL (0x6f6e656e), 
    ACE_NTOHL (0x74732f53), 
    ACE_NTOHL (0x65676d65), 
    ACE_NTOHL (0x6e744964), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:Components/SegmentId:1.0
    10,
    ACE_NTOHL (0x5365676d), 
    ACE_NTOHL (0x656e7449), 
    ACE_NTOHL (0x64000000),  // name = SegmentId
    CORBA::tk_short,


  0, // data member visibility marker

};

static CORBA::TypeCode _tc_TAO_tc_Components_SegmentDescr (
    CORBA::tk_value,
    sizeof (_oc_Components_SegmentDescr),
    (char *) &_oc_Components_SegmentDescr,
    0,
    sizeof (Components::SegmentDescr)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_SegmentDescr,
    &_tc_TAO_tc_Components_SegmentDescr
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_cs.cpp:95

void
tao_Components_SegmentDescr_add_ref (
    Components::SegmentDescr *p
  )
{
  CORBA::add_ref (p);
}

void
tao_Components_SegmentDescr_remove_ref (
    Components::SegmentDescr *p
  )
{
  CORBA::remove_ref (p);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:298

// *************************************************************
// Operations for class Components::SegmentDescr_var
// *************************************************************

Components::SegmentDescr_var::SegmentDescr_var (void)
  : ptr_ (0)
{}

Components::SegmentDescr_var::SegmentDescr_var (SegmentDescr* p)
  : ptr_ (p)
{}

Components::SegmentDescr_var::SegmentDescr_var (const SegmentDescr* p)
  : ptr_ (ACE_const_cast (SegmentDescr *, p))
{}

Components::SegmentDescr *
Components::SegmentDescr_var::ptr (void) const
{
  return this->ptr_;
}

Components::SegmentDescr_var::SegmentDescr_var (const SegmentDescr_var &p)
{
  CORBA::add_ref (p.ptr ());
  this->ptr_ = p.ptr ();
}

Components::SegmentDescr_var::~SegmentDescr_var (void) // destructor
{
  CORBA::remove_ref (this->ptr_);
}

Components::SegmentDescr_var &
Components::SegmentDescr_var::operator= (SegmentDescr *p)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::SegmentDescr_var &
Components::SegmentDescr_var::operator= (const SegmentDescr_var &p)
{
  if (this != &p)
  {
    CORBA::remove_ref (this->ptr_);
    SegmentDescr *tmp = p.ptr ();
    CORBA::add_ref (tmp);
    this->ptr_ = tmp;
  }
  
  return *this;
}

Components::SegmentDescr_var::operator const Components::SegmentDescr* () const // cast
{
  return this->ptr_;
}

Components::SegmentDescr_var::operator Components::SegmentDescr* () // cast 
{
  return this->ptr_;
}

Components::SegmentDescr *
Components::SegmentDescr_var::operator-> (void) const
{
  return this->ptr_;
}

Components::SegmentDescr *
Components::SegmentDescr_var::in (void) const
{
  return this->ptr_;
}

Components::SegmentDescr *&
Components::SegmentDescr_var::inout (void)
{
  return this->ptr_;
}

Components::SegmentDescr *&
Components::SegmentDescr_var::out (void)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
  return this->ptr_;
}

Components::SegmentDescr *
Components::SegmentDescr_var::_retn (void)
{
  // yield ownership of managed obj reference
  SegmentDescr* tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

void
Components::SegmentDescr_var::tao_add_ref (
    SegmentDescr *p
  )
{
  CORBA::add_ref (p);
}

void
Components::SegmentDescr_var::tao_remove_ref (
    SegmentDescr *p
  )
{
  CORBA::remove_ref (p);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:568

// *************************************************************
// Operations for class Components::SegmentDescr_out
// *************************************************************

Components::SegmentDescr_out::SegmentDescr_out (SegmentDescr *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

Components::SegmentDescr_out::SegmentDescr_out (SegmentDescr_var &p)
  : ptr_ (p.out ())
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
}

Components::SegmentDescr_out::SegmentDescr_out (const SegmentDescr_out &p)
  : ptr_ (ACE_const_cast (SegmentDescr_out&, p).ptr_)
{}

Components::SegmentDescr_out &
Components::SegmentDescr_out::operator= (const SegmentDescr_out &p)
{
  this->ptr_ = ACE_const_cast (SegmentDescr_out&, p).ptr_;
  return *this;
}

Components::SegmentDescr_out &
Components::SegmentDescr_out::operator= (const SegmentDescr_var &p)
{
  SegmentDescr *tmp = p.ptr ();
  CORBA::add_ref (tmp);
  this->ptr_ = tmp;
  return *this;
}

Components::SegmentDescr_out &
Components::SegmentDescr_out::operator= (SegmentDescr *p)
{
  this->ptr_ = p;
  return *this;
}

Components::SegmentDescr_out::operator Components::SegmentDescr*& () // cast
{
  return this->ptr_;
}

Components::SegmentDescr *&
Components::SegmentDescr_out::ptr (void) // ptr
{
  return this->ptr_;
}

Components::SegmentDescr *
Components::SegmentDescr_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_cs.cpp:138

Components::SegmentDescr *
Components::SegmentDescr::_downcast (CORBA::ValueBase *v)
{
  if (v == 0)
    {
      return 0;
    }
  
  return (SegmentDescr *) v->_tao_obv_narrow ((ptr_arith_t) &_downcast);
}

const char *
Components::SegmentDescr::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void *
Components::SegmentDescr::_tao_obv_narrow (ptr_arith_t type_id)
{
  if (type_id == (ptr_arith_t) &_downcast)
    {
      return this;
    }
  
  void *rval = 0;
  
  return rval;
}

void
Components::SegmentDescr::_tao_any_destructor (void *_tao_void_pointer)
{
  SegmentDescr *tmp =
    ACE_static_cast (
        SegmentDescr *,
        _tao_void_pointer
      );
  delete tmp;
}

CORBA::Boolean Components::SegmentDescr::_tao_marshal_v (TAO_OutputCDR & strm)
{
  return this->_tao_marshal__Components_SegmentDescr (strm);
}

CORBA::Boolean Components::SegmentDescr::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  return this->_tao_unmarshal__Components_SegmentDescr (strm);
}

CORBA::Boolean Components::SegmentDescr::_tao_unmarshal (
    TAO_InputCDR &strm,
    SegmentDescr *&new_object
  )
{
  CORBA::ValueBase *base = 0;
  CORBA::ValueFactory_var factory;
  CORBA::Boolean retval =
    CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        factory,
        base,
        SegmentDescr::_tao_obv_static_repository_id ()
      );
  
  if (retval == 0)
    {
      return 0;
    }
  
  if (factory.in () != 0)
    {
      base = factory->create_for_unmarshal ();
      
      if (base == 0)
        {
          return 0;  // %! except.?
        }
      
      retval = base->_tao_unmarshal_v (strm);
      
      if (retval == 0)
        {
          return 0;
        }
    }
  
  // Now base must be null or point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = SegmentDescr::_downcast (base);
  return retval;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_init_cs.cpp:84

Components::SegmentDescr_init::SegmentDescr_init (void)
{
}

Components::SegmentDescr_init::~SegmentDescr_init (void)
{
}

const char* 
Components::SegmentDescr_init::tao_repository_id (void)
{
  return Components::SegmentDescr::_tao_obv_static_repository_id ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_cs.cpp:103

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_SEGMENTDESCRSEQ_CS_)
#define __TAO_UNBOUNDED_VALUETYPE_SEQUENCE_COMPONENTS_SEGMENTDESCRSEQ_CS_

// The Base_Sequence functions, please see tao/Sequence.h
void
Components::_TAO_Unbounded_Valuetype_Sequence_Components_SegmentDescrSeq::_allocate_buffer (CORBA::ULong length)
{
  Components::SegmentDescr **tmp = 0;
  tmp = _TAO_Unbounded_Valuetype_Sequence_Components_SegmentDescrSeq::allocbuf (length);
  
  if (this->buffer_ != 0)
    {
      Components::SegmentDescr **old = ACE_reinterpret_cast (Components::SegmentDescr**, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          if (!this->release_)
            {
              tao_Components_SegmentDescr_add_ref (old[i]);
              tmp[i] = old[i];
            }
          else
            {
              tmp[i] = old[i];
            }
        }
      
      if (this->release_)
        {
          delete [] old;
        }
    }
  
  this->buffer_ = tmp;
}

void
Components::_TAO_Unbounded_Valuetype_Sequence_Components_SegmentDescrSeq::_deallocate_buffer (void)
{
  if (this->buffer_ == 0 || this->release_ == 0)
    {
      return;
    }
  
  Components::SegmentDescr **tmp = ACE_reinterpret_cast (Components::SegmentDescr**, this->buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tao_Components_SegmentDescr_remove_ref (tmp[i]);
      tmp[i] = 0;
    }
  
  _TAO_Unbounded_Valuetype_Sequence_Components_SegmentDescrSeq::freebuf (tmp);
  this->buffer_ = 0;
}

Components::_TAO_Unbounded_Valuetype_Sequence_Components_SegmentDescrSeq::~_TAO_Unbounded_Valuetype_Sequence_Components_SegmentDescrSeq (void)
{
  this->_deallocate_buffer ();
}

void
Components::_TAO_Unbounded_Valuetype_Sequence_Components_SegmentDescrSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
{
  Components::SegmentDescr **tmp = ACE_reinterpret_cast (Components::SegmentDescr**, this->buffer_);
  
  for (CORBA::ULong i = nl; i < ol; ++i)
    {
      tao_Components_SegmentDescr_remove_ref (tmp[i]);
      tmp[i] = 0;
    }
}



#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_SEGMENTDESCRSEQ_CS_)
#define _COMPONENTS_SEGMENTDESCRSEQ_CS_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:250

// *************************************************************
// Components::SegmentDescrSeq
// *************************************************************

Components::SegmentDescrSeq::SegmentDescrSeq (void)
{}

Components::SegmentDescrSeq::SegmentDescrSeq (CORBA::ULong max)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Valuetype_Sequence_Components_SegmentDescrSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Valuetype_Sequence<Components::SegmentDescr,Components::SegmentDescr_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}

Components::SegmentDescrSeq::SegmentDescrSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    Components::SegmentDescr_ptr *buffer,
    CORBA::Boolean release
  )
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Valuetype_Sequence_Components_SegmentDescrSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Valuetype_Sequence<Components::SegmentDescr,Components::SegmentDescr_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}

Components::SegmentDescrSeq::SegmentDescrSeq (const SegmentDescrSeq &seq)
  : 

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Valuetype_Sequence_Components_SegmentDescrSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Valuetype_Sequence<Components::SegmentDescr,Components::SegmentDescr_var>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}

Components::SegmentDescrSeq::~SegmentDescrSeq (void) // dtor
{}

void Components::SegmentDescrSeq::_tao_any_destructor (void *_tao_void_pointer)
{
  SegmentDescrSeq *tmp = ACE_static_cast (SegmentDescrSeq*, _tao_void_pointer);
  delete tmp;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_SegmentDescrSeq[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f53), 
  ACE_NTOHL (0x65676d65), 
  ACE_NTOHL (0x6e744465), 
  ACE_NTOHL (0x73637253), 
  ACE_NTOHL (0x65713a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/SegmentDescrSeq:1.0
  16,
  ACE_NTOHL (0x5365676d), 
  ACE_NTOHL (0x656e7444), 
  ACE_NTOHL (0x65736372), 
  ACE_NTOHL (0x53657100),  // name = SegmentDescrSeq
  CORBA::tk_sequence, // typecode kind
  260, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_value, // typecode kind
    244, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      32,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x436f6d70), 
      ACE_NTOHL (0x6f6e656e), 
      ACE_NTOHL (0x74732f53), 
      ACE_NTOHL (0x65676d65), 
      ACE_NTOHL (0x6e744465), 
      ACE_NTOHL (0x7363723a), 
      ACE_NTOHL (0x312e3000),  // repository ID = IDL:Components/SegmentDescr:1.0
      13,
      ACE_NTOHL (0x5365676d), 
      ACE_NTOHL (0x656e7444), 
      ACE_NTOHL (0x65736372), 
      ACE_NTOHL (0x0),  // name = SegmentDescr
      0, // value modifier
      CORBA::tk_null, // no stateful base valuetype

      2, // member count
      4,
      ACE_NTOHL (0x73696400),  // name = sid
      CORBA::tk_value, // typecode kind
      72, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        32,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x74732f53), 
        ACE_NTOHL (0x74617465), 
        ACE_NTOHL (0x49645661), 
        ACE_NTOHL (0x6c75653a), 
        ACE_NTOHL (0x312e3000),  // repository ID = IDL:Components/StateIdValue:1.0
        13,
        ACE_NTOHL (0x53746174), 
        ACE_NTOHL (0x65496456), 
        ACE_NTOHL (0x616c7565), 
        ACE_NTOHL (0x0),  // name = StateIdValue
        2, // value modifier
        CORBA::tk_null, // no stateful base valuetype

        0, // member count

      0, // data member visibility marker

      4,
      ACE_NTOHL (0x73656700),  // name = seg
      CORBA::tk_alias, // typecode kind for typedefs
      60, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        29,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x436f6d70), 
        ACE_NTOHL (0x6f6e656e), 
        ACE_NTOHL (0x74732f53), 
        ACE_NTOHL (0x65676d65), 
        ACE_NTOHL (0x6e744964), 
        ACE_NTOHL (0x3a312e30), 
        ACE_NTOHL (0x0),  // repository ID = IDL:Components/SegmentId:1.0
        10,
        ACE_NTOHL (0x5365676d), 
        ACE_NTOHL (0x656e7449), 
        ACE_NTOHL (0x64000000),  // name = SegmentId
        CORBA::tk_short,


      0, // data member visibility marker


    0U,

};

static CORBA::TypeCode _tc_TAO_tc_Components_SegmentDescrSeq (
    CORBA::tk_alias,
    sizeof (_oc_Components_SegmentDescrSeq),
    (char *) &_oc_Components_SegmentDescrSeq,
    0,
    sizeof (Components::SegmentDescrSeq)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_SegmentDescrSeq,
    &_tc_TAO_tc_Components_SegmentDescrSeq
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::ComponentId::_tao_class_id = 0;

Components::ComponentId_ptr
tao_Components_ComponentId_duplicate (
    Components::ComponentId_ptr p
  )
{
  return Components::ComponentId::_duplicate (p);
}

void
tao_Components_ComponentId_release (
    Components::ComponentId_ptr p
  )
{
  CORBA::release (p);
}

Components::ComponentId_ptr
tao_Components_ComponentId_nil (
    void
  )
{
  return Components::ComponentId::_nil ();
}

Components::ComponentId_ptr
tao_Components_ComponentId_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::ComponentId::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_ComponentId_upcast (
    void *src
  )
{
  Components::ComponentId **tmp =
    ACE_static_cast (Components::ComponentId **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::ComponentId_var
// *************************************************************

Components::ComponentId_var::ComponentId_var (void)
  : ptr_ (ComponentId::_nil ())
{}

::Components::ComponentId_ptr
Components::ComponentId_var::ptr (void) const
{
  return this->ptr_;
}

Components::ComponentId_var::ComponentId_var (const ::Components::ComponentId_var &p)
  : TAO_Base_var (),
    ptr_ (ComponentId::_duplicate (p.ptr ()))
{}

Components::ComponentId_var::~ComponentId_var (void)
{
  CORBA::release (this->ptr_);
}

Components::ComponentId_var &
Components::ComponentId_var::operator= (ComponentId_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::ComponentId_var &
Components::ComponentId_var::operator= (const ::Components::ComponentId_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::ComponentId::_duplicate (p.ptr ());
  }
  return *this;
}

Components::ComponentId_var::operator const ::Components::ComponentId_ptr &() const // cast
{
  return this->ptr_;
}

Components::ComponentId_var::operator ::Components::ComponentId_ptr &() // cast 
{
  return this->ptr_;
}

::Components::ComponentId_ptr
Components::ComponentId_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::ComponentId_ptr
Components::ComponentId_var::in (void) const
{
  return this->ptr_;
}

::Components::ComponentId_ptr &
Components::ComponentId_var::inout (void)
{
  return this->ptr_;
}

::Components::ComponentId_ptr &
Components::ComponentId_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::ComponentId::_nil ();
  return this->ptr_;
}

::Components::ComponentId_ptr
Components::ComponentId_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::ComponentId_ptr val = this->ptr_;
  this->ptr_ = ::Components::ComponentId::_nil ();
  return val;
}

::Components::ComponentId_ptr
Components::ComponentId_var::tao_duplicate (ComponentId_ptr p)
{
  return ::Components::ComponentId::_duplicate (p);
}

void
Components::ComponentId_var::tao_release (ComponentId_ptr p)
{
  CORBA::release (p);
}

::Components::ComponentId_ptr
Components::ComponentId_var::tao_nil (void)
{
  return ::Components::ComponentId::_nil ();
}

::Components::ComponentId_ptr
Components::ComponentId_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::ComponentId::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::ComponentId_var::tao_upcast (void *src)
{
  ComponentId **tmp =
    ACE_static_cast (ComponentId **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::ComponentId_out
// *************************************************************

Components::ComponentId_out::ComponentId_out (ComponentId_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::ComponentId::_nil ();
}

Components::ComponentId_out::ComponentId_out (ComponentId_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::ComponentId::_nil ();
}

Components::ComponentId_out::ComponentId_out (const ::Components::ComponentId_out &p)
  : ptr_ (ACE_const_cast (ComponentId_out &, p).ptr_)
{}

::Components::ComponentId_out &
Components::ComponentId_out::operator= (const ::Components::ComponentId_out &p)
{
  this->ptr_ = ACE_const_cast (ComponentId_out&, p).ptr_;
  return *this;
}

Components::ComponentId_out &
Components::ComponentId_out::operator= (const ::Components::ComponentId_var &p)
{
  this->ptr_ = ::Components::ComponentId::_duplicate (p.ptr ());
  return *this;
}

Components::ComponentId_out &
Components::ComponentId_out::operator= (ComponentId_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::ComponentId_out::operator ::Components::ComponentId_ptr &() // cast
{
  return this->ptr_;
}

::Components::ComponentId_ptr &
Components::ComponentId_out::ptr (void)
{
  return this->ptr_;
}

::Components::ComponentId_ptr
Components::ComponentId_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::ComponentId::ComponentId (void)
{}

Components::ComponentId::~ComponentId (void)
{}

void 
Components::ComponentId::_tao_any_destructor (void *_tao_void_pointer)
{
  ComponentId *tmp = ACE_static_cast (ComponentId *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::ComponentId_ptr
Components::ComponentId::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return ComponentId::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::ComponentId_ptr 
Components::ComponentId::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ComponentId::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          ComponentId_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &ComponentId::_tao_class_id
                )
            )
        );
}

Components::ComponentId_ptr
Components::ComponentId::_duplicate (ComponentId_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *Components::ComponentId::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, ComponentId)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::ComponentId::_interface_repository_id (void) const
{
  return "IDL:Components/ComponentId:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_ComponentId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f43), 
  ACE_NTOHL (0x6f6d706f), 
  ACE_NTOHL (0x6e656e74), 
  ACE_NTOHL (0x49643a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/ComponentId:1.0
  12,
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74496400),  // name = ComponentId
};

static CORBA::TypeCode _tc_TAO_tc_Components_ComponentId (
    CORBA::tk_objref,
    sizeof (_oc_Components_ComponentId),
    (char *) &_oc_Components_ComponentId,
    0,
    sizeof (Components::ComponentId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ComponentId,
    &_tc_TAO_tc_Components_ComponentId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::Entity2Context::_tao_class_id = 0;

Components::Entity2Context_ptr
tao_Components_Entity2Context_duplicate (
    Components::Entity2Context_ptr p
  )
{
  return Components::Entity2Context::_duplicate (p);
}

void
tao_Components_Entity2Context_release (
    Components::Entity2Context_ptr p
  )
{
  CORBA::release (p);
}

Components::Entity2Context_ptr
tao_Components_Entity2Context_nil (
    void
  )
{
  return Components::Entity2Context::_nil ();
}

Components::Entity2Context_ptr
tao_Components_Entity2Context_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::Entity2Context::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_Entity2Context_upcast (
    void *src
  )
{
  Components::Entity2Context **tmp =
    ACE_static_cast (Components::Entity2Context **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::Entity2Context_var
// *************************************************************

Components::Entity2Context_var::Entity2Context_var (void)
  : ptr_ (Entity2Context::_nil ())
{}

::Components::Entity2Context_ptr
Components::Entity2Context_var::ptr (void) const
{
  return this->ptr_;
}

Components::Entity2Context_var::Entity2Context_var (const ::Components::Entity2Context_var &p)
  : TAO_Base_var (),
    ptr_ (Entity2Context::_duplicate (p.ptr ()))
{}

Components::Entity2Context_var::~Entity2Context_var (void)
{
  CORBA::release (this->ptr_);
}

Components::Entity2Context_var &
Components::Entity2Context_var::operator= (Entity2Context_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::Entity2Context_var &
Components::Entity2Context_var::operator= (const ::Components::Entity2Context_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::Entity2Context::_duplicate (p.ptr ());
  }
  return *this;
}

Components::Entity2Context_var::operator const ::Components::Entity2Context_ptr &() const // cast
{
  return this->ptr_;
}

Components::Entity2Context_var::operator ::Components::Entity2Context_ptr &() // cast 
{
  return this->ptr_;
}

::Components::Entity2Context_ptr
Components::Entity2Context_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::Entity2Context_ptr
Components::Entity2Context_var::in (void) const
{
  return this->ptr_;
}

::Components::Entity2Context_ptr &
Components::Entity2Context_var::inout (void)
{
  return this->ptr_;
}

::Components::Entity2Context_ptr &
Components::Entity2Context_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Entity2Context::_nil ();
  return this->ptr_;
}

::Components::Entity2Context_ptr
Components::Entity2Context_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::Entity2Context_ptr val = this->ptr_;
  this->ptr_ = ::Components::Entity2Context::_nil ();
  return val;
}

::Components::Entity2Context_ptr
Components::Entity2Context_var::tao_duplicate (Entity2Context_ptr p)
{
  return ::Components::Entity2Context::_duplicate (p);
}

void
Components::Entity2Context_var::tao_release (Entity2Context_ptr p)
{
  CORBA::release (p);
}

::Components::Entity2Context_ptr
Components::Entity2Context_var::tao_nil (void)
{
  return ::Components::Entity2Context::_nil ();
}

::Components::Entity2Context_ptr
Components::Entity2Context_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::Entity2Context::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::Entity2Context_var::tao_upcast (void *src)
{
  Entity2Context **tmp =
    ACE_static_cast (Entity2Context **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::Entity2Context_out
// *************************************************************

Components::Entity2Context_out::Entity2Context_out (Entity2Context_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::Entity2Context::_nil ();
}

Components::Entity2Context_out::Entity2Context_out (Entity2Context_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::Entity2Context::_nil ();
}

Components::Entity2Context_out::Entity2Context_out (const ::Components::Entity2Context_out &p)
  : ptr_ (ACE_const_cast (Entity2Context_out &, p).ptr_)
{}

::Components::Entity2Context_out &
Components::Entity2Context_out::operator= (const ::Components::Entity2Context_out &p)
{
  this->ptr_ = ACE_const_cast (Entity2Context_out&, p).ptr_;
  return *this;
}

Components::Entity2Context_out &
Components::Entity2Context_out::operator= (const ::Components::Entity2Context_var &p)
{
  this->ptr_ = ::Components::Entity2Context::_duplicate (p.ptr ());
  return *this;
}

Components::Entity2Context_out &
Components::Entity2Context_out::operator= (Entity2Context_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::Entity2Context_out::operator ::Components::Entity2Context_ptr &() // cast
{
  return this->ptr_;
}

::Components::Entity2Context_ptr &
Components::Entity2Context_out::ptr (void)
{
  return this->ptr_;
}

::Components::Entity2Context_ptr
Components::Entity2Context_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::Entity2Context::Entity2Context (void)
{}

Components::Entity2Context::~Entity2Context (void)
{}

void 
Components::Entity2Context::_tao_any_destructor (void *_tao_void_pointer)
{
  Entity2Context *tmp = ACE_static_cast (Entity2Context *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::Entity2Context_ptr
Components::Entity2Context::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return Entity2Context::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::Entity2Context_ptr 
Components::Entity2Context::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return Entity2Context::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          Entity2Context_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &Entity2Context::_tao_class_id
                )
            )
        );
}

Components::Entity2Context_ptr
Components::Entity2Context::_duplicate (Entity2Context_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *Components::Entity2Context::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, Entity2Context)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::EntityContext::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::EntityContext_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, CCM2Context)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::CCM2Context_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::CCMContext::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::CCMContext_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::Entity2Context::_interface_repository_id (void) const
{
  return "IDL:Components/Entity2Context:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_Entity2Context[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f45), 
  ACE_NTOHL (0x6e746974), 
  ACE_NTOHL (0x7932436f), 
  ACE_NTOHL (0x6e746578), 
  ACE_NTOHL (0x743a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:Components/Entity2Context:1.0
  15,
  ACE_NTOHL (0x456e7469), 
  ACE_NTOHL (0x74793243), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78740000),  // name = Entity2Context
};

static CORBA::TypeCode _tc_TAO_tc_Components_Entity2Context (
    CORBA::tk_objref,
    sizeof (_oc_Components_Entity2Context),
    (char *) &_oc_Components_Entity2Context,
    0,
    sizeof (Components::Entity2Context)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Entity2Context,
    &_tc_TAO_tc_Components_Entity2Context
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::ExecutorLocator::_tao_class_id = 0;

Components::ExecutorLocator_ptr
tao_Components_ExecutorLocator_duplicate (
    Components::ExecutorLocator_ptr p
  )
{
  return Components::ExecutorLocator::_duplicate (p);
}

void
tao_Components_ExecutorLocator_release (
    Components::ExecutorLocator_ptr p
  )
{
  CORBA::release (p);
}

Components::ExecutorLocator_ptr
tao_Components_ExecutorLocator_nil (
    void
  )
{
  return Components::ExecutorLocator::_nil ();
}

Components::ExecutorLocator_ptr
tao_Components_ExecutorLocator_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::ExecutorLocator::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_ExecutorLocator_upcast (
    void *src
  )
{
  Components::ExecutorLocator **tmp =
    ACE_static_cast (Components::ExecutorLocator **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::ExecutorLocator_var
// *************************************************************

Components::ExecutorLocator_var::ExecutorLocator_var (void)
  : ptr_ (ExecutorLocator::_nil ())
{}

::Components::ExecutorLocator_ptr
Components::ExecutorLocator_var::ptr (void) const
{
  return this->ptr_;
}

Components::ExecutorLocator_var::ExecutorLocator_var (const ::Components::ExecutorLocator_var &p)
  : TAO_Base_var (),
    ptr_ (ExecutorLocator::_duplicate (p.ptr ()))
{}

Components::ExecutorLocator_var::~ExecutorLocator_var (void)
{
  CORBA::release (this->ptr_);
}

Components::ExecutorLocator_var &
Components::ExecutorLocator_var::operator= (ExecutorLocator_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::ExecutorLocator_var &
Components::ExecutorLocator_var::operator= (const ::Components::ExecutorLocator_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::ExecutorLocator::_duplicate (p.ptr ());
  }
  return *this;
}

Components::ExecutorLocator_var::operator const ::Components::ExecutorLocator_ptr &() const // cast
{
  return this->ptr_;
}

Components::ExecutorLocator_var::operator ::Components::ExecutorLocator_ptr &() // cast 
{
  return this->ptr_;
}

::Components::ExecutorLocator_ptr
Components::ExecutorLocator_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::ExecutorLocator_ptr
Components::ExecutorLocator_var::in (void) const
{
  return this->ptr_;
}

::Components::ExecutorLocator_ptr &
Components::ExecutorLocator_var::inout (void)
{
  return this->ptr_;
}

::Components::ExecutorLocator_ptr &
Components::ExecutorLocator_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::ExecutorLocator::_nil ();
  return this->ptr_;
}

::Components::ExecutorLocator_ptr
Components::ExecutorLocator_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::ExecutorLocator_ptr val = this->ptr_;
  this->ptr_ = ::Components::ExecutorLocator::_nil ();
  return val;
}

::Components::ExecutorLocator_ptr
Components::ExecutorLocator_var::tao_duplicate (ExecutorLocator_ptr p)
{
  return ::Components::ExecutorLocator::_duplicate (p);
}

void
Components::ExecutorLocator_var::tao_release (ExecutorLocator_ptr p)
{
  CORBA::release (p);
}

::Components::ExecutorLocator_ptr
Components::ExecutorLocator_var::tao_nil (void)
{
  return ::Components::ExecutorLocator::_nil ();
}

::Components::ExecutorLocator_ptr
Components::ExecutorLocator_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::ExecutorLocator::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::ExecutorLocator_var::tao_upcast (void *src)
{
  ExecutorLocator **tmp =
    ACE_static_cast (ExecutorLocator **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::ExecutorLocator_out
// *************************************************************

Components::ExecutorLocator_out::ExecutorLocator_out (ExecutorLocator_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::ExecutorLocator::_nil ();
}

Components::ExecutorLocator_out::ExecutorLocator_out (ExecutorLocator_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::ExecutorLocator::_nil ();
}

Components::ExecutorLocator_out::ExecutorLocator_out (const ::Components::ExecutorLocator_out &p)
  : ptr_ (ACE_const_cast (ExecutorLocator_out &, p).ptr_)
{}

::Components::ExecutorLocator_out &
Components::ExecutorLocator_out::operator= (const ::Components::ExecutorLocator_out &p)
{
  this->ptr_ = ACE_const_cast (ExecutorLocator_out&, p).ptr_;
  return *this;
}

Components::ExecutorLocator_out &
Components::ExecutorLocator_out::operator= (const ::Components::ExecutorLocator_var &p)
{
  this->ptr_ = ::Components::ExecutorLocator::_duplicate (p.ptr ());
  return *this;
}

Components::ExecutorLocator_out &
Components::ExecutorLocator_out::operator= (ExecutorLocator_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::ExecutorLocator_out::operator ::Components::ExecutorLocator_ptr &() // cast
{
  return this->ptr_;
}

::Components::ExecutorLocator_ptr &
Components::ExecutorLocator_out::ptr (void)
{
  return this->ptr_;
}

::Components::ExecutorLocator_ptr
Components::ExecutorLocator_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::ExecutorLocator::ExecutorLocator (void)
{}

Components::ExecutorLocator::~ExecutorLocator (void)
{}

void 
Components::ExecutorLocator::_tao_any_destructor (void *_tao_void_pointer)
{
  ExecutorLocator *tmp = ACE_static_cast (ExecutorLocator *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::ExecutorLocator_ptr
Components::ExecutorLocator::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return ExecutorLocator::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::ExecutorLocator_ptr 
Components::ExecutorLocator::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ExecutorLocator::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          ExecutorLocator_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &ExecutorLocator::_tao_class_id
                )
            )
        );
}

Components::ExecutorLocator_ptr
Components::ExecutorLocator::_duplicate (ExecutorLocator_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *Components::ExecutorLocator::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, ExecutorLocator)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::EnterpriseComponent::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::EnterpriseComponent_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::ExecutorLocator::_interface_repository_id (void) const
{
  return "IDL:Components/ExecutorLocator:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_ExecutorLocator[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f45), 
  ACE_NTOHL (0x78656375), 
  ACE_NTOHL (0x746f724c), 
  ACE_NTOHL (0x6f636174), 
  ACE_NTOHL (0x6f723a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:Components/ExecutorLocator:1.0
  16,
  ACE_NTOHL (0x45786563), 
  ACE_NTOHL (0x75746f72), 
  ACE_NTOHL (0x4c6f6361), 
  ACE_NTOHL (0x746f7200),  // name = ExecutorLocator
};

static CORBA::TypeCode _tc_TAO_tc_Components_ExecutorLocator (
    CORBA::tk_objref,
    sizeof (_oc_Components_ExecutorLocator),
    (char *) &_oc_Components_ExecutorLocator,
    0,
    sizeof (Components::ExecutorLocator)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ExecutorLocator,
    &_tc_TAO_tc_Components_ExecutorLocator
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int Components::HomeExecutorBase::_tao_class_id = 0;

Components::HomeExecutorBase_ptr
tao_Components_HomeExecutorBase_duplicate (
    Components::HomeExecutorBase_ptr p
  )
{
  return Components::HomeExecutorBase::_duplicate (p);
}

void
tao_Components_HomeExecutorBase_release (
    Components::HomeExecutorBase_ptr p
  )
{
  CORBA::release (p);
}

Components::HomeExecutorBase_ptr
tao_Components_HomeExecutorBase_nil (
    void
  )
{
  return Components::HomeExecutorBase::_nil ();
}

Components::HomeExecutorBase_ptr
tao_Components_HomeExecutorBase_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Components::HomeExecutorBase::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_Components_HomeExecutorBase_upcast (
    void *src
  )
{
  Components::HomeExecutorBase **tmp =
    ACE_static_cast (Components::HomeExecutorBase **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// Components::HomeExecutorBase_var
// *************************************************************

Components::HomeExecutorBase_var::HomeExecutorBase_var (void)
  : ptr_ (HomeExecutorBase::_nil ())
{}

::Components::HomeExecutorBase_ptr
Components::HomeExecutorBase_var::ptr (void) const
{
  return this->ptr_;
}

Components::HomeExecutorBase_var::HomeExecutorBase_var (const ::Components::HomeExecutorBase_var &p)
  : TAO_Base_var (),
    ptr_ (HomeExecutorBase::_duplicate (p.ptr ()))
{}

Components::HomeExecutorBase_var::~HomeExecutorBase_var (void)
{
  CORBA::release (this->ptr_);
}

Components::HomeExecutorBase_var &
Components::HomeExecutorBase_var::operator= (HomeExecutorBase_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

Components::HomeExecutorBase_var &
Components::HomeExecutorBase_var::operator= (const ::Components::HomeExecutorBase_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::Components::HomeExecutorBase::_duplicate (p.ptr ());
  }
  return *this;
}

Components::HomeExecutorBase_var::operator const ::Components::HomeExecutorBase_ptr &() const // cast
{
  return this->ptr_;
}

Components::HomeExecutorBase_var::operator ::Components::HomeExecutorBase_ptr &() // cast 
{
  return this->ptr_;
}

::Components::HomeExecutorBase_ptr
Components::HomeExecutorBase_var::operator-> (void) const
{
  return this->ptr_;
}

::Components::HomeExecutorBase_ptr
Components::HomeExecutorBase_var::in (void) const
{
  return this->ptr_;
}

::Components::HomeExecutorBase_ptr &
Components::HomeExecutorBase_var::inout (void)
{
  return this->ptr_;
}

::Components::HomeExecutorBase_ptr &
Components::HomeExecutorBase_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::HomeExecutorBase::_nil ();
  return this->ptr_;
}

::Components::HomeExecutorBase_ptr
Components::HomeExecutorBase_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::Components::HomeExecutorBase_ptr val = this->ptr_;
  this->ptr_ = ::Components::HomeExecutorBase::_nil ();
  return val;
}

::Components::HomeExecutorBase_ptr
Components::HomeExecutorBase_var::tao_duplicate (HomeExecutorBase_ptr p)
{
  return ::Components::HomeExecutorBase::_duplicate (p);
}

void
Components::HomeExecutorBase_var::tao_release (HomeExecutorBase_ptr p)
{
  CORBA::release (p);
}

::Components::HomeExecutorBase_ptr
Components::HomeExecutorBase_var::tao_nil (void)
{
  return ::Components::HomeExecutorBase::_nil ();
}

::Components::HomeExecutorBase_ptr
Components::HomeExecutorBase_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::Components::HomeExecutorBase::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
Components::HomeExecutorBase_var::tao_upcast (void *src)
{
  HomeExecutorBase **tmp =
    ACE_static_cast (HomeExecutorBase **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// Components::HomeExecutorBase_out
// *************************************************************

Components::HomeExecutorBase_out::HomeExecutorBase_out (HomeExecutorBase_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::Components::HomeExecutorBase::_nil ();
}

Components::HomeExecutorBase_out::HomeExecutorBase_out (HomeExecutorBase_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::Components::HomeExecutorBase::_nil ();
}

Components::HomeExecutorBase_out::HomeExecutorBase_out (const ::Components::HomeExecutorBase_out &p)
  : ptr_ (ACE_const_cast (HomeExecutorBase_out &, p).ptr_)
{}

::Components::HomeExecutorBase_out &
Components::HomeExecutorBase_out::operator= (const ::Components::HomeExecutorBase_out &p)
{
  this->ptr_ = ACE_const_cast (HomeExecutorBase_out&, p).ptr_;
  return *this;
}

Components::HomeExecutorBase_out &
Components::HomeExecutorBase_out::operator= (const ::Components::HomeExecutorBase_var &p)
{
  this->ptr_ = ::Components::HomeExecutorBase::_duplicate (p.ptr ());
  return *this;
}

Components::HomeExecutorBase_out &
Components::HomeExecutorBase_out::operator= (HomeExecutorBase_ptr p)
{
  this->ptr_ = p;
  return *this;
}

Components::HomeExecutorBase_out::operator ::Components::HomeExecutorBase_ptr &() // cast
{
  return this->ptr_;
}

::Components::HomeExecutorBase_ptr &
Components::HomeExecutorBase_out::ptr (void)
{
  return this->ptr_;
}

::Components::HomeExecutorBase_ptr
Components::HomeExecutorBase_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

Components::HomeExecutorBase::HomeExecutorBase (void)
{}

Components::HomeExecutorBase::~HomeExecutorBase (void)
{}

void 
Components::HomeExecutorBase::_tao_any_destructor (void *_tao_void_pointer)
{
  HomeExecutorBase *tmp = ACE_static_cast (HomeExecutorBase *, _tao_void_pointer);
  CORBA::release (tmp);
}

Components::HomeExecutorBase_ptr
Components::HomeExecutorBase::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return HomeExecutorBase::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

Components::HomeExecutorBase_ptr 
Components::HomeExecutorBase::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return HomeExecutorBase::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          HomeExecutorBase_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &HomeExecutorBase::_tao_class_id
                )
            )
        );
}

Components::HomeExecutorBase_ptr
Components::HomeExecutorBase::_duplicate (HomeExecutorBase_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *Components::HomeExecutorBase::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::Components, HomeExecutorBase)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* Components::HomeExecutorBase::_interface_repository_id (void) const
{
  return "IDL:Components/HomeExecutorBase:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_Components_HomeExecutorBase[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  36,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x436f6d70), 
  ACE_NTOHL (0x6f6e656e), 
  ACE_NTOHL (0x74732f48), 
  ACE_NTOHL (0x6f6d6545), 
  ACE_NTOHL (0x78656375), 
  ACE_NTOHL (0x746f7242), 
  ACE_NTOHL (0x6173653a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:Components/HomeExecutorBase:1.0
  17,
  ACE_NTOHL (0x486f6d65), 
  ACE_NTOHL (0x45786563), 
  ACE_NTOHL (0x75746f72), 
  ACE_NTOHL (0x42617365), 
  ACE_NTOHL (0x0),  // name = HomeExecutorBase
};

static CORBA::TypeCode _tc_TAO_tc_Components_HomeExecutorBase (
    CORBA::tk_objref,
    sizeof (_oc_Components_HomeExecutorBase),
    (char *) &_oc_Components_HomeExecutorBase,
    0,
    sizeof (Components::HomeExecutorBase)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (Components)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_HomeExecutorBase,
    &_tc_TAO_tc_Components_HomeExecutorBase
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_obv_cs.cpp:58

CORBA::Boolean
OBV_Components::PersistentIdValue::_tao_marshal__Components_PersistentIdValue (TAO_OutputCDR &strm)
{
  return _tao_marshal_state (strm);
}

CORBA::Boolean
OBV_Components::PersistentIdValue::_tao_unmarshal__Components_PersistentIdValue (TAO_InputCDR &strm)
{
  return _tao_unmarshal_state (strm);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_cs.cpp:815

// Accessor to set the member.
void
OBV_Components::PersistentIdValue::pid (char *val)
{
  this->_pd_pid = val;
}

// Accessor to set the member.
void
OBV_Components::PersistentIdValue::pid (const char *val)
{
  // Set the value.
  this->_pd_pid = CORBA::string_dup (val);
}

// Accessor to set the member.
void
OBV_Components::PersistentIdValue::pid (const CORBA::String_var &val)
{
  CORBA::String_var pid_var = val;
  this->_pd_pid = pid_var._retn ();
}

const char *
OBV_Components::PersistentIdValue::pid (void) const // get method
{
  return this->_pd_pid;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/valuetype_obv_cs.cpp:58

CORBA::Boolean
OBV_Components::SegmentDescr::_tao_marshal__Components_SegmentDescr (TAO_OutputCDR &strm)
{
  return _tao_marshal_state (strm);
}

CORBA::Boolean
OBV_Components::SegmentDescr::_tao_unmarshal__Components_SegmentDescr (TAO_InputCDR &strm)
{
  return _tao_unmarshal_state (strm);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_cs.cpp:431

// Accessor to set the member.
void
OBV_Components::SegmentDescr::sid (Components::StateIdValue* val)
{
  CORBA::add_ref (val);
  this->_pd_sid = val;
}

// Retrieve the member
Components::StateIdValue *
OBV_Components::SegmentDescr::sid () const
{
  return this->_pd_sid.ptr ();
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/field_cs.cpp:568

// Accessor to set the member.
void
OBV_Components::SegmentDescr::seg (Components::SegmentId val)
{
  // Set the value.
  this->_pd_seg = val;
}

// Retrieve the member
Components::SegmentId
OBV_Components::SegmentDescr::seg (void) const
{
  return this->_pd_seg;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/any_op_cs.cpp:52

void operator<<= (CORBA::Any &_tao_any, Components::BadComponentReferenceReason _tao_elem)
{
  TAO_OutputCDR stream;
  stream << _tao_elem;
  _tao_any._tao_replace (
      Components::_tc_BadComponentReferenceReason,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin ()
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, Components::BadComponentReferenceReason &_tao_elem)
{
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (Components::_tc_BadComponentReferenceReason ACE_ENV_ARG_PARAMETER);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    if (stream >> _tao_elem)
    {
      return 1;
    }
  }
  ACE_CATCHANY
  {
    return 0;
  }
  ACE_ENDTRY;
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::IdData &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_IdData,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::IdData *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_IdData,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::IdData::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    Components::IdData *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::IdData*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::IdData *&_tao_elem
  )
{
  _tao_elem = 0;
  
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_IdData
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = ACE_static_cast(
            const Components::IdData*,
            _tao_any.value ()
          );
        
        return 1;
      }
    else
      {
        Components::IdData *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::IdData,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::_tc_IdData,
                1,
                ACE_static_cast (void *, tmp),
                Components::IdData::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::BadComponentReference &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_BadComponentReference,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::BadComponentReference *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_BadComponentReference,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::BadComponentReference::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::BadComponentReference *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::BadComponentReference*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::BadComponentReference *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_BadComponentReference
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::BadComponentReference *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::BadComponentReference *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::BadComponentReference,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:Components/BadComponentReference:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::_tc_BadComponentReference,
                1,
                tmp,
                Components::BadComponentReference::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::PolicyMismatch &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_PolicyMismatch,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::PolicyMismatch *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_PolicyMismatch,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::PolicyMismatch::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::PolicyMismatch *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::PolicyMismatch*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::PolicyMismatch *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_PolicyMismatch
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::PolicyMismatch *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::PolicyMismatch *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::PolicyMismatch,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:Components/PolicyMismatch:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::_tc_PolicyMismatch,
                1,
                tmp,
                Components::PolicyMismatch::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::PersistenceNotAvailable &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_PersistenceNotAvailable,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::PersistenceNotAvailable *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_PersistenceNotAvailable,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::PersistenceNotAvailable::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::PersistenceNotAvailable *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::PersistenceNotAvailable*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::PersistenceNotAvailable *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_PersistenceNotAvailable
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::PersistenceNotAvailable *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::PersistenceNotAvailable *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::PersistenceNotAvailable,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:Components/PersistenceNotAvailable:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::_tc_PersistenceNotAvailable,
                1,
                tmp,
                Components::PersistenceNotAvailable::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::UnknownActualHome &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_UnknownActualHome,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::UnknownActualHome *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_UnknownActualHome,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::UnknownActualHome::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::UnknownActualHome *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::UnknownActualHome*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::UnknownActualHome *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_UnknownActualHome
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::UnknownActualHome *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::UnknownActualHome *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::UnknownActualHome,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:Components/UnknownActualHome:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::_tc_UnknownActualHome,
                1,
                tmp,
                Components::UnknownActualHome::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::ProxyHomeNotSupported &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_ProxyHomeNotSupported,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::ProxyHomeNotSupported *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_ProxyHomeNotSupported,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::ProxyHomeNotSupported::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::ProxyHomeNotSupported *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::ProxyHomeNotSupported*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::ProxyHomeNotSupported *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_ProxyHomeNotSupported
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::ProxyHomeNotSupported *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::ProxyHomeNotSupported *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::ProxyHomeNotSupported,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:Components/ProxyHomeNotSupported:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::_tc_ProxyHomeNotSupported,
                1,
                tmp,
                Components::ProxyHomeNotSupported::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::InvalidStateIdData &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_InvalidStateIdData,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::InvalidStateIdData *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_InvalidStateIdData,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::InvalidStateIdData::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,Components::InvalidStateIdData *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::InvalidStateIdData*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::InvalidStateIdData *&_tao_elem
  )
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_InvalidStateIdData
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (result == 0)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = (Components::InvalidStateIdData *)_tao_any.value ();
        return 1;
      }
    else
      {
        Components::InvalidStateIdData *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::InvalidStateIdData,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        CORBA::String_var interface_repository_id;
        
        if (!(stream >> interface_repository_id.out ()))
          {
            return 0;
          }
        
        if (ACE_OS::strcmp (
                interface_repository_id.in (),
                "IDL:Components/InvalidStateIdData:1.0")
              )
          {
            return 0;
          }
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::_tc_InvalidStateIdData,
                1,
                tmp,
                Components::InvalidStateIdData::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::HomeRegistration_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_HomeRegistration,
      1,
      Components::HomeRegistration::_duplicate (_tao_elem),
      Components::HomeRegistration::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::HomeRegistration_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_HomeRegistration,
      1,
      *_tao_elem,
      Components::HomeRegistration::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::HomeRegistration_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::HomeRegistration::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_HomeRegistration
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          Components::HomeRegistration_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::HomeRegistration::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::HomeRegistration,Components::HomeRegistration_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::HomeRegistration,Components::HomeRegistration_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::CCM2Context_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_CCM2Context,
      1,
      Components::CCM2Context::_duplicate (_tao_elem),
      Components::CCM2Context::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::CCM2Context_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_CCM2Context,
      1,
      *_tao_elem,
      Components::CCM2Context::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::CCM2Context_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::CCM2Context::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_CCM2Context
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          Components::CCM2Context_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::CCM2Context::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::CCM2Context,Components::CCM2Context_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::CCM2Context,Components::CCM2Context_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::ProxyHomeRegistration_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_ProxyHomeRegistration,
      1,
      Components::ProxyHomeRegistration::_duplicate (_tao_elem),
      Components::ProxyHomeRegistration::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::ProxyHomeRegistration_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_ProxyHomeRegistration,
      1,
      *_tao_elem,
      Components::ProxyHomeRegistration::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::ProxyHomeRegistration_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::ProxyHomeRegistration::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_ProxyHomeRegistration
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          Components::ProxyHomeRegistration_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::ProxyHomeRegistration::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::ProxyHomeRegistration,Components::ProxyHomeRegistration_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::ProxyHomeRegistration,Components::ProxyHomeRegistration_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Session2Context_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_Session2Context,
      1,
      Components::Session2Context::_duplicate (_tao_elem),
      Components::Session2Context::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Session2Context_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_Session2Context,
      1,
      *_tao_elem,
      Components::Session2Context::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::Session2Context_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::Session2Context::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_Session2Context
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          Components::Session2Context_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::Session2Context::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::Session2Context,Components::Session2Context_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::Session2Context,Components::Session2Context_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/any_op_cs.cpp:56

// Copying.
void
operator<<= (
    CORBA::Any &any,
    Components::StateIdValue *value
  )
{
  TAO_OutputCDR stream;
  
  if (stream << value)
    {
      any._tao_replace (
          Components::_tc_StateIdValue, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying.
void
operator<<= (
    CORBA::Any &any,
    Components::StateIdValue **value
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *value)
    {
      any._tao_replace (
          Components::_tc_StateIdValue, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *value,
          Components::StateIdValue::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &any,
    Components::StateIdValue *&value
  )
{
  ACE_TRY_NEW_ENV
  {
    value = 0;
    CORBA::TypeCode_var type = any.type ();
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_StateIdValue
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    if (any.any_owns_data ())
      {
        const Components::StateIdValue *const_holder =
          ACE_static_cast (
              const Components::StateIdValue *,
              any.value ()
            );
        value =
          ACE_const_cast (
              Components::StateIdValue *,
              const_holder
            );
        return 1;
      }
    else
      {
        Components::StateIdValue *tmp;
        TAO_InputCDR stream (
            any._tao_get_cdr (),
            any._tao_byte_order ()
          );
        
        if (stream >> tmp)
          {
            ((CORBA::Any *)&any)->_tao_replace (
                Components::_tc_StateIdValue,
                1,
                ACE_static_cast (void *, tmp),
                Components::StateIdValue::_tao_any_destructor
              );
            value = tmp;
            return 1;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Valuetype_Manager<Components::StateIdValue, Components::StateIdValue_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Valuetype_Manager<Components::StateIdValue, Components::StateIdValue_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::StateIdFactory_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_StateIdFactory,
      1,
      Components::StateIdFactory::_duplicate (_tao_elem),
      Components::StateIdFactory::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::StateIdFactory_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_StateIdFactory,
      1,
      *_tao_elem,
      Components::StateIdFactory::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::StateIdFactory_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::StateIdFactory::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_StateIdFactory
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          Components::StateIdFactory_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::StateIdFactory::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::StateIdFactory,Components::StateIdFactory_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::StateIdFactory,Components::StateIdFactory_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/any_op_cs.cpp:56

// Copying.
void
operator<<= (
    CORBA::Any &any,
    Components::PersistentIdValue *value
  )
{
  TAO_OutputCDR stream;
  
  if (stream << value)
    {
      any._tao_replace (
          Components::_tc_PersistentIdValue, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying.
void
operator<<= (
    CORBA::Any &any,
    Components::PersistentIdValue **value
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *value)
    {
      any._tao_replace (
          Components::_tc_PersistentIdValue, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *value,
          Components::PersistentIdValue::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &any,
    Components::PersistentIdValue *&value
  )
{
  ACE_TRY_NEW_ENV
  {
    value = 0;
    CORBA::TypeCode_var type = any.type ();
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_PersistentIdValue
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    if (any.any_owns_data ())
      {
        const Components::PersistentIdValue *const_holder =
          ACE_static_cast (
              const Components::PersistentIdValue *,
              any.value ()
            );
        value =
          ACE_const_cast (
              Components::PersistentIdValue *,
              const_holder
            );
        return 1;
      }
    else
      {
        Components::PersistentIdValue *tmp;
        TAO_InputCDR stream (
            any._tao_get_cdr (),
            any._tao_byte_order ()
          );
        
        if (stream >> tmp)
          {
            ((CORBA::Any *)&any)->_tao_replace (
                Components::_tc_PersistentIdValue,
                1,
                ACE_static_cast (void *, tmp),
                Components::PersistentIdValue::_tao_any_destructor
              );
            value = tmp;
            return 1;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Valuetype_Manager<Components::PersistentIdValue, Components::PersistentIdValue_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Valuetype_Manager<Components::PersistentIdValue, Components::PersistentIdValue_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/any_op_cs.cpp:56

// Copying.
void
operator<<= (
    CORBA::Any &any,
    Components::SegmentDescr *value
  )
{
  TAO_OutputCDR stream;
  
  if (stream << value)
    {
      any._tao_replace (
          Components::_tc_SegmentDescr, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying.
void
operator<<= (
    CORBA::Any &any,
    Components::SegmentDescr **value
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *value)
    {
      any._tao_replace (
          Components::_tc_SegmentDescr, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *value,
          Components::SegmentDescr::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &any,
    Components::SegmentDescr *&value
  )
{
  ACE_TRY_NEW_ENV
  {
    value = 0;
    CORBA::TypeCode_var type = any.type ();
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_SegmentDescr
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    if (any.any_owns_data ())
      {
        const Components::SegmentDescr *const_holder =
          ACE_static_cast (
              const Components::SegmentDescr *,
              any.value ()
            );
        value =
          ACE_const_cast (
              Components::SegmentDescr *,
              const_holder
            );
        return 1;
      }
    else
      {
        Components::SegmentDescr *tmp;
        TAO_InputCDR stream (
            any._tao_get_cdr (),
            any._tao_byte_order ()
          );
        
        if (stream >> tmp)
          {
            ((CORBA::Any *)&any)->_tao_replace (
                Components::_tc_SegmentDescr,
                1,
                ACE_static_cast (void *, tmp),
                Components::SegmentDescr::_tao_any_destructor
              );
            value = tmp;
            return 1;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Valuetype_Manager<Components::SegmentDescr, Components::SegmentDescr_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Valuetype_Manager<Components::SegmentDescr, Components::SegmentDescr_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const Components::SegmentDescrSeq &_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << _tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_SegmentDescrSeq,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin ()
        );
    }
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    Components::SegmentDescrSeq *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          Components::_tc_SegmentDescrSeq,
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          _tao_elem,
          Components::SegmentDescrSeq::_tao_any_destructor
        );
    }
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    Components::SegmentDescrSeq *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast(
      const Components::SegmentDescrSeq*&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const Components::SegmentDescrSeq *&_tao_elem
  )
{
  _tao_elem = 0;
  
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_SegmentDescrSeq
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    if (_tao_any.any_owns_data ())
      {
        _tao_elem = ACE_static_cast(
            const Components::SegmentDescrSeq*,
            _tao_any.value ()
          );
        
        return 1;
      }
    else
      {
        Components::SegmentDescrSeq *tmp = 0;
        ACE_NEW_RETURN (
            tmp,
            Components::SegmentDescrSeq,
            0
          );
        
        TAO_InputCDR stream (
            _tao_any._tao_get_cdr (),
            _tao_any._tao_byte_order ()
          );
        
        if (stream >> *tmp)
          {
            ((CORBA::Any *)&_tao_any)->_tao_replace (
                Components::_tc_SegmentDescrSeq,
                1,
                ACE_static_cast (void *, tmp),
                Components::SegmentDescrSeq::_tao_any_destructor
              );
            
            _tao_elem = tmp;
            return 1;
          }
        else
          {
            delete tmp;
          }
      }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::ComponentId_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_ComponentId,
      1,
      Components::ComponentId::_duplicate (_tao_elem),
      Components::ComponentId::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::ComponentId_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_ComponentId,
      1,
      *_tao_elem,
      Components::ComponentId::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::ComponentId_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::ComponentId::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_ComponentId
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          Components::ComponentId_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::ComponentId::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::ComponentId,Components::ComponentId_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::ComponentId,Components::ComponentId_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Entity2Context_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_Entity2Context,
      1,
      Components::Entity2Context::_duplicate (_tao_elem),
      Components::Entity2Context::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::Entity2Context_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_Entity2Context,
      1,
      *_tao_elem,
      Components::Entity2Context::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::Entity2Context_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::Entity2Context::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_Entity2Context
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          Components::Entity2Context_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::Entity2Context::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::Entity2Context,Components::Entity2Context_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::Entity2Context,Components::Entity2Context_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::ExecutorLocator_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_ExecutorLocator,
      1,
      Components::ExecutorLocator::_duplicate (_tao_elem),
      Components::ExecutorLocator::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::ExecutorLocator_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_ExecutorLocator,
      1,
      *_tao_elem,
      Components::ExecutorLocator::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::ExecutorLocator_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::ExecutorLocator::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_ExecutorLocator
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          Components::ExecutorLocator_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::ExecutorLocator::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::ExecutorLocator,Components::ExecutorLocator_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::ExecutorLocator,Components::ExecutorLocator_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::HomeExecutorBase_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_HomeExecutorBase,
      1,
      Components::HomeExecutorBase::_duplicate (_tao_elem),
      Components::HomeExecutorBase::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    Components::HomeExecutorBase_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      Components::_tc_HomeExecutorBase,
      1,
      *_tao_elem,
      Components::HomeExecutorBase::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    Components::HomeExecutorBase_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = Components::HomeExecutorBase::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          Components::_tc_HomeExecutorBase
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          Components::HomeExecutorBase_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = Components::HomeExecutorBase::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<Components::HomeExecutorBase,Components::HomeExecutorBase_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<Components::HomeExecutorBase,Components::HomeExecutorBase_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:103

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::IdData &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      {
        TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
          ACE_static_cast (TAO_Unbounded_Sequence<CORBA::Octet>*, (Components::IdData *)&_tao_sequence);
        if (oseq->mb ())
          return strm.write_octet_array_mb (oseq->mb ());
        else
          return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
      }
      
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::IdData &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      if (ACE_BIT_DISABLED (strm.start ()->flags (),
      ACE_Message_Block::DONT_DELETE))
      {
        TAO_ORB_Core* orb_core = strm.orb_core ();
        if (orb_core != 0 &&
        strm.orb_core ()->resource_factory ()->
        input_cdr_allocator_type_locked () == 1)
        {
          TAO_Unbounded_Sequence<CORBA::Octet> *oseq = 
            ACE_static_cast(TAO_Unbounded_Sequence<CORBA::Octet>*, &_tao_sequence);
          oseq->replace (_tao_seq_len, strm.start ());
          oseq->mb ()->wr_ptr (oseq->mb()->rd_ptr () + _tao_seq_len);
          strm.skip_bytes (_tao_seq_len);
          return 1;
        }
      }
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_seq_len);
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    }
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:740

void
CORBA::add_ref (Components::StateIdValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Components::StateIdValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_cs.cpp:73

CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Components::StateIdValue *_tao_valuetype
  )
{
  return
    CORBA_ValueBase::_tao_marshal (
        strm,
        ACE_const_cast (
            Components::StateIdValue *,
            _tao_valuetype
          ),
        (ptr_arith_t) &Components::StateIdValue::_downcast
      );
}

CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Components::StateIdValue *&_tao_valuetype
  )
{
  return Components::StateIdValue::_tao_unmarshal (strm, _tao_valuetype);
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:740

void
CORBA::add_ref (Components::PersistentIdValue * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Components::PersistentIdValue * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_cs.cpp:73

CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Components::PersistentIdValue *_tao_valuetype
  )
{
  return
    CORBA_ValueBase::_tao_marshal (
        strm,
        ACE_const_cast (
            Components::PersistentIdValue *,
            _tao_valuetype
          ),
        (ptr_arith_t) &Components::PersistentIdValue::_downcast
      );
}

CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Components::PersistentIdValue *&_tao_valuetype
  )
{
  return Components::PersistentIdValue::_tao_unmarshal (strm, _tao_valuetype);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/marshal_cs.cpp:44

CORBA::Boolean
OBV_Components::PersistentIdValue::_tao_marshal_state (TAO_OutputCDR &strm)
{
  if (
    (strm << _pd_pid.in ())
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

CORBA::Boolean
OBV_Components::PersistentIdValue::_tao_unmarshal_state (TAO_InputCDR &strm)
{
  if (
    (strm >> _pd_pid.out ())
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_valuetype.cpp:740

void
CORBA::add_ref (Components::SegmentDescr * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (Components::SegmentDescr * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/cdr_op_cs.cpp:73

CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const Components::SegmentDescr *_tao_valuetype
  )
{
  return
    CORBA_ValueBase::_tao_marshal (
        strm,
        ACE_const_cast (
            Components::SegmentDescr *,
            _tao_valuetype
          ),
        (ptr_arith_t) &Components::SegmentDescr::_downcast
      );
}

CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    Components::SegmentDescr *&_tao_valuetype
  )
{
  return Components::SegmentDescr::_tao_unmarshal (strm, _tao_valuetype);
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_valuetype/marshal_cs.cpp:44

CORBA::Boolean
OBV_Components::SegmentDescr::_tao_marshal_state (TAO_OutputCDR &strm)
{
  if (
    (strm << _pd_sid.in ()) &&
    (strm << _pd_seg)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

CORBA::Boolean
OBV_Components::SegmentDescr::_tao_unmarshal_state (TAO_InputCDR &strm)
{
  if (
    (strm >> _pd_sid.out ()) &&
    (strm >> _pd_seg)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:103

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::SegmentDescrSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i].in ());
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::SegmentDescrSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

