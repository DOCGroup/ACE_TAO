// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_DEPLOYMENT_COMPONENTINSTALLATION___CI_)
#define _COMPONENTS_DEPLOYMENT_COMPONENTINSTALLATION___CI_

ACE_INLINE
Components::Deployment::ComponentInstallation::ComponentInstallation (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_Deployment_ComponentInstallation_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_DEPLOYMENT_ASSEMBLY___CI_)
#define _COMPONENTS_DEPLOYMENT_ASSEMBLY___CI_

ACE_INLINE
Components::Deployment::Assembly::Assembly (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_Deployment_Assembly_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_DEPLOYMENT_ASSEMBLYFACTORY___CI_)
#define _COMPONENTS_DEPLOYMENT_ASSEMBLYFACTORY___CI_

ACE_INLINE
Components::Deployment::AssemblyFactory::AssemblyFactory (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_Deployment_AssemblyFactory_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:108

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_DEPLOYMENT_COMPONENTSERVERS_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_DEPLOYMENT_COMPONENTSERVERS_CI_

ACE_INLINE
Components::Deployment::ComponentServer **
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::allocbuf (CORBA::ULong nelems)
{
  Components::Deployment::ComponentServer **buf = 0;
  
  ACE_NEW_RETURN (buf, Components::Deployment::ComponentServer*[nelems], 0);
  
  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = Components::Deployment::ComponentServer::_nil ();
    }
  
  return buf;
}

ACE_INLINE
void 
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::freebuf (Components::Deployment::ComponentServer **buffer)
{
  if (buffer == 0)
    {
      return;
    }
  
  delete[] buffer;
}

ACE_INLINE
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers (void)
{
}

ACE_INLINE
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::allocbuf (maximum))
{
}

ACE_INLINE
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers (
    CORBA::ULong maximum,
    CORBA::ULong length,
    Components::Deployment::ComponentServer* *value,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers(
    const _TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      Components::Deployment::ComponentServer **tmp1 =
        _TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::allocbuf (this->maximum_);
      Components::Deployment::ComponentServer ** const tmp2 =
        ACE_reinterpret_cast (Components::Deployment::ComponentServer ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          tmp1[i] = Components::Deployment::ComponentServer::_duplicate (tmp2[i]);
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers &
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::operator= (
    const _TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      Components::Deployment::ComponentServer **tmp =
        ACE_reinterpret_cast (Components::Deployment::ComponentServer **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          CORBA::release (tmp[i]);
          tmp[i] = Components::Deployment::ComponentServer::_nil ();
        }
      
      if (this->maximum_ < rhs.maximum_)
        {
          _TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::freebuf (tmp);
          this->buffer_ = _TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  Components::Deployment::ComponentServer **tmp1 =
    ACE_reinterpret_cast (Components::Deployment::ComponentServer **, this->buffer_);
  
  Components::Deployment::ComponentServer ** const tmp2 =
    ACE_reinterpret_cast (Components::Deployment::ComponentServer ** ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      tmp1[i] = Components::Deployment::ComponentServer::_duplicate (tmp2[i]);
    }
  
  return *this;
}

ACE_INLINE
TAO_Object_Manager<Components::Deployment::ComponentServer,Components::Deployment::ComponentServer_var>
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::operator[] (CORBA::ULong index) const
{
  ACE_ASSERT (index < this->maximum_);
  Components::Deployment::ComponentServer ** const tmp =
    ACE_reinterpret_cast (Components::Deployment::ComponentServer ** ACE_CAST_CONST, this->buffer_);
  return TAO_Object_Manager<Components::Deployment::ComponentServer,Components::Deployment::ComponentServer_var> (tmp + index, this->release_);
}

ACE_INLINE
Components::Deployment::ComponentServer* *
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::get_buffer (CORBA::Boolean orphan)
{
  Components::Deployment::ComponentServer **result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::allocbuf (this->maximum_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (Components::Deployment::ComponentServer**, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(Components::Deployment::ComponentServer**,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const Components::Deployment::ComponentServer* *
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_ComponentServers::get_buffer (void) const
{
  return ACE_reinterpret_cast (const Components::Deployment::ComponentServer ** ACE_CAST_CONST, this->buffer_);
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_DEPLOYMENT_COMPONENTSERVERS_CI_)
#define _COMPONENTS_DEPLOYMENT_COMPONENTSERVERS_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class Components::Deployment::ComponentServers_var
// *************************************************************

ACE_INLINE
Components::Deployment::ComponentServers_var::ComponentServers_var (void)
  : ptr_ (0)
{}

ACE_INLINE
Components::Deployment::ComponentServers_var::ComponentServers_var (ComponentServers *p)
  : ptr_ (p)
{}

ACE_INLINE
Components::Deployment::ComponentServers_var::ComponentServers_var (const ::Components::Deployment::ComponentServers_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::Components::Deployment::ComponentServers (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
Components::Deployment::ComponentServers_var::~ComponentServers_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
Components::Deployment::ComponentServers_var &
Components::Deployment::ComponentServers_var::operator= (ComponentServers *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::Components::Deployment::ComponentServers_var &
Components::Deployment::ComponentServers_var::operator= (const ::Components::Deployment::ComponentServers_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ComponentServers *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ComponentServers (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ComponentServers *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::Components::Deployment::ComponentServers *
Components::Deployment::ComponentServers_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::Components::Deployment::ComponentServers *
Components::Deployment::ComponentServers_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Components::Deployment::ComponentServers_var::operator const ::Components::Deployment::ComponentServers &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Components::Deployment::ComponentServers_var::operator ::Components::Deployment::ComponentServers &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Components::Deployment::ComponentServers_var::operator ::Components::Deployment::ComponentServers &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
Components::Deployment::ComponentServers_var::operator ::Components::Deployment::ComponentServers *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_Object_Manager<Components::Deployment::ComponentServer, Components::Deployment::ComponentServer_var>
Components::Deployment::ComponentServers_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::Components::Deployment::ComponentServers &
Components::Deployment::ComponentServers_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::Components::Deployment::ComponentServers &
Components::Deployment::ComponentServers_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::Components::Deployment::ComponentServers *&
Components::Deployment::ComponentServers_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::Components::Deployment::ComponentServers *
Components::Deployment::ComponentServers_var::_retn (void)
{
  ::Components::Deployment::ComponentServers *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::Components::Deployment::ComponentServers *
Components::Deployment::ComponentServers_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class Components::Deployment::ComponentServers_out
// *************************************************************

ACE_INLINE
Components::Deployment::ComponentServers_out::ComponentServers_out (ComponentServers *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Components::Deployment::ComponentServers_out::ComponentServers_out (ComponentServers_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Components::Deployment::ComponentServers_out::ComponentServers_out (const ::Components::Deployment::ComponentServers_out &p)
  : ptr_ (ACE_const_cast (ComponentServers_out&, p).ptr_)
{}

ACE_INLINE
::Components::Deployment::ComponentServers_out &
Components::Deployment::ComponentServers_out::operator= (const ::Components::Deployment::ComponentServers_out &p)
{
  this->ptr_ = ACE_const_cast (ComponentServers_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::Components::Deployment::ComponentServers_out &
Components::Deployment::ComponentServers_out::operator= (ComponentServers *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Components::Deployment::ComponentServers_out::operator ::Components::Deployment::ComponentServers *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::Components::Deployment::ComponentServers *&
Components::Deployment::ComponentServers_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::Components::Deployment::ComponentServers *
Components::Deployment::ComponentServers_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_Object_Manager<Components::Deployment::ComponentServer, Components::Deployment::ComponentServer_var>
Components::Deployment::ComponentServers_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_DEPLOYMENT_SERVERACTIVATOR___CI_)
#define _COMPONENTS_DEPLOYMENT_SERVERACTIVATOR___CI_

ACE_INLINE
Components::Deployment::ServerActivator::ServerActivator (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_Deployment_ServerActivator_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:108

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_DEPLOYMENT_CONTAINERS_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_COMPONENTS_DEPLOYMENT_CONTAINERS_CI_

ACE_INLINE
Components::Deployment::Container **
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::allocbuf (CORBA::ULong nelems)
{
  Components::Deployment::Container **buf = 0;
  
  ACE_NEW_RETURN (buf, Components::Deployment::Container*[nelems], 0);
  
  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = Components::Deployment::Container::_nil ();
    }
  
  return buf;
}

ACE_INLINE
void 
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::freebuf (Components::Deployment::Container **buffer)
{
  if (buffer == 0)
    {
      return;
    }
  
  delete[] buffer;
}

ACE_INLINE
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers (void)
{
}

ACE_INLINE
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::allocbuf (maximum))
{
}

ACE_INLINE
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers (
    CORBA::ULong maximum,
    CORBA::ULong length,
    Components::Deployment::Container* *value,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers(
    const _TAO_Unbounded_Object_Sequence_Components_Deployment_Containers &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      Components::Deployment::Container **tmp1 =
        _TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::allocbuf (this->maximum_);
      Components::Deployment::Container ** const tmp2 =
        ACE_reinterpret_cast (Components::Deployment::Container ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          tmp1[i] = Components::Deployment::Container::_duplicate (tmp2[i]);
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers &
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::operator= (
    const _TAO_Unbounded_Object_Sequence_Components_Deployment_Containers &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      Components::Deployment::Container **tmp =
        ACE_reinterpret_cast (Components::Deployment::Container **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          CORBA::release (tmp[i]);
          tmp[i] = Components::Deployment::Container::_nil ();
        }
      
      if (this->maximum_ < rhs.maximum_)
        {
          _TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::freebuf (tmp);
          this->buffer_ = _TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  Components::Deployment::Container **tmp1 =
    ACE_reinterpret_cast (Components::Deployment::Container **, this->buffer_);
  
  Components::Deployment::Container ** const tmp2 =
    ACE_reinterpret_cast (Components::Deployment::Container ** ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      tmp1[i] = Components::Deployment::Container::_duplicate (tmp2[i]);
    }
  
  return *this;
}

ACE_INLINE
TAO_Object_Manager<Components::Deployment::Container,Components::Deployment::Container_var>
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::operator[] (CORBA::ULong index) const
{
  ACE_ASSERT (index < this->maximum_);
  Components::Deployment::Container ** const tmp =
    ACE_reinterpret_cast (Components::Deployment::Container ** ACE_CAST_CONST, this->buffer_);
  return TAO_Object_Manager<Components::Deployment::Container,Components::Deployment::Container_var> (tmp + index, this->release_);
}

ACE_INLINE
Components::Deployment::Container* *
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::get_buffer (CORBA::Boolean orphan)
{
  Components::Deployment::Container **result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::allocbuf (this->maximum_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (Components::Deployment::Container**, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(Components::Deployment::Container**,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const Components::Deployment::Container* *
Components::Deployment::_TAO_Unbounded_Object_Sequence_Components_Deployment_Containers::get_buffer (void) const
{
  return ACE_reinterpret_cast (const Components::Deployment::Container ** ACE_CAST_CONST, this->buffer_);
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_COMPONENTS_DEPLOYMENT_CONTAINERS_CI_)
#define _COMPONENTS_DEPLOYMENT_CONTAINERS_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class Components::Deployment::Containers_var
// *************************************************************

ACE_INLINE
Components::Deployment::Containers_var::Containers_var (void)
  : ptr_ (0)
{}

ACE_INLINE
Components::Deployment::Containers_var::Containers_var (Containers *p)
  : ptr_ (p)
{}

ACE_INLINE
Components::Deployment::Containers_var::Containers_var (const ::Components::Deployment::Containers_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::Components::Deployment::Containers (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
Components::Deployment::Containers_var::~Containers_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
Components::Deployment::Containers_var &
Components::Deployment::Containers_var::operator= (Containers *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::Components::Deployment::Containers_var &
Components::Deployment::Containers_var::operator= (const ::Components::Deployment::Containers_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          Containers *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              Containers (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              Containers *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::Components::Deployment::Containers *
Components::Deployment::Containers_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::Components::Deployment::Containers *
Components::Deployment::Containers_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
Components::Deployment::Containers_var::operator const ::Components::Deployment::Containers &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
Components::Deployment::Containers_var::operator ::Components::Deployment::Containers &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
Components::Deployment::Containers_var::operator ::Components::Deployment::Containers &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
Components::Deployment::Containers_var::operator ::Components::Deployment::Containers *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_Object_Manager<Components::Deployment::Container, Components::Deployment::Container_var>
Components::Deployment::Containers_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::Components::Deployment::Containers &
Components::Deployment::Containers_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::Components::Deployment::Containers &
Components::Deployment::Containers_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::Components::Deployment::Containers *&
Components::Deployment::Containers_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::Components::Deployment::Containers *
Components::Deployment::Containers_var::_retn (void)
{
  ::Components::Deployment::Containers *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::Components::Deployment::Containers *
Components::Deployment::Containers_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class Components::Deployment::Containers_out
// *************************************************************

ACE_INLINE
Components::Deployment::Containers_out::Containers_out (Containers *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
Components::Deployment::Containers_out::Containers_out (Containers_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
Components::Deployment::Containers_out::Containers_out (const ::Components::Deployment::Containers_out &p)
  : ptr_ (ACE_const_cast (Containers_out&, p).ptr_)
{}

ACE_INLINE
::Components::Deployment::Containers_out &
Components::Deployment::Containers_out::operator= (const ::Components::Deployment::Containers_out &p)
{
  this->ptr_ = ACE_const_cast (Containers_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::Components::Deployment::Containers_out &
Components::Deployment::Containers_out::operator= (Containers *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
Components::Deployment::Containers_out::operator ::Components::Deployment::Containers *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::Components::Deployment::Containers *&
Components::Deployment::Containers_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::Components::Deployment::Containers *
Components::Deployment::Containers_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_Object_Manager<Components::Deployment::Container, Components::Deployment::Container_var>
Components::Deployment::Containers_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_DEPLOYMENT_COMPONENTSERVER___CI_)
#define _COMPONENTS_DEPLOYMENT_COMPONENTSERVER___CI_

ACE_INLINE
Components::Deployment::ComponentServer::ComponentServer (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_Deployment_ComponentServer_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_COMPONENTS_DEPLOYMENT_CONTAINER___CI_)
#define _COMPONENTS_DEPLOYMENT_CONTAINER___CI_

ACE_INLINE
Components::Deployment::Container::Container (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->Components_Deployment_Container_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/cdr_op_ci.cpp:51

ACE_INLINE
CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Components::Deployment::AssemblyState &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE
CORBA::Boolean operator>> (TAO_InputCDR &strm, Components::Deployment::AssemblyState &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (Components::Deployment::AssemblyState, _tao_temp);
    }
  
  return _tao_result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::UnknownImplId &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Deployment::UnknownImplId&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::InvalidLocation &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Deployment::InvalidLocation&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::InstallationFailure &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      if (
        (strm << _tao_aggregate.reason)
       )
        {
          return 1;
        }
      else
        {
          return 0;
        }
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Components::Deployment::InstallationFailure &_tao_aggregate
  )
{
  // Demarshal the members.
  if (
    (strm >> _tao_aggregate.reason)
  )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::InvalidAssembly &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Deployment::InvalidAssembly&
  )
{
  return 1;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::Deployment::ComponentInstallation_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Deployment::ComponentInstallation_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::Deployment::Assembly_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Deployment::Assembly_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::Deployment::AssemblyFactory_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Deployment::AssemblyFactory_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/cdr_op_ci.cpp:59

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::Deployment::ComponentServer_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Deployment::ComponentServer_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_Components_Deployment_ComponentServers_I_
#define _TAO_CDR_OP_Components_Deployment_ComponentServers_I_

CORBA::Boolean CIAO_Export operator<< (
    TAO_OutputCDR &,
    const Components::Deployment::ComponentServers &
  );

CORBA::Boolean CIAO_Export operator>> (
    TAO_InputCDR &,
    Components::Deployment::ComponentServers &
  );

#endif /* _TAO_CDR_OP_Components_Deployment_ComponentServers_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::Deployment::ServerActivator_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Deployment::ServerActivator_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/cdr_op_ci.cpp:59

CIAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Components::Deployment::Container_ptr
  );

CIAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Deployment::Container_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_Components_Deployment_Containers_I_
#define _TAO_CDR_OP_Components_Deployment_Containers_I_

CORBA::Boolean CIAO_Export operator<< (
    TAO_OutputCDR &,
    const Components::Deployment::Containers &
  );

CORBA::Boolean CIAO_Export operator>> (
    TAO_InputCDR &,
    Components::Deployment::Containers &
  );

#endif /* _TAO_CDR_OP_Components_Deployment_Containers_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Components::Deployment::ImplEntryPointNotFound &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Components::Deployment::ImplEntryPointNotFound&
  )
{
  return 1;
}

