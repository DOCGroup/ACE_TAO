// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:314


#include "helloEC.h"
#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo_i.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */



#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "helloEC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_Hello::_tao_class_id = 0;

CCM_Hello_ptr
tao_CCM_Hello_duplicate (
    CCM_Hello_ptr p
  )
{
  return CCM_Hello::_duplicate (p);
}

void
tao_CCM_Hello_release (
    CCM_Hello_ptr p
  )
{
  CORBA::release (p);
}

CCM_Hello_ptr
tao_CCM_Hello_nil (
    void
  )
{
  return CCM_Hello::_nil ();
}

CCM_Hello_ptr
tao_CCM_Hello_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_Hello::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_Hello_upcast (
    void *src
  )
{
  CCM_Hello **tmp =
    ACE_static_cast (CCM_Hello **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_Hello_var
// *************************************************************

CCM_Hello_var::CCM_Hello_var (void)
  : ptr_ (CCM_Hello::_nil ())
{}

::CCM_Hello_ptr
CCM_Hello_var::ptr (void) const
{
  return this->ptr_;
}

CCM_Hello_var::CCM_Hello_var (const ::CCM_Hello_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_Hello::_duplicate (p.ptr ()))
{}

CCM_Hello_var::~CCM_Hello_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_Hello_var &
CCM_Hello_var::operator= (CCM_Hello_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_Hello_var &
CCM_Hello_var::operator= (const ::CCM_Hello_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_Hello::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_Hello_var::operator const ::CCM_Hello_ptr &() const // cast
{
  return this->ptr_;
}

CCM_Hello_var::operator ::CCM_Hello_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_Hello_ptr
CCM_Hello_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_Hello_ptr
CCM_Hello_var::in (void) const
{
  return this->ptr_;
}

::CCM_Hello_ptr &
CCM_Hello_var::inout (void)
{
  return this->ptr_;
}

::CCM_Hello_ptr &
CCM_Hello_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_Hello::_nil ();
  return this->ptr_;
}

::CCM_Hello_ptr
CCM_Hello_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_Hello_ptr val = this->ptr_;
  this->ptr_ = ::CCM_Hello::_nil ();
  return val;
}

::CCM_Hello_ptr
CCM_Hello_var::tao_duplicate (CCM_Hello_ptr p)
{
  return ::CCM_Hello::_duplicate (p);
}

void
CCM_Hello_var::tao_release (CCM_Hello_ptr p)
{
  CORBA::release (p);
}

::CCM_Hello_ptr
CCM_Hello_var::tao_nil (void)
{
  return ::CCM_Hello::_nil ();
}

::CCM_Hello_ptr
CCM_Hello_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_Hello::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_Hello_var::tao_upcast (void *src)
{
  CCM_Hello **tmp =
    ACE_static_cast (CCM_Hello **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_Hello_out
// *************************************************************

CCM_Hello_out::CCM_Hello_out (CCM_Hello_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_Hello::_nil ();
}

CCM_Hello_out::CCM_Hello_out (CCM_Hello_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_Hello::_nil ();
}

CCM_Hello_out::CCM_Hello_out (const ::CCM_Hello_out &p)
  : ptr_ (ACE_const_cast (CCM_Hello_out &, p).ptr_)
{}

::CCM_Hello_out &
CCM_Hello_out::operator= (const ::CCM_Hello_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_Hello_out&, p).ptr_;
  return *this;
}

CCM_Hello_out &
CCM_Hello_out::operator= (const ::CCM_Hello_var &p)
{
  this->ptr_ = ::CCM_Hello::_duplicate (p.ptr ());
  return *this;
}

CCM_Hello_out &
CCM_Hello_out::operator= (CCM_Hello_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_Hello_out::operator ::CCM_Hello_ptr &() // cast
{
  return this->ptr_;
}

::CCM_Hello_ptr &
CCM_Hello_out::ptr (void)
{
  return this->ptr_;
}

::CCM_Hello_ptr
CCM_Hello_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_Hello::CCM_Hello (void)
{}

CCM_Hello::~CCM_Hello (void)
{}

void 
CCM_Hello::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_Hello *tmp = ACE_static_cast (CCM_Hello *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_Hello_ptr
CCM_Hello::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_Hello::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_Hello_ptr 
CCM_Hello::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_Hello::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_Hello_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_Hello::_tao_class_id
                )
            )
        );
}

CCM_Hello_ptr
CCM_Hello::_duplicate (CCM_Hello_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_Hello::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_Hello::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &Hello::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Hello_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_Hello::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_Hello:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_Hello[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  26,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f3a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CCM_Hello:1.0
  10,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f000000),  // name = CCM_Hello
};

static CORBA::TypeCode _tc_TAO_tc_CCM_Hello (
    CORBA::tk_objref,
    sizeof (_oc_CCM_Hello),
    (char *) &_oc_CCM_Hello,
    0,
    sizeof (CCM_Hello)
  );

::CORBA::TypeCode_ptr _tc_CCM_Hello =
  &_tc_TAO_tc_CCM_Hello;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloWorld_Executor::_tao_class_id = 0;

CCM_HelloWorld_Executor_ptr
tao_CCM_HelloWorld_Executor_duplicate (
    CCM_HelloWorld_Executor_ptr p
  )
{
  return CCM_HelloWorld_Executor::_duplicate (p);
}

void
tao_CCM_HelloWorld_Executor_release (
    CCM_HelloWorld_Executor_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloWorld_Executor_ptr
tao_CCM_HelloWorld_Executor_nil (
    void
  )
{
  return CCM_HelloWorld_Executor::_nil ();
}

CCM_HelloWorld_Executor_ptr
tao_CCM_HelloWorld_Executor_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld_Executor::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloWorld_Executor_upcast (
    void *src
  )
{
  CCM_HelloWorld_Executor **tmp =
    ACE_static_cast (CCM_HelloWorld_Executor **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloWorld_Executor_var
// *************************************************************

CCM_HelloWorld_Executor_var::CCM_HelloWorld_Executor_var (void)
  : ptr_ (CCM_HelloWorld_Executor::_nil ())
{}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloWorld_Executor_var::CCM_HelloWorld_Executor_var (const ::CCM_HelloWorld_Executor_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloWorld_Executor::_duplicate (p.ptr ()))
{}

CCM_HelloWorld_Executor_var::~CCM_HelloWorld_Executor_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloWorld_Executor_var &
CCM_HelloWorld_Executor_var::operator= (CCM_HelloWorld_Executor_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_Executor_var &
CCM_HelloWorld_Executor_var::operator= (const ::CCM_HelloWorld_Executor_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloWorld_Executor::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloWorld_Executor_var::operator const ::CCM_HelloWorld_Executor_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloWorld_Executor_var::operator ::CCM_HelloWorld_Executor_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr &
CCM_HelloWorld_Executor_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr &
CCM_HelloWorld_Executor_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld_Executor::_nil ();
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloWorld_Executor_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloWorld_Executor::_nil ();
  return val;
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::tao_duplicate (CCM_HelloWorld_Executor_ptr p)
{
  return ::CCM_HelloWorld_Executor::_duplicate (p);
}

void
CCM_HelloWorld_Executor_var::tao_release (CCM_HelloWorld_Executor_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::tao_nil (void)
{
  return ::CCM_HelloWorld_Executor::_nil ();
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloWorld_Executor::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloWorld_Executor_var::tao_upcast (void *src)
{
  CCM_HelloWorld_Executor **tmp =
    ACE_static_cast (CCM_HelloWorld_Executor **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloWorld_Executor_out
// *************************************************************

CCM_HelloWorld_Executor_out::CCM_HelloWorld_Executor_out (CCM_HelloWorld_Executor_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloWorld_Executor::_nil ();
}

CCM_HelloWorld_Executor_out::CCM_HelloWorld_Executor_out (CCM_HelloWorld_Executor_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld_Executor::_nil ();
}

CCM_HelloWorld_Executor_out::CCM_HelloWorld_Executor_out (const ::CCM_HelloWorld_Executor_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloWorld_Executor_out &, p).ptr_)
{}

::CCM_HelloWorld_Executor_out &
CCM_HelloWorld_Executor_out::operator= (const ::CCM_HelloWorld_Executor_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloWorld_Executor_out&, p).ptr_;
  return *this;
}

CCM_HelloWorld_Executor_out &
CCM_HelloWorld_Executor_out::operator= (const ::CCM_HelloWorld_Executor_var &p)
{
  this->ptr_ = ::CCM_HelloWorld_Executor::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloWorld_Executor_out &
CCM_HelloWorld_Executor_out::operator= (CCM_HelloWorld_Executor_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_Executor_out::operator ::CCM_HelloWorld_Executor_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr &
CCM_HelloWorld_Executor_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloWorld_Executor::CCM_HelloWorld_Executor (void)
{}

CCM_HelloWorld_Executor::~CCM_HelloWorld_Executor (void)
{}

void 
CCM_HelloWorld_Executor::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloWorld_Executor *tmp = ACE_static_cast (CCM_HelloWorld_Executor *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld_Executor::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloWorld_Executor_ptr 
CCM_HelloWorld_Executor::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloWorld_Executor::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloWorld_Executor_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloWorld_Executor::_tao_class_id
                )
            )
        );
}

CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor::_duplicate (CCM_HelloWorld_Executor_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloWorld_Executor::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloWorld_Executor::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::EnterpriseComponent::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::EnterpriseComponent_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &Hello::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Hello_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloWorld_Executor::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloWorld_Executor:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloWorld_Executor[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c645f45), 
  ACE_NTOHL (0x78656375), 
  ACE_NTOHL (0x746f723a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CCM_HelloWorld_Executor:1.0
  24,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c645f45), 
  ACE_NTOHL (0x78656375), 
  ACE_NTOHL (0x746f7200),  // name = CCM_HelloWorld_Executor
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloWorld_Executor (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloWorld_Executor),
    (char *) &_oc_CCM_HelloWorld_Executor,
    0,
    sizeof (CCM_HelloWorld_Executor)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloWorld_Executor =
  &_tc_TAO_tc_CCM_HelloWorld_Executor;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloWorld::_tao_class_id = 0;

CCM_HelloWorld_ptr
tao_CCM_HelloWorld_duplicate (
    CCM_HelloWorld_ptr p
  )
{
  return CCM_HelloWorld::_duplicate (p);
}

void
tao_CCM_HelloWorld_release (
    CCM_HelloWorld_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloWorld_ptr
tao_CCM_HelloWorld_nil (
    void
  )
{
  return CCM_HelloWorld::_nil ();
}

CCM_HelloWorld_ptr
tao_CCM_HelloWorld_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloWorld_upcast (
    void *src
  )
{
  CCM_HelloWorld **tmp =
    ACE_static_cast (CCM_HelloWorld **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloWorld_var
// *************************************************************

CCM_HelloWorld_var::CCM_HelloWorld_var (void)
  : ptr_ (CCM_HelloWorld::_nil ())
{}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloWorld_var::CCM_HelloWorld_var (const ::CCM_HelloWorld_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloWorld::_duplicate (p.ptr ()))
{}

CCM_HelloWorld_var::~CCM_HelloWorld_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloWorld_var &
CCM_HelloWorld_var::operator= (CCM_HelloWorld_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_var &
CCM_HelloWorld_var::operator= (const ::CCM_HelloWorld_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloWorld::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloWorld_var::operator const ::CCM_HelloWorld_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloWorld_var::operator ::CCM_HelloWorld_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr &
CCM_HelloWorld_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr &
CCM_HelloWorld_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld::_nil ();
  return this->ptr_;
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloWorld_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloWorld::_nil ();
  return val;
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::tao_duplicate (CCM_HelloWorld_ptr p)
{
  return ::CCM_HelloWorld::_duplicate (p);
}

void
CCM_HelloWorld_var::tao_release (CCM_HelloWorld_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::tao_nil (void)
{
  return ::CCM_HelloWorld::_nil ();
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloWorld::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloWorld_var::tao_upcast (void *src)
{
  CCM_HelloWorld **tmp =
    ACE_static_cast (CCM_HelloWorld **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloWorld_out
// *************************************************************

CCM_HelloWorld_out::CCM_HelloWorld_out (CCM_HelloWorld_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloWorld::_nil ();
}

CCM_HelloWorld_out::CCM_HelloWorld_out (CCM_HelloWorld_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld::_nil ();
}

CCM_HelloWorld_out::CCM_HelloWorld_out (const ::CCM_HelloWorld_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloWorld_out &, p).ptr_)
{}

::CCM_HelloWorld_out &
CCM_HelloWorld_out::operator= (const ::CCM_HelloWorld_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloWorld_out&, p).ptr_;
  return *this;
}

CCM_HelloWorld_out &
CCM_HelloWorld_out::operator= (const ::CCM_HelloWorld_var &p)
{
  this->ptr_ = ::CCM_HelloWorld::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloWorld_out &
CCM_HelloWorld_out::operator= (CCM_HelloWorld_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_out::operator ::CCM_HelloWorld_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr &
CCM_HelloWorld_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloWorld::CCM_HelloWorld (void)
{}

CCM_HelloWorld::~CCM_HelloWorld (void)
{}

void 
CCM_HelloWorld::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloWorld *tmp = ACE_static_cast (CCM_HelloWorld *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloWorld_ptr
CCM_HelloWorld::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloWorld_ptr 
CCM_HelloWorld::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloWorld::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloWorld_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloWorld::_tao_class_id
                )
            )
        );
}

CCM_HelloWorld_ptr
CCM_HelloWorld::_duplicate (CCM_HelloWorld_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloWorld::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloWorld::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloWorld_Executor::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                CCM_HelloWorld_Executor_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::EnterpriseComponent::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::EnterpriseComponent_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &Hello::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Hello_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloWorld::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloWorld:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloWorld[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c643a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CCM_HelloWorld:1.0
  15,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c640000),  // name = CCM_HelloWorld
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloWorld (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloWorld),
    (char *) &_oc_CCM_HelloWorld,
    0,
    sizeof (CCM_HelloWorld)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloWorld =
  &_tc_TAO_tc_CCM_HelloWorld;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloWorld_Context::_tao_class_id = 0;

CCM_HelloWorld_Context_ptr
tao_CCM_HelloWorld_Context_duplicate (
    CCM_HelloWorld_Context_ptr p
  )
{
  return CCM_HelloWorld_Context::_duplicate (p);
}

void
tao_CCM_HelloWorld_Context_release (
    CCM_HelloWorld_Context_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloWorld_Context_ptr
tao_CCM_HelloWorld_Context_nil (
    void
  )
{
  return CCM_HelloWorld_Context::_nil ();
}

CCM_HelloWorld_Context_ptr
tao_CCM_HelloWorld_Context_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld_Context::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloWorld_Context_upcast (
    void *src
  )
{
  CCM_HelloWorld_Context **tmp =
    ACE_static_cast (CCM_HelloWorld_Context **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloWorld_Context_var
// *************************************************************

CCM_HelloWorld_Context_var::CCM_HelloWorld_Context_var (void)
  : ptr_ (CCM_HelloWorld_Context::_nil ())
{}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloWorld_Context_var::CCM_HelloWorld_Context_var (const ::CCM_HelloWorld_Context_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloWorld_Context::_duplicate (p.ptr ()))
{}

CCM_HelloWorld_Context_var::~CCM_HelloWorld_Context_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloWorld_Context_var &
CCM_HelloWorld_Context_var::operator= (CCM_HelloWorld_Context_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_Context_var &
CCM_HelloWorld_Context_var::operator= (const ::CCM_HelloWorld_Context_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloWorld_Context::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloWorld_Context_var::operator const ::CCM_HelloWorld_Context_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloWorld_Context_var::operator ::CCM_HelloWorld_Context_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr &
CCM_HelloWorld_Context_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr &
CCM_HelloWorld_Context_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld_Context::_nil ();
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloWorld_Context_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloWorld_Context::_nil ();
  return val;
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::tao_duplicate (CCM_HelloWorld_Context_ptr p)
{
  return ::CCM_HelloWorld_Context::_duplicate (p);
}

void
CCM_HelloWorld_Context_var::tao_release (CCM_HelloWorld_Context_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::tao_nil (void)
{
  return ::CCM_HelloWorld_Context::_nil ();
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloWorld_Context::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloWorld_Context_var::tao_upcast (void *src)
{
  CCM_HelloWorld_Context **tmp =
    ACE_static_cast (CCM_HelloWorld_Context **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloWorld_Context_out
// *************************************************************

CCM_HelloWorld_Context_out::CCM_HelloWorld_Context_out (CCM_HelloWorld_Context_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloWorld_Context::_nil ();
}

CCM_HelloWorld_Context_out::CCM_HelloWorld_Context_out (CCM_HelloWorld_Context_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld_Context::_nil ();
}

CCM_HelloWorld_Context_out::CCM_HelloWorld_Context_out (const ::CCM_HelloWorld_Context_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloWorld_Context_out &, p).ptr_)
{}

::CCM_HelloWorld_Context_out &
CCM_HelloWorld_Context_out::operator= (const ::CCM_HelloWorld_Context_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloWorld_Context_out&, p).ptr_;
  return *this;
}

CCM_HelloWorld_Context_out &
CCM_HelloWorld_Context_out::operator= (const ::CCM_HelloWorld_Context_var &p)
{
  this->ptr_ = ::CCM_HelloWorld_Context::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloWorld_Context_out &
CCM_HelloWorld_Context_out::operator= (CCM_HelloWorld_Context_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_Context_out::operator ::CCM_HelloWorld_Context_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr &
CCM_HelloWorld_Context_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloWorld_Context::CCM_HelloWorld_Context (void)
{}

CCM_HelloWorld_Context::~CCM_HelloWorld_Context (void)
{}

void 
CCM_HelloWorld_Context::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloWorld_Context *tmp = ACE_static_cast (CCM_HelloWorld_Context *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld_Context::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloWorld_Context_ptr 
CCM_HelloWorld_Context::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloWorld_Context::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloWorld_Context_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloWorld_Context::_tao_class_id
                )
            )
        );
}

CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context::_duplicate (CCM_HelloWorld_Context_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloWorld_Context::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloWorld_Context::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::CCMContext::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::CCMContext_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloWorld_Context::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloWorld_Context:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloWorld_Context[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c645f43), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CCM_HelloWorld_Context:1.0
  23,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c645f43), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78740000),  // name = CCM_HelloWorld_Context
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloWorld_Context (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloWorld_Context),
    (char *) &_oc_CCM_HelloWorld_Context,
    0,
    sizeof (CCM_HelloWorld_Context)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloWorld_Context =
  &_tc_TAO_tc_CCM_HelloWorld_Context;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloHomeImplicit::_tao_class_id = 0;

CCM_HelloHomeImplicit_ptr
tao_CCM_HelloHomeImplicit_duplicate (
    CCM_HelloHomeImplicit_ptr p
  )
{
  return CCM_HelloHomeImplicit::_duplicate (p);
}

void
tao_CCM_HelloHomeImplicit_release (
    CCM_HelloHomeImplicit_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloHomeImplicit_ptr
tao_CCM_HelloHomeImplicit_nil (
    void
  )
{
  return CCM_HelloHomeImplicit::_nil ();
}

CCM_HelloHomeImplicit_ptr
tao_CCM_HelloHomeImplicit_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHomeImplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloHomeImplicit_upcast (
    void *src
  )
{
  CCM_HelloHomeImplicit **tmp =
    ACE_static_cast (CCM_HelloHomeImplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloHomeImplicit_var
// *************************************************************

CCM_HelloHomeImplicit_var::CCM_HelloHomeImplicit_var (void)
  : ptr_ (CCM_HelloHomeImplicit::_nil ())
{}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloHomeImplicit_var::CCM_HelloHomeImplicit_var (const ::CCM_HelloHomeImplicit_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloHomeImplicit::_duplicate (p.ptr ()))
{}

CCM_HelloHomeImplicit_var::~CCM_HelloHomeImplicit_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloHomeImplicit_var &
CCM_HelloHomeImplicit_var::operator= (CCM_HelloHomeImplicit_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloHomeImplicit_var &
CCM_HelloHomeImplicit_var::operator= (const ::CCM_HelloHomeImplicit_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloHomeImplicit::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloHomeImplicit_var::operator const ::CCM_HelloHomeImplicit_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloHomeImplicit_var::operator ::CCM_HelloHomeImplicit_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr &
CCM_HelloHomeImplicit_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr &
CCM_HelloHomeImplicit_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHomeImplicit::_nil ();
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloHomeImplicit_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloHomeImplicit::_nil ();
  return val;
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::tao_duplicate (CCM_HelloHomeImplicit_ptr p)
{
  return ::CCM_HelloHomeImplicit::_duplicate (p);
}

void
CCM_HelloHomeImplicit_var::tao_release (CCM_HelloHomeImplicit_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::tao_nil (void)
{
  return ::CCM_HelloHomeImplicit::_nil ();
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloHomeImplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloHomeImplicit_var::tao_upcast (void *src)
{
  CCM_HelloHomeImplicit **tmp =
    ACE_static_cast (CCM_HelloHomeImplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloHomeImplicit_out
// *************************************************************

CCM_HelloHomeImplicit_out::CCM_HelloHomeImplicit_out (CCM_HelloHomeImplicit_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloHomeImplicit::_nil ();
}

CCM_HelloHomeImplicit_out::CCM_HelloHomeImplicit_out (CCM_HelloHomeImplicit_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHomeImplicit::_nil ();
}

CCM_HelloHomeImplicit_out::CCM_HelloHomeImplicit_out (const ::CCM_HelloHomeImplicit_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloHomeImplicit_out &, p).ptr_)
{}

::CCM_HelloHomeImplicit_out &
CCM_HelloHomeImplicit_out::operator= (const ::CCM_HelloHomeImplicit_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloHomeImplicit_out&, p).ptr_;
  return *this;
}

CCM_HelloHomeImplicit_out &
CCM_HelloHomeImplicit_out::operator= (const ::CCM_HelloHomeImplicit_var &p)
{
  this->ptr_ = ::CCM_HelloHomeImplicit::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloHomeImplicit_out &
CCM_HelloHomeImplicit_out::operator= (CCM_HelloHomeImplicit_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloHomeImplicit_out::operator ::CCM_HelloHomeImplicit_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr &
CCM_HelloHomeImplicit_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloHomeImplicit::CCM_HelloHomeImplicit (void)
{}

CCM_HelloHomeImplicit::~CCM_HelloHomeImplicit (void)
{}

void 
CCM_HelloHomeImplicit::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloHomeImplicit *tmp = ACE_static_cast (CCM_HelloHomeImplicit *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHomeImplicit::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloHomeImplicit_ptr 
CCM_HelloHomeImplicit::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloHomeImplicit::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloHomeImplicit_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloHomeImplicit::_tao_class_id
                )
            )
        );
}

CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit::_duplicate (CCM_HelloHomeImplicit_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloHomeImplicit::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloHomeImplicit::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloHomeImplicit::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloHomeImplicit:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloHomeImplicit[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65496d70), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x743a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CCM_HelloHomeImplicit:1.0
  22,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65496d70), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x74000000),  // name = CCM_HelloHomeImplicit
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloHomeImplicit (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloHomeImplicit),
    (char *) &_oc_CCM_HelloHomeImplicit,
    0,
    sizeof (CCM_HelloHomeImplicit)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloHomeImplicit =
  &_tc_TAO_tc_CCM_HelloHomeImplicit;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloHomeExplicit::_tao_class_id = 0;

CCM_HelloHomeExplicit_ptr
tao_CCM_HelloHomeExplicit_duplicate (
    CCM_HelloHomeExplicit_ptr p
  )
{
  return CCM_HelloHomeExplicit::_duplicate (p);
}

void
tao_CCM_HelloHomeExplicit_release (
    CCM_HelloHomeExplicit_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloHomeExplicit_ptr
tao_CCM_HelloHomeExplicit_nil (
    void
  )
{
  return CCM_HelloHomeExplicit::_nil ();
}

CCM_HelloHomeExplicit_ptr
tao_CCM_HelloHomeExplicit_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHomeExplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloHomeExplicit_upcast (
    void *src
  )
{
  CCM_HelloHomeExplicit **tmp =
    ACE_static_cast (CCM_HelloHomeExplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloHomeExplicit_var
// *************************************************************

CCM_HelloHomeExplicit_var::CCM_HelloHomeExplicit_var (void)
  : ptr_ (CCM_HelloHomeExplicit::_nil ())
{}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloHomeExplicit_var::CCM_HelloHomeExplicit_var (const ::CCM_HelloHomeExplicit_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloHomeExplicit::_duplicate (p.ptr ()))
{}

CCM_HelloHomeExplicit_var::~CCM_HelloHomeExplicit_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloHomeExplicit_var &
CCM_HelloHomeExplicit_var::operator= (CCM_HelloHomeExplicit_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloHomeExplicit_var &
CCM_HelloHomeExplicit_var::operator= (const ::CCM_HelloHomeExplicit_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloHomeExplicit::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloHomeExplicit_var::operator const ::CCM_HelloHomeExplicit_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloHomeExplicit_var::operator ::CCM_HelloHomeExplicit_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr &
CCM_HelloHomeExplicit_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr &
CCM_HelloHomeExplicit_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHomeExplicit::_nil ();
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloHomeExplicit_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloHomeExplicit::_nil ();
  return val;
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::tao_duplicate (CCM_HelloHomeExplicit_ptr p)
{
  return ::CCM_HelloHomeExplicit::_duplicate (p);
}

void
CCM_HelloHomeExplicit_var::tao_release (CCM_HelloHomeExplicit_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::tao_nil (void)
{
  return ::CCM_HelloHomeExplicit::_nil ();
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloHomeExplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloHomeExplicit_var::tao_upcast (void *src)
{
  CCM_HelloHomeExplicit **tmp =
    ACE_static_cast (CCM_HelloHomeExplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloHomeExplicit_out
// *************************************************************

CCM_HelloHomeExplicit_out::CCM_HelloHomeExplicit_out (CCM_HelloHomeExplicit_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloHomeExplicit::_nil ();
}

CCM_HelloHomeExplicit_out::CCM_HelloHomeExplicit_out (CCM_HelloHomeExplicit_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHomeExplicit::_nil ();
}

CCM_HelloHomeExplicit_out::CCM_HelloHomeExplicit_out (const ::CCM_HelloHomeExplicit_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloHomeExplicit_out &, p).ptr_)
{}

::CCM_HelloHomeExplicit_out &
CCM_HelloHomeExplicit_out::operator= (const ::CCM_HelloHomeExplicit_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloHomeExplicit_out&, p).ptr_;
  return *this;
}

CCM_HelloHomeExplicit_out &
CCM_HelloHomeExplicit_out::operator= (const ::CCM_HelloHomeExplicit_var &p)
{
  this->ptr_ = ::CCM_HelloHomeExplicit::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloHomeExplicit_out &
CCM_HelloHomeExplicit_out::operator= (CCM_HelloHomeExplicit_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloHomeExplicit_out::operator ::CCM_HelloHomeExplicit_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr &
CCM_HelloHomeExplicit_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloHomeExplicit::CCM_HelloHomeExplicit (void)
{}

CCM_HelloHomeExplicit::~CCM_HelloHomeExplicit (void)
{}

void 
CCM_HelloHomeExplicit::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloHomeExplicit *tmp = ACE_static_cast (CCM_HelloHomeExplicit *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHomeExplicit::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloHomeExplicit_ptr 
CCM_HelloHomeExplicit::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloHomeExplicit::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloHomeExplicit_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloHomeExplicit::_tao_class_id
                )
            )
        );
}

CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit::_duplicate (CCM_HelloHomeExplicit_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloHomeExplicit::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloHomeExplicit::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::HomeExecutorBase::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::HomeExecutorBase_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloHomeExplicit::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloHomeExplicit:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloHomeExplicit[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65457870), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x743a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CCM_HelloHomeExplicit:1.0
  22,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65457870), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x74000000),  // name = CCM_HelloHomeExplicit
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloHomeExplicit (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloHomeExplicit),
    (char *) &_oc_CCM_HelloHomeExplicit,
    0,
    sizeof (CCM_HelloHomeExplicit)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloHomeExplicit =
  &_tc_TAO_tc_CCM_HelloHomeExplicit;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloHome::_tao_class_id = 0;

CCM_HelloHome_ptr
tao_CCM_HelloHome_duplicate (
    CCM_HelloHome_ptr p
  )
{
  return CCM_HelloHome::_duplicate (p);
}

void
tao_CCM_HelloHome_release (
    CCM_HelloHome_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloHome_ptr
tao_CCM_HelloHome_nil (
    void
  )
{
  return CCM_HelloHome::_nil ();
}

CCM_HelloHome_ptr
tao_CCM_HelloHome_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHome::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloHome_upcast (
    void *src
  )
{
  CCM_HelloHome **tmp =
    ACE_static_cast (CCM_HelloHome **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloHome_var
// *************************************************************

CCM_HelloHome_var::CCM_HelloHome_var (void)
  : ptr_ (CCM_HelloHome::_nil ())
{}

::CCM_HelloHome_ptr
CCM_HelloHome_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloHome_var::CCM_HelloHome_var (const ::CCM_HelloHome_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloHome::_duplicate (p.ptr ()))
{}

CCM_HelloHome_var::~CCM_HelloHome_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloHome_var &
CCM_HelloHome_var::operator= (CCM_HelloHome_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloHome_var &
CCM_HelloHome_var::operator= (const ::CCM_HelloHome_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloHome::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloHome_var::operator const ::CCM_HelloHome_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloHome_var::operator ::CCM_HelloHome_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloHome_ptr &
CCM_HelloHome_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloHome_ptr &
CCM_HelloHome_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHome::_nil ();
  return this->ptr_;
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloHome_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloHome::_nil ();
  return val;
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::tao_duplicate (CCM_HelloHome_ptr p)
{
  return ::CCM_HelloHome::_duplicate (p);
}

void
CCM_HelloHome_var::tao_release (CCM_HelloHome_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::tao_nil (void)
{
  return ::CCM_HelloHome::_nil ();
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloHome::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloHome_var::tao_upcast (void *src)
{
  CCM_HelloHome **tmp =
    ACE_static_cast (CCM_HelloHome **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloHome_out
// *************************************************************

CCM_HelloHome_out::CCM_HelloHome_out (CCM_HelloHome_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloHome::_nil ();
}

CCM_HelloHome_out::CCM_HelloHome_out (CCM_HelloHome_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHome::_nil ();
}

CCM_HelloHome_out::CCM_HelloHome_out (const ::CCM_HelloHome_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloHome_out &, p).ptr_)
{}

::CCM_HelloHome_out &
CCM_HelloHome_out::operator= (const ::CCM_HelloHome_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloHome_out&, p).ptr_;
  return *this;
}

CCM_HelloHome_out &
CCM_HelloHome_out::operator= (const ::CCM_HelloHome_var &p)
{
  this->ptr_ = ::CCM_HelloHome::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloHome_out &
CCM_HelloHome_out::operator= (CCM_HelloHome_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloHome_out::operator ::CCM_HelloHome_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloHome_ptr &
CCM_HelloHome_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloHome_ptr
CCM_HelloHome_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloHome::CCM_HelloHome (void)
{}

CCM_HelloHome::~CCM_HelloHome (void)
{}

void 
CCM_HelloHome::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloHome *tmp = ACE_static_cast (CCM_HelloHome *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloHome_ptr
CCM_HelloHome::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHome::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloHome_ptr 
CCM_HelloHome::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloHome::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloHome_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloHome::_tao_class_id
                )
            )
        );
}

CCM_HelloHome_ptr
CCM_HelloHome::_duplicate (CCM_HelloHome_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloHome::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloHome::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloHomeExplicit::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                CCM_HelloHomeExplicit_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloHomeImplicit::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                CCM_HelloHomeImplicit_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::HomeExecutorBase::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::HomeExecutorBase_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloHome::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloHome:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloHome[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x653a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CCM_HelloHome:1.0
  14,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65000000),  // name = CCM_HelloHome
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloHome (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloHome),
    (char *) &_oc_CCM_HelloHome,
    0,
    sizeof (CCM_HelloHome)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloHome =
  &_tc_TAO_tc_CCM_HelloHome;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_Hello_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_Hello,
      1,
      CCM_Hello::_duplicate (_tao_elem),
      CCM_Hello::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_Hello_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_Hello,
      1,
      *_tao_elem,
      CCM_Hello::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_Hello_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_Hello::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_Hello
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_Hello_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_Hello::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_Hello,CCM_Hello_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_Hello,CCM_Hello_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_Executor_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld_Executor,
      1,
      CCM_HelloWorld_Executor::_duplicate (_tao_elem),
      CCM_HelloWorld_Executor::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_Executor_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld_Executor,
      1,
      *_tao_elem,
      CCM_HelloWorld_Executor::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloWorld_Executor_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloWorld_Executor::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloWorld_Executor
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloWorld_Executor_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloWorld_Executor::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloWorld_Executor,CCM_HelloWorld_Executor_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloWorld_Executor,CCM_HelloWorld_Executor_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld,
      1,
      CCM_HelloWorld::_duplicate (_tao_elem),
      CCM_HelloWorld::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld,
      1,
      *_tao_elem,
      CCM_HelloWorld::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloWorld_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloWorld::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloWorld
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloWorld_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloWorld::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloWorld,CCM_HelloWorld_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloWorld,CCM_HelloWorld_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_Context_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld_Context,
      1,
      CCM_HelloWorld_Context::_duplicate (_tao_elem),
      CCM_HelloWorld_Context::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_Context_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld_Context,
      1,
      *_tao_elem,
      CCM_HelloWorld_Context::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloWorld_Context_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloWorld_Context::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloWorld_Context
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloWorld_Context_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloWorld_Context::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloWorld_Context,CCM_HelloWorld_Context_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloWorld_Context,CCM_HelloWorld_Context_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHomeImplicit_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHomeImplicit,
      1,
      CCM_HelloHomeImplicit::_duplicate (_tao_elem),
      CCM_HelloHomeImplicit::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHomeImplicit_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHomeImplicit,
      1,
      *_tao_elem,
      CCM_HelloHomeImplicit::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloHomeImplicit_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloHomeImplicit::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloHomeImplicit
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloHomeImplicit_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloHomeImplicit::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloHomeImplicit,CCM_HelloHomeImplicit_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloHomeImplicit,CCM_HelloHomeImplicit_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHomeExplicit_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHomeExplicit,
      1,
      CCM_HelloHomeExplicit::_duplicate (_tao_elem),
      CCM_HelloHomeExplicit::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHomeExplicit_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHomeExplicit,
      1,
      *_tao_elem,
      CCM_HelloHomeExplicit::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloHomeExplicit_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloHomeExplicit::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloHomeExplicit
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloHomeExplicit_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloHomeExplicit::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloHomeExplicit,CCM_HelloHomeExplicit_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloHomeExplicit,CCM_HelloHomeExplicit_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHome_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHome,
      1,
      CCM_HelloHome::_duplicate (_tao_elem),
      CCM_HelloHome::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHome_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHome,
      1,
      *_tao_elem,
      CCM_HelloHome::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloHome_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloHome::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloHome
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloHome_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloHome::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloHome,CCM_HelloHome_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloHome,CCM_HelloHome_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

