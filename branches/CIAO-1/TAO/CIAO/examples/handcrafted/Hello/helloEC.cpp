// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:318


#include "helloEC.h"
#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo_i.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "helloEC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_Hello::_tao_class_id = 0;

CCM_Hello_ptr
tao_CCM_Hello_duplicate (
    CCM_Hello_ptr p
  )
{
  return CCM_Hello::_duplicate (p);
}

void
tao_CCM_Hello_release (
    CCM_Hello_ptr p
  )
{
  CORBA::release (p);
}

CCM_Hello_ptr
tao_CCM_Hello_nil (
    void
  )
{
  return CCM_Hello::_nil ();
}

CCM_Hello_ptr
tao_CCM_Hello_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_Hello::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_Hello_upcast (
    void *src
  )
{
  CCM_Hello **tmp =
    ACE_static_cast (CCM_Hello **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_Hello_var
// *************************************************************

CCM_Hello_var::CCM_Hello_var (void)
  : ptr_ (CCM_Hello::_nil ())
{}

::CCM_Hello_ptr
CCM_Hello_var::ptr (void) const
{
  return this->ptr_;
}

CCM_Hello_var::CCM_Hello_var (const ::CCM_Hello_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_Hello::_duplicate (p.ptr ()))
{}

CCM_Hello_var::~CCM_Hello_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_Hello_var &
CCM_Hello_var::operator= (CCM_Hello_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_Hello_var &
CCM_Hello_var::operator= (const ::CCM_Hello_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_Hello::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_Hello_var::operator const ::CCM_Hello_ptr &() const // cast
{
  return this->ptr_;
}

CCM_Hello_var::operator ::CCM_Hello_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_Hello_ptr
CCM_Hello_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_Hello_ptr
CCM_Hello_var::in (void) const
{
  return this->ptr_;
}

::CCM_Hello_ptr &
CCM_Hello_var::inout (void)
{
  return this->ptr_;
}

::CCM_Hello_ptr &
CCM_Hello_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_Hello::_nil ();
  return this->ptr_;
}

::CCM_Hello_ptr
CCM_Hello_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_Hello_ptr val = this->ptr_;
  this->ptr_ = ::CCM_Hello::_nil ();
  return val;
}

::CCM_Hello_ptr
CCM_Hello_var::tao_duplicate (CCM_Hello_ptr p)
{
  return ::CCM_Hello::_duplicate (p);
}

void
CCM_Hello_var::tao_release (CCM_Hello_ptr p)
{
  CORBA::release (p);
}

::CCM_Hello_ptr
CCM_Hello_var::tao_nil (void)
{
  return ::CCM_Hello::_nil ();
}

::CCM_Hello_ptr
CCM_Hello_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_Hello::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_Hello_var::tao_upcast (void *src)
{
  CCM_Hello **tmp =
    ACE_static_cast (CCM_Hello **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_Hello_out
// *************************************************************

CCM_Hello_out::CCM_Hello_out (CCM_Hello_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_Hello::_nil ();
}

CCM_Hello_out::CCM_Hello_out (CCM_Hello_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_Hello::_nil ();
}

CCM_Hello_out::CCM_Hello_out (const ::CCM_Hello_out &p)
  : ptr_ (ACE_const_cast (CCM_Hello_out &, p).ptr_)
{}

::CCM_Hello_out &
CCM_Hello_out::operator= (const ::CCM_Hello_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_Hello_out&, p).ptr_;
  return *this;
}

CCM_Hello_out &
CCM_Hello_out::operator= (const ::CCM_Hello_var &p)
{
  this->ptr_ = ::CCM_Hello::_duplicate (p.ptr ());
  return *this;
}

CCM_Hello_out &
CCM_Hello_out::operator= (CCM_Hello_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_Hello_out::operator ::CCM_Hello_ptr &() // cast
{
  return this->ptr_;
}

::CCM_Hello_ptr &
CCM_Hello_out::ptr (void)
{
  return this->ptr_;
}

::CCM_Hello_ptr
CCM_Hello_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_Hello::CCM_Hello (void)
{}

CCM_Hello::~CCM_Hello (void)
{}

void 
CCM_Hello::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_Hello *tmp = ACE_static_cast (CCM_Hello *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_Hello_ptr
CCM_Hello::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_Hello::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_Hello_ptr 
CCM_Hello::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_Hello::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_Hello_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_Hello::_tao_class_id
                )
            )
        );
}

CCM_Hello_ptr
CCM_Hello::_duplicate (CCM_Hello_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_Hello::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_Hello::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &Hello::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Hello_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_Hello::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_Hello:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_Hello[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  26,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f3a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CCM_Hello:1.0
  10,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f000000),  // name = CCM_Hello
};

static CORBA::TypeCode _tc_TAO_tc_CCM_Hello (
    CORBA::tk_objref,
    sizeof (_oc_CCM_Hello),
    (char *) &_oc_CCM_Hello,
    0,
    sizeof (CCM_Hello)
  );

::CORBA::TypeCode_ptr _tc_CCM_Hello =
  &_tc_TAO_tc_CCM_Hello;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloWorld_Executor::_tao_class_id = 0;

CCM_HelloWorld_Executor_ptr
tao_CCM_HelloWorld_Executor_duplicate (
    CCM_HelloWorld_Executor_ptr p
  )
{
  return CCM_HelloWorld_Executor::_duplicate (p);
}

void
tao_CCM_HelloWorld_Executor_release (
    CCM_HelloWorld_Executor_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloWorld_Executor_ptr
tao_CCM_HelloWorld_Executor_nil (
    void
  )
{
  return CCM_HelloWorld_Executor::_nil ();
}

CCM_HelloWorld_Executor_ptr
tao_CCM_HelloWorld_Executor_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld_Executor::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloWorld_Executor_upcast (
    void *src
  )
{
  CCM_HelloWorld_Executor **tmp =
    ACE_static_cast (CCM_HelloWorld_Executor **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloWorld_Executor_var
// *************************************************************

CCM_HelloWorld_Executor_var::CCM_HelloWorld_Executor_var (void)
  : ptr_ (CCM_HelloWorld_Executor::_nil ())
{}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloWorld_Executor_var::CCM_HelloWorld_Executor_var (const ::CCM_HelloWorld_Executor_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloWorld_Executor::_duplicate (p.ptr ()))
{}

CCM_HelloWorld_Executor_var::~CCM_HelloWorld_Executor_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloWorld_Executor_var &
CCM_HelloWorld_Executor_var::operator= (CCM_HelloWorld_Executor_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_Executor_var &
CCM_HelloWorld_Executor_var::operator= (const ::CCM_HelloWorld_Executor_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloWorld_Executor::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloWorld_Executor_var::operator const ::CCM_HelloWorld_Executor_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloWorld_Executor_var::operator ::CCM_HelloWorld_Executor_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr &
CCM_HelloWorld_Executor_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr &
CCM_HelloWorld_Executor_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld_Executor::_nil ();
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloWorld_Executor_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloWorld_Executor::_nil ();
  return val;
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::tao_duplicate (CCM_HelloWorld_Executor_ptr p)
{
  return ::CCM_HelloWorld_Executor::_duplicate (p);
}

void
CCM_HelloWorld_Executor_var::tao_release (CCM_HelloWorld_Executor_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::tao_nil (void)
{
  return ::CCM_HelloWorld_Executor::_nil ();
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloWorld_Executor::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloWorld_Executor_var::tao_upcast (void *src)
{
  CCM_HelloWorld_Executor **tmp =
    ACE_static_cast (CCM_HelloWorld_Executor **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloWorld_Executor_out
// *************************************************************

CCM_HelloWorld_Executor_out::CCM_HelloWorld_Executor_out (CCM_HelloWorld_Executor_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloWorld_Executor::_nil ();
}

CCM_HelloWorld_Executor_out::CCM_HelloWorld_Executor_out (CCM_HelloWorld_Executor_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld_Executor::_nil ();
}

CCM_HelloWorld_Executor_out::CCM_HelloWorld_Executor_out (const ::CCM_HelloWorld_Executor_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloWorld_Executor_out &, p).ptr_)
{}

::CCM_HelloWorld_Executor_out &
CCM_HelloWorld_Executor_out::operator= (const ::CCM_HelloWorld_Executor_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloWorld_Executor_out&, p).ptr_;
  return *this;
}

CCM_HelloWorld_Executor_out &
CCM_HelloWorld_Executor_out::operator= (const ::CCM_HelloWorld_Executor_var &p)
{
  this->ptr_ = ::CCM_HelloWorld_Executor::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloWorld_Executor_out &
CCM_HelloWorld_Executor_out::operator= (CCM_HelloWorld_Executor_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_Executor_out::operator ::CCM_HelloWorld_Executor_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr &
CCM_HelloWorld_Executor_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloWorld_Executor::CCM_HelloWorld_Executor (void)
{}

CCM_HelloWorld_Executor::~CCM_HelloWorld_Executor (void)
{}

void 
CCM_HelloWorld_Executor::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloWorld_Executor *tmp = ACE_static_cast (CCM_HelloWorld_Executor *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld_Executor::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloWorld_Executor_ptr 
CCM_HelloWorld_Executor::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloWorld_Executor::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloWorld_Executor_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloWorld_Executor::_tao_class_id
                )
            )
        );
}

CCM_HelloWorld_Executor_ptr
CCM_HelloWorld_Executor::_duplicate (CCM_HelloWorld_Executor_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloWorld_Executor::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloWorld_Executor::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::EnterpriseComponent::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::EnterpriseComponent_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &Hello::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Hello_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloWorld_Executor::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloWorld_Executor:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloWorld_Executor[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  40,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c645f45), 
  ACE_NTOHL (0x78656375), 
  ACE_NTOHL (0x746f723a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CCM_HelloWorld_Executor:1.0
  24,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c645f45), 
  ACE_NTOHL (0x78656375), 
  ACE_NTOHL (0x746f7200),  // name = CCM_HelloWorld_Executor
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloWorld_Executor (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloWorld_Executor),
    (char *) &_oc_CCM_HelloWorld_Executor,
    0,
    sizeof (CCM_HelloWorld_Executor)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloWorld_Executor =
  &_tc_TAO_tc_CCM_HelloWorld_Executor;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloWorld::_tao_class_id = 0;

CCM_HelloWorld_ptr
tao_CCM_HelloWorld_duplicate (
    CCM_HelloWorld_ptr p
  )
{
  return CCM_HelloWorld::_duplicate (p);
}

void
tao_CCM_HelloWorld_release (
    CCM_HelloWorld_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloWorld_ptr
tao_CCM_HelloWorld_nil (
    void
  )
{
  return CCM_HelloWorld::_nil ();
}

CCM_HelloWorld_ptr
tao_CCM_HelloWorld_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloWorld_upcast (
    void *src
  )
{
  CCM_HelloWorld **tmp =
    ACE_static_cast (CCM_HelloWorld **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloWorld_var
// *************************************************************

CCM_HelloWorld_var::CCM_HelloWorld_var (void)
  : ptr_ (CCM_HelloWorld::_nil ())
{}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloWorld_var::CCM_HelloWorld_var (const ::CCM_HelloWorld_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloWorld::_duplicate (p.ptr ()))
{}

CCM_HelloWorld_var::~CCM_HelloWorld_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloWorld_var &
CCM_HelloWorld_var::operator= (CCM_HelloWorld_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_var &
CCM_HelloWorld_var::operator= (const ::CCM_HelloWorld_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloWorld::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloWorld_var::operator const ::CCM_HelloWorld_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloWorld_var::operator ::CCM_HelloWorld_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr &
CCM_HelloWorld_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr &
CCM_HelloWorld_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld::_nil ();
  return this->ptr_;
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloWorld_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloWorld::_nil ();
  return val;
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::tao_duplicate (CCM_HelloWorld_ptr p)
{
  return ::CCM_HelloWorld::_duplicate (p);
}

void
CCM_HelloWorld_var::tao_release (CCM_HelloWorld_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::tao_nil (void)
{
  return ::CCM_HelloWorld::_nil ();
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloWorld::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloWorld_var::tao_upcast (void *src)
{
  CCM_HelloWorld **tmp =
    ACE_static_cast (CCM_HelloWorld **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloWorld_out
// *************************************************************

CCM_HelloWorld_out::CCM_HelloWorld_out (CCM_HelloWorld_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloWorld::_nil ();
}

CCM_HelloWorld_out::CCM_HelloWorld_out (CCM_HelloWorld_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld::_nil ();
}

CCM_HelloWorld_out::CCM_HelloWorld_out (const ::CCM_HelloWorld_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloWorld_out &, p).ptr_)
{}

::CCM_HelloWorld_out &
CCM_HelloWorld_out::operator= (const ::CCM_HelloWorld_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloWorld_out&, p).ptr_;
  return *this;
}

CCM_HelloWorld_out &
CCM_HelloWorld_out::operator= (const ::CCM_HelloWorld_var &p)
{
  this->ptr_ = ::CCM_HelloWorld::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloWorld_out &
CCM_HelloWorld_out::operator= (CCM_HelloWorld_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_out::operator ::CCM_HelloWorld_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr &
CCM_HelloWorld_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_ptr
CCM_HelloWorld_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloWorld::CCM_HelloWorld (void)
{}

CCM_HelloWorld::~CCM_HelloWorld (void)
{}

void 
CCM_HelloWorld::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloWorld *tmp = ACE_static_cast (CCM_HelloWorld *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloWorld_ptr
CCM_HelloWorld::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloWorld_ptr 
CCM_HelloWorld::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloWorld::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloWorld_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloWorld::_tao_class_id
                )
            )
        );
}

CCM_HelloWorld_ptr
CCM_HelloWorld::_duplicate (CCM_HelloWorld_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloWorld::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloWorld::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloWorld_Executor::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                CCM_HelloWorld_Executor_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::EnterpriseComponent::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::EnterpriseComponent_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &Hello::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Hello_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloWorld::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloWorld:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloWorld[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  31,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c643a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CCM_HelloWorld:1.0
  15,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c640000),  // name = CCM_HelloWorld
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloWorld (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloWorld),
    (char *) &_oc_CCM_HelloWorld,
    0,
    sizeof (CCM_HelloWorld)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloWorld =
  &_tc_TAO_tc_CCM_HelloWorld;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloWorld_Context::_tao_class_id = 0;

CCM_HelloWorld_Context_ptr
tao_CCM_HelloWorld_Context_duplicate (
    CCM_HelloWorld_Context_ptr p
  )
{
  return CCM_HelloWorld_Context::_duplicate (p);
}

void
tao_CCM_HelloWorld_Context_release (
    CCM_HelloWorld_Context_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloWorld_Context_ptr
tao_CCM_HelloWorld_Context_nil (
    void
  )
{
  return CCM_HelloWorld_Context::_nil ();
}

CCM_HelloWorld_Context_ptr
tao_CCM_HelloWorld_Context_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld_Context::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloWorld_Context_upcast (
    void *src
  )
{
  CCM_HelloWorld_Context **tmp =
    ACE_static_cast (CCM_HelloWorld_Context **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloWorld_Context_var
// *************************************************************

CCM_HelloWorld_Context_var::CCM_HelloWorld_Context_var (void)
  : ptr_ (CCM_HelloWorld_Context::_nil ())
{}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloWorld_Context_var::CCM_HelloWorld_Context_var (const ::CCM_HelloWorld_Context_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloWorld_Context::_duplicate (p.ptr ()))
{}

CCM_HelloWorld_Context_var::~CCM_HelloWorld_Context_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloWorld_Context_var &
CCM_HelloWorld_Context_var::operator= (CCM_HelloWorld_Context_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_Context_var &
CCM_HelloWorld_Context_var::operator= (const ::CCM_HelloWorld_Context_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloWorld_Context::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloWorld_Context_var::operator const ::CCM_HelloWorld_Context_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloWorld_Context_var::operator ::CCM_HelloWorld_Context_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr &
CCM_HelloWorld_Context_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr &
CCM_HelloWorld_Context_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld_Context::_nil ();
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloWorld_Context_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloWorld_Context::_nil ();
  return val;
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::tao_duplicate (CCM_HelloWorld_Context_ptr p)
{
  return ::CCM_HelloWorld_Context::_duplicate (p);
}

void
CCM_HelloWorld_Context_var::tao_release (CCM_HelloWorld_Context_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::tao_nil (void)
{
  return ::CCM_HelloWorld_Context::_nil ();
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloWorld_Context::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloWorld_Context_var::tao_upcast (void *src)
{
  CCM_HelloWorld_Context **tmp =
    ACE_static_cast (CCM_HelloWorld_Context **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloWorld_Context_out
// *************************************************************

CCM_HelloWorld_Context_out::CCM_HelloWorld_Context_out (CCM_HelloWorld_Context_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloWorld_Context::_nil ();
}

CCM_HelloWorld_Context_out::CCM_HelloWorld_Context_out (CCM_HelloWorld_Context_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloWorld_Context::_nil ();
}

CCM_HelloWorld_Context_out::CCM_HelloWorld_Context_out (const ::CCM_HelloWorld_Context_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloWorld_Context_out &, p).ptr_)
{}

::CCM_HelloWorld_Context_out &
CCM_HelloWorld_Context_out::operator= (const ::CCM_HelloWorld_Context_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloWorld_Context_out&, p).ptr_;
  return *this;
}

CCM_HelloWorld_Context_out &
CCM_HelloWorld_Context_out::operator= (const ::CCM_HelloWorld_Context_var &p)
{
  this->ptr_ = ::CCM_HelloWorld_Context::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloWorld_Context_out &
CCM_HelloWorld_Context_out::operator= (CCM_HelloWorld_Context_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloWorld_Context_out::operator ::CCM_HelloWorld_Context_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr &
CCM_HelloWorld_Context_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloWorld_Context::CCM_HelloWorld_Context (void)
{}

CCM_HelloWorld_Context::~CCM_HelloWorld_Context (void)
{}

void 
CCM_HelloWorld_Context::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloWorld_Context *tmp = ACE_static_cast (CCM_HelloWorld_Context *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloWorld_Context::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloWorld_Context_ptr 
CCM_HelloWorld_Context::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloWorld_Context::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloWorld_Context_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloWorld_Context::_tao_class_id
                )
            )
        );
}

CCM_HelloWorld_Context_ptr
CCM_HelloWorld_Context::_duplicate (CCM_HelloWorld_Context_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloWorld_Context::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloWorld_Context::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::CCMContext::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::CCMContext_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloWorld_Context::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloWorld_Context:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloWorld_Context[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c645f43), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CCM_HelloWorld_Context:1.0
  23,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f576f72), 
  ACE_NTOHL (0x6c645f43), 
  ACE_NTOHL (0x6f6e7465), 
  ACE_NTOHL (0x78740000),  // name = CCM_HelloWorld_Context
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloWorld_Context (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloWorld_Context),
    (char *) &_oc_CCM_HelloWorld_Context,
    0,
    sizeof (CCM_HelloWorld_Context)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloWorld_Context =
  &_tc_TAO_tc_CCM_HelloWorld_Context;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloHomeImplicit::_tao_class_id = 0;

CCM_HelloHomeImplicit_ptr
tao_CCM_HelloHomeImplicit_duplicate (
    CCM_HelloHomeImplicit_ptr p
  )
{
  return CCM_HelloHomeImplicit::_duplicate (p);
}

void
tao_CCM_HelloHomeImplicit_release (
    CCM_HelloHomeImplicit_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloHomeImplicit_ptr
tao_CCM_HelloHomeImplicit_nil (
    void
  )
{
  return CCM_HelloHomeImplicit::_nil ();
}

CCM_HelloHomeImplicit_ptr
tao_CCM_HelloHomeImplicit_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHomeImplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloHomeImplicit_upcast (
    void *src
  )
{
  CCM_HelloHomeImplicit **tmp =
    ACE_static_cast (CCM_HelloHomeImplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloHomeImplicit_var
// *************************************************************

CCM_HelloHomeImplicit_var::CCM_HelloHomeImplicit_var (void)
  : ptr_ (CCM_HelloHomeImplicit::_nil ())
{}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloHomeImplicit_var::CCM_HelloHomeImplicit_var (const ::CCM_HelloHomeImplicit_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloHomeImplicit::_duplicate (p.ptr ()))
{}

CCM_HelloHomeImplicit_var::~CCM_HelloHomeImplicit_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloHomeImplicit_var &
CCM_HelloHomeImplicit_var::operator= (CCM_HelloHomeImplicit_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloHomeImplicit_var &
CCM_HelloHomeImplicit_var::operator= (const ::CCM_HelloHomeImplicit_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloHomeImplicit::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloHomeImplicit_var::operator const ::CCM_HelloHomeImplicit_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloHomeImplicit_var::operator ::CCM_HelloHomeImplicit_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr &
CCM_HelloHomeImplicit_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr &
CCM_HelloHomeImplicit_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHomeImplicit::_nil ();
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloHomeImplicit_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloHomeImplicit::_nil ();
  return val;
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::tao_duplicate (CCM_HelloHomeImplicit_ptr p)
{
  return ::CCM_HelloHomeImplicit::_duplicate (p);
}

void
CCM_HelloHomeImplicit_var::tao_release (CCM_HelloHomeImplicit_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::tao_nil (void)
{
  return ::CCM_HelloHomeImplicit::_nil ();
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloHomeImplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloHomeImplicit_var::tao_upcast (void *src)
{
  CCM_HelloHomeImplicit **tmp =
    ACE_static_cast (CCM_HelloHomeImplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloHomeImplicit_out
// *************************************************************

CCM_HelloHomeImplicit_out::CCM_HelloHomeImplicit_out (CCM_HelloHomeImplicit_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloHomeImplicit::_nil ();
}

CCM_HelloHomeImplicit_out::CCM_HelloHomeImplicit_out (CCM_HelloHomeImplicit_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHomeImplicit::_nil ();
}

CCM_HelloHomeImplicit_out::CCM_HelloHomeImplicit_out (const ::CCM_HelloHomeImplicit_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloHomeImplicit_out &, p).ptr_)
{}

::CCM_HelloHomeImplicit_out &
CCM_HelloHomeImplicit_out::operator= (const ::CCM_HelloHomeImplicit_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloHomeImplicit_out&, p).ptr_;
  return *this;
}

CCM_HelloHomeImplicit_out &
CCM_HelloHomeImplicit_out::operator= (const ::CCM_HelloHomeImplicit_var &p)
{
  this->ptr_ = ::CCM_HelloHomeImplicit::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloHomeImplicit_out &
CCM_HelloHomeImplicit_out::operator= (CCM_HelloHomeImplicit_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloHomeImplicit_out::operator ::CCM_HelloHomeImplicit_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr &
CCM_HelloHomeImplicit_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloHomeImplicit::CCM_HelloHomeImplicit (void)
{}

CCM_HelloHomeImplicit::~CCM_HelloHomeImplicit (void)
{}

void 
CCM_HelloHomeImplicit::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloHomeImplicit *tmp = ACE_static_cast (CCM_HelloHomeImplicit *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHomeImplicit::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloHomeImplicit_ptr 
CCM_HelloHomeImplicit::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloHomeImplicit::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloHomeImplicit_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloHomeImplicit::_tao_class_id
                )
            )
        );
}

CCM_HelloHomeImplicit_ptr
CCM_HelloHomeImplicit::_duplicate (CCM_HelloHomeImplicit_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloHomeImplicit::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloHomeImplicit::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloHomeImplicit::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloHomeImplicit:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloHomeImplicit[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65496d70), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x743a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CCM_HelloHomeImplicit:1.0
  22,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65496d70), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x74000000),  // name = CCM_HelloHomeImplicit
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloHomeImplicit (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloHomeImplicit),
    (char *) &_oc_CCM_HelloHomeImplicit,
    0,
    sizeof (CCM_HelloHomeImplicit)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloHomeImplicit =
  &_tc_TAO_tc_CCM_HelloHomeImplicit;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloHomeExplicit::_tao_class_id = 0;

CCM_HelloHomeExplicit_ptr
tao_CCM_HelloHomeExplicit_duplicate (
    CCM_HelloHomeExplicit_ptr p
  )
{
  return CCM_HelloHomeExplicit::_duplicate (p);
}

void
tao_CCM_HelloHomeExplicit_release (
    CCM_HelloHomeExplicit_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloHomeExplicit_ptr
tao_CCM_HelloHomeExplicit_nil (
    void
  )
{
  return CCM_HelloHomeExplicit::_nil ();
}

CCM_HelloHomeExplicit_ptr
tao_CCM_HelloHomeExplicit_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHomeExplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloHomeExplicit_upcast (
    void *src
  )
{
  CCM_HelloHomeExplicit **tmp =
    ACE_static_cast (CCM_HelloHomeExplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloHomeExplicit_var
// *************************************************************

CCM_HelloHomeExplicit_var::CCM_HelloHomeExplicit_var (void)
  : ptr_ (CCM_HelloHomeExplicit::_nil ())
{}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloHomeExplicit_var::CCM_HelloHomeExplicit_var (const ::CCM_HelloHomeExplicit_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloHomeExplicit::_duplicate (p.ptr ()))
{}

CCM_HelloHomeExplicit_var::~CCM_HelloHomeExplicit_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloHomeExplicit_var &
CCM_HelloHomeExplicit_var::operator= (CCM_HelloHomeExplicit_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloHomeExplicit_var &
CCM_HelloHomeExplicit_var::operator= (const ::CCM_HelloHomeExplicit_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloHomeExplicit::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloHomeExplicit_var::operator const ::CCM_HelloHomeExplicit_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloHomeExplicit_var::operator ::CCM_HelloHomeExplicit_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr &
CCM_HelloHomeExplicit_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr &
CCM_HelloHomeExplicit_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHomeExplicit::_nil ();
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloHomeExplicit_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloHomeExplicit::_nil ();
  return val;
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::tao_duplicate (CCM_HelloHomeExplicit_ptr p)
{
  return ::CCM_HelloHomeExplicit::_duplicate (p);
}

void
CCM_HelloHomeExplicit_var::tao_release (CCM_HelloHomeExplicit_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::tao_nil (void)
{
  return ::CCM_HelloHomeExplicit::_nil ();
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloHomeExplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloHomeExplicit_var::tao_upcast (void *src)
{
  CCM_HelloHomeExplicit **tmp =
    ACE_static_cast (CCM_HelloHomeExplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloHomeExplicit_out
// *************************************************************

CCM_HelloHomeExplicit_out::CCM_HelloHomeExplicit_out (CCM_HelloHomeExplicit_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloHomeExplicit::_nil ();
}

CCM_HelloHomeExplicit_out::CCM_HelloHomeExplicit_out (CCM_HelloHomeExplicit_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHomeExplicit::_nil ();
}

CCM_HelloHomeExplicit_out::CCM_HelloHomeExplicit_out (const ::CCM_HelloHomeExplicit_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloHomeExplicit_out &, p).ptr_)
{}

::CCM_HelloHomeExplicit_out &
CCM_HelloHomeExplicit_out::operator= (const ::CCM_HelloHomeExplicit_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloHomeExplicit_out&, p).ptr_;
  return *this;
}

CCM_HelloHomeExplicit_out &
CCM_HelloHomeExplicit_out::operator= (const ::CCM_HelloHomeExplicit_var &p)
{
  this->ptr_ = ::CCM_HelloHomeExplicit::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloHomeExplicit_out &
CCM_HelloHomeExplicit_out::operator= (CCM_HelloHomeExplicit_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloHomeExplicit_out::operator ::CCM_HelloHomeExplicit_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr &
CCM_HelloHomeExplicit_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloHomeExplicit::CCM_HelloHomeExplicit (void)
{}

CCM_HelloHomeExplicit::~CCM_HelloHomeExplicit (void)
{}

void 
CCM_HelloHomeExplicit::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloHomeExplicit *tmp = ACE_static_cast (CCM_HelloHomeExplicit *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHomeExplicit::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloHomeExplicit_ptr 
CCM_HelloHomeExplicit::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloHomeExplicit::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloHomeExplicit_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloHomeExplicit::_tao_class_id
                )
            )
        );
}

CCM_HelloHomeExplicit_ptr
CCM_HelloHomeExplicit::_duplicate (CCM_HelloHomeExplicit_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloHomeExplicit::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloHomeExplicit::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::HomeExecutorBase::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::HomeExecutorBase_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloHomeExplicit::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloHomeExplicit:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloHomeExplicit[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65457870), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x743a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CCM_HelloHomeExplicit:1.0
  22,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65457870), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x74000000),  // name = CCM_HelloHomeExplicit
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloHomeExplicit (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloHomeExplicit),
    (char *) &_oc_CCM_HelloHomeExplicit,
    0,
    sizeof (CCM_HelloHomeExplicit)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloHomeExplicit =
  &_tc_TAO_tc_CCM_HelloHomeExplicit;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int CCM_HelloHome::_tao_class_id = 0;

CCM_HelloHome_ptr
tao_CCM_HelloHome_duplicate (
    CCM_HelloHome_ptr p
  )
{
  return CCM_HelloHome::_duplicate (p);
}

void
tao_CCM_HelloHome_release (
    CCM_HelloHome_ptr p
  )
{
  CORBA::release (p);
}

CCM_HelloHome_ptr
tao_CCM_HelloHome_nil (
    void
  )
{
  return CCM_HelloHome::_nil ();
}

CCM_HelloHome_ptr
tao_CCM_HelloHome_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHome::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_CCM_HelloHome_upcast (
    void *src
  )
{
  CCM_HelloHome **tmp =
    ACE_static_cast (CCM_HelloHome **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// CCM_HelloHome_var
// *************************************************************

CCM_HelloHome_var::CCM_HelloHome_var (void)
  : ptr_ (CCM_HelloHome::_nil ())
{}

::CCM_HelloHome_ptr
CCM_HelloHome_var::ptr (void) const
{
  return this->ptr_;
}

CCM_HelloHome_var::CCM_HelloHome_var (const ::CCM_HelloHome_var &p)
  : TAO_Base_var (),
    ptr_ (CCM_HelloHome::_duplicate (p.ptr ()))
{}

CCM_HelloHome_var::~CCM_HelloHome_var (void)
{
  CORBA::release (this->ptr_);
}

CCM_HelloHome_var &
CCM_HelloHome_var::operator= (CCM_HelloHome_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

CCM_HelloHome_var &
CCM_HelloHome_var::operator= (const ::CCM_HelloHome_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::CCM_HelloHome::_duplicate (p.ptr ());
  }
  return *this;
}

CCM_HelloHome_var::operator const ::CCM_HelloHome_ptr &() const // cast
{
  return this->ptr_;
}

CCM_HelloHome_var::operator ::CCM_HelloHome_ptr &() // cast 
{
  return this->ptr_;
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::operator-> (void) const
{
  return this->ptr_;
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::in (void) const
{
  return this->ptr_;
}

::CCM_HelloHome_ptr &
CCM_HelloHome_var::inout (void)
{
  return this->ptr_;
}

::CCM_HelloHome_ptr &
CCM_HelloHome_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHome::_nil ();
  return this->ptr_;
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::CCM_HelloHome_ptr val = this->ptr_;
  this->ptr_ = ::CCM_HelloHome::_nil ();
  return val;
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::tao_duplicate (CCM_HelloHome_ptr p)
{
  return ::CCM_HelloHome::_duplicate (p);
}

void
CCM_HelloHome_var::tao_release (CCM_HelloHome_ptr p)
{
  CORBA::release (p);
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::tao_nil (void)
{
  return ::CCM_HelloHome::_nil ();
}

::CCM_HelloHome_ptr
CCM_HelloHome_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::CCM_HelloHome::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
CCM_HelloHome_var::tao_upcast (void *src)
{
  CCM_HelloHome **tmp =
    ACE_static_cast (CCM_HelloHome **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// CCM_HelloHome_out
// *************************************************************

CCM_HelloHome_out::CCM_HelloHome_out (CCM_HelloHome_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::CCM_HelloHome::_nil ();
}

CCM_HelloHome_out::CCM_HelloHome_out (CCM_HelloHome_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::CCM_HelloHome::_nil ();
}

CCM_HelloHome_out::CCM_HelloHome_out (const ::CCM_HelloHome_out &p)
  : ptr_ (ACE_const_cast (CCM_HelloHome_out &, p).ptr_)
{}

::CCM_HelloHome_out &
CCM_HelloHome_out::operator= (const ::CCM_HelloHome_out &p)
{
  this->ptr_ = ACE_const_cast (CCM_HelloHome_out&, p).ptr_;
  return *this;
}

CCM_HelloHome_out &
CCM_HelloHome_out::operator= (const ::CCM_HelloHome_var &p)
{
  this->ptr_ = ::CCM_HelloHome::_duplicate (p.ptr ());
  return *this;
}

CCM_HelloHome_out &
CCM_HelloHome_out::operator= (CCM_HelloHome_ptr p)
{
  this->ptr_ = p;
  return *this;
}

CCM_HelloHome_out::operator ::CCM_HelloHome_ptr &() // cast
{
  return this->ptr_;
}

::CCM_HelloHome_ptr &
CCM_HelloHome_out::ptr (void)
{
  return this->ptr_;
}

::CCM_HelloHome_ptr
CCM_HelloHome_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

CCM_HelloHome::CCM_HelloHome (void)
{}

CCM_HelloHome::~CCM_HelloHome (void)
{}

void 
CCM_HelloHome::_tao_any_destructor (void *_tao_void_pointer)
{
  CCM_HelloHome *tmp = ACE_static_cast (CCM_HelloHome *, _tao_void_pointer);
  CORBA::release (tmp);
}

CCM_HelloHome_ptr
CCM_HelloHome::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return CCM_HelloHome::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

CCM_HelloHome_ptr 
CCM_HelloHome::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return CCM_HelloHome::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          CCM_HelloHome_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &CCM_HelloHome::_tao_class_id
                )
            )
        );
}

CCM_HelloHome_ptr
CCM_HelloHome::_duplicate (CCM_HelloHome_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *CCM_HelloHome::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloHome::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloHomeExplicit::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                CCM_HelloHomeExplicit_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &CCM_HelloHomeImplicit::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                CCM_HelloHomeImplicit_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::HomeExecutorBase::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::HomeExecutorBase_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* CCM_HelloHome::_interface_repository_id (void) const
{
  return "IDL:omg.org/CCM_HelloHome:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_CCM_HelloHome[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x653a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CCM_HelloHome:1.0
  14,
  ACE_NTOHL (0x43434d5f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65000000),  // name = CCM_HelloHome
};

static CORBA::TypeCode _tc_TAO_tc_CCM_HelloHome (
    CORBA::tk_objref,
    sizeof (_oc_CCM_HelloHome),
    (char *) &_oc_CCM_HelloHome,
    0,
    sizeof (CCM_HelloHome)
  );

::CORBA::TypeCode_ptr _tc_CCM_HelloHome =
  &_tc_TAO_tc_CCM_HelloHome;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int HelloHomeExplicit::_tao_class_id = 0;

HelloHomeExplicit_ptr
tao_HelloHomeExplicit_duplicate (
    HelloHomeExplicit_ptr p
  )
{
  return HelloHomeExplicit::_duplicate (p);
}

void
tao_HelloHomeExplicit_release (
    HelloHomeExplicit_ptr p
  )
{
  CORBA::release (p);
}

HelloHomeExplicit_ptr
tao_HelloHomeExplicit_nil (
    void
  )
{
  return HelloHomeExplicit::_nil ();
}

HelloHomeExplicit_ptr
tao_HelloHomeExplicit_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return HelloHomeExplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_HelloHomeExplicit_upcast (
    void *src
  )
{
  HelloHomeExplicit **tmp =
    ACE_static_cast (HelloHomeExplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// HelloHomeExplicit_var
// *************************************************************

HelloHomeExplicit_var::HelloHomeExplicit_var (void)
  : ptr_ (HelloHomeExplicit::_nil ())
{}

::HelloHomeExplicit_ptr
HelloHomeExplicit_var::ptr (void) const
{
  return this->ptr_;
}

HelloHomeExplicit_var::HelloHomeExplicit_var (const ::HelloHomeExplicit_var &p)
  : TAO_Base_var (),
    ptr_ (HelloHomeExplicit::_duplicate (p.ptr ()))
{}

HelloHomeExplicit_var::~HelloHomeExplicit_var (void)
{
  CORBA::release (this->ptr_);
}

HelloHomeExplicit_var &
HelloHomeExplicit_var::operator= (HelloHomeExplicit_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

HelloHomeExplicit_var &
HelloHomeExplicit_var::operator= (const ::HelloHomeExplicit_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::HelloHomeExplicit::_duplicate (p.ptr ());
  }
  return *this;
}

HelloHomeExplicit_var::operator const ::HelloHomeExplicit_ptr &() const // cast
{
  return this->ptr_;
}

HelloHomeExplicit_var::operator ::HelloHomeExplicit_ptr &() // cast 
{
  return this->ptr_;
}

::HelloHomeExplicit_ptr
HelloHomeExplicit_var::operator-> (void) const
{
  return this->ptr_;
}

::HelloHomeExplicit_ptr
HelloHomeExplicit_var::in (void) const
{
  return this->ptr_;
}

::HelloHomeExplicit_ptr &
HelloHomeExplicit_var::inout (void)
{
  return this->ptr_;
}

::HelloHomeExplicit_ptr &
HelloHomeExplicit_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::HelloHomeExplicit::_nil ();
  return this->ptr_;
}

::HelloHomeExplicit_ptr
HelloHomeExplicit_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::HelloHomeExplicit_ptr val = this->ptr_;
  this->ptr_ = ::HelloHomeExplicit::_nil ();
  return val;
}

::HelloHomeExplicit_ptr
HelloHomeExplicit_var::tao_duplicate (HelloHomeExplicit_ptr p)
{
  return ::HelloHomeExplicit::_duplicate (p);
}

void
HelloHomeExplicit_var::tao_release (HelloHomeExplicit_ptr p)
{
  CORBA::release (p);
}

::HelloHomeExplicit_ptr
HelloHomeExplicit_var::tao_nil (void)
{
  return ::HelloHomeExplicit::_nil ();
}

::HelloHomeExplicit_ptr
HelloHomeExplicit_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::HelloHomeExplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
HelloHomeExplicit_var::tao_upcast (void *src)
{
  HelloHomeExplicit **tmp =
    ACE_static_cast (HelloHomeExplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// HelloHomeExplicit_out
// *************************************************************

HelloHomeExplicit_out::HelloHomeExplicit_out (HelloHomeExplicit_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::HelloHomeExplicit::_nil ();
}

HelloHomeExplicit_out::HelloHomeExplicit_out (HelloHomeExplicit_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::HelloHomeExplicit::_nil ();
}

HelloHomeExplicit_out::HelloHomeExplicit_out (const ::HelloHomeExplicit_out &p)
  : ptr_ (ACE_const_cast (HelloHomeExplicit_out &, p).ptr_)
{}

::HelloHomeExplicit_out &
HelloHomeExplicit_out::operator= (const ::HelloHomeExplicit_out &p)
{
  this->ptr_ = ACE_const_cast (HelloHomeExplicit_out&, p).ptr_;
  return *this;
}

HelloHomeExplicit_out &
HelloHomeExplicit_out::operator= (const ::HelloHomeExplicit_var &p)
{
  this->ptr_ = ::HelloHomeExplicit::_duplicate (p.ptr ());
  return *this;
}

HelloHomeExplicit_out &
HelloHomeExplicit_out::operator= (HelloHomeExplicit_ptr p)
{
  this->ptr_ = p;
  return *this;
}

HelloHomeExplicit_out::operator ::HelloHomeExplicit_ptr &() // cast
{
  return this->ptr_;
}

::HelloHomeExplicit_ptr &
HelloHomeExplicit_out::ptr (void)
{
  return this->ptr_;
}

::HelloHomeExplicit_ptr
HelloHomeExplicit_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interceptors_cs.cpp:56

#if (TAO_HAS_INTERCEPTORS == 1)

#endif /* TAO_HAS_INTERCEPTORS */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

_TAO_HelloHomeExplicit_Proxy_Impl::_TAO_HelloHomeExplicit_Proxy_Impl (void)
{}

_TAO_HelloHomeExplicit_Remote_Proxy_Impl::_TAO_HelloHomeExplicit_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

_TAO_HelloHomeExplicit_Proxy_Broker::_TAO_HelloHomeExplicit_Proxy_Broker (void)
{
}

_TAO_HelloHomeExplicit_Proxy_Broker::~_TAO_HelloHomeExplicit_Proxy_Broker (void)
{
}

_TAO_HelloHomeExplicit_Proxy_Broker * (*_TAO_HelloHomeExplicit_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
_TAO_HelloHomeExplicit_Remote_Proxy_Broker *
_TAO_HelloHomeExplicit_Remote_Proxy_Broker::the_TAO_HelloHomeExplicit_Remote_Proxy_Broker (void)
{
  static ::_TAO_HelloHomeExplicit_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

_TAO_HelloHomeExplicit_Remote_Proxy_Broker::_TAO_HelloHomeExplicit_Remote_Proxy_Broker (void)
{
}

_TAO_HelloHomeExplicit_Remote_Proxy_Broker::~_TAO_HelloHomeExplicit_Remote_Proxy_Broker (void)
{
}

_TAO_HelloHomeExplicit_Proxy_Impl&
_TAO_HelloHomeExplicit_Remote_Proxy_Broker::select_proxy (
    ::HelloHomeExplicit *
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return this->remote_proxy_impl_;
}

//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

HelloHomeExplicit::HelloHomeExplicit (int collocated)
{
  this->HelloHomeExplicit_setup_collocation (collocated);
}

void
HelloHomeExplicit::HelloHomeExplicit_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_HelloHomeExplicit_Proxy_Broker_ =
      ::_TAO_HelloHomeExplicit_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_HelloHomeExplicit_Proxy_Broker_ =
      ::_TAO_HelloHomeExplicit_Remote_Proxy_Broker::the_TAO_HelloHomeExplicit_Remote_Proxy_Broker ();
  
  this->Components_CCMHome_setup_collocation (collocated);
}

HelloHomeExplicit::~HelloHomeExplicit (void)
{}

void 
HelloHomeExplicit::_tao_any_destructor (void *_tao_void_pointer)
{
  HelloHomeExplicit *tmp = ACE_static_cast (HelloHomeExplicit *, _tao_void_pointer);
  CORBA::release (tmp);
}

HelloHomeExplicit_ptr
HelloHomeExplicit::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return HelloHomeExplicit::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:omg.org/HelloHomeExplicit:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (HelloHomeExplicit::_nil ());
      
      if (is_a == 0)
        {
          return HelloHomeExplicit::_nil ();
        }
    }
  
  return HelloHomeExplicit::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

HelloHomeExplicit_ptr 
HelloHomeExplicit::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return HelloHomeExplicit::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      
      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }
      
      HelloHomeExplicit_ptr default_proxy = HelloHomeExplicit::_nil ();
      
      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          _TAO_HelloHomeExplicit_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::HelloHomeExplicit (
                  stub,
                  1,
                  obj->_servant ()
                ),
              HelloHomeExplicit::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::HelloHomeExplicit (
                  stub,
                  0,
                  obj->_servant ()
                ),
              HelloHomeExplicit::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast (
          HelloHomeExplicit_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &HelloHomeExplicit::_tao_class_id
                )
            )
        );
}

HelloHomeExplicit_ptr
HelloHomeExplicit::_duplicate (HelloHomeExplicit_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
HelloHomeExplicit::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/HelloHomeExplicit:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/CCMHome:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->CORBA_Object::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *HelloHomeExplicit::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &HelloHomeExplicit::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::CCMHome::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::CCMHome_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* HelloHomeExplicit::_interface_repository_id (void) const
{
  return "IDL:omg.org/HelloHomeExplicit:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_HelloHomeExplicit[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65457870), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x743a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/HelloHomeExplicit:1.0
  18,
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65457870), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x74000000),  // name = HelloHomeExplicit
};

static CORBA::TypeCode _tc_TAO_tc_HelloHomeExplicit (
    CORBA::tk_objref,
    sizeof (_oc_HelloHomeExplicit),
    (char *) &_oc_HelloHomeExplicit,
    0,
    sizeof (HelloHomeExplicit)
  );

::CORBA::TypeCode_ptr _tc_HelloHomeExplicit =
  &_tc_TAO_tc_HelloHomeExplicit;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int HelloHomeImplicit::_tao_class_id = 0;

HelloHomeImplicit_ptr
tao_HelloHomeImplicit_duplicate (
    HelloHomeImplicit_ptr p
  )
{
  return HelloHomeImplicit::_duplicate (p);
}

void
tao_HelloHomeImplicit_release (
    HelloHomeImplicit_ptr p
  )
{
  CORBA::release (p);
}

HelloHomeImplicit_ptr
tao_HelloHomeImplicit_nil (
    void
  )
{
  return HelloHomeImplicit::_nil ();
}

HelloHomeImplicit_ptr
tao_HelloHomeImplicit_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return HelloHomeImplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_HelloHomeImplicit_upcast (
    void *src
  )
{
  HelloHomeImplicit **tmp =
    ACE_static_cast (HelloHomeImplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// HelloHomeImplicit_var
// *************************************************************

HelloHomeImplicit_var::HelloHomeImplicit_var (void)
  : ptr_ (HelloHomeImplicit::_nil ())
{}

::HelloHomeImplicit_ptr
HelloHomeImplicit_var::ptr (void) const
{
  return this->ptr_;
}

HelloHomeImplicit_var::HelloHomeImplicit_var (const ::HelloHomeImplicit_var &p)
  : TAO_Base_var (),
    ptr_ (HelloHomeImplicit::_duplicate (p.ptr ()))
{}

HelloHomeImplicit_var::~HelloHomeImplicit_var (void)
{
  CORBA::release (this->ptr_);
}

HelloHomeImplicit_var &
HelloHomeImplicit_var::operator= (HelloHomeImplicit_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

HelloHomeImplicit_var &
HelloHomeImplicit_var::operator= (const ::HelloHomeImplicit_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::HelloHomeImplicit::_duplicate (p.ptr ());
  }
  return *this;
}

HelloHomeImplicit_var::operator const ::HelloHomeImplicit_ptr &() const // cast
{
  return this->ptr_;
}

HelloHomeImplicit_var::operator ::HelloHomeImplicit_ptr &() // cast 
{
  return this->ptr_;
}

::HelloHomeImplicit_ptr
HelloHomeImplicit_var::operator-> (void) const
{
  return this->ptr_;
}

::HelloHomeImplicit_ptr
HelloHomeImplicit_var::in (void) const
{
  return this->ptr_;
}

::HelloHomeImplicit_ptr &
HelloHomeImplicit_var::inout (void)
{
  return this->ptr_;
}

::HelloHomeImplicit_ptr &
HelloHomeImplicit_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::HelloHomeImplicit::_nil ();
  return this->ptr_;
}

::HelloHomeImplicit_ptr
HelloHomeImplicit_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::HelloHomeImplicit_ptr val = this->ptr_;
  this->ptr_ = ::HelloHomeImplicit::_nil ();
  return val;
}

::HelloHomeImplicit_ptr
HelloHomeImplicit_var::tao_duplicate (HelloHomeImplicit_ptr p)
{
  return ::HelloHomeImplicit::_duplicate (p);
}

void
HelloHomeImplicit_var::tao_release (HelloHomeImplicit_ptr p)
{
  CORBA::release (p);
}

::HelloHomeImplicit_ptr
HelloHomeImplicit_var::tao_nil (void)
{
  return ::HelloHomeImplicit::_nil ();
}

::HelloHomeImplicit_ptr
HelloHomeImplicit_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::HelloHomeImplicit::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
HelloHomeImplicit_var::tao_upcast (void *src)
{
  HelloHomeImplicit **tmp =
    ACE_static_cast (HelloHomeImplicit **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// HelloHomeImplicit_out
// *************************************************************

HelloHomeImplicit_out::HelloHomeImplicit_out (HelloHomeImplicit_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::HelloHomeImplicit::_nil ();
}

HelloHomeImplicit_out::HelloHomeImplicit_out (HelloHomeImplicit_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::HelloHomeImplicit::_nil ();
}

HelloHomeImplicit_out::HelloHomeImplicit_out (const ::HelloHomeImplicit_out &p)
  : ptr_ (ACE_const_cast (HelloHomeImplicit_out &, p).ptr_)
{}

::HelloHomeImplicit_out &
HelloHomeImplicit_out::operator= (const ::HelloHomeImplicit_out &p)
{
  this->ptr_ = ACE_const_cast (HelloHomeImplicit_out&, p).ptr_;
  return *this;
}

HelloHomeImplicit_out &
HelloHomeImplicit_out::operator= (const ::HelloHomeImplicit_var &p)
{
  this->ptr_ = ::HelloHomeImplicit::_duplicate (p.ptr ());
  return *this;
}

HelloHomeImplicit_out &
HelloHomeImplicit_out::operator= (HelloHomeImplicit_ptr p)
{
  this->ptr_ = p;
  return *this;
}

HelloHomeImplicit_out::operator ::HelloHomeImplicit_ptr &() // cast
{
  return this->ptr_;
}

::HelloHomeImplicit_ptr &
HelloHomeImplicit_out::ptr (void)
{
  return this->ptr_;
}

::HelloHomeImplicit_ptr
HelloHomeImplicit_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interceptors_cs.cpp:56

#if (TAO_HAS_INTERCEPTORS == 1)

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:76

class TAO_ClientRequestInfo_HelloHomeImplicit_create : public TAO_ClientRequestInfo_i
{
public:
  TAO_ClientRequestInfo_HelloHomeImplicit_create (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target
      ACE_ENV_ARG_DECL_WITH_DEFAULTS);

    virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
      ACE_THROW_SPEC ((CORBA::SystemException));

    void result (::HelloWorld_ptr result);
    
  private:
    TAO_ClientRequestInfo_HelloHomeImplicit_create (const TAO_ClientRequestInfo_HelloHomeImplicit_create &);
    void operator= (const TAO_ClientRequestInfo_HelloHomeImplicit_create &);
    
    ::HelloWorld_ptr _result;
  };
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/interceptors_cs.cpp:378
  
  TAO_ClientRequestInfo_HelloHomeImplicit_create::TAO_ClientRequestInfo_HelloHomeImplicit_create (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target
      ACE_ENV_ARG_DECL_NOT_USED      
    )
      : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_HelloHomeImplicit_create::arguments (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_HelloHomeImplicit_create::exceptions (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ExceptionList_var safe_exception_list = exception_list;
    
  static CORBA::TypeCode_ptr _tao_HelloHomeImplicit_create_exceptiondata[] = 
  {
    Components::_tc_CreateFailure
  };
  
  exception_list->length (1);
  for (CORBA::ULong i = 0; i < 1; ++i)
    {
      CORBA::TypeCode_ptr tcp = _tao_HelloHomeImplicit_create_exceptiondata[i];
      TAO_Pseudo_Object_Manager<CORBA::TypeCode, CORBA::TypeCode_var> tcp_object (&tcp, 1);
      (*exception_list)[i] = tcp_object;
    }

  return safe_exception_list._retn ();
}

CORBA::Any * 
TAO_ClientRequestInfo_HelloHomeImplicit_create::result (ACE_ENV_SINGLE_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_HelloHomeImplicit_create::result (::HelloWorld_ptr result)
{
  // Update the result. 
  this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

_TAO_HelloHomeImplicit_Proxy_Impl::_TAO_HelloHomeImplicit_Proxy_Impl (void)
{}

_TAO_HelloHomeImplicit_Remote_Proxy_Impl::_TAO_HelloHomeImplicit_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/remote_proxy_impl_cs.cpp:63

::HelloWorld_ptr _TAO_HelloHomeImplicit_Remote_Proxy_Impl::create (
    CORBA_Object *_collocated_tao_target_
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::CreateFailure
  ))
{
    static TAO_Exception_Data _tao_HelloHomeImplicit_create_exceptiondata [] = 
  {
    {
      "IDL:omg.org/Components/CreateFailure:1.0",
      Components::CreateFailure::_alloc
    }
  };

HelloWorld_var _tao_retval (HelloWorld::_nil ());
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  
  if (istub == 0)
    {
      ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
    }
    
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "create",
      6,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_HelloHomeImplicit_create _tao_ri (
          &_tao_call,
          _collocated_tao_target_
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag)
              ACE_ENV_ARG_PARAMETER
            );
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          
          _invoke_status =
            _tao_call.invoke (_tao_HelloHomeImplicit_create_exceptiondata, 1 ACE_ENV_ARG_PARAMETER);
          TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());

          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::UNKNOWN (
                      CORBA::OMGVMCID | 1, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                  _tao_ri.reply_status (_invoke_status);
                  _tao_vfr.receive_other (
                      &_tao_ri
                      ACE_ENV_ARG_PARAMETER
                    );
                  ACE_TRY_CHECK;
                )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          
          if (!(
              (_tao_in >> _tao_retval.inout ())
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                  CORBA::MARSHAL (
                      TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES
                    ),
                  0
                );
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          ::HelloWorld_ptr _tao_retval_info =
            _tao_retval._retn ();
          _tao_ri.result (_tao_retval_info);
          _tao_retval = _tao_retval_info;
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
        }
      ACE_CATCHANY
        {
          _tao_ri.exception (&ACE_ANY_EXCEPTION);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
              || _tao_status == PortableInterceptor::USER_EXCEPTION)
            {
              ACE_RE_THROW;
            }
        }
      
# if defined (ACE_HAS_EXCEPTIONS) \
     && defined (ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS)
      ACE_CATCHALL
        {
          CORBA::UNKNOWN ex;
          
          _tao_ri.exception (&ex);
          _tao_vfr.receive_exception (
              &_tao_ri
              ACE_ENV_ARG_PARAMETER
            );
          ACE_TRY_CHECK;
          
          PortableInterceptor::ReplyStatus _tao_status =
            _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
          ACE_TRY_CHECK;
          
          if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION)
            ACE_TRY_THROW (ex);
        }
# endif  /* ACE_HAS_EXCEPTIONS && ACE_HAS_BROKEN_UNEXPECTED_EXCEPTIONS */
      
      ACE_ENDTRY;
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (_tao_retval._retn ());
      
      if (_tao_status == PortableInterceptor::LOCATION_FORWARD
          || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
        {
          continue;
        }
      
#endif  /* TAO_HAS_INTERCEPTORS */
      
      break;
    }
  
  return _tao_retval._retn ();
}

//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

_TAO_HelloHomeImplicit_Proxy_Broker::_TAO_HelloHomeImplicit_Proxy_Broker (void)
{
}

_TAO_HelloHomeImplicit_Proxy_Broker::~_TAO_HelloHomeImplicit_Proxy_Broker (void)
{
}

_TAO_HelloHomeImplicit_Proxy_Broker * (*_TAO_HelloHomeImplicit_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
_TAO_HelloHomeImplicit_Remote_Proxy_Broker *
_TAO_HelloHomeImplicit_Remote_Proxy_Broker::the_TAO_HelloHomeImplicit_Remote_Proxy_Broker (void)
{
  static ::_TAO_HelloHomeImplicit_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

_TAO_HelloHomeImplicit_Remote_Proxy_Broker::_TAO_HelloHomeImplicit_Remote_Proxy_Broker (void)
{
}

_TAO_HelloHomeImplicit_Remote_Proxy_Broker::~_TAO_HelloHomeImplicit_Remote_Proxy_Broker (void)
{
}

_TAO_HelloHomeImplicit_Proxy_Impl&
_TAO_HelloHomeImplicit_Remote_Proxy_Broker::select_proxy (
    ::HelloHomeImplicit *
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return this->remote_proxy_impl_;
}

//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

HelloHomeImplicit::HelloHomeImplicit (int collocated)
{
  this->HelloHomeImplicit_setup_collocation (collocated);
}

void
HelloHomeImplicit::HelloHomeImplicit_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_HelloHomeImplicit_Proxy_Broker_ =
      ::_TAO_HelloHomeImplicit_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_HelloHomeImplicit_Proxy_Broker_ =
      ::_TAO_HelloHomeImplicit_Remote_Proxy_Broker::the_TAO_HelloHomeImplicit_Remote_Proxy_Broker ();
  
  this->Components_KeylessCCMHome_setup_collocation (collocated);
}

HelloHomeImplicit::~HelloHomeImplicit (void)
{}

void 
HelloHomeImplicit::_tao_any_destructor (void *_tao_void_pointer)
{
  HelloHomeImplicit *tmp = ACE_static_cast (HelloHomeImplicit *, _tao_void_pointer);
  CORBA::release (tmp);
}

HelloHomeImplicit_ptr
HelloHomeImplicit::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return HelloHomeImplicit::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:omg.org/HelloHomeImplicit:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (HelloHomeImplicit::_nil ());
      
      if (is_a == 0)
        {
          return HelloHomeImplicit::_nil ();
        }
    }
  
  return HelloHomeImplicit::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

HelloHomeImplicit_ptr 
HelloHomeImplicit::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return HelloHomeImplicit::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      
      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }
      
      HelloHomeImplicit_ptr default_proxy = HelloHomeImplicit::_nil ();
      
      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          _TAO_HelloHomeImplicit_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::HelloHomeImplicit (
                  stub,
                  1,
                  obj->_servant ()
                ),
              HelloHomeImplicit::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::HelloHomeImplicit (
                  stub,
                  0,
                  obj->_servant ()
                ),
              HelloHomeImplicit::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast (
          HelloHomeImplicit_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &HelloHomeImplicit::_tao_class_id
                )
            )
        );
}

HelloHomeImplicit_ptr
HelloHomeImplicit::_duplicate (HelloHomeImplicit_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
HelloHomeImplicit::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/HelloHomeImplicit:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/KeylessCCMHome:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->CORBA_Object::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *HelloHomeImplicit::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &HelloHomeImplicit::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::KeylessCCMHome::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::KeylessCCMHome_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* HelloHomeImplicit::_interface_repository_id (void) const
{
  return "IDL:omg.org/HelloHomeImplicit:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_cs.cpp:80

::HelloWorld_ptr HelloHomeImplicit::create (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , Components::CreateFailure
  ))
{
  _TAO_HelloHomeImplicit_Proxy_Impl &proxy = 
    this->the_TAO_HelloHomeImplicit_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  return proxy.create (
      this
      ACE_ENV_ARG_PARAMETER
    );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_HelloHomeImplicit[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  34,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65496d70), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x743a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/HelloHomeImplicit:1.0
  18,
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65496d70), 
  ACE_NTOHL (0x6c696369), 
  ACE_NTOHL (0x74000000),  // name = HelloHomeImplicit
};

static CORBA::TypeCode _tc_TAO_tc_HelloHomeImplicit (
    CORBA::tk_objref,
    sizeof (_oc_HelloHomeImplicit),
    (char *) &_oc_HelloHomeImplicit,
    0,
    sizeof (HelloHomeImplicit)
  );

::CORBA::TypeCode_ptr _tc_HelloHomeImplicit =
  &_tc_TAO_tc_HelloHomeImplicit;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int HelloHome::_tao_class_id = 0;

HelloHome_ptr
tao_HelloHome_duplicate (
    HelloHome_ptr p
  )
{
  return HelloHome::_duplicate (p);
}

void
tao_HelloHome_release (
    HelloHome_ptr p
  )
{
  CORBA::release (p);
}

HelloHome_ptr
tao_HelloHome_nil (
    void
  )
{
  return HelloHome::_nil ();
}

HelloHome_ptr
tao_HelloHome_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return HelloHome::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_HelloHome_upcast (
    void *src
  )
{
  HelloHome **tmp =
    ACE_static_cast (HelloHome **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// HelloHome_var
// *************************************************************

HelloHome_var::HelloHome_var (void)
  : ptr_ (HelloHome::_nil ())
{}

::HelloHome_ptr
HelloHome_var::ptr (void) const
{
  return this->ptr_;
}

HelloHome_var::HelloHome_var (const ::HelloHome_var &p)
  : TAO_Base_var (),
    ptr_ (HelloHome::_duplicate (p.ptr ()))
{}

HelloHome_var::~HelloHome_var (void)
{
  CORBA::release (this->ptr_);
}

HelloHome_var &
HelloHome_var::operator= (HelloHome_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

HelloHome_var &
HelloHome_var::operator= (const ::HelloHome_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::HelloHome::_duplicate (p.ptr ());
  }
  return *this;
}

HelloHome_var::operator const ::HelloHome_ptr &() const // cast
{
  return this->ptr_;
}

HelloHome_var::operator ::HelloHome_ptr &() // cast 
{
  return this->ptr_;
}

::HelloHome_ptr
HelloHome_var::operator-> (void) const
{
  return this->ptr_;
}

::HelloHome_ptr
HelloHome_var::in (void) const
{
  return this->ptr_;
}

::HelloHome_ptr &
HelloHome_var::inout (void)
{
  return this->ptr_;
}

::HelloHome_ptr &
HelloHome_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::HelloHome::_nil ();
  return this->ptr_;
}

::HelloHome_ptr
HelloHome_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::HelloHome_ptr val = this->ptr_;
  this->ptr_ = ::HelloHome::_nil ();
  return val;
}

::HelloHome_ptr
HelloHome_var::tao_duplicate (HelloHome_ptr p)
{
  return ::HelloHome::_duplicate (p);
}

void
HelloHome_var::tao_release (HelloHome_ptr p)
{
  CORBA::release (p);
}

::HelloHome_ptr
HelloHome_var::tao_nil (void)
{
  return ::HelloHome::_nil ();
}

::HelloHome_ptr
HelloHome_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::HelloHome::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
HelloHome_var::tao_upcast (void *src)
{
  HelloHome **tmp =
    ACE_static_cast (HelloHome **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// HelloHome_out
// *************************************************************

HelloHome_out::HelloHome_out (HelloHome_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::HelloHome::_nil ();
}

HelloHome_out::HelloHome_out (HelloHome_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::HelloHome::_nil ();
}

HelloHome_out::HelloHome_out (const ::HelloHome_out &p)
  : ptr_ (ACE_const_cast (HelloHome_out &, p).ptr_)
{}

::HelloHome_out &
HelloHome_out::operator= (const ::HelloHome_out &p)
{
  this->ptr_ = ACE_const_cast (HelloHome_out&, p).ptr_;
  return *this;
}

HelloHome_out &
HelloHome_out::operator= (const ::HelloHome_var &p)
{
  this->ptr_ = ::HelloHome::_duplicate (p.ptr ());
  return *this;
}

HelloHome_out &
HelloHome_out::operator= (HelloHome_ptr p)
{
  this->ptr_ = p;
  return *this;
}

HelloHome_out::operator ::HelloHome_ptr &() // cast
{
  return this->ptr_;
}

::HelloHome_ptr &
HelloHome_out::ptr (void)
{
  return this->ptr_;
}

::HelloHome_ptr
HelloHome_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interceptors_cs.cpp:56

#if (TAO_HAS_INTERCEPTORS == 1)

#endif /* TAO_HAS_INTERCEPTORS */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

_TAO_HelloHome_Proxy_Impl::_TAO_HelloHome_Proxy_Impl (void)
{}

_TAO_HelloHome_Remote_Proxy_Impl::_TAO_HelloHome_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_cs.cpp:31

///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

_TAO_HelloHome_Proxy_Broker::_TAO_HelloHome_Proxy_Broker (void)
{
}

_TAO_HelloHome_Proxy_Broker::~_TAO_HelloHome_Proxy_Broker (void)
{
}

_TAO_HelloHome_Proxy_Broker * (*_TAO_HelloHome_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
_TAO_HelloHome_Remote_Proxy_Broker *
_TAO_HelloHome_Remote_Proxy_Broker::the_TAO_HelloHome_Remote_Proxy_Broker (void)
{
  static ::_TAO_HelloHome_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

_TAO_HelloHome_Remote_Proxy_Broker::_TAO_HelloHome_Remote_Proxy_Broker (void)
{
}

_TAO_HelloHome_Remote_Proxy_Broker::~_TAO_HelloHome_Remote_Proxy_Broker (void)
{
}

_TAO_HelloHome_Proxy_Impl&
_TAO_HelloHome_Remote_Proxy_Broker::select_proxy (
    ::HelloHome *
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return this->remote_proxy_impl_;
}

//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

HelloHome::HelloHome (int collocated)
{
  this->HelloHome_setup_collocation (collocated);
}

void
HelloHome::HelloHome_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_HelloHome_Proxy_Broker_ =
      ::_TAO_HelloHome_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_HelloHome_Proxy_Broker_ =
      ::_TAO_HelloHome_Remote_Proxy_Broker::the_TAO_HelloHome_Remote_Proxy_Broker ();
  
  this->HelloHomeExplicit_setup_collocation (collocated);
  this->HelloHomeImplicit_setup_collocation (collocated);
}

HelloHome::~HelloHome (void)
{}

void 
HelloHome::_tao_any_destructor (void *_tao_void_pointer)
{
  HelloHome *tmp = ACE_static_cast (HelloHome *, _tao_void_pointer);
  CORBA::release (tmp);
}

HelloHome_ptr
HelloHome::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return HelloHome::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:omg.org/HelloHome:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (HelloHome::_nil ());
      
      if (is_a == 0)
        {
          return HelloHome::_nil ();
        }
    }
  
  return HelloHome::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

HelloHome_ptr 
HelloHome::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return HelloHome::_nil ();
    }
  
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      
      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }
      
      HelloHome_ptr default_proxy = HelloHome::_nil ();
      
      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          _TAO_HelloHome_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::HelloHome (
                  stub,
                  1,
                  obj->_servant ()
                ),
              HelloHome::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::HelloHome (
                  stub,
                  0,
                  obj->_servant ()
                ),
              HelloHome::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast (
          HelloHome_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &HelloHome::_tao_class_id
                )
            )
        );
}

HelloHome_ptr
HelloHome::_duplicate (HelloHome_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
HelloHome::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/HelloHome:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/HelloHomeExplicit:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/HelloHomeImplicit:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/CCMHome:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/Components/KeylessCCMHome:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->CORBA_Object::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *HelloHome::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &HelloHome::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &HelloHomeExplicit::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                HelloHomeExplicit_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &HelloHomeImplicit::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                HelloHomeImplicit_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::CCMHome::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::CCMHome_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::Components::KeylessCCMHome::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Components::KeylessCCMHome_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* HelloHome::_interface_repository_id (void) const
{
  return "IDL:omg.org/HelloHome:1.0";
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_HelloHome[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  26,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x653a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/HelloHome:1.0
  10,
  ACE_NTOHL (0x48656c6c), 
  ACE_NTOHL (0x6f486f6d), 
  ACE_NTOHL (0x65000000),  // name = HelloHome
};

static CORBA::TypeCode _tc_TAO_tc_HelloHome (
    CORBA::tk_objref,
    sizeof (_oc_HelloHome),
    (char *) &_oc_HelloHome,
    0,
    sizeof (HelloHome)
  );

::CORBA::TypeCode_ptr _tc_HelloHome =
  &_tc_TAO_tc_HelloHome;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_Hello_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_Hello,
      1,
      CCM_Hello::_duplicate (_tao_elem),
      CCM_Hello::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_Hello_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_Hello,
      1,
      *_tao_elem,
      CCM_Hello::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_Hello_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_Hello::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_Hello
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_Hello_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_Hello::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_Hello,CCM_Hello_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_Hello,CCM_Hello_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_Executor_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld_Executor,
      1,
      CCM_HelloWorld_Executor::_duplicate (_tao_elem),
      CCM_HelloWorld_Executor::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_Executor_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld_Executor,
      1,
      *_tao_elem,
      CCM_HelloWorld_Executor::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloWorld_Executor_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloWorld_Executor::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloWorld_Executor
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloWorld_Executor_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloWorld_Executor::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloWorld_Executor,CCM_HelloWorld_Executor_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloWorld_Executor,CCM_HelloWorld_Executor_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld,
      1,
      CCM_HelloWorld::_duplicate (_tao_elem),
      CCM_HelloWorld::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld,
      1,
      *_tao_elem,
      CCM_HelloWorld::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloWorld_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloWorld::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloWorld
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloWorld_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloWorld::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloWorld,CCM_HelloWorld_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloWorld,CCM_HelloWorld_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_Context_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld_Context,
      1,
      CCM_HelloWorld_Context::_duplicate (_tao_elem),
      CCM_HelloWorld_Context::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloWorld_Context_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloWorld_Context,
      1,
      *_tao_elem,
      CCM_HelloWorld_Context::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloWorld_Context_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloWorld_Context::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloWorld_Context
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloWorld_Context_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloWorld_Context::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloWorld_Context,CCM_HelloWorld_Context_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloWorld_Context,CCM_HelloWorld_Context_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHomeImplicit_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHomeImplicit,
      1,
      CCM_HelloHomeImplicit::_duplicate (_tao_elem),
      CCM_HelloHomeImplicit::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHomeImplicit_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHomeImplicit,
      1,
      *_tao_elem,
      CCM_HelloHomeImplicit::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloHomeImplicit_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloHomeImplicit::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloHomeImplicit
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloHomeImplicit_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloHomeImplicit::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloHomeImplicit,CCM_HelloHomeImplicit_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloHomeImplicit,CCM_HelloHomeImplicit_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHomeExplicit_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHomeExplicit,
      1,
      CCM_HelloHomeExplicit::_duplicate (_tao_elem),
      CCM_HelloHomeExplicit::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHomeExplicit_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHomeExplicit,
      1,
      *_tao_elem,
      CCM_HelloHomeExplicit::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloHomeExplicit_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloHomeExplicit::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloHomeExplicit
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloHomeExplicit_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloHomeExplicit::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloHomeExplicit,CCM_HelloHomeExplicit_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloHomeExplicit,CCM_HelloHomeExplicit_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHome_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHome,
      1,
      CCM_HelloHome::_duplicate (_tao_elem),
      CCM_HelloHome::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    CCM_HelloHome_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      _tc_CCM_HelloHome,
      1,
      *_tao_elem,
      CCM_HelloHome::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    CCM_HelloHome_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = CCM_HelloHome::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_CCM_HelloHome
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          CCM_HelloHome_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = CCM_HelloHome::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<CCM_HelloHome,CCM_HelloHome_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<CCM_HelloHome,CCM_HelloHome_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    HelloHomeExplicit_ptr _tao_elem
  )
{
  HelloHomeExplicit_ptr _tao_objptr =
    HelloHomeExplicit::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    HelloHomeExplicit_ptr *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          _tc_HelloHomeExplicit, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *_tao_elem,
          HelloHomeExplicit::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    HelloHomeExplicit_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = HelloHomeExplicit::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_HelloHomeExplicit
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    
    if (stream >> _tao_elem)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            _tc_HelloHomeExplicit,
            1,
            _tao_elem,
            HelloHomeExplicit::_tao_any_destructor
          );
        
        return 1;
      }
  }
  ACE_CATCHANY
  {
    _tao_elem = HelloHomeExplicit::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  
  _tao_elem = HelloHomeExplicit::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<HelloHomeExplicit,HelloHomeExplicit_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<HelloHomeExplicit,HelloHomeExplicit_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    HelloHomeImplicit_ptr _tao_elem
  )
{
  HelloHomeImplicit_ptr _tao_objptr =
    HelloHomeImplicit::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    HelloHomeImplicit_ptr *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          _tc_HelloHomeImplicit, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *_tao_elem,
          HelloHomeImplicit::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    HelloHomeImplicit_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = HelloHomeImplicit::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_HelloHomeImplicit
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    
    if (stream >> _tao_elem)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            _tc_HelloHomeImplicit,
            1,
            _tao_elem,
            HelloHomeImplicit::_tao_any_destructor
          );
        
        return 1;
      }
  }
  ACE_CATCHANY
  {
    _tao_elem = HelloHomeImplicit::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  
  _tao_elem = HelloHomeImplicit::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<HelloHomeImplicit,HelloHomeImplicit_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<HelloHomeImplicit,HelloHomeImplicit_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    HelloHome_ptr _tao_elem
  )
{
  HelloHome_ptr _tao_objptr =
    HelloHome::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    HelloHome_ptr *_tao_elem
  )
{
  TAO_OutputCDR stream;
  
  if (stream << *_tao_elem)
    {
      _tao_any._tao_replace (
          _tc_HelloHome, 
          TAO_ENCAP_BYTE_ORDER,
          stream.begin (),
          1,
          *_tao_elem,
          HelloHome::_tao_any_destructor
        );
    }
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    HelloHome_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = HelloHome::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean _tao_result =
      type->equivalent (
          _tc_HelloHome
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!_tao_result)
      {
        return 0; // not equivalent
      }
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    
    if (stream >> _tao_elem)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            _tc_HelloHome,
            1,
            _tao_elem,
            HelloHome::_tao_any_destructor
          );
        
        return 1;
      }
  }
  ACE_CATCHANY
  {
    _tao_elem = HelloHome::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  
  _tao_elem = HelloHome::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<HelloHome,HelloHome_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<HelloHome,HelloHome_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const HelloHomeExplicit_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    HelloHomeExplicit_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    
    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }
    
    // Narrow to the right type.
    _tao_objref =
      HelloHomeExplicit::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const HelloHomeImplicit_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    HelloHomeImplicit_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    
    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }
    
    // Narrow to the right type.
    _tao_objref =
      HelloHomeImplicit::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const HelloHome_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    HelloHome_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    
    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }
    
    // Narrow to the right type.
    _tao_objref =
      HelloHome::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

