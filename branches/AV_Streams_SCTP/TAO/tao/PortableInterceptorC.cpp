// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:344


#include "PortableInterceptorC.h"
#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo_i.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */


#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "PortableInterceptorC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:63

int PortableInterceptor::Interceptor::_tao_class_id = 0;

PortableInterceptor::Interceptor_ptr
PortableInterceptor::tao_Interceptor_life::tao_duplicate (
    Interceptor_ptr p
  )
{
  return Interceptor::_duplicate (p);
}

void
PortableInterceptor::tao_Interceptor_life::tao_release (
    Interceptor_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::Interceptor_ptr
PortableInterceptor::tao_Interceptor_life::tao_nil (
    void
  )
{
  return Interceptor::_nil ();
}

CORBA::Boolean
PortableInterceptor::tao_Interceptor_life::tao_marshal (
    Interceptor_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

PortableInterceptor::Interceptor_ptr
PortableInterceptor::tao_Interceptor_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Interceptor::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::tao_Interceptor_cast::tao_upcast (
    void *src
  )
{
  Interceptor **tmp =
    ACE_static_cast (Interceptor **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        PortableInterceptor::Interceptor,
        PortableInterceptor::tao_Interceptor_life
      >;
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::Interceptor,
        PortableInterceptor::tao_Interceptor_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::Interceptor, \
        PortableInterceptor::tao_Interceptor_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::Interceptor, \
        PortableInterceptor::tao_Interceptor_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:245

PortableInterceptor::Interceptor::Interceptor (void)
{}

PortableInterceptor::Interceptor::~Interceptor (void)
{}

void
PortableInterceptor::Interceptor::_tao_any_destructor (void *_tao_void_pointer)
{
  Interceptor *tmp = ACE_static_cast (Interceptor *, _tao_void_pointer);
  CORBA::release (tmp);
}

PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return Interceptor::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return Interceptor::_nil ();
    }

  return
      ACE_reinterpret_cast (
          Interceptor_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &Interceptor::_tao_class_id
                )
            )
        );
}

PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor::_duplicate (Interceptor_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

void *PortableInterceptor::Interceptor::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, Interceptor)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* PortableInterceptor::Interceptor::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/Interceptor:1.0";
}

CORBA::Boolean
PortableInterceptor::Interceptor::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_Interceptor[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f723a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/Interceptor:1.0
    12,
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f7200),  // name = Interceptor
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_Interceptor (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_Interceptor),
    (char *) &_oc_PortableInterceptor_Interceptor,
    0,
    sizeof (PortableInterceptor::Interceptor)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Interceptor,
    &_tc_TAO_tc_PortableInterceptor_Interceptor
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

PortableInterceptor::ForwardRequest::ForwardRequest (void)
  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/ForwardRequest:1.0",
        "ForwardRequest"
      )
{
}

PortableInterceptor::ForwardRequest::~ForwardRequest (void)
{
}

PortableInterceptor::ForwardRequest::ForwardRequest (const ::PortableInterceptor::ForwardRequest &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->forward = CORBA::Object::_duplicate (_tao_excp.forward.in ());
  this->permanent = _tao_excp.permanent;
}

PortableInterceptor::ForwardRequest&
PortableInterceptor::ForwardRequest::operator= (const ::PortableInterceptor::ForwardRequest &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  this->forward = CORBA::Object::_duplicate (_tao_excp.forward.in ());
  this->permanent = _tao_excp.permanent;
  return *this;
}

void PortableInterceptor::ForwardRequest::_tao_any_destructor (void *_tao_void_pointer)
{
  ForwardRequest *tmp = ACE_static_cast (ForwardRequest*, _tao_void_pointer);
  delete tmp;
}

PortableInterceptor::ForwardRequest *
PortableInterceptor::ForwardRequest::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/PortableInterceptor/ForwardRequest:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (ForwardRequest *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *PortableInterceptor::ForwardRequest::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::ForwardRequest, 0);
  return retval;
}

CORBA::Exception *
PortableInterceptor::ForwardRequest::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::PortableInterceptor::ForwardRequest (*this),
      0
    );
  return result;
}

void PortableInterceptor::ForwardRequest::_raise (void) const
{
  TAO_RAISE (*this);
}

void PortableInterceptor::ForwardRequest::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::ForwardRequest::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_ctor.cpp:66

PortableInterceptor::ForwardRequest::ForwardRequest (
    const CORBA::Object_ptr  _tao_forward,
    CORBA::Boolean _tao_permanent
  )  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/ForwardRequest:1.0",
        "ForwardRequest"
      )
{
  this->forward = CORBA::Object::_duplicate (_tao_forward);
  this->permanent = _tao_permanent;
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr PortableInterceptor::ForwardRequest::_type (void) const
{
  return ::PortableInterceptor::_tc_ForwardRequest;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ForwardRequest[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  51,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x466f7277),
  ACE_NTOHL (0x61726452),
  ACE_NTOHL (0x65717565),
  ACE_NTOHL (0x73743a31),
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/PortableInterceptor/ForwardRequest:1.0
    15,
  ACE_NTOHL (0x466f7277),
  ACE_NTOHL (0x61726452),
  ACE_NTOHL (0x65717565),
  ACE_NTOHL (0x73740000),  // name = ForwardRequest
  2, // member count
    8,
  ACE_NTOHL (0x666f7277),
  ACE_NTOHL (0x61726400),  // name = forward
    CORBA::tk_objref,
  52, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    29,
    ACE_NTOHL (0x49444c3a),
    ACE_NTOHL (0x6f6d672e),
    ACE_NTOHL (0x6f72672f),
    ACE_NTOHL (0x434f5242),
    ACE_NTOHL (0x412f4f62),
    ACE_NTOHL (0x6a656374),
    ACE_NTOHL (0x3a312e30),
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Object:1.0
        7,
    ACE_NTOHL (0x4f626a65),
    ACE_NTOHL (0x63740000),  // name = Object

  10,
  ACE_NTOHL (0x7065726d),
  ACE_NTOHL (0x616e656e),
  ACE_NTOHL (0x74000000),  // name = permanent
    CORBA::tk_boolean,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ForwardRequest (
    CORBA::tk_except,
    sizeof (_oc_PortableInterceptor_ForwardRequest),
    (char *) &_oc_PortableInterceptor_ForwardRequest,
    0,
    sizeof (PortableInterceptor::ForwardRequest)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ForwardRequest,
    &_tc_TAO_tc_PortableInterceptor_ForwardRequest
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ReplyStatus[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x5265706c),
  ACE_NTOHL (0x79537461),
  ACE_NTOHL (0x7475733a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/ReplyStatus:1.0
    12,
  ACE_NTOHL (0x5265706c),
  ACE_NTOHL (0x79537461),
  ACE_NTOHL (0x74757300),  // name = ReplyStatus
    CORBA::tk_short,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ReplyStatus (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_ReplyStatus),
    (char *) &_oc_PortableInterceptor_ReplyStatus,
    0,
    sizeof (PortableInterceptor::ReplyStatus)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ReplyStatus,
    &_tc_TAO_tc_PortableInterceptor_ReplyStatus
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_SlotId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x536c6f74),
  ACE_NTOHL (0x49643a31),
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/PortableInterceptor/SlotId:1.0
    7,
  ACE_NTOHL (0x536c6f74),
  ACE_NTOHL (0x49640000),  // name = SlotId
    CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_SlotId (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_SlotId),
    (char *) &_oc_PortableInterceptor_SlotId,
    0,
    sizeof (PortableInterceptor::SlotId)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_SlotId,
    &_tc_TAO_tc_PortableInterceptor_SlotId
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

PortableInterceptor::InvalidSlot::InvalidSlot (void)
  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/InvalidSlot:1.0",
        "InvalidSlot"
      )
{
}

PortableInterceptor::InvalidSlot::~InvalidSlot (void)
{
}

PortableInterceptor::InvalidSlot::InvalidSlot (const ::PortableInterceptor::InvalidSlot &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableInterceptor::InvalidSlot&
PortableInterceptor::InvalidSlot::operator= (const ::PortableInterceptor::InvalidSlot &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void PortableInterceptor::InvalidSlot::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidSlot *tmp = ACE_static_cast (InvalidSlot*, _tao_void_pointer);
  delete tmp;
}

PortableInterceptor::InvalidSlot *
PortableInterceptor::InvalidSlot::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/PortableInterceptor/InvalidSlot:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (InvalidSlot *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *PortableInterceptor::InvalidSlot::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::InvalidSlot, 0);
  return retval;
}

CORBA::Exception *
PortableInterceptor::InvalidSlot::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::PortableInterceptor::InvalidSlot (*this),
      0
    );
  return result;
}

void PortableInterceptor::InvalidSlot::_raise (void) const
{
  TAO_RAISE (*this);
}

void PortableInterceptor::InvalidSlot::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::InvalidSlot::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr PortableInterceptor::InvalidSlot::_type (void) const
{
  return ::PortableInterceptor::_tc_InvalidSlot;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_InvalidSlot[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x496e7661),
  ACE_NTOHL (0x6c696453),
  ACE_NTOHL (0x6c6f743a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/InvalidSlot:1.0
    12,
  ACE_NTOHL (0x496e7661),
  ACE_NTOHL (0x6c696453),
  ACE_NTOHL (0x6c6f7400),  // name = InvalidSlot
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_InvalidSlot (
    CORBA::tk_except,
    sizeof (_oc_PortableInterceptor_InvalidSlot),
    (char *) &_oc_PortableInterceptor_InvalidSlot,
    0,
    sizeof (PortableInterceptor::InvalidSlot)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_InvalidSlot,
    &_tc_TAO_tc_PortableInterceptor_InvalidSlot
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:63

int PortableInterceptor::Current::_tao_class_id = 0;

PortableInterceptor::Current_ptr
PortableInterceptor::tao_Current_life::tao_duplicate (
    Current_ptr p
  )
{
  return Current::_duplicate (p);
}

void
PortableInterceptor::tao_Current_life::tao_release (
    Current_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::Current_ptr
PortableInterceptor::tao_Current_life::tao_nil (
    void
  )
{
  return Current::_nil ();
}

CORBA::Boolean
PortableInterceptor::tao_Current_life::tao_marshal (
    Current_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

PortableInterceptor::Current_ptr
PortableInterceptor::tao_Current_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Current::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::tao_Current_cast::tao_upcast (
    void *src
  )
{
  Current **tmp =
    ACE_static_cast (Current **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        PortableInterceptor::Current,
        PortableInterceptor::tao_Current_life
      >;
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::Current,
        PortableInterceptor::tao_Current_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::Current, \
        PortableInterceptor::tao_Current_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::Current, \
        PortableInterceptor::tao_Current_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:245

PortableInterceptor::Current::Current (void)
{}

PortableInterceptor::Current::~Current (void)
{}

void
PortableInterceptor::Current::_tao_any_destructor (void *_tao_void_pointer)
{
  Current *tmp = ACE_static_cast (Current *, _tao_void_pointer);
  CORBA::release (tmp);
}

PortableInterceptor::Current_ptr
PortableInterceptor::Current::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return Current::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

PortableInterceptor::Current_ptr
PortableInterceptor::Current::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return Current::_nil ();
    }

  return
      ACE_reinterpret_cast (
          Current_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &Current::_tao_class_id
                )
            )
        );
}

PortableInterceptor::Current_ptr
PortableInterceptor::Current::_duplicate (Current_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

void *PortableInterceptor::Current::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, Current)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &::CORBA::Current::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                CORBA::Current_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* PortableInterceptor::Current::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/Current:1.0";
}

CORBA::Boolean
PortableInterceptor::Current::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_Current[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  44,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x43757272),
  ACE_NTOHL (0x656e743a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/Current:1.0
    8,
  ACE_NTOHL (0x43757272),
  ACE_NTOHL (0x656e7400),  // name = Current
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_Current (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_Current),
    (char *) &_oc_PortableInterceptor_Current,
    0,
    sizeof (PortableInterceptor::Current)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Current,
    &_tc_TAO_tc_PortableInterceptor_Current
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:63

int PortableInterceptor::RequestInfo::_tao_class_id = 0;

PortableInterceptor::RequestInfo_ptr
PortableInterceptor::tao_RequestInfo_life::tao_duplicate (
    RequestInfo_ptr p
  )
{
  return RequestInfo::_duplicate (p);
}

void
PortableInterceptor::tao_RequestInfo_life::tao_release (
    RequestInfo_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::RequestInfo_ptr
PortableInterceptor::tao_RequestInfo_life::tao_nil (
    void
  )
{
  return RequestInfo::_nil ();
}

CORBA::Boolean
PortableInterceptor::tao_RequestInfo_life::tao_marshal (
    RequestInfo_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

PortableInterceptor::RequestInfo_ptr
PortableInterceptor::tao_RequestInfo_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return RequestInfo::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::tao_RequestInfo_cast::tao_upcast (
    void *src
  )
{
  RequestInfo **tmp =
    ACE_static_cast (RequestInfo **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        PortableInterceptor::RequestInfo,
        PortableInterceptor::tao_RequestInfo_life
      >;
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::RequestInfo,
        PortableInterceptor::tao_RequestInfo_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::RequestInfo, \
        PortableInterceptor::tao_RequestInfo_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::RequestInfo, \
        PortableInterceptor::tao_RequestInfo_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:245

PortableInterceptor::RequestInfo::RequestInfo (void)
{}

PortableInterceptor::RequestInfo::~RequestInfo (void)
{}

void
PortableInterceptor::RequestInfo::_tao_any_destructor (void *_tao_void_pointer)
{
  RequestInfo *tmp = ACE_static_cast (RequestInfo *, _tao_void_pointer);
  CORBA::release (tmp);
}

PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return RequestInfo::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return RequestInfo::_nil ();
    }

  return
      ACE_reinterpret_cast (
          RequestInfo_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &RequestInfo::_tao_class_id
                )
            )
        );
}

PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo::_duplicate (RequestInfo_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

void *PortableInterceptor::RequestInfo::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, RequestInfo)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* PortableInterceptor::RequestInfo::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/RequestInfo:1.0";
}

CORBA::Boolean
PortableInterceptor::RequestInfo::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_RequestInfo[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x52657175),
  ACE_NTOHL (0x65737449),
  ACE_NTOHL (0x6e666f3a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/RequestInfo:1.0
    12,
  ACE_NTOHL (0x52657175),
  ACE_NTOHL (0x65737449),
  ACE_NTOHL (0x6e666f00),  // name = RequestInfo
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_RequestInfo (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_RequestInfo),
    (char *) &_oc_PortableInterceptor_RequestInfo,
    0,
    sizeof (PortableInterceptor::RequestInfo)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_RequestInfo,
    &_tc_TAO_tc_PortableInterceptor_RequestInfo
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:63

int PortableInterceptor::ClientRequestInfo::_tao_class_id = 0;

PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::tao_ClientRequestInfo_life::tao_duplicate (
    ClientRequestInfo_ptr p
  )
{
  return ClientRequestInfo::_duplicate (p);
}

void
PortableInterceptor::tao_ClientRequestInfo_life::tao_release (
    ClientRequestInfo_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::tao_ClientRequestInfo_life::tao_nil (
    void
  )
{
  return ClientRequestInfo::_nil ();
}

CORBA::Boolean
PortableInterceptor::tao_ClientRequestInfo_life::tao_marshal (
    ClientRequestInfo_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::tao_ClientRequestInfo_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ClientRequestInfo::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::tao_ClientRequestInfo_cast::tao_upcast (
    void *src
  )
{
  ClientRequestInfo **tmp =
    ACE_static_cast (ClientRequestInfo **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ClientRequestInfo,
        PortableInterceptor::tao_ClientRequestInfo_life
      >;
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ClientRequestInfo,
        PortableInterceptor::tao_ClientRequestInfo_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ClientRequestInfo, \
        PortableInterceptor::tao_ClientRequestInfo_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ClientRequestInfo, \
        PortableInterceptor::tao_ClientRequestInfo_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:245

PortableInterceptor::ClientRequestInfo::ClientRequestInfo (void)
{}

PortableInterceptor::ClientRequestInfo::~ClientRequestInfo (void)
{}

void
PortableInterceptor::ClientRequestInfo::_tao_any_destructor (void *_tao_void_pointer)
{
  ClientRequestInfo *tmp = ACE_static_cast (ClientRequestInfo *, _tao_void_pointer);
  CORBA::release (tmp);
}

PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return ClientRequestInfo::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ClientRequestInfo::_nil ();
    }

  return
      ACE_reinterpret_cast (
          ClientRequestInfo_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &ClientRequestInfo::_tao_class_id
                )
            )
        );
}

PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo::_duplicate (ClientRequestInfo_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

void *PortableInterceptor::ClientRequestInfo::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, ClientRequestInfo)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, RequestInfo)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                PortableInterceptor::RequestInfo_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* PortableInterceptor::ClientRequestInfo::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ClientRequestInfo:1.0";
}

CORBA::Boolean
PortableInterceptor::ClientRequestInfo::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ClientRequestInfo[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  54,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x436c6965),
  ACE_NTOHL (0x6e745265),
  ACE_NTOHL (0x71756573),
  ACE_NTOHL (0x74496e66),
  ACE_NTOHL (0x6f3a312e),
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/PortableInterceptor/ClientRequestInfo:1.0
    18,
  ACE_NTOHL (0x436c6965),
  ACE_NTOHL (0x6e745265),
  ACE_NTOHL (0x71756573),
  ACE_NTOHL (0x74496e66),
  ACE_NTOHL (0x6f000000),  // name = ClientRequestInfo
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ClientRequestInfo (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ClientRequestInfo),
    (char *) &_oc_PortableInterceptor_ClientRequestInfo,
    0,
    sizeof (PortableInterceptor::ClientRequestInfo)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ClientRequestInfo,
    &_tc_TAO_tc_PortableInterceptor_ClientRequestInfo
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:63

int PortableInterceptor::ServerRequestInfo::_tao_class_id = 0;

PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::tao_ServerRequestInfo_life::tao_duplicate (
    ServerRequestInfo_ptr p
  )
{
  return ServerRequestInfo::_duplicate (p);
}

void
PortableInterceptor::tao_ServerRequestInfo_life::tao_release (
    ServerRequestInfo_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::tao_ServerRequestInfo_life::tao_nil (
    void
  )
{
  return ServerRequestInfo::_nil ();
}

CORBA::Boolean
PortableInterceptor::tao_ServerRequestInfo_life::tao_marshal (
    ServerRequestInfo_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::tao_ServerRequestInfo_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ServerRequestInfo::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::tao_ServerRequestInfo_cast::tao_upcast (
    void *src
  )
{
  ServerRequestInfo **tmp =
    ACE_static_cast (ServerRequestInfo **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ServerRequestInfo,
        PortableInterceptor::tao_ServerRequestInfo_life
      >;
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ServerRequestInfo,
        PortableInterceptor::tao_ServerRequestInfo_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ServerRequestInfo, \
        PortableInterceptor::tao_ServerRequestInfo_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ServerRequestInfo, \
        PortableInterceptor::tao_ServerRequestInfo_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:245

PortableInterceptor::ServerRequestInfo::ServerRequestInfo (void)
{}

PortableInterceptor::ServerRequestInfo::~ServerRequestInfo (void)
{}

void
PortableInterceptor::ServerRequestInfo::_tao_any_destructor (void *_tao_void_pointer)
{
  ServerRequestInfo *tmp = ACE_static_cast (ServerRequestInfo *, _tao_void_pointer);
  CORBA::release (tmp);
}

PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return ServerRequestInfo::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ServerRequestInfo::_nil ();
    }

  return
      ACE_reinterpret_cast (
          ServerRequestInfo_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &ServerRequestInfo::_tao_class_id
                )
            )
        );
}

PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo::_duplicate (ServerRequestInfo_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

void *PortableInterceptor::ServerRequestInfo::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, ServerRequestInfo)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, RequestInfo)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                PortableInterceptor::RequestInfo_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* PortableInterceptor::ServerRequestInfo::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ServerRequestInfo:1.0";
}

CORBA::Boolean
PortableInterceptor::ServerRequestInfo::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ServerRequestInfo[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  54,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x53657276),
  ACE_NTOHL (0x65725265),
  ACE_NTOHL (0x71756573),
  ACE_NTOHL (0x74496e66),
  ACE_NTOHL (0x6f3a312e),
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/PortableInterceptor/ServerRequestInfo:1.0
    18,
  ACE_NTOHL (0x53657276),
  ACE_NTOHL (0x65725265),
  ACE_NTOHL (0x71756573),
  ACE_NTOHL (0x74496e66),
  ACE_NTOHL (0x6f000000),  // name = ServerRequestInfo
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ServerRequestInfo (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ServerRequestInfo),
    (char *) &_oc_PortableInterceptor_ServerRequestInfo,
    0,
    sizeof (PortableInterceptor::ServerRequestInfo)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ServerRequestInfo,
    &_tc_TAO_tc_PortableInterceptor_ServerRequestInfo
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:63

int PortableInterceptor::ClientRequestInterceptor::_tao_class_id = 0;

PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::tao_ClientRequestInterceptor_life::tao_duplicate (
    ClientRequestInterceptor_ptr p
  )
{
  return ClientRequestInterceptor::_duplicate (p);
}

void
PortableInterceptor::tao_ClientRequestInterceptor_life::tao_release (
    ClientRequestInterceptor_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::tao_ClientRequestInterceptor_life::tao_nil (
    void
  )
{
  return ClientRequestInterceptor::_nil ();
}

CORBA::Boolean
PortableInterceptor::tao_ClientRequestInterceptor_life::tao_marshal (
    ClientRequestInterceptor_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::tao_ClientRequestInterceptor_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ClientRequestInterceptor::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::tao_ClientRequestInterceptor_cast::tao_upcast (
    void *src
  )
{
  ClientRequestInterceptor **tmp =
    ACE_static_cast (ClientRequestInterceptor **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ClientRequestInterceptor,
        PortableInterceptor::tao_ClientRequestInterceptor_life
      >;
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ClientRequestInterceptor,
        PortableInterceptor::tao_ClientRequestInterceptor_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ClientRequestInterceptor, \
        PortableInterceptor::tao_ClientRequestInterceptor_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ClientRequestInterceptor, \
        PortableInterceptor::tao_ClientRequestInterceptor_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:245

PortableInterceptor::ClientRequestInterceptor::ClientRequestInterceptor (void)
{}

PortableInterceptor::ClientRequestInterceptor::~ClientRequestInterceptor (void)
{}

void
PortableInterceptor::ClientRequestInterceptor::_tao_any_destructor (void *_tao_void_pointer)
{
  ClientRequestInterceptor *tmp = ACE_static_cast (ClientRequestInterceptor *, _tao_void_pointer);
  CORBA::release (tmp);
}

PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return ClientRequestInterceptor::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ClientRequestInterceptor::_nil ();
    }

  return
      ACE_reinterpret_cast (
          ClientRequestInterceptor_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &ClientRequestInterceptor::_tao_class_id
                )
            )
        );
}

PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor::_duplicate (ClientRequestInterceptor_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

void *PortableInterceptor::ClientRequestInterceptor::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, ClientRequestInterceptor)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, Interceptor)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                PortableInterceptor::Interceptor_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* PortableInterceptor::ClientRequestInterceptor::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ClientRequestInterceptor:1.0";
}

CORBA::Boolean
PortableInterceptor::ClientRequestInterceptor::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ClientRequestInterceptor[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  61,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x436c6965),
  ACE_NTOHL (0x6e745265),
  ACE_NTOHL (0x71756573),
  ACE_NTOHL (0x74496e74),
  ACE_NTOHL (0x65726365),
  ACE_NTOHL (0x70746f72),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/PortableInterceptor/ClientRequestInterceptor:1.0
    25,
  ACE_NTOHL (0x436c6965),
  ACE_NTOHL (0x6e745265),
  ACE_NTOHL (0x71756573),
  ACE_NTOHL (0x74496e74),
  ACE_NTOHL (0x65726365),
  ACE_NTOHL (0x70746f72),
  ACE_NTOHL (0x0),  // name = ClientRequestInterceptor
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ClientRequestInterceptor (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ClientRequestInterceptor),
    (char *) &_oc_PortableInterceptor_ClientRequestInterceptor,
    0,
    sizeof (PortableInterceptor::ClientRequestInterceptor)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ClientRequestInterceptor,
    &_tc_TAO_tc_PortableInterceptor_ClientRequestInterceptor
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:63

int PortableInterceptor::ServerRequestInterceptor::_tao_class_id = 0;

PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::tao_ServerRequestInterceptor_life::tao_duplicate (
    ServerRequestInterceptor_ptr p
  )
{
  return ServerRequestInterceptor::_duplicate (p);
}

void
PortableInterceptor::tao_ServerRequestInterceptor_life::tao_release (
    ServerRequestInterceptor_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::tao_ServerRequestInterceptor_life::tao_nil (
    void
  )
{
  return ServerRequestInterceptor::_nil ();
}

CORBA::Boolean
PortableInterceptor::tao_ServerRequestInterceptor_life::tao_marshal (
    ServerRequestInterceptor_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::tao_ServerRequestInterceptor_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ServerRequestInterceptor::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::tao_ServerRequestInterceptor_cast::tao_upcast (
    void *src
  )
{
  ServerRequestInterceptor **tmp =
    ACE_static_cast (ServerRequestInterceptor **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ServerRequestInterceptor,
        PortableInterceptor::tao_ServerRequestInterceptor_life
      >;
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ServerRequestInterceptor,
        PortableInterceptor::tao_ServerRequestInterceptor_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ServerRequestInterceptor, \
        PortableInterceptor::tao_ServerRequestInterceptor_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ServerRequestInterceptor, \
        PortableInterceptor::tao_ServerRequestInterceptor_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:245

PortableInterceptor::ServerRequestInterceptor::ServerRequestInterceptor (void)
{}

PortableInterceptor::ServerRequestInterceptor::~ServerRequestInterceptor (void)
{}

void
PortableInterceptor::ServerRequestInterceptor::_tao_any_destructor (void *_tao_void_pointer)
{
  ServerRequestInterceptor *tmp = ACE_static_cast (ServerRequestInterceptor *, _tao_void_pointer);
  CORBA::release (tmp);
}

PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return ServerRequestInterceptor::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ServerRequestInterceptor::_nil ();
    }

  return
      ACE_reinterpret_cast (
          ServerRequestInterceptor_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &ServerRequestInterceptor::_tao_class_id
                )
            )
        );
}

PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor::_duplicate (ServerRequestInterceptor_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

void *PortableInterceptor::ServerRequestInterceptor::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, ServerRequestInterceptor)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, Interceptor)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                PortableInterceptor::Interceptor_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* PortableInterceptor::ServerRequestInterceptor::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ServerRequestInterceptor:1.0";
}

CORBA::Boolean
PortableInterceptor::ServerRequestInterceptor::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ServerRequestInterceptor[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  61,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x53657276),
  ACE_NTOHL (0x65725265),
  ACE_NTOHL (0x71756573),
  ACE_NTOHL (0x74496e74),
  ACE_NTOHL (0x65726365),
  ACE_NTOHL (0x70746f72),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/PortableInterceptor/ServerRequestInterceptor:1.0
    25,
  ACE_NTOHL (0x53657276),
  ACE_NTOHL (0x65725265),
  ACE_NTOHL (0x71756573),
  ACE_NTOHL (0x74496e74),
  ACE_NTOHL (0x65726365),
  ACE_NTOHL (0x70746f72),
  ACE_NTOHL (0x0),  // name = ServerRequestInterceptor
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ServerRequestInterceptor (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ServerRequestInterceptor),
    (char *) &_oc_PortableInterceptor_ServerRequestInterceptor,
    0,
    sizeof (PortableInterceptor::ServerRequestInterceptor)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ServerRequestInterceptor,
    &_tc_TAO_tc_PortableInterceptor_ServerRequestInterceptor
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:63

int PortableInterceptor::PolicyFactory::_tao_class_id = 0;

PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::tao_PolicyFactory_life::tao_duplicate (
    PolicyFactory_ptr p
  )
{
  return PolicyFactory::_duplicate (p);
}

void
PortableInterceptor::tao_PolicyFactory_life::tao_release (
    PolicyFactory_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::tao_PolicyFactory_life::tao_nil (
    void
  )
{
  return PolicyFactory::_nil ();
}

CORBA::Boolean
PortableInterceptor::tao_PolicyFactory_life::tao_marshal (
    PolicyFactory_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::tao_PolicyFactory_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return PolicyFactory::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::tao_PolicyFactory_cast::tao_upcast (
    void *src
  )
{
  PolicyFactory **tmp =
    ACE_static_cast (PolicyFactory **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        PortableInterceptor::PolicyFactory,
        PortableInterceptor::tao_PolicyFactory_life
      >;
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::PolicyFactory,
        PortableInterceptor::tao_PolicyFactory_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::PolicyFactory, \
        PortableInterceptor::tao_PolicyFactory_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::PolicyFactory, \
        PortableInterceptor::tao_PolicyFactory_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:245

PortableInterceptor::PolicyFactory::PolicyFactory (void)
{}

PortableInterceptor::PolicyFactory::~PolicyFactory (void)
{}

void
PortableInterceptor::PolicyFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  PolicyFactory *tmp = ACE_static_cast (PolicyFactory *, _tao_void_pointer);
  CORBA::release (tmp);
}

PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return PolicyFactory::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return PolicyFactory::_nil ();
    }

  return
      ACE_reinterpret_cast (
          PolicyFactory_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &PolicyFactory::_tao_class_id
                )
            )
        );
}

PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory::_duplicate (PolicyFactory_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

// Hand-crafted.

::CORBA::Policy_ptr
PortableInterceptor::PolicyFactory::_create_policy (CORBA::PolicyType
                                                    ACE_ENV_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException,
                   CORBA::PolicyError))
{
  ACE_THROW_RETURN (CORBA::PolicyError (CORBA::BAD_POLICY_TYPE),
                    CORBA::Policy::_nil ());
}

void *PortableInterceptor::PolicyFactory::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, PolicyFactory)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* PortableInterceptor::PolicyFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/PolicyFactory:1.0";
}

CORBA::Boolean
PortableInterceptor::PolicyFactory::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_PolicyFactory[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  50,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x506f6c69),
  ACE_NTOHL (0x63794661),
  ACE_NTOHL (0x63746f72),
  ACE_NTOHL (0x793a312e),
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/PortableInterceptor/PolicyFactory:1.0
    14,
  ACE_NTOHL (0x506f6c69),
  ACE_NTOHL (0x63794661),
  ACE_NTOHL (0x63746f72),
  ACE_NTOHL (0x79000000),  // name = PolicyFactory
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_PolicyFactory (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_PolicyFactory),
    (char *) &_oc_PortableInterceptor_PolicyFactory,
    0,
    sizeof (PortableInterceptor::PolicyFactory)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_PolicyFactory,
    &_tc_TAO_tc_PortableInterceptor_PolicyFactory
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:63

int PortableInterceptor::ORBInitInfo::_tao_class_id = 0;

PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::tao_ORBInitInfo_life::tao_duplicate (
    ORBInitInfo_ptr p
  )
{
  return ORBInitInfo::_duplicate (p);
}

void
PortableInterceptor::tao_ORBInitInfo_life::tao_release (
    ORBInitInfo_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::tao_ORBInitInfo_life::tao_nil (
    void
  )
{
  return ORBInitInfo::_nil ();
}

CORBA::Boolean
PortableInterceptor::tao_ORBInitInfo_life::tao_marshal (
    ORBInitInfo_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::tao_ORBInitInfo_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ORBInitInfo::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::tao_ORBInitInfo_cast::tao_upcast (
    void *src
  )
{
  ORBInitInfo **tmp =
    ACE_static_cast (ORBInitInfo **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ORBInitInfo,
        PortableInterceptor::tao_ORBInitInfo_life
      >;
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ORBInitInfo,
        PortableInterceptor::tao_ORBInitInfo_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ORBInitInfo, \
        PortableInterceptor::tao_ORBInitInfo_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ORBInitInfo, \
        PortableInterceptor::tao_ORBInitInfo_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:245

PortableInterceptor::ORBInitInfo::ORBInitInfo (void)
{}

PortableInterceptor::ORBInitInfo::~ORBInitInfo (void)
{}

void
PortableInterceptor::ORBInitInfo::_tao_any_destructor (void *_tao_void_pointer)
{
  ORBInitInfo *tmp = ACE_static_cast (ORBInitInfo *, _tao_void_pointer);
  CORBA::release (tmp);
}

PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return ORBInitInfo::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ORBInitInfo::_nil ();
    }

  return
      ACE_reinterpret_cast (
          ORBInitInfo_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &ORBInitInfo::_tao_class_id
                )
            )
        );
}

PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo::_duplicate (ORBInitInfo_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

void *PortableInterceptor::ORBInitInfo::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, ORBInitInfo)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* PortableInterceptor::ORBInitInfo::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ORBInitInfo:1.0";
}

CORBA::Boolean
PortableInterceptor::ORBInitInfo::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ORBInitInfo_ObjectId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  57,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x4f524249),
  ACE_NTOHL (0x6e697449),
  ACE_NTOHL (0x6e666f2f),
  ACE_NTOHL (0x4f626a65),
  ACE_NTOHL (0x63744964),
  ACE_NTOHL (0x3a312e30),
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/PortableInterceptor/ORBInitInfo/ObjectId:1.0
    9,
  ACE_NTOHL (0x4f626a65),
  ACE_NTOHL (0x63744964),
  ACE_NTOHL (0x0),  // name = ObjectId
    CORBA::tk_string,
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBInitInfo_ObjectId (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_ORBInitInfo_ObjectId),
    (char *) &_oc_PortableInterceptor_ORBInitInfo_ObjectId,
    0,
    sizeof (PortableInterceptor::ORBInitInfo::ObjectId)
  );

::CORBA::TypeCode_ptr PortableInterceptor::ORBInitInfo::_tc_ObjectId =
  &_tc_TAO_tc_PortableInterceptor_ORBInitInfo_ObjectId;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

PortableInterceptor::ORBInitInfo::DuplicateName::DuplicateName (void)
  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0",
        "DuplicateName"
      )
{
}

PortableInterceptor::ORBInitInfo::DuplicateName::~DuplicateName (void)
{
}

PortableInterceptor::ORBInitInfo::DuplicateName::DuplicateName (const ::PortableInterceptor::ORBInitInfo::DuplicateName &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->name = CORBA::string_dup (_tao_excp.name.in ());
}

PortableInterceptor::ORBInitInfo::DuplicateName&
PortableInterceptor::ORBInitInfo::DuplicateName::operator= (const ::PortableInterceptor::ORBInitInfo::DuplicateName &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  this->name = CORBA::string_dup (_tao_excp.name.in ());
  return *this;
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_tao_any_destructor (void *_tao_void_pointer)
{
  DuplicateName *tmp = ACE_static_cast (DuplicateName*, _tao_void_pointer);
  delete tmp;
}

PortableInterceptor::ORBInitInfo::DuplicateName *
PortableInterceptor::ORBInitInfo::DuplicateName::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (DuplicateName *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *PortableInterceptor::ORBInitInfo::DuplicateName::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::ORBInitInfo::DuplicateName, 0);
  return retval;
}

CORBA::Exception *
PortableInterceptor::ORBInitInfo::DuplicateName::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::PortableInterceptor::ORBInitInfo::DuplicateName (*this),
      0
    );
  return result;
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_raise (void) const
{
  TAO_RAISE (*this);
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_ctor.cpp:66

PortableInterceptor::ORBInitInfo::DuplicateName::DuplicateName (
    const char * _tao_name
  )  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0",
        "DuplicateName"
      )
{
  this->name = CORBA::string_dup (_tao_name);
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr PortableInterceptor::ORBInitInfo::DuplicateName::_type (void) const
{
  return ::PortableInterceptor::ORBInitInfo::_tc_DuplicateName;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ORBInitInfo_DuplicateName[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  62,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x4f524249),
  ACE_NTOHL (0x6e697449),
  ACE_NTOHL (0x6e666f2f),
  ACE_NTOHL (0x4475706c),
  ACE_NTOHL (0x69636174),
  ACE_NTOHL (0x654e616d),
  ACE_NTOHL (0x653a312e),
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0
    14,
  ACE_NTOHL (0x4475706c),
  ACE_NTOHL (0x69636174),
  ACE_NTOHL (0x654e616d),
  ACE_NTOHL (0x65000000),  // name = DuplicateName
  1, // member count
    5,
  ACE_NTOHL (0x6e616d65),
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_string,
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBInitInfo_DuplicateName (
    CORBA::tk_except,
    sizeof (_oc_PortableInterceptor_ORBInitInfo_DuplicateName),
    (char *) &_oc_PortableInterceptor_ORBInitInfo_DuplicateName,
    0,
    sizeof (PortableInterceptor::ORBInitInfo::DuplicateName)
  );

::CORBA::TypeCode_ptr PortableInterceptor::ORBInitInfo::_tc_DuplicateName =
  &_tc_TAO_tc_PortableInterceptor_ORBInitInfo_DuplicateName;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

PortableInterceptor::ORBInitInfo::InvalidName::InvalidName (void)
  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/ORBInitInfo/InvalidName:1.0",
        "InvalidName"
      )
{
}

PortableInterceptor::ORBInitInfo::InvalidName::~InvalidName (void)
{
}

PortableInterceptor::ORBInitInfo::InvalidName::InvalidName (const ::PortableInterceptor::ORBInitInfo::InvalidName &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableInterceptor::ORBInitInfo::InvalidName&
PortableInterceptor::ORBInitInfo::InvalidName::operator= (const ::PortableInterceptor::ORBInitInfo::InvalidName &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void PortableInterceptor::ORBInitInfo::InvalidName::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidName *tmp = ACE_static_cast (InvalidName*, _tao_void_pointer);
  delete tmp;
}

PortableInterceptor::ORBInitInfo::InvalidName *
PortableInterceptor::ORBInitInfo::InvalidName::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/PortableInterceptor/ORBInitInfo/InvalidName:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (InvalidName *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *PortableInterceptor::ORBInitInfo::InvalidName::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::ORBInitInfo::InvalidName, 0);
  return retval;
}

CORBA::Exception *
PortableInterceptor::ORBInitInfo::InvalidName::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::PortableInterceptor::ORBInitInfo::InvalidName (*this),
      0
    );
  return result;
}

void PortableInterceptor::ORBInitInfo::InvalidName::_raise (void) const
{
  TAO_RAISE (*this);
}

void PortableInterceptor::ORBInitInfo::InvalidName::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::ORBInitInfo::InvalidName::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr PortableInterceptor::ORBInitInfo::InvalidName::_type (void) const
{
  return ::PortableInterceptor::ORBInitInfo::_tc_InvalidName;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ORBInitInfo_InvalidName[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  60,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x4f524249),
  ACE_NTOHL (0x6e697449),
  ACE_NTOHL (0x6e666f2f),
  ACE_NTOHL (0x496e7661),
  ACE_NTOHL (0x6c69644e),
  ACE_NTOHL (0x616d653a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/ORBInitInfo/InvalidName:1.0
    12,
  ACE_NTOHL (0x496e7661),
  ACE_NTOHL (0x6c69644e),
  ACE_NTOHL (0x616d6500),  // name = InvalidName
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBInitInfo_InvalidName (
    CORBA::tk_except,
    sizeof (_oc_PortableInterceptor_ORBInitInfo_InvalidName),
    (char *) &_oc_PortableInterceptor_ORBInitInfo_InvalidName,
    0,
    sizeof (PortableInterceptor::ORBInitInfo::InvalidName)
  );

::CORBA::TypeCode_ptr PortableInterceptor::ORBInitInfo::_tc_InvalidName =
  &_tc_TAO_tc_PortableInterceptor_ORBInitInfo_InvalidName;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ORBInitInfo[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x4f524249),
  ACE_NTOHL (0x6e697449),
  ACE_NTOHL (0x6e666f3a),
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/ORBInitInfo:1.0
    12,
  ACE_NTOHL (0x4f524249),
  ACE_NTOHL (0x6e697449),
  ACE_NTOHL (0x6e666f00),  // name = ORBInitInfo
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBInitInfo (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ORBInitInfo),
    (char *) &_oc_PortableInterceptor_ORBInitInfo,
    0,
    sizeof (PortableInterceptor::ORBInitInfo)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ORBInitInfo,
    &_tc_TAO_tc_PortableInterceptor_ORBInitInfo
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:63

int PortableInterceptor::ORBInitializer::_tao_class_id = 0;

PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::tao_ORBInitializer_life::tao_duplicate (
    ORBInitializer_ptr p
  )
{
  return ORBInitializer::_duplicate (p);
}

void
PortableInterceptor::tao_ORBInitializer_life::tao_release (
    ORBInitializer_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::tao_ORBInitializer_life::tao_nil (
    void
  )
{
  return ORBInitializer::_nil ();
}

CORBA::Boolean
PortableInterceptor::tao_ORBInitializer_life::tao_marshal (
    ORBInitializer_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::tao_ORBInitializer_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ORBInitializer::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
PortableInterceptor::tao_ORBInitializer_cast::tao_upcast (
    void *src
  )
{
  ORBInitializer **tmp =
    ACE_static_cast (ORBInitializer **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ORBInitializer,
        PortableInterceptor::tao_ORBInitializer_life
      >;
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ORBInitializer,
        PortableInterceptor::tao_ORBInitializer_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ORBInitializer, \
        PortableInterceptor::tao_ORBInitializer_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ORBInitializer, \
        PortableInterceptor::tao_ORBInitializer_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:245

PortableInterceptor::ORBInitializer::ORBInitializer (void)
{}

PortableInterceptor::ORBInitializer::~ORBInitializer (void)
{}

void
PortableInterceptor::ORBInitializer::_tao_any_destructor (void *_tao_void_pointer)
{
  ORBInitializer *tmp = ACE_static_cast (ORBInitializer *, _tao_void_pointer);
  CORBA::release (tmp);
}

PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return ORBInitializer::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return ORBInitializer::_nil ();
    }

  return
      ACE_reinterpret_cast (
          ORBInitializer_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &ORBInitializer::_tao_class_id
                )
            )
        );
}

PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer::_duplicate (ORBInitializer_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

void *PortableInterceptor::ORBInitializer::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::PortableInterceptor, ORBInitializer)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* PortableInterceptor::ORBInitializer::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ORBInitializer:1.0";
}

CORBA::Boolean
PortableInterceptor::ORBInitializer::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ORBInitializer[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  51,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x6f6d672e),
  ACE_NTOHL (0x6f72672f),
  ACE_NTOHL (0x506f7274),
  ACE_NTOHL (0x61626c65),
  ACE_NTOHL (0x496e7465),
  ACE_NTOHL (0x72636570),
  ACE_NTOHL (0x746f722f),
  ACE_NTOHL (0x4f524249),
  ACE_NTOHL (0x6e697469),
  ACE_NTOHL (0x616c697a),
  ACE_NTOHL (0x65723a31),
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/PortableInterceptor/ORBInitializer:1.0
    15,
  ACE_NTOHL (0x4f524249),
  ACE_NTOHL (0x6e697469),
  ACE_NTOHL (0x616c697a),
  ACE_NTOHL (0x65720000),  // name = ORBInitializer
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBInitializer (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ORBInitializer),
    (char *) &_oc_PortableInterceptor_ORBInitializer,
    0,
    sizeof (PortableInterceptor::ORBInitializer)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (PortableInterceptor)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_ORBInitializer,
    &_tc_TAO_tc_PortableInterceptor_ORBInitializer
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::Interceptor_ptr _tao_elem
  )
{
  PortableInterceptor::Interceptor_ptr _tao_objptr =
    PortableInterceptor::Interceptor::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::Interceptor_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::Interceptor>::insert (
      _tao_any,
      PortableInterceptor::Interceptor::_tao_any_destructor,
      PortableInterceptor::_tc_Interceptor,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::Interceptor_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::Interceptor>::extract (
        _tao_any,
        PortableInterceptor::Interceptor::_tao_any_destructor,
        PortableInterceptor::_tc_Interceptor,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<PortableInterceptor::Interceptor>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<PortableInterceptor::Interceptor>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:50

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableInterceptor::ForwardRequest &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableInterceptor::ForwardRequest>::insert_copy (
      _tao_any,
      PortableInterceptor::ForwardRequest::_tao_any_destructor,
      PortableInterceptor::_tc_ForwardRequest,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ForwardRequest *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableInterceptor::ForwardRequest>::insert (
      _tao_any,
      PortableInterceptor::ForwardRequest::_tao_any_destructor,
      PortableInterceptor::_tc_ForwardRequest,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ForwardRequest *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const PortableInterceptor::ForwardRequest *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableInterceptor::ForwardRequest *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableInterceptor::ForwardRequest>::extract (
        _tao_any,
        PortableInterceptor::ForwardRequest::_tao_any_destructor,
        PortableInterceptor::_tc_ForwardRequest,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<PortableInterceptor::ForwardRequest>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<PortableInterceptor::ForwardRequest \>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:50

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableInterceptor::InvalidSlot &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableInterceptor::InvalidSlot>::insert_copy (
      _tao_any,
      PortableInterceptor::InvalidSlot::_tao_any_destructor,
      PortableInterceptor::_tc_InvalidSlot,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::InvalidSlot *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableInterceptor::InvalidSlot>::insert (
      _tao_any,
      PortableInterceptor::InvalidSlot::_tao_any_destructor,
      PortableInterceptor::_tc_InvalidSlot,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::InvalidSlot *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const PortableInterceptor::InvalidSlot *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableInterceptor::InvalidSlot *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableInterceptor::InvalidSlot>::extract (
        _tao_any,
        PortableInterceptor::InvalidSlot::_tao_any_destructor,
        PortableInterceptor::_tc_InvalidSlot,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<PortableInterceptor::InvalidSlot>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<PortableInterceptor::InvalidSlot \>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::Current_ptr _tao_elem
  )
{
  PortableInterceptor::Current_ptr _tao_objptr =
    PortableInterceptor::Current::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::Current_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::Current>::insert (
      _tao_any,
      PortableInterceptor::Current::_tao_any_destructor,
      PortableInterceptor::_tc_Current,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::Current_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::Current>::extract (
        _tao_any,
        PortableInterceptor::Current::_tao_any_destructor,
        PortableInterceptor::_tc_Current,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<PortableInterceptor::Current>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<PortableInterceptor::Current>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::RequestInfo_ptr _tao_elem
  )
{
  PortableInterceptor::RequestInfo_ptr _tao_objptr =
    PortableInterceptor::RequestInfo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::RequestInfo_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::RequestInfo>::insert (
      _tao_any,
      PortableInterceptor::RequestInfo::_tao_any_destructor,
      PortableInterceptor::_tc_RequestInfo,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::RequestInfo_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::RequestInfo>::extract (
        _tao_any,
        PortableInterceptor::RequestInfo::_tao_any_destructor,
        PortableInterceptor::_tc_RequestInfo,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<PortableInterceptor::RequestInfo>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<PortableInterceptor::RequestInfo>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInfo_ptr _tao_elem
  )
{
  PortableInterceptor::ClientRequestInfo_ptr _tao_objptr =
    PortableInterceptor::ClientRequestInfo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInfo_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ClientRequestInfo>::insert (
      _tao_any,
      PortableInterceptor::ClientRequestInfo::_tao_any_destructor,
      PortableInterceptor::_tc_ClientRequestInfo,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInfo_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ClientRequestInfo>::extract (
        _tao_any,
        PortableInterceptor::ClientRequestInfo::_tao_any_destructor,
        PortableInterceptor::_tc_ClientRequestInfo,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<PortableInterceptor::ClientRequestInfo>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<PortableInterceptor::ClientRequestInfo>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInfo_ptr _tao_elem
  )
{
  PortableInterceptor::ServerRequestInfo_ptr _tao_objptr =
    PortableInterceptor::ServerRequestInfo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInfo_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ServerRequestInfo>::insert (
      _tao_any,
      PortableInterceptor::ServerRequestInfo::_tao_any_destructor,
      PortableInterceptor::_tc_ServerRequestInfo,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInfo_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ServerRequestInfo>::extract (
        _tao_any,
        PortableInterceptor::ServerRequestInfo::_tao_any_destructor,
        PortableInterceptor::_tc_ServerRequestInfo,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<PortableInterceptor::ServerRequestInfo>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<PortableInterceptor::ServerRequestInfo>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInterceptor_ptr _tao_elem
  )
{
  PortableInterceptor::ClientRequestInterceptor_ptr _tao_objptr =
    PortableInterceptor::ClientRequestInterceptor::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInterceptor_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ClientRequestInterceptor>::insert (
      _tao_any,
      PortableInterceptor::ClientRequestInterceptor::_tao_any_destructor,
      PortableInterceptor::_tc_ClientRequestInterceptor,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInterceptor_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ClientRequestInterceptor>::extract (
        _tao_any,
        PortableInterceptor::ClientRequestInterceptor::_tao_any_destructor,
        PortableInterceptor::_tc_ClientRequestInterceptor,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<PortableInterceptor::ClientRequestInterceptor>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<PortableInterceptor::ClientRequestInterceptor>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInterceptor_ptr _tao_elem
  )
{
  PortableInterceptor::ServerRequestInterceptor_ptr _tao_objptr =
    PortableInterceptor::ServerRequestInterceptor::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInterceptor_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ServerRequestInterceptor>::insert (
      _tao_any,
      PortableInterceptor::ServerRequestInterceptor::_tao_any_destructor,
      PortableInterceptor::_tc_ServerRequestInterceptor,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInterceptor_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ServerRequestInterceptor>::extract (
        _tao_any,
        PortableInterceptor::ServerRequestInterceptor::_tao_any_destructor,
        PortableInterceptor::_tc_ServerRequestInterceptor,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<PortableInterceptor::ServerRequestInterceptor>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<PortableInterceptor::ServerRequestInterceptor>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::PolicyFactory_ptr _tao_elem
  )
{
  PortableInterceptor::PolicyFactory_ptr _tao_objptr =
    PortableInterceptor::PolicyFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::PolicyFactory_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::PolicyFactory>::insert (
      _tao_any,
      PortableInterceptor::PolicyFactory::_tao_any_destructor,
      PortableInterceptor::_tc_PolicyFactory,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::PolicyFactory_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::PolicyFactory>::extract (
        _tao_any,
        PortableInterceptor::PolicyFactory::_tao_any_destructor,
        PortableInterceptor::_tc_PolicyFactory,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<PortableInterceptor::PolicyFactory>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<PortableInterceptor::PolicyFactory>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitInfo_ptr _tao_elem
  )
{
  PortableInterceptor::ORBInitInfo_ptr _tao_objptr =
    PortableInterceptor::ORBInitInfo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitInfo_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ORBInitInfo>::insert (
      _tao_any,
      PortableInterceptor::ORBInitInfo::_tao_any_destructor,
      PortableInterceptor::_tc_ORBInitInfo,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitInfo_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ORBInitInfo>::extract (
        _tao_any,
        PortableInterceptor::ORBInitInfo::_tao_any_destructor,
        PortableInterceptor::_tc_ORBInitInfo,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<PortableInterceptor::ORBInitInfo>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<PortableInterceptor::ORBInitInfo>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitializer_ptr _tao_elem
  )
{
  PortableInterceptor::ORBInitializer_ptr _tao_objptr =
    PortableInterceptor::ORBInitializer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitializer_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ORBInitializer>::insert (
      _tao_any,
      PortableInterceptor::ORBInitializer::_tao_any_destructor,
      PortableInterceptor::_tc_ORBInitializer,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitializer_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ORBInitializer>::extract (
        _tao_any,
        PortableInterceptor::ORBInitializer::_tao_any_destructor,
        PortableInterceptor::_tc_ORBInitializer,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<PortableInterceptor::ORBInitializer>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<PortableInterceptor::ORBInitializer>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
