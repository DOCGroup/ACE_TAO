// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:314


#include "DynamicAny.h"
#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo_i.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */


#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "DynamicAnyC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int DynamicAny::DynAny::_tao_class_id = 0;

DynamicAny::DynAny_ptr
DynamicAny::tao_DynAny_life::tao_duplicate (
    DynamicAny::DynAny_ptr p
  )
{
  return DynamicAny::DynAny::_duplicate (p);
}

void
DynamicAny::tao_DynAny_life::tao_release (
    DynamicAny::DynAny_ptr p
  )
{
  CORBA::release (p);
}

DynamicAny::DynAny_ptr
DynamicAny::tao_DynAny_life::tao_nil (
    void
  )
{
  return DynamicAny::DynAny::_nil ();
}

CORBA::Boolean
DynamicAny::tao_DynAny_life::tao_marshal (
    DynamicAny::DynAny_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

DynamicAny::DynAny_ptr
DynamicAny::tao_DynAny_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return DynamicAny::DynAny::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
DynamicAny::tao_DynAny_cast::tao_upcast (
    void *src
  )
{
  DynamicAny::DynAny **tmp =
    ACE_static_cast (DynamicAny::DynAny **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        DynamicAny::DynAny,
        DynamicAny::tao_DynAny_life
      >;
  template class
    TAO_Objref_Out_T<
        DynamicAny::DynAny,
        DynamicAny::tao_DynAny_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        DynamicAny::DynAny, \
        DynamicAny::tao_DynAny_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        DynamicAny::DynAny, \
        DynamicAny::tao_DynAny_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:232

DynamicAny::DynAny::DynAny (void)
{}

DynamicAny::DynAny::~DynAny (void)
{}

DynamicAny::DynAny_ptr
DynamicAny::DynAny::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return DynAny::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

DynamicAny::DynAny_ptr 
DynamicAny::DynAny::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return DynAny::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          DynAny_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &DynAny::_tao_class_id
                )
            )
        );
}

DynamicAny::DynAny_ptr
DynamicAny::DynAny::_duplicate (DynAny_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *DynamicAny::DynAny::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::DynamicAny, DynAny)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* DynamicAny::DynAny::_interface_repository_id (void) const
{
  return "IDL:omg.org/DynamicAny/DynAny:1.0";
}

CORBA::Boolean
DynamicAny::DynAny::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

DynamicAny::DynAny::InvalidValue::InvalidValue (void)
  : CORBA::UserException (
        "IDL:omg.org/DynamicAny/DynAny/InvalidValue:1.0",
        "InvalidValue"
      )
{
}

DynamicAny::DynAny::InvalidValue::~InvalidValue (void)
{
}

DynamicAny::DynAny::InvalidValue::InvalidValue (const ::DynamicAny::DynAny::InvalidValue &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

DynamicAny::DynAny::InvalidValue&
DynamicAny::DynAny::InvalidValue::operator= (const ::DynamicAny::DynAny::InvalidValue &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

DynamicAny::DynAny::InvalidValue *
DynamicAny::DynAny::InvalidValue::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/DynamicAny/DynAny/InvalidValue:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (InvalidValue *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *DynamicAny::DynAny::InvalidValue::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::DynamicAny::DynAny::InvalidValue, 0);
  return retval;
}

CORBA::Exception *
DynamicAny::DynAny::InvalidValue::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::DynamicAny::DynAny::InvalidValue (*this),
      0
    );
  return result;
}

void DynamicAny::DynAny::InvalidValue::_raise (void)
{
  TAO_RAISE (*this);
}

void DynamicAny::DynAny::InvalidValue::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void DynamicAny::DynAny::InvalidValue::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}



// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

DynamicAny::DynAny::TypeMismatch::TypeMismatch (void)
  : CORBA::UserException (
        "IDL:omg.org/DynamicAny/DynAny/TypeMismatch:1.0",
        "TypeMismatch"
      )
{
}

DynamicAny::DynAny::TypeMismatch::~TypeMismatch (void)
{
}

DynamicAny::DynAny::TypeMismatch::TypeMismatch (const ::DynamicAny::DynAny::TypeMismatch &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

DynamicAny::DynAny::TypeMismatch&
DynamicAny::DynAny::TypeMismatch::operator= (const ::DynamicAny::DynAny::TypeMismatch &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

DynamicAny::DynAny::TypeMismatch *
DynamicAny::DynAny::TypeMismatch::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/DynamicAny/DynAny/TypeMismatch:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (TypeMismatch *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *DynamicAny::DynAny::TypeMismatch::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::DynamicAny::DynAny::TypeMismatch, 0);
  return retval;
}

CORBA::Exception *
DynamicAny::DynAny::TypeMismatch::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::DynamicAny::DynAny::TypeMismatch (*this),
      0
    );
  return result;
}

void DynamicAny::DynAny::TypeMismatch::_raise (void)
{
  TAO_RAISE (*this);
}

void DynamicAny::DynAny::TypeMismatch::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void DynamicAny::DynAny::TypeMismatch::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int DynamicAny::DynFixed::_tao_class_id = 0;

DynamicAny::DynFixed_ptr
DynamicAny::tao_DynFixed_life::tao_duplicate (
    DynamicAny::DynFixed_ptr p
  )
{
  return DynamicAny::DynFixed::_duplicate (p);
}

void
DynamicAny::tao_DynFixed_life::tao_release (
    DynamicAny::DynFixed_ptr p
  )
{
  CORBA::release (p);
}

DynamicAny::DynFixed_ptr
DynamicAny::tao_DynFixed_life::tao_nil (
    void
  )
{
  return DynamicAny::DynFixed::_nil ();
}

CORBA::Boolean
DynamicAny::tao_DynFixed_life::tao_marshal (
    DynamicAny::DynFixed_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

DynamicAny::DynFixed_ptr
DynamicAny::tao_DynFixed_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return DynamicAny::DynFixed::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
DynamicAny::tao_DynFixed_cast::tao_upcast (
    void *src
  )
{
  DynamicAny::DynFixed **tmp =
    ACE_static_cast (DynamicAny::DynFixed **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        DynamicAny::DynFixed,
        DynamicAny::tao_DynFixed_life
      >;
  template class
    TAO_Objref_Out_T<
        DynamicAny::DynFixed,
        DynamicAny::tao_DynFixed_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        DynamicAny::DynFixed, \
        DynamicAny::tao_DynFixed_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        DynamicAny::DynFixed, \
        DynamicAny::tao_DynFixed_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:232

DynamicAny::DynFixed::DynFixed (void)
{}

DynamicAny::DynFixed::~DynFixed (void)
{}

DynamicAny::DynFixed_ptr
DynamicAny::DynFixed::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return DynFixed::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

DynamicAny::DynFixed_ptr 
DynamicAny::DynFixed::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return DynFixed::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          DynFixed_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &DynFixed::_tao_class_id
                )
            )
        );
}

DynamicAny::DynFixed_ptr
DynamicAny::DynFixed::_duplicate (DynFixed_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *DynamicAny::DynFixed::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::DynamicAny, DynFixed)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::DynamicAny, DynAny)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                DynamicAny::DynAny_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* DynamicAny::DynFixed::_interface_repository_id (void) const
{
  return "IDL:omg.org/DynamicAny/DynFixed:1.0";
}

CORBA::Boolean
DynamicAny::DynFixed::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int DynamicAny::DynEnum::_tao_class_id = 0;

DynamicAny::DynEnum_ptr
DynamicAny::tao_DynEnum_life::tao_duplicate (
    DynamicAny::DynEnum_ptr p
  )
{
  return DynamicAny::DynEnum::_duplicate (p);
}

void
DynamicAny::tao_DynEnum_life::tao_release (
    DynamicAny::DynEnum_ptr p
  )
{
  CORBA::release (p);
}

DynamicAny::DynEnum_ptr
DynamicAny::tao_DynEnum_life::tao_nil (
    void
  )
{
  return DynamicAny::DynEnum::_nil ();
}

CORBA::Boolean
DynamicAny::tao_DynEnum_life::tao_marshal (
    DynamicAny::DynEnum_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

DynamicAny::DynEnum_ptr
DynamicAny::tao_DynEnum_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return DynamicAny::DynEnum::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
DynamicAny::tao_DynEnum_cast::tao_upcast (
    void *src
  )
{
  DynamicAny::DynEnum **tmp =
    ACE_static_cast (DynamicAny::DynEnum **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        DynamicAny::DynEnum,
        DynamicAny::tao_DynEnum_life
      >;
  template class
    TAO_Objref_Out_T<
        DynamicAny::DynEnum,
        DynamicAny::tao_DynEnum_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        DynamicAny::DynEnum, \
        DynamicAny::tao_DynEnum_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        DynamicAny::DynEnum, \
        DynamicAny::tao_DynEnum_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:232

DynamicAny::DynEnum::DynEnum (void)
{}

DynamicAny::DynEnum::~DynEnum (void)
{}

DynamicAny::DynEnum_ptr
DynamicAny::DynEnum::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return DynEnum::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

DynamicAny::DynEnum_ptr 
DynamicAny::DynEnum::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return DynEnum::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          DynEnum_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &DynEnum::_tao_class_id
                )
            )
        );
}

DynamicAny::DynEnum_ptr
DynamicAny::DynEnum::_duplicate (DynEnum_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *DynamicAny::DynEnum::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::DynamicAny, DynEnum)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::DynamicAny, DynAny)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                DynamicAny::DynAny_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* DynamicAny::DynEnum::_interface_repository_id (void) const
{
  return "IDL:omg.org/DynamicAny/DynEnum:1.0";
}

CORBA::Boolean
DynamicAny::DynEnum::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_type.cpp:274

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_Var_Var_T<
      NameValuePair
    >;

template class
  TAO_Out_T<
      NameValuePair,
      NameValuePair_var
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_Var_Var_T< \
      NameValuePair \
    >

# pragma instantiate \
  TAO_Out_T< \
      NameValuePair, \
      NameValuePair_var \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:49

DynamicAny::NameValuePairSeq::NameValuePairSeq (void)
{}

DynamicAny::NameValuePairSeq::NameValuePairSeq (CORBA::ULong max)
  : TAO_Unbounded_Sequence<
        DynamicAny::NameValuePair
      >
    (max)
{}

DynamicAny::NameValuePairSeq::NameValuePairSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    DynamicAny::NameValuePair* buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        DynamicAny::NameValuePair
      >
    (max, length, buffer, release)
{}

DynamicAny::NameValuePairSeq::NameValuePairSeq (const NameValuePairSeq &seq)
  : TAO_Unbounded_Sequence<
        DynamicAny::NameValuePair
      >
    (seq)
{}

DynamicAny::NameValuePairSeq::~NameValuePairSeq (void)
{}



#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_VarSeq_Var_T<
      NameValuePairSeq,
      DynamicAny::NameValuePair
    >;

template class
  TAO_Seq_Out_T<
      NameValuePairSeq,
      NameValuePairSeq_var,
      DynamicAny::NameValuePair
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_VarSeq_Var_T< \
      NameValuePairSeq, \
      DynamicAny::NameValuePair \
    >

# pragma instantiate \
  TAO_Seq_Out_T< \
      NameValuePairSeq, \
      NameValuePairSeq_var, \
      DynamicAny::NameValuePair \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_cs.cpp:66



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_type.cpp:274

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_Var_Var_T<
      NameDynAnyPair
    >;

template class
  TAO_Out_T<
      NameDynAnyPair,
      NameDynAnyPair_var
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_Var_Var_T< \
      NameDynAnyPair \
    >

# pragma instantiate \
  TAO_Out_T< \
      NameDynAnyPair, \
      NameDynAnyPair_var \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:49

DynamicAny::NameDynAnyPairSeq::NameDynAnyPairSeq (void)
{}

DynamicAny::NameDynAnyPairSeq::NameDynAnyPairSeq (CORBA::ULong max)
  : TAO_Unbounded_Sequence<
        DynamicAny::NameDynAnyPair
      >
    (max)
{}

DynamicAny::NameDynAnyPairSeq::NameDynAnyPairSeq (
    CORBA::ULong max,
    CORBA::ULong length,
    DynamicAny::NameDynAnyPair* buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        DynamicAny::NameDynAnyPair
      >
    (max, length, buffer, release)
{}

DynamicAny::NameDynAnyPairSeq::NameDynAnyPairSeq (const NameDynAnyPairSeq &seq)
  : TAO_Unbounded_Sequence<
        DynamicAny::NameDynAnyPair
      >
    (seq)
{}

DynamicAny::NameDynAnyPairSeq::~NameDynAnyPairSeq (void)
{}



#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_VarSeq_Var_T<
      NameDynAnyPairSeq,
      DynamicAny::NameDynAnyPair
    >;

template class
  TAO_Seq_Out_T<
      NameDynAnyPairSeq,
      NameDynAnyPairSeq_var,
      DynamicAny::NameDynAnyPair
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_VarSeq_Var_T< \
      NameDynAnyPairSeq, \
      DynamicAny::NameDynAnyPair \
    >

# pragma instantiate \
  TAO_Seq_Out_T< \
      NameDynAnyPairSeq, \
      NameDynAnyPairSeq_var, \
      DynamicAny::NameDynAnyPair \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int DynamicAny::DynStruct::_tao_class_id = 0;

DynamicAny::DynStruct_ptr
DynamicAny::tao_DynStruct_life::tao_duplicate (
    DynamicAny::DynStruct_ptr p
  )
{
  return DynamicAny::DynStruct::_duplicate (p);
}

void
DynamicAny::tao_DynStruct_life::tao_release (
    DynamicAny::DynStruct_ptr p
  )
{
  CORBA::release (p);
}

DynamicAny::DynStruct_ptr
DynamicAny::tao_DynStruct_life::tao_nil (
    void
  )
{
  return DynamicAny::DynStruct::_nil ();
}

CORBA::Boolean
DynamicAny::tao_DynStruct_life::tao_marshal (
    DynamicAny::DynStruct_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

DynamicAny::DynStruct_ptr
DynamicAny::tao_DynStruct_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return DynamicAny::DynStruct::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
DynamicAny::tao_DynStruct_cast::tao_upcast (
    void *src
  )
{
  DynamicAny::DynStruct **tmp =
    ACE_static_cast (DynamicAny::DynStruct **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        DynamicAny::DynStruct,
        DynamicAny::tao_DynStruct_life
      >;
  template class
    TAO_Objref_Out_T<
        DynamicAny::DynStruct,
        DynamicAny::tao_DynStruct_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        DynamicAny::DynStruct, \
        DynamicAny::tao_DynStruct_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        DynamicAny::DynStruct, \
        DynamicAny::tao_DynStruct_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:232

DynamicAny::DynStruct::DynStruct (void)
{}

DynamicAny::DynStruct::~DynStruct (void)
{}

DynamicAny::DynStruct_ptr
DynamicAny::DynStruct::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return DynStruct::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

DynamicAny::DynStruct_ptr 
DynamicAny::DynStruct::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return DynStruct::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          DynStruct_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &DynStruct::_tao_class_id
                )
            )
        );
}

DynamicAny::DynStruct_ptr
DynamicAny::DynStruct::_duplicate (DynStruct_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *DynamicAny::DynStruct::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::DynamicAny, DynStruct)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::DynamicAny, DynAny)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                DynamicAny::DynAny_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* DynamicAny::DynStruct::_interface_repository_id (void) const
{
  return "IDL:omg.org/DynamicAny/DynStruct:1.0";
}

CORBA::Boolean
DynamicAny::DynStruct::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int DynamicAny::DynUnion::_tao_class_id = 0;

DynamicAny::DynUnion_ptr
DynamicAny::tao_DynUnion_life::tao_duplicate (
    DynamicAny::DynUnion_ptr p
  )
{
  return DynamicAny::DynUnion::_duplicate (p);
}

void
DynamicAny::tao_DynUnion_life::tao_release (
    DynamicAny::DynUnion_ptr p
  )
{
  CORBA::release (p);
}

DynamicAny::DynUnion_ptr
DynamicAny::tao_DynUnion_life::tao_nil (
    void
  )
{
  return DynamicAny::DynUnion::_nil ();
}

CORBA::Boolean
DynamicAny::tao_DynUnion_life::tao_marshal (
    DynamicAny::DynUnion_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

DynamicAny::DynUnion_ptr
DynamicAny::tao_DynUnion_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return DynamicAny::DynUnion::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
DynamicAny::tao_DynUnion_cast::tao_upcast (
    void *src
  )
{
  DynamicAny::DynUnion **tmp =
    ACE_static_cast (DynamicAny::DynUnion **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        DynamicAny::DynUnion,
        DynamicAny::tao_DynUnion_life
      >;
  template class
    TAO_Objref_Out_T<
        DynamicAny::DynUnion,
        DynamicAny::tao_DynUnion_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        DynamicAny::DynUnion, \
        DynamicAny::tao_DynUnion_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        DynamicAny::DynUnion, \
        DynamicAny::tao_DynUnion_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:232

DynamicAny::DynUnion::DynUnion (void)
{}

DynamicAny::DynUnion::~DynUnion (void)
{}

DynamicAny::DynUnion_ptr
DynamicAny::DynUnion::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return DynUnion::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

DynamicAny::DynUnion_ptr 
DynamicAny::DynUnion::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return DynUnion::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          DynUnion_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &DynUnion::_tao_class_id
                )
            )
        );
}

DynamicAny::DynUnion_ptr
DynamicAny::DynUnion::_duplicate (DynUnion_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *DynamicAny::DynUnion::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::DynamicAny, DynUnion)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::DynamicAny, DynAny)::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                DynamicAny::DynAny_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* DynamicAny::DynUnion::_interface_repository_id (void) const
{
  return "IDL:omg.org/DynamicAny/DynUnion:1.0";
}

CORBA::Boolean
DynamicAny::DynUnion::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:49

DynamicAny::AnySeq::AnySeq (void)
{}

DynamicAny::AnySeq::AnySeq (CORBA::ULong max)
  : TAO_Unbounded_Sequence<
        CORBA::Any
      >
    (max)
{}

DynamicAny::AnySeq::AnySeq (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Any* buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Any
      >
    (max, length, buffer, release)
{}

DynamicAny::AnySeq::AnySeq (const AnySeq &seq)
  : TAO_Unbounded_Sequence<
        CORBA::Any
      >
    (seq)
{}

DynamicAny::AnySeq::~AnySeq (void)
{}



#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_VarSeq_Var_T<
      AnySeq,
      CORBA::Any
    >;

template class
  TAO_Seq_Out_T<
      AnySeq,
      AnySeq_var,
      CORBA::Any
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_VarSeq_Var_T< \
      AnySeq, \
      CORBA::Any \
    >

# pragma instantiate \
  TAO_Seq_Out_T< \
      AnySeq, \
      AnySeq_var, \
      CORBA::Any \
    >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_cs.cpp:49

DynamicAny::DynAnySeq::DynAnySeq (void)
{}

DynamicAny::DynAnySeq::DynAnySeq (CORBA::ULong max)
  : TAO_Unbounded_Object_Sequence<
        DynamicAny::DynAny,
        DynamicAny::DynAny_var,
        DynamicAny::tao_DynAny_life,
        DynamicAny::tao_DynAny_cast
      >
    (max)
{}

DynamicAny::DynAnySeq::DynAnySeq (
    CORBA::ULong max,
    CORBA::ULong length,
    DynamicAny::DynAny_ptr* buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Object_Sequence<
        DynamicAny::DynAny,
        DynamicAny::DynAny_var,
        DynamicAny::tao_DynAny_life,
        DynamicAny::tao_DynAny_cast
      >
    (max, length, buffer, release)
{}

DynamicAny::DynAnySeq::DynAnySeq (const DynAnySeq &seq)
  : TAO_Unbounded_Object_Sequence<
        DynamicAny::DynAny,
        DynamicAny::DynAny_var,
        DynamicAny::tao_DynAny_life,
        DynamicAny::tao_DynAny_cast
      >
    (seq)
{}

DynamicAny::DynAnySeq::~DynAnySeq (void)
{}



#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_MngSeq_Var_T<
      DynamicAny::DynAnySeq,
      TAO_Object_Manager<
          DynamicAny::DynAny,
          DynamicAny::DynAny_var,
          DynamicAny::tao_DynAny_life
        >
    >;

template class
  TAO_Seq_Out_T<
      DynamicAny::DynAnySeq,
      DynamicAny::DynAnySeq_var,
      TAO_Object_Manager<
          DynamicAny::DynAny,
          DynamicAny::DynAny_var,
          DynamicAny::tao_DynAny_life
        >
    >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
    TAO_MngSeq_Var_T< \
        DynamicAny::DynAnySeq, \
        TAO_Object_Manager< \
            DynamicAny::DynAny, \
            DynamicAny::DynAny_var, \
            DynamicAny::tao_DynAny_life \
          > \
      >

# pragma instantiate \
    TAO_Seq_Out_T< \
        DynamicAny::DynAnySeq, \
        DynamicAny::DynAnySeq_var, \
        TAO_Object_Manager< \
            DynamicAny::DynAny, \
            DynamicAny::DynAny_var, \
            DynamicAny::tao_DynAny_life \
          > \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61
  
  int DynamicAny::DynSequence::_tao_class_id = 0;
  
  DynamicAny::DynSequence_ptr
  DynamicAny::tao_DynSequence_life::tao_duplicate (
      DynamicAny::DynSequence_ptr p
    )
  {
    return DynamicAny::DynSequence::_duplicate (p);
  }
  
  void
  DynamicAny::tao_DynSequence_life::tao_release (
      DynamicAny::DynSequence_ptr p
    )
  {
    CORBA::release (p);
  }
  
  DynamicAny::DynSequence_ptr
  DynamicAny::tao_DynSequence_life::tao_nil (
      void
    )
  {
    return DynamicAny::DynSequence::_nil ();
  }
  
  CORBA::Boolean
  DynamicAny::tao_DynSequence_life::tao_marshal (
      DynamicAny::DynSequence_ptr p,
      TAO_OutputCDR &cdr
    )
  {
    return p->marshal (cdr);
  }
  
  DynamicAny::DynSequence_ptr
  DynamicAny::tao_DynSequence_cast::tao_narrow (
      CORBA::Object *p
      ACE_ENV_ARG_DECL
    )
  {
    return DynamicAny::DynSequence::_narrow (p ACE_ENV_ARG_PARAMETER);
  }
  
  CORBA::Object *
  DynamicAny::tao_DynSequence_cast::tao_upcast (
      void *src
    )
  {
    DynamicAny::DynSequence **tmp =
      ACE_static_cast (DynamicAny::DynSequence **, src);
    return *tmp;
  }
  
#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
    template class
      TAO_Objref_Var_T<
          DynamicAny::DynSequence,
          DynamicAny::tao_DynSequence_life
        >;
    template class
      TAO_Objref_Out_T<
          DynamicAny::DynSequence,
          DynamicAny::tao_DynSequence_life
        >;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  # pragma instantiate \
      TAO_Objref_Var_T< \
          DynamicAny::DynSequence, \
          DynamicAny::tao_DynSequence_life \
        >
  # pragma instantiate \
      TAO_Objref_Out_T< \
          DynamicAny::DynSequence, \
          DynamicAny::tao_DynSequence_life \
        >
  #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
  
  // TAO_IDL - Generated from 
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:232
  
  DynamicAny::DynSequence::DynSequence (void)
  {}
  
  DynamicAny::DynSequence::~DynSequence (void)
  {}
  
  DynamicAny::DynSequence_ptr
  DynamicAny::DynSequence::_narrow (
      CORBA::Object_ptr obj
      ACE_ENV_ARG_DECL
    )
  {
    return DynSequence::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
  }
  
  DynamicAny::DynSequence_ptr 
  DynamicAny::DynSequence::_unchecked_narrow (
      CORBA::Object_ptr obj
      ACE_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      {
        return DynSequence::_nil ();
      }
    
    return
        ACE_reinterpret_cast (
            DynSequence_ptr,
            obj->_tao_QueryInterface (
                ACE_reinterpret_cast (
                    ptr_arith_t,
                    &DynSequence::_tao_class_id
                  )
              )
          );
  }
  
  DynamicAny::DynSequence_ptr
  DynamicAny::DynSequence::_duplicate (DynSequence_ptr obj)
  {
    if (! CORBA::is_nil (obj))
      {
        obj->_add_ref ();
      }
    
    return obj;
  }
  
  void *DynamicAny::DynSequence::_tao_QueryInterface (ptr_arith_t type)
  {
    void *retv = 0;
    
    if (type == ACE_reinterpret_cast (
                ptr_arith_t,
                &ACE_NESTED_CLASS (::DynamicAny, DynSequence)::_tao_class_id)
              )
      {
        retv = ACE_reinterpret_cast (void*, this);
      }
    else if (type == ACE_reinterpret_cast (
                ptr_arith_t,
                &ACE_NESTED_CLASS (::DynamicAny, DynAny)::_tao_class_id)
              )
      {
        retv =
          ACE_reinterpret_cast (
              void *,
              ACE_static_cast (
                  DynamicAny::DynAny_ptr,
                  this
                )
            );
      }
    else if (type == ACE_reinterpret_cast (
                 ptr_arith_t,
                 &CORBA::Object::_tao_class_id)
               )
      {
        retv =
          ACE_reinterpret_cast (
              void *,
              ACE_static_cast (CORBA::Object_ptr, this)
            );
      }
    
    if (retv != 0)
      {
        this->_add_ref ();
      }
    
    return retv;
  }
  
  const char* DynamicAny::DynSequence::_interface_repository_id (void) const
  {
    return "IDL:omg.org/DynamicAny/DynSequence:1.0";
  }
  
  CORBA::Boolean
  DynamicAny::DynSequence::marshal (TAO_OutputCDR &)
  {
    return 0;
  }
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61
  
  int DynamicAny::DynArray::_tao_class_id = 0;
  
  DynamicAny::DynArray_ptr
  DynamicAny::tao_DynArray_life::tao_duplicate (
      DynamicAny::DynArray_ptr p
    )
  {
    return DynamicAny::DynArray::_duplicate (p);
  }
  
  void
  DynamicAny::tao_DynArray_life::tao_release (
      DynamicAny::DynArray_ptr p
    )
  {
    CORBA::release (p);
  }
  
  DynamicAny::DynArray_ptr
  DynamicAny::tao_DynArray_life::tao_nil (
      void
    )
  {
    return DynamicAny::DynArray::_nil ();
  }
  
  CORBA::Boolean
  DynamicAny::tao_DynArray_life::tao_marshal (
      DynamicAny::DynArray_ptr p,
      TAO_OutputCDR &cdr
    )
  {
    return p->marshal (cdr);
  }
  
  DynamicAny::DynArray_ptr
  DynamicAny::tao_DynArray_cast::tao_narrow (
      CORBA::Object *p
      ACE_ENV_ARG_DECL
    )
  {
    return DynamicAny::DynArray::_narrow (p ACE_ENV_ARG_PARAMETER);
  }
  
  CORBA::Object *
  DynamicAny::tao_DynArray_cast::tao_upcast (
      void *src
    )
  {
    DynamicAny::DynArray **tmp =
      ACE_static_cast (DynamicAny::DynArray **, src);
    return *tmp;
  }
  
#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
    template class
      TAO_Objref_Var_T<
          DynamicAny::DynArray,
          DynamicAny::tao_DynArray_life
        >;
    template class
      TAO_Objref_Out_T<
          DynamicAny::DynArray,
          DynamicAny::tao_DynArray_life
        >;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  # pragma instantiate \
      TAO_Objref_Var_T< \
          DynamicAny::DynArray, \
          DynamicAny::tao_DynArray_life \
        >
  # pragma instantiate \
      TAO_Objref_Out_T< \
          DynamicAny::DynArray, \
          DynamicAny::tao_DynArray_life \
        >
  #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
  
  // TAO_IDL - Generated from 
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:232
  
  DynamicAny::DynArray::DynArray (void)
  {}
  
  DynamicAny::DynArray::~DynArray (void)
  {}
  
  DynamicAny::DynArray_ptr
  DynamicAny::DynArray::_narrow (
      CORBA::Object_ptr obj
      ACE_ENV_ARG_DECL
    )
  {
    return DynArray::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
  }
  
  DynamicAny::DynArray_ptr 
  DynamicAny::DynArray::_unchecked_narrow (
      CORBA::Object_ptr obj
      ACE_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      {
        return DynArray::_nil ();
      }
    
    return
        ACE_reinterpret_cast (
            DynArray_ptr,
            obj->_tao_QueryInterface (
                ACE_reinterpret_cast (
                    ptr_arith_t,
                    &DynArray::_tao_class_id
                  )
              )
          );
  }
  
  DynamicAny::DynArray_ptr
  DynamicAny::DynArray::_duplicate (DynArray_ptr obj)
  {
    if (! CORBA::is_nil (obj))
      {
        obj->_add_ref ();
      }
    
    return obj;
  }
  
  void *DynamicAny::DynArray::_tao_QueryInterface (ptr_arith_t type)
  {
    void *retv = 0;
    
    if (type == ACE_reinterpret_cast (
                ptr_arith_t,
                &ACE_NESTED_CLASS (::DynamicAny, DynArray)::_tao_class_id)
              )
      {
        retv = ACE_reinterpret_cast (void*, this);
      }
    else if (type == ACE_reinterpret_cast (
                ptr_arith_t,
                &ACE_NESTED_CLASS (::DynamicAny, DynAny)::_tao_class_id)
              )
      {
        retv =
          ACE_reinterpret_cast (
              void *,
              ACE_static_cast (
                  DynamicAny::DynAny_ptr,
                  this
                )
            );
      }
    else if (type == ACE_reinterpret_cast (
                 ptr_arith_t,
                 &CORBA::Object::_tao_class_id)
               )
      {
        retv =
          ACE_reinterpret_cast (
              void *,
              ACE_static_cast (CORBA::Object_ptr, this)
            );
      }
    
    if (retv != 0)
      {
        this->_add_ref ();
      }
    
    return retv;
  }
  
  const char* DynamicAny::DynArray::_interface_repository_id (void) const
  {
    return "IDL:omg.org/DynamicAny/DynArray:1.0";
  }
  
  CORBA::Boolean
  DynamicAny::DynArray::marshal (TAO_OutputCDR &)
  {
    return 0;
  }
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61
  
  int DynamicAny::DynValue::_tao_class_id = 0;
  
  DynamicAny::DynValue_ptr
  DynamicAny::tao_DynValue_life::tao_duplicate (
      DynamicAny::DynValue_ptr p
    )
  {
    return DynamicAny::DynValue::_duplicate (p);
  }
  
  void
  DynamicAny::tao_DynValue_life::tao_release (
      DynamicAny::DynValue_ptr p
    )
  {
    CORBA::release (p);
  }
  
  DynamicAny::DynValue_ptr
  DynamicAny::tao_DynValue_life::tao_nil (
      void
    )
  {
    return DynamicAny::DynValue::_nil ();
  }
  
  CORBA::Boolean
  DynamicAny::tao_DynValue_life::tao_marshal (
      DynamicAny::DynValue_ptr p,
      TAO_OutputCDR &cdr
    )
  {
    return p->marshal (cdr);
  }
  
  DynamicAny::DynValue_ptr
  DynamicAny::tao_DynValue_cast::tao_narrow (
      CORBA::Object *p
      ACE_ENV_ARG_DECL
    )
  {
    return DynamicAny::DynValue::_narrow (p ACE_ENV_ARG_PARAMETER);
  }
  
  CORBA::Object *
  DynamicAny::tao_DynValue_cast::tao_upcast (
      void *src
    )
  {
    DynamicAny::DynValue **tmp =
      ACE_static_cast (DynamicAny::DynValue **, src);
    return *tmp;
  }
  
#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
    template class
      TAO_Objref_Var_T<
          DynamicAny::DynValue,
          DynamicAny::tao_DynValue_life
        >;
    template class
      TAO_Objref_Out_T<
          DynamicAny::DynValue,
          DynamicAny::tao_DynValue_life
        >;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  # pragma instantiate \
      TAO_Objref_Var_T< \
          DynamicAny::DynValue, \
          DynamicAny::tao_DynValue_life \
        >
  # pragma instantiate \
      TAO_Objref_Out_T< \
          DynamicAny::DynValue, \
          DynamicAny::tao_DynValue_life \
        >
  #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
  
  // TAO_IDL - Generated from 
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:232
  
  DynamicAny::DynValue::DynValue (void)
  {}
  
  DynamicAny::DynValue::~DynValue (void)
  {}
  
  DynamicAny::DynValue_ptr
  DynamicAny::DynValue::_narrow (
      CORBA::Object_ptr obj
      ACE_ENV_ARG_DECL
    )
  {
    return DynValue::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
  }
  
  DynamicAny::DynValue_ptr 
  DynamicAny::DynValue::_unchecked_narrow (
      CORBA::Object_ptr obj
      ACE_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      {
        return DynValue::_nil ();
      }
    
    return
        ACE_reinterpret_cast (
            DynValue_ptr,
            obj->_tao_QueryInterface (
                ACE_reinterpret_cast (
                    ptr_arith_t,
                    &DynValue::_tao_class_id
                  )
              )
          );
  }
  
  DynamicAny::DynValue_ptr
  DynamicAny::DynValue::_duplicate (DynValue_ptr obj)
  {
    if (! CORBA::is_nil (obj))
      {
        obj->_add_ref ();
      }
    
    return obj;
  }
  
  void *DynamicAny::DynValue::_tao_QueryInterface (ptr_arith_t type)
  {
    void *retv = 0;
    
    if (type == ACE_reinterpret_cast (
                ptr_arith_t,
                &ACE_NESTED_CLASS (::DynamicAny, DynValue)::_tao_class_id)
              )
      {
        retv = ACE_reinterpret_cast (void*, this);
      }
    else if (type == ACE_reinterpret_cast (
                ptr_arith_t,
                &ACE_NESTED_CLASS (::DynamicAny, DynAny)::_tao_class_id)
              )
      {
        retv =
          ACE_reinterpret_cast (
              void *,
              ACE_static_cast (
                  DynamicAny::DynAny_ptr,
                  this
                )
            );
      }
    else if (type == ACE_reinterpret_cast (
                 ptr_arith_t,
                 &CORBA::Object::_tao_class_id)
               )
      {
        retv =
          ACE_reinterpret_cast (
              void *,
              ACE_static_cast (CORBA::Object_ptr, this)
            );
      }
    
    if (retv != 0)
      {
        this->_add_ref ();
      }
    
    return retv;
  }
  
  const char* DynamicAny::DynValue::_interface_repository_id (void) const
  {
    return "IDL:omg.org/DynamicAny/DynValue:1.0";
  }
  
  CORBA::Boolean
  DynamicAny::DynValue::marshal (TAO_OutputCDR &)
  {
    return 0;
  }
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61
  
  int DynamicAny::DynAnyFactory::_tao_class_id = 0;
  
  DynamicAny::DynAnyFactory_ptr
  DynamicAny::tao_DynAnyFactory_life::tao_duplicate (
      DynamicAny::DynAnyFactory_ptr p
    )
  {
    return DynamicAny::DynAnyFactory::_duplicate (p);
  }
  
  void
  DynamicAny::tao_DynAnyFactory_life::tao_release (
      DynamicAny::DynAnyFactory_ptr p
    )
  {
    CORBA::release (p);
  }
  
  DynamicAny::DynAnyFactory_ptr
  DynamicAny::tao_DynAnyFactory_life::tao_nil (
      void
    )
  {
    return DynamicAny::DynAnyFactory::_nil ();
  }
  
  CORBA::Boolean
  DynamicAny::tao_DynAnyFactory_life::tao_marshal (
      DynamicAny::DynAnyFactory_ptr p,
      TAO_OutputCDR &cdr
    )
  {
    return p->marshal (cdr);
  }
  
  DynamicAny::DynAnyFactory_ptr
  DynamicAny::tao_DynAnyFactory_cast::tao_narrow (
      CORBA::Object *p
      ACE_ENV_ARG_DECL
    )
  {
    return DynamicAny::DynAnyFactory::_narrow (p ACE_ENV_ARG_PARAMETER);
  }
  
  CORBA::Object *
  DynamicAny::tao_DynAnyFactory_cast::tao_upcast (
      void *src
    )
  {
    DynamicAny::DynAnyFactory **tmp =
      ACE_static_cast (DynamicAny::DynAnyFactory **, src);
    return *tmp;
  }
  
#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
    template class
      TAO_Objref_Var_T<
          DynamicAny::DynAnyFactory,
          DynamicAny::tao_DynAnyFactory_life
        >;
    template class
      TAO_Objref_Out_T<
          DynamicAny::DynAnyFactory,
          DynamicAny::tao_DynAnyFactory_life
        >;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  # pragma instantiate \
      TAO_Objref_Var_T< \
          DynamicAny::DynAnyFactory, \
          DynamicAny::tao_DynAnyFactory_life \
        >
  # pragma instantiate \
      TAO_Objref_Out_T< \
          DynamicAny::DynAnyFactory, \
          DynamicAny::tao_DynAnyFactory_life \
        >
  #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
  
  // TAO_IDL - Generated from 
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:232
  
  DynamicAny::DynAnyFactory::DynAnyFactory (void)
  {}
  
  DynamicAny::DynAnyFactory::~DynAnyFactory (void)
  {}
  
  DynamicAny::DynAnyFactory_ptr
  DynamicAny::DynAnyFactory::_narrow (
      CORBA::Object_ptr obj
      ACE_ENV_ARG_DECL
    )
  {
    return DynAnyFactory::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
  }
  
  DynamicAny::DynAnyFactory_ptr 
  DynamicAny::DynAnyFactory::_unchecked_narrow (
      CORBA::Object_ptr obj
      ACE_ENV_ARG_DECL_NOT_USED
    )
  {
    if (CORBA::is_nil (obj))
      {
        return DynAnyFactory::_nil ();
      }
    
    return
        ACE_reinterpret_cast (
            DynAnyFactory_ptr,
            obj->_tao_QueryInterface (
                ACE_reinterpret_cast (
                    ptr_arith_t,
                    &DynAnyFactory::_tao_class_id
                  )
              )
          );
  }
  
  DynamicAny::DynAnyFactory_ptr
  DynamicAny::DynAnyFactory::_duplicate (DynAnyFactory_ptr obj)
  {
    if (! CORBA::is_nil (obj))
      {
        obj->_add_ref ();
      }
    
    return obj;
  }
  
  void *DynamicAny::DynAnyFactory::_tao_QueryInterface (ptr_arith_t type)
  {
    void *retv = 0;
    
    if (type == ACE_reinterpret_cast (
                ptr_arith_t,
                &ACE_NESTED_CLASS (::DynamicAny, DynAnyFactory)::_tao_class_id)
              )
      {
        retv = ACE_reinterpret_cast (void*, this);
      }
    else if (type == ACE_reinterpret_cast (
                 ptr_arith_t,
                 &CORBA::Object::_tao_class_id)
               )
      {
        retv =
          ACE_reinterpret_cast (
              void *,
              ACE_static_cast (CORBA::Object_ptr, this)
            );
      }
    
    if (retv != 0)
      {
        this->_add_ref ();
      }
    
    return retv;
  }
  
  const char* DynamicAny::DynAnyFactory::_interface_repository_id (void) const
  {
    return "IDL:omg.org/DynamicAny/DynAnyFactory:1.0";
  }
  
  CORBA::Boolean
  DynamicAny::DynAnyFactory::marshal (TAO_OutputCDR &)
  {
    return 0;
  }  
  
  // TAO_IDL - Generated from 
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63
  
  DynamicAny::DynAnyFactory::InconsistentTypeCode::InconsistentTypeCode (void)
    : CORBA::UserException (
          "IDL:omg.org/DynamicAny/DynAnyFactory/InconsistentTypeCode:1.0",
          "InconsistentTypeCode"
        )
  {
  }
  
  DynamicAny::DynAnyFactory::InconsistentTypeCode::~InconsistentTypeCode (void)
  {
  }
  
  DynamicAny::DynAnyFactory::InconsistentTypeCode::InconsistentTypeCode (const ::DynamicAny::DynAnyFactory::InconsistentTypeCode &_tao_excp)
    : CORBA::UserException (
          _tao_excp._rep_id (),
          _tao_excp._name ()
        )
  {
}

DynamicAny::DynAnyFactory::InconsistentTypeCode&
DynamicAny::DynAnyFactory::InconsistentTypeCode::operator= (const ::DynamicAny::DynAnyFactory::InconsistentTypeCode &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

DynamicAny::DynAnyFactory::InconsistentTypeCode *
DynamicAny::DynAnyFactory::InconsistentTypeCode::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/DynamicAny/DynAnyFactory/InconsistentTypeCode:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (InconsistentTypeCode *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *DynamicAny::DynAnyFactory::InconsistentTypeCode::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::DynamicAny::DynAnyFactory::InconsistentTypeCode, 0);
  return retval;
}

CORBA::Exception *
DynamicAny::DynAnyFactory::InconsistentTypeCode::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::DynamicAny::DynAnyFactory::InconsistentTypeCode (*this),
      0
    );
  return result;
}

void DynamicAny::DynAnyFactory::InconsistentTypeCode::_raise (void)
{
  TAO_RAISE (*this);
}

void DynamicAny::DynAnyFactory::InconsistentTypeCode::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void DynamicAny::DynAnyFactory::InconsistentTypeCode::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:93

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynamicAny::NameValuePairSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynamicAny::NameValuePairSeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_cs.cpp:93

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DynamicAny::AnySeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DynamicAny::AnySeq &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return 0;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = 1;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

