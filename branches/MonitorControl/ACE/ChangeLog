Thu Apr 24 22:13:38 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/CDR_Stream.inl:
        * ace/Message_Queue_T.cpp:
        * ace/Control_Action.h:
        * ace/MC_Admin.h:
        * ace/Monitor_Point_Registry.cpp:
        * ace/Message_Queue_T.h:
        * ace/Monitor_Base.cpp:
        * ace/Monitor_Base.h:
        * ace/Monitor_Base.inl:
        * ace/Monitor_Point_Registry.h:
        * ace/CDR_Stream.h:
        * ace/CDR_Stream.cpp:
        * ace/MC_Admin.cpp:

          Added reference counting for monitors.

        * MonitorControl/MonitorControl_macros.h:

          Renamed this file as MonitorControl_utils.h,
          since it now contains more than just macros.

        * MonitorControl/MonitorControl_utils.h:

          Renamed from above file.

        * MonitorControl/MonitorControl.mpc:

          Changed the name of the renamed header file
          in the MPC project.

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/PacketsSentMonitor.h:
        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/BytesReceivedMonitor.cpp:
        * MonitorControl/PacketsReceivedMonitor.cpp:
        * MonitorControl/NumThreadsMonitor.cpp:
        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/PacketsSentMonitor.cpp:
        * MonitorControl/CPULoadMonitor.h:
        * MonitorControl/BytesReceivedMonitor.h:
        * MonitorControl/MemoryUsageMonitor.h:
        * MonitorControl/PacketsReceivedMonitor.h:
        * MonitorControl/NumThreadsMonitor.h:
        * MonitorControl/MonitorControl.h:
        * MonitorControl/BytesSentMonitor.h:
        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp:
        * MonitorControl/examples/Message_Queue_Size/message_queue_size.cpp:
        * MonitorControl/examples/Constraint/constraint.cpp:
        * MonitorControl/examples/CPU_Load/cpu_load.cpp:
        * MonitorControl/examples/Num_Threads/num_threads.cpp:
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp:
        * MonitorControl/examples/Group/group.cpp:

          Changes necessary to integrate monitor refcounting
          into MonitorControl classes and into the examples.

Fri Apr 18 21:33:44 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MonitorPoint.h:
        * MonitorControl/LowLevelMonitors_T.cpp:
        * MonitorControl/MonitorPoint_T.h:
        * MonitorControl/MonitorGroup_T.h:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/LowLevelMonitors_T.h:
        * MonitorControl/MonitorPoint_T.cpp:
        * MonitorControl/MonitorGroup_T.cpp:

          Removed these files, no longer needed without
          the template design of the OS monitors, see below.

        * MonitorControl/MonitorControl.mpc:

          Removed the above files from the MPC project.

        * MonitorControl/MonitorGroup.h:

          New file.

        * ace/Control_Action.cpp:
        * ace/Message_Queue_T.cpp:
        * ace/Control_Action.h:
        * ace/MC_Admin.h:
        * ace/MC_Admin_Manager.cpp:
        * ace/Monitor_Point_Registry.cpp:
        * ace/Message_Queue_T.h:
        * ace/Monitor_Base.cpp:
        * ace/MonitorControl_Types.h:
        * ace/Monitor_Base.h:
        * ace/Monitor_Base.inl
        * ace/Monitor_Point_Registry.h:
        * ace/MonitorControl_Types.cpp:
        * ace/Size_Monitor.cpp:
        * ace/Size_Monitor.h:
        * ace/CDR_Stream.h:
        * ace/MC_Admin_Manager.h:
        * ace/CDR_Stream.cpp:
        * ace/MC_Admin.cpp:

          Place ACE_ENABLE_MONITORS guards around all
          monitor-related code and classes in ACE.

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/PacketsSentMonitor.h:
        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/BytesReceivedMonitor.cpp:
        * MonitorControl/PacketsReceivedMonitor.cpp:
        * MonitorControl/NumThreadsMonitor.cpp:
        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/PacketsSentMonitor.cpp:
        * MonitorControl/MonitorControl_macros.h:
        * MonitorControl/CPULoadMonitor.h:
        * MonitorControl/MonitorGroup.cpp:
        * MonitorControl/MemoryUsageMonitor.h:
        * MonitorControl/BytesReceivedMonitor.h:
        * MonitorControl/PacketsReceivedMonitor.h:
        * MonitorControl/NumThreadsMonitor.h:
        * MonitorControl/MonitorControl.h:
        * MonitorControl/BytesSentMonitor.h:
        * MonitorControl/examples/Group/group.cpp:

          Changed design of OS monitors from being enabled/disabled
          via a boolean template parameter to just inheriting
          directly from Monitor_Base and being enabled/disabled
          at ACE build time the same as all the other monitors.

        * MonitorControl/examples/Bytes_Sent/Bytes_Sent.mpc:
        * MonitorControl/examples/Constraint/Constraint.mpc:
        * MonitorControl/examples/CPU_Load/CPU_Load.mpc:
        * MonitorControl/examples/Num_Threads/Num_Threads.mpc:
        * MonitorControl/examples/Memory_Usage/Memory_Usage.mpc:
        * MonitorControl/examples/Group/Group.mpc:

          Removed the 'macros += ENABLE_MONITORS' line, no
          longer needed.

Thu Apr 17 20:17:14 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Monitor_Point_Registry.cpp:
        * ace/Monitor_Base.cpp:
        
          Trimmed ACE_GUARD scopes to minimum necessary and added comments.
          Thanks to Abdullah Sowayan <abdullah dot sowayan at lmco dot com>
          for the ACE_GUARD suggestions.

Thu Apr 17 09:38:18 UTC 2008  Johnny Willemsen <jwillemsen@remedy.nl>

        * ace/Monitor_Base.cpp
        * ace/Monitor_Base.h
        * ace/Monitor_Base.inl
          Added inline file

Wed Apr 16 17:58:29 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Monitor_Point_Registry.cpp:
        * ace/Monitor_Base.cpp:
        * ace/MonitorControl_Types.cpp:
        * MonitorControl/examples/Constraint/constraint.cpp:

          Fixed memory management problems with the recently added
          refcounting, and added comments to the constraint example.

Wed Apr 16 12:00:18 UTC 2008  Johnny Willemsen <jwillemsen@remedy.nl>

        * ace/ace.mpc
        * ace/Control_Action.cpp
        * ace/Control_Action.h
        * ace/Refcountable.cpp
        * ace/Refcountable.h
        * ace/Refcountable.inl
        * ace/Refcountable_T.cpp
        * ace/Refcountable_T.h
        * ace/Refcountable_T.inl
        * ace/Strategies_T.h
        * ace/Strategies_T.inl
          Changed ACE_Refcountable to ACE_Refcountable_T which is a template
          that can be specialized with a ACE_SYNCH_MUTEX. ACE_Refcountable
          is now a typedef of ACE_Refcountable_T<ACE_Null_Mutex> which is
          kept as backward compatibity

Tue Apr 15 20:09:18 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Control_Action.cpp:
        * ace/Control_Action.h:
        * ace/Monitor_Base.cpp:
        * ace/MonitorControl_Types.h:
        * ace/Monitor_Base.h:
        * ace/MonitorControl_Types.cpp:
        * MonitorControl/MonitorQuery.cpp:
        * MonitorControl/examples/Constraint/constraint.cpp:

          Added refcounting for control actions, and
          implemented remove_constraint() in class
          Monitor_Base.

Mon Apr 14 19:15:03 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Control_Action_Registry.h:
        * ace/Control_Action_Registry.cpp:
        * ace/MC_Generic_Registry.h:
        * ace/MC_Generic_Registry.cpp:

          Removed these files, the control action registry
          has been eliminated from the design and thus also
          the need for a common registry base class.

        * ace/Control_Action.cpp:
        * ace/Control_Action.h:

          Removed the base class from the class declaration.

        * ace/MC_Admin.cpp:
        * ace/MC_Admin.h:

          Removed the control_action() methods, since they don't
          have their own registry any longer.

        * ace/Monitor_Point_Registry.cpp:
        * ace/Monitor_Point_Registry.h:

          Removed the base class from the class declaration.

        * ace/Monitor_Base.cpp:
        * ace/Monitor_Base.h:

          Removed the base class from the class declaration.
          Also renamed constraints() method as add_constraint(),
          to makes its purpose obvious. Finally, added a new,
          as yet unimplemented method called remove_constraint().

        * ace/MonitorControl_Types.cpp:
        * ace/MonitorControl_Types.h:

          Removed the MC_Generic class and added an 'id' member
          to the Constraint struct.

        * ace/MC_Admin_Manager.h:

          Removed the  #include of MC_Generic_Registry.h.

        * ace/ace.mpc:

          Removed MC_Generic_Registry.cpp and Control_Action_Registry
          from the proejct.

        * MonitorControl/MonitorControl.h:

          Replaced #include of MC_Generic_Registry.h with one of
          Monitor_Point_Registry.h.

        * MonitorControl/examples/Constraint/constraint.cpp:

          Changed calls to Monitor_Base's constraints() method to
          the new name of add_constraint(). Also added debug
          statements to output the created constraint id in each
          case.

Mon Apr 14 14:42:18 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * MonitorControl/AutoUpdateStarter.h:
          Make this a class

Thu Apr 10 16:38:18 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/BytesReceivedMonitor.cpp:
        * MonitorControl/PacketsReceivedMonitor.cpp:
        * MonitorControl/NumThreadsMonitor.cpp:
        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/PacketsSentMonitor.cpp:
        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp:
        * MonitorControl/examples/Constraint/constraint.cpp:
        * MonitorControl/examples/CPU_Load/cpu_load.cpp:
        * MonitorControl/examples/Num_Threads/num_threads.cpp:
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp:
        * MonitorControl/examples/Group/group.cpp:

          Changed OS monitor names to have a hierarchical structure
          for easier grouping and searching with wildcards.

Thu Apr 10 14:32:27 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/Num_Threads/num_threads.cpp:

          Replaced msec arg with ACE_Time_Value, similar to changes in

          Wed Apr  9 13:08:48 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

Wed Apr  9 18:51:40 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MonitorPoint_T.h:
        * MonitorControl/MonitorPoint_T.cpp:

          Added no-op implementation of pure virtual update(), which
          will be seen by default when an application is built with
          ENABLE_MONITORS undefined and therefore instantiates OS
          monitors with a boolean template argument of 'false'.

Wed Apr  9 14:03:05 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_T.cpp:

          Fixed bug in creation of unique monitor name that was corrupting
          the stack.

        * MonitorControl/examples/Message_Queue_Size/message_queue_size.cpp:

          Changed code to reconstruct the monitor name to match changes in
          how the name is first created.

Wed Apr  9 13:08:48 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/MC_Admin.cpp
        * ace/MC_Admin.h
        * ace/Monitor_Base.cpp
        * ace/Monitor_Base.h
        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp
        * MonitorControl/examples/Constraint/constraint.cpp
        * MonitorControl/examples/CPU_Load/cpu_load.cpp
        * MonitorControl/examples/Group/group.cpp
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp
        * MonitorControl/MonitorControl_macros.h
          Changed number of msec to a ACE_Time_Value, that way the time periods
          are more flexible and the implementation is easier

Tue Apr  8 19:57:48 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_T.cpp:
        * ace/Message_Queue_T.h:
        * ace/Monitor_Base.cpp:
        * ace/Monitor_Base.h:
        * ace/MC_Generic_Registry.h:
        * ace/MC_Generic_Registry.cpp:
        * ace/CDR_Stream.h:
        * ace/CDR_Stream.cpp:

          - Added mechanism to remove a monitor point from the registry
            when it (along with the thing it is monitoring) goes out
            of scope.

          - Added code to create a unique name for a message queue monitor
            based on its address.

Tue Apr  8 18:45:18 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/Monitor_Base.cpp
        * ace/Monitor_Base.h
        * ace/Size_Monitor.cpp
        * ace/Size_Monitor.h
        * Monitor/MonitorGroup_T.cpp
        * Monitor/MonitorGroup_T.h
        * Monitor/MonitorPoint.cpp
        * Monitor/MonitorPoint.h
        * Monitor/MonitorPoint_T.cpp
        * Monitor/MonitorPoint_T.h
          Moved the receive methos to the Monitor_Base class

Tue Apr  8 18:34:18 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/Monitor_Base.cpp:
        * ace/Monitor_Base.h:
          Added clear_i, this has to be overridden by derived classes. clear
          and retrieve_and_clear both call this clear_i

        * Monitor/MonitorPoint.cpp
        * Monitor/MonitorPoint.h
        * Monitor/MonitorPoint_T.cpp
        * Monitor/MonitorPoint_T.h
          No need to override clear

Tue Apr  8 16:33:42 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_Monitor.h:
        * ace/Message_Queue_Monitor.cpp:
        * ace/CDR_Buffer_Monitor.cpp:
        * ace/CDR_Buffer_Monitor.h:

          Removed these files, only the base
          class Size_Monitor is needed.

        * ace/ace.mpc:

          Removed the above files from the project.

        * ace/Message_Queue_T.cpp:
        * ace/Message_Queue_T.h:
        * ace/Monitor_Base.cpp:
        * ace/MonitorControl_Types.h:
        * ace/Monitor_Base.h:
        * ace/MonitorControl_Types.cpp:
        * ace/Size_Monitor.cpp:
        * ace/CDR_Stream.h:
        * ace/CDR_Stream.cpp:

          - Changed the signature of the register_monitor()
            method in CDR streams and ACE_Message_Queu to
            take a string parameter that sets the name first.

          - Delayed setting of the monitor name until
            registration.

          - Factored out registration code from CDR streams
            and ACE_Message_Queue to Monitor_Base.

Mon Apr  7 10:43:18 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/MC_Generic_Registry.cpp:
          Added missing guard

        * ace/Size_Monitor.h:
          Added explicit include of ACE_Export

Thu Mar 27 17:23:03 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * bin/MakeProjectCreator/config/ace_etcl.mpb:

          Added acelib as base project.

Wed Mar 26 22:00:19 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/CDR_Stream.inl:
        * ace/CDR_Stream.cpp:

          Moved monitor call to where it will get the actual current
          total size.

Tue Mar 25 17:12:35 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_T.cpp:
        * ace/Message_Queue_T.h:
        * ace/CDR_Stream.h:
        * ace/CDR_Stream.cpp:

          Removed ACE_ENABLE_MONITORS guard from declarations of
          register_monitor() and moved corresponding guards in the
          source files to the inside of the method body. This change
          eliminates the need to recompile application code that
          calls this method - if monnitors are not enabled, the
          call will be a no-op.

Mon Mar 24 20:12:40 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Size_Monitor.cpp:
        * ace/Size_Monitor.h:

          New files defining a common base class for the message queue
          monitor and the cdr buffer monitor.

        * ace/CDR_Buffer_Monitor.h:
        * ace/CDR_Buffer_Monitor.cpp:

          New files defining an ACE input and output CDR buffer monitor.

        * ace/ace.mpc:

          Added new files above to project.

        * ace/Message_Queue_Monitor.h:
        * ace/Message_Queue_Monitor.cpp:

          Removed code factored out into Size_Monitor class.

        * ace/CDR_Stream.h:
        * ace/CDR_Stream.cpp:

          Integrated CDR buffer monitor with input and output CDR
          classes.

Fri Mar 21 15:29:56 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * bin/MakeProjectCreator/config/ace_mc.mpb:

          Replaced ace_etcl base project with ace_etcl_parser, which
          in turn inherits from ace_etcl. Any builds linking to
          MonitorControl need to also link to both ACE_ETCL-related
          libs.

Fri Mar 21 15:19:57 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_Monitor.cpp:

          Commented out identifier of unused operation parameter.

Thu Mar 20 19:58:36 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_T.cpp:
        * ace/Message_Queue_T.h:
        * ace/ace.mpc:
        * MonitorControl/examples/Bytes_Sent/Bytes_Sent.mpc:
        * MonitorControl/examples/Constraint/Constraint.mpc:
        * MonitorControl/examples/CPU_Load/CPU_Load.mpc:
        * MonitorControl/examples/Num_Threads/Num_Threads.mpc:
        * MonitorControl/examples/Memory_Usage/Memory_Usage.mpc:
        * MonitorControl/examples/Group/Group.mpc:

          Changed ENABLE_ACE_MACROS to ACE_ENABLE_MACROS for
          consistency, added it to config.h and removed it from
          all MPC files where it appeared.

Thu Mar 20 19:39:04 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_Monitor.h:
        * ace/Message_Queue_Monitor.cpp:

          Removed constraint() and control_action() methods that have
          been subsumed by constraints() in the base class.

        * ace/Message_Queue_T.cpp:
        * ace/Message_Queue_T.h:

          Added #if defined argument in comments to corresponding #endifs.

Wed Mar 19 22:58:43 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ETCL/ETCL.mpc:

          Split the parser, lexer and interpreter files
          into a separate build (ACE_ETCL_Parser).

        * bin/MakeProjectCreator/config/ace_etcl_parser.mpb:

          Added this base project for convenience.

        * ETCL/ace_etcl_export.h:

          New file, export file for the original ETCL build.

        * ETCL/ETCL_include/etcl_export.h:

          Renamed this file etcl_parser_export.h.

        * ETCL/ETCL_include/etcl_parser_export.h:

          Renamed from etcl_export.h.

        * bin/MakeProjectCreator/config/ace_etcl.mpb:
        * ETCL/ETCL_Constraint.h:
        * ETCL/ETCL_include/ETCL_macros.h:
        * ETCL/ETCL_Constraint_Visitor.cpp:
        * ETCL/ETCL_Interpreter.cpp:
        * ETCL/ETCL_Constraint_Visitor.h:
        * ETCL/ETCL_Interpreter.h:
        * ETCL/ETCL_Constraint.cpp:
        * ETCL/ETCL_Constraint.inl:
        * MonitorControl/Constraint_Visitor.h:
        * MonitorControl/MonitorControl.mpc:
        * MonitorControl/Constraint_Visitor.cpp:

          Updates propagated from the above changes.

Tue Mar 18 14:53:30 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/Monitor_Base.cpp
        * ace/Monitor_Base.h
        * ace/MonitorControl_Types.h
        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp
        * MonitorControl/examples/Constraint/constraint.cpp
        * MonitorControl/examples/CPU_Load/cpu_load.cpp
        * MonitorControl/examples/Group/group.cpp
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp
        * MonitorControl/examples/Message_Queue_Size/message_queue_size.cpp
        * MonitorControl/examples/Num_Threads/num_threads.cpp
        * MonitorControl/MonitorQuery.cpp
          Changed the retrieve and retrieve_and_clear methods to
          have an argument by reference instead of return value so
          that we have to do less copies of the data

        * MonitorControl/LinuxNetworkInterfaceMonitor.h
          Fixed bcb warning

Tue Mar 18 14:19:30 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/Monitor_Base.cpp:
        * ace/Monitor_Base.h:
          Added retrieve_and_clear method, made retrieve fully thread safe

Tue Mar 18 14:22:06 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MonitorControl.h:

          Added include of MonitorControl_macros.h needed to build
          TAO Monitor library.

Tue Mar 18 13:34:30 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * MonitorControl/MonitorControl_macros.h:
          Corrected some incorrect macros

Thu Mar 13 17:23:12 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MonitorQuery.h:
        * MonitorControl/MonitorQuery.cpp:
        * MonitorControl/MonitorControl.mpc:
        * MonitorControl/MonitorControl.h:

          New files, defining a class encapsulating the
          functionality of a monitor query. Added new
          files to the MPC project, and to the application's
          #include list.

        * ace/Control_Action.h (execute):

          Gave the 'command' parameter a default value
          of the empty string.

        * ace/MC_Admin.h:
        * ace/MC_Admin.cpp:

          Added auto_query() method to register a periodic
          query with the reactor.

        * ace/MonitorControl_Types.h:

          Added a struct containing a constraint string
          expression and its associated control action,
          if any.

        * ace/Monitor_Base.cpp:
        * ace/Monitor_Base.h:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/MonitorPoint.cpp:

          A new design for constraints plus the added query
          mechanism keeps type knowledge of constraints out
          of ACE. The monitors derived from Monitor_Base in
          ACE store only a string expression, which is parsed
          and evaluated at query time.

        * MonitorControl/MonitorControl_macros.h:

          Added a macro to register a periodic query.

        * MonitorControl/examples/Constraint/constraint.cpp:

          Modified the example to work with the above changes.
          Now 2 constraints, each with its own triggered
          action, are added to the bytes received monitor.

Thu Mar  6 20:46:23 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/PacketsSentMonitor.h:
        * MonitorControl/BytesReceivedMonitor.cpp:
        * MonitorControl/PacketsReceivedMonitor.cpp:
        * MonitorControl/PacketsSentMonitor.cpp:
        * MonitorControl/BytesReceivedMonitor.h:
        * MonitorControl/PacketsReceivedMonitor.h:
        * MonitorControl/BytesSentMonitor.h:

          Refactored code from these monitors into the newly added
          LinuxNetworkInterfaceMonitor mixin class.

Thu Mar  6 19:30:29 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/LinuxNetworkInterfaceMonitor.h:
        * MonitorControl/LinuxNetworkInterfaceMonitor.cpp:

          New files, defining a base class for all network interface
          monitors implemented on Linux.

        * MonitorControl/MonitorControl.mpc:

          Added new files to project.

        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/BytesSentMonitor.h:

          Added the new class above as a base class, guard by a check
          for Linux platform, factored out code into the base class.

Thu Mar  6 03:53:16 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/BytesSentMonitor.{h,cpp}:

          Finished Linux implementation.

Wed Mar  5 19:36:58 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/Group/group.cpp:

          Fixed error in assigning a temporary to a non-const reference.

Wed Mar  5 19:29:38 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp:
        * MonitorControl/examples/Message_Queue_Size/message_queue_size.cpp:
        * MonitorControl/examples/Constraint/constraint.cpp:
        * MonitorControl/examples/CPU_Load/cpu_load.cpp:
        * MonitorControl/examples/Num_Threads/num_threads.cpp:
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp:
        * MonitorControl/examples/Group/group.cpp:

          Commented out unused args.

Wed Mar  5 19:18:25 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/WindowsMultiInstanceMonitor.cpp:

          Moved #include of Windows system file inside #ifdef guard.

Wed Mar  5 19:14:07 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/Constraint_Visitor.h:

          Fixed case error in #include.

Wed Mar  5 19:09:29 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/PacketsReceivedMonitor.cpp:
        * MonitorControl/BytesSentMonitor.cpp:

          Moved improperly placed #endifs

Wed Mar  5 19:04:48 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/BytesReceivedMonitor.cpp:

          Moved improperly place #endif.

        * MonitorControl/BytesSentMonitor.h:
        * MonitorControl/BytesSentMonitor.cpp:

          Partial Linux implementation.

Wed Mar  5 19:00:54 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ETCL/ETCL_include/ETCL_include.h:

          Added newline at the end of the file.

Wed Mar  5 18:59:16 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ETCL/ETCL_Constraint.inl:
        * ETCL/ETCL_Constraint.cpp:

          Commented out unused args.

Wed Mar  5 18:54:24 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ETCL/ETCL_Constraint.inl:

          Commented out unused args.

Wed Mar  5 18:48:50 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ETCL/ETCL_l.cpp:

          One more #include case error.

Wed Mar  5 18:46:23 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ETCL/ETCL_Constraint_Visitor.h:
        * ETCL/ETCL_Interpreter.h:

          More #include case errors.

Wed Mar  5 18:43:10 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ETCL/ETCL_Constraint.h:

          Fixed case error in #include.

Mon Mar  3 21:10:11 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/BytesReceivedMonitor.cpp:
        * MonitorControl/PacketsReceivedMonitor.cpp:
        * MonitorControl/BytesReceivedMonitor.h:
        * MonitorControl/PacketsReceivedMonitor.h:

          New files, adding the 'received' counterparts
          to the bytes sent and packets sent monitors.

        * MonitorControl/PacketsSentMonitor.h:
        * MonitorControl/LowLevelMonitors_T.cpp:
        * MonitorControl/MonitorControl.mpc:
        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/MonitorGroup_T.h:
        * MonitorControl/PacketsSentMonitor.cpp:
        * MonitorControl/MonitorControl_macros.h:
        * MonitorControl/LowLevelMonitors_T.h:
        * MonitorControl/MonitorGroup_T.cpp:
        * MonitorControl/MonitorControl.h:
        * MonitorControl/examples/MC_Test_Utilities.h:
        * MonitorControl/examples/Constraint/constraint.cp
        * MonitorControl/examples/MC_Test_Utilities.cpp:

          Changes corresponding to the new monitors added
          above. Also changed the Constraint example to
          use bytes received instead of bytes sent.

Mon Mar  3 18:26:01 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_Monitor.h:
        * ace/Monitor_Base.h:
        * ace/Message_Queue_Monitor.cpp:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/MonitorPoint_T.h:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/MonitorPoint_T.cpp:

          Added control_action() method to attach an application-defined
          action to a monitor point.

        * MonitorControl/Constraint_Visitor.h:
        * MonitorControl/Constraint_Visitor.cpp:

          Implemented the methods necessary to evaluate a constraint.

        * MonitorControl/examples/Constraint/constraint.cpp:

          Added code to define a control action and attach it to the
          BytesSent monitor point, triggered each time the monitor
          point is updated and its associated constraint is satisfied.

Fri Feb 29 22:54:31 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * bin/MakeProjectCreator/config/ace_mc.mpb:

          New file, base project for anything using the
          MonitorControl library.

        * MonitorControl/examples/Bytes_Sent/Bytes_Sent.mpc:
        * MonitorControl/examples/Message_Queue_Size/Message_Queue_Size.mpc:
        * MonitorControl/examples/CPU_Load/CPU_Load.mpc:
        * MonitorControl/examples/Num_Threads/Num_Threads.mpc:
        * MonitorControl/examples/Memory_Usage/Memory_Usage.mpc:
        * MonitorControl/examples/Group/Group.mpc:

          Added the new base project to all the example MPC files.

        * MonitorControl/examples/Constraint/Constraint.mpc:
        * MonitorControl/examples/Constraint/Constraint.cpp:

          New files, containing a new example to test constraint
          creation and evaluation as it is implemented.

        * ace/Message_Queue_Monitor.h:
        * ace/Monitor_Base.h:
        * ace/Message_Queue_Monitor.cpp:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/MonitorPoint_T.h:
        * MonitorControl/MonitorGroup_T.h:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/MonitorPoint_T.cpp:
        * MonitorControl/MonitorGroup_T.cpp:

          - Changed the signature of the constraint() method,
            which adds a constraint to a monitor point, to
            accept a const char* instead of an ETCL_Constraint*.
            Existing code in the Notification Service does it
            this way, and it is more convenient for the
            'application' to just pass in a constraint string,
            and let the infrastructure create the constraint
            class under the hood.

          - Implemented the constraint() method for all monitor
            points except Message_Queue_Monitor (which will
            take some more thought since it would create a
            circular dependency between ACE and ACE_ETCL).

Fri Feb 29 21:38:54 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * bin/MakeProjectCreator/config/ace_etcl.mpb:

          New file, overlooked in the checkin

          Fri Feb 29 21:28:55 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

          which is a base project for anything using the ACE ETCL
          library, used now in ACE_ROOT/MonitorControl/MonitorControl.mpc.

Fri Feb 29 21:28:55 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/Constraint_Interpreter.cpp:
        * MonitorControl/Constraint_Visitor.h:
        * MonitorControl/Constraint_Visitor.cpp:
        * MonitorControl/Constraint_Interpreter.h:

          New files, partially implemented 'backend' and 'driver',
          specific to MonitorControl, using the ACE_ETCL 'frontend'
          parser.

        * MonitorControl/MonitorControl.mpc:

          Added new files to the project.

        * MonitorControl/MonitorPoint.cpp(constraint):

          Left a comment in the (unimplemented) method.

Fri Feb 29 18:52:21 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ACE_ETCL/*:

          Renamed this directory ETCL.

        * ETCL/ACE_ETCL.mpc:

          Renamed this file ETCL.mpc. The project name is still
          ACE_ETCL however, since MPC doesn't like even global
          clashes in project names. The library name is unchanged
          as well, to disambiguate it from the TAO ETCL library
          that will be forthcoming.

Thu Feb 28 16:21:52 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/MC_Generic_Registry.h:
        * ace/MC_Generic_Registry.cpp:

          Removed name cache, using iterator over contained hash map
          to compose a list of names for each call to names().

        * MonitorControl/MonitorGroup_T.h:
        * MonitorControl/MonitorGroup_T.cpp:

          Removed class member current_member_, using a temporary
          instead.

        * MonitorControl/examples/MC_Test_Utilities.cpp:

          Evened up indentation of output for all monitor points.

Thu Feb 28 10:42:55 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/Monitor_Base.{h,cpp}:
          Removed not needed exception

Thu Feb 28 10:24:55 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/MonitorGroup.cpp:
        * ace/MonitorGroup_T.cpp:
          Moved template specializations to cpp file to get the group
          example compiling with BCB

Thu Feb 28 09:59:55 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/MonitorControl_Types.h:
          Applied workaround for broken BCB compiler

Thu Feb 28 09:48:55 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * MonitorControl/examples/MC_Test_Utilities.h:
          Added missing include

Thu Feb 28 09:43:55 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/Control_Action_Registry.cpp:
        * ace/Monitor_Point_Registry.cpp:
          Use thread mutex for the singletons

        * ace/MC_Generic_Registry.h:
          Removed old comments, made destructor virtual

        * ace/MonitorControl_Types.h:
          Made destructor virtual

Wed Feb 27 19:41:55 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/MC_Test_Utilities.mpc:

          Fixed typo.

Wed Feb 27 19:38:03 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/MC_Test_Utilities.mpc:

          Added the export header file.

Wed Feb 27 19:32:37 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/MC_Test_Utilities.h:
        * MonitorControl/examples/MC_Test_Utilities_export.h:
        * MonitorControl/examples/MC_Test_Utilities.mpc:
        * MonitorControl/examples/MC_Test_Utilities.cpp:

          New files, the beginnings of a library for code
          common to the MonitorControl tests and examples.

        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp:
        * MonitorControl/examples/Bytes_Sent/Bytes_Sent.mpc:
        * MonitorControl/examples/Message_Queue_Size/Message_Queue_Size.mpc:
        * MonitorControl/examples/Message_Queue_Size/message_queue_size.cpp:
        * MonitorControl/examples/CPU_Load/CPU_Load.mpc:
        * MonitorControl/examples/CPU_Load/cpu_load.cpp:
        * MonitorControl/examples/Num_Threads/Num_Threads.mpc:
        * MonitorControl/examples/Num_Threads/num_threads.cpp:
        * MonitorControl/examples/Memory_Usage/Memory_Usage.mpc:
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp:
        * MonitorControl/examples/Group/Group.mpc:
        * MonitorControl/examples/Group/group.cpp:

          Removed code moved to the new library, and modified the
          MPC files accordingly.

Wed Feb 27 17:55:05 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/MC_Generic_Registry.h:
        * ace/MC_Generic_Registry.cpp:
        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp:
        * MonitorControl/examples/Message_Queue_Size/message_queue_size.cpp:
        * MonitorControl/examples/CPU_Load/cpu_load.cpp:
        * MonitorControl/examples/Num_Threads/num_threads.cpp:
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp:
        * MonitorControl/examples/Group/group.cpp:

          Removed the exception from class MC_Generic_Registry and
          associated try/catch blocks in the examples. The
          existing boolean return value of the registry method
          where the exception was thrown, plus added ACE_ERROR
          macros, provide the diagnostic information instead.

Tue Feb 26 20:48:51 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/Bytes_Sent/svc.conf:
        * MonitorControl/examples/Message_Queue_Size/svc.conf:
        * MonitorControl/examples/CPU_Load/svc.conf:
        * MonitorControl/examples/Num_Threads/svc.conf:
        * MonitorControl/examples/Memory_Usage/svc.conf:
        * MonitorControl/examples/Group/svc.conf:

          Removed these files, not needed after changes
          described below.

        * ace/MC_Admin_Manager.cpp:
        * ace/MC_Admin_Manager.h:

          Added static Initializer () method that processes the service
          directive, starting the MC service.

        * MonitorControl/MonitorControl_macros.h:

          Removed the MC_START_SERVICE macro.

        * MonitorControl/MonitorControl.h:

          Added a static int constant that calls the static
          Initializer() method in MC_Admin_Manager.

        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp:
        * MonitorControl/examples/Message_Queue_Size/message_queue_size.cpp:
        * MonitorControl/examples/CPU_Load/cpu_load.cpp:
        * MonitorControl/examples/Num_Threads/num_threads.cpp:
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp:
        * MonitorControl/examples/Group/group.cpp:

          Removed the use of the MC_START_SERVICE macro. Every
          application must include MonitorControl.h, which contains
          the static integer which, when initialized before main()
          starts, starts the MC service and creates the
          MC_Admin_Manager singleton.

Tue Feb 26 18:33:54 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ACE_ETCL/ACE_ETCL.mpc:
        * ACE_ETCL/ETCL.ll:
        * ACE_ETCL/ETCL.yy:
        * ACE_ETCL/ETCL_Constraint.cpp:
        * ACE_ETCL/ETCL_Constraint.h:
        * ACE_ETCL/ETCL_Constraint.inl:
        * ACE_ETCL/ETCL_Constraint_Visitor.cpp:
        * ACE_ETCL/ETCL_Constraint_Visitor.h:
        * ACE_ETCL/ETCL_include/etcl_export.h:
        * ACE_ETCL/ETCL_include/ETCL_include.h:
        * ACE_ETCL/ETCL_include/ETCL_macros.h:
        * ACE_ETCL/ETCL_Interpreter.cpp:
        * ACE_ETCL/ETCL_Interpreter.h:
        * ACE_ETCL/ETCL_l.cpp:
        * ACE_ETCL/ETCL_y.cpp:
        * ACE_ETCL/ETCL_y.h:

          New files, to build a subset of the
          Extended Trader constraint Language (ETCL)
          that uses no CORBA types except predefined
          ones, which are also defined as typedefs
          in ACE. This library will be used by the
          MonitorControl library to define and
          evaluate constraints.

        * docs/svn/config:

          Added file extensions .ll, .yy and .conf.

Tue Feb 26 18:21:23 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/MC_Generic_Registry.h:
        * ace/MC_Generic_Registry.cpp:

          Added name cache, accessor, and code to update the cache
          each time something is added to the registry.

        * MonitorControl/examples/Group/group.cpp:

          Added a quick test of the name cache feature to this
          example.

Tue Feb 26 16:35:38 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MonitorGroup.h:

          Removed this file, instead of defining a template
          specialization of the entire class, defined a
          template specialization of just the needed
          methods. These methods had to be removed from
          MonitorGroup_T.cpp and specialized in
          MonitorGroup.cpp for both TRUE and FALSE
          template arguments.

        * MonitorControl/examples/Group/svc.conf:
        * MonitorControl/examples/Group/Group.mpc:
        * MonitorControl/examples/Group/group.cpp:

          New files, comprising an example to demonstrate
          the functionality of monitor groups.

        * MonitorControl/WindowsMultiInstanceMonitor.cpp:

          Plugged memory leak.

        * MonitorControl/MonitorGroup_T.h:
        * MonitorControl/MonitorGroup.cpp:
        * MonitorControl/MonitorGroup_T.cpp:

          Changes related to the removed file described
          above.

        * MonitorControl/AutoUpdateStarter.cpp:

          Replaced #include which was pulling in all the
          monitor point headers unnecessarily.

        * MonitorControl/MonitorControl.h:

          Replaced #include of removed file MonitorGroup.h
          with #include of MonitorGroup_T.h.

        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp:

          Changed identifiers, cut and pasted from another
          example, to be relevant to this example.

Mon Feb 25 13:42:07 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Monitor_Base.h:

          Removed pure virtual group-related methods. Overlooked in
          this checkin:

          Fri Feb 22 000:03:39 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

Fri Feb 22 21:55:07 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/WindowsMultiInstanceMonitor.cpp:
        * MonitorControl/WindowsMultiInstanceMonitor.h:

          New files, a specialized Windows monitor mixin class for
          cases where the Performance Data Helper (PDH) object of
          interest to the monitor has more than one 'instance', for
          example a Network Interface object has an instance for each
          network card.

        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/WindowsMonitor.h:
        * MonitorControl/BytesSentMonitor.h:
        * MonitorControl/MonitorControl.mpc:
        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp:

          Changes corresponding to the integration of the new class
          described above.

Fri Feb 22 000:03:39 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MonitorGroup.cpp:
        * MonitorControl/MonitorGroup.h:
        * MonitorControl/MonitorGroup_T.cpp:
        * MonitorControl/MonitorGroup_T.h:

          New files, defining a monitor group class.

        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/MemoryUsageMonitor.h:
        * MonitorControl/MonitorPoint_T.cpp:
        * MonitorControl/MonitorControl.mpc:
        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/MonitorPoint_T.h:
        * MonitorControl/PacketsSentMonitor.cpp:

          Removed previous monitor group-related methods,
          since they have been replaced by the new class
          above. Also made minor changes to the
          BYtesSentMonitor and PacketsSentMonitor classes.

        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp:

          Changed the Worker class activation to spawn only
          a single thread.

Thu Feb 21 14:23:55 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * MonitorControl/BytesSentMonitor.cpp
        * MonitorControl/BytesSentMonitor.h
        * MonitorControl/PacketsSentMonitor.cpp
        * MonitorControl/PacketsSentMonitor.h
          Add windows part, pdh seems to work but we get 0, need to look at this

        * MonitorControl/examples/Bytes_Sent
        * MonitorControl/examples/Bytes_Sent/bytes_sent.cpp
        * MonitorControl/examples/Bytes_Sent/Bytes_Sent.mpc
        * MonitorControl/examples/Bytes_Sent/svc.conf
          New example

        * MonitorControl/examples/CPU_Load/cpu_load.cpp
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp
        * MonitorControl/examples/Message_Queue_Size/message_queue_size.cpp
        * MonitorControl/examples/Num_Threads/num_threads.cpp
          Check if we get a monitor back

        * MonitorControl/MonitorControl.mpc:
          Added WindowsMonitor

        * MonitorControl/NumThreadsMonitor.cpp:
          Zap spaces

        * MonitorControl/WindowsMonitor.cpp:
          When adding the counter fails say which one fails.

Wed Feb 20 20:35:55 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/CPULoadMonitor.cpp:

          Refactored code common to Linux and Solaris implementations.

        * MonitorControl/examples/Num_Threads/num_threads.cpp:

          Minor change to output message.

        * MonitorControl/NumThreadsMonitor.cpp:
        * MonitorControl/NumThreadsMonitor.h:

          Implemented this monitor for Linux.

Wed Feb 20 19:55:57 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/MemoryUsageMonitor.h:

          Implemented Linux version of this monitor.

Wed Feb 20 18:57:08 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/WindowsMonitor.cpp:
        * MonitorControl/WindowsMonitor.h:

          New files, factored out code common to Windows
          monitor implementations into a mixin class.

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/CPULoadMonitor.h:
        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/MemoryUsageMonitor.h:
        * MonitorControl/NumThreadsMonitor.cpp:
        * MonitorControl/NumThreadsMonitor.h:

          Factored the common Windows code out of thes monitors.

        * MonitorControl/examples/Num_Threads/num_threads.cpp:
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp:

          Minor changes to comments.

Wed Feb 20 17:33:22 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/NumThreadsMonitor.cpp:
        * MonitorControl/NumThreadsMonitor.h:
        * MonitorControl/MonitorControl.h:

          Implementation of Windows version of monitor for the total
          number of threads in the system.

        * MonitorControl/examples/Num_Threads/svc.conf:
        * MonitorControl/examples/Num_Threads/Num_Threads.mpc:
        * MonitorControl/examples/Num_Threads/num_threads.cpp:

          New files, corresponding example for the above monitor
          implementation.

Tue Feb 19 21:10:59 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/MemoryUsageMonitor.h:
        * MonitorControl/MonitorControl.h:

          Implemented the update() method for Windows and added the
          header file to the #includes of MonitorControl.h so it
          can be pulled into an application.

        * MonitorControl/examples/Memory_Usage/svc.conf:
        * MonitorControl/examples/Memory_Usage/Memory_Usage.mpc:
        * MonitorControl/examples/Memory_Usage/memory_usage.cpp:

          New files, implementing an example for the memory usage
          monitor.

Tue Feb 19 18:51:18 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/Message_Queue_Size/svc.conf:

          Copied from CPU_Load/svc.conf, which had to be added to the repo
          before it could be copied by SubVersion (along with its
          all-important properties).

Tue Feb 19 18:26:21 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/svc.conf:
        * MonitorControl/examples/main.cpp:
        * MonitorControl/examples/simple.mpc:

          Removed these files, and turned them into two separate
          examples, each in its own directory, represented by the
          new files below.

        * MonitorControl/examples/Message_Queue_Size:
        * MonitorControl/examples/Message_Queue_Size/Message_Queue_Size.mpc:
        * MonitorControl/examples/Message_Queue_Size/message_queue_size.cpp:
        * MonitorControl/examples/CPU_Load:
        * MonitorControl/examples/CPU_Load/svc.conf:
        * MonitorControl/examples/CPU_Load/CPU_Load.mpc:
        * MonitorControl/examples/CPU_Load/cpu_load.cpp:

          New files, resulting from the separation of the original
          examples files, removed above, into 2 examples, each
          dedicated to one particular monitor point.

Tue Feb 19 16:41:42 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/MC_Admin_Manager.cpp:
        * ace/Monitor_Point_Registry.cpp:
        * ace/Control_Action_Registry.cpp:
        * ace/MonitorControl_Types.h:
        * ace/MC_Generic_Registry.h:
        * ace/MC_Generic_Registry.cpp:
        * ace/Monitor_Point_Registry.h:
        * ace/Control_Action_Registry.h:
        * ace/MC_Admin_Manager.h:
        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/CPULoadMonitor.h:
        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/LowLevelMonitors_T.cpp:
        * MonitorControl/NumThreadsMonitor.cpp:
        * MonitorControl/MonitorPoint_T.cpp:
        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/MonitorPoint_T.h:
        * MonitorControl/PacketsSentMonitor.cpp:

          Removed unnecessary type declarations and
          class methods/members/arguments. All the
          removed items were originally copied
          wholesale from the original OCI implementation
          in the TAO Notification Service, without
          knowing at that early date if they would be
          needed or not.

Mon Feb 18 17:04:56 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * include/makeinclude/platform_sunos5_common.GNU:

          Added a check for the value of 'kstat' which is set to 0
          by default. If set to 1 in platform_macros.GNU, then we
          link the kstat system lib and add -DACE_HAS_KSTAT to the
          command line.

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/CPULoadMonitor.h:

          Replace the 'sun' argument in the guard for the Solaris
          raw monitoring code with the above flag ACE_HAS_KSTAT, which
          will be easier to maintain.

Fri Feb 15 20:30:49 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/main.cpp:

          Replaced ACE_OS::fopen() as the CPU busy-work action with
          ACE::gcd().

Fri Feb 15 19:33:10 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/CPULoadMonitor.cpp:

          Fixed typos in the Solaris-specific implementation.

Fri Feb 15 18:43:08 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/CPULoadMonitor.h:

          First cut at implementation for Solaris.

        * MonitorControl/PacketsSentMonitor.h:
        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/MemoryUsageMonitor.h:
        * MonitorControl/NumThreadsMonitor.cpp:
        * MonitorControl/NumThreadsMonitor.h:
        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/PacketsSentMonitor.cpp:
        * MonitorControl/BytesSentMonitor.h:

          Added default constructors, similar to what exists in
          class CPULoadMonitor.

Thu Feb 14 21:10:57 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/CPULoadMonitor.h:
        * MonitorControl/examples/main.cpp:

          Fixed bugs in Linux implementation of CPU load monitor, and
          changed the busy loop in the example from an empty FOR loop
          to a loop that tries to open a non-existent file repeatedly.
          The empty loop was getting optimized away by gcc.

Tue Feb 12 21:52:50 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/CPULoadMonitor.h:

          Numerous changes to Linux-specific implementation of update().
          Also moved receive(double) to base class, to avoid a
          warning from the Borland compiler.

        * MonitorControl/MonitorPoint.cpp:

          Replaced empty implementation of receive(double) with the
          real version from CPULoadMonitor, as described above.

Tue Feb 12 19:24:56 UTC 2008  Johnny WIllemsen  <jwillemsen@remedy.nl>

        * MonitorControl/CPULoadMonitor.cpp:
          Use regular guard

Tue Feb 12 18:56:56 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/CPULoadMonitor.{h,cpp}:

          Added implementation for Linux, plus includes and class
          members for Solaris implementation.

Fri Feb  8 19:36:33 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/examples/main.cpp:

          Added C++ stream code to format the output of the results of
          monitor queries, and added comments.

Thu Feb  7 20:55:08 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_T.cpp:
        * ace/Message_Queue_T.h:

          Moved code to register the message queue's
          monitor from the constructor to a new
          method, to make it controlled by the application
          instead of automatic. At least one message
          queue is created under the hood, and we don't
          want any message queue monitors registered
          except those from message queues created by
          the application. In the future, when a mechanism
          is in place to specify the name of the message
          queue monitor, the registration logic may change
          again.

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/MonitorPoint.h:

          Added some missing constructors so the string name
          gets initialized properly.

        * MonitorControl/LowLevelMonitors_T.cpp:

          Fixed typos in template class constructor parameters,
          not caught by the compiler until the class is
          instantiated.

        * MonitorControl/examples/svc.conf:

          Changed file to reflect the fact that the
          MonitorControl service define is now in ACE.

        * MonitorControl/examples/main.cpp:

          Changed example to create a CPU load monitor (periodically
          updated automatically) and an ACE message queue (with a
          monitor that updates proactively whenever the size of the
          queue changes) in one thread, and a "worker" that queries
          the values of these monitors periodically in another
          thread.

Thu Feb  7 16:26:31 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_Monitor.h:
        * ace/Monitor_Base.h:
        * ace/Message_Queue_Monitor.cpp:
        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/CPULoadMonitor.h:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/MonitorPoint_T.cpp:
        * MonitorControl/MonitorPoint_T.h:

          In the declarations and implementations of
          the receive() method, overloaded to take
          a single arg of various numeric types,
          removed the const qualifier from the arg.
          Thanks to Johnny Willemsen
          <jwillemsen at rememdy dot nl> for pointing
          that the qualifier isn't needed and could
          cause problems with the Intel compiler.

Thu Feb  7 13:23:15 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * ace/Control_Action_Registry.h:
        * ace/Monitor_Point_Registry.h:
          Explicitly make the destructor virtual

        * ace/MC_Generic_Registry.cpp:
        * ace/Monitor_Base.cpp
          Use regular guards

Wed Feb  6 21:13:15 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_Monitor.h:
        * ace/MonitorControl_Types.h:
        * ace/Monitor_Base.h:
        * ace/Message_Queue_Monitor.cpp:
        * ace/MonitorControl_Types.cpp:
        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/MonitorPoint_T.cpp:
        * MonitorControl/MonitorPoint_T.h:

          - Renamed some data types and members to be
            more intuitive.

          - Added a default constructor for struct Data
            so its members will have reasonable values
            if by chance they are accessed before having
            been set by a call to receive() on the containing
            monitor instance.

          - Removed the overload of receive() that takes
            a list of names, since it's doubtful it will
            be needed.

Wed Feb  6 19:28:25 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_T.cpp:
        * ace/MC_Admin.h:
        * ace/Monitor_Point_Registry.cpp:
        * ace/Message_Queue_T.h:
        * ace/Monitor_Base.cpp:
        * ace/MonitorControl_Types.h:
        * ace/Monitor_Base.h:
        * ace/Message_Queue_Monitor.cpp:
        * ace/MC_Generic_Registry.h:
        * ace/MC_Generic_Registry.cpp:
        * ace/Monitor_Point_Registry.h:
        * ace/Control_Action_Registry.h:
        * ace/MC_Admin.cpp:
        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/MonitorControl_macros.h:
        * MonitorControl/CPULoadMonitor.h:

          - Added mutex to class Monitor_Base, for
            use when storing/retrieving data.

          - Added retrieve() method to class
            Monitor_Base, since it will be common
            to all concrete subclasses.

          - Modifed overloaded receive() methods in
            class Message_Queue_Monitor to simply
            store the passed data in the class member.

          - Modified class CPULoadMonitor's update()
            method to call receive() to store the data
            obtained from the system calls.

          - Added mechanism to get a reference to a
            named monitor point instance from the
            Admin class, which looks it up in the
            registry.

          - Modifed ACE_Message_Queue to add its monitor
            to the registry, if the ACE build enables
            monitors. We plan to test only a single
            message queue for now, but eventually some
            way will have to be implemented to give the
            monitor of each message queue instance a
            unique name.

Tue Feb  5 19:01:17 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/ControlActionRegistry.cpp:
        * MonitorControl/GenericRegistry.h:
        * MonitorControl/ControlAction.h:
        * MonitorControl/MonitorControl.cpp:
        * MonitorControl/Admin.h:
        * MonitorControl/MonitorPointRegistry.h:
        * MonitorControl/GenericRegistry.cpp:
        * MonitorControl/ControlActionRegistry.h:
        * MonitorControl/ControlAction.cpp:
        * MonitorControl/Admin.cpp:
        * MonitorControl/MonitorPointRegistry.cpp:

          Files moved from ACE_ROOT/MonitorControl
          to ACE_ROOT/ace and renamed. The registry
          admin and service object classes needed
          to be in ACE to avoid circular dependencies,
          and were renamed according to traditional
          ACE style.

        * ace/Control_Action.cpp:
        * ace/Control_Action.h:
        * ace/MC_Admin.h:
        * ace/MC_Admin_Manager.cpp:
        * ace/Monitor_Point_Registry.cpp:
        * ace/Control_Action_Registry.cpp:
        * ace/MC_Generic_Registry.h:
        * ace/MC_Generic_Registry.cpp:
        * ace/Monitor_Point_Registry.h:
        * ace/Control_Action_Registry.h:
        * ace/MC_Admin_Manager.h:
        * ace/MC_Admin.cpp:

          New files, moved from ACE_ROOT/MonitorControl
          and renamed.

        * ace/ace.mpc:
        * ace/Monitor_Base.h:
        * ace/Message_Queue_Monitor.cpp:
        * ace/Message_Queue_Monitor.h:
        * ace/Message_Queue_T.cpp:
        * MonitorControl/AutoUpdateStarter.cpp:
        * MonitorControl/MonitorControl.h:
        * MonitorControl/examples/main.cpp:
        * MonitorControl/MonitorControl.mpc:

          Changes to existing ACE and MonitorControl
          files consistent with the renaming of the
          contents of the moved files above.

Mon Feb  4 14:07:27 UTC 2008  Johnny Willemsen  <jwillemsen@remedy.nl>

        * MonitorControl/LowLevelMonitors_T.h:
          Fixed compile problems with BCB

Fri Feb  1 18:48:27 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * ace/Message_Queue_T.cpp:
        * MonitorControl/examples/main.cpp:

          Added call to monitor when the message queue is flushed, if
          the size actually changes as a result of the flush. Also
          added this case to the example.

Fri Feb  1 18:12:28 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/Datatypes.h:
        * MonitorControl/Datatypes.cpp:

          Files moved to ACE_ROOT/ace and
          renamed as MonitorControl_Types.{h,cpp}.
          The struct containing the static data
          types has been renamed similarly. The
          Generic class has been renamed MC_Generic.

        * MonitorControl/Statistic.h:
        * MonitorControl/Statistic.cpp:

          Files moved to ACE_ROOT/ace and
          renamed as Monitor_Base.{h,cpp}.
          Class Statistic has been renamed
          similarly.

        * ace/Monitor_Base.h:
        * ace/Monitor_Base.cpp:
        * ace/MonitorControl_Types.h:
        * ace/MonitorControl_Types.cpp:

          Files moved to ACE_ROOT/ace from
          ACE_ROOT/MonitorControl, with files
          and contained types renamed as described
          above.

        * ace/Message_Queue_Monitor.cpp:
        * ace/Message_Queue_Monitor.h:

          New files, containing a class of the same
          name that monitors the size of the
          ACE_Message_Queue that it is a member of.
          The size is output proactively whenever
          the size of the message queue changes.
          To avoid overhead when monitoring isn't
          desired, creation of and calls to the
          member class are guard with a check for
          the #define of ENABLE_ACE_MONITORS.

        * ace/Message_Queue_T.cpp:
        * ace/Message_Queue_T.h:
        * ace/ace.mpc:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/GenericRegistry.h:
        * MonitorControl/ControlAction.h:
        * MonitorControl/MonitorControl.mpc
        * MonitorControl/MonitorPoint_T.h:
        * MonitorControl/Admin.h:
        * MonitorControl/MonitorPointRegistry.h:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/GenericRegistry.cpp:
        * MonitorControl/ControlAction.cpp:
        * MonitorControl/MonitorPoint_T.cpp:
        * MonitorControl/Admin.cpp:
        * MonitorControl/MonitorPointRegistry.cpp:
        * MonitorControl/examples/main.cpp:
        * MonitorControl/examples/simple.mpc:

          Changes to make the rest of ACE and the
          MonitorControl lib consistent with the
          changes described above. Also added
          code to the example which creates a
          message queue, adds 5 message blocks
          to it one by one, then removes them
          one by one. For testing purposes, the
          new size and a timestamp are output to
          stdout.

Wed Jan 30 20:57:02 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/GenericRegistry.h:
        * MonitorControl/GenericRegistry.cpp:

          Changed the type of mutex used when writing to the registry
          from an RW mutex to a regular, more lightweight
          ACE_Thread_Mutex.

Tue Jan 29 19:42:12 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/MonitorControl.mpc:
        * MonitorControl/CPULoadMonitor.h:
        * MonitorControl/examples/main.cpp:

          Implemented CPU load monitor for Windows. Includes and code
          are guarded so builds will succeed on other platforms, but
          the monitor will in those cases be a no-op. This implementation
          uses the Windows Performance Data Helper (PDH) API and links
          pdh.lib (which was added to the MPC file). In the future, to
          support more Windows version or to obtain better performance,
          the implementation may change to access the Windows registry
          directly.

Mon Jan 28 20:14:12 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/PacketsSentMonitor.h:
        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/Statistic.h:
        * MonitorControl/NumThreadsMonitor.cpp:
        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/PacketsSentMonitor.cpp:
        * MonitorControl/CPULoadMonitor.h:
        * MonitorControl/MemoryUsageMonitor.h:
        * MonitorControl/NumThreadsMonitor.h:
        * MonitorControl/Admin.cpp:
        * MonitorControl/BytesSentMonitor.h:

          Changed the name of the calculate() method to update(). The
          new name is more sensible, since it was decided not to maintain
          any statistics, such as min, max or avg, in the monitor point
          classes or in the registry. Thanks to Johnny Willemsen
          <jwillemsen at remedy dot nl> for the suggestion.

Mon Jan 28 20:06:41 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/Admin.h:
        * MonitorControl/MonitorControl_macros.h:
        * MonitorControl/AutoUpdateStarter.cpp:
        * MonitorControl/Admin.cpp:
        * MonitorControl/examples/main.cpp:

          Added capability for the application to replace the MonitorControl
          service's default reactor with one of its own creation, and code
          to the example to test this capability.

Thu Jan 24 17:39:45 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/AutoUpdateStarter.h:

          Changed inheritance of AutoUpdateStarter from
          ACE_Task<ACE_NULL_SYNCH> to ACE_Task_Base, which is sufficient
          and more lightweight. Thanks to Johnny Willemsen
          <jwillemsen at remedy dot nl> for the suggestion.

Wed Jan 23 19:11:09 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/AutoUpdateStarter.cpp:
        * MonitorControl/AutoUpdateStarter.h:
        * MonitorControl/MonitorControl.mpc:

          New files, containing a struct that inherits from ACE_Task
          and is used to start the reactor's event loop in a new
          thread. Also updated the MPC file accordingly.

        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/GenericRegistry.h:
        * MonitorControl/MonitorPoint_T.h:
        * MonitorControl/Admin.h:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/MonitorControl_macros.h:
        * MonitorControl/GenericRegistry.cpp:
        * MonitorControl/MonitorPoint_T.cpp:
        * MonitorControl/Admin.cpp:
        * MonitorControl/MonitorControl.h:
        * MonitorControl/examples/main.cpp:

          - Added capability to get a given monitor point updated
            periodically, by registering an associated timer with
            the reactor.

          - Added convenient macros for the ACE calls to
            - read the svc.conf file that starts the dynamic service
            - start up the reactor's event loop
            - stop the reactor's event loop and wait for its
              thread to join the application thread

Tue Jan 22 20:49:04 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MonitorControl.vsd:

          New file, Visio diagram with 3 panels:
          - UML class diagram of MonitorControl library
          - UML sequence diagram showing MonitorControl behavior
          - UML sequence diagram showing lifecycles of MC entities

Mon Jan 21 19:36:33 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MonitorPoint.h:
        * MonitorControl/GenericRegistry.h:
        * MonitorControl/MonitorControl.mpc:
        * MonitorControl/Admin.h:
        * MonitorControl/MonitorControl_macros.h:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/GenericRegistry.cpp:
        * MonitorControl/MonitorPoint_T.cpp:
        * MonitorControl/Admin.cpp:
        * MonitorControl/MonitorControl.h:

          - Added typedefs for enabled and disabled versions of
            the low level monitors. Which version is seen by the
            compiler is controlled by a proprocessor flag.

          - Implemented function that adds a monitor point to
            the registry.

        * MonitorControl/examples/main.cpp:
        * MonitorControl/examples/simple.mpc:

          - Added code to test monitor point instantiation and
            addition to the registry.

          - Added code to catch MapError exception.

          - Added preprocessor flag for enabling monitors to the
            MPC file.

          - Tested example for correct behavior when
            - Adding a single monitor correctly
            - Adding the same monitor a second time
            - Passing a null monitor pointer to the registry and
              catching the resulting MapError exception

          - Purify checks for memory leaks for all the above
            scenarios

Thu Jan 17 21:33:17 UTC 2008  Jeff Parsons <j.parsons@vanderbilt.edu>

        * MonitorControl/MonitorControl_export.h:
        * MonitorControl/CPULoadMonitor.cpp:
        * MonitorControl/PacketsSentMonitor.h:
        * MonitorControl/Datatypes.h:
        * MonitorControl/MemoryUsageMonitor.cpp:
        * MonitorControl/MonitorPoint.h:
        * MonitorControl/LowLevelMonitors_T.cpp:
        * MonitorControl/ControlActionRegistry.cpp:
        * MonitorControl/GenericRegistry.h:
        * MonitorControl/Statistic.h:
        * MonitorControl/NumThreadsMonitor.cpp:
        * MonitorControl/ControlAction.h:
        * MonitorControl/MonitorControl.mpc:
        * MonitorControl/MonitorControl.cpp:
        * MonitorControl/BytesSentMonitor.cpp:
        * MonitorControl/MonitorPoint_T.h:
        * MonitorControl/PacketsSentMonitor.cpp:
        * MonitorControl/Admin.h:
        * MonitorControl/Datatypes.cpp:
        * MonitorControl/MonitorPointRegistry.h:
        * MonitorControl/MonitorControl_macros.h:
        * MonitorControl/MonitorPoint.cpp:
        * MonitorControl/CPULoadMonitor.h:
        * MonitorControl/GenericRegistry.cpp:
        * MonitorControl/Statistic.cpp:
        * MonitorControl/MemoryUsageMonitor.h:
        * MonitorControl/ControlActionRegistry.h:
        * MonitorControl/LowLevelMonitors_T.h:
        * MonitorControl/ControlAction.cpp:
        * MonitorControl/MonitorPoint_T.cpp:
        * MonitorControl/NumThreadsMonitor.h:
        * MonitorControl/Admin.cpp:
        * MonitorControl/MonitorPointRegistry.cpp:
        * MonitorControl/MonitorControl.h:
        * MonitorControl/BytesSentMonitor.h:

          New files, beginning the implementation of monitor and
          control features that can be added to applications that
          use ACE.

        * MonitorControl/examples/svc.conf:
        * MonitorControl/examples/main.cpp:
        * MonitorControl/examples/simple.mpc:

          Simple example executable, used at present for testing
          the bits of the MonitorControl lib above as they are
          added.
