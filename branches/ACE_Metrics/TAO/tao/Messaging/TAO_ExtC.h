// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef _TAO_IDL_ORIG_TAO_EXTC_H_
#define _TAO_IDL_ORIG_TAO_EXTC_H_
#include "ace/pre.h"
#include "tao/orbconf.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PolicyC.h"
#include "tao/TimeBaseC.h"
#include "messaging_export.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Messaging_Export

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO TAO_Messaging_Export
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

TAO_NAMESPACE  TAO
{
  TAO_NAMESPACE_STORAGE_CLASS const CORBA::ULong CONNECTION_TIMEOUT_POLICY_TYPE;


#if !defined (_TAO_CONNECTIONTIMEOUTPOLICY___PTR_CH_)
#define _TAO_CONNECTIONTIMEOUTPOLICY___PTR_CH_

  class ConnectionTimeoutPolicy;
  typedef ConnectionTimeoutPolicy *ConnectionTimeoutPolicy_ptr;

#endif /* end #if !defined */


#if !defined (_TAO_CONNECTIONTIMEOUTPOLICY___VAR_CH_)
#define _TAO_CONNECTIONTIMEOUTPOLICY___VAR_CH_

  class TAO_Messaging_Export ConnectionTimeoutPolicy_var : public TAO_Base_var
  {
  public:
    ConnectionTimeoutPolicy_var (void); // default constructor
    ConnectionTimeoutPolicy_var (ConnectionTimeoutPolicy_ptr p) : ptr_ (p) {}
    ConnectionTimeoutPolicy_var (const ConnectionTimeoutPolicy_var &); // copy constructor
    ~ConnectionTimeoutPolicy_var (void); // destructor

    ConnectionTimeoutPolicy_var &operator= (ConnectionTimeoutPolicy_ptr);
    ConnectionTimeoutPolicy_var &operator= (const ConnectionTimeoutPolicy_var &);
    ConnectionTimeoutPolicy_ptr operator-> (void) const;

    operator const ConnectionTimeoutPolicy_ptr &() const;
    operator ConnectionTimeoutPolicy_ptr &();
    // in, inout, out, _retn
    ConnectionTimeoutPolicy_ptr in (void) const;
    ConnectionTimeoutPolicy_ptr &inout (void);
    ConnectionTimeoutPolicy_ptr &out (void);
    ConnectionTimeoutPolicy_ptr _retn (void);
    ConnectionTimeoutPolicy_ptr ptr (void) const;

    // Hooks used by template sequence and object manager classes
    // for non-defined forward declared interfaces.
    static ConnectionTimeoutPolicy_ptr tao_duplicate (ConnectionTimeoutPolicy_ptr);
    static void tao_release (ConnectionTimeoutPolicy_ptr);
    static ConnectionTimeoutPolicy_ptr tao_nil (void);
    static ConnectionTimeoutPolicy_ptr tao_narrow (
        CORBA::Object *
        ACE_ENV_ARG_DECL_NOT_USED
      );
    static CORBA::Object * tao_upcast (void *);

  private:
    ConnectionTimeoutPolicy_ptr ptr_;
    // Unimplemented - prevents widening assignment.
    ConnectionTimeoutPolicy_var (const TAO_Base_var &rhs);
    ConnectionTimeoutPolicy_var &operator= (const TAO_Base_var &rhs);
  };


#endif /* end #if !defined */


#if !defined (_TAO_CONNECTIONTIMEOUTPOLICY___OUT_CH_)
#define _TAO_CONNECTIONTIMEOUTPOLICY___OUT_CH_

  class TAO_Messaging_Export ConnectionTimeoutPolicy_out
  {
  public:
    ConnectionTimeoutPolicy_out (ConnectionTimeoutPolicy_ptr &);
    ConnectionTimeoutPolicy_out (ConnectionTimeoutPolicy_var &);
    ConnectionTimeoutPolicy_out (const ConnectionTimeoutPolicy_out &);
    ConnectionTimeoutPolicy_out &operator= (const ConnectionTimeoutPolicy_out &);
    ConnectionTimeoutPolicy_out &operator= (const ConnectionTimeoutPolicy_var &);
    ConnectionTimeoutPolicy_out &operator= (ConnectionTimeoutPolicy_ptr);
    operator ConnectionTimeoutPolicy_ptr &();
    ConnectionTimeoutPolicy_ptr &ptr (void);
    ConnectionTimeoutPolicy_ptr operator-> (void);

  private:
    ConnectionTimeoutPolicy_ptr &ptr_;
  };


#endif /* end #if !defined */

  // *************************************************************
  // TAO::ConnectionTimeoutPolicy
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:106
  // *************************************************************


#if !defined (_TAO_CONNECTIONTIMEOUTPOLICY_CH_)
#define _TAO_CONNECTIONTIMEOUTPOLICY_CH_

  class TAO_Messaging_Export ConnectionTimeoutPolicy
    : public virtual CORBA::Policy
  {
  public:
  #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
    typedef ConnectionTimeoutPolicy_ptr _ptr_type;
    typedef ConnectionTimeoutPolicy_var _var_type;
  #endif /* ! __GNUC__ || g++ >= 2.8 */

    static int _tao_class_id;

    // The static operations.
    static ConnectionTimeoutPolicy_ptr _duplicate (ConnectionTimeoutPolicy_ptr obj);

    static ConnectionTimeoutPolicy_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ConnectionTimeoutPolicy_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ConnectionTimeoutPolicy_ptr _nil (void)
      {
        return (ConnectionTimeoutPolicy_ptr)0;
      }

    static void _tao_any_destructor (void*);

    virtual TimeBase::TimeT relative_expiry (

        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual void *_tao_QueryInterface (ptr_arith_t type);

    virtual const char* _interface_repository_id (void) const;

  protected:
    ConnectionTimeoutPolicy (void);

    virtual ~ConnectionTimeoutPolicy (void);

  private:
    ConnectionTimeoutPolicy (const ConnectionTimeoutPolicy &);
    void operator= (const ConnectionTimeoutPolicy &);
  };


#endif /* end #if !defined */

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ConnectionTimeoutPolicy;


}
TAO_NAMESPACE_CLOSE // module TAO

// Any operators for interface TAO::ConnectionTimeoutPolicy
TAO_Messaging_Export void operator<<= (CORBA::Any &, TAO::ConnectionTimeoutPolicy_ptr); // copying
TAO_Messaging_Export void operator<<= (CORBA::Any &, TAO::ConnectionTimeoutPolicy_ptr *); // non-copying
TAO_Messaging_Export CORBA::Boolean operator>>= (const CORBA::Any &, TAO::ConnectionTimeoutPolicy_ptr &);

#ifndef __ACE_INLINE__


#endif /* __ACE_INLINE__ */


#if defined (__ACE_INLINE__)
#include "TAO_ExtC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include "ace/post.h"
#endif /* ifndef */
