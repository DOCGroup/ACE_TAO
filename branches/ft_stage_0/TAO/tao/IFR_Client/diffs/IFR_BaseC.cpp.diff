--- orig/IFR_BaseC.cpp	Sat Mar 16 01:41:17 2002
+++ IFR_BaseC.cpp	Fri Mar  8 12:24:01 2002
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -32,301 +32,44 @@
 #endif  /* TAO_HAS_INTERCEPTORS == 1 */
 
 #if defined (__BORLANDC__)
-#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
+#pragma option -w-rvl -w-rch -w-ccc -w-aus
 #endif /* __BORLANDC__ */
 
 #if !defined (__ACE_INLINE__)
 #include "IFR_BaseC.i"
 #endif /* !defined INLINE */
 
-static const CORBA::Long _oc_CORBA_Identifier[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  33,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f4964), 
-  ACE_NTOHL (0x656e7469), 
-  ACE_NTOHL (0x66696572), 
-  ACE_NTOHL (0x3a312e30), 
-  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
-  11,
-  ACE_NTOHL (0x4964656e), 
-  ACE_NTOHL (0x74696669), 
-  ACE_NTOHL (0x65720000),  // name = Identifier
-  CORBA::tk_string, 
-  0U, // string length
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_Identifier (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_Identifier),
-    (char *) &_oc_CORBA_Identifier,
-    0,
-    sizeof (CORBA::Identifier)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_Identifier, &_tc_TAO_tc_CORBA_Identifier)
-TAO_NAMESPACE_END
-
-static const CORBA::Long _oc_CORBA_ScopedName[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  33,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f5363), 
-  ACE_NTOHL (0x6f706564), 
-  ACE_NTOHL (0x4e616d65), 
-  ACE_NTOHL (0x3a312e30), 
-  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/ScopedName:1.0
-  11,
-  ACE_NTOHL (0x53636f70), 
-  ACE_NTOHL (0x65644e61), 
-  ACE_NTOHL (0x6d650000),  // name = ScopedName
-  CORBA::tk_string, 
-  0U, // string length
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_ScopedName (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_ScopedName),
-    (char *) &_oc_CORBA_ScopedName,
-    0,
-    sizeof (CORBA::ScopedName)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ScopedName, &_tc_TAO_tc_CORBA_ScopedName)
-TAO_NAMESPACE_END
-
-static const CORBA::Long _oc_CORBA_RepositoryId[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  35,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f5265), 
-  ACE_NTOHL (0x706f7369), 
-  ACE_NTOHL (0x746f7279), 
-  ACE_NTOHL (0x49643a31), 
-  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
-  13,
-  ACE_NTOHL (0x5265706f), 
-  ACE_NTOHL (0x7369746f), 
-  ACE_NTOHL (0x72794964), 
-  ACE_NTOHL (0x0),  // name = RepositoryId
-  CORBA::tk_string, 
-  0U, // string length
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_RepositoryId (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_RepositoryId),
-    (char *) &_oc_CORBA_RepositoryId,
-    0,
-    sizeof (CORBA::RepositoryId)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_RepositoryId, &_tc_TAO_tc_CORBA_RepositoryId)
-TAO_NAMESPACE_END
-
-static const CORBA::Long _oc_CORBA_DefinitionKind[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  37,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f4465), 
-  ACE_NTOHL (0x66696e69), 
-  ACE_NTOHL (0x74696f6e), 
-  ACE_NTOHL (0x4b696e64), 
-  ACE_NTOHL (0x3a312e30), 
-  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/DefinitionKind:1.0
-  15,
-  ACE_NTOHL (0x44656669), 
-  ACE_NTOHL (0x6e697469), 
-  ACE_NTOHL (0x6f6e4b69), 
-  ACE_NTOHL (0x6e640000),  // name = DefinitionKind
-  26, // member count
-  8,
-  ACE_NTOHL (0x646b5f6e), 
-  ACE_NTOHL (0x6f6e6500),  // name = dk_none
-  7,
-  ACE_NTOHL (0x646b5f61), 
-  ACE_NTOHL (0x6c6c0000),  // name = dk_all
-  13,
-  ACE_NTOHL (0x646b5f41), 
-  ACE_NTOHL (0x74747269), 
-  ACE_NTOHL (0x62757465), 
-  ACE_NTOHL (0x0),  // name = dk_Attribute
-  12,
-  ACE_NTOHL (0x646b5f43), 
-  ACE_NTOHL (0x6f6e7374), 
-  ACE_NTOHL (0x616e7400),  // name = dk_Constant
-  13,
-  ACE_NTOHL (0x646b5f45), 
-  ACE_NTOHL (0x78636570), 
-  ACE_NTOHL (0x74696f6e), 
-  ACE_NTOHL (0x0),  // name = dk_Exception
-  13,
-  ACE_NTOHL (0x646b5f49), 
-  ACE_NTOHL (0x6e746572), 
-  ACE_NTOHL (0x66616365), 
-  ACE_NTOHL (0x0),  // name = dk_Interface
-  10,
-  ACE_NTOHL (0x646b5f4d), 
-  ACE_NTOHL (0x6f64756c), 
-  ACE_NTOHL (0x65000000),  // name = dk_Module
-  13,
-  ACE_NTOHL (0x646b5f4f), 
-  ACE_NTOHL (0x70657261), 
-  ACE_NTOHL (0x74696f6e), 
-  ACE_NTOHL (0x0),  // name = dk_Operation
-  11,
-  ACE_NTOHL (0x646b5f54), 
-  ACE_NTOHL (0x79706564), 
-  ACE_NTOHL (0x65660000),  // name = dk_Typedef
-  9,
-  ACE_NTOHL (0x646b5f41), 
-  ACE_NTOHL (0x6c696173), 
-  ACE_NTOHL (0x0),  // name = dk_Alias
-  10,
-  ACE_NTOHL (0x646b5f53), 
-  ACE_NTOHL (0x74727563), 
-  ACE_NTOHL (0x74000000),  // name = dk_Struct
-  9,
-  ACE_NTOHL (0x646b5f55), 
-  ACE_NTOHL (0x6e696f6e), 
-  ACE_NTOHL (0x0),  // name = dk_Union
-  8,
-  ACE_NTOHL (0x646b5f45), 
-  ACE_NTOHL (0x6e756d00),  // name = dk_Enum
-  13,
-  ACE_NTOHL (0x646b5f50), 
-  ACE_NTOHL (0x72696d69), 
-  ACE_NTOHL (0x74697665), 
-  ACE_NTOHL (0x0),  // name = dk_Primitive
-  10,
-  ACE_NTOHL (0x646b5f53), 
-  ACE_NTOHL (0x7472696e), 
-  ACE_NTOHL (0x67000000),  // name = dk_String
-  12,
-  ACE_NTOHL (0x646b5f53), 
-  ACE_NTOHL (0x65717565), 
-  ACE_NTOHL (0x6e636500),  // name = dk_Sequence
-  9,
-  ACE_NTOHL (0x646b5f41), 
-  ACE_NTOHL (0x72726179), 
-  ACE_NTOHL (0x0),  // name = dk_Array
-  14,
-  ACE_NTOHL (0x646b5f52), 
-  ACE_NTOHL (0x65706f73), 
-  ACE_NTOHL (0x69746f72), 
-  ACE_NTOHL (0x79000000),  // name = dk_Repository
-  11,
-  ACE_NTOHL (0x646b5f57), 
-  ACE_NTOHL (0x73747269), 
-  ACE_NTOHL (0x6e670000),  // name = dk_Wstring
-  9,
-  ACE_NTOHL (0x646b5f46), 
-  ACE_NTOHL (0x69786564), 
-  ACE_NTOHL (0x0),  // name = dk_Fixed
-  9,
-  ACE_NTOHL (0x646b5f56), 
-  ACE_NTOHL (0x616c7565), 
-  ACE_NTOHL (0x0),  // name = dk_Value
-  12,
-  ACE_NTOHL (0x646b5f56), 
-  ACE_NTOHL (0x616c7565), 
-  ACE_NTOHL (0x426f7800),  // name = dk_ValueBox
-  15,
-  ACE_NTOHL (0x646b5f56), 
-  ACE_NTOHL (0x616c7565), 
-  ACE_NTOHL (0x4d656d62), 
-  ACE_NTOHL (0x65720000),  // name = dk_ValueMember
-  10,
-  ACE_NTOHL (0x646b5f4e), 
-  ACE_NTOHL (0x61746976), 
-  ACE_NTOHL (0x65000000),  // name = dk_Native
-  21,
-  ACE_NTOHL (0x646b5f41), 
-  ACE_NTOHL (0x62737472), 
-  ACE_NTOHL (0x61637449), 
-  ACE_NTOHL (0x6e746572), 
-  ACE_NTOHL (0x66616365), 
-  ACE_NTOHL (0x0),  // name = dk_AbstractInterface
-  18,
-  ACE_NTOHL (0x646b5f4c), 
-  ACE_NTOHL (0x6f63616c), 
-  ACE_NTOHL (0x496e7465), 
-  ACE_NTOHL (0x72666163), 
-  ACE_NTOHL (0x65000000),  // name = dk_LocalInterface
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_DefinitionKind (
-    CORBA::tk_enum,
-    sizeof (_oc_CORBA_DefinitionKind),
-    (char *) &_oc_CORBA_DefinitionKind,
-    0,
-    sizeof (CORBA::DefinitionKind)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_DefinitionKind, &_tc_TAO_tc_CORBA_DefinitionKind)
-TAO_NAMESPACE_END
-
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int CORBA::IRObject::_tao_class_id = 0;
-
-CORBA::IRObject_ptr
+CORBA_IRObject_ptr
 tao_CORBA_IRObject_duplicate (
-    CORBA::IRObject_ptr p
+    CORBA_IRObject_ptr p
   )
 {
-  return CORBA::IRObject::_duplicate (p);
+  return CORBA_IRObject::_duplicate (p);
 }
 
 void
 tao_CORBA_IRObject_release (
-    CORBA::IRObject_ptr p
+    CORBA_IRObject_ptr p
   )
 {
   CORBA::release (p);
 }
 
-CORBA::IRObject_ptr
+CORBA_IRObject_ptr
 tao_CORBA_IRObject_nil (
     void
   )
 {
-  return CORBA::IRObject::_nil ();
+  return CORBA_IRObject::_nil ();
 }
 
-CORBA::IRObject_ptr
+CORBA_IRObject_ptr
 tao_CORBA_IRObject_narrow (
     CORBA::Object *p
     ACE_ENV_ARG_DECL
   )
 {
-  return CORBA::IRObject::_narrow (p ACE_ENV_ARG_PARAMETER);
+  return CORBA_IRObject::_narrow (p ACE_ENV_ARG_PARAMETER);
 }
 
 CORBA::Object *
@@ -334,193 +77,191 @@
     void *src
   )
 {
-  CORBA::IRObject **tmp =
-    ACE_static_cast (CORBA::IRObject **, src);
+  CORBA_IRObject **tmp =
+    ACE_static_cast (CORBA_IRObject **, src);
   return *tmp;
 }
 
+int CORBA_IRObject::_tao_class_id = 0;
+
 // *************************************************************
-// CORBA::IRObject_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class CORBA_IRObject_var
 // *************************************************************
 
-CORBA::IRObject_var::IRObject_var (void) // default constructor
-  : ptr_ (IRObject::_nil ())
+CORBA_IRObject_var::CORBA_IRObject_var (void) // default constructor
+  : ptr_ (CORBA_IRObject::_nil ())
 {}
 
-::CORBA::IRObject_ptr
-CORBA::IRObject_var::ptr (void) const
+::CORBA_IRObject_ptr
+CORBA_IRObject_var::ptr (void) const
 {
   return this->ptr_;
 }
 
-CORBA::IRObject_var::IRObject_var (const ::CORBA::IRObject_var &p) // copy constructor
+CORBA_IRObject_var::CORBA_IRObject_var (const ::CORBA_IRObject_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (IRObject::_duplicate (p.ptr ()))
+    ptr_ (CORBA_IRObject::_duplicate (p.ptr ()))
 {}
 
-CORBA::IRObject_var::~IRObject_var (void) // destructor
+CORBA_IRObject_var::~CORBA_IRObject_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-CORBA::IRObject_var &
-CORBA::IRObject_var::operator= (IRObject_ptr p)
+CORBA_IRObject_var &
+CORBA_IRObject_var::operator= (CORBA_IRObject_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-CORBA::IRObject_var &
-CORBA::IRObject_var::operator= (const ::CORBA::IRObject_var &p)
+CORBA_IRObject_var &
+CORBA_IRObject_var::operator= (const ::CORBA_IRObject_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::CORBA::IRObject::_duplicate (p.ptr ());
+    this->ptr_ = ::CORBA_IRObject::_duplicate (p.ptr ());
   }
   return *this;
 }
 
-CORBA::IRObject_var::operator const ::CORBA::IRObject_ptr &() const // cast
+CORBA_IRObject_var::operator const ::CORBA_IRObject_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-CORBA::IRObject_var::operator ::CORBA::IRObject_ptr &() // cast 
+CORBA_IRObject_var::operator ::CORBA_IRObject_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA::IRObject_ptr
-CORBA::IRObject_var::operator-> (void) const
+::CORBA_IRObject_ptr
+CORBA_IRObject_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-::CORBA::IRObject_ptr
-CORBA::IRObject_var::in (void) const
+::CORBA_IRObject_ptr
+CORBA_IRObject_var::in (void) const
 {
   return this->ptr_;
 }
 
-::CORBA::IRObject_ptr &
-CORBA::IRObject_var::inout (void)
+::CORBA_IRObject_ptr &
+CORBA_IRObject_var::inout (void)
 {
   return this->ptr_;
 }
 
-::CORBA::IRObject_ptr &
-CORBA::IRObject_var::out (void)
+::CORBA_IRObject_ptr &
+CORBA_IRObject_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::IRObject::_nil ();
+  this->ptr_ = ::CORBA_IRObject::_nil ();
   return this->ptr_;
 }
 
-::CORBA::IRObject_ptr
-CORBA::IRObject_var::_retn (void)
+::CORBA_IRObject_ptr
+CORBA_IRObject_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::CORBA::IRObject_ptr val = this->ptr_;
-  this->ptr_ = ::CORBA::IRObject::_nil ();
+  ::CORBA_IRObject_ptr val = this->ptr_;
+  this->ptr_ = ::CORBA_IRObject::_nil ();
   return val;
 }
 
-::CORBA::IRObject_ptr
-CORBA::IRObject_var::tao_duplicate (IRObject_ptr p)
+::CORBA_IRObject_ptr
+CORBA_IRObject_var::tao_duplicate (CORBA_IRObject_ptr p)
 {
-  return ::CORBA::IRObject::_duplicate (p);
+  return ::CORBA_IRObject::_duplicate (p);
 }
 
 void
-CORBA::IRObject_var::tao_release (IRObject_ptr p)
+CORBA_IRObject_var::tao_release (CORBA_IRObject_ptr p)
 {
   CORBA::release (p);
 }
 
-::CORBA::IRObject_ptr
-CORBA::IRObject_var::tao_nil (void)
+::CORBA_IRObject_ptr
+CORBA_IRObject_var::tao_nil (void)
 {
-  return ::CORBA::IRObject::_nil ();
+  return ::CORBA_IRObject::_nil ();
 }
 
-::CORBA::IRObject_ptr
-CORBA::IRObject_var::tao_narrow (
+::CORBA_IRObject_ptr
+CORBA_IRObject_var::tao_narrow (
     CORBA::Object *p
     ACE_ENV_ARG_DECL
   )
 {
-  return ::CORBA::IRObject::_narrow (p ACE_ENV_ARG_PARAMETER);
+  return ::CORBA_IRObject::_narrow (p ACE_ENV_ARG_PARAMETER);
 }
 
 CORBA::Object *
-CORBA::IRObject_var::tao_upcast (void *src)
+CORBA_IRObject_var::tao_upcast (void *src)
 {
-  IRObject **tmp =
-    ACE_static_cast (IRObject **, src);
+  CORBA_IRObject **tmp =
+    ACE_static_cast (CORBA_IRObject **, src);
   return *tmp;
 }
 
 // *************************************************************
-// CORBA::IRObject_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class CORBA_IRObject_out
 // *************************************************************
 
-CORBA::IRObject_out::IRObject_out (IRObject_ptr &p)
+CORBA_IRObject_out::CORBA_IRObject_out (CORBA_IRObject_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::CORBA::IRObject::_nil ();
+  this->ptr_ = ::CORBA_IRObject::_nil ();
 }
 
-CORBA::IRObject_out::IRObject_out (IRObject_var &p) // constructor from _var
+CORBA_IRObject_out::CORBA_IRObject_out (CORBA_IRObject_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::IRObject::_nil ();
+  this->ptr_ = ::CORBA_IRObject::_nil ();
 }
 
-CORBA::IRObject_out::IRObject_out (const ::CORBA::IRObject_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IRObject_out &, p).ptr_)
+CORBA_IRObject_out::CORBA_IRObject_out (const ::CORBA_IRObject_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (CORBA_IRObject_out &, p).ptr_)
 {}
 
-::CORBA::IRObject_out &
-CORBA::IRObject_out::operator= (const ::CORBA::IRObject_out &p)
+::CORBA_IRObject_out &
+CORBA_IRObject_out::operator= (const ::CORBA_IRObject_out &p)
 {
-  this->ptr_ = ACE_const_cast (IRObject_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (CORBA_IRObject_out&, p).ptr_;
   return *this;
 }
 
-CORBA::IRObject_out &
-CORBA::IRObject_out::operator= (const ::CORBA::IRObject_var &p)
+CORBA_IRObject_out &
+CORBA_IRObject_out::operator= (const ::CORBA_IRObject_var &p)
 {
-  this->ptr_ = ::CORBA::IRObject::_duplicate (p.ptr ());
+  this->ptr_ = ::CORBA_IRObject::_duplicate (p.ptr ());
   return *this;
 }
 
-CORBA::IRObject_out &
-CORBA::IRObject_out::operator= (IRObject_ptr p)
+CORBA_IRObject_out &
+CORBA_IRObject_out::operator= (CORBA_IRObject_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
-CORBA::IRObject_out::operator ::CORBA::IRObject_ptr &() // cast
+CORBA_IRObject_out::operator ::CORBA_IRObject_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA::IRObject_ptr &
-CORBA::IRObject_out::ptr (void) // ptr
+::CORBA_IRObject_ptr &
+CORBA_IRObject_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-::CORBA::IRObject_ptr
-CORBA::IRObject_out::operator-> (void)
+::CORBA_IRObject_ptr
+CORBA_IRObject_out::operator-> (void)
 {
   return this->ptr_;
 }
@@ -532,16 +273,23 @@
 public:
   TAO_ClientRequestInfo_CORBA_IRObject_def_kind_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (CORBA::DefinitionKind result);
@@ -555,7 +303,8 @@
 
 TAO_ClientRequestInfo_CORBA_IRObject_def_kind_get::TAO_ClientRequestInfo_CORBA_IRObject_def_kind_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -570,7 +319,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -585,6 +333,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_IRObject_def_kind_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -602,7 +351,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_IRObject_def_kind_get::result (::CORBA::DefinitionKind result)
+TAO_ClientRequestInfo_CORBA_IRObject_def_kind_get::result (CORBA::DefinitionKind result)
 {
   // update the result 
   this->_result = result;
@@ -613,16 +362,23 @@
 public:
   TAO_ClientRequestInfo_CORBA_IRObject_destroy (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
 private:
@@ -634,7 +390,8 @@
 
 TAO_ClientRequestInfo_CORBA_IRObject_destroy::TAO_ClientRequestInfo_CORBA_IRObject_destroy (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -649,7 +406,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -664,6 +420,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_IRObject_destroy::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -683,15 +440,15 @@
 //                Base & Remote Proxy  Implementation. 
 //
 
-CORBA::_TAO_IRObject_Proxy_Impl::_TAO_IRObject_Proxy_Impl (void)
+_TAO_CORBA_IRObject_Proxy_Impl::_TAO_CORBA_IRObject_Proxy_Impl (void)
 {}
 
-CORBA::_TAO_IRObject_Remote_Proxy_Impl::_TAO_IRObject_Remote_Proxy_Impl (void)
+_TAO_CORBA_IRObject_Remote_Proxy_Impl::_TAO_CORBA_IRObject_Remote_Proxy_Impl (void)
 {}
 
 // Remote Implementation of the IDL interface methods
 
-::CORBA::DefinitionKind CORBA::_TAO_IRObject_Remote_Proxy_Impl::def_kind (
+CORBA::DefinitionKind _TAO_CORBA_IRObject_Remote_Proxy_Impl::def_kind (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -732,9 +489,10 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_IRObject_def_kind_get _tao_ri (
+      TAO_ClientRequestInfo_CORBA_IRObject_def_kind_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK_RETURN (_tao_retval);
 
@@ -742,14 +500,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -786,9 +544,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -810,12 +568,12 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::DefinitionKind _tao_retval_info = _tao_retval;
-          _tao_ri.result (_tao_retval_info);
+          CORBA::DefinitionKind _tao_retval_info = _tao_retval;
+          ri.result (_tao_retval_info);
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -823,15 +581,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -842,7 +600,7 @@
         ACE_CHECK_RETURN (_tao_retval);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK_RETURN (_tao_retval);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -856,7 +614,7 @@
 return _tao_retval;
 }
 
-void CORBA::_TAO_IRObject_Remote_Proxy_Impl::destroy (
+void _TAO_CORBA_IRObject_Remote_Proxy_Impl::destroy (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -897,9 +655,10 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_IRObject_destroy _tao_ri (
+      TAO_ClientRequestInfo_CORBA_IRObject_destroy ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK;
 
@@ -907,14 +666,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -950,9 +709,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -964,9 +723,9 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -974,15 +733,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -993,7 +752,7 @@
         ACE_CHECK;
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK;
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -1017,37 +776,37 @@
 //           Remote & Base  Proxy Broker Implementation
 //
 
-CORBA::_TAO_IRObject_Proxy_Broker::_TAO_IRObject_Proxy_Broker (void)
+_TAO_CORBA_IRObject_Proxy_Broker::_TAO_CORBA_IRObject_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_IRObject_Proxy_Broker::~_TAO_IRObject_Proxy_Broker (void)
+_TAO_CORBA_IRObject_Proxy_Broker::~_TAO_CORBA_IRObject_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_IRObject_Proxy_Broker * (*CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer) (
+_TAO_CORBA_IRObject_Proxy_Broker * (*_TAO_CORBA_IRObject_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   ) = 0;
 
 // Factory Member function Implementation.
-CORBA::_TAO_IRObject_Remote_Proxy_Broker *
-CORBA::_TAO_IRObject_Remote_Proxy_Broker::the_TAO_IRObject_Remote_Proxy_Broker (void)
+_TAO_CORBA_IRObject_Remote_Proxy_Broker *
+_TAO_CORBA_IRObject_Remote_Proxy_Broker::the_TAO_CORBA_IRObject_Remote_Proxy_Broker (void)
 {
-  static ::CORBA::_TAO_IRObject_Remote_Proxy_Broker remote_proxy_broker;
+  static ::_TAO_CORBA_IRObject_Remote_Proxy_Broker remote_proxy_broker;
   return &remote_proxy_broker;
 }
 
-CORBA::_TAO_IRObject_Remote_Proxy_Broker::_TAO_IRObject_Remote_Proxy_Broker (void)
+_TAO_CORBA_IRObject_Remote_Proxy_Broker::_TAO_CORBA_IRObject_Remote_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_IRObject_Remote_Proxy_Broker::~_TAO_IRObject_Remote_Proxy_Broker (void)
+_TAO_CORBA_IRObject_Remote_Proxy_Broker::~_TAO_CORBA_IRObject_Remote_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_IRObject_Proxy_Impl&
-CORBA::_TAO_IRObject_Remote_Proxy_Broker::select_proxy (
-  ::CORBA::IRObject *
+_TAO_CORBA_IRObject_Proxy_Impl&
+_TAO_CORBA_IRObject_Remote_Proxy_Broker::select_proxy (
+  ::CORBA_IRObject *
   ACE_ENV_ARG_DECL_NOT_USED
 )
 {
@@ -1060,124 +819,108 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
-CORBA::IRObject::IRObject (int collocated)
+// default constructor
+CORBA_IRObject::CORBA_IRObject (int collocated)
 {
   this->CORBA_IRObject_setup_collocation (collocated);
 }
 
-CORBA::IRObject::~IRObject (void)
+// destructor
+CORBA_IRObject::~CORBA_IRObject (void)
 {}
 
 void
-CORBA::IRObject::CORBA_IRObject_setup_collocation (int collocated)
+CORBA_IRObject::CORBA_IRObject_setup_collocation (int collocated)
 {
   if (collocated)
-    this->the_TAO_IRObject_Proxy_Broker_ =
-      ::CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer (this);
+    this->the_TAO_CORBA_IRObject_Proxy_Broker_ =
+      ::_TAO_CORBA_IRObject_Proxy_Broker_Factory_function_pointer (this);
   else
-    this->the_TAO_IRObject_Proxy_Broker_ =
-      ::CORBA::_TAO_IRObject_Remote_Proxy_Broker::the_TAO_IRObject_Remote_Proxy_Broker ();
+    this->the_TAO_CORBA_IRObject_Proxy_Broker_ =
+      ::_TAO_CORBA_IRObject_Remote_Proxy_Broker::the_TAO_CORBA_IRObject_Remote_Proxy_Broker ();
 }
 
-void CORBA::IRObject::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_IRObject::_tao_any_destructor (void *_tao_void_pointer)
 {
-  IRObject *tmp = ACE_static_cast (IRObject*, _tao_void_pointer);
+  CORBA_IRObject *tmp = ACE_static_cast (CORBA_IRObject*, _tao_void_pointer);
   CORBA::release (tmp);
 }
 
-CORBA::IRObject_ptr CORBA::IRObject::_narrow (
+CORBA_IRObject_ptr CORBA_IRObject::_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL
   )
 {
   if (CORBA::is_nil (obj))
-    return IRObject::_nil ();
+    return CORBA_IRObject::_nil ();
   if (! obj->_is_local ())
     {
       CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/IRObject:1.0" ACE_ENV_ARG_PARAMETER);
-      ACE_CHECK_RETURN (IRObject::_nil ());
+      ACE_CHECK_RETURN (CORBA_IRObject::_nil ());
       if (is_a == 0)
-        return IRObject::_nil ();
+        return CORBA_IRObject::_nil ();
     }
-  return IRObject::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
+  return CORBA_IRObject::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-CORBA::IRObject_ptr 
-CORBA::IRObject::_unchecked_narrow (
+CORBA_IRObject_ptr CORBA_IRObject::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
 {
   if (CORBA::is_nil (obj))
-    return IRObject::_nil ();
+    return CORBA_IRObject::_nil ();
   if (! obj->_is_local ())
     {
       TAO_Stub* stub = obj->_stubobj ();
       if (stub)
         stub->_incr_refcnt ();
-      IRObject_ptr default_proxy = IRObject::_nil ();
+      CORBA_IRObject_ptr default_proxy = CORBA_IRObject::_nil ();
 
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          CORBA__TAO_IRObject_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&_TAO_CORBA_IRObject_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
               default_proxy,
-              ::CORBA::IRObject (
+          ::CORBA_IRObject (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              IRObject::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::CORBA::IRObject (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              IRObject::_nil ()
-            );
+          CORBA_IRObject::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::CORBA_IRObject (stub, 0, obj->_servant ()), CORBA_IRObject::_nil ());
       return default_proxy;
     }
   else 
     return
       ACE_reinterpret_cast
         (
-          IRObject_ptr,
+            CORBA_IRObject_ptr,
             obj->_tao_QueryInterface
               (
                 ACE_reinterpret_cast
                   (
                     ptr_arith_t,
-                    &IRObject::_tao_class_id
+                      &CORBA_IRObject::_tao_class_id
                   )
               )
         );
 }
 
-CORBA::IRObject_ptr
-CORBA::IRObject::_duplicate (IRObject_ptr obj)
+CORBA_IRObject_ptr
+CORBA_IRObject::_duplicate (CORBA_IRObject_ptr obj)
 {
   if (!CORBA::is_nil (obj))
     obj->_add_ref ();
   return obj;
 }
 
-CORBA::Boolean CORBA::IRObject::_is_a (const CORBA::Char *value ACE_ENV_ARG_DECL)
+CORBA::Boolean CORBA_IRObject::_is_a (const CORBA::Char *value ACE_ENV_ARG_DECL)
 {
   if (
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IRObject:1.0")) ||
@@ -1187,12 +930,12 @@
     return this->CORBA_Object::_is_a (value ACE_ENV_ARG_PARAMETER);
 }
 
-void *CORBA::IRObject::_tao_QueryInterface (ptr_arith_t type)
+void *CORBA_IRObject::_tao_QueryInterface (ptr_arith_t type)
 {
   void *retv = 0;
   if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, IRObject)::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
     retv = ACE_reinterpret_cast (void *,
@@ -1203,147 +946,76 @@
   return retv;
 }
 
-const char* CORBA::IRObject::_interface_repository_id (void) const
+const char* CORBA_IRObject::_interface_repository_id (void) const
 {
   return "IDL:omg.org/CORBA/IRObject:1.0";
 }
 
-::CORBA::DefinitionKind CORBA::IRObject::def_kind (
-    
+CORBA::DefinitionKind CORBA_IRObject::def_kind (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_IRObject_Proxy_Impl &proxy = 
-    this->the_TAO_IRObject_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_IRObject_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_IRObject_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN ((CORBA::DefinitionKind)0);
   
   return proxy.def_kind (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-void CORBA::IRObject::destroy (
-    
+void CORBA_IRObject::destroy (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_IRObject_Proxy_Impl &proxy = 
-    this->the_TAO_IRObject_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_IRObject_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_IRObject_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK;
   
   proxy.destroy (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-static const CORBA::Long _oc_CORBA_IRObject[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  31,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f4952), 
-  ACE_NTOHL (0x4f626a65), 
-  ACE_NTOHL (0x63743a31), 
-  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/IRObject:1.0
-  9,
-  ACE_NTOHL (0x49524f62), 
-  ACE_NTOHL (0x6a656374), 
-  ACE_NTOHL (0x0),  // name = IRObject
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_IRObject (
-    CORBA::tk_objref,
-    sizeof (_oc_CORBA_IRObject),
-    (char *) &_oc_CORBA_IRObject,
-    0,
-    sizeof (CORBA::IRObject)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_IRObject, &_tc_TAO_tc_CORBA_IRObject)
-TAO_NAMESPACE_END
-
-static const CORBA::Long _oc_CORBA_VersionSpec[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  34,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f5665), 
-  ACE_NTOHL (0x7273696f), 
-  ACE_NTOHL (0x6e537065), 
-  ACE_NTOHL (0x633a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
-  12,
-  ACE_NTOHL (0x56657273), 
-  ACE_NTOHL (0x696f6e53), 
-  ACE_NTOHL (0x70656300),  // name = VersionSpec
-  CORBA::tk_string, 
-  0U, // string length
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_VersionSpec (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_VersionSpec),
-    (char *) &_oc_CORBA_VersionSpec,
-    0,
-    sizeof (CORBA::VersionSpec)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_VersionSpec, &_tc_TAO_tc_CORBA_VersionSpec)
-TAO_NAMESPACE_END
-
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int CORBA::Contained::_tao_class_id = 0;
-
-CORBA::Contained_ptr
+CORBA_Contained_ptr
 tao_CORBA_Contained_duplicate (
-    CORBA::Contained_ptr p
+    CORBA_Contained_ptr p
   )
 {
-  return CORBA::Contained::_duplicate (p);
+  return CORBA_Contained::_duplicate (p);
 }
 
 void
 tao_CORBA_Contained_release (
-    CORBA::Contained_ptr p
+    CORBA_Contained_ptr p
   )
 {
   CORBA::release (p);
 }
 
-CORBA::Contained_ptr
+CORBA_Contained_ptr
 tao_CORBA_Contained_nil (
     void
   )
 {
-  return CORBA::Contained::_nil ();
+  return CORBA_Contained::_nil ();
 }
 
-CORBA::Contained_ptr
+CORBA_Contained_ptr
 tao_CORBA_Contained_narrow (
     CORBA::Object *p
     ACE_ENV_ARG_DECL
   )
 {
-  return CORBA::Contained::_narrow (p ACE_ENV_ARG_PARAMETER);
+  return CORBA_Contained::_narrow (p ACE_ENV_ARG_PARAMETER);
 }
 
 CORBA::Object *
@@ -1351,193 +1023,191 @@
     void *src
   )
 {
-  CORBA::Contained **tmp =
-    ACE_static_cast (CORBA::Contained **, src);
+  CORBA_Contained **tmp =
+    ACE_static_cast (CORBA_Contained **, src);
   return *tmp;
 }
 
+int CORBA_Contained::_tao_class_id = 0;
+
 // *************************************************************
-// CORBA::Contained_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class CORBA_Contained_var
 // *************************************************************
 
-CORBA::Contained_var::Contained_var (void) // default constructor
-  : ptr_ (Contained::_nil ())
+CORBA_Contained_var::CORBA_Contained_var (void) // default constructor
+  : ptr_ (CORBA_Contained::_nil ())
 {}
 
-::CORBA::Contained_ptr
-CORBA::Contained_var::ptr (void) const
+::CORBA_Contained_ptr
+CORBA_Contained_var::ptr (void) const
 {
   return this->ptr_;
 }
 
-CORBA::Contained_var::Contained_var (const ::CORBA::Contained_var &p) // copy constructor
+CORBA_Contained_var::CORBA_Contained_var (const ::CORBA_Contained_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (Contained::_duplicate (p.ptr ()))
+    ptr_ (CORBA_Contained::_duplicate (p.ptr ()))
 {}
 
-CORBA::Contained_var::~Contained_var (void) // destructor
+CORBA_Contained_var::~CORBA_Contained_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-CORBA::Contained_var &
-CORBA::Contained_var::operator= (Contained_ptr p)
+CORBA_Contained_var &
+CORBA_Contained_var::operator= (CORBA_Contained_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-CORBA::Contained_var &
-CORBA::Contained_var::operator= (const ::CORBA::Contained_var &p)
+CORBA_Contained_var &
+CORBA_Contained_var::operator= (const ::CORBA_Contained_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::CORBA::Contained::_duplicate (p.ptr ());
+    this->ptr_ = ::CORBA_Contained::_duplicate (p.ptr ());
   }
   return *this;
 }
 
-CORBA::Contained_var::operator const ::CORBA::Contained_ptr &() const // cast
+CORBA_Contained_var::operator const ::CORBA_Contained_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-CORBA::Contained_var::operator ::CORBA::Contained_ptr &() // cast 
+CORBA_Contained_var::operator ::CORBA_Contained_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA::Contained_ptr
-CORBA::Contained_var::operator-> (void) const
+::CORBA_Contained_ptr
+CORBA_Contained_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-::CORBA::Contained_ptr
-CORBA::Contained_var::in (void) const
+::CORBA_Contained_ptr
+CORBA_Contained_var::in (void) const
 {
   return this->ptr_;
 }
 
-::CORBA::Contained_ptr &
-CORBA::Contained_var::inout (void)
+::CORBA_Contained_ptr &
+CORBA_Contained_var::inout (void)
 {
   return this->ptr_;
 }
 
-::CORBA::Contained_ptr &
-CORBA::Contained_var::out (void)
+::CORBA_Contained_ptr &
+CORBA_Contained_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::Contained::_nil ();
+  this->ptr_ = ::CORBA_Contained::_nil ();
   return this->ptr_;
 }
 
-::CORBA::Contained_ptr
-CORBA::Contained_var::_retn (void)
+::CORBA_Contained_ptr
+CORBA_Contained_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::CORBA::Contained_ptr val = this->ptr_;
-  this->ptr_ = ::CORBA::Contained::_nil ();
+  ::CORBA_Contained_ptr val = this->ptr_;
+  this->ptr_ = ::CORBA_Contained::_nil ();
   return val;
 }
 
-::CORBA::Contained_ptr
-CORBA::Contained_var::tao_duplicate (Contained_ptr p)
+::CORBA_Contained_ptr
+CORBA_Contained_var::tao_duplicate (CORBA_Contained_ptr p)
 {
-  return ::CORBA::Contained::_duplicate (p);
+  return ::CORBA_Contained::_duplicate (p);
 }
 
 void
-CORBA::Contained_var::tao_release (Contained_ptr p)
+CORBA_Contained_var::tao_release (CORBA_Contained_ptr p)
 {
   CORBA::release (p);
 }
 
-::CORBA::Contained_ptr
-CORBA::Contained_var::tao_nil (void)
+::CORBA_Contained_ptr
+CORBA_Contained_var::tao_nil (void)
 {
-  return ::CORBA::Contained::_nil ();
+  return ::CORBA_Contained::_nil ();
 }
 
-::CORBA::Contained_ptr
-CORBA::Contained_var::tao_narrow (
+::CORBA_Contained_ptr
+CORBA_Contained_var::tao_narrow (
     CORBA::Object *p
     ACE_ENV_ARG_DECL
   )
 {
-  return ::CORBA::Contained::_narrow (p ACE_ENV_ARG_PARAMETER);
+  return ::CORBA_Contained::_narrow (p ACE_ENV_ARG_PARAMETER);
 }
 
 CORBA::Object *
-CORBA::Contained_var::tao_upcast (void *src)
+CORBA_Contained_var::tao_upcast (void *src)
 {
-  Contained **tmp =
-    ACE_static_cast (Contained **, src);
+  CORBA_Contained **tmp =
+    ACE_static_cast (CORBA_Contained **, src);
   return *tmp;
 }
 
 // *************************************************************
-// CORBA::Contained_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class CORBA_Contained_out
 // *************************************************************
 
-CORBA::Contained_out::Contained_out (Contained_ptr &p)
+CORBA_Contained_out::CORBA_Contained_out (CORBA_Contained_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::CORBA::Contained::_nil ();
+  this->ptr_ = ::CORBA_Contained::_nil ();
 }
 
-CORBA::Contained_out::Contained_out (Contained_var &p) // constructor from _var
+CORBA_Contained_out::CORBA_Contained_out (CORBA_Contained_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::Contained::_nil ();
+  this->ptr_ = ::CORBA_Contained::_nil ();
 }
 
-CORBA::Contained_out::Contained_out (const ::CORBA::Contained_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (Contained_out &, p).ptr_)
+CORBA_Contained_out::CORBA_Contained_out (const ::CORBA_Contained_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (CORBA_Contained_out &, p).ptr_)
 {}
 
-::CORBA::Contained_out &
-CORBA::Contained_out::operator= (const ::CORBA::Contained_out &p)
+::CORBA_Contained_out &
+CORBA_Contained_out::operator= (const ::CORBA_Contained_out &p)
 {
-  this->ptr_ = ACE_const_cast (Contained_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (CORBA_Contained_out&, p).ptr_;
   return *this;
 }
 
-CORBA::Contained_out &
-CORBA::Contained_out::operator= (const ::CORBA::Contained_var &p)
+CORBA_Contained_out &
+CORBA_Contained_out::operator= (const ::CORBA_Contained_var &p)
 {
-  this->ptr_ = ::CORBA::Contained::_duplicate (p.ptr ());
+  this->ptr_ = ::CORBA_Contained::_duplicate (p.ptr ());
   return *this;
 }
 
-CORBA::Contained_out &
-CORBA::Contained_out::operator= (Contained_ptr p)
+CORBA_Contained_out &
+CORBA_Contained_out::operator= (CORBA_Contained_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
-CORBA::Contained_out::operator ::CORBA::Contained_ptr &() // cast
+CORBA_Contained_out::operator ::CORBA_Contained_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA::Contained_ptr &
-CORBA::Contained_out::ptr (void) // ptr
+::CORBA_Contained_ptr &
+CORBA_Contained_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-::CORBA::Contained_ptr
-CORBA::Contained_out::operator-> (void)
+::CORBA_Contained_ptr
+CORBA_Contained_out::operator-> (void)
 {
   return this->ptr_;
 }
@@ -1549,16 +1219,23 @@
 public:
   TAO_ClientRequestInfo_CORBA_Contained_id_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (char * result);
@@ -1572,7 +1249,8 @@
 
 TAO_ClientRequestInfo_CORBA_Contained_id_get::TAO_ClientRequestInfo_CORBA_Contained_id_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -1587,7 +1265,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -1602,6 +1279,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_id_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -1631,16 +1309,23 @@
   TAO_ClientRequestInfo_CORBA_Contained_id_set (
       TAO_GIOP_Invocation *_tao_invocation,
       CORBA::Object_ptr _tao_target,
-      const char * id ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const char * id
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
 private:
@@ -1654,7 +1339,8 @@
 TAO_ClientRequestInfo_CORBA_Contained_id_set::TAO_ClientRequestInfo_CORBA_Contained_id_set (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    const char * id ACE_ENV_ARG_DECL_NOT_USED    
+    const char * id
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id)
@@ -1693,6 +1379,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_id_set::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -1711,16 +1398,23 @@
 public:
   TAO_ClientRequestInfo_CORBA_Contained_name_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (char * result);
@@ -1734,7 +1428,8 @@
 
 TAO_ClientRequestInfo_CORBA_Contained_name_get::TAO_ClientRequestInfo_CORBA_Contained_name_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -1749,7 +1444,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -1764,6 +1458,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_name_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -1793,16 +1488,23 @@
   TAO_ClientRequestInfo_CORBA_Contained_name_set (
       TAO_GIOP_Invocation *_tao_invocation,
       CORBA::Object_ptr _tao_target,
-      const char * name ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const char * name
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
 private:
@@ -1816,7 +1518,8 @@
 TAO_ClientRequestInfo_CORBA_Contained_name_set::TAO_ClientRequestInfo_CORBA_Contained_name_set (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    const char * name ACE_ENV_ARG_DECL_NOT_USED    
+    const char * name
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     name_ (name)
@@ -1855,6 +1558,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_name_set::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -1873,16 +1577,23 @@
 public:
   TAO_ClientRequestInfo_CORBA_Contained_version_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (char * result);
@@ -1896,7 +1607,8 @@
 
 TAO_ClientRequestInfo_CORBA_Contained_version_get::TAO_ClientRequestInfo_CORBA_Contained_version_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -1911,7 +1623,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -1926,6 +1637,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_version_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -1955,16 +1667,23 @@
   TAO_ClientRequestInfo_CORBA_Contained_version_set (
       TAO_GIOP_Invocation *_tao_invocation,
       CORBA::Object_ptr _tao_target,
-      const char * version ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const char * version
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
 private:
@@ -1978,7 +1697,8 @@
 TAO_ClientRequestInfo_CORBA_Contained_version_set::TAO_ClientRequestInfo_CORBA_Contained_version_set (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    const char * version ACE_ENV_ARG_DECL_NOT_USED    
+    const char * version
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     version_ (version)
@@ -2017,6 +1737,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_version_set::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -2035,30 +1756,38 @@
 public:
   TAO_ClientRequestInfo_CORBA_Contained_defined_in_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::Container_ptr result);
+  void result (CORBA_Container_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Contained_defined_in_get (const TAO_ClientRequestInfo_CORBA_Contained_defined_in_get &);
   void operator= (const TAO_ClientRequestInfo_CORBA_Contained_defined_in_get &);
 
-  CORBA::Container_ptr _result;
+  CORBA_Container_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Contained_defined_in_get::TAO_ClientRequestInfo_CORBA_Contained_defined_in_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -2073,7 +1802,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -2088,6 +1816,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_defined_in_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -2105,7 +1834,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Contained_defined_in_get::result (::CORBA::Container_ptr result)
+TAO_ClientRequestInfo_CORBA_Contained_defined_in_get::result (CORBA_Container_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -2116,16 +1845,23 @@
 public:
   TAO_ClientRequestInfo_CORBA_Contained_absolute_name_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (char * result);
@@ -2139,7 +1875,8 @@
 
 TAO_ClientRequestInfo_CORBA_Contained_absolute_name_get::TAO_ClientRequestInfo_CORBA_Contained_absolute_name_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -2154,7 +1891,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -2169,6 +1905,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_absolute_name_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -2197,30 +1934,38 @@
 public:
   TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::Repository_ptr result);
+  void result (CORBA_Repository_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get (const TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get &);
   void operator= (const TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get &);
 
-  CORBA::Repository_ptr _result;
+  CORBA_Repository_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get::TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -2235,7 +1980,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -2250,6 +1994,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -2267,7 +2012,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get::result (::CORBA::Repository_ptr result)
+TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get::result (CORBA_Repository_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -2278,30 +2023,38 @@
 public:
   TAO_ClientRequestInfo_CORBA_Contained_describe (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::Contained::Description * result);
+  void result (CORBA_Contained::Description * result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Contained_describe (const TAO_ClientRequestInfo_CORBA_Contained_describe &);
   void operator= (const TAO_ClientRequestInfo_CORBA_Contained_describe &);
 
-  CORBA::Contained::Description * _result;
+  CORBA_Contained::Description * _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Contained_describe::TAO_ClientRequestInfo_CORBA_Contained_describe (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -2316,7 +2069,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -2331,6 +2083,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_describe::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -2348,7 +2101,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Contained_describe::result (::CORBA::Contained::Description * result)
+TAO_ClientRequestInfo_CORBA_Contained_describe::result (CORBA_Contained::Description * result)
 {
   // update the result 
   this->_result = result;
@@ -2360,25 +2113,32 @@
   TAO_ClientRequestInfo_CORBA_Contained_move (
       TAO_GIOP_Invocation *_tao_invocation,
       CORBA::Object_ptr _tao_target,
-      CORBA::Container_ptr new_container,
+      CORBA_Container_ptr new_container,
       const char * new_name,
-      const char * new_version ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const char * new_version
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
 private:
   TAO_ClientRequestInfo_CORBA_Contained_move (const TAO_ClientRequestInfo_CORBA_Contained_move &);
   void operator= (const TAO_ClientRequestInfo_CORBA_Contained_move &);
 
-  CORBA::Container_ptr new_container_;
+  CORBA_Container_ptr new_container_;
   const char * new_name_;
   const char * new_version_;
   
@@ -2387,9 +2147,10 @@
 TAO_ClientRequestInfo_CORBA_Contained_move::TAO_ClientRequestInfo_CORBA_Contained_move (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    CORBA::Container_ptr new_container,
+    CORBA_Container_ptr new_container,
     const char * new_name,
-    const char * new_version ACE_ENV_ARG_DECL_NOT_USED    
+    const char * new_version
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     new_container_ (new_container),
@@ -2436,6 +2197,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Contained_move::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -2455,15 +2217,15 @@
 //                Base & Remote Proxy  Implementation. 
 //
 
-CORBA::_TAO_Contained_Proxy_Impl::_TAO_Contained_Proxy_Impl (void)
+_TAO_CORBA_Contained_Proxy_Impl::_TAO_CORBA_Contained_Proxy_Impl (void)
 {}
 
-CORBA::_TAO_Contained_Remote_Proxy_Impl::_TAO_Contained_Remote_Proxy_Impl (void)
+_TAO_CORBA_Contained_Remote_Proxy_Impl::_TAO_CORBA_Contained_Remote_Proxy_Impl (void)
 {}
 
 // Remote Implementation of the IDL interface methods
 
-char * CORBA::_TAO_Contained_Remote_Proxy_Impl::id (
+char * _TAO_CORBA_Contained_Remote_Proxy_Impl::id (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -2472,12 +2234,12 @@
   ))
 {
   
-  CORBA::String_var _tao_retval;
+  CORBA::String_var _tao_safe_retval;
   
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -2504,24 +2266,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_id_get _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_id_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -2535,17 +2298,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -2558,9 +2321,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -2571,7 +2334,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -2582,13 +2345,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          char * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          char * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -2596,15 +2359,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -2612,11 +2375,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -2626,10 +2389,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-void CORBA::_TAO_Contained_Remote_Proxy_Impl::id (
+void _TAO_CORBA_Contained_Remote_Proxy_Impl::id (
     CORBA_Object *_collocated_tao_target_,
     const char * id
     ACE_ENV_ARG_DECL
@@ -2671,10 +2434,11 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_id_set _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_id_set ri (
         &_tao_call,
         _collocated_tao_target_,
-        id ACE_ENV_ARG_PARAMETER
+        id
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK;
 
@@ -2682,14 +2446,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -2733,9 +2497,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -2747,9 +2511,9 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -2757,15 +2521,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -2776,7 +2540,7 @@
         ACE_CHECK;
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK;
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -2790,7 +2554,7 @@
 
 }
 
-char * CORBA::_TAO_Contained_Remote_Proxy_Impl::name (
+char * _TAO_CORBA_Contained_Remote_Proxy_Impl::name (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -2799,12 +2563,12 @@
   ))
 {
   
-  CORBA::String_var _tao_retval;
+  CORBA::String_var _tao_safe_retval;
   
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -2831,24 +2595,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_name_get _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_name_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -2862,17 +2627,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -2885,9 +2650,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -2898,7 +2663,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -2909,13 +2674,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          char * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          char * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -2923,15 +2688,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -2939,11 +2704,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -2953,10 +2718,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-void CORBA::_TAO_Contained_Remote_Proxy_Impl::name (
+void _TAO_CORBA_Contained_Remote_Proxy_Impl::name (
     CORBA_Object *_collocated_tao_target_,
     const char * name
     ACE_ENV_ARG_DECL
@@ -2998,10 +2763,11 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_name_set _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_name_set ri (
         &_tao_call,
         _collocated_tao_target_,
-        name ACE_ENV_ARG_PARAMETER
+        name
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK;
 
@@ -3009,14 +2775,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3060,9 +2826,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -3074,9 +2840,9 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3084,15 +2850,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -3103,7 +2869,7 @@
         ACE_CHECK;
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK;
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -3117,7 +2883,7 @@
 
 }
 
-char * CORBA::_TAO_Contained_Remote_Proxy_Impl::version (
+char * _TAO_CORBA_Contained_Remote_Proxy_Impl::version (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -3126,12 +2892,12 @@
   ))
 {
   
-  CORBA::String_var _tao_retval;
+  CORBA::String_var _tao_safe_retval;
   
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -3158,24 +2924,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_version_get _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_version_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3189,17 +2956,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -3212,9 +2979,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -3225,7 +2992,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -3236,13 +3003,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          char * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          char * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3250,15 +3017,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -3266,11 +3033,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -3280,10 +3047,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-void CORBA::_TAO_Contained_Remote_Proxy_Impl::version (
+void _TAO_CORBA_Contained_Remote_Proxy_Impl::version (
     CORBA_Object *_collocated_tao_target_,
     const char * version
     ACE_ENV_ARG_DECL
@@ -3325,10 +3092,11 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_version_set _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_version_set ri (
         &_tao_call,
         _collocated_tao_target_,
-        version ACE_ENV_ARG_PARAMETER
+        version
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK;
 
@@ -3336,14 +3104,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3387,9 +3155,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -3401,9 +3169,9 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3411,15 +3179,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -3430,7 +3198,7 @@
         ACE_CHECK;
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK;
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -3444,7 +3212,7 @@
 
 }
 
-::CORBA::Container_ptr CORBA::_TAO_Contained_Remote_Proxy_Impl::defined_in (
+CORBA_Container_ptr _TAO_CORBA_Contained_Remote_Proxy_Impl::defined_in (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -3453,13 +3221,13 @@
   ))
 {
   
-  CORBA::Container_var _tao_retval (CORBA::Container::_nil ());
-
+  CORBA_Container_ptr _tao_retval = CORBA_Container::_nil ();
+  CORBA_Container_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -3486,24 +3254,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_defined_in_get _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_defined_in_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3517,17 +3286,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -3540,9 +3309,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -3553,7 +3322,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -3564,13 +3333,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::Container_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_Container_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3578,15 +3347,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -3594,11 +3363,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -3608,10 +3377,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-char * CORBA::_TAO_Contained_Remote_Proxy_Impl::absolute_name (
+char * _TAO_CORBA_Contained_Remote_Proxy_Impl::absolute_name (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -3620,12 +3389,12 @@
   ))
 {
   
-  CORBA::String_var _tao_retval;
+  CORBA::String_var _tao_safe_retval;
   
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -3652,24 +3421,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_absolute_name_get _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_absolute_name_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3683,17 +3453,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -3706,9 +3476,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -3719,7 +3489,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -3730,13 +3500,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          char * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          char * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3744,15 +3514,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -3760,11 +3530,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -3774,10 +3544,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::Repository_ptr CORBA::_TAO_Contained_Remote_Proxy_Impl::containing_repository (
+CORBA_Repository_ptr _TAO_CORBA_Contained_Remote_Proxy_Impl::containing_repository (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -3786,13 +3556,13 @@
   ))
 {
   
-  CORBA::Repository_var _tao_retval ( tao_CORBA_Repository_nil ());
-
+  CORBA_Repository_ptr _tao_retval = tao_CORBA_Repository_nil ();
+  CORBA_Repository_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -3819,24 +3589,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_containing_repository_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3850,17 +3621,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -3873,9 +3644,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -3886,7 +3657,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -3897,13 +3668,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::Repository_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_Repository_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -3911,15 +3682,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -3927,11 +3698,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -3941,10 +3712,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::Contained::Description * CORBA::_TAO_Contained_Remote_Proxy_Impl::describe (
+CORBA_Contained::Description * _TAO_CORBA_Contained_Remote_Proxy_Impl::describe (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -3953,18 +3724,15 @@
   ))
 {
   
-  CORBA::Contained::Description_var _tao_retval;
+  CORBA_Contained::Description *_tao_retval = 0;
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    CORBA::Contained::Description *tmp;
-    ACE_NEW_RETURN (tmp, CORBA::Contained::Description, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, CORBA_Contained::Description, _tao_retval);
+  CORBA_Contained::Description_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "describe",
@@ -3989,24 +3757,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_describe _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_describe ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -4020,17 +3789,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -4043,9 +3812,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -4056,7 +3825,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -4067,13 +3836,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::Contained::Description * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_Contained::Description * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -4081,15 +3850,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -4097,11 +3866,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -4111,12 +3880,12 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-void CORBA::_TAO_Contained_Remote_Proxy_Impl::move (
+void _TAO_CORBA_Contained_Remote_Proxy_Impl::move (
     CORBA_Object *_collocated_tao_target_,
-    CORBA::Container_ptr new_container,
+    CORBA_Container_ptr new_container,
     const char * new_name,
     const char * new_version
     ACE_ENV_ARG_DECL
@@ -4138,7 +3907,7 @@
       istub,
       "move",
       4,
-      3,
+      1,
       istub->orb_core ()
     );
   
@@ -4158,12 +3927,13 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Contained_move _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Contained_move ri (
         &_tao_call,
         _collocated_tao_target_,
         new_container,
         new_name,
-        new_version ACE_ENV_ARG_PARAMETER
+        new_version
+        ACE_ENV_ARG_PARAMETER
       );
             ACE_CHECK;
 
@@ -4171,14 +3941,14 @@
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -4224,9 +3994,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -4238,9 +4008,9 @@
           
 #if TAO_HAS_INTERCEPTORS == 1
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -4248,15 +4018,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -4267,7 +4037,7 @@
         ACE_CHECK;
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_CHECK;
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
@@ -4291,37 +4061,37 @@
 //           Remote & Base  Proxy Broker Implementation
 //
 
-CORBA::_TAO_Contained_Proxy_Broker::_TAO_Contained_Proxy_Broker (void)
+_TAO_CORBA_Contained_Proxy_Broker::_TAO_CORBA_Contained_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_Contained_Proxy_Broker::~_TAO_Contained_Proxy_Broker (void)
+_TAO_CORBA_Contained_Proxy_Broker::~_TAO_CORBA_Contained_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_Contained_Proxy_Broker * (*CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer) (
+_TAO_CORBA_Contained_Proxy_Broker * (*_TAO_CORBA_Contained_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   ) = 0;
 
 // Factory Member function Implementation.
-CORBA::_TAO_Contained_Remote_Proxy_Broker *
-CORBA::_TAO_Contained_Remote_Proxy_Broker::the_TAO_Contained_Remote_Proxy_Broker (void)
+_TAO_CORBA_Contained_Remote_Proxy_Broker *
+_TAO_CORBA_Contained_Remote_Proxy_Broker::the_TAO_CORBA_Contained_Remote_Proxy_Broker (void)
 {
-  static ::CORBA::_TAO_Contained_Remote_Proxy_Broker remote_proxy_broker;
+  static ::_TAO_CORBA_Contained_Remote_Proxy_Broker remote_proxy_broker;
   return &remote_proxy_broker;
 }
 
-CORBA::_TAO_Contained_Remote_Proxy_Broker::_TAO_Contained_Remote_Proxy_Broker (void)
+_TAO_CORBA_Contained_Remote_Proxy_Broker::_TAO_CORBA_Contained_Remote_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_Contained_Remote_Proxy_Broker::~_TAO_Contained_Remote_Proxy_Broker (void)
+_TAO_CORBA_Contained_Remote_Proxy_Broker::~_TAO_CORBA_Contained_Remote_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_Contained_Proxy_Impl&
-CORBA::_TAO_Contained_Remote_Proxy_Broker::select_proxy (
-  ::CORBA::Contained *
+_TAO_CORBA_Contained_Proxy_Impl&
+_TAO_CORBA_Contained_Remote_Proxy_Broker::select_proxy (
+  ::CORBA_Contained *
   ACE_ENV_ARG_DECL_NOT_USED
 )
 {
@@ -4334,126 +4104,110 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
-CORBA::Contained::Contained (int collocated)
+// default constructor
+CORBA_Contained::CORBA_Contained (int collocated)
 {
   this->CORBA_Contained_setup_collocation (collocated);
 }
 
-CORBA::Contained::~Contained (void)
+// destructor
+CORBA_Contained::~CORBA_Contained (void)
 {}
 
 void
-CORBA::Contained::CORBA_Contained_setup_collocation (int collocated)
+CORBA_Contained::CORBA_Contained_setup_collocation (int collocated)
 {
   if (collocated)
-    this->the_TAO_Contained_Proxy_Broker_ =
-      ::CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer (this);
+    this->the_TAO_CORBA_Contained_Proxy_Broker_ =
+      ::_TAO_CORBA_Contained_Proxy_Broker_Factory_function_pointer (this);
   else
-    this->the_TAO_Contained_Proxy_Broker_ =
-      ::CORBA::_TAO_Contained_Remote_Proxy_Broker::the_TAO_Contained_Remote_Proxy_Broker ();
+    this->the_TAO_CORBA_Contained_Proxy_Broker_ =
+      ::_TAO_CORBA_Contained_Remote_Proxy_Broker::the_TAO_CORBA_Contained_Remote_Proxy_Broker ();
   
   this->CORBA_IRObject_setup_collocation (collocated);
 }
 
-void CORBA::Contained::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_Contained::_tao_any_destructor (void *_tao_void_pointer)
 {
-  Contained *tmp = ACE_static_cast (Contained*, _tao_void_pointer);
+  CORBA_Contained *tmp = ACE_static_cast (CORBA_Contained*, _tao_void_pointer);
   CORBA::release (tmp);
 }
 
-CORBA::Contained_ptr CORBA::Contained::_narrow (
+CORBA_Contained_ptr CORBA_Contained::_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL
   )
 {
   if (CORBA::is_nil (obj))
-    return Contained::_nil ();
+    return CORBA_Contained::_nil ();
   if (! obj->_is_local ())
     {
       CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/Contained:1.0" ACE_ENV_ARG_PARAMETER);
-      ACE_CHECK_RETURN (Contained::_nil ());
+      ACE_CHECK_RETURN (CORBA_Contained::_nil ());
       if (is_a == 0)
-        return Contained::_nil ();
+        return CORBA_Contained::_nil ();
     }
-  return Contained::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
+  return CORBA_Contained::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-CORBA::Contained_ptr 
-CORBA::Contained::_unchecked_narrow (
+CORBA_Contained_ptr CORBA_Contained::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
 {
   if (CORBA::is_nil (obj))
-    return Contained::_nil ();
+    return CORBA_Contained::_nil ();
   if (! obj->_is_local ())
     {
       TAO_Stub* stub = obj->_stubobj ();
       if (stub)
         stub->_incr_refcnt ();
-      Contained_ptr default_proxy = Contained::_nil ();
+      CORBA_Contained_ptr default_proxy = CORBA_Contained::_nil ();
 
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          CORBA__TAO_Contained_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&_TAO_CORBA_Contained_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
               default_proxy,
-              ::CORBA::Contained (
+          ::CORBA_Contained (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              Contained::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::CORBA::Contained (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              Contained::_nil ()
-            );
+          CORBA_Contained::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::CORBA_Contained (stub, 0, obj->_servant ()), CORBA_Contained::_nil ());
       return default_proxy;
     }
   else 
     return
       ACE_reinterpret_cast
         (
-          Contained_ptr,
+            CORBA_Contained_ptr,
             obj->_tao_QueryInterface
               (
                 ACE_reinterpret_cast
                   (
                     ptr_arith_t,
-                    &Contained::_tao_class_id
+                      &CORBA_Contained::_tao_class_id
                   )
               )
         );
 }
 
-CORBA::Contained_ptr
-CORBA::Contained::_duplicate (Contained_ptr obj)
+CORBA_Contained_ptr
+CORBA_Contained::_duplicate (CORBA_Contained_ptr obj)
 {
   if (!CORBA::is_nil (obj))
     obj->_add_ref ();
   return obj;
 }
 
-CORBA::Boolean CORBA::Contained::_is_a (const CORBA::Char *value ACE_ENV_ARG_DECL)
+CORBA::Boolean CORBA_Contained::_is_a (const CORBA::Char *value ACE_ENV_ARG_DECL)
 {
   if (
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Contained:1.0")) ||
@@ -4464,22 +4218,22 @@
     return this->CORBA_Object::_is_a (value ACE_ENV_ARG_PARAMETER);
 }
 
-void *CORBA::Contained::_tao_QueryInterface (ptr_arith_t type)
+void *CORBA_Contained::_tao_QueryInterface (ptr_arith_t type)
 {
   void *retv = 0;
   if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, Contained)::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, IRObject)::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -4492,29 +4246,29 @@
   return retv;
 }
 
-const char* CORBA::Contained::_interface_repository_id (void) const
+const char* CORBA_Contained::_interface_repository_id (void) const
 {
   return "IDL:omg.org/CORBA/Contained:1.0";
 }
 
-char * CORBA::Contained::id (
-    
+char * CORBA_Contained::id (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.id (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-void CORBA::Contained::id (
+void CORBA_Contained::id (
     const char * id
     ACE_ENV_ARG_DECL
   )
@@ -4522,34 +4276,35 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK;
   
   proxy.id (
       this,
-      id ACE_ENV_ARG_PARAMETER
+      id
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-char * CORBA::Contained::name (
-    
+char * CORBA_Contained::name (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.name (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-void CORBA::Contained::name (
+void CORBA_Contained::name (
     const char * name
     ACE_ENV_ARG_DECL
   )
@@ -4557,34 +4312,35 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK;
   
   proxy.name (
       this,
-      name ACE_ENV_ARG_PARAMETER
+      name
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-char * CORBA::Contained::version (
-    
+char * CORBA_Contained::version (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.version (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-void CORBA::Contained::version (
+void CORBA_Contained::version (
     const char * version
     ACE_ENV_ARG_DECL
   )
@@ -4592,64 +4348,65 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK;
   
   proxy.version (
       this,
-      version ACE_ENV_ARG_PARAMETER
+      version
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::Container_ptr CORBA::Contained::defined_in (
-    
+CORBA_Container_ptr CORBA_Contained::defined_in (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.defined_in (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-char * CORBA::Contained::absolute_name (
-    
+char * CORBA_Contained::absolute_name (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.absolute_name (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::Repository_ptr CORBA::Contained::containing_repository (
-    
+CORBA_Repository_ptr CORBA_Contained::containing_repository (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.containing_repository (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
@@ -4822,37 +4579,37 @@
     sizeof (_oc_CORBA_Contained_Description),
     (char *) &_oc_CORBA_Contained_Description,
     0,
-    sizeof (CORBA::Contained::Description)
+    sizeof (CORBA_Contained::Description)
   );
 
-::CORBA::TypeCode_ptr CORBA::Contained::_tc_Description =
+CORBA::TypeCode_ptr CORBA_Contained::_tc_Description =
   &_tc_TAO_tc_CORBA_Contained_Description;
 
-void CORBA::Contained::Description::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_Contained::Description::_tao_any_destructor (void *_tao_void_pointer)
 {
   Description *tmp = ACE_static_cast (Description*, _tao_void_pointer);
   delete tmp;
 }
 
-::CORBA::Contained::Description * CORBA::Contained::describe (
-    
+CORBA_Contained::Description * CORBA_Contained::describe (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.describe (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-void CORBA::Contained::move (
-    CORBA::Container_ptr new_container,
+void CORBA_Contained::move (
+    CORBA_Container_ptr new_container,
     const char * new_name,
     const char * new_version
     ACE_ENV_ARG_DECL
@@ -4861,50 +4618,19 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Contained_Proxy_Impl &proxy = 
-    this->the_TAO_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Contained_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Contained_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK;
   
   proxy.move (
       this,
       new_container,
       new_name,
-      new_version ACE_ENV_ARG_PARAMETER
+      new_version
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-static const CORBA::Long _oc_CORBA_Contained[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  32,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f436f), 
-  ACE_NTOHL (0x6e746169), 
-  ACE_NTOHL (0x6e65643a), 
-  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Contained:1.0
-  10,
-  ACE_NTOHL (0x436f6e74), 
-  ACE_NTOHL (0x61696e65), 
-  ACE_NTOHL (0x64000000),  // name = Contained
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_Contained (
-    CORBA::tk_objref,
-    sizeof (_oc_CORBA_Contained),
-    (char *) &_oc_CORBA_Contained,
-    0,
-    sizeof (CORBA::Contained)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_Contained, &_tc_TAO_tc_CORBA_Contained)
-TAO_NAMESPACE_END
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 
 #if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_CONTAINEDSEQ_CS_)
@@ -4912,19 +4638,19 @@
 
 // The Base_Sequence functions, please see tao/Sequence.h
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_allocate_buffer (CORBA::ULong length)
+_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_allocate_buffer (CORBA::ULong length)
 {
-  CORBA::Contained **tmp = 0;
+  CORBA_Contained **tmp = 0;
   tmp = _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::allocbuf (length);
   
   if (this->buffer_ != 0)
   {
-    CORBA::Contained **old = ACE_reinterpret_cast (CORBA::Contained**, this->buffer_);
+    CORBA_Contained **old = ACE_reinterpret_cast (CORBA_Contained**, this->buffer_);
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         if (!this->release_)
           {
-            tmp[i] = CORBA::Contained::_duplicate (old[i]);
+            tmp[i] = CORBA_Contained::_duplicate (old[i]);
           }
         else
           {
@@ -4941,55 +4667,55 @@
 }
 
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_deallocate_buffer (void)
+_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_deallocate_buffer (void)
 {
   if (this->buffer_ == 0 || this->release_ == 0)
     return;
-  CORBA::Contained **tmp = ACE_reinterpret_cast (CORBA::Contained**, this->buffer_);
+  CORBA_Contained **tmp = ACE_reinterpret_cast (CORBA_Contained**, this->buffer_);
   
   for (CORBA::ULong i = 0; i < this->length_; ++i)
     {
       CORBA::release (tmp[i]);
-      tmp[i] = CORBA::Contained::_nil ();
+      tmp[i] = CORBA_Contained::_nil ();
     }
   
   _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::freebuf (tmp);
   this->buffer_ = 0;
 }
 
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::~_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (void)
+_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::~_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq (void)
 {
   this->_deallocate_buffer ();
 }
 
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
+_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
 {
-  CORBA::Contained **tmp = ACE_reinterpret_cast (CORBA::Contained**, this->buffer_);
+  CORBA_Contained **tmp = ACE_reinterpret_cast (CORBA_Contained**, this->buffer_);
   
   for (CORBA::ULong i = nl; i < ol; ++i)
     {
       CORBA::release (tmp[i]);
-      tmp[i] = CORBA::Contained::_nil ();
+      tmp[i] = CORBA_Contained::_nil ();
     }
 }
 
 void 
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_downcast (
+_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_downcast (
     void* target,
     CORBA_Object *src
     ACE_ENV_ARG_DECL
   )
 {
-  CORBA::Contained **tmp = ACE_static_cast (CORBA::Contained**, target);
-  *tmp = CORBA::Contained::_narrow (src ACE_ENV_ARG_PARAMETER);
+  CORBA_Contained **tmp = ACE_static_cast (CORBA_Contained**, target);
+  *tmp = CORBA_Contained::_narrow (src ACE_ENV_ARG_PARAMETER);
   ACE_CHECK;
 }
 
 CORBA_Object*
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_upcast (void *src) const
+_TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq::_upcast (void *src) const
 {
-  CORBA::Contained **tmp = ACE_static_cast (CORBA::Contained**, src);
+  CORBA_Contained **tmp = ACE_static_cast (CORBA_Contained**, src);
   return *tmp;
 }
 
@@ -5002,105 +4728,49 @@
 #define _CORBA_CONTAINEDSEQ_CS_
 
 // *************************************************************
-// CORBA::ContainedSeq
+// CORBA_ContainedSeq
 // *************************************************************
 
-CORBA::ContainedSeq::ContainedSeq (void)
+CORBA_ContainedSeq::CORBA_ContainedSeq (void)
 {}
-CORBA::ContainedSeq::ContainedSeq (CORBA::ULong max) // uses max size
+CORBA_ContainedSeq::CORBA_ContainedSeq (CORBA::ULong max) // uses max size
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::Contained,CORBA::Contained_var>
+TAO_Unbounded_Object_Sequence<CORBA_Contained,CORBA_Contained_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA::ContainedSeq::ContainedSeq (CORBA::ULong max, CORBA::ULong length, CORBA::Contained_ptr *buffer, CORBA::Boolean release)
+CORBA_ContainedSeq::CORBA_ContainedSeq (CORBA::ULong max, CORBA::ULong length, CORBA_Contained_ptr *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::Contained,CORBA::Contained_var>
+TAO_Unbounded_Object_Sequence<CORBA_Contained,CORBA_Contained_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
-CORBA::ContainedSeq::ContainedSeq (const ContainedSeq &seq) // copy ctor
+CORBA_ContainedSeq::CORBA_ContainedSeq (const CORBA_ContainedSeq &seq) // copy ctor
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_ContainedSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::Contained,CORBA::Contained_var>
+TAO_Unbounded_Object_Sequence<CORBA_Contained,CORBA_Contained_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
-CORBA::ContainedSeq::~ContainedSeq (void) // dtor
+CORBA_ContainedSeq::~CORBA_ContainedSeq (void) // dtor
 {}
-void CORBA::ContainedSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_ContainedSeq::_tao_any_destructor (void *_tao_void_pointer)
 {
-  ContainedSeq *tmp = ACE_static_cast (ContainedSeq*, _tao_void_pointer);
+  CORBA_ContainedSeq *tmp = ACE_static_cast (CORBA_ContainedSeq*, _tao_void_pointer);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_ContainedSeq[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  35,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f436f), 
-  ACE_NTOHL (0x6e746169), 
-  ACE_NTOHL (0x6e656453), 
-  ACE_NTOHL (0x65713a31), 
-  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ContainedSeq:1.0
-  13,
-  ACE_NTOHL (0x436f6e74), 
-  ACE_NTOHL (0x61696e65), 
-  ACE_NTOHL (0x64536571), 
-  ACE_NTOHL (0x0),  // name = ContainedSeq
-  CORBA::tk_sequence, // typecode kind
-  72, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_objref, // typecode kind
-    56, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      32,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x412f436f), 
-      ACE_NTOHL (0x6e746169), 
-      ACE_NTOHL (0x6e65643a), 
-      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Contained:1.0
-      10,
-      ACE_NTOHL (0x436f6e74), 
-      ACE_NTOHL (0x61696e65), 
-      ACE_NTOHL (0x64000000),  // name = Contained
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_ContainedSeq (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_ContainedSeq),
-    (char *) &_oc_CORBA_ContainedSeq,
-    0,
-    sizeof (CORBA::ContainedSeq)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ContainedSeq, &_tc_TAO_tc_CORBA_ContainedSeq)
-TAO_NAMESPACE_END
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 
 #if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_INTERFACEDEFSEQ_CS_)
@@ -5108,14 +4778,14 @@
 
 // The Base_Sequence functions, please see tao/Sequence.h
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_allocate_buffer (CORBA::ULong length)
+_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_allocate_buffer (CORBA::ULong length)
 {
-  CORBA::InterfaceDef **tmp = 0;
+  CORBA_InterfaceDef **tmp = 0;
   tmp = _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::allocbuf (length);
   
   if (this->buffer_ != 0)
   {
-    CORBA::InterfaceDef **old = ACE_reinterpret_cast (CORBA::InterfaceDef**, this->buffer_);
+    CORBA_InterfaceDef **old = ACE_reinterpret_cast (CORBA_InterfaceDef**, this->buffer_);
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         if (!this->release_)
@@ -5137,11 +4807,11 @@
 }
 
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_deallocate_buffer (void)
+_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_deallocate_buffer (void)
 {
   if (this->buffer_ == 0 || this->release_ == 0)
     return;
-  CORBA::InterfaceDef **tmp = ACE_reinterpret_cast (CORBA::InterfaceDef**, this->buffer_);
+  CORBA_InterfaceDef **tmp = ACE_reinterpret_cast (CORBA_InterfaceDef**, this->buffer_);
   
   for (CORBA::ULong i = 0; i < this->length_; ++i)
     {
@@ -5153,15 +4823,15 @@
   this->buffer_ = 0;
 }
 
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::~_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (void)
+_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::~_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq (void)
 {
   this->_deallocate_buffer ();
 }
 
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
+_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
 {
-  CORBA::InterfaceDef **tmp = ACE_reinterpret_cast (CORBA::InterfaceDef**, this->buffer_);
+  CORBA_InterfaceDef **tmp = ACE_reinterpret_cast (CORBA_InterfaceDef**, this->buffer_);
   
   for (CORBA::ULong i = nl; i < ol; ++i)
     {
@@ -5171,19 +4841,19 @@
 }
 
 void 
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_downcast (
+_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_downcast (
     void* target,
     CORBA_Object *src
     ACE_ENV_ARG_DECL
   )
 {
-  CORBA::InterfaceDef **tmp = ACE_static_cast (CORBA::InterfaceDef**, target);
+  CORBA_InterfaceDef **tmp = ACE_static_cast (CORBA_InterfaceDef**, target);
   *tmp = tao_CORBA_InterfaceDef_narrow (src ACE_ENV_ARG_PARAMETER);
   ACE_CHECK;
 }
 
 CORBA_Object*
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_upcast (void *src) const
+_TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq::_upcast (void *src) const
 {
   return tao_CORBA_InterfaceDef_upcast (src);
 }
@@ -5197,123 +4867,64 @@
 #define _CORBA_INTERFACEDEFSEQ_CS_
 
 // *************************************************************
-// CORBA::InterfaceDefSeq
+// CORBA_InterfaceDefSeq
 // *************************************************************
 
-CORBA::InterfaceDefSeq::InterfaceDefSeq (void)
+CORBA_InterfaceDefSeq::CORBA_InterfaceDefSeq (void)
 {}
-CORBA::InterfaceDefSeq::InterfaceDefSeq (CORBA::ULong max) // uses max size
+CORBA_InterfaceDefSeq::CORBA_InterfaceDefSeq (CORBA::ULong max) // uses max size
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::InterfaceDef,CORBA::InterfaceDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_InterfaceDef,CORBA_InterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA::InterfaceDefSeq::InterfaceDefSeq (CORBA::ULong max, CORBA::ULong length, CORBA::InterfaceDef_ptr *buffer, CORBA::Boolean release)
+CORBA_InterfaceDefSeq::CORBA_InterfaceDefSeq (CORBA::ULong max, CORBA::ULong length, CORBA_InterfaceDef_ptr *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::InterfaceDef,CORBA::InterfaceDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_InterfaceDef,CORBA_InterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
-CORBA::InterfaceDefSeq::InterfaceDefSeq (const InterfaceDefSeq &seq) // copy ctor
+CORBA_InterfaceDefSeq::CORBA_InterfaceDefSeq (const CORBA_InterfaceDefSeq &seq) // copy ctor
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_InterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::InterfaceDef,CORBA::InterfaceDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_InterfaceDef,CORBA_InterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
-CORBA::InterfaceDefSeq::~InterfaceDefSeq (void) // dtor
+CORBA_InterfaceDefSeq::~CORBA_InterfaceDefSeq (void) // dtor
 {}
-void CORBA::InterfaceDefSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_InterfaceDefSeq::_tao_any_destructor (void *_tao_void_pointer)
 {
-  InterfaceDefSeq *tmp = ACE_static_cast (InterfaceDefSeq*, _tao_void_pointer);
+  CORBA_InterfaceDefSeq *tmp = ACE_static_cast (CORBA_InterfaceDefSeq*, _tao_void_pointer);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_InterfaceDefSeq[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  38,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f496e), 
-  ACE_NTOHL (0x74657266), 
-  ACE_NTOHL (0x61636544), 
-  ACE_NTOHL (0x65665365), 
-  ACE_NTOHL (0x713a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/InterfaceDefSeq:1.0
-  16,
-  ACE_NTOHL (0x496e7465), 
-  ACE_NTOHL (0x72666163), 
-  ACE_NTOHL (0x65446566), 
-  ACE_NTOHL (0x53657100),  // name = InterfaceDefSeq
-  CORBA::tk_sequence, // typecode kind
-  80, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_objref, // typecode kind
-    64, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      35,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x412f496e), 
-      ACE_NTOHL (0x74657266), 
-      ACE_NTOHL (0x61636544), 
-      ACE_NTOHL (0x65663a31), 
-      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/InterfaceDef:1.0
-      13,
-      ACE_NTOHL (0x496e7465), 
-      ACE_NTOHL (0x72666163), 
-      ACE_NTOHL (0x65446566), 
-      ACE_NTOHL (0x0),  // name = InterfaceDef
-
-    0U,
+#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_InterfaceDefSeq (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_InterfaceDefSeq),
-    (char *) &_oc_CORBA_InterfaceDefSeq,
-    0,
-    sizeof (CORBA::InterfaceDefSeq)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_InterfaceDefSeq, &_tc_TAO_tc_CORBA_InterfaceDefSeq)
-TAO_NAMESPACE_END
-
-
-#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
-
-#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CS_)
-#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CS_
+#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CS_)
+#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_VALUEDEFSEQ_CS_
 
 // The Base_Sequence functions, please see tao/Sequence.h
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_allocate_buffer (CORBA::ULong length)
+_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_allocate_buffer (CORBA::ULong length)
 {
-  CORBA::ValueDef **tmp = 0;
+  CORBA_ValueDef **tmp = 0;
   tmp = _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::allocbuf (length);
   
   if (this->buffer_ != 0)
   {
-    CORBA::ValueDef **old = ACE_reinterpret_cast (CORBA::ValueDef**, this->buffer_);
+    CORBA_ValueDef **old = ACE_reinterpret_cast (CORBA_ValueDef**, this->buffer_);
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         if (!this->release_)
@@ -5335,11 +4946,11 @@
 }
 
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_deallocate_buffer (void)
+_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_deallocate_buffer (void)
 {
   if (this->buffer_ == 0 || this->release_ == 0)
     return;
-  CORBA::ValueDef **tmp = ACE_reinterpret_cast (CORBA::ValueDef**, this->buffer_);
+  CORBA_ValueDef **tmp = ACE_reinterpret_cast (CORBA_ValueDef**, this->buffer_);
   
   for (CORBA::ULong i = 0; i < this->length_; ++i)
     {
@@ -5351,15 +4962,15 @@
   this->buffer_ = 0;
 }
 
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::~_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (void)
+_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::~_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq (void)
 {
   this->_deallocate_buffer ();
 }
 
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
+_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
 {
-  CORBA::ValueDef **tmp = ACE_reinterpret_cast (CORBA::ValueDef**, this->buffer_);
+  CORBA_ValueDef **tmp = ACE_reinterpret_cast (CORBA_ValueDef**, this->buffer_);
   
   for (CORBA::ULong i = nl; i < ol; ++i)
     {
@@ -5369,19 +4980,19 @@
 }
 
 void 
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_downcast (
+_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_downcast (
     void* target,
     CORBA_Object *src
     ACE_ENV_ARG_DECL
   )
 {
-  CORBA::ValueDef **tmp = ACE_static_cast (CORBA::ValueDef**, target);
+  CORBA_ValueDef **tmp = ACE_static_cast (CORBA_ValueDef**, target);
   *tmp = tao_CORBA_ValueDef_narrow (src ACE_ENV_ARG_PARAMETER);
   ACE_CHECK;
 }
 
 CORBA_Object*
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_upcast (void *src) const
+_TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq::_upcast (void *src) const
 {
   return tao_CORBA_ValueDef_upcast (src);
 }
@@ -5395,104 +5006,49 @@
 #define _CORBA_VALUEDEFSEQ_CS_
 
 // *************************************************************
-// CORBA::ValueDefSeq
+// CORBA_ValueDefSeq
 // *************************************************************
 
-CORBA::ValueDefSeq::ValueDefSeq (void)
+CORBA_ValueDefSeq::CORBA_ValueDefSeq (void)
 {}
-CORBA::ValueDefSeq::ValueDefSeq (CORBA::ULong max) // uses max size
+CORBA_ValueDefSeq::CORBA_ValueDefSeq (CORBA::ULong max) // uses max size
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::ValueDef,CORBA::ValueDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_ValueDef,CORBA_ValueDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA::ValueDefSeq::ValueDefSeq (CORBA::ULong max, CORBA::ULong length, CORBA::ValueDef_ptr *buffer, CORBA::Boolean release)
+CORBA_ValueDefSeq::CORBA_ValueDefSeq (CORBA::ULong max, CORBA::ULong length, CORBA_ValueDef_ptr *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::ValueDef,CORBA::ValueDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_ValueDef,CORBA_ValueDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
-CORBA::ValueDefSeq::ValueDefSeq (const ValueDefSeq &seq) // copy ctor
+CORBA_ValueDefSeq::CORBA_ValueDefSeq (const CORBA_ValueDefSeq &seq) // copy ctor
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_ValueDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::ValueDef,CORBA::ValueDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_ValueDef,CORBA_ValueDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
-CORBA::ValueDefSeq::~ValueDefSeq (void) // dtor
+CORBA_ValueDefSeq::~CORBA_ValueDefSeq (void) // dtor
 {}
-void CORBA::ValueDefSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_ValueDefSeq::_tao_any_destructor (void *_tao_void_pointer)
 {
-  ValueDefSeq *tmp = ACE_static_cast (ValueDefSeq*, _tao_void_pointer);
+  CORBA_ValueDefSeq *tmp = ACE_static_cast (CORBA_ValueDefSeq*, _tao_void_pointer);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_ValueDefSeq[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  34,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f5661), 
-  ACE_NTOHL (0x6c756544), 
-  ACE_NTOHL (0x65665365), 
-  ACE_NTOHL (0x713a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/ValueDefSeq:1.0
-  12,
-  ACE_NTOHL (0x56616c75), 
-  ACE_NTOHL (0x65446566), 
-  ACE_NTOHL (0x53657100),  // name = ValueDefSeq
-  CORBA::tk_sequence, // typecode kind
-  72, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_objref, // typecode kind
-    56, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      31,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x412f5661), 
-      ACE_NTOHL (0x6c756544), 
-      ACE_NTOHL (0x65663a31), 
-      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/ValueDef:1.0
-      9,
-      ACE_NTOHL (0x56616c75), 
-      ACE_NTOHL (0x65446566), 
-      ACE_NTOHL (0x0),  // name = ValueDef
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_ValueDefSeq (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_ValueDefSeq),
-    (char *) &_oc_CORBA_ValueDefSeq,
-    0,
-    sizeof (CORBA::ValueDefSeq)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_ValueDefSeq, &_tc_TAO_tc_CORBA_ValueDefSeq)
-TAO_NAMESPACE_END
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 
 #if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_ABSTRACTINTERFACEDEFSEQ_CS_)
@@ -5500,14 +5056,14 @@
 
 // The Base_Sequence functions, please see tao/Sequence.h
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_allocate_buffer (CORBA::ULong length)
+_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_allocate_buffer (CORBA::ULong length)
 {
-  CORBA::AbstractInterfaceDef **tmp = 0;
+  CORBA_AbstractInterfaceDef **tmp = 0;
   tmp = _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::allocbuf (length);
   
   if (this->buffer_ != 0)
   {
-    CORBA::AbstractInterfaceDef **old = ACE_reinterpret_cast (CORBA::AbstractInterfaceDef**, this->buffer_);
+    CORBA_AbstractInterfaceDef **old = ACE_reinterpret_cast (CORBA_AbstractInterfaceDef**, this->buffer_);
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         if (!this->release_)
@@ -5529,11 +5085,11 @@
 }
 
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_deallocate_buffer (void)
+_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_deallocate_buffer (void)
 {
   if (this->buffer_ == 0 || this->release_ == 0)
     return;
-  CORBA::AbstractInterfaceDef **tmp = ACE_reinterpret_cast (CORBA::AbstractInterfaceDef**, this->buffer_);
+  CORBA_AbstractInterfaceDef **tmp = ACE_reinterpret_cast (CORBA_AbstractInterfaceDef**, this->buffer_);
   
   for (CORBA::ULong i = 0; i < this->length_; ++i)
     {
@@ -5545,15 +5101,15 @@
   this->buffer_ = 0;
 }
 
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::~_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (void)
+_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::~_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq (void)
 {
   this->_deallocate_buffer ();
 }
 
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
+_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
 {
-  CORBA::AbstractInterfaceDef **tmp = ACE_reinterpret_cast (CORBA::AbstractInterfaceDef**, this->buffer_);
+  CORBA_AbstractInterfaceDef **tmp = ACE_reinterpret_cast (CORBA_AbstractInterfaceDef**, this->buffer_);
   
   for (CORBA::ULong i = nl; i < ol; ++i)
     {
@@ -5563,19 +5119,19 @@
 }
 
 void 
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_downcast (
+_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_downcast (
     void* target,
     CORBA_Object *src
     ACE_ENV_ARG_DECL
   )
 {
-  CORBA::AbstractInterfaceDef **tmp = ACE_static_cast (CORBA::AbstractInterfaceDef**, target);
+  CORBA_AbstractInterfaceDef **tmp = ACE_static_cast (CORBA_AbstractInterfaceDef**, target);
   *tmp = tao_CORBA_AbstractInterfaceDef_narrow (src ACE_ENV_ARG_PARAMETER);
   ACE_CHECK;
 }
 
 CORBA_Object*
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_upcast (void *src) const
+_TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq::_upcast (void *src) const
 {
   return tao_CORBA_AbstractInterfaceDef_upcast (src);
 }
@@ -5589,116 +5145,49 @@
 #define _CORBA_ABSTRACTINTERFACEDEFSEQ_CS_
 
 // *************************************************************
-// CORBA::AbstractInterfaceDefSeq
+// CORBA_AbstractInterfaceDefSeq
 // *************************************************************
 
-CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (void)
+CORBA_AbstractInterfaceDefSeq::CORBA_AbstractInterfaceDefSeq (void)
 {}
-CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (CORBA::ULong max) // uses max size
+CORBA_AbstractInterfaceDefSeq::CORBA_AbstractInterfaceDefSeq (CORBA::ULong max) // uses max size
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::AbstractInterfaceDef,CORBA::AbstractInterfaceDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_AbstractInterfaceDef,CORBA_AbstractInterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (CORBA::ULong max, CORBA::ULong length, CORBA::AbstractInterfaceDef_ptr *buffer, CORBA::Boolean release)
+CORBA_AbstractInterfaceDefSeq::CORBA_AbstractInterfaceDefSeq (CORBA::ULong max, CORBA::ULong length, CORBA_AbstractInterfaceDef_ptr *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::AbstractInterfaceDef,CORBA::AbstractInterfaceDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_AbstractInterfaceDef,CORBA_AbstractInterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
-CORBA::AbstractInterfaceDefSeq::AbstractInterfaceDefSeq (const AbstractInterfaceDefSeq &seq) // copy ctor
+CORBA_AbstractInterfaceDefSeq::CORBA_AbstractInterfaceDefSeq (const CORBA_AbstractInterfaceDefSeq &seq) // copy ctor
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_AbstractInterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::AbstractInterfaceDef,CORBA::AbstractInterfaceDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_AbstractInterfaceDef,CORBA_AbstractInterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
-CORBA::AbstractInterfaceDefSeq::~AbstractInterfaceDefSeq (void) // dtor
+CORBA_AbstractInterfaceDefSeq::~CORBA_AbstractInterfaceDefSeq (void) // dtor
 {}
-void CORBA::AbstractInterfaceDefSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_AbstractInterfaceDefSeq::_tao_any_destructor (void *_tao_void_pointer)
 {
-  AbstractInterfaceDefSeq *tmp = ACE_static_cast (AbstractInterfaceDefSeq*, _tao_void_pointer);
+  CORBA_AbstractInterfaceDefSeq *tmp = ACE_static_cast (CORBA_AbstractInterfaceDefSeq*, _tao_void_pointer);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_AbstractInterfaceDefSeq[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  46,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f4162), 
-  ACE_NTOHL (0x73747261), 
-  ACE_NTOHL (0x6374496e), 
-  ACE_NTOHL (0x74657266), 
-  ACE_NTOHL (0x61636544), 
-  ACE_NTOHL (0x65665365), 
-  ACE_NTOHL (0x713a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/AbstractInterfaceDefSeq:1.0
-  24,
-  ACE_NTOHL (0x41627374), 
-  ACE_NTOHL (0x72616374), 
-  ACE_NTOHL (0x496e7465), 
-  ACE_NTOHL (0x72666163), 
-  ACE_NTOHL (0x65446566), 
-  ACE_NTOHL (0x53657100),  // name = AbstractInterfaceDefSeq
-  CORBA::tk_sequence, // typecode kind
-  96, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_objref, // typecode kind
-    80, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      43,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x412f4162), 
-      ACE_NTOHL (0x73747261), 
-      ACE_NTOHL (0x6374496e), 
-      ACE_NTOHL (0x74657266), 
-      ACE_NTOHL (0x61636544), 
-      ACE_NTOHL (0x65663a31), 
-      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/AbstractInterfaceDef:1.0
-      21,
-      ACE_NTOHL (0x41627374), 
-      ACE_NTOHL (0x72616374), 
-      ACE_NTOHL (0x496e7465), 
-      ACE_NTOHL (0x72666163), 
-      ACE_NTOHL (0x65446566), 
-      ACE_NTOHL (0x0),  // name = AbstractInterfaceDef
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_AbstractInterfaceDefSeq (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_AbstractInterfaceDefSeq),
-    (char *) &_oc_CORBA_AbstractInterfaceDefSeq,
-    0,
-    sizeof (CORBA::AbstractInterfaceDefSeq)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_AbstractInterfaceDefSeq, &_tc_TAO_tc_CORBA_AbstractInterfaceDefSeq)
-TAO_NAMESPACE_END
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 
 #if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_LOCALINTERFACEDEFSEQ_CS_)
@@ -5706,14 +5195,14 @@
 
 // The Base_Sequence functions, please see tao/Sequence.h
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_allocate_buffer (CORBA::ULong length)
+_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_allocate_buffer (CORBA::ULong length)
 {
-  CORBA::LocalInterfaceDef **tmp = 0;
+  CORBA_LocalInterfaceDef **tmp = 0;
   tmp = _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::allocbuf (length);
   
   if (this->buffer_ != 0)
   {
-    CORBA::LocalInterfaceDef **old = ACE_reinterpret_cast (CORBA::LocalInterfaceDef**, this->buffer_);
+    CORBA_LocalInterfaceDef **old = ACE_reinterpret_cast (CORBA_LocalInterfaceDef**, this->buffer_);
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         if (!this->release_)
@@ -5735,11 +5224,11 @@
 }
 
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_deallocate_buffer (void)
+_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_deallocate_buffer (void)
 {
   if (this->buffer_ == 0 || this->release_ == 0)
     return;
-  CORBA::LocalInterfaceDef **tmp = ACE_reinterpret_cast (CORBA::LocalInterfaceDef**, this->buffer_);
+  CORBA_LocalInterfaceDef **tmp = ACE_reinterpret_cast (CORBA_LocalInterfaceDef**, this->buffer_);
   
   for (CORBA::ULong i = 0; i < this->length_; ++i)
     {
@@ -5751,15 +5240,15 @@
   this->buffer_ = 0;
 }
 
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::~_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (void)
+_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::~_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq (void)
 {
   this->_deallocate_buffer ();
 }
 
 void
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
+_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
 {
-  CORBA::LocalInterfaceDef **tmp = ACE_reinterpret_cast (CORBA::LocalInterfaceDef**, this->buffer_);
+  CORBA_LocalInterfaceDef **tmp = ACE_reinterpret_cast (CORBA_LocalInterfaceDef**, this->buffer_);
   
   for (CORBA::ULong i = nl; i < ol; ++i)
     {
@@ -5769,19 +5258,19 @@
 }
 
 void 
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_downcast (
+_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_downcast (
     void* target,
     CORBA_Object *src
     ACE_ENV_ARG_DECL
   )
 {
-  CORBA::LocalInterfaceDef **tmp = ACE_static_cast (CORBA::LocalInterfaceDef**, target);
+  CORBA_LocalInterfaceDef **tmp = ACE_static_cast (CORBA_LocalInterfaceDef**, target);
   *tmp = tao_CORBA_LocalInterfaceDef_narrow (src ACE_ENV_ARG_PARAMETER);
   ACE_CHECK;
 }
 
 CORBA_Object*
-CORBA::_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_upcast (void *src) const
+_TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq::_upcast (void *src) const
 {
   return tao_CORBA_LocalInterfaceDef_upcast (src);
 }
@@ -5795,197 +5284,52 @@
 #define _CORBA_LOCALINTERFACEDEFSEQ_CS_
 
 // *************************************************************
-// CORBA::LocalInterfaceDefSeq
+// CORBA_LocalInterfaceDefSeq
 // *************************************************************
 
-CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (void)
+CORBA_LocalInterfaceDefSeq::CORBA_LocalInterfaceDefSeq (void)
 {}
-CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (CORBA::ULong max) // uses max size
+CORBA_LocalInterfaceDefSeq::CORBA_LocalInterfaceDefSeq (CORBA::ULong max) // uses max size
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::LocalInterfaceDef,CORBA::LocalInterfaceDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_LocalInterfaceDef,CORBA_LocalInterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (CORBA::ULong max, CORBA::ULong length, CORBA::LocalInterfaceDef_ptr *buffer, CORBA::Boolean release)
+CORBA_LocalInterfaceDefSeq::CORBA_LocalInterfaceDefSeq (CORBA::ULong max, CORBA::ULong length, CORBA_LocalInterfaceDef_ptr *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::LocalInterfaceDef,CORBA::LocalInterfaceDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_LocalInterfaceDef,CORBA_LocalInterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
-CORBA::LocalInterfaceDefSeq::LocalInterfaceDefSeq (const LocalInterfaceDefSeq &seq) // copy ctor
+CORBA_LocalInterfaceDefSeq::CORBA_LocalInterfaceDefSeq (const CORBA_LocalInterfaceDefSeq &seq) // copy ctor
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_LocalInterfaceDefSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA::LocalInterfaceDef,CORBA::LocalInterfaceDef_var>
+TAO_Unbounded_Object_Sequence<CORBA_LocalInterfaceDef,CORBA_LocalInterfaceDef_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
-CORBA::LocalInterfaceDefSeq::~LocalInterfaceDefSeq (void) // dtor
+CORBA_LocalInterfaceDefSeq::~CORBA_LocalInterfaceDefSeq (void) // dtor
 {}
-void CORBA::LocalInterfaceDefSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_LocalInterfaceDefSeq::_tao_any_destructor (void *_tao_void_pointer)
 {
-  LocalInterfaceDefSeq *tmp = ACE_static_cast (LocalInterfaceDefSeq*, _tao_void_pointer);
+  CORBA_LocalInterfaceDefSeq *tmp = ACE_static_cast (CORBA_LocalInterfaceDefSeq*, _tao_void_pointer);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_LocalInterfaceDefSeq[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  43,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f4c6f), 
-  ACE_NTOHL (0x63616c49), 
-  ACE_NTOHL (0x6e746572), 
-  ACE_NTOHL (0x66616365), 
-  ACE_NTOHL (0x44656653), 
-  ACE_NTOHL (0x65713a31), 
-  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/LocalInterfaceDefSeq:1.0
-  21,
-  ACE_NTOHL (0x4c6f6361), 
-  ACE_NTOHL (0x6c496e74), 
-  ACE_NTOHL (0x65726661), 
-  ACE_NTOHL (0x63654465), 
-  ACE_NTOHL (0x66536571), 
-  ACE_NTOHL (0x0),  // name = LocalInterfaceDefSeq
-  CORBA::tk_sequence, // typecode kind
-  88, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_objref, // typecode kind
-    72, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      40,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x412f4c6f), 
-      ACE_NTOHL (0x63616c49), 
-      ACE_NTOHL (0x6e746572), 
-      ACE_NTOHL (0x66616365), 
-      ACE_NTOHL (0x4465663a), 
-      ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/LocalInterfaceDef:1.0
-      18,
-      ACE_NTOHL (0x4c6f6361), 
-      ACE_NTOHL (0x6c496e74), 
-      ACE_NTOHL (0x65726661), 
-      ACE_NTOHL (0x63654465), 
-      ACE_NTOHL (0x66000000),  // name = LocalInterfaceDef
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_LocalInterfaceDefSeq (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_LocalInterfaceDefSeq),
-    (char *) &_oc_CORBA_LocalInterfaceDefSeq,
-    0,
-    sizeof (CORBA::LocalInterfaceDefSeq)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_LocalInterfaceDefSeq, &_tc_TAO_tc_CORBA_LocalInterfaceDefSeq)
-TAO_NAMESPACE_END
-
-static const CORBA::Long _oc_CORBA_StructMember[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  35,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f5374), 
-  ACE_NTOHL (0x72756374), 
-  ACE_NTOHL (0x4d656d62), 
-  ACE_NTOHL (0x65723a31), 
-  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
-  13,
-  ACE_NTOHL (0x53747275), 
-  ACE_NTOHL (0x63744d65), 
-  ACE_NTOHL (0x6d626572), 
-  ACE_NTOHL (0x0),  // name = StructMember
-  3, // member count
-  5,
-  ACE_NTOHL (0x6e616d65), 
-  ACE_NTOHL (0x0),  // name = name
-  CORBA::tk_alias, // typecode kind for typedefs
-  68, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    33,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f4964), 
-    ACE_NTOHL (0x656e7469), 
-    ACE_NTOHL (0x66696572), 
-    ACE_NTOHL (0x3a312e30), 
-    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
-    11,
-    ACE_NTOHL (0x4964656e), 
-    ACE_NTOHL (0x74696669), 
-    ACE_NTOHL (0x65720000),  // name = Identifier
-    CORBA::tk_string, 
-    0U, // string length
-
-  5,
-  ACE_NTOHL (0x74797065), 
-  ACE_NTOHL (0x0),  // name = type
-  CORBA::tk_TypeCode,
-
-  9,
-  ACE_NTOHL (0x74797065), 
-  ACE_NTOHL (0x5f646566), 
-  ACE_NTOHL (0x0),  // name = type_def
-  CORBA::tk_objref, // typecode kind
-  52, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    30,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f4944), 
-    ACE_NTOHL (0x4c547970), 
-    ACE_NTOHL (0x653a312e), 
-    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
-    8,
-    ACE_NTOHL (0x49444c54), 
-    ACE_NTOHL (0x79706500),  // name = IDLType
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_StructMember (
-    CORBA::tk_struct,
-    sizeof (_oc_CORBA_StructMember),
-    (char *) &_oc_CORBA_StructMember,
-    0,
-    sizeof (CORBA::StructMember)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_StructMember, &_tc_TAO_tc_CORBA_StructMember)
-TAO_NAMESPACE_END
-
-void CORBA::StructMember::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_StructMember::_tao_any_destructor (void *_tao_void_pointer)
 {
-  StructMember *tmp = ACE_static_cast (StructMember*, _tao_void_pointer);
+  CORBA_StructMember *tmp = ACE_static_cast (CORBA_StructMember*, _tao_void_pointer);
   delete tmp;
 }
 
@@ -5996,14 +5340,14 @@
 #define __TAO_UNBOUNDED_SEQUENCE_CORBA_STRUCTMEMBERSEQ_CS_
 
 void
-CORBA::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_allocate_buffer (CORBA::ULong length)
+_TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_allocate_buffer (CORBA::ULong length)
 {
-  CORBA::StructMember* tmp = 0;
+  CORBA_StructMember* tmp = 0;
   tmp = _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::allocbuf (length);
   
   if (this->buffer_ != 0)
   {
-    CORBA::StructMember *old = ACE_reinterpret_cast (CORBA::StructMember *,this->buffer_);
+    CORBA_StructMember *old = ACE_reinterpret_cast (CORBA_StructMember *,this->buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp[i] = old[i];
@@ -6016,18 +5360,18 @@
 }
 
 void
-CORBA::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_deallocate_buffer (void)
+_TAO_Unbounded_Sequence_CORBA_StructMemberSeq::_deallocate_buffer (void)
 {
   if (this->buffer_ == 0 || this->release_ == 0)
     return;
   
-  CORBA::StructMember *tmp = ACE_reinterpret_cast (CORBA::StructMember *,this->buffer_);
+  CORBA_StructMember *tmp = ACE_reinterpret_cast (CORBA_StructMember *,this->buffer_);
   
   _TAO_Unbounded_Sequence_CORBA_StructMemberSeq::freebuf (tmp);
   this->buffer_ = 0;
 } 
 
-CORBA::_TAO_Unbounded_Sequence_CORBA_StructMemberSeq::~_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (void) // Dtor.
+_TAO_Unbounded_Sequence_CORBA_StructMemberSeq::~_TAO_Unbounded_Sequence_CORBA_StructMemberSeq (void) // Dtor.
 {
   this->_deallocate_buffer ();
 }
@@ -6042,293 +5386,52 @@
 #define _CORBA_STRUCTMEMBERSEQ_CS_
 
 // *************************************************************
-// CORBA::StructMemberSeq
+// CORBA_StructMemberSeq
 // *************************************************************
 
-CORBA::StructMemberSeq::StructMemberSeq (void)
+CORBA_StructMemberSeq::CORBA_StructMemberSeq (void)
 {}
-CORBA::StructMemberSeq::StructMemberSeq (CORBA::ULong max) // uses max size
+CORBA_StructMemberSeq::CORBA_StructMemberSeq (CORBA::ULong max) // uses max size
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_StructMemberSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::StructMember>
+TAO_Unbounded_Sequence<CORBA_StructMember>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA::StructMemberSeq::StructMemberSeq (CORBA::ULong max, CORBA::ULong length, CORBA::StructMember *buffer, CORBA::Boolean release)
+CORBA_StructMemberSeq::CORBA_StructMemberSeq (CORBA::ULong max, CORBA::ULong length, CORBA_StructMember *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_StructMemberSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::StructMember>
+TAO_Unbounded_Sequence<CORBA_StructMember>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
-CORBA::StructMemberSeq::StructMemberSeq (const StructMemberSeq &seq) // copy ctor
+CORBA_StructMemberSeq::CORBA_StructMemberSeq (const CORBA_StructMemberSeq &seq) // copy ctor
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_StructMemberSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::StructMember>
+TAO_Unbounded_Sequence<CORBA_StructMember>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
-CORBA::StructMemberSeq::~StructMemberSeq (void) // dtor
+CORBA_StructMemberSeq::~CORBA_StructMemberSeq (void) // dtor
 {}
-void CORBA::StructMemberSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_StructMemberSeq::_tao_any_destructor (void *_tao_void_pointer)
 {
-  StructMemberSeq *tmp = ACE_static_cast (StructMemberSeq*, _tao_void_pointer);
+  CORBA_StructMemberSeq *tmp = ACE_static_cast (CORBA_StructMemberSeq*, _tao_void_pointer);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_StructMemberSeq[] =
+void CORBA_Initializer::_tao_any_destructor (void *_tao_void_pointer)
 {
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  38,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f5374), 
-  ACE_NTOHL (0x72756374), 
-  ACE_NTOHL (0x4d656d62), 
-  ACE_NTOHL (0x65725365), 
-  ACE_NTOHL (0x713a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/StructMemberSeq:1.0
-  16,
-  ACE_NTOHL (0x53747275), 
-  ACE_NTOHL (0x63744d65), 
-  ACE_NTOHL (0x6d626572), 
-  ACE_NTOHL (0x53657100),  // name = StructMemberSeq
-  CORBA::tk_sequence, // typecode kind
-  264, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_struct, // typecode kind
-    248, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      35,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x412f5374), 
-      ACE_NTOHL (0x72756374), 
-      ACE_NTOHL (0x4d656d62), 
-      ACE_NTOHL (0x65723a31), 
-      ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
-      13,
-      ACE_NTOHL (0x53747275), 
-      ACE_NTOHL (0x63744d65), 
-      ACE_NTOHL (0x6d626572), 
-      ACE_NTOHL (0x0),  // name = StructMember
-      3, // member count
-      5,
-      ACE_NTOHL (0x6e616d65), 
-      ACE_NTOHL (0x0),  // name = name
-      CORBA::tk_alias, // typecode kind for typedefs
-      68, // encapsulation length
-        TAO_ENCAP_BYTE_ORDER, // byte order
-        33,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x6f6d672e), 
-        ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x434f5242), 
-        ACE_NTOHL (0x412f4964), 
-        ACE_NTOHL (0x656e7469), 
-        ACE_NTOHL (0x66696572), 
-        ACE_NTOHL (0x3a312e30), 
-        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
-        11,
-        ACE_NTOHL (0x4964656e), 
-        ACE_NTOHL (0x74696669), 
-        ACE_NTOHL (0x65720000),  // name = Identifier
-        CORBA::tk_string, 
-        0U, // string length
-
-      5,
-      ACE_NTOHL (0x74797065), 
-      ACE_NTOHL (0x0),  // name = type
-      CORBA::tk_TypeCode,
-
-      9,
-      ACE_NTOHL (0x74797065), 
-      ACE_NTOHL (0x5f646566), 
-      ACE_NTOHL (0x0),  // name = type_def
-      CORBA::tk_objref, // typecode kind
-      52, // encapsulation length
-        TAO_ENCAP_BYTE_ORDER, // byte order
-        30,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x6f6d672e), 
-        ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x434f5242), 
-        ACE_NTOHL (0x412f4944), 
-        ACE_NTOHL (0x4c547970), 
-        ACE_NTOHL (0x653a312e), 
-        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
-        8,
-        ACE_NTOHL (0x49444c54), 
-        ACE_NTOHL (0x79706500),  // name = IDLType
-
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_StructMemberSeq (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_StructMemberSeq),
-    (char *) &_oc_CORBA_StructMemberSeq,
-    0,
-    sizeof (CORBA::StructMemberSeq)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_StructMemberSeq, &_tc_TAO_tc_CORBA_StructMemberSeq)
-TAO_NAMESPACE_END
-
-static const CORBA::Long _oc_CORBA_Initializer[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  34,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f496e), 
-  ACE_NTOHL (0x69746961), 
-  ACE_NTOHL (0x6c697a65), 
-  ACE_NTOHL (0x723a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/Initializer:1.0
-  12,
-  ACE_NTOHL (0x496e6974), 
-  ACE_NTOHL (0x69616c69), 
-  ACE_NTOHL (0x7a657200),  // name = Initializer
-  2, // member count
-  8,
-  ACE_NTOHL (0x6d656d62), 
-  ACE_NTOHL (0x65727300),  // name = members
-  CORBA::tk_alias, // typecode kind for typedefs
-  340, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    38,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f5374), 
-    ACE_NTOHL (0x72756374), 
-    ACE_NTOHL (0x4d656d62), 
-    ACE_NTOHL (0x65725365), 
-    ACE_NTOHL (0x713a312e), 
-    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/StructMemberSeq:1.0
-    16,
-    ACE_NTOHL (0x53747275), 
-    ACE_NTOHL (0x63744d65), 
-    ACE_NTOHL (0x6d626572), 
-    ACE_NTOHL (0x53657100),  // name = StructMemberSeq
-    CORBA::tk_sequence, // typecode kind
-    264, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      CORBA::tk_struct, // typecode kind
-      248, // encapsulation length
-        TAO_ENCAP_BYTE_ORDER, // byte order
-        35,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x6f6d672e), 
-        ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x434f5242), 
-        ACE_NTOHL (0x412f5374), 
-        ACE_NTOHL (0x72756374), 
-        ACE_NTOHL (0x4d656d62), 
-        ACE_NTOHL (0x65723a31), 
-        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
-        13,
-        ACE_NTOHL (0x53747275), 
-        ACE_NTOHL (0x63744d65), 
-        ACE_NTOHL (0x6d626572), 
-        ACE_NTOHL (0x0),  // name = StructMember
-        3, // member count
-        5,
-        ACE_NTOHL (0x6e616d65), 
-        ACE_NTOHL (0x0),  // name = name
-        CORBA::tk_alias, // typecode kind for typedefs
-        68, // encapsulation length
-          TAO_ENCAP_BYTE_ORDER, // byte order
-          33,
-          ACE_NTOHL (0x49444c3a), 
-          ACE_NTOHL (0x6f6d672e), 
-          ACE_NTOHL (0x6f72672f), 
-          ACE_NTOHL (0x434f5242), 
-          ACE_NTOHL (0x412f4964), 
-          ACE_NTOHL (0x656e7469), 
-          ACE_NTOHL (0x66696572), 
-          ACE_NTOHL (0x3a312e30), 
-          ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
-          11,
-          ACE_NTOHL (0x4964656e), 
-          ACE_NTOHL (0x74696669), 
-          ACE_NTOHL (0x65720000),  // name = Identifier
-          CORBA::tk_string, 
-          0U, // string length
-
-        5,
-        ACE_NTOHL (0x74797065), 
-        ACE_NTOHL (0x0),  // name = type
-        CORBA::tk_TypeCode,
-
-        9,
-        ACE_NTOHL (0x74797065), 
-        ACE_NTOHL (0x5f646566), 
-        ACE_NTOHL (0x0),  // name = type_def
-        CORBA::tk_objref, // typecode kind
-        52, // encapsulation length
-          TAO_ENCAP_BYTE_ORDER, // byte order
-          30,
-          ACE_NTOHL (0x49444c3a), 
-          ACE_NTOHL (0x6f6d672e), 
-          ACE_NTOHL (0x6f72672f), 
-          ACE_NTOHL (0x434f5242), 
-          ACE_NTOHL (0x412f4944), 
-          ACE_NTOHL (0x4c547970), 
-          ACE_NTOHL (0x653a312e), 
-          ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
-          8,
-          ACE_NTOHL (0x49444c54), 
-          ACE_NTOHL (0x79706500),  // name = IDLType
-
-
-      0U,
-
-
-  5,
-  ACE_NTOHL (0x6e616d65), 
-  ACE_NTOHL (0x0),  // name = name
-  0xffffffff, // indirection
-  0xffffff44, // negative offset (-188)
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_Initializer (
-    CORBA::tk_struct,
-    sizeof (_oc_CORBA_Initializer),
-    (char *) &_oc_CORBA_Initializer,
-    0,
-    sizeof (CORBA::Initializer)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_Initializer, &_tc_TAO_tc_CORBA_Initializer)
-TAO_NAMESPACE_END
-
-void CORBA::Initializer::_tao_any_destructor (void *_tao_void_pointer)
-{
-  Initializer *tmp = ACE_static_cast (Initializer*, _tao_void_pointer);
+  CORBA_Initializer *tmp = ACE_static_cast (CORBA_Initializer*, _tao_void_pointer);
   delete tmp;
 }
 
@@ -6339,14 +5442,14 @@
 #define __TAO_UNBOUNDED_SEQUENCE_CORBA_INITIALIZERSEQ_CS_
 
 void
-CORBA::_TAO_Unbounded_Sequence_CORBA_InitializerSeq::_allocate_buffer (CORBA::ULong length)
+_TAO_Unbounded_Sequence_CORBA_InitializerSeq::_allocate_buffer (CORBA::ULong length)
 {
-  CORBA::Initializer* tmp = 0;
+  CORBA_Initializer* tmp = 0;
   tmp = _TAO_Unbounded_Sequence_CORBA_InitializerSeq::allocbuf (length);
   
   if (this->buffer_ != 0)
   {
-    CORBA::Initializer *old = ACE_reinterpret_cast (CORBA::Initializer *,this->buffer_);
+    CORBA_Initializer *old = ACE_reinterpret_cast (CORBA_Initializer *,this->buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp[i] = old[i];
@@ -6359,18 +5462,18 @@
 }
 
 void
-CORBA::_TAO_Unbounded_Sequence_CORBA_InitializerSeq::_deallocate_buffer (void)
+_TAO_Unbounded_Sequence_CORBA_InitializerSeq::_deallocate_buffer (void)
 {
   if (this->buffer_ == 0 || this->release_ == 0)
     return;
   
-  CORBA::Initializer *tmp = ACE_reinterpret_cast (CORBA::Initializer *,this->buffer_);
+  CORBA_Initializer *tmp = ACE_reinterpret_cast (CORBA_Initializer *,this->buffer_);
   
   _TAO_Unbounded_Sequence_CORBA_InitializerSeq::freebuf (tmp);
   this->buffer_ = 0;
 } 
 
-CORBA::_TAO_Unbounded_Sequence_CORBA_InitializerSeq::~_TAO_Unbounded_Sequence_CORBA_InitializerSeq (void) // Dtor.
+_TAO_Unbounded_Sequence_CORBA_InitializerSeq::~_TAO_Unbounded_Sequence_CORBA_InitializerSeq (void) // Dtor.
 {
   this->_deallocate_buffer ();
 }
@@ -6385,297 +5488,53 @@
 #define _CORBA_INITIALIZERSEQ_CS_
 
 // *************************************************************
-// CORBA::InitializerSeq
+// CORBA_InitializerSeq
 // *************************************************************
 
-CORBA::InitializerSeq::InitializerSeq (void)
+CORBA_InitializerSeq::CORBA_InitializerSeq (void)
 {}
-CORBA::InitializerSeq::InitializerSeq (CORBA::ULong max) // uses max size
+CORBA_InitializerSeq::CORBA_InitializerSeq (CORBA::ULong max) // uses max size
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_InitializerSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::Initializer>
+TAO_Unbounded_Sequence<CORBA_Initializer>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA::InitializerSeq::InitializerSeq (CORBA::ULong max, CORBA::ULong length, CORBA::Initializer *buffer, CORBA::Boolean release)
+CORBA_InitializerSeq::CORBA_InitializerSeq (CORBA::ULong max, CORBA::ULong length, CORBA_Initializer *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_InitializerSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::Initializer>
+TAO_Unbounded_Sequence<CORBA_Initializer>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
-CORBA::InitializerSeq::InitializerSeq (const InitializerSeq &seq) // copy ctor
+CORBA_InitializerSeq::CORBA_InitializerSeq (const CORBA_InitializerSeq &seq) // copy ctor
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_InitializerSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::Initializer>
+TAO_Unbounded_Sequence<CORBA_Initializer>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
-CORBA::InitializerSeq::~InitializerSeq (void) // dtor
+CORBA_InitializerSeq::~CORBA_InitializerSeq (void) // dtor
 {}
-void CORBA::InitializerSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_InitializerSeq::_tao_any_destructor (void *_tao_void_pointer)
 {
-  InitializerSeq *tmp = ACE_static_cast (InitializerSeq*, _tao_void_pointer);
+  CORBA_InitializerSeq *tmp = ACE_static_cast (CORBA_InitializerSeq*, _tao_void_pointer);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_InitializerSeq[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  37,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f496e), 
-  ACE_NTOHL (0x69746961), 
-  ACE_NTOHL (0x6c697a65), 
-  ACE_NTOHL (0x72536571), 
-  ACE_NTOHL (0x3a312e30), 
-  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/InitializerSeq:1.0
-  15,
-  ACE_NTOHL (0x496e6974), 
-  ACE_NTOHL (0x69616c69), 
-  ACE_NTOHL (0x7a657253), 
-  ACE_NTOHL (0x65710000),  // name = InitializerSeq
-  CORBA::tk_sequence, // typecode kind
-  460, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_struct, // typecode kind
-    444, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      34,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x412f496e), 
-      ACE_NTOHL (0x69746961), 
-      ACE_NTOHL (0x6c697a65), 
-      ACE_NTOHL (0x723a312e), 
-      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/Initializer:1.0
-      12,
-      ACE_NTOHL (0x496e6974), 
-      ACE_NTOHL (0x69616c69), 
-      ACE_NTOHL (0x7a657200),  // name = Initializer
-      2, // member count
-      8,
-      ACE_NTOHL (0x6d656d62), 
-      ACE_NTOHL (0x65727300),  // name = members
-      CORBA::tk_alias, // typecode kind for typedefs
-      340, // encapsulation length
-        TAO_ENCAP_BYTE_ORDER, // byte order
-        38,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x6f6d672e), 
-        ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x434f5242), 
-        ACE_NTOHL (0x412f5374), 
-        ACE_NTOHL (0x72756374), 
-        ACE_NTOHL (0x4d656d62), 
-        ACE_NTOHL (0x65725365), 
-        ACE_NTOHL (0x713a312e), 
-        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/StructMemberSeq:1.0
-        16,
-        ACE_NTOHL (0x53747275), 
-        ACE_NTOHL (0x63744d65), 
-        ACE_NTOHL (0x6d626572), 
-        ACE_NTOHL (0x53657100),  // name = StructMemberSeq
-        CORBA::tk_sequence, // typecode kind
-        264, // encapsulation length
-          TAO_ENCAP_BYTE_ORDER, // byte order
-          CORBA::tk_struct, // typecode kind
-          248, // encapsulation length
-            TAO_ENCAP_BYTE_ORDER, // byte order
-            35,
-            ACE_NTOHL (0x49444c3a), 
-            ACE_NTOHL (0x6f6d672e), 
-            ACE_NTOHL (0x6f72672f), 
-            ACE_NTOHL (0x434f5242), 
-            ACE_NTOHL (0x412f5374), 
-            ACE_NTOHL (0x72756374), 
-            ACE_NTOHL (0x4d656d62), 
-            ACE_NTOHL (0x65723a31), 
-            ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/StructMember:1.0
-            13,
-            ACE_NTOHL (0x53747275), 
-            ACE_NTOHL (0x63744d65), 
-            ACE_NTOHL (0x6d626572), 
-            ACE_NTOHL (0x0),  // name = StructMember
-            3, // member count
-            5,
-            ACE_NTOHL (0x6e616d65), 
-            ACE_NTOHL (0x0),  // name = name
-            CORBA::tk_alias, // typecode kind for typedefs
-            68, // encapsulation length
-              TAO_ENCAP_BYTE_ORDER, // byte order
-              33,
-              ACE_NTOHL (0x49444c3a), 
-              ACE_NTOHL (0x6f6d672e), 
-              ACE_NTOHL (0x6f72672f), 
-              ACE_NTOHL (0x434f5242), 
-              ACE_NTOHL (0x412f4964), 
-              ACE_NTOHL (0x656e7469), 
-              ACE_NTOHL (0x66696572), 
-              ACE_NTOHL (0x3a312e30), 
-              ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
-              11,
-              ACE_NTOHL (0x4964656e), 
-              ACE_NTOHL (0x74696669), 
-              ACE_NTOHL (0x65720000),  // name = Identifier
-              CORBA::tk_string, 
-              0U, // string length
-
-            5,
-            ACE_NTOHL (0x74797065), 
-            ACE_NTOHL (0x0),  // name = type
-            CORBA::tk_TypeCode,
-
-            9,
-            ACE_NTOHL (0x74797065), 
-            ACE_NTOHL (0x5f646566), 
-            ACE_NTOHL (0x0),  // name = type_def
-            CORBA::tk_objref, // typecode kind
-            52, // encapsulation length
-              TAO_ENCAP_BYTE_ORDER, // byte order
-              30,
-              ACE_NTOHL (0x49444c3a), 
-              ACE_NTOHL (0x6f6d672e), 
-              ACE_NTOHL (0x6f72672f), 
-              ACE_NTOHL (0x434f5242), 
-              ACE_NTOHL (0x412f4944), 
-              ACE_NTOHL (0x4c547970), 
-              ACE_NTOHL (0x653a312e), 
-              ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
-              8,
-              ACE_NTOHL (0x49444c54), 
-              ACE_NTOHL (0x79706500),  // name = IDLType
 
-
-          0U,
-
-
-      5,
-      ACE_NTOHL (0x6e616d65), 
-      ACE_NTOHL (0x0),  // name = name
-      0xffffffff, // indirection
-      0xffffff44, // negative offset (-188)
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_InitializerSeq (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_InitializerSeq),
-    (char *) &_oc_CORBA_InitializerSeq,
-    0,
-    sizeof (CORBA::InitializerSeq)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_InitializerSeq, &_tc_TAO_tc_CORBA_InitializerSeq)
-TAO_NAMESPACE_END
-
-static const CORBA::Long _oc_CORBA_UnionMember[] =
+void CORBA_UnionMember::_tao_any_destructor (void *_tao_void_pointer)
 {
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  34,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f556e), 
-  ACE_NTOHL (0x696f6e4d), 
-  ACE_NTOHL (0x656d6265), 
-  ACE_NTOHL (0x723a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/UnionMember:1.0
-  12,
-  ACE_NTOHL (0x556e696f), 
-  ACE_NTOHL (0x6e4d656d), 
-  ACE_NTOHL (0x62657200),  // name = UnionMember
-  4, // member count
-  5,
-  ACE_NTOHL (0x6e616d65), 
-  ACE_NTOHL (0x0),  // name = name
-  CORBA::tk_alias, // typecode kind for typedefs
-  68, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    33,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f4964), 
-    ACE_NTOHL (0x656e7469), 
-    ACE_NTOHL (0x66696572), 
-    ACE_NTOHL (0x3a312e30), 
-    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
-    11,
-    ACE_NTOHL (0x4964656e), 
-    ACE_NTOHL (0x74696669), 
-    ACE_NTOHL (0x65720000),  // name = Identifier
-    CORBA::tk_string, 
-    0U, // string length
-
-  6,
-  ACE_NTOHL (0x6c616265), 
-  ACE_NTOHL (0x6c000000),  // name = label
-  CORBA::tk_any,
-
-  5,
-  ACE_NTOHL (0x74797065), 
-  ACE_NTOHL (0x0),  // name = type
-  CORBA::tk_TypeCode,
-
-  9,
-  ACE_NTOHL (0x74797065), 
-  ACE_NTOHL (0x5f646566), 
-  ACE_NTOHL (0x0),  // name = type_def
-  CORBA::tk_objref, // typecode kind
-  52, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    30,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f4944), 
-    ACE_NTOHL (0x4c547970), 
-    ACE_NTOHL (0x653a312e), 
-    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
-    8,
-    ACE_NTOHL (0x49444c54), 
-    ACE_NTOHL (0x79706500),  // name = IDLType
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_UnionMember (
-    CORBA::tk_struct,
-    sizeof (_oc_CORBA_UnionMember),
-    (char *) &_oc_CORBA_UnionMember,
-    0,
-    sizeof (CORBA::UnionMember)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_UnionMember, &_tc_TAO_tc_CORBA_UnionMember)
-TAO_NAMESPACE_END
-
-void CORBA::UnionMember::_tao_any_destructor (void *_tao_void_pointer)
-{
-  UnionMember *tmp = ACE_static_cast (UnionMember*, _tao_void_pointer);
+  CORBA_UnionMember *tmp = ACE_static_cast (CORBA_UnionMember*, _tao_void_pointer);
   delete tmp;
 }
 
@@ -6686,14 +5545,14 @@
 #define __TAO_UNBOUNDED_SEQUENCE_CORBA_UNIONMEMBERSEQ_CS_
 
 void
-CORBA::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_allocate_buffer (CORBA::ULong length)
+_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_allocate_buffer (CORBA::ULong length)
 {
-  CORBA::UnionMember* tmp = 0;
+  CORBA_UnionMember* tmp = 0;
   tmp = _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::allocbuf (length);
   
   if (this->buffer_ != 0)
   {
-    CORBA::UnionMember *old = ACE_reinterpret_cast (CORBA::UnionMember *,this->buffer_);
+    CORBA_UnionMember *old = ACE_reinterpret_cast (CORBA_UnionMember *,this->buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp[i] = old[i];
@@ -6706,18 +5565,18 @@
 }
 
 void
-CORBA::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_deallocate_buffer (void)
+_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::_deallocate_buffer (void)
 {
   if (this->buffer_ == 0 || this->release_ == 0)
     return;
   
-  CORBA::UnionMember *tmp = ACE_reinterpret_cast (CORBA::UnionMember *,this->buffer_);
+  CORBA_UnionMember *tmp = ACE_reinterpret_cast (CORBA_UnionMember *,this->buffer_);
   
   _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::freebuf (tmp);
   this->buffer_ = 0;
 } 
 
-CORBA::_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::~_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (void) // Dtor.
+_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq::~_TAO_Unbounded_Sequence_CORBA_UnionMemberSeq (void) // Dtor.
 {
   this->_deallocate_buffer ();
 }
@@ -6732,171 +5591,59 @@
 #define _CORBA_UNIONMEMBERSEQ_CS_
 
 // *************************************************************
-// CORBA::UnionMemberSeq
+// CORBA_UnionMemberSeq
 // *************************************************************
 
-CORBA::UnionMemberSeq::UnionMemberSeq (void)
+CORBA_UnionMemberSeq::CORBA_UnionMemberSeq (void)
 {}
-CORBA::UnionMemberSeq::UnionMemberSeq (CORBA::ULong max) // uses max size
+CORBA_UnionMemberSeq::CORBA_UnionMemberSeq (CORBA::ULong max) // uses max size
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::UnionMember>
+TAO_Unbounded_Sequence<CORBA_UnionMember>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA::UnionMemberSeq::UnionMemberSeq (CORBA::ULong max, CORBA::ULong length, CORBA::UnionMember *buffer, CORBA::Boolean release)
+CORBA_UnionMemberSeq::CORBA_UnionMemberSeq (CORBA::ULong max, CORBA::ULong length, CORBA_UnionMember *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::UnionMember>
+TAO_Unbounded_Sequence<CORBA_UnionMember>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
-CORBA::UnionMemberSeq::UnionMemberSeq (const UnionMemberSeq &seq) // copy ctor
+CORBA_UnionMemberSeq::CORBA_UnionMemberSeq (const CORBA_UnionMemberSeq &seq) // copy ctor
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_UnionMemberSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::UnionMember>
+TAO_Unbounded_Sequence<CORBA_UnionMember>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
-CORBA::UnionMemberSeq::~UnionMemberSeq (void) // dtor
+CORBA_UnionMemberSeq::~CORBA_UnionMemberSeq (void) // dtor
 {}
-void CORBA::UnionMemberSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_UnionMemberSeq::_tao_any_destructor (void *_tao_void_pointer)
 {
-  UnionMemberSeq *tmp = ACE_static_cast (UnionMemberSeq*, _tao_void_pointer);
+  CORBA_UnionMemberSeq *tmp = ACE_static_cast (CORBA_UnionMemberSeq*, _tao_void_pointer);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_UnionMemberSeq[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  37,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f556e), 
-  ACE_NTOHL (0x696f6e4d), 
-  ACE_NTOHL (0x656d6265), 
-  ACE_NTOHL (0x72536571), 
-  ACE_NTOHL (0x3a312e30), 
-  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/UnionMemberSeq:1.0
-  15,
-  ACE_NTOHL (0x556e696f), 
-  ACE_NTOHL (0x6e4d656d), 
-  ACE_NTOHL (0x62657253), 
-  ACE_NTOHL (0x65710000),  // name = UnionMemberSeq
-  CORBA::tk_sequence, // typecode kind
-  276, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_struct, // typecode kind
-    260, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      34,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x412f556e), 
-      ACE_NTOHL (0x696f6e4d), 
-      ACE_NTOHL (0x656d6265), 
-      ACE_NTOHL (0x723a312e), 
-      ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/UnionMember:1.0
-      12,
-      ACE_NTOHL (0x556e696f), 
-      ACE_NTOHL (0x6e4d656d), 
-      ACE_NTOHL (0x62657200),  // name = UnionMember
-      4, // member count
-      5,
-      ACE_NTOHL (0x6e616d65), 
-      ACE_NTOHL (0x0),  // name = name
-      CORBA::tk_alias, // typecode kind for typedefs
-      68, // encapsulation length
-        TAO_ENCAP_BYTE_ORDER, // byte order
-        33,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x6f6d672e), 
-        ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x434f5242), 
-        ACE_NTOHL (0x412f4964), 
-        ACE_NTOHL (0x656e7469), 
-        ACE_NTOHL (0x66696572), 
-        ACE_NTOHL (0x3a312e30), 
-        ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
-        11,
-        ACE_NTOHL (0x4964656e), 
-        ACE_NTOHL (0x74696669), 
-        ACE_NTOHL (0x65720000),  // name = Identifier
-        CORBA::tk_string, 
-        0U, // string length
-
-      6,
-      ACE_NTOHL (0x6c616265), 
-      ACE_NTOHL (0x6c000000),  // name = label
-      CORBA::tk_any,
-
-      5,
-      ACE_NTOHL (0x74797065), 
-      ACE_NTOHL (0x0),  // name = type
-      CORBA::tk_TypeCode,
-
-      9,
-      ACE_NTOHL (0x74797065), 
-      ACE_NTOHL (0x5f646566), 
-      ACE_NTOHL (0x0),  // name = type_def
-      CORBA::tk_objref, // typecode kind
-      52, // encapsulation length
-        TAO_ENCAP_BYTE_ORDER, // byte order
-        30,
-        ACE_NTOHL (0x49444c3a), 
-        ACE_NTOHL (0x6f6d672e), 
-        ACE_NTOHL (0x6f72672f), 
-        ACE_NTOHL (0x434f5242), 
-        ACE_NTOHL (0x412f4944), 
-        ACE_NTOHL (0x4c547970), 
-        ACE_NTOHL (0x653a312e), 
-        ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
-        8,
-        ACE_NTOHL (0x49444c54), 
-        ACE_NTOHL (0x79706500),  // name = IDLType
-
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_UnionMemberSeq (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_UnionMemberSeq),
-    (char *) &_oc_CORBA_UnionMemberSeq,
-    0,
-    sizeof (CORBA::UnionMemberSeq)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_UnionMemberSeq, &_tc_TAO_tc_CORBA_UnionMemberSeq)
-TAO_NAMESPACE_END
-
-
 #if !defined (_CORBA_ENUMMEMBERSEQ_CS_)
 #define _CORBA_ENUMMEMBERSEQ_CS_
 
 // *************************************************************
-// CORBA::EnumMemberSeq
+// CORBA_EnumMemberSeq
 // *************************************************************
 
-CORBA::EnumMemberSeq::EnumMemberSeq (void)
+CORBA_EnumMemberSeq::CORBA_EnumMemberSeq (void)
 {}
-CORBA::EnumMemberSeq::EnumMemberSeq (CORBA::ULong max) // uses max size
+CORBA_EnumMemberSeq::CORBA_EnumMemberSeq (CORBA::ULong max) // uses max size
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 TAO_Unbounded_String_Sequence
@@ -6905,7 +5652,7 @@
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA::EnumMemberSeq::EnumMemberSeq (CORBA::ULong max, CORBA::ULong length, char * *buffer, CORBA::Boolean release)
+CORBA_EnumMemberSeq::CORBA_EnumMemberSeq (CORBA::ULong max, CORBA::ULong length, char * *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 TAO_Unbounded_String_Sequence
@@ -6914,7 +5661,7 @@
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
-CORBA::EnumMemberSeq::EnumMemberSeq (const EnumMemberSeq &seq) // copy ctor
+CORBA_EnumMemberSeq::CORBA_EnumMemberSeq (const CORBA_EnumMemberSeq &seq) // copy ctor
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 TAO_Unbounded_String_Sequence
@@ -6923,112 +5670,48 @@
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
-CORBA::EnumMemberSeq::~EnumMemberSeq (void) // dtor
+CORBA_EnumMemberSeq::~CORBA_EnumMemberSeq (void) // dtor
 {}
-void CORBA::EnumMemberSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_EnumMemberSeq::_tao_any_destructor (void *_tao_void_pointer)
 {
-  EnumMemberSeq *tmp = ACE_static_cast (EnumMemberSeq*, _tao_void_pointer);
+  CORBA_EnumMemberSeq *tmp = ACE_static_cast (CORBA_EnumMemberSeq*, _tao_void_pointer);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_EnumMemberSeq[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  36,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f456e), 
-  ACE_NTOHL (0x756d4d65), 
-  ACE_NTOHL (0x6d626572), 
-  ACE_NTOHL (0x5365713a), 
-  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/EnumMemberSeq:1.0
-  14,
-  ACE_NTOHL (0x456e756d), 
-  ACE_NTOHL (0x4d656d62), 
-  ACE_NTOHL (0x65725365), 
-  ACE_NTOHL (0x71000000),  // name = EnumMemberSeq
-  CORBA::tk_sequence, // typecode kind
-  84, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_alias, // typecode kind for typedefs
-    68, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      33,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x412f4964), 
-      ACE_NTOHL (0x656e7469), 
-      ACE_NTOHL (0x66696572), 
-      ACE_NTOHL (0x3a312e30), 
-      ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
-      11,
-      ACE_NTOHL (0x4964656e), 
-      ACE_NTOHL (0x74696669), 
-      ACE_NTOHL (0x65720000),  // name = Identifier
-      CORBA::tk_string, 
-      0U, // string length
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_EnumMemberSeq (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_EnumMemberSeq),
-    (char *) &_oc_CORBA_EnumMemberSeq,
-    0,
-    sizeof (CORBA::EnumMemberSeq)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_EnumMemberSeq, &_tc_TAO_tc_CORBA_EnumMemberSeq)
-TAO_NAMESPACE_END
-
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int CORBA::Container::_tao_class_id = 0;
-
-CORBA::Container_ptr
+CORBA_Container_ptr
 tao_CORBA_Container_duplicate (
-    CORBA::Container_ptr p
+    CORBA_Container_ptr p
   )
 {
-  return CORBA::Container::_duplicate (p);
+  return CORBA_Container::_duplicate (p);
 }
 
 void
 tao_CORBA_Container_release (
-    CORBA::Container_ptr p
+    CORBA_Container_ptr p
   )
 {
   CORBA::release (p);
 }
 
-CORBA::Container_ptr
+CORBA_Container_ptr
 tao_CORBA_Container_nil (
     void
   )
 {
-  return CORBA::Container::_nil ();
+  return CORBA_Container::_nil ();
 }
 
-CORBA::Container_ptr
+CORBA_Container_ptr
 tao_CORBA_Container_narrow (
     CORBA::Object *p
     ACE_ENV_ARG_DECL
   )
 {
-  return CORBA::Container::_narrow (p ACE_ENV_ARG_PARAMETER);
+  return CORBA_Container::_narrow (p ACE_ENV_ARG_PARAMETER);
 }
 
 CORBA::Object *
@@ -7036,193 +5719,191 @@
     void *src
   )
 {
-  CORBA::Container **tmp =
-    ACE_static_cast (CORBA::Container **, src);
+  CORBA_Container **tmp =
+    ACE_static_cast (CORBA_Container **, src);
   return *tmp;
 }
 
+int CORBA_Container::_tao_class_id = 0;
+
 // *************************************************************
-// CORBA::Container_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class CORBA_Container_var
 // *************************************************************
 
-CORBA::Container_var::Container_var (void) // default constructor
-  : ptr_ (Container::_nil ())
+CORBA_Container_var::CORBA_Container_var (void) // default constructor
+  : ptr_ (CORBA_Container::_nil ())
 {}
 
-::CORBA::Container_ptr
-CORBA::Container_var::ptr (void) const
+::CORBA_Container_ptr
+CORBA_Container_var::ptr (void) const
 {
   return this->ptr_;
 }
 
-CORBA::Container_var::Container_var (const ::CORBA::Container_var &p) // copy constructor
+CORBA_Container_var::CORBA_Container_var (const ::CORBA_Container_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (Container::_duplicate (p.ptr ()))
+    ptr_ (CORBA_Container::_duplicate (p.ptr ()))
 {}
 
-CORBA::Container_var::~Container_var (void) // destructor
+CORBA_Container_var::~CORBA_Container_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-CORBA::Container_var &
-CORBA::Container_var::operator= (Container_ptr p)
+CORBA_Container_var &
+CORBA_Container_var::operator= (CORBA_Container_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-CORBA::Container_var &
-CORBA::Container_var::operator= (const ::CORBA::Container_var &p)
+CORBA_Container_var &
+CORBA_Container_var::operator= (const ::CORBA_Container_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::CORBA::Container::_duplicate (p.ptr ());
+    this->ptr_ = ::CORBA_Container::_duplicate (p.ptr ());
   }
   return *this;
 }
 
-CORBA::Container_var::operator const ::CORBA::Container_ptr &() const // cast
+CORBA_Container_var::operator const ::CORBA_Container_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-CORBA::Container_var::operator ::CORBA::Container_ptr &() // cast 
+CORBA_Container_var::operator ::CORBA_Container_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA::Container_ptr
-CORBA::Container_var::operator-> (void) const
+::CORBA_Container_ptr
+CORBA_Container_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-::CORBA::Container_ptr
-CORBA::Container_var::in (void) const
+::CORBA_Container_ptr
+CORBA_Container_var::in (void) const
 {
   return this->ptr_;
 }
 
-::CORBA::Container_ptr &
-CORBA::Container_var::inout (void)
+::CORBA_Container_ptr &
+CORBA_Container_var::inout (void)
 {
   return this->ptr_;
 }
 
-::CORBA::Container_ptr &
-CORBA::Container_var::out (void)
+::CORBA_Container_ptr &
+CORBA_Container_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::Container::_nil ();
+  this->ptr_ = ::CORBA_Container::_nil ();
   return this->ptr_;
 }
 
-::CORBA::Container_ptr
-CORBA::Container_var::_retn (void)
+::CORBA_Container_ptr
+CORBA_Container_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::CORBA::Container_ptr val = this->ptr_;
-  this->ptr_ = ::CORBA::Container::_nil ();
+  ::CORBA_Container_ptr val = this->ptr_;
+  this->ptr_ = ::CORBA_Container::_nil ();
   return val;
 }
 
-::CORBA::Container_ptr
-CORBA::Container_var::tao_duplicate (Container_ptr p)
+::CORBA_Container_ptr
+CORBA_Container_var::tao_duplicate (CORBA_Container_ptr p)
 {
-  return ::CORBA::Container::_duplicate (p);
+  return ::CORBA_Container::_duplicate (p);
 }
 
 void
-CORBA::Container_var::tao_release (Container_ptr p)
+CORBA_Container_var::tao_release (CORBA_Container_ptr p)
 {
   CORBA::release (p);
 }
 
-::CORBA::Container_ptr
-CORBA::Container_var::tao_nil (void)
+::CORBA_Container_ptr
+CORBA_Container_var::tao_nil (void)
 {
-  return ::CORBA::Container::_nil ();
+  return ::CORBA_Container::_nil ();
 }
 
-::CORBA::Container_ptr
-CORBA::Container_var::tao_narrow (
+::CORBA_Container_ptr
+CORBA_Container_var::tao_narrow (
     CORBA::Object *p
     ACE_ENV_ARG_DECL
   )
 {
-  return ::CORBA::Container::_narrow (p ACE_ENV_ARG_PARAMETER);
+  return ::CORBA_Container::_narrow (p ACE_ENV_ARG_PARAMETER);
 }
 
 CORBA::Object *
-CORBA::Container_var::tao_upcast (void *src)
+CORBA_Container_var::tao_upcast (void *src)
 {
-  Container **tmp =
-    ACE_static_cast (Container **, src);
+  CORBA_Container **tmp =
+    ACE_static_cast (CORBA_Container **, src);
   return *tmp;
 }
 
 // *************************************************************
-// CORBA::Container_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class CORBA_Container_out
 // *************************************************************
 
-CORBA::Container_out::Container_out (Container_ptr &p)
+CORBA_Container_out::CORBA_Container_out (CORBA_Container_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::CORBA::Container::_nil ();
+  this->ptr_ = ::CORBA_Container::_nil ();
 }
 
-CORBA::Container_out::Container_out (Container_var &p) // constructor from _var
+CORBA_Container_out::CORBA_Container_out (CORBA_Container_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::Container::_nil ();
+  this->ptr_ = ::CORBA_Container::_nil ();
 }
 
-CORBA::Container_out::Container_out (const ::CORBA::Container_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (Container_out &, p).ptr_)
+CORBA_Container_out::CORBA_Container_out (const ::CORBA_Container_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (CORBA_Container_out &, p).ptr_)
 {}
 
-::CORBA::Container_out &
-CORBA::Container_out::operator= (const ::CORBA::Container_out &p)
+::CORBA_Container_out &
+CORBA_Container_out::operator= (const ::CORBA_Container_out &p)
 {
-  this->ptr_ = ACE_const_cast (Container_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (CORBA_Container_out&, p).ptr_;
   return *this;
 }
 
-CORBA::Container_out &
-CORBA::Container_out::operator= (const ::CORBA::Container_var &p)
+CORBA_Container_out &
+CORBA_Container_out::operator= (const ::CORBA_Container_var &p)
 {
-  this->ptr_ = ::CORBA::Container::_duplicate (p.ptr ());
+  this->ptr_ = ::CORBA_Container::_duplicate (p.ptr ());
   return *this;
 }
 
-CORBA::Container_out &
-CORBA::Container_out::operator= (Container_ptr p)
+CORBA_Container_out &
+CORBA_Container_out::operator= (CORBA_Container_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
-CORBA::Container_out::operator ::CORBA::Container_ptr &() // cast
+CORBA_Container_out::operator ::CORBA_Container_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA::Container_ptr &
-CORBA::Container_out::ptr (void) // ptr
+::CORBA_Container_ptr &
+CORBA_Container_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-::CORBA::Container_ptr
-CORBA::Container_out::operator-> (void)
+::CORBA_Container_ptr
+CORBA_Container_out::operator-> (void)
 {
   return this->ptr_;
 }
@@ -7235,32 +5916,40 @@
   TAO_ClientRequestInfo_CORBA_Container_lookup (
       TAO_GIOP_Invocation *_tao_invocation,
       CORBA::Object_ptr _tao_target,
-      const char * search_name ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const char * search_name
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::Contained_ptr result);
+  void result (CORBA_Contained_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_lookup (const TAO_ClientRequestInfo_CORBA_Container_lookup &);
   void operator= (const TAO_ClientRequestInfo_CORBA_Container_lookup &);
 
   const char * search_name_;
-  CORBA::Contained_ptr _result;
+  CORBA_Contained_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_lookup::TAO_ClientRequestInfo_CORBA_Container_lookup (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
-    const char * search_name ACE_ENV_ARG_DECL_NOT_USED    
+    const char * search_name
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     search_name_ (search_name)
@@ -7299,6 +5988,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_lookup::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -7316,7 +6006,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_lookup::result (::CORBA::Contained_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_lookup::result (CORBA_Contained_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -7329,19 +6019,26 @@
       TAO_GIOP_Invocation *_tao_invocation,
       CORBA::Object_ptr _tao_target,
       CORBA::DefinitionKind & limit_type,
-      const CORBA::Boolean & exclude_inherited ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA::Boolean & exclude_inherited
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::ContainedSeq * result);
+  void result (CORBA_ContainedSeq * result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_contents (const TAO_ClientRequestInfo_CORBA_Container_contents &);
@@ -7349,14 +6046,15 @@
 
   const CORBA::DefinitionKind & limit_type_;
   const CORBA::Boolean & exclude_inherited_;
-  CORBA::ContainedSeq * _result;
+  CORBA_ContainedSeq * _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_contents::TAO_ClientRequestInfo_CORBA_Container_contents (
     TAO_GIOP_Invocation *_tao_invocation,
     CORBA::Object_ptr _tao_target,
     CORBA::DefinitionKind & limit_type,
-    const CORBA::Boolean & exclude_inherited ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA::Boolean & exclude_inherited
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     limit_type_ (limit_type),
@@ -7399,6 +6097,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_contents::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -7416,7 +6115,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_contents::result (::CORBA::ContainedSeq * result)
+TAO_ClientRequestInfo_CORBA_Container_contents::result (CORBA_ContainedSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -7431,19 +6130,26 @@
       const char * search_name,
       const CORBA::Long & levels_to_search,
       CORBA::DefinitionKind & limit_type,
-      const CORBA::Boolean & exclude_inherited ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA::Boolean & exclude_inherited
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::ContainedSeq * result);
+  void result (CORBA_ContainedSeq * result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_lookup_name (const TAO_ClientRequestInfo_CORBA_Container_lookup_name &);
@@ -7453,7 +6159,7 @@
   const CORBA::Long & levels_to_search_;
   const CORBA::DefinitionKind & limit_type_;
   const CORBA::Boolean & exclude_inherited_;
-  CORBA::ContainedSeq * _result;
+  CORBA_ContainedSeq * _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_lookup_name::TAO_ClientRequestInfo_CORBA_Container_lookup_name (
@@ -7462,7 +6168,8 @@
     const char * search_name,
     const CORBA::Long & levels_to_search,
     CORBA::DefinitionKind & limit_type,
-    const CORBA::Boolean & exclude_inherited ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA::Boolean & exclude_inherited
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     search_name_ (search_name),
@@ -7513,6 +6220,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_lookup_name::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -7530,7 +6238,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_lookup_name::result (::CORBA::ContainedSeq * result)
+TAO_ClientRequestInfo_CORBA_Container_lookup_name::result (CORBA_ContainedSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -7544,19 +6252,26 @@
       CORBA::Object_ptr _tao_target,
       CORBA::DefinitionKind & limit_type,
       const CORBA::Boolean & exclude_inherited,
-      const CORBA::Long & max_returned_objs ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA::Long & max_returned_objs
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::Container::DescriptionSeq * result);
+  void result (CORBA_Container::DescriptionSeq * result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_describe_contents (const TAO_ClientRequestInfo_CORBA_Container_describe_contents &);
@@ -7565,7 +6280,7 @@
   const CORBA::DefinitionKind & limit_type_;
   const CORBA::Boolean & exclude_inherited_;
   const CORBA::Long & max_returned_objs_;
-  CORBA::Container::DescriptionSeq * _result;
+  CORBA_Container::DescriptionSeq * _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_describe_contents::TAO_ClientRequestInfo_CORBA_Container_describe_contents (
@@ -7573,7 +6288,8 @@
     CORBA::Object_ptr _tao_target,
     CORBA::DefinitionKind & limit_type,
     const CORBA::Boolean & exclude_inherited,
-    const CORBA::Long & max_returned_objs ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA::Long & max_returned_objs
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     limit_type_ (limit_type),
@@ -7620,6 +6336,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_describe_contents::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -7637,7 +6354,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_describe_contents::result (::CORBA::Container::DescriptionSeq * result)
+TAO_ClientRequestInfo_CORBA_Container_describe_contents::result (CORBA_Container::DescriptionSeq * result)
 {
   // update the result 
   this->_result = result;
@@ -7651,19 +6368,26 @@
       CORBA::Object_ptr _tao_target,
       const char * id,
       const char * name,
-      const char * version ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const char * version
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::ModuleDef_ptr result);
+  void result (CORBA_ModuleDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_module (const TAO_ClientRequestInfo_CORBA_Container_create_module &);
@@ -7672,7 +6396,7 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::ModuleDef_ptr _result;
+  CORBA_ModuleDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_module::TAO_ClientRequestInfo_CORBA_Container_create_module (
@@ -7680,7 +6404,8 @@
     CORBA::Object_ptr _tao_target,
     const char * id,
     const char * name,
-    const char * version ACE_ENV_ARG_DECL_NOT_USED    
+    const char * version
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -7727,6 +6452,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_module::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -7744,7 +6470,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_module::result (::CORBA::ModuleDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_module::result (CORBA_ModuleDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -7759,20 +6485,27 @@
       const char * id,
       const char * name,
       const char * version,
-      CORBA::IDLType_ptr type,
-      const CORBA::Any & value ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_IDLType_ptr type,
+      const CORBA::Any & value
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::ConstantDef_ptr result);
+  void result (CORBA_ConstantDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_constant (const TAO_ClientRequestInfo_CORBA_Container_create_constant &);
@@ -7781,9 +6514,9 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::IDLType_ptr type_;
+  CORBA_IDLType_ptr type_;
   const CORBA::Any & value_;
-  CORBA::ConstantDef_ptr _result;
+  CORBA_ConstantDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_constant::TAO_ClientRequestInfo_CORBA_Container_create_constant (
@@ -7792,8 +6525,9 @@
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr type,
-    const CORBA::Any & value ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_IDLType_ptr type,
+    const CORBA::Any & value
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -7848,6 +6582,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_constant::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -7865,7 +6600,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_constant::result (::CORBA::ConstantDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_constant::result (CORBA_ConstantDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -7880,19 +6615,26 @@
       const char * id,
       const char * name,
       const char * version,
-      const CORBA::StructMemberSeq & members ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_StructMemberSeq & members
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::StructDef_ptr result);
+  void result (CORBA_StructDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_struct (const TAO_ClientRequestInfo_CORBA_Container_create_struct &);
@@ -7901,8 +6643,8 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  const CORBA::StructMemberSeq & members_;
-  CORBA::StructDef_ptr _result;
+  const CORBA_StructMemberSeq & members_;
+  CORBA_StructDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_struct::TAO_ClientRequestInfo_CORBA_Container_create_struct (
@@ -7911,7 +6653,8 @@
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::StructMemberSeq & members ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_StructMemberSeq & members
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -7962,6 +6705,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_struct::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -7979,7 +6723,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_struct::result (::CORBA::StructDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_struct::result (CORBA_StructDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -7994,20 +6738,27 @@
       const char * id,
       const char * name,
       const char * version,
-      CORBA::IDLType_ptr discriminator_type,
-      const CORBA::UnionMemberSeq & members ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_IDLType_ptr discriminator_type,
+      const CORBA_UnionMemberSeq & members
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::UnionDef_ptr result);
+  void result (CORBA_UnionDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_union (const TAO_ClientRequestInfo_CORBA_Container_create_union &);
@@ -8016,9 +6767,9 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::IDLType_ptr discriminator_type_;
-  const CORBA::UnionMemberSeq & members_;
-  CORBA::UnionDef_ptr _result;
+  CORBA_IDLType_ptr discriminator_type_;
+  const CORBA_UnionMemberSeq & members_;
+  CORBA_UnionDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_union::TAO_ClientRequestInfo_CORBA_Container_create_union (
@@ -8027,8 +6778,9 @@
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr discriminator_type,
-    const CORBA::UnionMemberSeq & members ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_IDLType_ptr discriminator_type,
+    const CORBA_UnionMemberSeq & members
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -8083,6 +6835,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_union::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -8100,7 +6853,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_union::result (::CORBA::UnionDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_union::result (CORBA_UnionDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -8115,19 +6868,26 @@
       const char * id,
       const char * name,
       const char * version,
-      const CORBA::EnumMemberSeq & members ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_EnumMemberSeq & members
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::EnumDef_ptr result);
+  void result (CORBA_EnumDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_enum (const TAO_ClientRequestInfo_CORBA_Container_create_enum &);
@@ -8136,8 +6896,8 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  const CORBA::EnumMemberSeq & members_;
-  CORBA::EnumDef_ptr _result;
+  const CORBA_EnumMemberSeq & members_;
+  CORBA_EnumDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_enum::TAO_ClientRequestInfo_CORBA_Container_create_enum (
@@ -8146,7 +6906,8 @@
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::EnumMemberSeq & members ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_EnumMemberSeq & members
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -8197,6 +6958,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_enum::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -8214,7 +6976,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_enum::result (::CORBA::EnumDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_enum::result (CORBA_EnumDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -8229,19 +6991,26 @@
       const char * id,
       const char * name,
       const char * version,
-      CORBA::IDLType_ptr original_type ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_IDLType_ptr original_type
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::AliasDef_ptr result);
+  void result (CORBA_AliasDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_alias (const TAO_ClientRequestInfo_CORBA_Container_create_alias &);
@@ -8250,8 +7019,8 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::IDLType_ptr original_type_;
-  CORBA::AliasDef_ptr _result;
+  CORBA_IDLType_ptr original_type_;
+  CORBA_AliasDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_alias::TAO_ClientRequestInfo_CORBA_Container_create_alias (
@@ -8260,7 +7029,8 @@
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr original_type ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_IDLType_ptr original_type
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -8311,6 +7081,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_alias::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -8328,7 +7099,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_alias::result (::CORBA::AliasDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_alias::result (CORBA_AliasDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -8343,19 +7114,26 @@
       const char * id,
       const char * name,
       const char * version,
-      const CORBA::InterfaceDefSeq & base_interfaces ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_InterfaceDefSeq & base_interfaces
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::InterfaceDef_ptr result);
+  void result (CORBA_InterfaceDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_interface (const TAO_ClientRequestInfo_CORBA_Container_create_interface &);
@@ -8364,8 +7142,8 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  const CORBA::InterfaceDefSeq & base_interfaces_;
-  CORBA::InterfaceDef_ptr _result;
+  const CORBA_InterfaceDefSeq & base_interfaces_;
+  CORBA_InterfaceDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_interface::TAO_ClientRequestInfo_CORBA_Container_create_interface (
@@ -8374,7 +7152,8 @@
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::InterfaceDefSeq & base_interfaces ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_InterfaceDefSeq & base_interfaces
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -8425,6 +7204,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_interface::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -8442,7 +7222,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_interface::result (::CORBA::InterfaceDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_interface::result (CORBA_InterfaceDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -8459,23 +7239,30 @@
       const char * version,
       const CORBA::Boolean & is_custom,
       const CORBA::Boolean & is_abstract,
-      CORBA::ValueDef_ptr base_value,
+      CORBA_ValueDef_ptr base_value,
       const CORBA::Boolean & is_truncatable,
-      const CORBA::ValueDefSeq & abstract_base_values,
-      const CORBA::InterfaceDefSeq & supported_interfaces,
-      const CORBA::InitializerSeq & initializers ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_ValueDefSeq & abstract_base_values,
+      const CORBA_InterfaceDefSeq & supported_interfaces,
+      const CORBA_InitializerSeq & initializers
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::ValueDef_ptr result);
+  void result (CORBA_ValueDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_value (const TAO_ClientRequestInfo_CORBA_Container_create_value &);
@@ -8486,12 +7273,12 @@
   const char * version_;
   const CORBA::Boolean & is_custom_;
   const CORBA::Boolean & is_abstract_;
-  CORBA::ValueDef_ptr base_value_;
+  CORBA_ValueDef_ptr base_value_;
   const CORBA::Boolean & is_truncatable_;
-  const CORBA::ValueDefSeq & abstract_base_values_;
-  const CORBA::InterfaceDefSeq & supported_interfaces_;
-  const CORBA::InitializerSeq & initializers_;
-  CORBA::ValueDef_ptr _result;
+  const CORBA_ValueDefSeq & abstract_base_values_;
+  const CORBA_InterfaceDefSeq & supported_interfaces_;
+  const CORBA_InitializerSeq & initializers_;
+  CORBA_ValueDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_value::TAO_ClientRequestInfo_CORBA_Container_create_value (
@@ -8502,11 +7289,12 @@
     const char * version,
     const CORBA::Boolean & is_custom,
     const CORBA::Boolean & is_abstract,
-    CORBA::ValueDef_ptr base_value,
+    CORBA_ValueDef_ptr base_value,
     const CORBA::Boolean & is_truncatable,
-    const CORBA::ValueDefSeq & abstract_base_values,
-    const CORBA::InterfaceDefSeq & supported_interfaces,
-    const CORBA::InitializerSeq & initializers ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_ValueDefSeq & abstract_base_values,
+    const CORBA_InterfaceDefSeq & supported_interfaces,
+    const CORBA_InitializerSeq & initializers
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -8581,6 +7369,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_value::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -8598,7 +7387,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_value::result (::CORBA::ValueDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_value::result (CORBA_ValueDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -8613,19 +7402,26 @@
       const char * id,
       const char * name,
       const char * version,
-      CORBA::IDLType_ptr original_type_def ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA_IDLType_ptr original_type_def
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::ValueBoxDef_ptr result);
+  void result (CORBA_ValueBoxDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_value_box (const TAO_ClientRequestInfo_CORBA_Container_create_value_box &);
@@ -8634,8 +7430,8 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::IDLType_ptr original_type_def_;
-  CORBA::ValueBoxDef_ptr _result;
+  CORBA_IDLType_ptr original_type_def_;
+  CORBA_ValueBoxDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_value_box::TAO_ClientRequestInfo_CORBA_Container_create_value_box (
@@ -8644,7 +7440,8 @@
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr original_type_def ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA_IDLType_ptr original_type_def
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -8695,6 +7492,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_value_box::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -8712,7 +7510,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_value_box::result (::CORBA::ValueBoxDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_value_box::result (CORBA_ValueBoxDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -8727,19 +7525,26 @@
       const char * id,
       const char * name,
       const char * version,
-      const CORBA::StructMemberSeq & members ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_StructMemberSeq & members
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::ExceptionDef_ptr result);
+  void result (CORBA_ExceptionDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_exception (const TAO_ClientRequestInfo_CORBA_Container_create_exception &);
@@ -8748,8 +7553,8 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  const CORBA::StructMemberSeq & members_;
-  CORBA::ExceptionDef_ptr _result;
+  const CORBA_StructMemberSeq & members_;
+  CORBA_ExceptionDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_exception::TAO_ClientRequestInfo_CORBA_Container_create_exception (
@@ -8758,7 +7563,8 @@
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::StructMemberSeq & members ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_StructMemberSeq & members
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -8809,6 +7615,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_exception::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -8826,7 +7633,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_exception::result (::CORBA::ExceptionDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_exception::result (CORBA_ExceptionDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -8840,19 +7647,26 @@
       CORBA::Object_ptr _tao_target,
       const char * id,
       const char * name,
-      const char * version ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const char * version
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::NativeDef_ptr result);
+  void result (CORBA_NativeDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_native (const TAO_ClientRequestInfo_CORBA_Container_create_native &);
@@ -8861,7 +7675,7 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  CORBA::NativeDef_ptr _result;
+  CORBA_NativeDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_native::TAO_ClientRequestInfo_CORBA_Container_create_native (
@@ -8869,7 +7683,8 @@
     CORBA::Object_ptr _tao_target,
     const char * id,
     const char * name,
-    const char * version ACE_ENV_ARG_DECL_NOT_USED    
+    const char * version
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -8916,6 +7731,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_native::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -8933,7 +7749,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_native::result (::CORBA::NativeDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_native::result (CORBA_NativeDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -8948,19 +7764,26 @@
       const char * id,
       const char * name,
       const char * version,
-      const CORBA::AbstractInterfaceDefSeq & base_interfaces ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_AbstractInterfaceDefSeq & base_interfaces
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::AbstractInterfaceDef_ptr result);
+  void result (CORBA_AbstractInterfaceDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_abstract_interface (const TAO_ClientRequestInfo_CORBA_Container_create_abstract_interface &);
@@ -8969,8 +7792,8 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  const CORBA::AbstractInterfaceDefSeq & base_interfaces_;
-  CORBA::AbstractInterfaceDef_ptr _result;
+  const CORBA_AbstractInterfaceDefSeq & base_interfaces_;
+  CORBA_AbstractInterfaceDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_abstract_interface::TAO_ClientRequestInfo_CORBA_Container_create_abstract_interface (
@@ -8979,7 +7802,8 @@
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::AbstractInterfaceDefSeq & base_interfaces ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_AbstractInterfaceDefSeq & base_interfaces
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -9030,6 +7854,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_abstract_interface::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9047,7 +7872,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_abstract_interface::result (::CORBA::AbstractInterfaceDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_abstract_interface::result (CORBA_AbstractInterfaceDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -9062,19 +7887,26 @@
       const char * id,
       const char * name,
       const char * version,
-      const CORBA::InterfaceDefSeq & base_interfaces ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      const CORBA_InterfaceDefSeq & base_interfaces
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA::LocalInterfaceDef_ptr result);
+  void result (CORBA_LocalInterfaceDef_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Container_create_local_interface (const TAO_ClientRequestInfo_CORBA_Container_create_local_interface &);
@@ -9083,8 +7915,8 @@
   const char * id_;
   const char * name_;
   const char * version_;
-  const CORBA::InterfaceDefSeq & base_interfaces_;
-  CORBA::LocalInterfaceDef_ptr _result;
+  const CORBA_InterfaceDefSeq & base_interfaces_;
+  CORBA_LocalInterfaceDef_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Container_create_local_interface::TAO_ClientRequestInfo_CORBA_Container_create_local_interface (
@@ -9093,7 +7925,8 @@
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::InterfaceDefSeq & base_interfaces ACE_ENV_ARG_DECL_NOT_USED    
+    const CORBA_InterfaceDefSeq & base_interfaces
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target),
     id_ (id),
@@ -9144,6 +7977,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_Container_create_local_interface::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -9161,7 +7995,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Container_create_local_interface::result (::CORBA::LocalInterfaceDef_ptr result)
+TAO_ClientRequestInfo_CORBA_Container_create_local_interface::result (CORBA_LocalInterfaceDef_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -9173,15 +8007,15 @@
 //                Base & Remote Proxy  Implementation. 
 //
 
-CORBA::_TAO_Container_Proxy_Impl::_TAO_Container_Proxy_Impl (void)
+_TAO_CORBA_Container_Proxy_Impl::_TAO_CORBA_Container_Proxy_Impl (void)
 {}
 
-CORBA::_TAO_Container_Remote_Proxy_Impl::_TAO_Container_Remote_Proxy_Impl (void)
+_TAO_CORBA_Container_Remote_Proxy_Impl::_TAO_CORBA_Container_Remote_Proxy_Impl (void)
 {}
 
 // Remote Implementation of the IDL interface methods
 
-::CORBA::Contained_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::lookup (
+CORBA_Contained_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::lookup (
     CORBA_Object *_collocated_tao_target_,
     const char * search_name
     ACE_ENV_ARG_DECL
@@ -9191,13 +8025,13 @@
   ))
 {
   
-  CORBA::Contained_var _tao_retval (CORBA::Contained::_nil ());
-
+  CORBA_Contained_ptr _tao_retval = CORBA_Contained::_nil ();
+  CORBA_Contained_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -9224,25 +8058,26 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_lookup _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_lookup ri (
         &_tao_call,
         _collocated_tao_target_,
-        search_name ACE_ENV_ARG_PARAMETER
+        search_name
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -9256,13 +8091,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -9275,7 +8110,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -9288,9 +8123,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -9301,7 +8136,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -9312,13 +8147,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::Contained_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_Contained_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -9326,15 +8161,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -9342,11 +8177,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -9356,10 +8191,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::ContainedSeq * CORBA::_TAO_Container_Remote_Proxy_Impl::contents (
+CORBA_ContainedSeq * _TAO_CORBA_Container_Remote_Proxy_Impl::contents (
     CORBA_Object *_collocated_tao_target_,
     CORBA::DefinitionKind limit_type,
     CORBA::Boolean exclude_inherited
@@ -9370,24 +8205,21 @@
   ))
 {
   
-  CORBA::ContainedSeq_var _tao_retval;
+  CORBA_ContainedSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    CORBA::ContainedSeq *tmp;
-    ACE_NEW_RETURN (tmp, CORBA::ContainedSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, CORBA_ContainedSeq, _tao_retval);
+  CORBA_ContainedSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "contents",
       8,
-      2,
+      1,
       istub->orb_core ()
     );
   
@@ -9407,26 +8239,27 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_contents _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_contents ri (
         &_tao_call,
         _collocated_tao_target_,
         limit_type,
-        exclude_inherited ACE_ENV_ARG_PARAMETER
+        exclude_inherited
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -9440,13 +8273,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -9460,7 +8293,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -9473,9 +8306,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -9486,7 +8319,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -9497,13 +8330,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::ContainedSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_ContainedSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -9511,15 +8344,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -9527,11 +8360,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -9541,10 +8374,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::ContainedSeq * CORBA::_TAO_Container_Remote_Proxy_Impl::lookup_name (
+CORBA_ContainedSeq * _TAO_CORBA_Container_Remote_Proxy_Impl::lookup_name (
     CORBA_Object *_collocated_tao_target_,
     const char * search_name,
     CORBA::Long levels_to_search,
@@ -9557,24 +8390,21 @@
   ))
 {
   
-  CORBA::ContainedSeq_var _tao_retval;
+  CORBA_ContainedSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    CORBA::ContainedSeq *tmp;
-    ACE_NEW_RETURN (tmp, CORBA::ContainedSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, CORBA_ContainedSeq, _tao_retval);
+  CORBA_ContainedSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "lookup_name",
       11,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -9594,28 +8424,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_lookup_name _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_lookup_name ri (
         &_tao_call,
         _collocated_tao_target_,
         search_name,
         levels_to_search,
         limit_type,
-        exclude_inherited ACE_ENV_ARG_PARAMETER
+        exclude_inherited
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -9629,13 +8460,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -9651,7 +8482,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -9664,9 +8495,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -9677,7 +8508,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -9688,13 +8519,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::ContainedSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_ContainedSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -9702,15 +8533,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -9718,11 +8549,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -9732,10 +8563,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::Container::DescriptionSeq * CORBA::_TAO_Container_Remote_Proxy_Impl::describe_contents (
+CORBA_Container::DescriptionSeq * _TAO_CORBA_Container_Remote_Proxy_Impl::describe_contents (
     CORBA_Object *_collocated_tao_target_,
     CORBA::DefinitionKind limit_type,
     CORBA::Boolean exclude_inherited,
@@ -9747,24 +8578,21 @@
   ))
 {
   
-  CORBA::Container::DescriptionSeq_var _tao_retval;
+  CORBA_Container::DescriptionSeq *_tao_retval = 0;
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
-  {
-    CORBA::Container::DescriptionSeq *tmp;
-    ACE_NEW_RETURN (tmp, CORBA::Container::DescriptionSeq, _tao_retval._retn ());
-    _tao_retval = tmp;
-  }
+  ACE_NEW_RETURN (_tao_retval, CORBA_Container::DescriptionSeq, _tao_retval);
+  CORBA_Container::DescriptionSeq_var _tao_safe_retval (_tao_retval);
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "describe_contents",
       17,
-      3,
+      1,
       istub->orb_core ()
     );
   
@@ -9784,27 +8612,28 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_describe_contents _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_describe_contents ri (
         &_tao_call,
         _collocated_tao_target_,
         limit_type,
         exclude_inherited,
-        max_returned_objs ACE_ENV_ARG_PARAMETER
+        max_returned_objs
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -9818,13 +8647,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -9839,7 +8668,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -9852,9 +8681,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -9865,7 +8694,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -9876,13 +8705,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::Container::DescriptionSeq * _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_Container::DescriptionSeq * _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -9890,15 +8719,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -9906,11 +8735,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -9920,10 +8749,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::ModuleDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_module (
+CORBA_ModuleDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_module (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
@@ -9935,20 +8764,20 @@
   ))
 {
   
-  CORBA::ModuleDef_var _tao_retval ( tao_CORBA_ModuleDef_nil ());
-
+  CORBA_ModuleDef_ptr _tao_retval = tao_CORBA_ModuleDef_nil ();
+  CORBA_ModuleDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_module",
       13,
-      3,
+      1,
       istub->orb_core ()
     );
   
@@ -9968,27 +8797,28 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_module _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_module ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
-        version ACE_ENV_ARG_PARAMETER
+        version
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10002,13 +8832,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -10023,7 +8853,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -10036,9 +8866,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -10049,7 +8879,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -10060,13 +8890,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::ModuleDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_ModuleDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10074,15 +8904,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -10090,11 +8920,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -10104,15 +8934,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::ConstantDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_constant (
+CORBA_ConstantDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_constant (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr type,
+    CORBA_IDLType_ptr type,
     const CORBA::Any & value
     ACE_ENV_ARG_DECL
   )
@@ -10121,20 +8951,20 @@
   ))
 {
   
-  CORBA::ConstantDef_var _tao_retval ( tao_CORBA_ConstantDef_nil ());
-
+  CORBA_ConstantDef_ptr _tao_retval = tao_CORBA_ConstantDef_nil ();
+  CORBA_ConstantDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_constant",
       15,
-      5,
+      1,
       istub->orb_core ()
     );
   
@@ -10154,29 +8984,30 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_constant _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_constant ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
         type,
-        value ACE_ENV_ARG_PARAMETER
+        value
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10190,13 +9021,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -10213,7 +9044,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -10226,9 +9057,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -10239,7 +9070,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -10250,13 +9081,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::ConstantDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_ConstantDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10264,15 +9095,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -10280,11 +9111,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -10294,15 +9125,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::StructDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_struct (
+CORBA_StructDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_struct (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::StructMemberSeq & members
+    const CORBA_StructMemberSeq & members
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -10310,20 +9141,20 @@
   ))
 {
   
-  CORBA::StructDef_var _tao_retval ( tao_CORBA_StructDef_nil ());
-
+  CORBA_StructDef_ptr _tao_retval = tao_CORBA_StructDef_nil ();
+  CORBA_StructDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_struct",
       13,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -10343,28 +9174,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_struct _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_struct ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        members ACE_ENV_ARG_PARAMETER
+        members
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10378,13 +9210,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -10400,7 +9232,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -10413,9 +9245,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -10426,7 +9258,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -10437,13 +9269,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::StructDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_StructDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10451,15 +9283,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -10467,11 +9299,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -10481,16 +9313,16 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::UnionDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_union (
+CORBA_UnionDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_union (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr discriminator_type,
-    const CORBA::UnionMemberSeq & members
+    CORBA_IDLType_ptr discriminator_type,
+    const CORBA_UnionMemberSeq & members
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -10498,20 +9330,20 @@
   ))
 {
   
-  CORBA::UnionDef_var _tao_retval ( tao_CORBA_UnionDef_nil ());
-
+  CORBA_UnionDef_ptr _tao_retval = tao_CORBA_UnionDef_nil ();
+  CORBA_UnionDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_union",
       12,
-      5,
+      1,
       istub->orb_core ()
     );
   
@@ -10531,29 +9363,30 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_union _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_union ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
         discriminator_type,
-        members ACE_ENV_ARG_PARAMETER
+        members
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10567,13 +9400,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -10590,7 +9423,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -10603,9 +9436,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -10616,7 +9449,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -10627,13 +9460,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::UnionDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_UnionDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10641,15 +9474,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -10657,11 +9490,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -10671,15 +9504,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::EnumDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_enum (
+CORBA_EnumDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_enum (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::EnumMemberSeq & members
+    const CORBA_EnumMemberSeq & members
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -10687,20 +9520,20 @@
   ))
 {
   
-  CORBA::EnumDef_var _tao_retval ( tao_CORBA_EnumDef_nil ());
-
+  CORBA_EnumDef_ptr _tao_retval = tao_CORBA_EnumDef_nil ();
+  CORBA_EnumDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_enum",
       11,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -10720,28 +9553,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_enum _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_enum ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        members ACE_ENV_ARG_PARAMETER
+        members
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10755,13 +9589,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -10777,7 +9611,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -10790,9 +9624,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -10803,7 +9637,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -10814,13 +9648,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::EnumDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_EnumDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10828,15 +9662,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -10844,11 +9678,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -10858,15 +9692,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::AliasDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_alias (
+CORBA_AliasDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_alias (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr original_type
+    CORBA_IDLType_ptr original_type
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -10874,20 +9708,20 @@
   ))
 {
   
-  CORBA::AliasDef_var _tao_retval ( tao_CORBA_AliasDef_nil ());
-
+  CORBA_AliasDef_ptr _tao_retval = tao_CORBA_AliasDef_nil ();
+  CORBA_AliasDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_alias",
       12,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -10907,28 +9741,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_alias _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_alias ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        original_type ACE_ENV_ARG_PARAMETER
+        original_type
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -10942,13 +9777,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -10964,7 +9799,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -10977,9 +9812,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -10990,7 +9825,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -11001,13 +9836,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::AliasDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_AliasDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11015,15 +9850,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11031,11 +9866,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11045,15 +9880,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::InterfaceDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_interface (
+CORBA_InterfaceDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_interface (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::InterfaceDefSeq & base_interfaces
+    const CORBA_InterfaceDefSeq & base_interfaces
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -11061,20 +9896,20 @@
   ))
 {
   
-  CORBA::InterfaceDef_var _tao_retval ( tao_CORBA_InterfaceDef_nil ());
-
+  CORBA_InterfaceDef_ptr _tao_retval = tao_CORBA_InterfaceDef_nil ();
+  CORBA_InterfaceDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_interface",
       16,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -11094,28 +9929,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_interface _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_interface ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        base_interfaces ACE_ENV_ARG_PARAMETER
+        base_interfaces
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11129,13 +9965,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -11151,7 +9987,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -11164,9 +10000,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11177,7 +10013,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -11188,13 +10024,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::InterfaceDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_InterfaceDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11202,15 +10038,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11218,11 +10054,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11232,21 +10068,21 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::ValueDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_value (
+CORBA_ValueDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_value (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
     CORBA::Boolean is_custom,
     CORBA::Boolean is_abstract,
-    CORBA::ValueDef_ptr base_value,
+    CORBA_ValueDef_ptr base_value,
     CORBA::Boolean is_truncatable,
-    const CORBA::ValueDefSeq & abstract_base_values,
-    const CORBA::InterfaceDefSeq & supported_interfaces,
-    const CORBA::InitializerSeq & initializers
+    const CORBA_ValueDefSeq & abstract_base_values,
+    const CORBA_InterfaceDefSeq & supported_interfaces,
+    const CORBA_InitializerSeq & initializers
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -11254,20 +10090,20 @@
   ))
 {
   
-  CORBA::ValueDef_var _tao_retval ( tao_CORBA_ValueDef_nil ());
-
+  CORBA_ValueDef_ptr _tao_retval = tao_CORBA_ValueDef_nil ();
+  CORBA_ValueDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_value",
       12,
-      10,
+      1,
       istub->orb_core ()
     );
   
@@ -11287,7 +10123,7 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_value _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_value ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
@@ -11299,22 +10135,23 @@
         is_truncatable,
         abstract_base_values,
         supported_interfaces,
-        initializers ACE_ENV_ARG_PARAMETER
+        initializers
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11328,13 +10165,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -11356,7 +10193,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -11369,9 +10206,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11382,7 +10219,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -11393,13 +10230,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::ValueDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_ValueDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11407,15 +10244,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11423,11 +10260,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11437,15 +10274,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::ValueBoxDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_value_box (
+CORBA_ValueBoxDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_value_box (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr original_type_def
+    CORBA_IDLType_ptr original_type_def
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -11453,20 +10290,20 @@
   ))
 {
   
-  CORBA::ValueBoxDef_var _tao_retval ( tao_CORBA_ValueBoxDef_nil ());
-
+  CORBA_ValueBoxDef_ptr _tao_retval = tao_CORBA_ValueBoxDef_nil ();
+  CORBA_ValueBoxDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_value_box",
       16,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -11486,28 +10323,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_value_box _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_value_box ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        original_type_def ACE_ENV_ARG_PARAMETER
+        original_type_def
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11521,13 +10359,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -11543,7 +10381,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -11556,9 +10394,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11569,7 +10407,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -11580,13 +10418,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::ValueBoxDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_ValueBoxDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11594,15 +10432,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11610,11 +10448,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11624,15 +10462,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::ExceptionDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_exception (
+CORBA_ExceptionDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_exception (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::StructMemberSeq & members
+    const CORBA_StructMemberSeq & members
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -11640,20 +10478,20 @@
   ))
 {
   
-  CORBA::ExceptionDef_var _tao_retval ( tao_CORBA_ExceptionDef_nil ());
-
+  CORBA_ExceptionDef_ptr _tao_retval = tao_CORBA_ExceptionDef_nil ();
+  CORBA_ExceptionDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_exception",
       16,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -11673,28 +10511,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_exception _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_exception ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        members ACE_ENV_ARG_PARAMETER
+        members
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11708,13 +10547,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -11730,7 +10569,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -11743,9 +10582,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11756,7 +10595,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -11767,13 +10606,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::ExceptionDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_ExceptionDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11781,15 +10620,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11797,11 +10636,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11811,10 +10650,10 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::NativeDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_native (
+CORBA_NativeDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_native (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
@@ -11826,20 +10665,20 @@
   ))
 {
   
-  CORBA::NativeDef_var _tao_retval ( tao_CORBA_NativeDef_nil ());
-
+  CORBA_NativeDef_ptr _tao_retval = tao_CORBA_NativeDef_nil ();
+  CORBA_NativeDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_native",
       13,
-      3,
+      1,
       istub->orb_core ()
     );
   
@@ -11859,27 +10698,28 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_native _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_native ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
-        version ACE_ENV_ARG_PARAMETER
+        version
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11893,13 +10733,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -11914,7 +10754,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -11927,9 +10767,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -11940,7 +10780,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -11951,13 +10791,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::NativeDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_NativeDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -11965,15 +10805,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -11981,11 +10821,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -11995,15 +10835,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::AbstractInterfaceDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_abstract_interface (
+CORBA_AbstractInterfaceDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_abstract_interface (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::AbstractInterfaceDefSeq & base_interfaces
+    const CORBA_AbstractInterfaceDefSeq & base_interfaces
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -12011,20 +10851,20 @@
   ))
 {
   
-  CORBA::AbstractInterfaceDef_var _tao_retval ( tao_CORBA_AbstractInterfaceDef_nil ());
-
+  CORBA_AbstractInterfaceDef_ptr _tao_retval = tao_CORBA_AbstractInterfaceDef_nil ();
+  CORBA_AbstractInterfaceDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_abstract_interface",
       25,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -12044,28 +10884,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_abstract_interface _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_abstract_interface ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        base_interfaces ACE_ENV_ARG_PARAMETER
+        base_interfaces
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12079,13 +10920,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -12101,7 +10942,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -12114,9 +10955,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -12127,7 +10968,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -12138,13 +10979,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::AbstractInterfaceDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_AbstractInterfaceDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12152,15 +10993,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -12168,11 +11009,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -12182,15 +11023,15 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
-::CORBA::LocalInterfaceDef_ptr CORBA::_TAO_Container_Remote_Proxy_Impl::create_local_interface (
+CORBA_LocalInterfaceDef_ptr _TAO_CORBA_Container_Remote_Proxy_Impl::create_local_interface (
     CORBA_Object *_collocated_tao_target_,
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::InterfaceDefSeq & base_interfaces
+    const CORBA_InterfaceDefSeq & base_interfaces
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
@@ -12198,20 +11039,20 @@
   ))
 {
   
-  CORBA::LocalInterfaceDef_var _tao_retval ( tao_CORBA_LocalInterfaceDef_nil ());
-
+  CORBA_LocalInterfaceDef_ptr _tao_retval = tao_CORBA_LocalInterfaceDef_nil ();
+  CORBA_LocalInterfaceDef_var _tao_safe_retval (_tao_retval);
 
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
       istub,
       "create_local_interface",
       22,
-      4,
+      1,
       istub->orb_core ()
     );
   
@@ -12231,28 +11072,29 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_Container_create_local_interface _tao_ri (
+      TAO_ClientRequestInfo_CORBA_Container_create_local_interface ri (
         &_tao_call,
         _collocated_tao_target_,
         id,
         name,
         version,
-        base_interfaces ACE_ENV_ARG_PARAMETER
+        base_interfaces
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12266,13 +11108,13 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
           if (!(
@@ -12288,7 +11130,7 @@
             
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -12301,9 +11143,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -12314,7 +11156,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -12325,13 +11167,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          ::CORBA::LocalInterfaceDef_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA_LocalInterfaceDef_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -12339,15 +11181,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -12355,11 +11197,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -12369,7 +11211,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 
@@ -12382,37 +11224,37 @@
 //           Remote & Base  Proxy Broker Implementation
 //
 
-CORBA::_TAO_Container_Proxy_Broker::_TAO_Container_Proxy_Broker (void)
+_TAO_CORBA_Container_Proxy_Broker::_TAO_CORBA_Container_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_Container_Proxy_Broker::~_TAO_Container_Proxy_Broker (void)
+_TAO_CORBA_Container_Proxy_Broker::~_TAO_CORBA_Container_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_Container_Proxy_Broker * (*CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer) (
+_TAO_CORBA_Container_Proxy_Broker * (*_TAO_CORBA_Container_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   ) = 0;
 
 // Factory Member function Implementation.
-CORBA::_TAO_Container_Remote_Proxy_Broker *
-CORBA::_TAO_Container_Remote_Proxy_Broker::the_TAO_Container_Remote_Proxy_Broker (void)
+_TAO_CORBA_Container_Remote_Proxy_Broker *
+_TAO_CORBA_Container_Remote_Proxy_Broker::the_TAO_CORBA_Container_Remote_Proxy_Broker (void)
 {
-  static ::CORBA::_TAO_Container_Remote_Proxy_Broker remote_proxy_broker;
+  static ::_TAO_CORBA_Container_Remote_Proxy_Broker remote_proxy_broker;
   return &remote_proxy_broker;
 }
 
-CORBA::_TAO_Container_Remote_Proxy_Broker::_TAO_Container_Remote_Proxy_Broker (void)
+_TAO_CORBA_Container_Remote_Proxy_Broker::_TAO_CORBA_Container_Remote_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_Container_Remote_Proxy_Broker::~_TAO_Container_Remote_Proxy_Broker (void)
+_TAO_CORBA_Container_Remote_Proxy_Broker::~_TAO_CORBA_Container_Remote_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_Container_Proxy_Impl&
-CORBA::_TAO_Container_Remote_Proxy_Broker::select_proxy (
-  ::CORBA::Container *
+_TAO_CORBA_Container_Proxy_Impl&
+_TAO_CORBA_Container_Remote_Proxy_Broker::select_proxy (
+  ::CORBA_Container *
   ACE_ENV_ARG_DECL_NOT_USED
 )
 {
@@ -12425,126 +11267,110 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
-CORBA::Container::Container (int collocated)
+// default constructor
+CORBA_Container::CORBA_Container (int collocated)
 {
   this->CORBA_Container_setup_collocation (collocated);
 }
 
-CORBA::Container::~Container (void)
+// destructor
+CORBA_Container::~CORBA_Container (void)
 {}
 
 void
-CORBA::Container::CORBA_Container_setup_collocation (int collocated)
+CORBA_Container::CORBA_Container_setup_collocation (int collocated)
 {
   if (collocated)
-    this->the_TAO_Container_Proxy_Broker_ =
-      ::CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer (this);
+    this->the_TAO_CORBA_Container_Proxy_Broker_ =
+      ::_TAO_CORBA_Container_Proxy_Broker_Factory_function_pointer (this);
   else
-    this->the_TAO_Container_Proxy_Broker_ =
-      ::CORBA::_TAO_Container_Remote_Proxy_Broker::the_TAO_Container_Remote_Proxy_Broker ();
+    this->the_TAO_CORBA_Container_Proxy_Broker_ =
+      ::_TAO_CORBA_Container_Remote_Proxy_Broker::the_TAO_CORBA_Container_Remote_Proxy_Broker ();
   
   this->CORBA_IRObject_setup_collocation (collocated);
 }
 
-void CORBA::Container::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_Container::_tao_any_destructor (void *_tao_void_pointer)
 {
-  Container *tmp = ACE_static_cast (Container*, _tao_void_pointer);
+  CORBA_Container *tmp = ACE_static_cast (CORBA_Container*, _tao_void_pointer);
   CORBA::release (tmp);
 }
 
-CORBA::Container_ptr CORBA::Container::_narrow (
+CORBA_Container_ptr CORBA_Container::_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL
   )
 {
   if (CORBA::is_nil (obj))
-    return Container::_nil ();
+    return CORBA_Container::_nil ();
   if (! obj->_is_local ())
     {
       CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/Container:1.0" ACE_ENV_ARG_PARAMETER);
-      ACE_CHECK_RETURN (Container::_nil ());
+      ACE_CHECK_RETURN (CORBA_Container::_nil ());
       if (is_a == 0)
-        return Container::_nil ();
+        return CORBA_Container::_nil ();
     }
-  return Container::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
+  return CORBA_Container::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-CORBA::Container_ptr 
-CORBA::Container::_unchecked_narrow (
+CORBA_Container_ptr CORBA_Container::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
 {
   if (CORBA::is_nil (obj))
-    return Container::_nil ();
+    return CORBA_Container::_nil ();
   if (! obj->_is_local ())
     {
       TAO_Stub* stub = obj->_stubobj ();
       if (stub)
         stub->_incr_refcnt ();
-      Container_ptr default_proxy = Container::_nil ();
+      CORBA_Container_ptr default_proxy = CORBA_Container::_nil ();
 
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          CORBA__TAO_Container_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&_TAO_CORBA_Container_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
               default_proxy,
-              ::CORBA::Container (
+          ::CORBA_Container (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              Container::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::CORBA::Container (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              Container::_nil ()
-            );
+          CORBA_Container::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::CORBA_Container (stub, 0, obj->_servant ()), CORBA_Container::_nil ());
       return default_proxy;
     }
   else 
     return
       ACE_reinterpret_cast
         (
-          Container_ptr,
+            CORBA_Container_ptr,
             obj->_tao_QueryInterface
               (
                 ACE_reinterpret_cast
                   (
                     ptr_arith_t,
-                    &Container::_tao_class_id
+                      &CORBA_Container::_tao_class_id
                   )
               )
         );
 }
 
-CORBA::Container_ptr
-CORBA::Container::_duplicate (Container_ptr obj)
+CORBA_Container_ptr
+CORBA_Container::_duplicate (CORBA_Container_ptr obj)
 {
   if (!CORBA::is_nil (obj))
     obj->_add_ref ();
   return obj;
 }
 
-CORBA::Boolean CORBA::Container::_is_a (const CORBA::Char *value ACE_ENV_ARG_DECL)
+CORBA::Boolean CORBA_Container::_is_a (const CORBA::Char *value ACE_ENV_ARG_DECL)
 {
   if (
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Container:1.0")) ||
@@ -12555,22 +11381,22 @@
     return this->CORBA_Object::_is_a (value ACE_ENV_ARG_PARAMETER);
 }
 
-void *CORBA::Container::_tao_QueryInterface (ptr_arith_t type)
+void *CORBA_Container::_tao_QueryInterface (ptr_arith_t type)
 {
   void *retv = 0;
   if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, Container)::_tao_class_id))
+      &CORBA_Container::_tao_class_id))
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, IRObject)::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -12583,12 +11409,12 @@
   return retv;
 }
 
-const char* CORBA::Container::_interface_repository_id (void) const
+const char* CORBA_Container::_interface_repository_id (void) const
 {
   return "IDL:omg.org/CORBA/Container:1.0";
 }
 
-::CORBA::Contained_ptr CORBA::Container::lookup (
+CORBA_Contained_ptr CORBA_Container::lookup (
     const char * search_name
     ACE_ENV_ARG_DECL
   )
@@ -12596,17 +11422,18 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.lookup (
       this,
-      search_name ACE_ENV_ARG_PARAMETER
+      search_name
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::ContainedSeq * CORBA::Container::contents (
+CORBA_ContainedSeq * CORBA_Container::contents (
     CORBA::DefinitionKind limit_type,
     CORBA::Boolean exclude_inherited
     ACE_ENV_ARG_DECL
@@ -12615,18 +11442,19 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.contents (
       this,
       limit_type,
-      exclude_inherited ACE_ENV_ARG_PARAMETER
+      exclude_inherited
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::ContainedSeq * CORBA::Container::lookup_name (
+CORBA_ContainedSeq * CORBA_Container::lookup_name (
     const char * search_name,
     CORBA::Long levels_to_search,
     CORBA::DefinitionKind limit_type,
@@ -12637,8 +11465,8 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.lookup_name (
@@ -12646,7 +11474,8 @@
       search_name,
       levels_to_search,
       limit_type,
-      exclude_inherited ACE_ENV_ARG_PARAMETER
+      exclude_inherited
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
@@ -12842,13 +11671,13 @@
     sizeof (_oc_CORBA_Container_Description),
     (char *) &_oc_CORBA_Container_Description,
     0,
-    sizeof (CORBA::Container::Description)
+    sizeof (CORBA_Container::Description)
   );
 
-::CORBA::TypeCode_ptr CORBA::Container::_tc_Description =
+CORBA::TypeCode_ptr CORBA_Container::_tc_Description =
   &_tc_TAO_tc_CORBA_Container_Description;
 
-void CORBA::Container::Description::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_Container::Description::_tao_any_destructor (void *_tao_void_pointer)
 {
   Description *tmp = ACE_static_cast (Description*, _tao_void_pointer);
   delete tmp;
@@ -12861,14 +11690,14 @@
 #define __TAO_UNBOUNDED_SEQUENCE_CORBA_CONTAINER_DESCRIPTIONSEQ_CS_
 
 void
-CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_allocate_buffer (CORBA::ULong length)
+CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_allocate_buffer (CORBA::ULong length)
 {
-  CORBA::Container::Description* tmp = 0;
+  CORBA_Container::Description* tmp = 0;
   tmp = _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::allocbuf (length);
   
   if (this->buffer_ != 0)
   {
-    CORBA::Container::Description *old = ACE_reinterpret_cast (CORBA::Container::Description *,this->buffer_);
+    CORBA_Container::Description *old = ACE_reinterpret_cast (CORBA_Container::Description *,this->buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       tmp[i] = old[i];
@@ -12881,18 +11710,18 @@
 }
 
 void
-CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_deallocate_buffer (void)
+CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::_deallocate_buffer (void)
 {
   if (this->buffer_ == 0 || this->release_ == 0)
     return;
   
-  CORBA::Container::Description *tmp = ACE_reinterpret_cast (CORBA::Container::Description *,this->buffer_);
+  CORBA_Container::Description *tmp = ACE_reinterpret_cast (CORBA_Container::Description *,this->buffer_);
   
   _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::freebuf (tmp);
   this->buffer_ = 0;
 } 
 
-CORBA::Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::~_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (void) // Dtor.
+CORBA_Container::_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq::~_TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq (void) // Dtor.
 {
   this->_deallocate_buffer ();
 }
@@ -12907,41 +11736,41 @@
 #define _CORBA_CONTAINER_DESCRIPTIONSEQ_CS_
 
 // *************************************************************
-// CORBA::Container::DescriptionSeq
+// CORBA_Container::DescriptionSeq
 // *************************************************************
 
-CORBA::Container::DescriptionSeq::DescriptionSeq (void)
+CORBA_Container::DescriptionSeq::DescriptionSeq (void)
 {}
-CORBA::Container::DescriptionSeq::DescriptionSeq (CORBA::ULong max) // uses max size
+CORBA_Container::DescriptionSeq::DescriptionSeq (CORBA::ULong max) // uses max size
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::Container::Description>
+TAO_Unbounded_Sequence<CORBA_Container::Description>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA::Container::DescriptionSeq::DescriptionSeq (CORBA::ULong max, CORBA::ULong length, CORBA::Container::Description *buffer, CORBA::Boolean release)
+CORBA_Container::DescriptionSeq::DescriptionSeq (CORBA::ULong max, CORBA::ULong length, CORBA_Container::Description *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::Container::Description>
+TAO_Unbounded_Sequence<CORBA_Container::Description>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
-CORBA::Container::DescriptionSeq::DescriptionSeq (const DescriptionSeq &seq) // copy ctor
+CORBA_Container::DescriptionSeq::DescriptionSeq (const DescriptionSeq &seq) // copy ctor
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Sequence_CORBA_Container_DescriptionSeq
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Sequence<CORBA::Container::Description>
+TAO_Unbounded_Sequence<CORBA_Container::Description>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
-CORBA::Container::DescriptionSeq::~DescriptionSeq (void) // dtor
+CORBA_Container::DescriptionSeq::~DescriptionSeq (void) // dtor
 {}
-void CORBA::Container::DescriptionSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_Container::DescriptionSeq::_tao_any_destructor (void *_tao_void_pointer)
 {
   DescriptionSeq *tmp = ACE_static_cast (DescriptionSeq*, _tao_void_pointer);
   delete tmp;
@@ -13169,13 +11998,13 @@
     sizeof (_oc_CORBA_Container_DescriptionSeq),
     (char *) &_oc_CORBA_Container_DescriptionSeq,
     0,
-    sizeof (CORBA::Container::DescriptionSeq)
+    sizeof (CORBA_Container::DescriptionSeq)
   );
 
-::CORBA::TypeCode_ptr CORBA::Container::_tc_DescriptionSeq =
+CORBA::TypeCode_ptr CORBA_Container::_tc_DescriptionSeq =
   &_tc_TAO_tc_CORBA_Container_DescriptionSeq;
 
-::CORBA::Container::DescriptionSeq * CORBA::Container::describe_contents (
+CORBA_Container::DescriptionSeq * CORBA_Container::describe_contents (
     CORBA::DefinitionKind limit_type,
     CORBA::Boolean exclude_inherited,
     CORBA::Long max_returned_objs
@@ -13185,19 +12014,20 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.describe_contents (
       this,
       limit_type,
       exclude_inherited,
-      max_returned_objs ACE_ENV_ARG_PARAMETER
+      max_returned_objs
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::ModuleDef_ptr CORBA::Container::create_module (
+CORBA_ModuleDef_ptr CORBA_Container::create_module (
     const char * id,
     const char * name,
     const char * version
@@ -13207,23 +12037,24 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_module (
       this,
       id,
       name,
-      version ACE_ENV_ARG_PARAMETER
+      version
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::ConstantDef_ptr CORBA::Container::create_constant (
+CORBA_ConstantDef_ptr CORBA_Container::create_constant (
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr type,
+    CORBA_IDLType_ptr type,
     const CORBA::Any & value
     ACE_ENV_ARG_DECL
   )
@@ -13231,8 +12062,8 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_constant (
@@ -13241,23 +12072,24 @@
       name,
       version,
       type,
-      value ACE_ENV_ARG_PARAMETER
+      value
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::StructDef_ptr CORBA::Container::create_struct (
+CORBA_StructDef_ptr CORBA_Container::create_struct (
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::StructMemberSeq & members
+    const CORBA_StructMemberSeq & members
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_struct (
@@ -13265,24 +12097,25 @@
       id,
       name,
       version,
-      members ACE_ENV_ARG_PARAMETER
+      members
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::UnionDef_ptr CORBA::Container::create_union (
+CORBA_UnionDef_ptr CORBA_Container::create_union (
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr discriminator_type,
-    const CORBA::UnionMemberSeq & members
+    CORBA_IDLType_ptr discriminator_type,
+    const CORBA_UnionMemberSeq & members
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_union (
@@ -13291,23 +12124,24 @@
       name,
       version,
       discriminator_type,
-      members ACE_ENV_ARG_PARAMETER
+      members
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::EnumDef_ptr CORBA::Container::create_enum (
+CORBA_EnumDef_ptr CORBA_Container::create_enum (
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::EnumMemberSeq & members
+    const CORBA_EnumMemberSeq & members
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_enum (
@@ -13315,23 +12149,24 @@
       id,
       name,
       version,
-      members ACE_ENV_ARG_PARAMETER
+      members
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::AliasDef_ptr CORBA::Container::create_alias (
+CORBA_AliasDef_ptr CORBA_Container::create_alias (
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr original_type
+    CORBA_IDLType_ptr original_type
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_alias (
@@ -13339,23 +12174,24 @@
       id,
       name,
       version,
-      original_type ACE_ENV_ARG_PARAMETER
+      original_type
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::InterfaceDef_ptr CORBA::Container::create_interface (
+CORBA_InterfaceDef_ptr CORBA_Container::create_interface (
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::InterfaceDefSeq & base_interfaces
+    const CORBA_InterfaceDefSeq & base_interfaces
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_interface (
@@ -13363,29 +12199,30 @@
       id,
       name,
       version,
-      base_interfaces ACE_ENV_ARG_PARAMETER
+      base_interfaces
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::ValueDef_ptr CORBA::Container::create_value (
+CORBA_ValueDef_ptr CORBA_Container::create_value (
     const char * id,
     const char * name,
     const char * version,
     CORBA::Boolean is_custom,
     CORBA::Boolean is_abstract,
-    CORBA::ValueDef_ptr base_value,
+    CORBA_ValueDef_ptr base_value,
     CORBA::Boolean is_truncatable,
-    const CORBA::ValueDefSeq & abstract_base_values,
-    const CORBA::InterfaceDefSeq & supported_interfaces,
-    const CORBA::InitializerSeq & initializers
+    const CORBA_ValueDefSeq & abstract_base_values,
+    const CORBA_InterfaceDefSeq & supported_interfaces,
+    const CORBA_InitializerSeq & initializers
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_value (
@@ -13399,23 +12236,24 @@
       is_truncatable,
       abstract_base_values,
       supported_interfaces,
-      initializers ACE_ENV_ARG_PARAMETER
+      initializers
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::ValueBoxDef_ptr CORBA::Container::create_value_box (
+CORBA_ValueBoxDef_ptr CORBA_Container::create_value_box (
     const char * id,
     const char * name,
     const char * version,
-    CORBA::IDLType_ptr original_type_def
+    CORBA_IDLType_ptr original_type_def
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_value_box (
@@ -13423,23 +12261,24 @@
       id,
       name,
       version,
-      original_type_def ACE_ENV_ARG_PARAMETER
+      original_type_def
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::ExceptionDef_ptr CORBA::Container::create_exception (
+CORBA_ExceptionDef_ptr CORBA_Container::create_exception (
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::StructMemberSeq & members
+    const CORBA_StructMemberSeq & members
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_exception (
@@ -13447,11 +12286,12 @@
       id,
       name,
       version,
-      members ACE_ENV_ARG_PARAMETER
+      members
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::NativeDef_ptr CORBA::Container::create_native (
+CORBA_NativeDef_ptr CORBA_Container::create_native (
     const char * id,
     const char * name,
     const char * version
@@ -13461,31 +12301,32 @@
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_native (
       this,
       id,
       name,
-      version ACE_ENV_ARG_PARAMETER
+      version
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::AbstractInterfaceDef_ptr CORBA::Container::create_abstract_interface (
+CORBA_AbstractInterfaceDef_ptr CORBA_Container::create_abstract_interface (
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::AbstractInterfaceDefSeq & base_interfaces
+    const CORBA_AbstractInterfaceDefSeq & base_interfaces
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_abstract_interface (
@@ -13493,23 +12334,24 @@
       id,
       name,
       version,
-      base_interfaces ACE_ENV_ARG_PARAMETER
+      base_interfaces
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-::CORBA::LocalInterfaceDef_ptr CORBA::Container::create_local_interface (
+CORBA_LocalInterfaceDef_ptr CORBA_Container::create_local_interface (
     const char * id,
     const char * name,
     const char * version,
-    const CORBA::InterfaceDefSeq & base_interfaces
+    const CORBA_InterfaceDefSeq & base_interfaces
     ACE_ENV_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_Container_Proxy_Impl &proxy = 
-    this->the_TAO_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_Container_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_Container_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.create_local_interface (
@@ -13517,78 +12359,42 @@
       id,
       name,
       version,
-      base_interfaces ACE_ENV_ARG_PARAMETER
+      base_interfaces
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-static const CORBA::Long _oc_CORBA_Container[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  32,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f436f), 
-  ACE_NTOHL (0x6e746169), 
-  ACE_NTOHL (0x6e65723a), 
-  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA/Container:1.0
-  10,
-  ACE_NTOHL (0x436f6e74), 
-  ACE_NTOHL (0x61696e65), 
-  ACE_NTOHL (0x72000000),  // name = Container
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_Container (
-    CORBA::tk_objref,
-    sizeof (_oc_CORBA_Container),
-    (char *) &_oc_CORBA_Container,
-    0,
-    sizeof (CORBA::Container)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_Container, &_tc_TAO_tc_CORBA_Container)
-TAO_NAMESPACE_END
-
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int CORBA::IDLType::_tao_class_id = 0;
-
-CORBA::IDLType_ptr
+CORBA_IDLType_ptr
 tao_CORBA_IDLType_duplicate (
-    CORBA::IDLType_ptr p
+    CORBA_IDLType_ptr p
   )
 {
-  return CORBA::IDLType::_duplicate (p);
+  return CORBA_IDLType::_duplicate (p);
 }
 
 void
 tao_CORBA_IDLType_release (
-    CORBA::IDLType_ptr p
+    CORBA_IDLType_ptr p
   )
 {
   CORBA::release (p);
 }
 
-CORBA::IDLType_ptr
+CORBA_IDLType_ptr
 tao_CORBA_IDLType_nil (
     void
   )
 {
-  return CORBA::IDLType::_nil ();
+  return CORBA_IDLType::_nil ();
 }
 
-CORBA::IDLType_ptr
+CORBA_IDLType_ptr
 tao_CORBA_IDLType_narrow (
     CORBA::Object *p
     ACE_ENV_ARG_DECL
   )
 {
-  return CORBA::IDLType::_narrow (p ACE_ENV_ARG_PARAMETER);
+  return CORBA_IDLType::_narrow (p ACE_ENV_ARG_PARAMETER);
 }
 
 CORBA::Object *
@@ -13596,193 +12402,191 @@
     void *src
   )
 {
-  CORBA::IDLType **tmp =
-    ACE_static_cast (CORBA::IDLType **, src);
+  CORBA_IDLType **tmp =
+    ACE_static_cast (CORBA_IDLType **, src);
   return *tmp;
 }
 
+int CORBA_IDLType::_tao_class_id = 0;
+
 // *************************************************************
-// CORBA::IDLType_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class CORBA_IDLType_var
 // *************************************************************
 
-CORBA::IDLType_var::IDLType_var (void) // default constructor
-  : ptr_ (IDLType::_nil ())
+CORBA_IDLType_var::CORBA_IDLType_var (void) // default constructor
+  : ptr_ (CORBA_IDLType::_nil ())
 {}
 
-::CORBA::IDLType_ptr
-CORBA::IDLType_var::ptr (void) const
+::CORBA_IDLType_ptr
+CORBA_IDLType_var::ptr (void) const
 {
   return this->ptr_;
 }
 
-CORBA::IDLType_var::IDLType_var (const ::CORBA::IDLType_var &p) // copy constructor
+CORBA_IDLType_var::CORBA_IDLType_var (const ::CORBA_IDLType_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (IDLType::_duplicate (p.ptr ()))
+    ptr_ (CORBA_IDLType::_duplicate (p.ptr ()))
 {}
 
-CORBA::IDLType_var::~IDLType_var (void) // destructor
+CORBA_IDLType_var::~CORBA_IDLType_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-CORBA::IDLType_var &
-CORBA::IDLType_var::operator= (IDLType_ptr p)
+CORBA_IDLType_var &
+CORBA_IDLType_var::operator= (CORBA_IDLType_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-CORBA::IDLType_var &
-CORBA::IDLType_var::operator= (const ::CORBA::IDLType_var &p)
+CORBA_IDLType_var &
+CORBA_IDLType_var::operator= (const ::CORBA_IDLType_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::CORBA::IDLType::_duplicate (p.ptr ());
+    this->ptr_ = ::CORBA_IDLType::_duplicate (p.ptr ());
   }
   return *this;
 }
 
-CORBA::IDLType_var::operator const ::CORBA::IDLType_ptr &() const // cast
+CORBA_IDLType_var::operator const ::CORBA_IDLType_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-CORBA::IDLType_var::operator ::CORBA::IDLType_ptr &() // cast 
+CORBA_IDLType_var::operator ::CORBA_IDLType_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA::IDLType_ptr
-CORBA::IDLType_var::operator-> (void) const
+::CORBA_IDLType_ptr
+CORBA_IDLType_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-::CORBA::IDLType_ptr
-CORBA::IDLType_var::in (void) const
+::CORBA_IDLType_ptr
+CORBA_IDLType_var::in (void) const
 {
   return this->ptr_;
 }
 
-::CORBA::IDLType_ptr &
-CORBA::IDLType_var::inout (void)
+::CORBA_IDLType_ptr &
+CORBA_IDLType_var::inout (void)
 {
   return this->ptr_;
 }
 
-::CORBA::IDLType_ptr &
-CORBA::IDLType_var::out (void)
+::CORBA_IDLType_ptr &
+CORBA_IDLType_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::IDLType::_nil ();
+  this->ptr_ = ::CORBA_IDLType::_nil ();
   return this->ptr_;
 }
 
-::CORBA::IDLType_ptr
-CORBA::IDLType_var::_retn (void)
+::CORBA_IDLType_ptr
+CORBA_IDLType_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::CORBA::IDLType_ptr val = this->ptr_;
-  this->ptr_ = ::CORBA::IDLType::_nil ();
+  ::CORBA_IDLType_ptr val = this->ptr_;
+  this->ptr_ = ::CORBA_IDLType::_nil ();
   return val;
 }
 
-::CORBA::IDLType_ptr
-CORBA::IDLType_var::tao_duplicate (IDLType_ptr p)
+::CORBA_IDLType_ptr
+CORBA_IDLType_var::tao_duplicate (CORBA_IDLType_ptr p)
 {
-  return ::CORBA::IDLType::_duplicate (p);
+  return ::CORBA_IDLType::_duplicate (p);
 }
 
 void
-CORBA::IDLType_var::tao_release (IDLType_ptr p)
+CORBA_IDLType_var::tao_release (CORBA_IDLType_ptr p)
 {
   CORBA::release (p);
 }
 
-::CORBA::IDLType_ptr
-CORBA::IDLType_var::tao_nil (void)
+::CORBA_IDLType_ptr
+CORBA_IDLType_var::tao_nil (void)
 {
-  return ::CORBA::IDLType::_nil ();
+  return ::CORBA_IDLType::_nil ();
 }
 
-::CORBA::IDLType_ptr
-CORBA::IDLType_var::tao_narrow (
+::CORBA_IDLType_ptr
+CORBA_IDLType_var::tao_narrow (
     CORBA::Object *p
     ACE_ENV_ARG_DECL
   )
 {
-  return ::CORBA::IDLType::_narrow (p ACE_ENV_ARG_PARAMETER);
+  return ::CORBA_IDLType::_narrow (p ACE_ENV_ARG_PARAMETER);
 }
 
 CORBA::Object *
-CORBA::IDLType_var::tao_upcast (void *src)
+CORBA_IDLType_var::tao_upcast (void *src)
 {
-  IDLType **tmp =
-    ACE_static_cast (IDLType **, src);
+  CORBA_IDLType **tmp =
+    ACE_static_cast (CORBA_IDLType **, src);
   return *tmp;
 }
 
 // *************************************************************
-// CORBA::IDLType_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class CORBA_IDLType_out
 // *************************************************************
 
-CORBA::IDLType_out::IDLType_out (IDLType_ptr &p)
+CORBA_IDLType_out::CORBA_IDLType_out (CORBA_IDLType_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::CORBA::IDLType::_nil ();
+  this->ptr_ = ::CORBA_IDLType::_nil ();
 }
 
-CORBA::IDLType_out::IDLType_out (IDLType_var &p) // constructor from _var
+CORBA_IDLType_out::CORBA_IDLType_out (CORBA_IDLType_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::IDLType::_nil ();
+  this->ptr_ = ::CORBA_IDLType::_nil ();
 }
 
-CORBA::IDLType_out::IDLType_out (const ::CORBA::IDLType_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IDLType_out &, p).ptr_)
+CORBA_IDLType_out::CORBA_IDLType_out (const ::CORBA_IDLType_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (CORBA_IDLType_out &, p).ptr_)
 {}
 
-::CORBA::IDLType_out &
-CORBA::IDLType_out::operator= (const ::CORBA::IDLType_out &p)
+::CORBA_IDLType_out &
+CORBA_IDLType_out::operator= (const ::CORBA_IDLType_out &p)
 {
-  this->ptr_ = ACE_const_cast (IDLType_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (CORBA_IDLType_out&, p).ptr_;
   return *this;
 }
 
-CORBA::IDLType_out &
-CORBA::IDLType_out::operator= (const ::CORBA::IDLType_var &p)
+CORBA_IDLType_out &
+CORBA_IDLType_out::operator= (const ::CORBA_IDLType_var &p)
 {
-  this->ptr_ = ::CORBA::IDLType::_duplicate (p.ptr ());
+  this->ptr_ = ::CORBA_IDLType::_duplicate (p.ptr ());
   return *this;
 }
 
-CORBA::IDLType_out &
-CORBA::IDLType_out::operator= (IDLType_ptr p)
+CORBA_IDLType_out &
+CORBA_IDLType_out::operator= (CORBA_IDLType_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
-CORBA::IDLType_out::operator ::CORBA::IDLType_ptr &() // cast
+CORBA_IDLType_out::operator ::CORBA_IDLType_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA::IDLType_ptr &
-CORBA::IDLType_out::ptr (void) // ptr
+::CORBA_IDLType_ptr &
+CORBA_IDLType_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-::CORBA::IDLType_ptr
-CORBA::IDLType_out::operator-> (void)
+::CORBA_IDLType_ptr
+CORBA_IDLType_out::operator-> (void)
 {
   return this->ptr_;
 }
@@ -13794,16 +12598,23 @@
 public:
   TAO_ClientRequestInfo_CORBA_IDLType_type_get (
       TAO_GIOP_Invocation *_tao_invocation,
-      CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_WITH_DEFAULTS
-    );
+      CORBA::Object_ptr _tao_target
+      ACE_ENV_ARG_DECL_WITH_DEFAULTS);
+
+
+  virtual Dynamic::ParameterList * arguments (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
 
-  virtual Dynamic::ParameterList * arguments (ACE_ENV_SINGLE_ARG_DECL)
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual Dynamic::ExceptionList * exceptions (ACE_ENV_SINGLE_ARG_DECL)
+  virtual Dynamic::ExceptionList * exceptions (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
   
-  virtual CORBA::Any * result (ACE_ENV_SINGLE_ARG_DECL)
+  virtual CORBA::Any * result (
+      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
+
     ACE_THROW_SPEC ((CORBA::SystemException));
 
   void result (CORBA::TypeCode_ptr result);
@@ -13817,7 +12628,8 @@
 
 TAO_ClientRequestInfo_CORBA_IDLType_type_get::TAO_ClientRequestInfo_CORBA_IDLType_type_get (
     TAO_GIOP_Invocation *_tao_invocation,
-    CORBA::Object_ptr _tao_target ACE_ENV_ARG_DECL_NOT_USED    
+    CORBA::Object_ptr _tao_target
+    ACE_ENV_ARG_DECL_NOT_USED
   )
   : TAO_ClientRequestInfo_i (_tao_invocation, _tao_target)
 {}
@@ -13832,7 +12644,6 @@
   ACE_CHECK_RETURN (0);
   
   return parameter_list;
-
 }
 
 Dynamic::ExceptionList *
@@ -13847,6 +12658,7 @@
   return exception_list;
 }
 
+
 CORBA::Any * 
 TAO_ClientRequestInfo_CORBA_IDLType_type_get::result (ACE_ENV_SINGLE_ARG_DECL)
   ACE_THROW_SPEC ((CORBA::SystemException))
@@ -13876,15 +12688,15 @@
 //                Base & Remote Proxy  Implementation. 
 //
 
-CORBA::_TAO_IDLType_Proxy_Impl::_TAO_IDLType_Proxy_Impl (void)
+_TAO_CORBA_IDLType_Proxy_Impl::_TAO_CORBA_IDLType_Proxy_Impl (void)
 {}
 
-CORBA::_TAO_IDLType_Remote_Proxy_Impl::_TAO_IDLType_Remote_Proxy_Impl (void)
+_TAO_CORBA_IDLType_Remote_Proxy_Impl::_TAO_CORBA_IDLType_Remote_Proxy_Impl (void)
 {}
 
 // Remote Implementation of the IDL interface methods
 
-CORBA::TypeCode_ptr CORBA::_TAO_IDLType_Remote_Proxy_Impl::type (
+CORBA::TypeCode_ptr _TAO_CORBA_IDLType_Remote_Proxy_Impl::type (
     CORBA_Object *_collocated_tao_target_
     ACE_ENV_ARG_DECL
   )
@@ -13893,12 +12705,13 @@
   ))
 {
   
-  CORBA::TypeCode_var _tao_retval (CORBA::TypeCode::_nil ());
+  CORBA::TypeCode_ptr _tao_retval = CORBA::TypeCode::_nil ();
+  CORBA::TypeCode_var _tao_safe_retval (_tao_retval);
   
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
   if (istub == 0)
-    ACE_THROW_RETURN (CORBA::INTERNAL (),_tao_retval._retn ());
+    ACE_THROW_RETURN (CORBA::INTERNAL (), 0);
 
   
   TAO_GIOP_Twoway_Invocation _tao_call (
@@ -13925,24 +12738,25 @@
       _invoke_status = TAO_INVOKE_EXCEPTION;
       
 #if TAO_HAS_INTERCEPTORS == 1
-      TAO_ClientRequestInfo_CORBA_IDLType_type_get _tao_ri (
+      TAO_ClientRequestInfo_CORBA_IDLType_type_get ri (
         &_tao_call,
-        _collocated_tao_target_ ACE_ENV_ARG_PARAMETER
+        _collocated_tao_target_
+        ACE_ENV_ARG_PARAMETER
       );
-            ACE_CHECK_RETURN (_tao_retval._retn ());
+      ACE_CHECK_RETURN (0);
 
 #endif /* TAO_HAS_INTERCEPTORS */
       
       
       CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
-      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
+      TAO_INTERCEPTOR (ri.response_expected (1));
       
 #if TAO_HAS_INTERCEPTORS == 1
       
       ACE_TRY
         {
           _tao_vfr.send_request (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -13956,17 +12770,17 @@
 #endif /* TAO_HAS_INTERCEPTORS */
           
           _tao_call.start (ACE_ENV_SINGLE_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _tao_call.prepare_header (
               ACE_static_cast (CORBA::Octet, _tao_response_flag)
               ACE_ENV_ARG_PARAMETER
             );
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           _invoke_status =
             _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
-                    TAO_INTERCEPTOR_CHECK_RETURN (_tao_retval._retn ());
+          TAO_INTERCEPTOR_CHECK_RETURN (0);
 
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
@@ -13979,9 +12793,9 @@
           else if (_invoke_status == TAO_INVOKE_RESTART)
             {
               TAO_INTERCEPTOR (
-                _tao_ri.reply_status (_invoke_status);
+                ri.reply_status (_invoke_status);
                 _tao_vfr.receive_other (
-                  &_tao_ri
+                  &ri
                   ACE_ENV_ARG_PARAMETER
                 );
                 ACE_TRY_CHECK;
@@ -13992,7 +12806,7 @@
           
           TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
           if (!(
-                            (_tao_in >> _tao_retval.inout ())
+                            (_tao_in >> _tao_safe_retval.inout ())
               ))
             {
               TAO_INTERCEPTOR_THROW_RETURN (
@@ -14003,13 +12817,13 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          CORBA::TypeCode_ptr _tao_retval_info = _tao_retval._retn ();
-          _tao_ri.result (_tao_retval_info);
-          _tao_retval = _tao_retval_info;
+          CORBA::TypeCode_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          ri.result (_tao_retval_info);
+          _tao_safe_retval = _tao_retval_info;
           
-          _tao_ri.reply_status (_invoke_status);
+          ri.reply_status (_invoke_status);
           _tao_vfr.receive_reply (
-            &_tao_ri
+            &ri
             ACE_ENV_ARG_PARAMETER
           );
           ACE_TRY_CHECK;
@@ -14017,15 +12831,15 @@
       }
     ACE_CATCHANY
       {
-        _tao_ri.exception (&ACE_ANY_EXCEPTION);
+        ri.exception (&ACE_ANY_EXCEPTION);
         _tao_vfr.receive_exception (
-          &_tao_ri
+          &ri
           ACE_ENV_ARG_PARAMETER
         );
         ACE_TRY_CHECK;
         
         PortableInterceptor::ReplyStatus _tao_status =
-          _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+          ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
         ACE_TRY_CHECK;
         
         if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
@@ -14033,11 +12847,11 @@
           ACE_RE_THROW;
       }
     ACE_ENDTRY;
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+    ACE_CHECK_RETURN (0);
 
     PortableInterceptor::ReplyStatus _tao_status =
-      _tao_ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
-        ACE_CHECK_RETURN (_tao_retval._retn ());
+      ri.reply_status (ACE_ENV_SINGLE_ARG_PARAMETER);
+    ACE_CHECK_RETURN (0);
 
     if (_tao_status == PortableInterceptor::LOCATION_FORWARD
         || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
@@ -14047,7 +12861,7 @@
     
     break;
   }
-return _tao_retval._retn ();
+return _tao_safe_retval._retn ();
 }
 
 
@@ -14060,37 +12874,37 @@
 //           Remote & Base  Proxy Broker Implementation
 //
 
-CORBA::_TAO_IDLType_Proxy_Broker::_TAO_IDLType_Proxy_Broker (void)
+_TAO_CORBA_IDLType_Proxy_Broker::_TAO_CORBA_IDLType_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_IDLType_Proxy_Broker::~_TAO_IDLType_Proxy_Broker (void)
+_TAO_CORBA_IDLType_Proxy_Broker::~_TAO_CORBA_IDLType_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_IDLType_Proxy_Broker * (*CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer) (
+_TAO_CORBA_IDLType_Proxy_Broker * (*_TAO_CORBA_IDLType_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   ) = 0;
 
 // Factory Member function Implementation.
-CORBA::_TAO_IDLType_Remote_Proxy_Broker *
-CORBA::_TAO_IDLType_Remote_Proxy_Broker::the_TAO_IDLType_Remote_Proxy_Broker (void)
+_TAO_CORBA_IDLType_Remote_Proxy_Broker *
+_TAO_CORBA_IDLType_Remote_Proxy_Broker::the_TAO_CORBA_IDLType_Remote_Proxy_Broker (void)
 {
-  static ::CORBA::_TAO_IDLType_Remote_Proxy_Broker remote_proxy_broker;
+  static ::_TAO_CORBA_IDLType_Remote_Proxy_Broker remote_proxy_broker;
   return &remote_proxy_broker;
 }
 
-CORBA::_TAO_IDLType_Remote_Proxy_Broker::_TAO_IDLType_Remote_Proxy_Broker (void)
+_TAO_CORBA_IDLType_Remote_Proxy_Broker::_TAO_CORBA_IDLType_Remote_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_IDLType_Remote_Proxy_Broker::~_TAO_IDLType_Remote_Proxy_Broker (void)
+_TAO_CORBA_IDLType_Remote_Proxy_Broker::~_TAO_CORBA_IDLType_Remote_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_IDLType_Proxy_Impl&
-CORBA::_TAO_IDLType_Remote_Proxy_Broker::select_proxy (
-  ::CORBA::IDLType *
+_TAO_CORBA_IDLType_Proxy_Impl&
+_TAO_CORBA_IDLType_Remote_Proxy_Broker::select_proxy (
+  ::CORBA_IDLType *
   ACE_ENV_ARG_DECL_NOT_USED
 )
 {
@@ -14103,126 +12917,110 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
-CORBA::IDLType::IDLType (int collocated)
+// default constructor
+CORBA_IDLType::CORBA_IDLType (int collocated)
 {
   this->CORBA_IDLType_setup_collocation (collocated);
 }
 
-CORBA::IDLType::~IDLType (void)
+// destructor
+CORBA_IDLType::~CORBA_IDLType (void)
 {}
 
 void
-CORBA::IDLType::CORBA_IDLType_setup_collocation (int collocated)
+CORBA_IDLType::CORBA_IDLType_setup_collocation (int collocated)
 {
   if (collocated)
-    this->the_TAO_IDLType_Proxy_Broker_ =
-      ::CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer (this);
+    this->the_TAO_CORBA_IDLType_Proxy_Broker_ =
+      ::_TAO_CORBA_IDLType_Proxy_Broker_Factory_function_pointer (this);
   else
-    this->the_TAO_IDLType_Proxy_Broker_ =
-      ::CORBA::_TAO_IDLType_Remote_Proxy_Broker::the_TAO_IDLType_Remote_Proxy_Broker ();
+    this->the_TAO_CORBA_IDLType_Proxy_Broker_ =
+      ::_TAO_CORBA_IDLType_Remote_Proxy_Broker::the_TAO_CORBA_IDLType_Remote_Proxy_Broker ();
   
   this->CORBA_IRObject_setup_collocation (collocated);
 }
 
-void CORBA::IDLType::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_IDLType::_tao_any_destructor (void *_tao_void_pointer)
 {
-  IDLType *tmp = ACE_static_cast (IDLType*, _tao_void_pointer);
+  CORBA_IDLType *tmp = ACE_static_cast (CORBA_IDLType*, _tao_void_pointer);
   CORBA::release (tmp);
 }
 
-CORBA::IDLType_ptr CORBA::IDLType::_narrow (
+CORBA_IDLType_ptr CORBA_IDLType::_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL
   )
 {
   if (CORBA::is_nil (obj))
-    return IDLType::_nil ();
+    return CORBA_IDLType::_nil ();
   if (! obj->_is_local ())
     {
       CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/IDLType:1.0" ACE_ENV_ARG_PARAMETER);
-      ACE_CHECK_RETURN (IDLType::_nil ());
+      ACE_CHECK_RETURN (CORBA_IDLType::_nil ());
       if (is_a == 0)
-        return IDLType::_nil ();
+        return CORBA_IDLType::_nil ();
     }
-  return IDLType::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
+  return CORBA_IDLType::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-CORBA::IDLType_ptr 
-CORBA::IDLType::_unchecked_narrow (
+CORBA_IDLType_ptr CORBA_IDLType::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
 {
   if (CORBA::is_nil (obj))
-    return IDLType::_nil ();
+    return CORBA_IDLType::_nil ();
   if (! obj->_is_local ())
     {
       TAO_Stub* stub = obj->_stubobj ();
       if (stub)
         stub->_incr_refcnt ();
-      IDLType_ptr default_proxy = IDLType::_nil ();
+      CORBA_IDLType_ptr default_proxy = CORBA_IDLType::_nil ();
 
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          CORBA__TAO_IDLType_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&_TAO_CORBA_IDLType_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
               default_proxy,
-              ::CORBA::IDLType (
+          ::CORBA_IDLType (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              IDLType::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::CORBA::IDLType (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              IDLType::_nil ()
-            );
+          CORBA_IDLType::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::CORBA_IDLType (stub, 0, obj->_servant ()), CORBA_IDLType::_nil ());
       return default_proxy;
     }
   else 
     return
       ACE_reinterpret_cast
         (
-          IDLType_ptr,
+            CORBA_IDLType_ptr,
             obj->_tao_QueryInterface
               (
                 ACE_reinterpret_cast
                   (
                     ptr_arith_t,
-                    &IDLType::_tao_class_id
+                      &CORBA_IDLType::_tao_class_id
                   )
               )
         );
 }
 
-CORBA::IDLType_ptr
-CORBA::IDLType::_duplicate (IDLType_ptr obj)
+CORBA_IDLType_ptr
+CORBA_IDLType::_duplicate (CORBA_IDLType_ptr obj)
 {
   if (!CORBA::is_nil (obj))
     obj->_add_ref ();
   return obj;
 }
 
-CORBA::Boolean CORBA::IDLType::_is_a (const CORBA::Char *value ACE_ENV_ARG_DECL)
+CORBA::Boolean CORBA_IDLType::_is_a (const CORBA::Char *value ACE_ENV_ARG_DECL)
 {
   if (
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/IDLType:1.0")) ||
@@ -14233,22 +13031,22 @@
     return this->CORBA_Object::_is_a (value ACE_ENV_ARG_PARAMETER);
 }
 
-void *CORBA::IDLType::_tao_QueryInterface (ptr_arith_t type)
+void *CORBA_IDLType::_tao_QueryInterface (ptr_arith_t type)
 {
   void *retv = 0;
   if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, IDLType)::_tao_class_id))
+      &CORBA_IDLType::_tao_class_id))
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, IRObject)::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -14261,95 +13059,59 @@
   return retv;
 }
 
-const char* CORBA::IDLType::_interface_repository_id (void) const
+const char* CORBA_IDLType::_interface_repository_id (void) const
 {
   return "IDL:omg.org/CORBA/IDLType:1.0";
 }
 
-CORBA::TypeCode_ptr CORBA::IDLType::type (
-    
+CORBA::TypeCode_ptr CORBA_IDLType::type (
     ACE_ENV_SINGLE_ARG_DECL
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_IDLType_Proxy_Impl &proxy = 
-    this->the_TAO_IDLType_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
+  _TAO_CORBA_IDLType_Proxy_Impl &proxy =
+    this->the_TAO_CORBA_IDLType_Proxy_Broker_->select_proxy (this ACE_ENV_ARG_PARAMETER);
   ACE_CHECK_RETURN (0);
   
   return proxy.type (
-      this ACE_ENV_ARG_PARAMETER
+      this
+      ACE_ENV_ARG_PARAMETER
     );
 }
 
-static const CORBA::Long _oc_CORBA_IDLType[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  30,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f4944), 
-  ACE_NTOHL (0x4c547970), 
-  ACE_NTOHL (0x653a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/IDLType:1.0
-  8,
-  ACE_NTOHL (0x49444c54), 
-  ACE_NTOHL (0x79706500),  // name = IDLType
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_IDLType (
-    CORBA::tk_objref,
-    sizeof (_oc_CORBA_IDLType),
-    (char *) &_oc_CORBA_IDLType,
-    0,
-    sizeof (CORBA::IDLType)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_IDLType, &_tc_TAO_tc_CORBA_IDLType)
-TAO_NAMESPACE_END
-
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:67
-
-int CORBA::TypedefDef::_tao_class_id = 0;
-
-CORBA::TypedefDef_ptr
+CORBA_TypedefDef_ptr
 tao_CORBA_TypedefDef_duplicate (
-    CORBA::TypedefDef_ptr p
+    CORBA_TypedefDef_ptr p
   )
 {
-  return CORBA::TypedefDef::_duplicate (p);
+  return CORBA_TypedefDef::_duplicate (p);
 }
 
 void
 tao_CORBA_TypedefDef_release (
-    CORBA::TypedefDef_ptr p
+    CORBA_TypedefDef_ptr p
   )
 {
   CORBA::release (p);
 }
 
-CORBA::TypedefDef_ptr
+CORBA_TypedefDef_ptr
 tao_CORBA_TypedefDef_nil (
     void
   )
 {
-  return CORBA::TypedefDef::_nil ();
+  return CORBA_TypedefDef::_nil ();
 }
 
-CORBA::TypedefDef_ptr
+CORBA_TypedefDef_ptr
 tao_CORBA_TypedefDef_narrow (
     CORBA::Object *p
     ACE_ENV_ARG_DECL
   )
 {
-  return CORBA::TypedefDef::_narrow (p ACE_ENV_ARG_PARAMETER);
+  return CORBA_TypedefDef::_narrow (p ACE_ENV_ARG_PARAMETER);
 }
 
 CORBA::Object *
@@ -14357,193 +13119,191 @@
     void *src
   )
 {
-  CORBA::TypedefDef **tmp =
-    ACE_static_cast (CORBA::TypedefDef **, src);
+  CORBA_TypedefDef **tmp =
+    ACE_static_cast (CORBA_TypedefDef **, src);
   return *tmp;
 }
 
+int CORBA_TypedefDef::_tao_class_id = 0;
+
 // *************************************************************
-// CORBA::TypedefDef_var
-// TAO_IDL - Generated from
-// be/be_interface.cpp:654
+// Operations for class CORBA_TypedefDef_var
 // *************************************************************
 
-CORBA::TypedefDef_var::TypedefDef_var (void) // default constructor
-  : ptr_ (TypedefDef::_nil ())
+CORBA_TypedefDef_var::CORBA_TypedefDef_var (void) // default constructor
+  : ptr_ (CORBA_TypedefDef::_nil ())
 {}
 
-::CORBA::TypedefDef_ptr
-CORBA::TypedefDef_var::ptr (void) const
+::CORBA_TypedefDef_ptr
+CORBA_TypedefDef_var::ptr (void) const
 {
   return this->ptr_;
 }
 
-CORBA::TypedefDef_var::TypedefDef_var (const ::CORBA::TypedefDef_var &p) // copy constructor
+CORBA_TypedefDef_var::CORBA_TypedefDef_var (const ::CORBA_TypedefDef_var &p) // copy constructor
   : TAO_Base_var (),
-    ptr_ (TypedefDef::_duplicate (p.ptr ()))
+    ptr_ (CORBA_TypedefDef::_duplicate (p.ptr ()))
 {}
 
-CORBA::TypedefDef_var::~TypedefDef_var (void) // destructor
+CORBA_TypedefDef_var::~CORBA_TypedefDef_var (void) // destructor
 {
   CORBA::release (this->ptr_);
 }
 
-CORBA::TypedefDef_var &
-CORBA::TypedefDef_var::operator= (TypedefDef_ptr p)
+CORBA_TypedefDef_var &
+CORBA_TypedefDef_var::operator= (CORBA_TypedefDef_ptr p)
 {
   CORBA::release (this->ptr_);
   this->ptr_ = p;
   return *this;
 }
 
-CORBA::TypedefDef_var &
-CORBA::TypedefDef_var::operator= (const ::CORBA::TypedefDef_var &p)
+CORBA_TypedefDef_var &
+CORBA_TypedefDef_var::operator= (const ::CORBA_TypedefDef_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::CORBA::TypedefDef::_duplicate (p.ptr ());
+    this->ptr_ = ::CORBA_TypedefDef::_duplicate (p.ptr ());
   }
   return *this;
 }
 
-CORBA::TypedefDef_var::operator const ::CORBA::TypedefDef_ptr &() const // cast
+CORBA_TypedefDef_var::operator const ::CORBA_TypedefDef_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-CORBA::TypedefDef_var::operator ::CORBA::TypedefDef_ptr &() // cast 
+CORBA_TypedefDef_var::operator ::CORBA_TypedefDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA::TypedefDef_ptr
-CORBA::TypedefDef_var::operator-> (void) const
+::CORBA_TypedefDef_ptr
+CORBA_TypedefDef_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-::CORBA::TypedefDef_ptr
-CORBA::TypedefDef_var::in (void) const
+::CORBA_TypedefDef_ptr
+CORBA_TypedefDef_var::in (void) const
 {
   return this->ptr_;
 }
 
-::CORBA::TypedefDef_ptr &
-CORBA::TypedefDef_var::inout (void)
+::CORBA_TypedefDef_ptr &
+CORBA_TypedefDef_var::inout (void)
 {
   return this->ptr_;
 }
 
-::CORBA::TypedefDef_ptr &
-CORBA::TypedefDef_var::out (void)
+::CORBA_TypedefDef_ptr &
+CORBA_TypedefDef_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::TypedefDef::_nil ();
+  this->ptr_ = ::CORBA_TypedefDef::_nil ();
   return this->ptr_;
 }
 
-::CORBA::TypedefDef_ptr
-CORBA::TypedefDef_var::_retn (void)
+::CORBA_TypedefDef_ptr
+CORBA_TypedefDef_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::CORBA::TypedefDef_ptr val = this->ptr_;
-  this->ptr_ = ::CORBA::TypedefDef::_nil ();
+  ::CORBA_TypedefDef_ptr val = this->ptr_;
+  this->ptr_ = ::CORBA_TypedefDef::_nil ();
   return val;
 }
 
-::CORBA::TypedefDef_ptr
-CORBA::TypedefDef_var::tao_duplicate (TypedefDef_ptr p)
+::CORBA_TypedefDef_ptr
+CORBA_TypedefDef_var::tao_duplicate (CORBA_TypedefDef_ptr p)
 {
-  return ::CORBA::TypedefDef::_duplicate (p);
+  return ::CORBA_TypedefDef::_duplicate (p);
 }
 
 void
-CORBA::TypedefDef_var::tao_release (TypedefDef_ptr p)
+CORBA_TypedefDef_var::tao_release (CORBA_TypedefDef_ptr p)
 {
   CORBA::release (p);
 }
 
-::CORBA::TypedefDef_ptr
-CORBA::TypedefDef_var::tao_nil (void)
+::CORBA_TypedefDef_ptr
+CORBA_TypedefDef_var::tao_nil (void)
 {
-  return ::CORBA::TypedefDef::_nil ();
+  return ::CORBA_TypedefDef::_nil ();
 }
 
-::CORBA::TypedefDef_ptr
-CORBA::TypedefDef_var::tao_narrow (
+::CORBA_TypedefDef_ptr
+CORBA_TypedefDef_var::tao_narrow (
     CORBA::Object *p
     ACE_ENV_ARG_DECL
   )
 {
-  return ::CORBA::TypedefDef::_narrow (p ACE_ENV_ARG_PARAMETER);
+  return ::CORBA_TypedefDef::_narrow (p ACE_ENV_ARG_PARAMETER);
 }
 
 CORBA::Object *
-CORBA::TypedefDef_var::tao_upcast (void *src)
+CORBA_TypedefDef_var::tao_upcast (void *src)
 {
-  TypedefDef **tmp =
-    ACE_static_cast (TypedefDef **, src);
+  CORBA_TypedefDef **tmp =
+    ACE_static_cast (CORBA_TypedefDef **, src);
   return *tmp;
 }
 
 // *************************************************************
-// CORBA::TypedefDef_out
-// TAO_IDL - Generated from
-// be/be_interface.cpp:932
+// Operations for class CORBA_TypedefDef_out
 // *************************************************************
 
-CORBA::TypedefDef_out::TypedefDef_out (TypedefDef_ptr &p)
+CORBA_TypedefDef_out::CORBA_TypedefDef_out (CORBA_TypedefDef_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::CORBA::TypedefDef::_nil ();
+  this->ptr_ = ::CORBA_TypedefDef::_nil ();
 }
 
-CORBA::TypedefDef_out::TypedefDef_out (TypedefDef_var &p) // constructor from _var
+CORBA_TypedefDef_out::CORBA_TypedefDef_out (CORBA_TypedefDef_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA::TypedefDef::_nil ();
+  this->ptr_ = ::CORBA_TypedefDef::_nil ();
 }
 
-CORBA::TypedefDef_out::TypedefDef_out (const ::CORBA::TypedefDef_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (TypedefDef_out &, p).ptr_)
+CORBA_TypedefDef_out::CORBA_TypedefDef_out (const ::CORBA_TypedefDef_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (CORBA_TypedefDef_out &, p).ptr_)
 {}
 
-::CORBA::TypedefDef_out &
-CORBA::TypedefDef_out::operator= (const ::CORBA::TypedefDef_out &p)
+::CORBA_TypedefDef_out &
+CORBA_TypedefDef_out::operator= (const ::CORBA_TypedefDef_out &p)
 {
-  this->ptr_ = ACE_const_cast (TypedefDef_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (CORBA_TypedefDef_out&, p).ptr_;
   return *this;
 }
 
-CORBA::TypedefDef_out &
-CORBA::TypedefDef_out::operator= (const ::CORBA::TypedefDef_var &p)
+CORBA_TypedefDef_out &
+CORBA_TypedefDef_out::operator= (const ::CORBA_TypedefDef_var &p)
 {
-  this->ptr_ = ::CORBA::TypedefDef::_duplicate (p.ptr ());
+  this->ptr_ = ::CORBA_TypedefDef::_duplicate (p.ptr ());
   return *this;
 }
 
-CORBA::TypedefDef_out &
-CORBA::TypedefDef_out::operator= (TypedefDef_ptr p)
+CORBA_TypedefDef_out &
+CORBA_TypedefDef_out::operator= (CORBA_TypedefDef_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
-CORBA::TypedefDef_out::operator ::CORBA::TypedefDef_ptr &() // cast
+CORBA_TypedefDef_out::operator ::CORBA_TypedefDef_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA::TypedefDef_ptr &
-CORBA::TypedefDef_out::ptr (void) // ptr
+::CORBA_TypedefDef_ptr &
+CORBA_TypedefDef_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-::CORBA::TypedefDef_ptr
-CORBA::TypedefDef_out::operator-> (void)
+::CORBA_TypedefDef_ptr
+CORBA_TypedefDef_out::operator-> (void)
 {
   return this->ptr_;
 }
@@ -14556,10 +13316,10 @@
 //                Base & Remote Proxy  Implementation. 
 //
 
-CORBA::_TAO_TypedefDef_Proxy_Impl::_TAO_TypedefDef_Proxy_Impl (void)
+_TAO_CORBA_TypedefDef_Proxy_Impl::_TAO_CORBA_TypedefDef_Proxy_Impl (void)
 {}
 
-CORBA::_TAO_TypedefDef_Remote_Proxy_Impl::_TAO_TypedefDef_Remote_Proxy_Impl (void)
+_TAO_CORBA_TypedefDef_Remote_Proxy_Impl::_TAO_CORBA_TypedefDef_Remote_Proxy_Impl (void)
 {}
 
 // Remote Implementation of the IDL interface methods
@@ -14574,37 +13334,37 @@
 //           Remote & Base  Proxy Broker Implementation
 //
 
-CORBA::_TAO_TypedefDef_Proxy_Broker::_TAO_TypedefDef_Proxy_Broker (void)
+_TAO_CORBA_TypedefDef_Proxy_Broker::_TAO_CORBA_TypedefDef_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_TypedefDef_Proxy_Broker::~_TAO_TypedefDef_Proxy_Broker (void)
+_TAO_CORBA_TypedefDef_Proxy_Broker::~_TAO_CORBA_TypedefDef_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_TypedefDef_Proxy_Broker * (*CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer) (
+_TAO_CORBA_TypedefDef_Proxy_Broker * (*_TAO_CORBA_TypedefDef_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   ) = 0;
 
 // Factory Member function Implementation.
-CORBA::_TAO_TypedefDef_Remote_Proxy_Broker *
-CORBA::_TAO_TypedefDef_Remote_Proxy_Broker::the_TAO_TypedefDef_Remote_Proxy_Broker (void)
+_TAO_CORBA_TypedefDef_Remote_Proxy_Broker *
+_TAO_CORBA_TypedefDef_Remote_Proxy_Broker::the_TAO_CORBA_TypedefDef_Remote_Proxy_Broker (void)
 {
-  static ::CORBA::_TAO_TypedefDef_Remote_Proxy_Broker remote_proxy_broker;
+  static ::_TAO_CORBA_TypedefDef_Remote_Proxy_Broker remote_proxy_broker;
   return &remote_proxy_broker;
 }
 
-CORBA::_TAO_TypedefDef_Remote_Proxy_Broker::_TAO_TypedefDef_Remote_Proxy_Broker (void)
+_TAO_CORBA_TypedefDef_Remote_Proxy_Broker::_TAO_CORBA_TypedefDef_Remote_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_TypedefDef_Remote_Proxy_Broker::~_TAO_TypedefDef_Remote_Proxy_Broker (void)
+_TAO_CORBA_TypedefDef_Remote_Proxy_Broker::~_TAO_CORBA_TypedefDef_Remote_Proxy_Broker (void)
 {
 }
 
-CORBA::_TAO_TypedefDef_Proxy_Impl&
-CORBA::_TAO_TypedefDef_Remote_Proxy_Broker::select_proxy (
-  ::CORBA::TypedefDef *
+_TAO_CORBA_TypedefDef_Proxy_Impl&
+_TAO_CORBA_TypedefDef_Remote_Proxy_Broker::select_proxy (
+  ::CORBA_TypedefDef *
   ACE_ENV_ARG_DECL_NOT_USED
 )
 {
@@ -14617,128 +13377,112 @@
 ///////////////////////////////////////////////////////////////////////
 
 
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/interface_cs.cpp:198
-
-CORBA::TypedefDef::TypedefDef (int collocated)
+// default constructor
+CORBA_TypedefDef::CORBA_TypedefDef (int collocated)
 {
   this->CORBA_TypedefDef_setup_collocation (collocated);
 }
 
-CORBA::TypedefDef::~TypedefDef (void)
+// destructor
+CORBA_TypedefDef::~CORBA_TypedefDef (void)
 {}
 
 void
-CORBA::TypedefDef::CORBA_TypedefDef_setup_collocation (int collocated)
+CORBA_TypedefDef::CORBA_TypedefDef_setup_collocation (int collocated)
 {
   if (collocated)
-    this->the_TAO_TypedefDef_Proxy_Broker_ =
-      ::CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer (this);
+    this->the_TAO_CORBA_TypedefDef_Proxy_Broker_ =
+      ::_TAO_CORBA_TypedefDef_Proxy_Broker_Factory_function_pointer (this);
   else
-    this->the_TAO_TypedefDef_Proxy_Broker_ =
-      ::CORBA::_TAO_TypedefDef_Remote_Proxy_Broker::the_TAO_TypedefDef_Remote_Proxy_Broker ();
+    this->the_TAO_CORBA_TypedefDef_Proxy_Broker_ =
+      ::_TAO_CORBA_TypedefDef_Remote_Proxy_Broker::the_TAO_CORBA_TypedefDef_Remote_Proxy_Broker ();
   
   this->CORBA_Contained_setup_collocation (collocated);
   
   this->CORBA_IDLType_setup_collocation (collocated);
 }
 
-void CORBA::TypedefDef::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_TypedefDef::_tao_any_destructor (void *_tao_void_pointer)
 {
-  TypedefDef *tmp = ACE_static_cast (TypedefDef*, _tao_void_pointer);
+  CORBA_TypedefDef *tmp = ACE_static_cast (CORBA_TypedefDef*, _tao_void_pointer);
   CORBA::release (tmp);
 }
 
-CORBA::TypedefDef_ptr CORBA::TypedefDef::_narrow (
+CORBA_TypedefDef_ptr CORBA_TypedefDef::_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL
   )
 {
   if (CORBA::is_nil (obj))
-    return TypedefDef::_nil ();
+    return CORBA_TypedefDef::_nil ();
   if (! obj->_is_local ())
     {
       CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/TypedefDef:1.0" ACE_ENV_ARG_PARAMETER);
-      ACE_CHECK_RETURN (TypedefDef::_nil ());
+      ACE_CHECK_RETURN (CORBA_TypedefDef::_nil ());
       if (is_a == 0)
-        return TypedefDef::_nil ();
+        return CORBA_TypedefDef::_nil ();
     }
-  return TypedefDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
+  return CORBA_TypedefDef::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
 }
 
-CORBA::TypedefDef_ptr 
-CORBA::TypedefDef::_unchecked_narrow (
+CORBA_TypedefDef_ptr CORBA_TypedefDef::_unchecked_narrow (
     CORBA::Object_ptr obj
     ACE_ENV_ARG_DECL_NOT_USED
   )
 {
   if (CORBA::is_nil (obj))
-    return TypedefDef::_nil ();
+    return CORBA_TypedefDef::_nil ();
   if (! obj->_is_local ())
     {
       TAO_Stub* stub = obj->_stubobj ();
       if (stub)
         stub->_incr_refcnt ();
-      TypedefDef_ptr default_proxy = TypedefDef::_nil ();
+      CORBA_TypedefDef_ptr default_proxy = CORBA_TypedefDef::_nil ();
 
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&
-          CORBA__TAO_TypedefDef_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&_TAO_CORBA_TypedefDef_Proxy_Broker_Factory_function_pointer != 0
         )
         {
           ACE_NEW_RETURN (
               default_proxy,
-              ::CORBA::TypedefDef (
+          ::CORBA_TypedefDef (
                   stub,
                   1,
-                  obj->_servant ()
-                ),
-              TypedefDef::_nil ()
-            );
-        }
+            obj->_servant ()),
       
-      if (CORBA::is_nil (default_proxy))
-        {
-          ACE_NEW_RETURN (
-              default_proxy,
-              ::CORBA::TypedefDef (
-                  stub,
-                  0,
-                  obj->_servant ()
-                ),
-              TypedefDef::_nil ()
-            );
+          CORBA_TypedefDef::_nil ());
         }
-      
+      if (CORBA::is_nil (default_proxy))
+        ACE_NEW_RETURN (default_proxy, ::CORBA_TypedefDef (stub, 0, obj->_servant ()), CORBA_TypedefDef::_nil ());
       return default_proxy;
     }
   else 
     return
       ACE_reinterpret_cast
         (
-          TypedefDef_ptr,
+            CORBA_TypedefDef_ptr,
             obj->_tao_QueryInterface
               (
                 ACE_reinterpret_cast
                   (
                     ptr_arith_t,
-                    &TypedefDef::_tao_class_id
+                      &CORBA_TypedefDef::_tao_class_id
                   )
               )
         );
 }
 
-CORBA::TypedefDef_ptr
-CORBA::TypedefDef::_duplicate (TypedefDef_ptr obj)
+CORBA_TypedefDef_ptr
+CORBA_TypedefDef::_duplicate (CORBA_TypedefDef_ptr obj)
 {
   if (!CORBA::is_nil (obj))
     obj->_add_ref ();
   return obj;
 }
 
-CORBA::Boolean CORBA::TypedefDef::_is_a (const CORBA::Char *value ACE_ENV_ARG_DECL)
+CORBA::Boolean CORBA_TypedefDef::_is_a (const CORBA::Char *value ACE_ENV_ARG_DECL)
 {
   if (
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/TypedefDef:1.0")) ||
@@ -14751,46 +13495,46 @@
     return this->CORBA_Object::_is_a (value ACE_ENV_ARG_PARAMETER);
 }
 
-void *CORBA::TypedefDef::_tao_QueryInterface (ptr_arith_t type)
+void *CORBA_TypedefDef::_tao_QueryInterface (ptr_arith_t type)
 {
   void *retv = 0;
   if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, TypedefDef)::_tao_class_id))
+      &CORBA_TypedefDef::_tao_class_id))
     retv = ACE_reinterpret_cast (void*, this);
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, Contained)::_tao_class_id))
+      &CORBA_Contained::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::Contained_ptr,
+            CORBA_Contained_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, IDLType)::_tao_class_id))
+      &CORBA_IDLType::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IDLType_ptr,
+            CORBA_IDLType_ptr,
             this
           )
       );
   else if (type == ACE_reinterpret_cast
     (ptr_arith_t,
-      &ACE_NESTED_CLASS (::CORBA, IRObject)::_tao_class_id))
+      &CORBA_IRObject::_tao_class_id))
     retv = ACE_reinterpret_cast
       (
         void *,
         ACE_static_cast
           (
-            CORBA::IRObject_ptr,
+            CORBA_IRObject_ptr,
             this
           )
       );
@@ -14803,161 +13547,14 @@
   return retv;
 }
 
-const char* CORBA::TypedefDef::_interface_repository_id (void) const
+const char* CORBA_TypedefDef::_interface_repository_id (void) const
 {
   return "IDL:omg.org/CORBA/TypedefDef:1.0";
 }
 
-static const CORBA::Long _oc_CORBA_TypedefDef[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  33,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f5479), 
-  ACE_NTOHL (0x70656465), 
-  ACE_NTOHL (0x66446566), 
-  ACE_NTOHL (0x3a312e30), 
-  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/TypedefDef:1.0
-  11,
-  ACE_NTOHL (0x54797065), 
-  ACE_NTOHL (0x64656644), 
-  ACE_NTOHL (0x65660000),  // name = TypedefDef
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_TypedefDef (
-    CORBA::tk_objref,
-    sizeof (_oc_CORBA_TypedefDef),
-    (char *) &_oc_CORBA_TypedefDef,
-    0,
-    sizeof (CORBA::TypedefDef)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_TypedefDef, &_tc_TAO_tc_CORBA_TypedefDef)
-TAO_NAMESPACE_END
-
-static const CORBA::Long _oc_CORBA_TypeDescription[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  38,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f5479), 
-  ACE_NTOHL (0x70654465), 
-  ACE_NTOHL (0x73637269), 
-  ACE_NTOHL (0x7074696f), 
-  ACE_NTOHL (0x6e3a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/TypeDescription:1.0
-  16,
-  ACE_NTOHL (0x54797065), 
-  ACE_NTOHL (0x44657363), 
-  ACE_NTOHL (0x72697074), 
-  ACE_NTOHL (0x696f6e00),  // name = TypeDescription
-  5, // member count
-  5,
-  ACE_NTOHL (0x6e616d65), 
-  ACE_NTOHL (0x0),  // name = name
-  CORBA::tk_alias, // typecode kind for typedefs
-  68, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    33,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f4964), 
-    ACE_NTOHL (0x656e7469), 
-    ACE_NTOHL (0x66696572), 
-    ACE_NTOHL (0x3a312e30), 
-    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Identifier:1.0
-    11,
-    ACE_NTOHL (0x4964656e), 
-    ACE_NTOHL (0x74696669), 
-    ACE_NTOHL (0x65720000),  // name = Identifier
-    CORBA::tk_string, 
-    0U, // string length
-
-  3,
-  ACE_NTOHL (0x69640000),  // name = id
-  CORBA::tk_alias, // typecode kind for typedefs
-  72, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    35,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f5265), 
-    ACE_NTOHL (0x706f7369), 
-    ACE_NTOHL (0x746f7279), 
-    ACE_NTOHL (0x49643a31), 
-    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/RepositoryId:1.0
-    13,
-    ACE_NTOHL (0x5265706f), 
-    ACE_NTOHL (0x7369746f), 
-    ACE_NTOHL (0x72794964), 
-    ACE_NTOHL (0x0),  // name = RepositoryId
-    CORBA::tk_string, 
-    0U, // string length
-
-  11,
-  ACE_NTOHL (0x64656669), 
-  ACE_NTOHL (0x6e65645f), 
-  ACE_NTOHL (0x696e0000),  // name = defined_in
-  0xffffffff, // indirection
-  0xffffff9c, // negative offset (-100)
-  8,
-  ACE_NTOHL (0x76657273), 
-  ACE_NTOHL (0x696f6e00),  // name = version
-  CORBA::tk_alias, // typecode kind for typedefs
-  68, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    34,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f5665), 
-    ACE_NTOHL (0x7273696f), 
-    ACE_NTOHL (0x6e537065), 
-    ACE_NTOHL (0x633a312e), 
-    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/VersionSpec:1.0
-    12,
-    ACE_NTOHL (0x56657273), 
-    ACE_NTOHL (0x696f6e53), 
-    ACE_NTOHL (0x70656300),  // name = VersionSpec
-    CORBA::tk_string, 
-    0U, // string length
-
-  5,
-  ACE_NTOHL (0x74797065), 
-  ACE_NTOHL (0x0),  // name = type
-  CORBA::tk_TypeCode,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_TypeDescription (
-    CORBA::tk_struct,
-    sizeof (_oc_CORBA_TypeDescription),
-    (char *) &_oc_CORBA_TypeDescription,
-    0,
-    sizeof (CORBA::TypeDescription)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
-TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (::CORBA::TypeCode_ptr, _tc_TypeDescription, &_tc_TAO_tc_CORBA_TypeDescription)
-TAO_NAMESPACE_END
-
-void CORBA::TypeDescription::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_TypeDescription::_tao_any_destructor (void *_tao_void_pointer)
 {
-  TypeDescription *tmp = ACE_static_cast (TypeDescription*, _tao_void_pointer);
+  CORBA_TypeDescription *tmp = ACE_static_cast (CORBA_TypeDescription*, _tao_void_pointer);
   delete tmp;
 }
 
@@ -15001,17 +13598,9 @@
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::IRObject_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_IRObject_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -15019,98 +13608,60 @@
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
-          CORBA::IRObject::_duplicate (_tao_elem),
-          CORBA::IRObject::_tao_any_destructor
-        );
-    }
-}
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::IRObject_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          CORBA::_tc_IRObject, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          CORBA::IRObject::_tao_any_destructor
+        CORBA_IRObject::_duplicate (_tao_elem),
+        CORBA_IRObject::_tao_any_destructor
         );
     }
 }
 
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::IRObject_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_IRObject_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
-    _tao_elem = CORBA::IRObject::_nil ();
+    _tao_elem = CORBA_IRObject::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_IRObject
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_IRObject ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
             CORBA::_tc_IRObject,
             1,
             _tao_elem,
-            CORBA::IRObject::_tao_any_destructor
+          CORBA_IRObject::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = CORBA_IRObject::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
-  _tao_elem = CORBA::IRObject::_nil ();
+  _tao_elem = CORBA_IRObject::_nil ();
   return 0;
 }
 
 #if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
     defined (ACE_HAS_GNU_REPO)
-  template class TAO_Object_Manager<CORBA::IRObject,CORBA::IRObject_var>;
+    template class TAO_Object_Manager<CORBA_IRObject,CORBA_IRObject_var>;
 #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
-#  pragma instantiate TAO_Object_Manager<CORBA::IRObject,CORBA::IRObject_var>
+  #  pragma instantiate TAO_Object_Manager<CORBA_IRObject,CORBA_IRObject_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::Contained_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_Contained_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -15118,198 +13669,124 @@
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
-          CORBA::Contained::_duplicate (_tao_elem),
-          CORBA::Contained::_tao_any_destructor
-        );
-    }
-}
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::Contained_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          CORBA::_tc_Contained, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          CORBA::Contained::_tao_any_destructor
+        CORBA_Contained::_duplicate (_tao_elem),
+        CORBA_Contained::_tao_any_destructor
         );
     }
 }
 
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::Contained_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_Contained_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
-    _tao_elem = CORBA::Contained::_nil ();
+    _tao_elem = CORBA_Contained::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_Contained
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_Contained ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
             CORBA::_tc_Contained,
             1,
             _tao_elem,
-            CORBA::Contained::_tao_any_destructor
+          CORBA_Contained::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = CORBA_Contained::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
-  _tao_elem = CORBA::Contained::_nil ();
+  _tao_elem = CORBA_Contained::_nil ();
   return 0;
 }
 
 #if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
     defined (ACE_HAS_GNU_REPO)
-  template class TAO_Object_Manager<CORBA::Contained,CORBA::Contained_var>;
+    template class TAO_Object_Manager<CORBA_Contained,CORBA_Contained_var>;
 #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
-#  pragma instantiate TAO_Object_Manager<CORBA::Contained,CORBA::Contained_var>
+  #  pragma instantiate TAO_Object_Manager<CORBA_Contained,CORBA_Contained_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const CORBA::Contained::Description &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const CORBA_Contained::Description &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
-          CORBA::Contained::_tc_Description,
+      CORBA_Contained::_tc_Description,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::Contained::Description *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_Contained::Description *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
-          CORBA::Contained::_tc_Description,
+      CORBA_Contained::_tc_Description,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::Contained::Description::_tao_any_destructor
+      CORBA_Contained::Description::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::Contained::Description *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_Contained::Description *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const CORBA::Contained::Description *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const CORBA_Contained::Description*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::Contained::Description *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_Contained::Description *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::Contained::_tc_Description
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA_Contained::_tc_Description ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast (
-            const CORBA::Contained::Description*,
+          const CORBA_Contained::Description*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::Contained::Description *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::Contained::Description,
-            0
-          );
-        
+      CORBA_Contained::Description *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_Contained::Description, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
-                CORBA::Contained::_tc_Description,
+            CORBA_Contained::_tc_Description,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::Contained::Description::_tao_any_destructor
+            CORBA_Contained::Description::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -15323,22 +13800,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA::ContainedSeq &_tao_elem
-  )
+    const CORBA_ContainedSeq &_tao_elem
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -15349,95 +13819,65 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::ContainedSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_ContainedSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_ContainedSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::ContainedSeq::_tao_any_destructor
+      CORBA_ContainedSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::ContainedSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_ContainedSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA::ContainedSeq*&,
+      const CORBA_ContainedSeq*&,
       _tao_elem
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::ContainedSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_ContainedSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_ContainedSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_ContainedSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
-            const CORBA::ContainedSeq*,
+          const CORBA_ContainedSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::ContainedSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::ContainedSeq,
-            0
-          );
-        
+      CORBA_ContainedSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_ContainedSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_ContainedSeq,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::ContainedSeq::_tao_any_destructor
+            CORBA_ContainedSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -15451,22 +13891,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA::InterfaceDefSeq &_tao_elem
-  )
+    const CORBA_InterfaceDefSeq &_tao_elem
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -15477,95 +13910,65 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::InterfaceDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_InterfaceDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_InterfaceDefSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::InterfaceDefSeq::_tao_any_destructor
+      CORBA_InterfaceDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::InterfaceDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_InterfaceDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA::InterfaceDefSeq*&,
+      const CORBA_InterfaceDefSeq*&,
       _tao_elem
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::InterfaceDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_InterfaceDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_InterfaceDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_InterfaceDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
-            const CORBA::InterfaceDefSeq*,
+          const CORBA_InterfaceDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::InterfaceDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::InterfaceDefSeq,
-            0
-          );
-        
+      CORBA_InterfaceDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_InterfaceDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_InterfaceDefSeq,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::InterfaceDefSeq::_tao_any_destructor
+            CORBA_InterfaceDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -15579,22 +13982,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA::ValueDefSeq &_tao_elem
-  )
+    const CORBA_ValueDefSeq &_tao_elem
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -15605,95 +14001,65 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::ValueDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_ValueDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_ValueDefSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::ValueDefSeq::_tao_any_destructor
+      CORBA_ValueDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::ValueDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_ValueDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA::ValueDefSeq*&,
+      const CORBA_ValueDefSeq*&,
       _tao_elem
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::ValueDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_ValueDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_ValueDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_ValueDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
-            const CORBA::ValueDefSeq*,
+          const CORBA_ValueDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::ValueDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::ValueDefSeq,
-            0
-          );
-        
+      CORBA_ValueDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_ValueDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_ValueDefSeq,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::ValueDefSeq::_tao_any_destructor
+            CORBA_ValueDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -15707,22 +14073,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA::AbstractInterfaceDefSeq &_tao_elem
-  )
+    const CORBA_AbstractInterfaceDefSeq &_tao_elem
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -15733,95 +14092,65 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::AbstractInterfaceDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_AbstractInterfaceDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_AbstractInterfaceDefSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::AbstractInterfaceDefSeq::_tao_any_destructor
+      CORBA_AbstractInterfaceDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::AbstractInterfaceDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_AbstractInterfaceDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA::AbstractInterfaceDefSeq*&,
+      const CORBA_AbstractInterfaceDefSeq*&,
       _tao_elem
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::AbstractInterfaceDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_AbstractInterfaceDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_AbstractInterfaceDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_AbstractInterfaceDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
-            const CORBA::AbstractInterfaceDefSeq*,
+          const CORBA_AbstractInterfaceDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::AbstractInterfaceDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::AbstractInterfaceDefSeq,
-            0
-          );
-        
+      CORBA_AbstractInterfaceDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_AbstractInterfaceDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_AbstractInterfaceDefSeq,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::AbstractInterfaceDefSeq::_tao_any_destructor
+            CORBA_AbstractInterfaceDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -15835,22 +14164,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA::LocalInterfaceDefSeq &_tao_elem
-  )
+    const CORBA_LocalInterfaceDefSeq &_tao_elem
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -15861,95 +14183,65 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::LocalInterfaceDefSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_LocalInterfaceDefSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_LocalInterfaceDefSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::LocalInterfaceDefSeq::_tao_any_destructor
+      CORBA_LocalInterfaceDefSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::LocalInterfaceDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_LocalInterfaceDefSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA::LocalInterfaceDefSeq*&,
+      const CORBA_LocalInterfaceDefSeq*&,
       _tao_elem
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::LocalInterfaceDefSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_LocalInterfaceDefSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_LocalInterfaceDefSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_LocalInterfaceDefSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
-            const CORBA::LocalInterfaceDefSeq*,
+          const CORBA_LocalInterfaceDefSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::LocalInterfaceDefSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::LocalInterfaceDefSeq,
-            0
-          );
-        
+      CORBA_LocalInterfaceDefSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_LocalInterfaceDefSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_LocalInterfaceDefSeq,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::LocalInterfaceDefSeq::_tao_any_destructor
+            CORBA_LocalInterfaceDefSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -15963,121 +14255,76 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const CORBA::StructMember &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const CORBA_StructMember &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_StructMember,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::StructMember *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_StructMember *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_StructMember,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::StructMember::_tao_any_destructor
+      CORBA_StructMember::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::StructMember *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_StructMember *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const CORBA::StructMember *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const CORBA_StructMember*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::StructMember *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_StructMember *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_StructMember
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_StructMember ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast (
-            const CORBA::StructMember*,
+          const CORBA_StructMember*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::StructMember *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::StructMember,
-            0
-          );
-        
+      CORBA_StructMember *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_StructMember, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_StructMember,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::StructMember::_tao_any_destructor
+            CORBA_StructMember::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -16091,22 +14338,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA::StructMemberSeq &_tao_elem
-  )
+    const CORBA_StructMemberSeq &_tao_elem
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -16117,95 +14357,65 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::StructMemberSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_StructMemberSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_StructMemberSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::StructMemberSeq::_tao_any_destructor
+      CORBA_StructMemberSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::StructMemberSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_StructMemberSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA::StructMemberSeq*&,
+      const CORBA_StructMemberSeq*&,
       _tao_elem
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::StructMemberSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_StructMemberSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_StructMemberSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_StructMemberSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
-            const CORBA::StructMemberSeq*,
+          const CORBA_StructMemberSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::StructMemberSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::StructMemberSeq,
-            0
-          );
-        
+      CORBA_StructMemberSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_StructMemberSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_StructMemberSeq,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::StructMemberSeq::_tao_any_destructor
+            CORBA_StructMemberSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -16219,121 +14429,76 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const CORBA::Initializer &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const CORBA_Initializer &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_Initializer,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::Initializer *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_Initializer *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_Initializer,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::Initializer::_tao_any_destructor
+      CORBA_Initializer::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::Initializer *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_Initializer *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const CORBA::Initializer *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const CORBA_Initializer*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::Initializer *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_Initializer *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_Initializer
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_Initializer ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast (
-            const CORBA::Initializer*,
+          const CORBA_Initializer*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::Initializer *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::Initializer,
-            0
-          );
-        
+      CORBA_Initializer *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_Initializer, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_Initializer,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::Initializer::_tao_any_destructor
+            CORBA_Initializer::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -16347,22 +14512,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA::InitializerSeq &_tao_elem
-  )
+    const CORBA_InitializerSeq &_tao_elem
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -16373,95 +14531,65 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::InitializerSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_InitializerSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_InitializerSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::InitializerSeq::_tao_any_destructor
+      CORBA_InitializerSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::InitializerSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_InitializerSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA::InitializerSeq*&,
+      const CORBA_InitializerSeq*&,
       _tao_elem
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::InitializerSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_InitializerSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_InitializerSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_InitializerSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
-            const CORBA::InitializerSeq*,
+          const CORBA_InitializerSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::InitializerSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::InitializerSeq,
-            0
-          );
-        
+      CORBA_InitializerSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_InitializerSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_InitializerSeq,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::InitializerSeq::_tao_any_destructor
+            CORBA_InitializerSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -16475,121 +14603,76 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const CORBA::UnionMember &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const CORBA_UnionMember &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_UnionMember,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::UnionMember *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_UnionMember *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_UnionMember,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::UnionMember::_tao_any_destructor
+      CORBA_UnionMember::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::UnionMember *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_UnionMember *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const CORBA::UnionMember *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const CORBA_UnionMember*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::UnionMember *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_UnionMember *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_UnionMember
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_UnionMember ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast (
-            const CORBA::UnionMember*,
+          const CORBA_UnionMember*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::UnionMember *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::UnionMember,
-            0
-          );
-        
+      CORBA_UnionMember *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_UnionMember, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_UnionMember,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::UnionMember::_tao_any_destructor
+            CORBA_UnionMember::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -16603,22 +14686,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA::UnionMemberSeq &_tao_elem
-  )
+    const CORBA_UnionMemberSeq &_tao_elem
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -16629,95 +14705,65 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::UnionMemberSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_UnionMemberSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_UnionMemberSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::UnionMemberSeq::_tao_any_destructor
+      CORBA_UnionMemberSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::UnionMemberSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_UnionMemberSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA::UnionMemberSeq*&,
+      const CORBA_UnionMemberSeq*&,
       _tao_elem
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::UnionMemberSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_UnionMemberSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_UnionMemberSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_UnionMemberSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
-            const CORBA::UnionMemberSeq*,
+          const CORBA_UnionMemberSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::UnionMemberSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::UnionMemberSeq,
-            0
-          );
-        
+      CORBA_UnionMemberSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_UnionMemberSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_UnionMemberSeq,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::UnionMemberSeq::_tao_any_destructor
+            CORBA_UnionMemberSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -16731,22 +14777,15 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA::EnumMemberSeq &_tao_elem
-  )
+    const CORBA_EnumMemberSeq &_tao_elem
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -16757,95 +14796,65 @@
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::EnumMemberSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_EnumMemberSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_EnumMemberSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::EnumMemberSeq::_tao_any_destructor
+      CORBA_EnumMemberSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::EnumMemberSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_EnumMemberSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA::EnumMemberSeq*&,
+      const CORBA_EnumMemberSeq*&,
       _tao_elem
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::EnumMemberSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_EnumMemberSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_EnumMemberSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_EnumMemberSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
-            const CORBA::EnumMemberSeq*,
+          const CORBA_EnumMemberSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::EnumMemberSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::EnumMemberSeq,
-            0
-          );
-        
+      CORBA_EnumMemberSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_EnumMemberSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_EnumMemberSeq,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::EnumMemberSeq::_tao_any_destructor
+            CORBA_EnumMemberSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -16859,21 +14868,12 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::Container_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_Container_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -16881,198 +14881,124 @@
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
-          CORBA::Container::_duplicate (_tao_elem),
-          CORBA::Container::_tao_any_destructor
-        );
-    }
-}
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::Container_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          CORBA::_tc_Container, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          CORBA::Container::_tao_any_destructor
+        CORBA_Container::_duplicate (_tao_elem),
+        CORBA_Container::_tao_any_destructor
         );
     }
 }
 
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::Container_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_Container_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
-    _tao_elem = CORBA::Container::_nil ();
+    _tao_elem = CORBA_Container::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_Container
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_Container ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
             CORBA::_tc_Container,
             1,
             _tao_elem,
-            CORBA::Container::_tao_any_destructor
+          CORBA_Container::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = CORBA_Container::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
-  _tao_elem = CORBA::Container::_nil ();
+  _tao_elem = CORBA_Container::_nil ();
   return 0;
 }
 
 #if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
     defined (ACE_HAS_GNU_REPO)
-  template class TAO_Object_Manager<CORBA::Container,CORBA::Container_var>;
+    template class TAO_Object_Manager<CORBA_Container,CORBA_Container_var>;
 #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
-#  pragma instantiate TAO_Object_Manager<CORBA::Container,CORBA::Container_var>
+  #  pragma instantiate TAO_Object_Manager<CORBA_Container,CORBA_Container_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const CORBA::Container::Description &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const CORBA_Container::Description &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
-          CORBA::Container::_tc_Description,
+      CORBA_Container::_tc_Description,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::Container::Description *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_Container::Description *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
-          CORBA::Container::_tc_Description,
+      CORBA_Container::_tc_Description,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::Container::Description::_tao_any_destructor
+      CORBA_Container::Description::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::Container::Description *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_Container::Description *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const CORBA::Container::Description *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const CORBA_Container::Description*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::Container::Description *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_Container::Description *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::Container::_tc_Description
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA_Container::_tc_Description ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast (
-            const CORBA::Container::Description*,
+          const CORBA_Container::Description*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::Container::Description *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::Container::Description,
-            0
-          );
-        
+      CORBA_Container::Description *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_Container::Description, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
-                CORBA::Container::_tc_Description,
+            CORBA_Container::_tc_Description,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::Container::Description::_tao_any_destructor
+            CORBA_Container::Description::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -17086,121 +15012,84 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_sequence/any_op_cs.cpp:61
-
-// Copying insertion.
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA::Container::DescriptionSeq &_tao_elem
-  )
+    const CORBA_Container::DescriptionSeq &_tao_elem
+  ) // copying
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
-          CORBA::Container::_tc_DescriptionSeq,
+        CORBA_Container::_tc_DescriptionSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
 }
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::Container::DescriptionSeq *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_Container::DescriptionSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
-          CORBA::Container::_tc_DescriptionSeq,
+      CORBA_Container::_tc_DescriptionSeq,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::Container::DescriptionSeq::_tao_any_destructor
+      CORBA_Container::DescriptionSeq::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::Container::DescriptionSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_Container::DescriptionSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA::Container::DescriptionSeq*&,
+      const CORBA_Container::DescriptionSeq*&,
       _tao_elem
     );
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::Container::DescriptionSeq *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_Container::DescriptionSeq *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::Container::_tc_DescriptionSeq
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA_Container::_tc_DescriptionSeq ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast(
-            const CORBA::Container::DescriptionSeq*,
+          const CORBA_Container::DescriptionSeq*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::Container::DescriptionSeq *tmp = 0;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::Container::DescriptionSeq,
-            0
-          );
-        
+      CORBA_Container::DescriptionSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_Container::DescriptionSeq, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
-                CORBA::Container::_tc_DescriptionSeq,
+            CORBA_Container::_tc_DescriptionSeq,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::Container::DescriptionSeq::_tao_any_destructor
+            CORBA_Container::DescriptionSeq::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -17214,21 +15103,12 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::IDLType_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_IDLType_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -17236,98 +15116,60 @@
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
-          CORBA::IDLType::_duplicate (_tao_elem),
-          CORBA::IDLType::_tao_any_destructor
-        );
-    }
-}
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::IDLType_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          CORBA::_tc_IDLType, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          CORBA::IDLType::_tao_any_destructor
+        CORBA_IDLType::_duplicate (_tao_elem),
+        CORBA_IDLType::_tao_any_destructor
         );
     }
 }
 
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::IDLType_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_IDLType_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
-    _tao_elem = CORBA::IDLType::_nil ();
+    _tao_elem = CORBA_IDLType::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_IDLType
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_IDLType ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
             CORBA::_tc_IDLType,
             1,
             _tao_elem,
-            CORBA::IDLType::_tao_any_destructor
+          CORBA_IDLType::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = CORBA_IDLType::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
-  _tao_elem = CORBA::IDLType::_nil ();
+  _tao_elem = CORBA_IDLType::_nil ();
   return 0;
 }
 
 #if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
     defined (ACE_HAS_GNU_REPO)
-  template class TAO_Object_Manager<CORBA::IDLType,CORBA::IDLType_var>;
+    template class TAO_Object_Manager<CORBA_IDLType,CORBA_IDLType_var>;
 #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
-#  pragma instantiate TAO_Object_Manager<CORBA::IDLType,CORBA::IDLType_var>
+  #  pragma instantiate TAO_Object_Manager<CORBA_IDLType,CORBA_IDLType_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_interface/any_op_cs.cpp:60
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::TypedefDef_ptr _tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_TypedefDef_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
-  
   if (stream << _tao_elem)
     {
       _tao_any._tao_replace (
@@ -17335,198 +15177,124 @@
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
-          CORBA::TypedefDef::_duplicate (_tao_elem),
-          CORBA::TypedefDef::_tao_any_destructor
-        );
-    }
-}
-
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::TypedefDef_ptr *_tao_elem
-  )
-{
-  TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
-      _tao_any._tao_replace (
-          CORBA::_tc_TypedefDef, 
-          TAO_ENCAP_BYTE_ORDER,
-          stream.begin (),
-          1,
-          *_tao_elem,
-          CORBA::TypedefDef::_tao_any_destructor
+        CORBA_TypedefDef::_duplicate (_tao_elem),
+        CORBA_TypedefDef::_tao_any_destructor
         );
     }
 }
 
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::TypedefDef_ptr &_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_TypedefDef_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
-    _tao_elem = CORBA::TypedefDef::_nil ();
+    _tao_elem = CORBA_TypedefDef::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_TypedefDef
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_TypedefDef ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
     if (!result)
-      {
         return 0; // not equivalent
-      }
     
     TAO_InputCDR stream (
         _tao_any._tao_get_cdr (),
         _tao_any._tao_byte_order ()
       );
-    
     if (stream >> _tao_elem)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
             CORBA::_tc_TypedefDef,
             1,
             _tao_elem,
-            CORBA::TypedefDef::_tao_any_destructor
+          CORBA_TypedefDef::_tao_any_destructor
           );
-        
         return 1;
       }
   }
   ACE_CATCHANY
   {
+    _tao_elem = CORBA_TypedefDef::_nil ();
+    return 0;
   }
   ACE_ENDTRY;
-  
-  _tao_elem = CORBA::TypedefDef::_nil ();
+  _tao_elem = CORBA_TypedefDef::_nil ();
   return 0;
 }
 
 #if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
     defined (ACE_HAS_GNU_REPO)
-  template class TAO_Object_Manager<CORBA::TypedefDef,CORBA::TypedefDef_var>;
+    template class TAO_Object_Manager<CORBA_TypedefDef,CORBA_TypedefDef_var>;
 #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
-#  pragma instantiate TAO_Object_Manager<CORBA::TypedefDef,CORBA::TypedefDef_var>
+  #  pragma instantiate TAO_Object_Manager<CORBA_TypedefDef,CORBA_TypedefDef_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
-
-// TAO_IDL - Generated from 
-// be/be_visitor_structure/any_op_cs.cpp:58
-
-// Copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    const CORBA::TypeDescription &_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, const CORBA_TypeDescription &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << _tao_elem)
-    {
+  stream << _tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_TypeDescription,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin ()
         );
     }
-}
 
-// Non-copying insertion.
-void operator<<= (
-    CORBA::Any &_tao_any,
-    CORBA::TypeDescription *_tao_elem
-  )
+void operator<<= (CORBA::Any &_tao_any, CORBA_TypeDescription *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
-  
-  if (stream << *_tao_elem)
-    {
+  stream << *_tao_elem;
       _tao_any._tao_replace (
           CORBA::_tc_TypeDescription,
           TAO_ENCAP_BYTE_ORDER,
           stream.begin (),
           1,
           _tao_elem,
-          CORBA::TypeDescription::_tao_any_destructor
+      CORBA_TypeDescription::_tao_any_destructor
         );
     }
-}
 
-// Extraction to non-const pointer (deprecated).
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    CORBA::TypeDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_TypeDescription *&_tao_elem)
 {
-  return _tao_any >>= ACE_const_cast (
-      const CORBA::TypeDescription *&,
-      _tao_elem
-    );
+  return _tao_any >>= ACE_const_cast(const CORBA_TypeDescription*&,_tao_elem);
 }
 
-// Extraction to const pointer.
-CORBA::Boolean operator>>= (
-    const CORBA::Any &_tao_any,
-    const CORBA::TypeDescription *&_tao_elem
-  )
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_TypeDescription *&_tao_elem)
 {
   _tao_elem = 0;
-  
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result =
-      type->equivalent (
-          CORBA::_tc_TypeDescription
-          ACE_ENV_ARG_PARAMETER
-        );
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_TypeDescription ACE_ENV_ARG_PARAMETER);
     ACE_TRY_CHECK;
     
-    if (result == 0)
-      {
+    if (!result)
         return 0; // not equivalent
-      }
     
     if (_tao_any.any_owns_data ())
       {
         _tao_elem = ACE_static_cast (
-            const CORBA::TypeDescription*,
+          const CORBA_TypeDescription*,
             _tao_any.value ()
           );
-        
         return 1;
       }
     else
       {
-        CORBA::TypeDescription *tmp;
-        ACE_NEW_RETURN (
-            tmp,
-            CORBA::TypeDescription,
-            0
-          );
-        
+      CORBA_TypeDescription *tmp;
+      ACE_NEW_RETURN (tmp, CORBA_TypeDescription, 0);
         TAO_InputCDR stream (
             _tao_any._tao_get_cdr (),
             _tao_any._tao_byte_order ()
           );
-        
         if (stream >> *tmp)
           {
             ((CORBA::Any *)&_tao_any)->_tao_replace (
                 CORBA::_tc_TypeDescription,
                 1,
                 ACE_static_cast (void *, tmp),
-                CORBA::TypeDescription::_tao_any_destructor
+            CORBA_TypeDescription::_tao_any_destructor
               );
-            
             _tao_elem = tmp;
             return 1;
           }
@@ -17540,13 +15308,12 @@
   {
   }
   ACE_ENDTRY;
-  
   return 0;
 }
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::IRObject_ptr _tao_objref
+    const CORBA_IRObject_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -17555,7 +15322,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::IRObject_ptr &_tao_objref
+    CORBA_IRObject_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -17565,7 +15332,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      CORBA::IRObject::_unchecked_narrow (
+      CORBA_IRObject::_unchecked_narrow (
           obj.in ()
           ACE_ENV_ARG_PARAMETER
         );
@@ -17582,7 +15349,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::Contained_ptr _tao_objref
+    const CORBA_Contained_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -17591,7 +15358,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::Contained_ptr &_tao_objref
+    CORBA_Contained_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -17601,7 +15368,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      CORBA::Contained::_unchecked_narrow (
+      CORBA_Contained::_unchecked_narrow (
           obj.in ()
           ACE_ENV_ARG_PARAMETER
         );
@@ -17618,7 +15385,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::ContainedSeq &_tao_sequence
+    const CORBA_ContainedSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -17636,7 +15403,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::ContainedSeq &_tao_sequence
+    CORBA_ContainedSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -17647,11 +15414,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -17665,7 +15427,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::InterfaceDefSeq &_tao_sequence
+    const CORBA_InterfaceDefSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -17683,7 +15445,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::InterfaceDefSeq &_tao_sequence
+    CORBA_InterfaceDefSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -17694,11 +15456,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -17712,7 +15469,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::ValueDefSeq &_tao_sequence
+    const CORBA_ValueDefSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -17730,7 +15487,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::ValueDefSeq &_tao_sequence
+    CORBA_ValueDefSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -17741,11 +15498,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -17759,7 +15511,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::AbstractInterfaceDefSeq &_tao_sequence
+    const CORBA_AbstractInterfaceDefSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -17777,7 +15529,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::AbstractInterfaceDefSeq &_tao_sequence
+    CORBA_AbstractInterfaceDefSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -17788,11 +15540,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -17806,7 +15553,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::LocalInterfaceDefSeq &_tao_sequence
+    const CORBA_LocalInterfaceDefSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -17824,7 +15571,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::LocalInterfaceDefSeq &_tao_sequence
+    CORBA_LocalInterfaceDefSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -17835,11 +15582,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -17853,7 +15595,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::StructMemberSeq &_tao_sequence
+    const CORBA_StructMemberSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -17871,7 +15613,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::StructMemberSeq &_tao_sequence
+    CORBA_StructMemberSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -17882,11 +15624,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -17900,7 +15637,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::InitializerSeq &_tao_sequence
+    const CORBA_InitializerSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -17918,7 +15655,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::InitializerSeq &_tao_sequence
+    CORBA_InitializerSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -17929,11 +15666,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -17947,7 +15679,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::UnionMemberSeq &_tao_sequence
+    const CORBA_UnionMemberSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -17965,7 +15697,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::UnionMemberSeq &_tao_sequence
+    CORBA_UnionMemberSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -17976,11 +15708,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -17994,7 +15721,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::EnumMemberSeq &_tao_sequence
+    const CORBA_EnumMemberSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -18012,7 +15739,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::EnumMemberSeq &_tao_sequence
+    CORBA_EnumMemberSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -18023,11 +15750,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -18041,7 +15763,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::Container::DescriptionSeq &_tao_sequence
+    const CORBA_Container::DescriptionSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -18059,7 +15781,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::Container::DescriptionSeq &_tao_sequence
+    CORBA_Container::DescriptionSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -18070,11 +15792,6 @@
     // If length is 0 we return true.
     if (0 >= _tao_seq_len) 
       return 1;
-    // Add a check to the length of the sequence
-    // to make sure it does not exceed the length
-    // of the stream. (See bug 58.)
-    if (_tao_seq_len > strm.length())
-      return 0;
     // retrieve all the elements
     CORBA::Boolean _tao_marshal_flag = 1;
     for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
@@ -18088,7 +15805,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::Container_ptr _tao_objref
+    const CORBA_Container_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -18097,7 +15814,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::Container_ptr &_tao_objref
+    CORBA_Container_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -18107,7 +15824,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      CORBA::Container::_unchecked_narrow (
+      CORBA_Container::_unchecked_narrow (
           obj.in ()
           ACE_ENV_ARG_PARAMETER
         );
@@ -18124,7 +15841,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::IDLType_ptr _tao_objref
+    const CORBA_IDLType_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -18133,7 +15850,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::IDLType_ptr &_tao_objref
+    CORBA_IDLType_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -18143,7 +15860,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      CORBA::IDLType::_unchecked_narrow (
+      CORBA_IDLType::_unchecked_narrow (
           obj.in ()
           ACE_ENV_ARG_PARAMETER
         );
@@ -18160,7 +15877,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA::TypedefDef_ptr _tao_objref
+    const CORBA_TypedefDef_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -18169,7 +15886,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA::TypedefDef_ptr &_tao_objref
+    CORBA_TypedefDef_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -18179,7 +15896,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      CORBA::TypedefDef::_unchecked_narrow (
+      CORBA_TypedefDef::_unchecked_narrow (
           obj.in ()
           ACE_ENV_ARG_PARAMETER
         );
@@ -18193,4 +15910,3 @@
   ACE_ENDTRY;
   return 0;
 }
-
