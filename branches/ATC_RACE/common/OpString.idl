#ifndef OPERATIONAL_STRING_IDL
#define OPERATIONAL_STRING_IDL

#include "ciao/Deployment_Data.idl"

module CIAO
{
  module RACE
    {

      const long UNDEFINED_TIME_ENTRY = -1;

      struct TimeValue
      {
        /* Seconds since Jan. 1, 1970 */
        long    sec;
        /* and microseconds */
        long    usec;
      };

      struct TimeWindow
      {
        CIAO::RACE::TimeValue Earliest;

        CIAO::RACE::TimeValue Latest;
      };

      struct InstanceDescription
      {
        string UUID;

        // Human-readable name (for debugging, not identification).
        string name;

        // Node to which instance is deployed.
        string node;

        // ID of task performed by instance (in Task Network).
        string taskId;

        // Supported type ID of task (in Repository Manager).
        string taskTypeId;

        // Specific type ID of suggested component (in Repository Manager).
        string suggestedImpl;

        // Initial values of component configuration parameters.
        ::Deployment::Properties configProperty;

        // Expected time range of instance start.
        TimeWindow startWindow;

        // Expected time range of instance finish.
        TimeWindow endWindow;
      };

      typedef sequence <InstanceDescription> InstanceDescriptions;

      typedef ::Deployment::PlanConnectionDescriptions DataLinkDescriptions;

      enum ConnectionType
      {
        CAUSAL,
        SCHEDULING,
        THREAT
      };

      struct OrderLinkDescription
      {
        string name;

        ConnectionType type;

        ::Deployment::ComponentExternalPortEndpoints externalEndpoint;

        ::Deployment::PlanSubcomponentPortEndpoints internalEndpoint;

        ::Deployment::ExternalReferenceEndpoints externalReference;

      };

      typedef sequence <OrderLinkDescription> OrderLinkDescriptions;


      enum QoSComparator
      {
        LESS_THAN,
        GREATER_THAN,
        EQUAL,
        LESS_THAN_EQUAL,
        GREATER_THAN_EQUAL,
        NOT_EQUAL
      };

      enum QoSType
      {
        DEADLINE,
        OTHERS
      };


      struct QoSSpecification
      {
        string name;

        QoSType type;

        string MonitorID;

        QoSComparator comparator;

        any value;
      };

      typedef sequence <QoSSpecification> QoSSpecifications;

      struct GoalCondition
      {
        int condID;

        int utility;
      };

      typedef sequence <GoalCondition> GoalConditions;

      struct TimeConstraint
      {
        int condID;

        TimeValue timeConstraint;
      };

      typedef sequence <TimeConstraint> TimeConstraints;

      struct Goal
      {
        string name;

        string UUID;

        GoalConditions goalConds;

        TimeConstraints relativeTimeConstraints;

        TimeConstraints absoluteTimeConstraints;

        QoSSpecifications QoSRequirements;

        TimeWindow startWindow;
      };

      struct OperationalString
      {
        string name;

        string UUID;

        Goal goal;

        InstanceDescriptions instances;

        DataLinkDescriptions dataLinks;

        OrderLinkDescriptions orderLinks;

        long priority;

        QoSSpecifications QoSRequirements;

        TimeWindow startWindow;

        TimeWindow endWindow;

        ::Deployment::Properties properties;
      };

  };
};

#endif /* OPERATIONAL_STRING_IDL */
