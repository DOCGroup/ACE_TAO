#ifndef OPERATIONAL_STRING_IDL
#define OPERATIONAL_STRING_IDL

#include "ciao/Deployment_Data.idl"

module CIAO
{
  module RACE
    {

      const long UNDEFINED_TIME_ENTRY = -1;

      struct TimeValue
      {
        /* Seconds since Jan. 1, 1970 */
        long    sec;
        /* and microseconds */
        long    usec;
      };

      // A time window is a range between an earliest and latest time value.
      struct TimeWindow
      {
        // Beginning of time window.
        CIAO::RACE::TimeValue Earliest;

        // End of time window.
        CIAO::RACE::TimeValue Latest;
      };

      // A task instance in an opstring.
      struct InstanceDescription
      {
        // Universally unique ID of opstring.
        // (Should correspond to goal UUID).
        string UUID;

        // Human-readable name (for debugging, not identification).
        string name;

        // Node to which instance is deployed.
        string node;

        // ID of task performed by instance (in Task Network).
        string taskId;

        // Supported type ID of task (in Repository Manager).
        string taskTypeId;

        // Specific type ID of suggested component (in Repository Manager).
        string suggestedImpl;

        // Initial values of component configuration parameters.
        ::Deployment::Properties configProperty;

        // Expected time range of instance start.
        TimeWindow startWindow;

        // Expected time range of instance finish.
        TimeWindow endWindow;
      };

      typedef sequence <InstanceDescription> InstanceDescriptions;

      typedef ::Deployment::PlanConnectionDescriptions DataLinkDescriptions;

      // Type of an ordering link in opstring (data links handled separately).
      // CAUSAL: causal link; must be obeyed for correct functionality.
      // SCHEDULING: scheduling link introduced during scheduling to prevent
      //             potential resource violations; can be ignored if
      //             additional scheduling is done.
      // THREAT: threat link, introduced to avoid a causal link threat;
      //         must be obeyed for correct functionality.
      enum ConnectionType
      {
        CAUSAL,
        SCHEDULING,
        THREAT
      };

      // A link specifying an ordering between two instances (the endpoints).
      struct OrderLinkDescription
      {
        // Human-readable name (for debugging, not identification).
        string name;

        // Type of link.
        ConnectionType type;

        ::Deployment::ComponentExternalPortEndpoints externalEndpoint;

        ::Deployment::PlanSubcomponentPortEndpoints internalEndpoint;

        ::Deployment::ExternalReferenceEndpoints externalReference;

      };

      typedef sequence <OrderLinkDescription> OrderLinkDescriptions;


      // Kind of comparison for a QoS specification.
      enum QoSComparator
      {
        LESS_THAN,
        GREATER_THAN,
        EQUAL,
        LESS_THAN_EQUAL,
        GREATER_THAN_EQUAL,
        NOT_EQUAL
      };

      // Type of QoS specification.
      enum QoSType
      {
        DEADLINE,
        OTHERS
      };


      struct QoSSpecification
      {
        // Human-readable name (for debugging, not identification).
        string name;

        // Type of QoS.
        QoSType type;

        // Specific type ID of component that monitors this QoS.
        string MonitorID;

        // Comparison used for this QoS specification.
        QoSComparator comparator;

        // Value to compare actual QoS to (using comparator).
        any value;
      };

      typedef sequence <QoSSpecification> QoSSpecifications;

      struct GoalCondition
      {
        // ID of condition (in Task Network).
        int condID;

        // Utility value (specifying importance of this goal condition).
        int utility;
      };

      typedef sequence <GoalCondition> GoalConditions;

      struct TimeConstraint
      {
        // ID of condition (in Task Network).
        int condID;

        // Start-by (end-by) time for this data (non-data) condition.
        TimeValue timeConstraint;
      };

      typedef sequence <TimeConstraint> TimeConstraints;

      struct Goal
      {
        // Universally unique ID of goal.
        string UUID;

        // Human-readable name (for debugging, not identification).
        string name;

        // Goal conditions with utility values.
        GoalConditions goalConds;

        // Start-by and end-by constraints on conditions, in relative time
        // (relative to start of opstring to achieve this goal).
        TimeConstraints relativeTimeConstraints;

        // Start-by and end-by constraints on conditions, in clock time.
        TimeConstraints absoluteTimeConstraints;

        // QoS requirements.
        QoSSpecifications QoSRequirements;

        // Expected time range for start of opstring (for achieving this goal)
        // execution.
        TimeWindow startWindow;
      };

      struct OperationalString
      {
        // Universally unique ID of opstring.
        // (Should correspond to goal UUID).
        string UUID;

        // Human-readable name (for debugging, not identification).
        string name;

        // Goal achieved by this opstring.
        Goal goal;

        // Task instances in opstring.
        InstanceDescriptions instances;

        // Data links (between task instances) in opstring.
        DataLinkDescriptions dataLinks;

        // Ordering links (between task instances) in opstring.
        OrderLinkDescriptions orderLinks;

        // Priority of this opstring.
        // (Should be derived from expected utility of goal).
        long priority;

        // QoS requirements.
        QoSSpecifications QoSRequirements;

        // Expected time range for start of opstring execution.
        TimeWindow startWindow;

        // Expected time range for end of opstring execution.
        TimeWindow endWindow;

        // Properties for deployment of opstring.
        ::Deployment::Properties properties;
      };

  };
};

#endif /* OPERATIONAL_STRING_IDL */
