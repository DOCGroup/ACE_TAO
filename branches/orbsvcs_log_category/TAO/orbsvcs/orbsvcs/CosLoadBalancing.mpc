// -*- MPC -*-
// $Id$

project(CosLoadBalancing) : orbsvcslib, orbsvcs_output, install, naming, iormanip, portablegroup, ami, avoids_minimum_corba, pi, pi_server, iorinterceptor, tao_versioning_idl_defaults, svc_utils {
  sharedname   = TAO_CosLoadBalancing
  idlflags    += -Wb,export_macro=TAO_LoadBalancing_Export -Wb,export_include=orbsvcs/LoadBalancing/LoadBalancing_export.h
  dynamicflags += TAO_LOADBALANCING_BUILD_DLL
  tagchecks   += CosLoadBalancing

  IDL_Files {
    CosLoadBalancing.idl
    LB_ORT.idl
  }

  Source_Files(ORBSVCS_COMPONENTS) {
    CosLoadBalancing {
      CosLoadBalancingC.cpp
      CosLoadBalancingS.cpp
      LB_ORTC.cpp
      LoadBalancing/LB_LeastLoaded.cpp
      LoadBalancing/LB_LoadMinimum.cpp
      LoadBalancing/LB_LoadAverage.cpp
      LoadBalancing/LB_LoadAlert.cpp
      LoadBalancing/LB_LoadAlertInfo.cpp
      LoadBalancing/LB_LoadAlert_Handler.cpp
      LoadBalancing/LB_LoadManager.cpp
      LoadBalancing/LB_MemberLocator.cpp
      LoadBalancing/LB_Pull_Handler.cpp
      LoadBalancing/LB_Random.cpp
      LoadBalancing/LB_RoundRobin.cpp
      LoadBalancing/LB_ClientComponent.cpp
      LoadBalancing/LB_ClientORBInitializer.cpp
      LoadBalancing/LB_ClientRequestInterceptor.cpp
      LoadBalancing/LB_ServerRequestInterceptor.cpp
      LoadBalancing/LB_IORInterceptor.cpp
      LoadBalancing/LB_ObjectReferenceFactory.cpp
      LoadBalancing/LB_ORBInitializer.cpp
      LoadBalancing/LB_Component.cpp
      LoadBalancing/LB_CPU_Utilization_Monitor.cpp
      LoadBalancing/LB_CPU_Load_Average_Monitor.cpp
    }
  }

  Header_Files {
    LoadBalancing
  }

  Template_Files {
  }

  Pkgconfig_Files {
    TAO_CosLoadBalancing.pc.in
  }
}
