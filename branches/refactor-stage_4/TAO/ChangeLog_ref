Tue Jul 22 13:02:16 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
        * TAO_IDL/be_include/be_visitor_interface/strategized_proxy_broker_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/operation.h:

          Modified skeleton-side generated source files to match
          Bala's latest hand-crafted changes to support collocation.

        * tao/Collocation_Proxy_Broker.h (dispatch):

          Changed the type of the 'op_len' parameter (which holds the
          length of the operation string name) from int to size_t, since
          the latter type is returned from strlen(). Also changed
          instances of Object * to Object_ptr.

Mon Jul 21 21:36:44 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/thru_poa_proxy_impl_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/proxy_impl_xh.cpp:

          Modified skeleton-side generated header files to match
          Bala's latest hand-crafted changes to support collocation.

Mon Jul 21 20:55:38 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_visitor_constant/constant_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/smart_proxy_ch.cpp:
        * TAO_IDL/be/be_visitor_module/module_ch.cpp:
        * TAO_IDL/be/be_visitor_module/module_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_root/root_ch.cpp:
        * TAO_IDL/be/be_visitor_root/root_sth.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_valuetype/obv_module.cpp:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

	  - Replaced use of 'TAO_NAMESPACE' in generated code with
	    'namespace', along with related macros.

	  - Modified stub-side generated code to match Bala's
	    latest hand-crafted changes to support collocation.

Mon Jul 21 13:11:40 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:

          Added Bala's new collocation-related files to these projects.

Mon Jul 21 11:41:17 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/include/utl_idlist.h:
        * TAO_IDL/include/utl_indenter.h:
        * TAO_IDL/include/utl_strlist.h:

	  Added include of ace/streams.h to each of these files, necessitated
	  by changes of include structure in ACE.

Mon Jul 21 07:19:17 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/CORBA_String.cpp: Include ace/streams.h for getting it to
	  compile properly.  Thanks to Jeff for reporting this.

Sun Jul 20 14:02:28 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* TAO_IDL/be/be_visitor_tmplinst/tmplinst_cs.cpp:
	* TAO_IDL/be/be_visitor_tmplinst/tmplinst_ss.cpp:
	* TAO_IDL/be_include/be_visitor_tmplinst/tmplinst_cs.h:
	* TAO_IDL/be_include/be_visitor_tmplinst/tmplinst_ss.h: Added
	  these files into the branch.

Sun Jul 20 13:00:24 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Abstract_Servant_Base.h: #include'd corbafwd.h to get the
	  definition of TAO_default_environment ().
	
	* tao/BoundsC.h: #include'd CDR.h to get the CDR operators for
	  basic types. 

	* tao/CORBA_String.h: #include'd Basic_Types.h and
	  TAO_Export.h. Forward declared TAO_String_Manager and
	  TAO_WString_Manager. 
	
	* tao/CORBA_String.cpp:
	* tao/CORBA_String.inl: Moved constructors that used
	  String_Manager and WString_Manager from the inlined file to the
	  cpp file to get it compilig without errors with g++.

	* tao/Collocated_Invocation.cpp:
	* tao/ClientRequestInfo_i.cpp: Fixed unused variable warnings in
	  the methiod sync_scope ().

	* tao/Dynamic_Adapter.h:
	* tao/Collocation_Resolver.h:
	* tao/Default_Collocation_Resolver.h: Forward declared class
	  Environment. 
	
	* tao/Exception.h: Forward declared class Environment and added an
	  undef for "minor". The undef is available in orbconf.h. Since
	  Exception.h doesnt include orbconf.h directly or indirectly,
	  this is required. 

	* tao/Invocation_Base.cpp: 
	* tao/Invocation_Adapter.cpp: Fixed compile errors from wrong
	  usage of ACE_ENV macros. 
	

	* tao/Makefile.tao: Added new files for compilation.
	
	* tao/Managed_Types.h: #include'd CORBA_String.h

	* tao/ORB_Core.cpp: Fixed warnings due to incorrect casting. 
	
	* tao/Synch_Invocation.cpp: Fixed unused variable warnings.

	* tao/TypeCodeFactory_Adapter.h:
	* tao/Typecode.h: #include'd corbafwd.h to get
	  TAO_default_environment (). 

	* tao/operation_details.cpp: Fixed warnings that arose due to
	  comparison operator between a signed and unsigned integer. 

	
Sun Jul 20 10:13:24 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* TAO_IDL/be/be_codegen.cpp: Changed the inclusion from
	  Invocation_Base to Invocation_Adapter.h. 
	
	* TAO_IDL/be/be_visitor_operation/operation.cpp: Changed the
	  argument in the constructor to pass  a null pointer. This is NOT
	  right. This is a workaround for the timebeing. 

Sun Jul 20 09:47:02 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/PortableServer/ObjectReferenceTemplate.cpp: 
	* tao/Valuetype/ValueFactory_Map.cpp: Fixed compile errors by
	  including CORBA_String.h

Sun Jul 20 07:56:17 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Collocated_Invocation.cpp:
	* tao/Collocated_Invocation.h: New files which provide the actual
	  implementation for making collocated calls on the servant. This
	  class should deal with everything related to collocation like
	  forwarding, interceptors, special ways for AMI etc. 
	
	* tao/Collocation_Proxy_Broker.h: A abstract base class which will
	  be implemented in the generated code for the client side calls
	  to be converted as upcalls in the skeleton code. 

	* tao/Invocation_Adapter.cpp:
	* tao/Invocation_Adapter.h: The original implementation of
	  Invocation_Base is now renamed to be TAO::Invocation_Adapter
	  since this sounded more correct. The invocation adapter has a
	  wide range of responsibilities including making the right type
	  of invocation object (like oneways, twoays, collocated etc.) and 
	  delegating further responsibilities to those classes. 
	  
	* tao/Argument.h: Cosmetic fix. 

	* tao/ClientRequestInfo_i.cpp:
	* tao/ClientRequestInfo_i.h: This class uses the TAO::Invocation_Base
	  object instead of the age old TAO_GIOP_Invocation class. 
	
	* tao/Invocation.cpp: Changed the usage of int to bool in the
	  calls to the ORB_Core that fetches the timeout.

	* tao/Invocation_Base.cpp:
	* tao/Invocation_Base.h: New class that serves as a base class for
	  Remote and colloctaed invocations. This base class provides the
	  right implementations for interceptors. 

	* tao/Invocation_Endpoint_Selectors.cpp: 
	* tao/Invocation_Endpoint_Selectors.h: Added timeout to the
	  select_endpoint () call. 
	
	* tao/ORB_Core.cpp:
	* tao/ORB_Core.h: Changed the calls, connection_timeout () and
	  timeout () to take a boolean. This is just a simple
	  C++'ification our code. Added a call collocation_strategy_new ()
	  whose implementation is exactly the same as collocation_strategy
	  () but returns a TAO::Collocation_Strategy instead of an
	  int. The old call will be retired and the _new () call will
	  replace the original call. The _new is provided as a backward
	  compatibility measure to get our workspace compiling. 

	* tao/Remote_Invocation.cpp:
	* tao/Remote_Invocation.h: 
	* tao/Profile_Transport_Resolver.cpp:
	* tao/Profile_Transport_Resolver.h: Added support for connection
	  and roundtrip timeouts.

	* tao/Stub.h: The struct TAO_Exception_Data will now take a
	  typecode pointer to the exception. 
	
	* tao/Synch_Invocation.cpp:
	* tao/Synch_Invocation.h: Lots of refactoring to support timeouts
	  in the code. 
	
	* tao/corbafwd.h: A new enum is now added and the old enum within
	  namepsace TAO_Collocation_Strategy needs to be retired. Infact
	  the namepscae itself needs to go. 
	
	* tao/operation_details.cpp:
	* tao/operation_details.h:
	* tao/operation_details.i: More or less all the details of the
	  operation are now stored here. This makes it easier for
	  accessing the information for interceptors. 

Thu Jul 17 20:59:34 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Abstract_Servant_Base.h:
        * tao/Acceptor_Filter.h:
        * tao/Acceptor_Impl.cpp:
        * tao/Acceptor_Impl.h:
        * tao/Acceptor_Registry.h:
        * tao/Argument.h:
        * tao/BiDir_Adapter.h:
        * tao/Bind_Dispatcher_Guard.h:
        * tao/BoundsC.h:
        * tao/CDR.h:
        * tao/CORBA_String.cpp:
        * tao/CORBA_String.h:
        * tao/CORBA_String.inl:
        * tao/ClientRequestInfo_i.h:
        * tao/Codeset_Translator_Factory.h:
        * tao/Collocation_Resolver.h:
        * tao/Connector_Impl.h:
        * tao/Connector_Registry.h:
        * tao/Dynamic_Adapter.h:
        * tao/Encodable.h:
        * tao/Endpoint.h:
        * tao/Exception.h:
        * tao/Managed_Types.h:
        * tao/Object_Loader.h:
        * tao/Resource_Factory.h:
        * tao/Sequence.cpp:
        * tao/TAO.dsp:
        * tao/TypeCodeFactory_Adapter.h:
        * tao/Typecode.h:
        * tao/corbafwd.cpp:
        * tao/corbafwd.h:
        * tao/corbafwd.i:

	  Cleaned up include structure a little by substituting for
	  includes of corbafwd.h in some of TAO's files. Some
	  declarations and definitions were moved around to accomplish
	  this.

	* tao/Basic_Types.h:

	  Moved typedefs of basic IDL types (from the corresponding
	  ACE_CDR declarations) to a new file.

	* tao/OBV_Constants.h:

	  Moved constants and typedefs related to valuetypes to a
	  new file.

Wed Jul 16 14:38:02 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be/be_type.cpp:
        * TAO_IDL/be/be_visitor_tmplinst.cpp:
        * TAO_IDL/be/be_visitor_traits.cpp:
        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_array/array_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/smart_proxy_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_cs.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/union_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be_include/be_sequence.h:
        * TAO_IDL/be_include/be_type.h:
        * TAO_IDL/be_include/be_visitor_tmplinst.h:
        * TAO_IDL/be_include/be_visitor_array/array_cs.h:
        * TAO_IDL/be_include/be_visitor_sequence/sequence_cs.h:
        * tao/Array_VarOut_T.cpp:
        * tao/Array_VarOut_T.h:
        * tao/Array_VarOut_T.inl:
        * tao/BD_String_Argument_T.cpp:
        * tao/BD_String_Argument_T.h:
        * tao/BD_String_Argument_T.inl:
        * tao/Basic_Argument_T.h:
        * tao/Basic_Argument_T.inl:
        * tao/CurrentC.cpp:
        * tao/CurrentC.h:
        * tao/DomainC.cpp:
        * tao/DomainC.h:
        * tao/Fixed_Array_Argument_T.h:
        * tao/Fixed_Array_Argument_T.inl:
        * tao/Fixed_Size_Argument_T.h:
        * tao/Fixed_Size_Argument_T.inl:
        * tao/IOP_CodecC.cpp:
        * tao/IOP_CodecC.h:
        * tao/Object_Argument_T.h:
        * tao/Object_Argument_T.inl:
        * tao/Objref_VarOut_T.cpp:
        * tao/Objref_VarOut_T.h:
        * tao/PolicyC.cpp:
        * tao/PolicyC.h:
        * tao/Policy_ForwardC.cpp:
        * tao/Policy_ForwardC.h:
        * tao/PortableInterceptorC.cpp:
        * tao/PortableInterceptorC.h:
        * tao/Sequence_T.cpp:
        * tao/Sequence_T.h:
        * tao/Sequence_T.i:
        * tao/Special_Basic_Argument_T.h:
        * tao/Special_Basic_Argument_T.inl:
        * tao/TAOC.cpp:
        * tao/TAOC.h:
        * tao/UB_String_Argument_T.h:
        * tao/UB_String_Argument_T.inl:
        * tao/Var_Array_Argument_T.h:
        * tao/Var_Array_Argument_T.inl:
        * tao/Var_Size_Argument_T.h:
        * tao/Var_Size_Argument_T.inl:
        * tao/IORInterceptor/IORInterceptorC.cpp:
        * tao/IORInterceptor/IORInterceptorC.h:
        * tao/Messaging/MessagingC.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.cpp:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.h:
        * tao/PortableServer/Default_ORTC.cpp:
        * tao/PortableServer/Default_ORTC.h:
        * tao/PortableServer/ImR_LocatorC.cpp:
        * tao/PortableServer/ImR_LocatorC.h:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/PortableServer/PortableServerC.h:
        * tao/Valuetype/Sequence_T.cpp:
        * tao/Valuetype/Sequence_T.h:
        * tao/Valuetype/Sequence_T.inl:
        * tao/Valuetype/ValueBase.cpp:
        * tao/Valuetype/ValueBase.h:
        * tao/Valuetype/ValueFactory.cpp:
        * tao/Valuetype/ValueFactory.h:
        * tao/Valuetype/Value_VarOut_T.cpp:
        * tao/Valuetype/Value_VarOut_T.h:

	  - Removed all remaining vestiges of the tao_*_life and
`	    tao_*_cast structs. The latter was not needed and the
	    former has been replace by TAO::*_Traits<T>. This
	    change includes hand-crafted and generated code.

	  - Added arg() methods to the stub side argument helper
	    template classes. These have the same return types as
	    the ones for the corresponding skeleton arg helper
	    classes, but will be used in collocated calls.

Mon Jul 14 22:37:22 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_arg_tmplinst.cpp:
        * TAO_IDL/be/be_visitor_tmplinst_cs.cpp:
        * TAO_IDL/be_include/be_visitor_arg_tmplinst.h:
        * TAO_IDL/be_include/be_visitor_tmplinst_cs.h:

	  Rearranged visitors by removing the above files and adding
	  the ones below.

        * TAO_IDL/be/be_visitor_tmplinst.cpp:
        * TAO_IDL/be/be_visitor_tmplinst/arg_tmplinst.cpp:
        * TAO_IDL/be/be_visitor_tmplinst/tmplinst.cpp:
        * TAO_IDL/be_include/be_visitor_tmplinst.h:
        * TAO_IDL/be_include/be_visitor_tmplinst/arg_tmplinst.h:
        * TAO_IDL/be_include/be_visitor_tmplinst/tmplinst.h:

	  New visitors that take over the function of the ones removed
	  above.

        * TAO_IDL/Makefile.BE:
        * TAO_IDL/TAO_IDL_BE.bor:
        * TAO_IDL/TAO_IDL_BE_DLL.dsp:
        * TAO_IDL/TAO_IDL_BE_LIB.dsp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_visitor_root.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be_include/be_decl.h:
        * TAO_IDL/be_include/be_visitor_root/root.h:

	  Updated projects and makefiles, and started moving existing
	  template instantiation code generation to the new visitors.

Sun Jul 13 14:40:35 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_visitor_root.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be_include/be_decl.h:
        * TAO_IDL/be_include/be_visitor_arg_tmplinst.h:
        * TAO_IDL/be/be_visitor_arg_tmplinst.cpp:

          Finished implementation of code generation for explicit
          template instantiation for the arg template helper classes.

        * TAO_IDL/be_include/be_visitor_tmplinst_cs.h:
        * TAO_IDL/be/be_visitor_tmplinst_cs.cpp:

          Renamed be_visitor_tmplinst* class and files and
          be_visitor_tmplinst_cs*, since we are going to have to
          generate explicit template instantiations for the skeleton-
          side arg helper classes as well.

        * TAO_IDL/Makefile.BE:
        * TAO_IDL/TAO_IDL_BE.bor:
        * TAO_IDL/TAO_IDL_BE_DLL.dsp:
        * TAO_IDL/TAO_IDL_BE_LIB.dsp:

          Update project and makefiles with the renamed files.

Sat Jul 12 18:42:40 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_visitor_arg_tmplinst.cpp:
        * TAO_IDL/be/be_visitor_tmplinst.cpp:
        * TAO_IDL/be_include/be_decl.h:
        * TAO_IDL/be_include/be_visitor_arg_tmplinst.h:
        * TAO_IDL/be_include/be_visitor_tmplinst.h:

          Finished generation of explicit template instantiations for
          argument helper template classes on the stub side.

Sat Jul 12 14:14:18 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Basic_Arguments.cpp:
        * tao/Special_Basic_Arguments.cpp:
        * tao/UB_String_Arguments.cpp:

          Added explicit template instantiations of the individual
          argument direction and return value classes for the IDL
          basic types, including unbounded (w)strings.

        * tao/Fixed_Array_Argument_T.cpp:
        * tao/Fixed_Size_Argument_T.cpp:
        * tao/Var_Array_Argument_T.inl:

          Fixed typos and made cosmetic changes.

Sat Jul 12 11:35:37 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_tmplinst.cpp:
        * TAO_IDL/be_include/be_visitor_tmplinst.h:
        * TAO_IDL/be/be_visitor_arg_tmplinst.cpp:
        * TAO_IDL/be_include/be_visitor_arg_tmplinst.h:

          New files, to generate explicit template instantiations
          for argument traits classes and individual argument helper classes.

        * TAO_IDL/TAO_IDL_BE_DLL.dsp:
        * TAO_IDL/TAO_IDL_BE_LIB.dsp:
        * TAO_IDL/TAO_IDL_BE.bor:
        * TAO_IDL/Makefile.BE:

          Added new files to projects and makefiles.

        * TAO_IDL/be/be_argument.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_operation.cpp:
        * TAO_IDL/be/be_visitor_root.cpp:
        * TAO_IDL/be/be_visitor_traits.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be_include/be_decl.h:

          Changes related to the above new files and to explicit
          template instantiation generation in general.

Fri Jul 11 08:19:27 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/BD_String_Argument_T.inl:
        * tao/Basic_Argument_T.inl:
        * tao/Fixed_Array_Argument_T.inl:
        * tao/Fixed_Size_Argument_T.inl:
        * tao/Object_Argument_T.inl:
        * tao/Special_Basic_Argument_T.inl:
        * tao/UB_String_Argument_T.inl:
        * tao/Var_Array_Argument_T.inl:
        * tao/Var_Size_Argument_T.inl:

	  New files, containing all constructors and
	  non-virtual functions.

        * tao/BD_String_Argument_T.cpp:
        * tao/BD_String_Argument_T.h:
        * tao/Basic_Argument_T.cpp:
        * tao/Basic_Argument_T.h:
        * tao/Fixed_Array_Argument_T.cpp:
        * tao/Fixed_Array_Argument_T.h:
        * tao/Fixed_Size_Argument_T.cpp:
        * tao/Fixed_Size_Argument_T.h:
        * tao/Object_Argument_T.cpp:
        * tao/Object_Argument_T.h:
        * tao/Special_Basic_Argument_T.cpp:
        * tao/Special_Basic_Argument_T.h:
        * tao/UB_String_Argument_T.cpp:
        * tao/UB_String_Argument_T.h:
        * tao/Var_Array_Argument_T.cpp:
        * tao/Var_Array_Argument_T.h:
        * tao/Var_Size_Argument_T.cpp:
        * tao/Var_Size_Argument_T.h:

	  Modified these files accordingly from the changes
	  above.

        * tao/TAO.dsp:

	  Added new files to the project.

        * tao/corba.h:

	  Removed includes of the above header files, since
	  the IDL compiler now generates the necessary 
	  includes for whatever types are used in operation
	  signatures.

Thu Jul 10 16:05:26 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Fixed_Size_Argument_T.cpp:
        * tao/Fixed_Size_Argument_T.h:
        * tao/Var_Array_Argument_T.cpp:
        * tao/Var_Array_Argument_T.h:
        * tao/Var_Size_Argument_T.cpp:

	  Fixed bugs uncovered by running Param_Test. Also moved memory
	  allocation for OUT arguments and return values of variable size
	  from the constructor to the demarshal() method. This delay will
	  allow the allocation to be skipped for collocated calls.

Thu Jul 10 09:36:44 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Any.cpp:
        * tao/Any.h:

          Added argument traits template class specialization for anys
          that are used in operations.

        * tao/Profile_Transport_Resolver.cpp:

          Commented out unused variable.

        * TAO_IDL/be/be_visitor_traits.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
        * tao/Array_VarOut_T.inl:
        * tao/BD_String_Argument_T.cpp:
        * tao/Basic_Argument_T.cpp:
        * tao/Basic_Arguments.h:
        * tao/Special_Basic_Argument_T.cpp:
        * tao/Special_Basic_Argument_T.h:
        * tao/UB_String_Argument_T.cpp:
        * tao/Var_Size_Argument_T.cpp:

          Fixed bugs uncovered by compiling Param_Test.

Wed Jul  9 14:46:25 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Profile_Transport_Resolver.cpp (TAO): Minor fix for the
	  minor version of GIOP.

Wed Jul  9 14:33:17 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Remote_Invocation.cpp (TAO): 
	* tao/Remote_Invocation.h: Added some error checking in
	  send_message (). 

	* tao/Synch_Invocation.h:
	* tao/Synch_Invocation.cpp: Changed the names of communicate in
	  twoway and oneway invcation classes as remote_oneway and
	  remote_twoway. Seems like the method communicate () in both
	  classes seem to have a problem.

	* tao/IIOP_Connector.cpp: Fixed a unused variable warning.

Wed Jul  9 12:43:37 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Synch_Invocation.cpp (TAO): Got the semantics of
	  SYNC_WITH_TRANSPORT right.

Wed Jul  9 12:14:15 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Invocation_Base.cpp (TAO): Fixed a logic problem in the loop
	  to make the invocation in the loop. 
	
Wed Jul  9 11:10:20 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_string.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_traits.cpp:
        * TAO_IDL/be/be_visitor_operation/exceptlist_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
        * TAO_IDL/be_include/be_visitor_operation/operation.h:
        * TAO_IDL/include/ast_decl.h:
        * tests/Bench/wire/client.dsp:
        * tests/Bench/wire/test.idl:
        * tests/Bench/wire/testC.cpp:
        * tests/Bench/wire/testC.h:
        * tests/Bench/wire/testC.i:
        * tests/Bench/wire/testS.cpp:
        * tests/Bench/wire/testS.h:

	  Changes to generated code, and the hand-crafted
	  example, to deal with exceptions, oneways and
	  AMI flags in the invoke() parameter list.

Tue Jul  8 22:44:44 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Bench/Bench.dsw:

          New file, neglected to check this in originally.

Tue Jul  8 20:24:06 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/operation_details.i:
	* tao/operation_details.cpp (corba_exception): 
	* tao/operation_details.h: This class will henceforth have the
	  information about the exceptions declared in the IDL for every
	  operation. This detail would be used by the ORB to find out the
	  right exception that needs to be raised if the incoming GIOP
	  message is flagged as a user defined exception. This information
	  is used by the new Invocation classes. A new method,
	  corba_exception () has been added which converts a repo id into
	  an equivalent CORBA exception

	* tao/Invocation_Base.h:
	* tao/Invocation_Base.cpp: The invoke () creates the
	  TAO_Operation_Details object with the exception list and a count
	  of the number of the exceptions specified in the IDL file.

	* tao/Synch_Invocation.h:
	* tao/Synch_Invocation.cpp: Added support for raising the right
	  type of user exceptions to the application if the message
	  received indicates the content to be of type user exception.

	* tao/UB_String_Argument_T.cpp: Fixed compile errors on win32 by
	  applying the right const qualifier.

Tue Jul  8 15:00:12 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Synch_Invocation.cpp (TAO): 
	* tao/Synch_Invocation.h: Added support for location forward. 

	* tao/Invocation_Base.h:
	* tao/Invocation_Base.cpp: Added two more parameters to the invoke
	  () call. They are required to access the exception types defined
	  in the IDL. Further added a loop around the place to handle
	  location forwards. 

	* tao/Remote_Invocation.h: Added a enum for passing the status of
	  the invocation around. 

Tue Jul  8 12:50:23 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be_include/be_codegen.h:

          Created a separate function call for the generation of file includes 
          for the stub source file, and moved the generation of arg class file
          includes there, along with the existing file include generations.

        * TAO_IDL/util/utl_global.cpp:

          Fixed initialization of the bitmasks used to modify the bit vector
          used to select ORB file includes for code generation.

Mon Jul  7 21:58:32 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tests/Bench/wire/testC.cpp:
	* tests/Bench/wire/testS.cpp:
	* tests/Bench/wire/testS.h:
	* tests/Bench/wire/testC.h:
	* tests/Bench/wire/test.idl:
	* tests/Bench/wire/test_i.h:
	* tests/Bench/wire/test_i.cpp: 
	* tests/Bench/wire/client.cpp: 
	* tests/Bench/wire/Makefile: Added a oneway operation to the
	  test. 

Mon Jul  7 21:38:01 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Any.h:
	* tao/Any.cpp: Cosmetic fix. Changed char*& in the >>= operator to
	  CORBA::Char *&.

	* tao/Basic_Arguments.h: Added a public keyword in the class
	  Arg_Traits<void>. Classes by default have all the members
	  private unlike structs which are the other way around.

	* tao/Synch_Invocation.h: Fixed typos.

	* tao/UB_String_Argument_T.h: Fixed a typo in the doxygen
	  comments. 
	
	* tao/UB_String_Argument_T.cpp (interceptor_replace): Fixed a
	  bunch of compile errors with g++ 3.3 which required a explicit
	  const qualifier to pick up the right extraction operator. 

Mon Jul  7 17:53:06 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_argument.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_operation.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_include/be_decl.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Separated the generation of file includes in the stub header file
          into its own function call, and added a mechanism for generating
          includes of the ORB argument template classes based on what has
          been seen in the IDL file's operation declarations.

Mon Jul  7 14:39:48 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Argument.cpp:
        * tao/Argument.h:

          Added virtual destructor to argument base class.

Mon Jul  7 14:00:01 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Var_Array_Argument_T.cpp:
        * tao/Var_Array_Argument_T.h:

          Added template parameter required by use of TAO::Array_Traits<>.

Mon Jul  7 06:03:26 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Array_VarOut_T.inl:
	* tao/BD_String_Argument_T.cpp:
	* tao/UB_String_Argument_T.cpp: Fixed compile errors with g++
	  3.3. There is one more error which is a show-stopper.

Mon Jul  7 04:55:40 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/IIOP_Transport.cpp:
	* tao/Invocation_Base.h:
	* tao/Makefile.tao:
	* tao/Profile_Transport_Resolver.cpp:
	* tao/Profile_Transport_Resolver.h:
	* tao/Remote_Invocation.cpp:
	* tao/Remote_Invocation.h:
	* tao/Synch_Invocation.cpp: Fixed compile errors with exceptions=0. 

Sun Jul 06 11:00:55 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tests/Bench/wire/testC.cpp: Updated to use the Invocation
	  classes.  

Sat Jul 05 18:38:58 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Synch_Invocation.cpp (TAO): 
	* tao/Synch_Invocation.h: Added support for oneways.

Sat Jul 05 16:46:24 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	
        * tao/Array_VarOut_T.inl: Fixed a compile error on Win32 which
	  probably resulted from the merge.
	 
	* tao/GIOP_Message_Base.cpp:
	* tao/GIOP_Message_Base.h: Moved the OutpoutCDR to this
	  class. Provided an accessor to access the CDR stream. The init
	  () method now initializes CDR stream's GIOP version numbers. 
	
	* tao/GIOP_Message_Lite.cpp:
	* tao/GIOP_Message_Lite.h:  Similar changes as GIOP for GIOP
	  lite. 

	* tao/Transport_Connector.cpp:
	* tao/Transport_Connector.h: Added two new methods,
	  make_connection () and connect (). These two methods perform
	  similar tasks as that of other functions but use a
	  Profile_Transport_Resolver class instead of the Invocation
	  class. These methods are required for us to deprecate the GIOP
	  classes. 
	
	* tao/IIOP_Connector.cpp:
	* tao/IIOP_Connector.h: Provided concrete implementation for the
	  make_connection () method.

	* tao/IIOP_Transport.cpp: #if 0'ed the GIOP lite stuff. Looks like
	  it is a waste in TAO. We can slowly start deprecating it.

	* tao/Invocation_Base.cpp:
	* tao/Invocation_Base.h: New class that will serve as a bridge
	  class for the IDL compiler. The class is intentionally kept
	  simple so that the IDL the exposed code to the application will
	  not take much time to compile. The complexity is hidden off
	  elsewhere which will be within the ORB. 
	
	* tao/Invocation_Endpoint_Selectors.cpp:
	* tao/Invocation_Endpoint_Selectors.h: Added a new method
	  select_endpoint () which uses the resolver class. 
	
	* tao/ORB_Core.cpp: 
	
	* tao/Pluggable_Messaging.h: Added an accessor for the getting the
	  outbound CDR streams. 
	  
	* tao/Synch_Invocation.cpp:
	* tao/Synch_Invocation.h: Concrete implementations for synchronous
	  twoway and oneway operations. We have preliminary support for
	  simple twoway operations. 

	* tao/TAO.dsp: Added the new files into the project file. 
	
	* tao/Transport.h: Made the method messaging_object () to be
	  publically accessible. 

	* tao/operation_details.h: 
	* tao/target_specification.h: Cosmetic fixes. 
	
	* tao/Profile_Transport_Resolver.cpp: 
	* tao/Profile_Transport_Resolver.h: Simple class that does 

	  - selects the profile and the endpoint within the profile on
	    which the invocation is to be made. 

	  - finds out a connection from the transport cache if there is
	    a free one available or creates a new connection if needed. 

	* tao/Remote_Invocation.cpp:
	* tao/Remote_Invocation.h: Base class that encapsulates a bunch of
	  common invocation code. I am still not sure whether this should
	  be used as a base class or a helper utility class. Using it as a
	  base class creates a deeply coupled structure. 

Wed Jul  2 06:05:09 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Connection_Resolver.cpp:
	* tao/Connection_Resolver.h:
	* tao/Default_Endpoint_Selector_Factory.cpp:
	* tao/Default_Endpoint_Selector_Factory.h:
	* tao/Endpoint_Selector_Factory.h:
	* tao/GIOP_Message_Base.cpp:
	* tao/IIOP_Connector.cpp:
	* tao/IIOP_Connector.h:
	* tao/Invocation_Base.cpp:
	* tao/Invocation_Base.h:
	* tao/Invocation_Endpoint_Selectors.cpp:
	* tao/Invocation_Endpoint_Selectors.h:
	* tao/Transport_Connector.cpp:
	* tao/Transport_Connector.h: Temporary checkto move things to my
	  laptop. 
	  

Tue Jul  1 07:08:21 2003  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* Merged with the main trunk and created a branch
	  refactor-stage_4. 

Fri Jun 27 14:42:02 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_traits.cpp:

          Changed logic for generation of declarations for Objref_Traits,
          Value_Traits, and Array_Traits specializations. These may
          not need to be generated in all cases.

        * tao/Arg_Traits_T.h:

          Cosmetic changes.

        * tao/Basic_Arguments.cpp:

          Added missing explicit template instantiation.

        * tao/TAO.dsp:

          Added missing header file to project.

Fri Jun 27 11:16:04 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_traits.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:

          Replace 'template<>' with 'ACE_TEMPLATE_SPECIALIZATION'
          in declarations of specialized template classes in
          generated stub header files. Also removed 'template<>'
          from the specialization implementations in the stub
          source file. These changes please a larger number of
          compilers.

        * tao/PolicyC.cpp:
        * tao/Policy_ForwardC.h:

          Made changes corresponding to those above for the one
          interface in TAO that is forward declared in one .pidl
          files and fully defined in another - CORBA::Policy.

        * tao/Object_Argument_T.cpp:

          Removed #if 0/#endif pair that was inadvertently checked
          in.

        * tao/Sequence_T.h:

          Added include file need by gcc/cygwin.

Thu Jun 26 17:13:39 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_array/array_cs.cpp:
        * tao/Array_VarOut_T.cpp:
        * tao/Array_VarOut_T.h:
        * tao/Array_VarOut_T.inl:

          Added Array_Traits to Array_VarOut_T.h. Even though
          only the slice type is used in this traits template,
          I had to have the array type for a parameter as well,
          to distinguish among more than one array with the 
          same element type. So this parameter had to be added
          to the _var and _out classes, and changed in generated
          code.

        * TAO_IDL/be_include/be_typedef.h:
        * TAO_IDL/be/be_typedef.cpp:

          Added overrides for the seen_in_* and used_in_*
          methods to propagate these flags to the underlying
          type.

        * TAO_IDL/be/be_visitor_traits.cpp:
        * TAO_IDL/be_include/be_visitor_traits.h:

          Completed the traits generation methods.

        * tao/BD_String_Argument_T.cpp:
        * tao/BD_String_Argument_T.h:
        * tao/Fixed_Array_Argument_T.cpp:
        * tao/Fixed_Array_Argument_T.h:
        * tao/Object_Argument_T.h:
        * tao/Var_Array_Argument_T.cpp:
        * tao/Var_Array_Argument_T.h:

          Minor changes.

        * tao/corba.h:

          Added the argument helper files to corba.h.

Wed Jun 25 19:01:33 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_include/be_visitor_traits.h:
        * TAO_IDL/be/be_visitor_traits.cpp:

          New files, a visitor that generates specialized traits template
          classes in a separate pass over the AST.

        * TAO_IDL/Makefile.BE:
        * TAO_IDL/TAO_IDL_BE.bor:
        * TAO_IDL/TAO_IDL_BE_DLL.dsp:
        * TAO_IDL/be/be_argument.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_interface_fwd.cpp:
        * TAO_IDL/be/be_operation.cpp:
        * TAO_IDL/be/be_type.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_visitor_root.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be_include/be_decl.h:
        * TAO_IDL/be_include/be_interface_fwd.h:
        * TAO_IDL/be_include/be_type.h:
        * tao/Objref_VarOut_T.cpp:
        * tao/Objref_VarOut_T.h:
        * tao/PolicyC.cpp:
        * tao/Policy_ForwardC.h:
        * tao/Sequence_T.cpp:
        * tao/Sequence_T.h:
        * tao/Valuetype/Sequence_T.inl:
        * tao/Valuetype/Value_VarOut_T.cpp:
        * tao/Valuetype/Value_VarOut_T.h:

          Partial support for traits code generation, along with
          corresponding changes to ORB code, some of it temporary
	  until the hand-crafted files can be regenerated. These
	  changes add code generation for interface and valuetype
	  traits, and  modify sequence code to use some of these
	  traits.

          Also removed the _upcast and _downcast methods from
          bounded and unbounded versions of object sequences.
          These methods never seem to be called.

Wed Jun 25 08:36:06 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Sequence_T.cpp:
        * tao/Sequence_T.i:

          Added the TAO::Object_Cast<> template struct that contains static
          wrappers for the _narrow() and upcast() methods for interfaces.
          This template is used instead of the existing tao_*_cast structs
          in generated code by sequences of interfaces. Specializations of
          this template will be added to generated code, however, to deal 
          with the case when an undefined forward declared interface is
          used in a sequence.

        * tao/PolicyC.cpp:
        * tao/Policy_ForwardC.h:

          Hand-crafted additions of TAO::Objref_Traits<> and 
          TAO::Object_Cast<> for CORBA::Policy, since it is forward declared
          in Policy_Forward.pidl and defined in Policy.pidl.

Tue Jun 24 18:12:24 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Arg_Traits_T.h:

          Cosmetic changes.

        * tao/Object.cpp:
        * tao/Object.h:
        * tao/Typecode.cpp:
        * tao/Typecode.h:

          Changed these predefined pseudo objects to use the
          specialization approach for their argument traits,
          instead of the typedef approach, as mentioned in

          Tue Jun 24 13:48:20 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Objref_VarOut_T.cpp:
        * tao/Objref_VarOut_T.h:

          Added template base class for the interface traits - the static
          methods used by the _var, _out and sequence classes. At the
          moment, the interface _var and _out template classes are
          using these template-wrapped static methods. The base class is
          specialized in generated code. When the existing hand-crafted
          files are regenerated, the template implementations in
          Objref_VarOut_T.cpp can be removed, as well as the T_life
          parameter from the _var and _out template classes.

        * tao/Sequence_T.cpp:
        * tao/Sequence_T.h:

          Corresponding changes for the T_cast parameter, passed to 
          sequence of objects. This struct parameter wraps methods used
          in object sequences to narrow and widen interfaces.

Tue Jun 24 13:48:20 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Arg_Traits_T.h:

          Added this file to the repository again, decided to go back to
          the template specialization approach to specific arg traits
          instead of the typedef approach.

        * tao/Basic_Arguments.cpp:
        * tao/Basic_Arguments.h:
        * tao/Special_Basic_Arguments.cpp:
        * tao/Special_Basic_Arguments.h:
        * tao/UB_String_Arguments.cpp:
        * tao/UB_String_Arguments.h:

          Change to support the above change in approach.

        * tao/Objref_VarOut_T.cpp:
        * tao/Objref_VarOut_T.h:

          Made a start on templatizing helper structs of interface
          traits that have been generated by the IDL compler up to now.

        * tests/Bench/wire/testC.cpp:
        * tests/Bench/wire/testS.cpp:

          Changed test code to reflect the change in approach to
          specific arg traits mentioned above.

Mon Jun 23 16:50:31 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Cleanup_Func_Registry.h:

          Added #include that was added in the main trunk, to avoid a
          build errorin this branch.

        * tao/Fixed_Array_Argument_T.cpp:
        * tao/Fixed_Array_Argument_T.h:
        * tao/Var_Array_Argument_T.cpp:
        * tao/Var_Array_Argument_T.h:

          New files, for handling array arguments.

        * tao/TAO.dsp:
        * tao/Makefile.tao:

          Added new files to project and makefile.

        * tao/Var_Size_Argument_T.cpp:

          Changed demarshaling and Any extraction methods to call
          .inout() on the _var member instead of .out(). The _var's
          pointer has already been allocated but not initialized,
          and calling .out() will destroy it, expecting a new
          allocation, which is not the intended behavior.

Sun Jun 22 000:31:20 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/BD_String_Argument_T.cpp:
        * tao/BD_String_Argument_T.h:
        * tao/UB_String_Argument_T.cpp:
        * tao/UB_String_Argument_T.h:

          Removed unnecessary template parameter.

        * tao/Var_Size_Argument_T.cpp:
        * tao/Var_Size_Argument_T.h:
        * tao/Fixed_Size_Argument_T.cpp:
        * tao/Fixed_Size_Argument_T.h:
        * tao/Makefile.tao:
        * tao/TAO.dsp:

          Added new files and classes for fixed and variable size structs,
          unions, and sequences.

Fri Jun 20 17:17:57 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Basic_Argument_T.h:
        * tao/Basic_Arguments.h:
        * tao/UB_String_Argument_T.h:
        * tao/UB_String_Arguments.h:

          Made sure at least one significant included file appears before
          the '#pragma once' directive.

        * tao/Makefile.bor:
        * tao/Makefile.tao:

          Added new files to the makefiles.

Fri Jun 20 16:09:52 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Argument.cpp:

          New file. Placing TAO::Argument's method implementations in
          the header file was causing circular dependencies.

        * tao/TAO.dsp:

          Added new file to project.

        * tao/Argument.h:
        * tao/Object_Argument_T.cpp:
        * tao/Object_Argument_T.h:
        * tao/Special_Basic_Arguments.h:

          Changes to file includes.

        * tao/Object.cpp:
        * tao/Object.h:
        * tao/Typecode.cpp:
        * tao/Typecode.h:

          Added typedefs for TypeCode_Arg_Traits and Object_Arg_Traits,
          to be used in generated code.

        * tao/Policy_ForwardC.cpp:

          Corrected typo in #pragma instantiation.

Fri Jun 20 13:12:35 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Arg_Traits_T.h:

          Eliminated the need for the TAO::Arg_Traits_T<> class
          and removed this file.

        * tao/BD_String_Argument_T.h:
        * tao/Basic_Arguments.cpp:
        * tao/Basic_Arguments.h:
        * tao/Special_Basic_Arguments.cpp:
        * tao/Special_Basic_Arguments.h:
        * tao/UB_String_Argument_T.cpp:
        * tao/UB_String_Arguments.cpp:
        * tao/UB_String_Arguments.h:

          Replaced TAO::Arg_Traits_T<> subclass of the above
          basic arguments type classes with typedefs whose
          names can be easily generated by the IDL compiler.

        * tao/Object_Argument_T.cpp:
        * tao/Object_Argument_T.h:

          New files, for interface and pseudo object arguments.

        * tests/Bench/wire/testC.cpp:
        * tests/Bench/wire/testS.cpp:

          Changed these hand crafted files to use the typedefs
          mentioned above.

Thu Jun 19 22:24:47 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/BD_String_Argument_T.cpp:
        * tao/BD_String_Argument_T.h:
        * tao/Basic_Argument_T.cpp:
        * tao/Basic_Argument_T.h:
        * tao/Special_Basic_Argument_T.cpp:
        * tao/Special_Basic_Argument_T.h:

	  Updated the interface of the rest of the existing template
	  classes for IDL argument types.

Thu Jun 19 20:39:25 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/BD_String_Argument_T.cpp:
        * tao/BD_String_Argument_T.h:

          Updates to make these files correspond with the 
          unbounded version.

Thu Jun 19 17:31:11 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Bench/wire/client.cpp:
        * tests/Bench/wire/client.dsp:
        * tests/Bench/wire/server.cpp:
        * tests/Bench/wire/server.dsp:
        * tests/Bench/wire/test.idl:
        * tests/Bench/wire/testC.cpp:
        * tests/Bench/wire/testC.h:
        * tests/Bench/wire/testC.i:
        * tests/Bench/wire/testS.cpp:
        * tests/Bench/wire/testS.h:
        * tests/Bench/wire/test_i.cpp:
        * tests/Bench/wire/test_i.h:

	  New files, handcrafted example for testing changes in this
	  branch. 

        * tao/Argument.h:
        * tao/BD_String_Argument_T.h:
        * tao/Basic_Argument_T.cpp:
        * tao/Basic_Argument_T.h:
        * tao/Basic_Arguments.cpp:
        * tao/Basic_Arguments.h:
        * tao/Special_Basic_Argument_T.cpp:
        * tao/Special_Basic_Argument_T.h:
        * tao/UB_String_Argument_T.cpp:
        * tao/UB_String_Argument_T.h:
        * tao/UB_String_Arguments.h:

          Changes to the new TAO template args/traits interface.

        * tao/CORBA_String.h:
        * tao/CORBA_String.inl:

	  Added ptr() method to (w)string _var classes, to get a return
	  value of T * without giving up ownership of the underlying
	  pointer. 

Wed Jun 18 22:57:37 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/BD_String_Argument_T.cpp:
        * tao/BD_String_Argument_T.h:
	* tao/TAO.dsp:

	  New files, for bounded string and wstring arguments.

        * tao/Arg_Traits_T.h:
        * tao/UB_String_Argument_T.h:
        * tao/UB_String_Arguments.cpp:

	  Fixed mistakes in comments.

Wed Jun 18 19:09:55 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Arg_Traits_T.h:

          Renamed Traits_T.h as this.

        * tao/Argument.h:
        * tao/Basic_Argument_T.cpp:
        * tao/Basic_Argument_T.h:
        * tao/Basic_Arguments.cpp:
        * tao/Basic_Arguments.h:
        * tao/Special_Basic_Argument_T.cpp:
        * tao/Special_Basic_Argument_T.h:
        * tao/Special_Basic_Arguments.cpp:
        * tao/Special_Basic_Arguments.h:

          Removed string argument name member - it's never used.

        * tao/Traits_T.h:

          Renamed this as Arg_Traits_T.h.

        * tao/UB_String_Argument_T.cpp:
        * tao/UB_String_Argument_T.h:
        * tao/UB_String_Arguments.cpp:
        * tao/UB_String_Arguments.h:
        * tao/TAO.dsp:

          New files, for unbounded string and wstring arguments.

Tue Jun 17 18:27:44 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Argument.h:
        * tao/Basic_Argument_T.cpp:
        * tao/Basic_Argument_T.h:
        * tao/TAO.dsp:

          Changes to existing files added to this branch.

        * tao/Basic_Arguments.cpp:
        * tao/Basic_Arguments.h:
        * tao/Special_Basic_Argument_T.cpp:
        * tao/Special_Basic_Argument_T.h:
        * tao/Special_Basic_Arguments.cpp:
        * tao/Special_Basic_Arguments.h:
        * tao/Traits_T.h:

          New files, completing support for the basic IDL argument
          types.

Fri Jun 13 18:20:19 2003  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Argument.h:
        * tao/Basic_Argument_T.cpp:
        * tao/Basic_Argument_T.h:

          New files, a start on refactoring arg handling during invocations
          and upcalls.

        * tao/TAO.dsp:

          Added new files to project.

