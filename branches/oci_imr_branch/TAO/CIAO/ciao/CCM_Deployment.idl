// $Id$

/**
 * @@ Compile this file with:
 *
 *     tao_idl -I ../.. \
 *          -Wb,export_macro=CIAO_Export \
 *          -Wb,export_include=CIAO_export.h \
 *          -Wb,pre_include="ace/pre.h" \
 *          -Wb,post_include="ace/post.h" \
 *          CCM_Deployment.idl
 */

//#define CIAO_HAS_IMPORT_KEYWORD

#if !defined (CCM_DEPLOYMENT_IDL)
#define CCM_DEPLOYMENT_IDL

#include "CCM_Component.idl"

// *************** Packaging and Deployment ***************

module Components
{
  typeprefix Components "omg.org";

  module Deployment
  {
    typedef string UUID;
    typedef string Location;

    enum AssemblyState
    {
      INACTIVE,
      INSERVICE
    };

    exception UnknownImplId {};
    exception InvalidLocation {};
    exception InstallationFailure
    {
      FailureReason reason;
    };
    exception InvalidAssembly {};

    interface ComponentInstallation
    {
      void install(in UUID implUUID,
                   in Location component_loc)
        raises (InvalidLocation,
                InstallationFailure);

      void replace(in UUID implUUID,
                   in Location component_loc)
        raises (InvalidLocation,
                InstallationFailure);

      void remove(in UUID implUUID)
        raises (UnknownImplId,
                RemoveFailure);

      Location get_implementation (in UUID implUUID)
        raises (UnknownImplId,
                InstallationFailure);
    };

    interface Assembly
    {
      void build()
        raises (CreateFailure);

      void tear_down()
        raises (RemoveFailure);

      AssemblyState get_state();
    };

    interface AssemblyFactory
    {
      Cookie create_assembly (in Location assembly_loc)
        raises (InvalidLocation,
                CreateFailure);

      Assembly lookup(in Cookie c)
        raises (InvalidAssembly);

      void destroy(in Cookie c)
        raises (InvalidAssembly,
                RemoveFailure);
    };

    interface ComponentServer;  // Forward decl.
    typedef sequence<ComponentServer> ComponentServers;

    interface ServerActivator
    {
      ComponentServer create_component_server (in ConfigValues config)
        raises (CreateFailure,
                InvalidConfiguration);

      void remove_component_server (in ComponentServer server)
        raises (RemoveFailure);

      ComponentServers get_component_servers ();
    };

    interface Container;        // Forward decl.
    typedef sequence<Container> Containers;

    interface ComponentServer
    {
      readonly attribute ConfigValues configuration;

      ServerActivator get_server_activator ();
      Container create_container (in ConfigValues config)
        raises (CreateFailure,
                InvalidConfiguration);

      void remove_container (in Container cref)
        raises (RemoveFailure);

      Containers get_containers ();

      void remove ()
        raises (RemoveFailure);
    };

    exception ImplEntryPointNotFound {};

    interface Container
    {
      readonly attribute ConfigValues configuration;

      ComponentServer get_component_server ();

      CCMHome install_home (in UUID id,
                            in string entrypt,
                            in ConfigValues config)
        raises (UnknownImplId,
                ImplEntryPointNotFound,
                InstallationFailure,
                InvalidConfiguration);

      void remove_home (in CCMHome href)
        raises (RemoveFailure);

      CCMHomes get_homes ();
      void remove ()
        raises (RemoveFailure);

    };

  };
};
#endif /* CCM_DEPLOYMENT_IDL */
