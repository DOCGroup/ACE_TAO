// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:154

#ifndef _TAO_IDL_MESSAGINGC_H_
#define _TAO_IDL_MESSAGINGC_H_

#include /**/ "ace/pre.h"


#include "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#ifndef TAO_MESSAGING_SAFE_INCLUDE
#error "You should not include MessagingC.h directly, use Messaging.h"
#endif /* !TAO_MESSAGING_SAFE_INCLUDE */

#include "messaging_export.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Environment.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"

#include "tao/Messaging/Messaging_SyncScope_PolicyC.h"
#include "tao/Messaging/Messaging_RT_PolicyC.h"
#include "tao/Messaging/Messaging_No_ImplC.h"
#include "tao/Messaging/PollableC.h"
#include "tao/Messaging/ExceptionHolderC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Messaging_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// be\be_visitor_root/root_ch.cpp:62

namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}

// TAO_IDL - Generated from
// be\be_visitor_module/module_ch.cpp:49

namespace Messaging
{

  // TAO_IDL - Generated from
  // be\be_interface.cpp:646

#if !defined (_MESSAGING_REPLYHANDLER__VAR_OUT_CH_)
#define _MESSAGING_REPLYHANDLER__VAR_OUT_CH_

  class ReplyHandler;
  typedef ReplyHandler *ReplyHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        ReplyHandler
      >
    ReplyHandler_var;

  typedef
    TAO_Objref_Out_T<
        ReplyHandler
      >
    ReplyHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_MESSAGING_REPLYHANDLER_CH_)
#define _MESSAGING_REPLYHANDLER_CH_

  class TAO_Messaging_Export ReplyHandler
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<ReplyHandler>;
    typedef ReplyHandler_ptr _ptr_type;
    typedef ReplyHandler_var _var_type;

    // The static operations.
    static ReplyHandler_ptr _duplicate (ReplyHandler_ptr obj);

    static void _tao_release (ReplyHandler_ptr obj);

    static ReplyHandler_ptr _narrow (
        ::CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ReplyHandler_ptr _unchecked_narrow (
        ::CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static ReplyHandler_ptr _nil (void)
    {
      return static_cast<ReplyHandler_ptr> (0);
    }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be\be_visitor_interface/interface_ch.cpp:210

    virtual ::CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_ReplyHandler_Proxy_Broker_;

  protected:
    // Concrete interface only.
    ReplyHandler (void);

    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void Messaging_ReplyHandler_setup_collocation (void);

    // Concrete non-local interface only.
    ReplyHandler (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0
      );

    // Non-local interface only.
    ReplyHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = 0,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0
      );

    virtual ~ReplyHandler (void);

  private:
    // Private and unimplemented for concrete interfaces.
    ReplyHandler (const ReplyHandler &);

    void operator= (const ReplyHandler &);
  };

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be\be_visitor_module/module_ch.cpp:78

} // module Messaging

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// be\be_visitor_root/root.cpp:139

extern TAO_Messaging_Export
TAO::Collocation_Proxy_Broker *
(*Messaging__TAO_ReplyHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// be\be_visitor_traits.cpp:61

// Traits specializations.
namespace TAO
{

#if !defined (_MESSAGING_REPLYHANDLER__TRAITS_)
#define _MESSAGING_REPLYHANDLER__TRAITS_

  template<>
  struct TAO_Messaging_Export Objref_Traits< ::Messaging::ReplyHandler>
  {
    static ::Messaging::ReplyHandler_ptr duplicate (
        ::Messaging::ReplyHandler_ptr
      );
    static void release (
        ::Messaging::ReplyHandler_ptr
      );
    static ::Messaging::ReplyHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        ::Messaging::ReplyHandler_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}

// TAO_IDL - Generated from
// be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_Messaging_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Messaging::ReplyHandler_ptr );
TAO_Messaging_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, Messaging::ReplyHandler_ptr &);

// TAO_IDL - Generated from
// be\be_codegen.cpp:1040

TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "MessagingC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */


