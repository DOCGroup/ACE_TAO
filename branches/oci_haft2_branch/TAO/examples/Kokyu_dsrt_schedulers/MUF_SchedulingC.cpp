// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:351


#include "MUF_SchedulingC.h"
#include "tao/Stub.h"
#include "tao/ORB_Core.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo_i.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */


#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "MUF_SchedulingC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_MUF_Scheduling_SchedulingParameter[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x4d55465f), 
  ACE_NTOHL (0x53636865), 
  ACE_NTOHL (0x64756c69), 
  ACE_NTOHL (0x6e672f53), 
  ACE_NTOHL (0x63686564), 
  ACE_NTOHL (0x756c696e), 
  ACE_NTOHL (0x67506172), 
  ACE_NTOHL (0x616d6574), 
  ACE_NTOHL (0x65723a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:MUF_Scheduling/SchedulingParameter:1.0
    20,
  ACE_NTOHL (0x53636865), 
  ACE_NTOHL (0x64756c69), 
  ACE_NTOHL (0x6e675061), 
  ACE_NTOHL (0x72616d65), 
  ACE_NTOHL (0x74657200),  // name = SchedulingParameter
  3, // member count
    9,
  ACE_NTOHL (0x64656164), 
  ACE_NTOHL (0x6c696e65), 
  ACE_NTOHL (0x0),  // name = deadline
    CORBA::tk_alias, // typecode kind for typedefs
  56, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    31,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x54696d65), 
    ACE_NTOHL (0x42617365), 
    ACE_NTOHL (0x2f54696d), 
    ACE_NTOHL (0x65543a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/TimeBase/TimeT:1.0
        6,
    ACE_NTOHL (0x54696d65), 
    ACE_NTOHL (0x54000000),  // name = TimeT
        CORBA::tk_ulonglong,


  33,
  ACE_NTOHL (0x65737469), 
  ACE_NTOHL (0x6d617465), 
  ACE_NTOHL (0x645f696e), 
  ACE_NTOHL (0x69746961), 
  ACE_NTOHL (0x6c5f6578), 
  ACE_NTOHL (0x65637574), 
  ACE_NTOHL (0x696f6e5f), 
  ACE_NTOHL (0x74696d65), 
  ACE_NTOHL (0x0),  // name = estimated_initial_execution_time
    CORBA::tk_alias, // typecode kind for typedefs
  56, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    31,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x54696d65), 
    ACE_NTOHL (0x42617365), 
    ACE_NTOHL (0x2f54696d), 
    ACE_NTOHL (0x65543a31), 
    ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/TimeBase/TimeT:1.0
        6,
    ACE_NTOHL (0x54696d65), 
    ACE_NTOHL (0x54000000),  // name = TimeT
        CORBA::tk_ulonglong,


  12,
  ACE_NTOHL (0x63726974), 
  ACE_NTOHL (0x6963616c), 
  ACE_NTOHL (0x69747900),  // name = criticality
    CORBA::tk_long,

};

static CORBA::TypeCode _tc_TAO_tc_MUF_Scheduling_SchedulingParameter (
    CORBA::tk_struct,
    sizeof (_oc_MUF_Scheduling_SchedulingParameter),
    (char *) &_oc_MUF_Scheduling_SchedulingParameter,
    0,
    sizeof (MUF_Scheduling::SchedulingParameter)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (MUF_Scheduling)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_SchedulingParameter,
    &_tc_TAO_tc_MUF_Scheduling_SchedulingParameter
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void MUF_Scheduling::SchedulingParameter::_tao_any_destructor (void *_tao_void_pointer)
{
  SchedulingParameter *tmp = ACE_static_cast (SchedulingParameter*, _tao_void_pointer);
  delete tmp;
}

// TAO_IDL - Generated from
// be/be_type.cpp:297

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

template class
  TAO_Fixed_Var_T<
      MUF_Scheduling::SchedulingParameter
    >;

template class TAO_Var_Base_T<
    MUF_Scheduling::SchedulingParameter
  >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
  TAO_Fixed_Var_T< \
      MUF_Scheduling::SchedulingParameter \
    >

#pragma instantiate TAO_Var_Base_T<
    MUF_Scheduling::SchedulingParameter
  >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:63

int MUF_Scheduling::SchedulingParameterPolicy::_tao_class_id = 0;

MUF_Scheduling::SchedulingParameterPolicy_ptr
MUF_Scheduling::tao_SchedulingParameterPolicy_life::tao_duplicate (
    SchedulingParameterPolicy_ptr p
  )
{
  return SchedulingParameterPolicy::_duplicate (p);
}

void
MUF_Scheduling::tao_SchedulingParameterPolicy_life::tao_release (
    SchedulingParameterPolicy_ptr p
  )
{
  CORBA::release (p);
}

MUF_Scheduling::SchedulingParameterPolicy_ptr
MUF_Scheduling::tao_SchedulingParameterPolicy_life::tao_nil (
    void
  )
{
  return SchedulingParameterPolicy::_nil ();
}

CORBA::Boolean
MUF_Scheduling::tao_SchedulingParameterPolicy_life::tao_marshal (
    SchedulingParameterPolicy_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

MUF_Scheduling::SchedulingParameterPolicy_ptr
MUF_Scheduling::tao_SchedulingParameterPolicy_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return SchedulingParameterPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
MUF_Scheduling::tao_SchedulingParameterPolicy_cast::tao_upcast (
    void *src
  )
{
  SchedulingParameterPolicy **tmp =
    ACE_static_cast (SchedulingParameterPolicy **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        MUF_Scheduling::SchedulingParameterPolicy,
        MUF_Scheduling::tao_SchedulingParameterPolicy_life
      >;
  template class
    TAO_Objref_Out_T<
        MUF_Scheduling::SchedulingParameterPolicy,
        MUF_Scheduling::tao_SchedulingParameterPolicy_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        MUF_Scheduling::SchedulingParameterPolicy, \
        MUF_Scheduling::tao_SchedulingParameterPolicy_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        MUF_Scheduling::SchedulingParameterPolicy, \
        MUF_Scheduling::tao_SchedulingParameterPolicy_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_cs.cpp:245

MUF_Scheduling::SchedulingParameterPolicy::SchedulingParameterPolicy (void)
{}

MUF_Scheduling::SchedulingParameterPolicy::~SchedulingParameterPolicy (void)
{}

void 
MUF_Scheduling::SchedulingParameterPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  SchedulingParameterPolicy *tmp = ACE_static_cast (SchedulingParameterPolicy *, _tao_void_pointer);
  CORBA::release (tmp);
}

MUF_Scheduling::SchedulingParameterPolicy_ptr
MUF_Scheduling::SchedulingParameterPolicy::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return SchedulingParameterPolicy::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

MUF_Scheduling::SchedulingParameterPolicy_ptr 
MUF_Scheduling::SchedulingParameterPolicy::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return SchedulingParameterPolicy::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          SchedulingParameterPolicy_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &SchedulingParameterPolicy::_tao_class_id
                )
            )
        );
}

MUF_Scheduling::SchedulingParameterPolicy_ptr
MUF_Scheduling::SchedulingParameterPolicy::_duplicate (SchedulingParameterPolicy_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *MUF_Scheduling::SchedulingParameterPolicy::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &::CORBA::Policy::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                CORBA::Policy_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::MUF_Scheduling, SchedulingParameterPolicy)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* MUF_Scheduling::SchedulingParameterPolicy::_interface_repository_id (void) const
{
  return "IDL:MUF_Scheduling/SchedulingParameterPolicy:1.0";
}

CORBA::Boolean
MUF_Scheduling::SchedulingParameterPolicy::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_MUF_Scheduling_SchedulingParameterPolicy[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  49,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x4d55465f), 
  ACE_NTOHL (0x53636865), 
  ACE_NTOHL (0x64756c69), 
  ACE_NTOHL (0x6e672f53), 
  ACE_NTOHL (0x63686564), 
  ACE_NTOHL (0x756c696e), 
  ACE_NTOHL (0x67506172), 
  ACE_NTOHL (0x616d6574), 
  ACE_NTOHL (0x6572506f), 
  ACE_NTOHL (0x6c696379), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:MUF_Scheduling/SchedulingParameterPolicy:1.0
    26,
  ACE_NTOHL (0x53636865), 
  ACE_NTOHL (0x64756c69), 
  ACE_NTOHL (0x6e675061), 
  ACE_NTOHL (0x72616d65), 
  ACE_NTOHL (0x74657250), 
  ACE_NTOHL (0x6f6c6963), 
  ACE_NTOHL (0x79000000),  // name = SchedulingParameterPolicy
  };

static CORBA::TypeCode _tc_TAO_tc_MUF_Scheduling_SchedulingParameterPolicy (
    CORBA::tk_objref,
    sizeof (_oc_MUF_Scheduling_SchedulingParameterPolicy),
    (char *) &_oc_MUF_Scheduling_SchedulingParameterPolicy,
    0,
    sizeof (MUF_Scheduling::SchedulingParameterPolicy)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (MUF_Scheduling)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_SchedulingParameterPolicy,
    &_tc_TAO_tc_MUF_Scheduling_SchedulingParameterPolicy
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:63

int MUF_Scheduling::Scheduler::_tao_class_id = 0;

MUF_Scheduling::Scheduler_ptr
MUF_Scheduling::tao_Scheduler_life::tao_duplicate (
    Scheduler_ptr p
  )
{
  return Scheduler::_duplicate (p);
}

void
MUF_Scheduling::tao_Scheduler_life::tao_release (
    Scheduler_ptr p
  )
{
  CORBA::release (p);
}

MUF_Scheduling::Scheduler_ptr
MUF_Scheduling::tao_Scheduler_life::tao_nil (
    void
  )
{
  return Scheduler::_nil ();
}

CORBA::Boolean
MUF_Scheduling::tao_Scheduler_life::tao_marshal (
    Scheduler_ptr p,
    TAO_OutputCDR &cdr
  )
{
  return p->marshal (cdr);
}

MUF_Scheduling::Scheduler_ptr
MUF_Scheduling::tao_Scheduler_cast::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return Scheduler::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
MUF_Scheduling::tao_Scheduler_cast::tao_upcast (
    void *src
  )
{
  Scheduler **tmp =
    ACE_static_cast (Scheduler **, src);
  return *tmp;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)
  template class
    TAO_Objref_Var_T<
        MUF_Scheduling::Scheduler,
        MUF_Scheduling::tao_Scheduler_life
      >;
  template class
    TAO_Objref_Out_T<
        MUF_Scheduling::Scheduler,
        MUF_Scheduling::tao_Scheduler_life
      >;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate \
    TAO_Objref_Var_T< \
        MUF_Scheduling::Scheduler, \
        MUF_Scheduling::tao_Scheduler_life \
      >
# pragma instantiate \
    TAO_Objref_Out_T< \
        MUF_Scheduling::Scheduler, \
        MUF_Scheduling::tao_Scheduler_life \
      >
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_cs.cpp:245

MUF_Scheduling::Scheduler::Scheduler (void)
{}

MUF_Scheduling::Scheduler::~Scheduler (void)
{}

void 
MUF_Scheduling::Scheduler::_tao_any_destructor (void *_tao_void_pointer)
{
  Scheduler *tmp = ACE_static_cast (Scheduler *, _tao_void_pointer);
  CORBA::release (tmp);
}

MUF_Scheduling::Scheduler_ptr
MUF_Scheduling::Scheduler::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return Scheduler::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

MUF_Scheduling::Scheduler_ptr 
MUF_Scheduling::Scheduler::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return Scheduler::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          Scheduler_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &Scheduler::_tao_class_id
                )
            )
        );
}

MUF_Scheduling::Scheduler_ptr
MUF_Scheduling::Scheduler::_duplicate (Scheduler_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *MUF_Scheduling::Scheduler::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &::RTScheduling::Scheduler::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                RTScheduling::Scheduler_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::MUF_Scheduling, Scheduler)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* MUF_Scheduling::Scheduler::_interface_repository_id (void) const
{
  return "IDL:MUF_Scheduling/Scheduler:1.0";
}

CORBA::Boolean
MUF_Scheduling::Scheduler::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_MUF_Scheduling_Scheduler[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  33,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x4d55465f), 
  ACE_NTOHL (0x53636865), 
  ACE_NTOHL (0x64756c69), 
  ACE_NTOHL (0x6e672f53), 
  ACE_NTOHL (0x63686564), 
  ACE_NTOHL (0x756c6572), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:MUF_Scheduling/Scheduler:1.0
    10,
  ACE_NTOHL (0x53636865), 
  ACE_NTOHL (0x64756c65), 
  ACE_NTOHL (0x72000000),  // name = Scheduler
  };

static CORBA::TypeCode _tc_TAO_tc_MUF_Scheduling_Scheduler (
    CORBA::tk_objref,
    sizeof (_oc_MUF_Scheduling_Scheduler),
    (char *) &_oc_MUF_Scheduling_Scheduler,
    0,
    sizeof (MUF_Scheduling::Scheduler)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (MUF_Scheduling)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_Scheduler,
    &_tc_TAO_tc_MUF_Scheduling_Scheduler
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const MUF_Scheduling::SchedulingParameter &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MUF_Scheduling::SchedulingParameter>::insert_copy (
      _tao_any,
      MUF_Scheduling::SchedulingParameter::_tao_any_destructor,
      MUF_Scheduling::_tc_SchedulingParameter,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    MUF_Scheduling::SchedulingParameter *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MUF_Scheduling::SchedulingParameter>::insert (
      _tao_any,
      MUF_Scheduling::SchedulingParameter::_tao_any_destructor,
      MUF_Scheduling::_tc_SchedulingParameter,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    MUF_Scheduling::SchedulingParameter *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const MUF_Scheduling::SchedulingParameter *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const MUF_Scheduling::SchedulingParameter *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MUF_Scheduling::SchedulingParameter>::extract (
        _tao_any,
        MUF_Scheduling::SchedulingParameter::_tao_any_destructor,
        MUF_Scheduling::_tc_SchedulingParameter,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<MUF_Scheduling::SchedulingParameter>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<MUF_Scheduling::SchedulingParameter>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    MUF_Scheduling::SchedulingParameterPolicy_ptr _tao_elem
  )
{
  MUF_Scheduling::SchedulingParameterPolicy_ptr _tao_objptr =
    MUF_Scheduling::SchedulingParameterPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    MUF_Scheduling::SchedulingParameterPolicy_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<MUF_Scheduling::SchedulingParameterPolicy>::insert (
      _tao_any,
      MUF_Scheduling::SchedulingParameterPolicy::_tao_any_destructor,
      MUF_Scheduling::_tc_SchedulingParameterPolicy,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    MUF_Scheduling::SchedulingParameterPolicy_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<MUF_Scheduling::SchedulingParameterPolicy>::extract (
        _tao_any,
        MUF_Scheduling::SchedulingParameterPolicy::_tao_any_destructor,
        MUF_Scheduling::_tc_SchedulingParameterPolicy,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<MUF_Scheduling::SchedulingParameterPolicy>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<MUF_Scheduling::SchedulingParameterPolicy>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    MUF_Scheduling::Scheduler_ptr _tao_elem
  )
{
  MUF_Scheduling::Scheduler_ptr _tao_objptr =
    MUF_Scheduling::Scheduler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    MUF_Scheduling::Scheduler_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<MUF_Scheduling::Scheduler>::insert (
      _tao_any,
      MUF_Scheduling::Scheduler::_tao_any_destructor,
      MUF_Scheduling::_tc_Scheduler,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    MUF_Scheduling::Scheduler_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<MUF_Scheduling::Scheduler>::extract (
        _tao_any,
        MUF_Scheduling::Scheduler::_tao_any_destructor,
        MUF_Scheduling::_tc_Scheduler,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Impl_T<MUF_Scheduling::Scheduler>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Impl_T<MUF_Scheduling::Scheduler>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

