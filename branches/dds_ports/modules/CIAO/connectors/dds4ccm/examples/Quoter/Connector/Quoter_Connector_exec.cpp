// -*- C++ -*-
//
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 *       http://doc.ece.uci.edu/
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:1278

#include "Quoter_Connector_exec.h"
#include "ciao/CIAO_common.h"

#include "dds4ccm/impl/ndds/NDDS_Traits.h"
#include "dds4ccm/impl/ndds/DomainParticipantFactory.h"

namespace CIAO_Quoter_Quoter_Connector_Impl
{
  //============================================================
  // Facet Executor Implementation Class: Stock_Info_Writer_exec_i
  //============================================================
  
  Stock_Info_Writer_exec_i::Stock_Info_Writer_exec_i (void)
  {
  }
  
  Stock_Info_Writer_exec_i::~Stock_Info_Writer_exec_i (void)
  {
  }
  
  // Operations from ::CCM_DDS::Stock_Info_Writer
  
  void
  Stock_Info_Writer_exec_i::write (
    const ::Quoter::Stock_Info & /* an_instance */)
  {
    /* Your code here. */
  }
  //============================================================
  // Facet Executor Implementation Class: DataWriter_exec_i
  //============================================================
  
  DataWriter_exec_i::DataWriter_exec_i (void)
  {
  }
  
  DataWriter_exec_i::~DataWriter_exec_i (void)
  {
  }
  
  // Operations from ::DDS::DataWriter
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::enable (void)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::StatusCondition_ptr
  DataWriter_exec_i::get_statuscondition (void)
  {
    /* Your code here. */
    return ::DDS::StatusCondition::_nil ();
  }
  
  ::DDS::StatusMask
  DataWriter_exec_i::get_status_changes (void)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::InstanceHandle_t
  DataWriter_exec_i::get_instance_handle (void)
  {
    /* Your code here. */
    return ::DDS::NativeInstanceHandle_t ();
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::set_qos (
    const ::DDS::DataWriterQos & /* qos */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::get_qos (
    ::DDS::DataWriterQos & /* qos */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::set_listener (
    ::DDS::DataWriterListener_ptr /* a_listener */,
    ::DDS::StatusMask /* mask */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::DataWriterListener_ptr
  DataWriter_exec_i::get_listener (void)
  {
    /* Your code here. */
    return ::DDS::DataWriterListener::_nil ();
  }
  
  ::DDS::Topic_ptr
  DataWriter_exec_i::get_topic (void)
  {
    /* Your code here. */
    return ::DDS::Topic::_nil ();
  }
  
  ::DDS::Publisher_ptr
  DataWriter_exec_i::get_publisher (void)
  {
    /* Your code here. */
    return ::DDS::Publisher::_nil ();
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::wait_for_acknowledgments (
    const ::DDS::Duration_t & /* max_wait */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::get_liveliness_lost_status (
    ::DDS::LivelinessLostStatus & /* status */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::get_offered_deadline_missed_status (
    ::DDS::OfferedDeadlineMissedStatus & /* status */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::get_offered_incompatible_qos_status (
    ::DDS::OfferedIncompatibleQosStatus & /* status */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::get_publication_matched_status (
    ::DDS::PublicationMatchedStatus & /* status */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::assert_liveliness (void)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::get_matched_subscriptions (
    ::DDS::InstanceHandleSeq & /* subscription_handles */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataWriter_exec_i::get_matched_subscription_data (
    ::DDS::SubscriptionBuiltinTopicData & /* subscription_data */,
    const ::DDS::InstanceHandle_t & /* subscription_handle */)
  {
    /* Your code here. */
    return 0;
  }
  //============================================================
  // Facet Executor Implementation Class: Stock_Info_Reader_exec_i
  //============================================================
  
  Stock_Info_Reader_exec_i::Stock_Info_Reader_exec_i (void)
  {
  }
  
  Stock_Info_Reader_exec_i::~Stock_Info_Reader_exec_i (void)
  {
  }
  
  // Operations from ::CCM_DDS::Stock_Info_Reader
  
  void
  Stock_Info_Reader_exec_i::read_all (
    ::CCM_DDS::Stock_Info_Reader::Stock_InfoSeq_out /* instances */,
    ::CCM_DDS::ReadInfoSeq_out /* infos */)
  {
    /* Your code here. */
  }
  
  void
  Stock_Info_Reader_exec_i::read_all_history (
    ::CCM_DDS::Stock_Info_Reader::Stock_InfoSeq_out /* instances */,
    ::CCM_DDS::ReadInfoSeq_out /* infos */)
  {
    /* Your code here. */
  }
  
  void
  Stock_Info_Reader_exec_i::read_one (
    ::Quoter::Stock_Info & /* an_instance */,
    ::CCM_DDS::ReadInfo_out /* info */)
  {
    /* Your code here. */
  }
  
  void
  Stock_Info_Reader_exec_i::read_one_history (
    const ::Quoter::Stock_Info & /* an_instance */,
    ::CCM_DDS::Stock_Info_Reader::Stock_InfoSeq_out /* instances */,
    ::CCM_DDS::ReadInfoSeq_out /* infos */)
  {
    /* Your code here. */
  }
  
  ::CCM_DDS::QueryFilter *
  Stock_Info_Reader_exec_i::filter (void)
  {
    /* Your code here. */
    return 0;
  }
  
  void
  Stock_Info_Reader_exec_i::filter (
    const ::CCM_DDS::QueryFilter & /* filter */)
  {
    /* Your code here. */
  }
  //============================================================
  // Facet Executor Implementation Class: ListenerControl_exec_i
  //============================================================
  
  ListenerControl_exec_i::ListenerControl_exec_i (void)
  {
  }
  
  ListenerControl_exec_i::~ListenerControl_exec_i (void)
  {
  }
  
  // Operations from ::CCM_DDS::ListenerControl
  
  ::CORBA::Boolean
  ListenerControl_exec_i::enabled (void)
  {
    /* Your code here. */
    return false;
  }
  
  void
  ListenerControl_exec_i::enabled (
    ::CORBA::Boolean /* enabled */)
  {
    /* Your code here. */
  }
  //============================================================
  // Facet Executor Implementation Class: DataReader_exec_i
  //============================================================
  
  DataReader_exec_i::DataReader_exec_i (void)
  {
  }
  
  DataReader_exec_i::~DataReader_exec_i (void)
  {
  }
  
  // Operations from ::DDS::DataReader
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::enable (void)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::StatusCondition_ptr
  DataReader_exec_i::get_statuscondition (void)
  {
    /* Your code here. */
    return ::DDS::StatusCondition::_nil ();
  }
  
  ::DDS::StatusMask
  DataReader_exec_i::get_status_changes (void)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::InstanceHandle_t
  DataReader_exec_i::get_instance_handle (void)
  {
    /* Your code here. */
    return ::DDS::NativeInstanceHandle_t ();
  }
  
  ::DDS::ReadCondition_ptr
  DataReader_exec_i::create_readcondition (
    ::DDS::SampleStateMask /* sample_states */,
    ::DDS::ViewStateMask /* view_states */,
    ::DDS::InstanceStateMask /* instance_states */)
  {
    /* Your code here. */
    return ::DDS::ReadCondition::_nil ();
  }
  
  ::DDS::QueryCondition_ptr
  DataReader_exec_i::create_querycondition (
    ::DDS::SampleStateMask /* sample_states */,
    ::DDS::ViewStateMask /* view_states */,
    ::DDS::InstanceStateMask /* instance_states */,
    const char * /* query_expression */,
    const ::DDS::StringSeq & /* query_parameters */)
  {
    /* Your code here. */
    return ::DDS::QueryCondition::_nil ();
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::delete_readcondition (
    ::DDS::ReadCondition_ptr /* a_condition */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::delete_contained_entities (void)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::set_qos (
    const ::DDS::DataReaderQos & /* qos */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::get_qos (
    ::DDS::DataReaderQos & /* qos */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::set_listener (
    ::DDS::DataReaderListener_ptr /* a_listener */,
    ::DDS::StatusMask /* mask */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::DataReaderListener_ptr
  DataReader_exec_i::get_listener (void)
  {
    /* Your code here. */
    return ::DDS::DataReaderListener::_nil ();
  }
  
  ::DDS::TopicDescription_ptr
  DataReader_exec_i::get_topicdescription (void)
  {
    /* Your code here. */
    return ::DDS::TopicDescription::_nil ();
  }
  
  ::DDS::Subscriber_ptr
  DataReader_exec_i::get_subscriber (void)
  {
    /* Your code here. */
    return ::DDS::Subscriber::_nil ();
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::get_sample_rejected_status (
    ::DDS::SampleRejectedStatus & /* status */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::get_liveliness_changed_status (
    ::DDS::LivelinessChangedStatus & /* status */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::get_requested_deadline_missed_status (
    ::DDS::RequestedDeadlineMissedStatus & /* status */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::get_requested_incompatible_qos_status (
    ::DDS::RequestedIncompatibleQosStatus & /* status */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::get_subscription_matched_status (
    ::DDS::SubscriptionMatchedStatus & /* status */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::get_sample_lost_status (
    ::DDS::SampleLostStatus & /* status */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::wait_for_historical_data (
    const ::DDS::Duration_t & /* max_wait */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::get_matched_publications (
    ::DDS::InstanceHandleSeq & /* publication_handles */)
  {
    /* Your code here. */
    return 0;
  }
  
  ::DDS::ReturnCode_t
  DataReader_exec_i::get_matched_publication_data (
    ::DDS::PublicationBuiltinTopicData & /* publication_data */,
    const ::DDS::InstanceHandle_t & /* publication_handle */)
  {
    /* Your code here. */
    return 0;
  }
  
  //============================================================
  // Component Executor Implementation Class: Quoter_Connector_exec_i
  //============================================================
  
  Quoter_Connector_exec_i::Quoter_Connector_exec_i (void)
  {
  }
  
  Quoter_Connector_exec_i::~Quoter_Connector_exec_i (void)
  {
  }
  
  // Supported operations and attributes.
  
  // Component attributes.
  
  char *
  Quoter_Connector_exec_i::topic_name (void)
  {
    // @from DDS_TopicBase
    return CORBA::string_dup (this->topic_name_.in ());
  }
  
  void
  Quoter_Connector_exec_i::topic_name (
    const char * topic_name)
  {
    // @from DDS_TopicBase
    this->topic_name_ = topic_name;
  }
  
  ::DDS::StringSeq *
  Quoter_Connector_exec_i::key_fields (void)
  {
    // @from DDS_TopicBase
    ::DDS::StringSeq *retval = 
      new ::DDS::StringSeq (this->key_fields_.length ());
    
    for (CORBA::ULong i = 0; i < this->key_fields_.length (); ++i)
      (*retval)[i] = CORBA::string_dup (this->key_fields_[i]);
    
    return retval;
  }
  
  void
  Quoter_Connector_exec_i::key_fields (
    const ::DDS::StringSeq & key_fields)
  {
    // @from DDS_TopicBase
    this->key_fields_.length (key_fields.length ());
    
    for (CORBA::ULong i = 0; i < this->key_fields_.length (); ++i)
      this->key_fields_[i] = CORBA::string_dup (key_fields[i]);
  }
  
  ::DDS::DomainId_t
  Quoter_Connector_exec_i::domain_id (void)
  {
    // @from DDS_Base
    return this->domain_id_;
  }
  
  void
  Quoter_Connector_exec_i::domain_id (
    ::DDS::DomainId_t domain_id)
  {
    // @from DDS_Base
    this->domain_id_ = domain_id;
  }
  
  char *
  Quoter_Connector_exec_i::qos_profile (void)
  {
    // @from DDS_Base
    return CORBA::string_dup (this->qos_profile_.in ());
  }
  
  void
  Quoter_Connector_exec_i::qos_profile (
    const char * qos_profile)
  {
    // @from DDS_Base
    this->qos_profile_ = qos_profile;
  }
  
  // Port operations.

  void
  Quoter_Connector_exec_i::configure_default_domain_ (void)
  {
    if (this->default_domain_configured_) return;

    try
      {
        // Generic code
        this->domain_factory_ = new ::CIAO::DDS4CCM::RTI::RTI_DomainParticipantFactory_i ();
        
        ::DDS::DomainParticipantQos qos;
        this->domain_ = 
          this->domain_factory_->create_participant (this->domain_id_,
                                                     qos,
                                                     0,
                                                     0);
      }
    catch (...)
      {
        CIAO_ERROR ((LM_ERROR, "Caught unknown C++ exception whilst configuring default domain\n"));
        throw CORBA::INTERNAL ();
      }
  }

  void 
  ::configure_default_topic_ (void)
  {
    if (this->default_topic_configured_) return;
    
    this->configure_default_domain_ ();
    
    try
      {
        if (CORBA::is_nil (this->topic_))
          {
            ::DDS::TopicQos tqos;
            this->topic_ = 
              this->domain_->create_topic (this->topic_name_.in (),
                                           Stock_Info_Traits::type_support::get_type_name (),
                                           tqos,
                                           0,
                                           0);
          }
      }
    catch (...)
      {
        CIAO_ERROR ((LM_ERROR, "Caught unknown error while configuring default topic\n"));
        throw CORBA::INTERNAL ();
      }
  } 
  
  void 
  Quoter_Connector_exec_i::configure_port_info_in_ (void)
  {
    if (this->__info_in_configured_)
      return;
    
    this->configure_default_topic_ (void);
    
    try
      {
        if (CORBA::is_nil (this->__info_in_publisher_.in ()))
          {
            ::DDS::PublisherQos pqos;
            this->__info_in_publisher_ = this->domain_->create_publisher (pqos,
                                                                          0,
                                                                          0);
          }
        
        if (CORBA::is_nil  (this->__info_in_datawriter_.in ()))
          {
            ::DDS::DataWriterQos dwqos;
            ::DDS::DataWriter_var dwv_tmp = this->__info_in_publisher_->create_datawriter (this->topic_.in (),
                                                                                           dwqos,
                                                                                           0,
                                                                                           0);
            this->__info_in_datawriter_ = ::DDS::CCM_DataWriter::_narrow (dwv_tmp);
          }    
      }
    catch (...)
      {
        CIAO_ERROR ((LM_ERROR, "Caught unknown C++ exception while configuring port info_in_\n"));
        throw CORBA::INTERNAL ();
      }
  }
  
    

  ::CCM_DDS::CCM_Stock_Info_Writer_ptr
  Quoter_Connector_exec_i::get_info_in_data (void)
  {
    this->configure_port_info_in_ ();
    
    return new CIAO::DDS4CCM::RTI::Writer_T<Stock_Info_Traits,
      ::CCM_DDS::CCM_Stock_Info_Writer> (this->__info_in_datawriter_.in ());
  }
  
  ::DDS::CCM_DataWriter_ptr
  Quoter_Connector_exec_i::get_info_in_dds_entity (void)
  {
    this->configure_port_info_in_ ();
    
    return this->__info_in_datawriter_.in ();
  }
  
  ::CCM_DDS::CCM_Stock_Info_Reader_ptr
  Quoter_Connector_exec_i::get_info_out_data (void)
  {
    /* Your code here. */
    return ::CCM_DDS::CCM_Stock_Info_Reader::_nil ();
  }
  
  ::CCM_DDS::CCM_ListenerControl_ptr
  Quoter_Connector_exec_i::get_info_out_control (void)
  {
    /* Your code here. */
    return ::CCM_DDS::CCM_ListenerControl::_nil ();
  }
  
  ::DDS::CCM_DataReader_ptr
  Quoter_Connector_exec_i::get_info_out_dds_entity (void)
  {
    /* Your code here. */
    return ::DDS::CCM_DataReader::_nil ();
  }
  
  // Operations from Components::SessionComponent.
  
  void
  Quoter_Connector_exec_i::set_session_context (
    ::Components::SessionContext_ptr ctx)
  {
    ::Quoter::CCM_Quoter_Connector_Context_var lctx = 
      ::Quoter::CCM_Quoter_Connector_Context::_narrow (ctx);
    
    if ( ::CORBA::is_nil (lctx.in ()))
      {
        throw ::CORBA::INTERNAL ();
      }
    
    this->context_ = lctx;
  }
  
  void
  Quoter_Connector_exec_i::configuration_complete (void)
  {
  }
  
  void
  Quoter_Connector_exec_i::ccm_activate (void)
  {
    /* Your code here. */
  }
  
  void
  Quoter_Connector_exec_i::ccm_passivate (void)
  {
    /* Your code here. */
  }
  
  void
  Quoter_Connector_exec_i::ccm_remove (void)
  {
    /* Your code here. */
  }
  
  extern "C" QUOTER_CONNECTOR_EXEC_Export ::Components::EnterpriseComponent_ptr
  create_Quoter_Quoter_Connector_Impl (void)
  {
    ::Components::EnterpriseComponent_ptr retval =
      ::Components::EnterpriseComponent::_nil ();
    
    ACE_NEW_NORETURN (
      retval,
      Quoter_Connector_exec_i);
    
    return retval;
  }
}

