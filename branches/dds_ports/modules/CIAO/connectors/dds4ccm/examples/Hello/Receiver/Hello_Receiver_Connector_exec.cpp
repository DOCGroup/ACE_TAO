// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6.9 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:1278

#define MAX_STRING_SIZE         1024

#include "Hello_Receiver_Connector_exec.h"
#include "ciao/CIAO_common.h"

#include "dds4ccm/impl/ndds/DomainParticipantFactory.h"
#include "dds4ccm/impl/ndds/DataReader.h"

/* This method gets called back by DDS when one or more data samples have been
 * received.
 */

HelloListener::HelloListener ( ::CCM_DDS::string_RawListener_ptr listener) :
  listener_ ( ::CCM_DDS::string_RawListener::_duplicate (listener))
{
}

void HelloListener::on_data_available( ::DDS::DataReader *reader)
{
    /* Perform a safe type-cast from a generic data reader into a
     * specific data reader for the type "DDS::String"
     */
    ::CIAO::DDS4CCM::RTI::RTI_DataReader_i* rd = dynamic_cast < ::CIAO::DDS4CCM::RTI::RTI_DataReader_i*>(reader);
    DDSStringDataReader * string_reader = DDSStringDataReader::narrow(rd->get_datareader ());
    if (!string_reader) {
        /* In this specific case, this will never fail */
        ACE_ERROR ((LM_ERROR, ACE_TEXT ("DDSStringDataReader::narrow failed.\n")));
        return;
    }

    /* Loop until there are messages available in the queue */
    char                  sample[MAX_STRING_SIZE];
    char *ptr_sample = &sample[0];
    for(;;) {
        DDS_SampleInfo        info;
        DDS_ReturnCode_t retcode = string_reader->take_next_sample(
                            ptr_sample,
                            info);
        if (retcode == DDS_RETCODE_NO_DATA) {
            /* No more samples */
            break;
        } else if (retcode != DDS_RETCODE_OK) {
            ACE_ERROR ((LM_ERROR, ACE_TEXT ("Unable to take data from data reader, error %d.\n"), retcode));
            return;
        }
        if (info.valid_data) {
            ::CCM_DDS::ReadInfo empty;
            listener_->on_data (sample, empty);
    }
  }
}

namespace CIAO_Hello_DDS_Hello_receiver_Connector_Impl
{
  //============================================================
  // Facet Executor Implementation Class: string_Reader_exec_i
  //============================================================

  string_Reader_exec_i::string_Reader_exec_i (void)
  {
  }

  string_Reader_exec_i::~string_Reader_exec_i (void)
  {
  }

  // Operations from ::CCM_DDS::string_Reader

  void
  string_Reader_exec_i::read_all (
    ::CCM_DDS::string_Reader::stringSeq_out /* instances */,
    ::CCM_DDS::ReadInfoSeq_out /* infos */)
  {
    /* Your code here. */
  }

  void
  string_Reader_exec_i::read_all_history (
    ::CCM_DDS::string_Reader::stringSeq_out /* instances */,
    ::CCM_DDS::ReadInfoSeq_out /* infos */)
  {
    /* Your code here. */
  }

  void
  string_Reader_exec_i::read_one (
    char *& /* an_instance */,
    ::CCM_DDS::ReadInfo_out /* info */)
  {
    /* Your code here. */
  }

  void
  string_Reader_exec_i::read_one_history (
    const char * /* an_instance */,
    ::CCM_DDS::string_Reader::stringSeq_out /* instances */,
    ::CCM_DDS::ReadInfoSeq_out /* infos */)
  {
    /* Your code here. */
  }

  ::CCM_DDS::QueryFilter *
  string_Reader_exec_i::filter (void)
  {
    /* Your code here. */
    return 0;
  }

  void
  string_Reader_exec_i::filter (
    const ::CCM_DDS::QueryFilter & /* filter */)
  {
    /* Your code here. */
  }
  //============================================================
  // Facet Executor Implementation Class: ListenerControl_exec_i
  //============================================================

  ListenerControl_exec_i::ListenerControl_exec_i (void)
  {
  }

  ListenerControl_exec_i::~ListenerControl_exec_i (void)
  {
  }

  // Operations from ::CCM_DDS::ListenerControl

  ::CORBA::Boolean
  ListenerControl_exec_i::enabled (void)
  {
    /* Your code here. */
    return false;
  }

  void
  ListenerControl_exec_i::enabled (
    ::CORBA::Boolean enabled)
  {
    if (enabled)
      {
        // @todo
      }
  }
  //============================================================
  // Facet Executor Implementation Class: DataReader_exec_i
  //============================================================

  DataReader_exec_i::DataReader_exec_i (::DDS::DataReader_ptr dr) :
    dr_ ( ::DDS::DataReader::_duplicate (dr))
  {
  }

  DataReader_exec_i::~DataReader_exec_i (void)
  {
  }

  // Operations from ::DDS::DataReader

  ::DDS::ReturnCode_t
  DataReader_exec_i::enable (void)
  {
    return this->dr_->enable ();
  }

  ::DDS::StatusCondition_ptr
  DataReader_exec_i::get_statuscondition (void)
  {
    return this->dr_->get_statuscondition ();
  }

  ::DDS::StatusMask
  DataReader_exec_i::get_status_changes (void)
  {
    return this->dr_->get_status_changes ();
  }

  ::DDS::InstanceHandle_t
  DataReader_exec_i::get_instance_handle (void)
  {
    return this->dr_->get_instance_handle ();
  }

  ::DDS::ReadCondition_ptr
  DataReader_exec_i::create_readcondition (
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states)
  {
    return this->dr_->create_readcondition (sample_states, view_states, instance_states);
  }

  ::DDS::QueryCondition_ptr
  DataReader_exec_i::create_querycondition (
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states,
    const char * query_expression,
    const ::DDS::StringSeq & query_parameters)
  {
    return this->dr_->create_querycondition (sample_states, view_states, instance_states, query_expression, query_parameters);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::delete_readcondition (
    ::DDS::ReadCondition_ptr a_condition)
  {
    return this->dr_->delete_readcondition (a_condition);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::delete_contained_entities (void)
  {
    return this->dr_->delete_contained_entities ();
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::set_qos (
    const ::DDS::DataReaderQos & qos)
  {
    return this->dr_->set_qos (qos);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::get_qos (
    ::DDS::DataReaderQos & qos)
  {
    return this->dr_->get_qos (qos);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::set_listener (
    ::DDS::DataReaderListener_ptr a_listener,
    ::DDS::StatusMask mask)
  {
    return this->dr_->set_listener (a_listener, mask);
  }

  ::DDS::DataReaderListener_ptr
  DataReader_exec_i::get_listener (void)
  {
    return this->dr_->get_listener ();
  }

  ::DDS::TopicDescription_ptr
  DataReader_exec_i::get_topicdescription (void)
  {
    return this->dr_->get_topicdescription ();
  }

  ::DDS::Subscriber_ptr
  DataReader_exec_i::get_subscriber (void)
  {
    return this->dr_->get_subscriber ();
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::get_sample_rejected_status (
    ::DDS::SampleRejectedStatus & status)
  {
    return this->dr_->get_sample_rejected_status (status);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::get_liveliness_changed_status (
    ::DDS::LivelinessChangedStatus & status)
  {
    return this->dr_->get_liveliness_changed_status (status);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::get_requested_deadline_missed_status (
    ::DDS::RequestedDeadlineMissedStatus & status)
  {
    return this->dr_->get_requested_deadline_missed_status (status);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::get_requested_incompatible_qos_status (
    ::DDS::RequestedIncompatibleQosStatus & status)
  {
    return this->dr_->get_requested_incompatible_qos_status (status);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::get_subscription_matched_status (
    ::DDS::SubscriptionMatchedStatus & status)
  {
    return this->dr_->get_subscription_matched_status (status);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::get_sample_lost_status (
    ::DDS::SampleLostStatus & status)
  {
    return this->dr_->get_sample_lost_status (status);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::wait_for_historical_data (
    const ::DDS::Duration_t & max_wait)
  {
    return this->dr_->wait_for_historical_data (max_wait);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::get_matched_publications (
    ::DDS::InstanceHandleSeq & publication_handles)
  {
    return this->dr_->get_matched_publications (publication_handles);
  }

  ::DDS::ReturnCode_t
  DataReader_exec_i::get_matched_publication_data (
    ::DDS::PublicationBuiltinTopicData & publication_data,
    ::DDS::InstanceHandle_t publication_handle)
  {
    return this->dr_->get_matched_publication_data (publication_data, publication_handle);
  }

  //============================================================
  // Component Executor Implementation Class: Hello_receiver_Connector_exec_i
  //============================================================

  Hello_receiver_Connector_exec_i::Hello_receiver_Connector_exec_i (void)
    : dds_configured_ (false),
      listener_ (0),
      dr_ (0)
  {
  }

  Hello_receiver_Connector_exec_i::~Hello_receiver_Connector_exec_i (void)
  {
  }

  // Supported operations and attributes.

  // Component attributes.

  // Port operations.

  ::CCM_DDS::CCM_string_Reader_ptr
  Hello_receiver_Connector_exec_i::get_receiver_data (void)
  {
    this->configure_dds ();
    return new string_Reader_exec_i ();
  }

  ::CCM_DDS::CCM_ListenerControl_ptr
  Hello_receiver_Connector_exec_i::get_receiver_control (void)
  {
    this->configure_dds ();
//    return ::DDS::CCM_DataWriter::_duplicate (this->dw_.in ());

    /* Your code here. */
    // @todo
    return new ListenerControl_exec_i ();
  }

  ::DDS::CCM_DataReader_ptr
  Hello_receiver_Connector_exec_i::get_receiver_dds_entity (void)
  {
    this->configure_dds ();
    /* Your code here. */
    // @todo
    return new DataReader_exec_i (this->dr_);
  }

  // Operations from Components::SessionComponent.

  void
  Hello_receiver_Connector_exec_i::set_session_context (
    ::Components::SessionContext_ptr ctx)
  {
    this->context_ =
      ::Hello_DDS::CCM_Hello_receiver_Connector_Context::_narrow (ctx);

    if ( ::CORBA::is_nil (this->context_.in ()))
      {
        throw ::CORBA::INTERNAL ();
      }
  }

  void
  Hello_receiver_Connector_exec_i::configuration_complete (void)
  {
    this->configure_dds ();
    /* Your code here. */
  }

  void
  Hello_receiver_Connector_exec_i::ccm_activate (void)
  {
    /* Your code here. */
  }

  void
  Hello_receiver_Connector_exec_i::ccm_passivate (void)
  {
    /* Your code here. */
  }

  void
  Hello_receiver_Connector_exec_i::ccm_remove (void)
  {
    /* Your code here. */
  }

  void
  Hello_receiver_Connector_exec_i::configure_dds (void)
  {
    if (this->dds_configured_)
      return;

    try
      {
        //NDDSConfigLogger::get_instance()->set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API,
          //                                                        NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL );

        dpf_ = new CIAO::DDS4CCM::RTI::RTI_DomainParticipantFactory_i ();
        ::DDS::DomainParticipantQos qos;
        dp_ = dpf_->create_participant (0, qos, 0, 0);

        ::DDS::TopicQos tqos;
        t_ = dp_->create_topic ("Hello, World",
                                CIAO::DDS4CCM::RTI::String_Traits::type_support::get_type_name (),
                                tqos,
                                0,
                                DDS_STATUS_MASK_NONE);

        ::DDS::SubscriberQos sqos;
        sub_ = dp_->create_subscriber (sqos,
                                      0,
                                      0);

        ::DDS::DataReaderQos drqos;
        ::CCM_DDS::string_RawListener_var rawlistener =
          this->context_->get_connection_receiver_listener ();
        ::DDS::DataReaderListener_ptr temp = new HelloListener (rawlistener.in ());
        this->listener_ = temp;
        DDS::DataReader_var drv_tmp = sub_->create_datareader (t_.in (),
                                                               drqos,
                                                               listener_.in (),
                                                               DDS_DATA_AVAILABLE_STATUS);

        dr_ = DDS::CCM_DataReader::_narrow (drv_tmp);
        printf ("setup done\n");
      }
    catch (const CORBA::Exception &ex)
      {
        CIAO_ERROR ((LM_ERROR, CLINFO "Hello_receiver_Connector_exec_i::configure_dds - "
                     "Caught CORBA exception %C\n",
                     ex._info ().c_str ()));
      }
    catch (...)
      {
        CIAO_ERROR ((LM_ERROR, CLINFO "Hello_receiver_Connector_exec_i::configure_dds - "
                     "Error: caught unknown C++ exception while configuring DDS\n"));
      }

    this->dds_configured_ = true;
  }

  extern "C" HELLO_RECEIVER_CONNECTOR_EXEC_Export ::Components::EnterpriseComponent_ptr
  create_Hello_DDS_Hello_receiver_Connector_Impl (void)
  {
    ::Components::EnterpriseComponent_ptr retval =
      ::Components::EnterpriseComponent::_nil ();

    ACE_NEW_RETURN (
      retval,
      Hello_receiver_Connector_exec_i,
      ::Components::EnterpriseComponent::_nil ());

    return retval;
  }
}

namespace CIAO_Hello_DDS_Hello_receiver_Connector_Impl
{
  //============================================================
  // Home Executor Implementation Class: ReceiverConnectorHome_exec_i
  //============================================================

  ReceiverConnectorHome_exec_i::ReceiverConnectorHome_exec_i (void)
  {
  }

  ReceiverConnectorHome_exec_i::~ReceiverConnectorHome_exec_i (void)
  {
  }

  // All operations and attributes.

  // Factory operations.

  // Finder operations.

  // Implicit operations.

  ::Components::EnterpriseComponent_ptr
  ReceiverConnectorHome_exec_i::create (void)
  {
    ::Components::EnterpriseComponent_ptr retval =
      ::Components::EnterpriseComponent::_nil ();

    ACE_NEW_THROW_EX (
      retval,
      Hello_receiver_Connector_exec_i,
      ::CORBA::NO_MEMORY ());

    return retval;
  }

  extern "C" HELLO_RECEIVER_CONNECTOR_EXEC_Export ::Components::HomeExecutorBase_ptr
  create_Hello_DDS_ReceiverConnectorHome_Impl (void)
  {
    ::Components::HomeExecutorBase_ptr retval =
      ::Components::HomeExecutorBase::_nil ();

    ACE_NEW_RETURN (
      retval,
      ReceiverConnectorHome_exec_i,
      ::Components::HomeExecutorBase::_nil ());

    return retval;
  }
}

