// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#include "Producer_svnt.h"
#include "Cookies.h"
#include "ciao/Servant_Activator.h"
#include "ciao/Port_Activator_T.h"

namespace Producer_Impl
{
  namespace CIAO_GLUE_EC_Benchmark
  {
    Producer_Context::Producer_Context (
    ::Components::CCMHome_ptr home,
    ::CIAO::Session_Container *c,
    Producer_Servant *sv)
    : home_ (::Components::CCMHome::_duplicate (home)),
    container_ (c),
    servant_ (sv)
    {
    }

    Producer_Context::~Producer_Context (void)
    {
    }

    // Operations from ::Components::CCMContext.

    ::Components::Principal_ptr
    Producer_Context::get_caller_principal (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ACE_THROW_RETURN (
      ::CORBA::NO_IMPLEMENT (),
      ::Components::Principal::_nil ());
    }

    ::Components::CCMHome_ptr
    Producer_Context::get_CCM_home (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      return ::Components::CCMHome::_duplicate (this->home_.in ());
    }

    CORBA::Boolean
    Producer_Context::get_rollback_only (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::IllegalState))
    {
      ACE_THROW_RETURN (CORBA::NO_IMPLEMENT (), 0);
    }

    ::Components::Transaction::UserTransaction_ptr
    Producer_Context::get_user_transaction (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::IllegalState))
    {
      ACE_THROW_RETURN (
      ::CORBA::NO_IMPLEMENT (),
      ::Components::Transaction::UserTransaction::_nil ());
    }

    CORBA::Boolean
    Producer_Context::is_caller_in_role (
    const char * /* role */
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ACE_THROW_RETURN (CORBA::NO_IMPLEMENT (), 0);
    }

    void
    Producer_Context::set_rollback_only (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::IllegalState))
    {
      ACE_THROW (CORBA::NO_IMPLEMENT ());
    }

    // Operations from ::Components::SessionContextinterface.

    CORBA::Object_ptr
    Producer_Context::get_CCM_object (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::IllegalState))
    {
      if (CORBA::is_nil (this->component_.in ()))
      {
        CORBA::Object_var obj =
        this->container_->get_objref (
        this->servant_
        ACE_ENV_ARG_PARAMETER);
        ACE_CHECK_RETURN (CORBA::Object::_nil ());

        this->component_ =
        ::EC_Benchmark::Producer::_narrow (
        obj.in ()
        ACE_ENV_ARG_PARAMETER);
        ACE_CHECK_RETURN (CORBA::Object::_nil ());

        if (CORBA::is_nil (this->component_.in ()))
        {
          ACE_THROW_RETURN (
          ::CORBA::INTERNAL (),
          ::CORBA::Object::_nil ());
        }
      }

      return ::EC_Benchmark::Producer::_duplicate (
      this->component_.in ());
    }

    // Operations for Producer receptacles and event sources,
    // defined in ::EC_Benchmark::CCM_Producer_Context.

    void
    Producer_Context::push_timeout (
    ::EC_Benchmark::TimeOut *ev
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ACE_CString my_uuid = this->servant_->component_UUID (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;
      my_uuid += "_data_available_publisher";

      this->container_->push_event (ev,
                                    my_uuid.c_str ()
                                    ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;
      /*
      ACE_Active_Map_Manager< 
      ::EC_Benchmark::TimeOutConsumer_var>::iterator end =
      this->ciao_publishes_timeout_map_.end ();

      for (ACE_Active_Map_Manager< 
      ::EC_Benchmark::TimeOutConsumer_var>::iterator iter =
      this->ciao_publishes_timeout_map_.begin ();
      iter != end;
      ++iter)
      {
        ACE_Active_Map_Manager< 
        ::EC_Benchmark::TimeOutConsumer_var>::ENTRY &entry = *iter;

        ::EC_Benchmark::TimeOutConsumer_var c =
        ::EC_Benchmark::TimeOutConsumer::_narrow (
        entry.int_id_.in ()
        ACE_ENV_ARG_PARAMETER);
        ACE_CHECK;

        entry.int_id_->push_TimeOut (
        ev
        ACE_ENV_ARG_PARAMETER);
        ACE_CHECK;
      }
      */
    }

    ::Components::Cookie *
    Producer_Context::subscribe_timeout (
    ::EC_Benchmark::TimeOutConsumer_ptr c
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::ExceededConnectionLimit))
    {
      if (CORBA::is_nil (c))
      {
        ACE_THROW_RETURN (CORBA::BAD_PARAM (), 0);
      }

      ::EC_Benchmark::TimeOutConsumer_var sub =
      ::EC_Benchmark::TimeOutConsumer::_duplicate (c);

      ACE_Active_Map_Manager_Key key;
      this->ciao_publishes_timeout_map_.bind (sub.in (), key);
      sub._retn ();

      ::Components::Cookie_var retv = new ::CIAO::Map_Key_Cookie (key);
      return retv._retn ();
    }

    ::EC_Benchmark::TimeOutConsumer_ptr
    Producer_Context::unsubscribe_timeout (
    ::Components::Cookie *ck
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidConnection))
    {
      ::EC_Benchmark::TimeOutConsumer_var retv;
      ACE_Active_Map_Manager_Key key;

      if (ck == 0 || ::CIAO::Map_Key_Cookie::extract (ck, key) == false)
      {
        ACE_THROW_RETURN (
        ::Components::InvalidConnection (),
        ::EC_Benchmark::TimeOutConsumer::_nil ());
      }

      if (this->ciao_publishes_timeout_map_.unbind (key, retv) != 0)
      {
        ACE_THROW_RETURN (
        ::Components::InvalidConnection (),
        ::EC_Benchmark::TimeOutConsumer::_nil ());
      }

      return retv._retn ();
    }

    // CIAO-specific.

    ::CIAO::Session_Container *
    Producer_Context::_ciao_the_Container (void) const
    {
      return this->container_;
    }

    Producer_Context *
    Producer_Context::_narrow (
    ::Components::SessionContext_ptr p
    ACE_ENV_ARG_DECL_NOT_USED)
    {
      return dynamic_cast<Producer_Context *> (p);
    }
  }

  namespace CIAO_GLUE_EC_Benchmark
  {
    Producer_Servant::Producer_Servant (
    ::EC_Benchmark::CCM_Producer_ptr exe,
    ::Components::CCMHome_ptr h,
    ::CIAO::Session_Container *c)
      : our_base (exe, c)
    {
      this->context_ = new Producer_Context (h, c, this);

      ACE_TRY_NEW_ENV
      {
        ::Components::SessionComponent_var scom =
        ::Components::SessionComponent::_narrow (
        exe
        ACE_ENV_ARG_PARAMETER);
        ACE_TRY_CHECK;

        if (! ::CORBA::is_nil (scom.in ()))
        {
          scom->set_session_context (
          this->context_
          ACE_ENV_ARG_PARAMETER);
          ACE_TRY_CHECK;
        }

        this->populate_port_tables (
        ACE_ENV_SINGLE_ARG_PARAMETER);
        ACE_TRY_CHECK;
      }

      ACE_CATCHANY
      {
      }

      ACE_ENDTRY;
    }

    Producer_Servant::~Producer_Servant (void)
    {
    }

    void
    Producer_Servant::set_attributes (
    const ::Components::ConfigValues &descr
    ACE_ENV_ARG_DECL_NOT_USED)
    {
      for (CORBA::ULong i = 0;
       i < descr.length ();
       ++i)
      {
        const char *descr_name = descr[i]->name ();
        ::CORBA::Any &descr_value = descr[i]->value ();

        ACE_UNUSED_ARG (descr_name);
        ACE_UNUSED_ARG (descr_value);
      }
    }

    // Operations for Navigation interface.

    CORBA::Object_ptr
    Producer_Servant::provide_facet (
    const char *name
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName))
    {
      if (name == 0)
      {
        ACE_THROW_RETURN (
        ::CORBA::BAD_PARAM (),
        ::CORBA::Object::_nil ());
      }

      ACE_THROW_RETURN (
      ::Components::InvalidName (),
      ::CORBA::Object::_nil ());
    }

    ::Components::FacetDescriptions *
    Producer_Servant::get_named_facets (
    const ::Components::NameList & /* names */
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName))
    {
      ACE_THROW_RETURN (::CORBA::NO_IMPLEMENT (), 0);
    }

    ::Components::EmitterDescriptions *
    Producer_Servant::get_all_emitters (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ACE_THROW_RETURN (::CORBA::NO_IMPLEMENT (), 0);
    }

    ::Components::EmitterDescriptions *
    Producer_Servant::get_named_emitters (
    const ::Components::NameList & /* names */
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName))
    {
      ACE_THROW_RETURN (::CORBA::NO_IMPLEMENT (), 0);
    }

    ::Components::Cookie *
    Producer_Servant::subscribe_timeout (
    ::EC_Benchmark::TimeOutConsumer_ptr c
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::ExceededConnectionLimit))
    {
      return this->context_->subscribe_timeout (
      c
      ACE_ENV_ARG_PARAMETER);
    }

    ::EC_Benchmark::TimeOutConsumer_ptr
    Producer_Servant::unsubscribe_timeout (
    ::Components::Cookie *ck
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidConnection))
    {
      return this->context_->unsubscribe_timeout (
      ck
      ACE_ENV_ARG_PARAMETER);
    }

    ::Components::Cookie *
    Producer_Servant::connect (
    const char *name,
    ::CORBA::Object_ptr connection
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName,
    ::Components::InvalidConnection,
    ::Components::AlreadyConnected,
    ::Components::ExceededConnectionLimit))
    {
      // If the component has no receptacles, this will be unused.
      ACE_UNUSED_ARG (connection);

      if (name == 0)
      {
        ACE_THROW_RETURN (::Components::InvalidName (), 0);
      }

      ACE_THROW_RETURN (::Components::InvalidName (), 0);
    }

    CORBA::Object_ptr
    Producer_Servant::disconnect (
    const char *name,
    ::Components::Cookie * ck
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName,
    ::Components::InvalidConnection,
    ::Components::CookieRequired,
    ::Components::NoConnection))
    {
      if (name == 0)
      {
        ACE_THROW_RETURN (
        ::Components::InvalidName (),
        ::CORBA::Object::_nil ());
      }

      ACE_THROW_RETURN (
      ::Components::InvalidName (),
      ::CORBA::Object::_nil ());

      ACE_UNUSED_ARG (ck);
    }

    ::Components::ConnectionDescriptions *
    Producer_Servant::get_connections (
    const char * /* name */
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName))
    {
      ACE_THROW_RETURN (::CORBA::NO_IMPLEMENT (), 0);
    }

    ::Components::ReceptacleDescriptions *
    Producer_Servant::get_all_receptacles (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ACE_THROW_RETURN (::CORBA::NO_IMPLEMENT (), 0);
    }

    ::Components::ReceptacleDescriptions *
    Producer_Servant::get_named_receptacles (
    const ::Components::NameList & /* names */
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName))
    {
      ACE_THROW_RETURN (::CORBA::NO_IMPLEMENT (), 0);
    }

    ::Components::EventConsumerBase_ptr
    Producer_Servant::get_consumer (
    const char *sink_name
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName))
    {
      if (sink_name == 0)
      {
        ACE_THROW_RETURN (
        ::Components::InvalidName (),
        ::Components::EventConsumerBase::_nil ());
      }

      ACE_THROW_RETURN (
      ::Components::InvalidName (),
      ::Components::EventConsumerBase::_nil ());
    }

    void
    Producer_Servant::connect_consumer (
    const char * emitter_name,
    ::Components::EventConsumerBase_ptr consumer
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName,
    ::Components::AlreadyConnected,
    ::Components::InvalidConnection))
    {
      if (emitter_name == 0)
      {
        ACE_THROW (::CORBA::BAD_PARAM ());
      }

      ACE_UNUSED_ARG (consumer);
      ACE_THROW (::Components::InvalidName ());
    }

    ::Components::EventConsumerBase_ptr
    Producer_Servant::disconnect_consumer (
    const char * /* source_name */
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName,
    ::Components::NoConnection))
    {
      ACE_THROW_RETURN (::CORBA::NO_IMPLEMENT (), 0);
    }

    ::Components::ConsumerDescriptions *
    Producer_Servant::get_named_consumers (
    const ::Components::NameList & /* names */
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName))
    {
      ACE_THROW_RETURN (::CORBA::NO_IMPLEMENT (), 0);
    }

    ::Components::Cookie *
    Producer_Servant::subscribe (
    const char *publisher_name,
    ::Components::EventConsumerBase_ptr subscribe
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName,
    ::Components::InvalidConnection,
    ::Components::ExceededConnectionLimit))
    {
      // Just in case there are no if blocks
      ACE_UNUSED_ARG (subscribe);

      if (publisher_name == 0)
      {
        ACE_THROW_RETURN (::Components::InvalidName (), 0);
      }

      if (ACE_OS::strcmp (publisher_name, "timeout") == 0)
      {
        ::EC_Benchmark::TimeOutConsumer_var _ciao_consumer =
        ::EC_Benchmark::TimeOutConsumer::_narrow (
        subscribe
        ACE_ENV_ARG_PARAMETER);
        ACE_CHECK_RETURN (0);

        if (::CORBA::is_nil (_ciao_consumer.in ()))
        {
          ACE_THROW_RETURN (::Components::InvalidConnection (), 0);
        }

        return this->subscribe_timeout (
        _ciao_consumer.in ()
        ACE_ENV_ARG_PARAMETER);
      }

      ACE_THROW_RETURN (::Components::InvalidName (), 0);
    }

    ::Components::EventConsumerBase_ptr
    Producer_Servant::unsubscribe (
    const char *publisher_name,
    ::Components::Cookie *ck
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName,
    ::Components::InvalidConnection))
    {
      // Just in case there are no if blocks
      ACE_UNUSED_ARG (ck);

      if (publisher_name == 0)
      {
        ACE_THROW_RETURN (
        ::Components::InvalidName (),
        ::Components::EventConsumerBase::_nil ());
      }

      if (ACE_OS::strcmp (publisher_name, "timeout") == 0)
      {
        return this->unsubscribe_timeout (
        ck
        ACE_ENV_ARG_PARAMETER);
      }

      ACE_THROW_RETURN (
      ::Components::InvalidName (),
      ::Components::EventConsumerBase::_nil ());
    }

    ::Components::PublisherDescriptions *
    Producer_Servant::get_all_publishers (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ACE_THROW_RETURN (::CORBA::NO_IMPLEMENT (), 0);
    }

    ::Components::PublisherDescriptions *
    Producer_Servant::get_named_publishers (
    const ::Components::NameList & /* names */
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidName))
    {
      ACE_THROW_RETURN (::CORBA::NO_IMPLEMENT (), 0);
    }

    // Operations for CCMObject interface.

    void
    Producer_Servant::component_UUID (
    const char * new_component_UUID
    ACE_ENV_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      this->component_UUID_ = new_component_UUID;
    }

    CIAO::CONNECTION_ID
    Producer_Servant::component_UUID (
    ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      return CORBA::string_dup (this->component_UUID_.c_str ());
    }

    CORBA::IRObject_ptr
    Producer_Servant::get_component_def (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ACE_THROW_RETURN (
      ::CORBA::NO_IMPLEMENT (),
      ::CORBA::IRObject::_nil ());
    }

    void
    Producer_Servant::configuration_complete (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::InvalidConfiguration))
    {
      // CIAO to-do
    }

    void
    Producer_Servant::remove (
    ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::RemoveFailure))
    {
      // CIAO to-do
    }

    CORBA::Object_ptr
    Producer_Servant::get_facet_executor (const char *name
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException))
    {
      if (name == 0)
      {
        ACE_THROW_RETURN (
        ::CORBA::BAD_PARAM (),
        ::CORBA::Object::_nil ());
      }

       return CORBA::Object::_nil ();
    }

    // Supported operations.

    // Component attribute operations.

    // Private method to populate the port tables.
    void
    Producer_Servant::populate_port_tables (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ::CORBA::Object_var obj_var;
      ::Components::EventConsumerBase_var ecb_var;
    }
  }

  namespace CIAO_GLUE_EC_Benchmark
  {
    ProducerHome_Servant::ProducerHome_Servant (
    ::EC_Benchmark::CCM_ProducerHome_ptr exe,
    ::CIAO::Session_Container *c)
    : executor_ (::EC_Benchmark::CCM_ProducerHome::_duplicate (exe)),
    container_ (c)
    {
    }

    ProducerHome_Servant::~ProducerHome_Servant (void)
    {
    }

    // Home operations.

    // Home supported interface operations.

    // Home factory and finder operations.

    // Home attribute operations.

    // Operations for keyless home interface.

    ::Components::CCMObject_ptr
    ProducerHome_Servant::create_component (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::CreateFailure))
    {
      return this->create (ACE_ENV_SINGLE_ARG_PARAMETER);
    }

    // Operations for implicit home interface.

    ::EC_Benchmark::Producer_ptr
    ProducerHome_Servant::create (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::CreateFailure))
    {
      if (this->executor_.in () == 0)
      {
        ACE_THROW_RETURN (
        ::CORBA::INTERNAL (),
        ::EC_Benchmark::Producer::_nil ());
      }

      ::Components::EnterpriseComponent_var _ciao_ec =
      this->executor_->create (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK_RETURN (::EC_Benchmark::Producer::_nil ());

      ::EC_Benchmark::CCM_Producer_var _ciao_comp =
      ::EC_Benchmark::CCM_Producer::_narrow (
      _ciao_ec.in ()
      ACE_ENV_ARG_PARAMETER);
      ACE_CHECK_RETURN (::EC_Benchmark::Producer::_nil ());

      return this->_ciao_activate_component (
      _ciao_comp.in ()
      ACE_ENV_ARG_PARAMETER);
    }

    // Operations for CCMHome interface.

    ::CORBA::IRObject_ptr
    ProducerHome_Servant::get_component_def (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ACE_THROW_RETURN (
      ::CORBA::NO_IMPLEMENT (),
      ::CORBA::IRObject::_nil ());
    }

    ::CORBA::IRObject_ptr
    ProducerHome_Servant::get_home_def (
    ACE_ENV_SINGLE_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ACE_THROW_RETURN (
      ::CORBA::NO_IMPLEMENT (),
      ::CORBA::IRObject::_nil ());
    }

    void
    ProducerHome_Servant::remove_component (
    ::Components::CCMObject_ptr comp
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Components::RemoveFailure))
    {
      ::EC_Benchmark::Producer_var _ciao_comp =
      ::EC_Benchmark::Producer::_narrow (
      comp
      ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;

      if (CORBA::is_nil (_ciao_comp.in ()))
      {
        ACE_THROW (CORBA::INTERNAL ());
      }

      _ciao_comp->remove (ACE_ENV_SINGLE_ARG_PARAMETER);
      ACE_CHECK;

      this->_ciao_passivate_component (
      _ciao_comp.in ()
      ACE_ENV_ARG_PARAMETER);
    }

    // CIAO-specific operations.

    ::EC_Benchmark::Producer_ptr
    ProducerHome_Servant::_ciao_activate_component (
    ::EC_Benchmark::CCM_Producer_ptr exe
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      ::CORBA::Object_var hobj =
      this->container_->get_objref (
      this
      ACE_ENV_ARG_PARAMETER);
      ACE_CHECK_RETURN (::EC_Benchmark::Producer::_nil ());

      ::Components::CCMHome_var home =
      ::Components::CCMHome::_narrow (
      hobj.in ()
      ACE_ENV_ARG_PARAMETER);
      ACE_CHECK_RETURN (::EC_Benchmark::Producer::_nil ());

      Producer_Servant *svt =
      new Producer_Servant (
      exe,
      home.in (),
      this->container_);

      PortableServer::ServantBase_var safe (svt);
      PortableServer::ObjectId_var oid;

      CORBA::Object_var objref =
      this->container_->install_component (
      svt,
      oid.out ()
      ACE_ENV_ARG_PARAMETER);
      ACE_CHECK_RETURN (::EC_Benchmark::Producer::_nil ());

      ::EC_Benchmark::Producer_var ho =
      ::EC_Benchmark::Producer::_narrow (
      objref.in ()
      ACE_ENV_ARG_PARAMETER);
      ACE_CHECK_RETURN (::EC_Benchmark::Producer::_nil ());

      if (this->component_map_.bind (oid.in (), svt) == 0)
      {
        safe._retn ();
      }

      return ho._retn ();
    }

    void
    ProducerHome_Servant::_ciao_passivate_component (
    ::EC_Benchmark::Producer_ptr comp
    ACE_ENV_ARG_DECL)
    ACE_THROW_SPEC ((CORBA::SystemException))
    {
      PortableServer::ObjectId_var oid;

      this->container_->uninstall_component (
      comp,
      oid.out ()
      ACE_ENV_ARG_PARAMETER);
      ACE_CHECK;

      Producer_Servant *servant = 0;

      if (this->component_map_.unbind (oid.in (), servant) == 0)
      {
        PortableServer::ServantBase_var safe (servant);

        servant->_ciao_passivate (ACE_ENV_SINGLE_ARG_PARAMETER);
        ACE_CHECK;
      }
    }
  }

  extern "C" PRODUCER_SVNT_Export ::PortableServer::Servant
  createProducerHome_Servant (
  ::Components::HomeExecutorBase_ptr p,
  CIAO::Session_Container *c
  ACE_ENV_ARG_DECL)
  {
    if (p == 0)
    {
      return 0;
    }

    ::EC_Benchmark::CCM_ProducerHome_var x =
    ::EC_Benchmark::CCM_ProducerHome::_narrow (
    p
    ACE_ENV_ARG_PARAMETER);
    ACE_CHECK_RETURN (0);

    if (::CORBA::is_nil (x.in ()))
    {
      return 0;
    }

    return new
    CIAO_GLUE_EC_Benchmark::ProducerHome_Servant (
    x.in (),
    c);
  }
}

