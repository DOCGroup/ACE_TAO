// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#ifndef CIAO_GLUE_SESSION_RECEIVER_SVNT_H
#define CIAO_GLUE_SESSION_RECEIVER_SVNT_H

#include /**/ "ace/pre.h"

#include "ReceiverEC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "ciao/Container_Base.h"
#include "ciao/Swapping_Container.h"
#include "ciao/Servant_Impl_T.h"
#include "ciao/Context_Impl_T.h"
#include "ciao/Home_Servant_Impl_T.h"
#include "ciao/Swapping_Servant_Home_Impl_T.h"
#include "ace/Active_Map_Manager_T.h"

#include "ReceiverS.h"

namespace Receiver_Impl
{
  namespace CIAO_GLUE_Hello
  {
    class Receiver_Servant;

    class RECEIVER_SVNT_Export Receiver_Context
      : public virtual CIAO::Context_Impl<
          ::Hello::CCM_Receiver_Context,
          Receiver_Servant,
          ::Hello::Receiver,
          ::Hello::Receiver_var
        >
    {
      public:
      // We will allow the servant glue code we generate to access our state.
      friend class Receiver_Servant;

      /// Hack for VC6.
      typedef CIAO::Context_Impl<
          ::Hello::CCM_Receiver_Context,
          Receiver_Servant,
          ::Hello::Receiver,
          ::Hello::Receiver_var
        > ctx_svnt_base;

      Receiver_Context (
      ::Components::CCMHome_ptr home,
      ::CIAO::Swapping_Container *c,
      Receiver_Servant *sv);

      virtual ~Receiver_Context (void);

      // Operations for Receiver receptacles and event sources,
      // defined in ::Hello::CCM_Receiver_Context.

      // CIAO-specific.

      static Receiver_Context *
      _narrow (
      ::Components::SessionContext_ptr p
      ACE_ENV_ARG_DECL_WITH_DEFAULTS);

      protected:
      // Methods that manage this component's connections and consumers.

      protected:
    };
  }

  namespace CIAO_GLUE_Hello
  {
    class RECEIVER_SVNT_Export Receiver_Servant
      : public virtual CIAO::Servant_Impl<
          POA_Hello::Receiver,
          ::Hello::CCM_Receiver,
          ::Hello::CCM_Receiver_var,
          Receiver_Context
        >
    {
      public:
      /// Hack for VC6.
      typedef CIAO::Servant_Impl<
          POA_Hello::Receiver,
          ::Hello::CCM_Receiver,
          ::Hello::CCM_Receiver_var,
          Receiver_Context
        > comp_svnt_base;

      Receiver_Servant (
      ::Hello::CCM_Receiver_ptr executor,
      ::Components::CCMHome_ptr home,
      ::CIAO::Swapping_Container *c);

      virtual ~Receiver_Servant (void);

      virtual void
      set_attributes (
      const ::Components::ConfigValues &descr
      ACE_ENV_ARG_DECL);

      // Supported operations.

      // Public port operations.

      // Component attribute operations.

      // Operations for Receptacles interface.

      virtual ::Components::Cookie *
      connect (
      const char *name,
      CORBA::Object_ptr connection
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::InvalidName,
      ::Components::InvalidConnection,
      ::Components::AlreadyConnected,
      ::Components::ExceededConnectionLimit));

      virtual CORBA::Object_ptr
      disconnect (
      const char *name,
      ::Components::Cookie *ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::InvalidName,
      ::Components::InvalidConnection,
      ::Components::CookieRequired,
      ::Components::NoConnection));

      // Operations for Events interface.

      virtual ::Components::Cookie *
      subscribe (
      const char *publisher_name,
      ::Components::EventConsumerBase_ptr subscriber
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::InvalidName,
      ::Components::InvalidConnection,
      ::Components::ExceededConnectionLimit));

      virtual ::Components::EventConsumerBase_ptr
      unsubscribe (
      const char *publisher_name,
      ::Components::Cookie *ck
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::InvalidName,
      ::Components::InvalidConnection));

      virtual void
      connect_consumer (
      const char *emitter_name,
      ::Components::EventConsumerBase_ptr consumer
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Components::InvalidName,
      ::Components::AlreadyConnected,
      ::Components::InvalidConnection));

      // CIAO specific operations on the servant 
      CORBA::Object_ptr
      get_facet_executor (const char *name
      ACE_ENV_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC ((
      ::CORBA::SystemException));

      private:

      private:

      void
      populate_port_tables (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)
      ACE_THROW_SPEC ((CORBA::SystemException));
    };
  }

  namespace CIAO_GLUE_Hello
  {
    class RECEIVER_SVNT_Export ReceiverHome_Servant
      : public virtual CIAO::Swapping_Servant_Home_Impl<
          POA_Hello::ReceiverHome,
          ::Hello::CCM_ReceiverHome,
          ::Hello::CCM_ReceiverHome_var,
          ::Hello::Receiver,
          ::Hello::Receiver_var,
          ::Hello::CCM_Receiver,
          ::Hello::CCM_Receiver_var,
          Receiver_Servant
        >
    {
      public:
      /// Hack for VC6.
      typedef CIAO::Swapping_Servant_Home_Impl<
          POA_Hello::ReceiverHome,
          ::Hello::CCM_ReceiverHome,
          ::Hello::CCM_ReceiverHome_var,
          ::Hello::Receiver,
          ::Hello::Receiver_var,
          ::Hello::CCM_Receiver,
          ::Hello::CCM_Receiver_var,
          Receiver_Servant
        > home_svnt_base;

      ReceiverHome_Servant (
      ::Hello::CCM_ReceiverHome_ptr exe,
      ::CIAO::Swapping_Container *c);

      virtual ~ReceiverHome_Servant (void);

      // Home operations.

      // Home factory and finder operations.

      // Attribute operations.
    };

    extern "C" RECEIVER_SVNT_Export ::PortableServer::Servant
    createReceiverHome_Servant (
    ::Components::HomeExecutorBase_ptr p,
    CIAO::Swapping_Container *c
    ACE_ENV_ARG_DECL_WITH_DEFAULTS);
  }
}

#include /**/ "ace/post.h"

#endif /* CIAO_GLUE_SESSION_RECEIVER_SVNT_H */

