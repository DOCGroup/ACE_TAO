--- orig/GIOPC.i	Thu Jan 10 11:45:43 2002
+++ GIOPC.i	Thu Jan 10 11:39:27 2002
@@ -1,168 +1,11 @@
-// -*- C++ -*-
-//
-// $Id$
+/* -*- C++ -*- $Id$ */
 
-// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
-// TAO and the TAO IDL Compiler have been developed by:
-//       Center for Distributed Object Computing
-//       Washington University
-//       St. Louis, MO
-//       USA
-//       http://www.cs.wustl.edu/~schmidt/doc-center.html
-// and
-//       Distributed Object Computing Laboratory
-//       University of California at Irvine
-//       Irvine, CA
-//       USA
-//       http://doc.ece.uci.edu/
+// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
+// TAO and the TAO IDL Compiler have been developed by the Center for
+// Distributed Object Computing at Washington University, St. Louis.
 //
 // Information about TAO is available at:
-//     http://www.cs.wustl.edu/~schmidt/TAO.html
-
-// *************************************************************
-// Inline operations for class GIOP::Version_var
-// *************************************************************
-
-ACE_INLINE
-GIOP::Version_var::Version_var (void) // default constructor
-  : ptr_ (0)
-{}
-
-ACE_INLINE
-GIOP::Version_var::Version_var (Version *p)
-  : ptr_ (p)
-{}
-
-ACE_INLINE
-GIOP::Version_var::Version_var (const ::GIOP::Version_var &p) // copy constructor
-{
-  if (p.ptr_)
-    ACE_NEW (this->ptr_, ::GIOP::Version (*p.ptr_));
-  else
-    this->ptr_ = 0;
-}
-
-// fixed-size types only
-ACE_INLINE
-GIOP::Version_var::Version_var (const ::GIOP::Version &p)
-{
-  ACE_NEW (this->ptr_, ::GIOP::Version (p));
-}
-
-ACE_INLINE
-GIOP::Version_var::~Version_var (void) // destructor
-{
-  delete this->ptr_;
-}
-
-ACE_INLINE GIOP::Version_var &
-GIOP::Version_var::operator= (Version *p)
-{
-  delete this->ptr_;
-  this->ptr_ = p;
-  return *this;
-}
-
-ACE_INLINE ::GIOP::Version_var &
-GIOP::Version_var::operator= (const ::GIOP::Version_var &p)
-{
-  if (this != &p)
-    {
-      if (p.ptr_ == 0)
-        {
-          delete this->ptr_;
-          this->ptr_ = 0;
-        }
-      else
-        {
-          Version *deep_copy =
-            new Version (*p.ptr_);
-          
-          if (deep_copy != 0)
-            {
-              Version *tmp = deep_copy;
-              deep_copy = this->ptr_;
-              this->ptr_ = tmp;
-              delete deep_copy;
-            }
-        }
-    }
-  
-  return *this;
-}
-
-// fixed-size types only
-ACE_INLINE GIOP::Version_var &
-GIOP::Version_var::operator= (const ::GIOP::Version &p)
-{
-  if (this->ptr_ != &p)
-  {
-    delete this->ptr_;
-    ACE_NEW_RETURN (this->ptr_, ::GIOP::Version (p), *this);
-  }
-  return *this;
-}
-
-ACE_INLINE const ::GIOP::Version *
-GIOP::Version_var::operator-> (void) const
-{
-  return this->ptr_;
-}
-
-ACE_INLINE ::GIOP::Version *
-GIOP::Version_var::operator-> (void)
-{
-  return this->ptr_;
-}
-
-ACE_INLINE
-GIOP::Version_var::operator const ::GIOP::Version &() const // cast
-{
-  return *this->ptr_;
-}
-
-ACE_INLINE
-GIOP::Version_var::operator ::GIOP::Version &() // cast 
-{
-  return *this->ptr_;
-}
-
-ACE_INLINE
-GIOP::Version_var::operator ::GIOP::Version &() const // cast 
-{
-  return *this->ptr_;
-}
-
-ACE_INLINE const ::GIOP::Version &
-GIOP::Version_var::in (void) const
-{
-  return *this->ptr_;
-}
-
-ACE_INLINE ::GIOP::Version &
-GIOP::Version_var::inout (void)
-{
-  return *this->ptr_;
-}
-
-// mapping for fixed size 
-ACE_INLINE ::GIOP::Version &
-GIOP::Version_var::out (void)
-{
-  return *this->ptr_;
-}
-
-ACE_INLINE ::GIOP::Version
-GIOP::Version_var::_retn (void)
-{
-  return *this->ptr_;
-}
-
-ACE_INLINE ::GIOP::Version *
-GIOP::Version_var::ptr (void) const
-{
-  return this->ptr_;
-}
+//                 http://www.cs.wustl.edu/~schmidt/TAO.html
 
 // *************************************************************
 // Inline operations for class GIOP::IORAddressingInfo_var
@@ -174,15 +17,15 @@
 {}
 
 ACE_INLINE
-GIOP::IORAddressingInfo_var::IORAddressingInfo_var (IORAddressingInfo *p)
+GIOP::IORAddressingInfo_var::IORAddressingInfo_var (GIOP::IORAddressingInfo *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-GIOP::IORAddressingInfo_var::IORAddressingInfo_var (const ::GIOP::IORAddressingInfo_var &p) // copy constructor
+GIOP::IORAddressingInfo_var::IORAddressingInfo_var (const GIOP::IORAddressingInfo_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::GIOP::IORAddressingInfo (*p.ptr_));
+    ACE_NEW (this->ptr_, GIOP::IORAddressingInfo (*p.ptr_));
   else
     this->ptr_ = 0;
 }
@@ -194,15 +37,15 @@
 }
 
 ACE_INLINE GIOP::IORAddressingInfo_var &
-GIOP::IORAddressingInfo_var::operator= (IORAddressingInfo *p)
+GIOP::IORAddressingInfo_var::operator= (GIOP::IORAddressingInfo *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::GIOP::IORAddressingInfo_var &
-GIOP::IORAddressingInfo_var::operator= (const ::GIOP::IORAddressingInfo_var &p)
+ACE_INLINE GIOP::IORAddressingInfo_var &
+GIOP::IORAddressingInfo_var::operator= (const GIOP::IORAddressingInfo_var &p)
 {
   if (this != &p)
     {
@@ -213,73 +56,66 @@
         }
       else
         {
-          IORAddressingInfo *deep_copy =
-            new IORAddressingInfo (*p.ptr_);
-          
+          GIOP::IORAddressingInfo *deep_copy =
+            new GIOP::IORAddressingInfo (*p.ptr_);
+
           if (deep_copy != 0)
             {
-              IORAddressingInfo *tmp = deep_copy;
+              GIOP::IORAddressingInfo *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
             }
         }
     }
-  
+
   return *this;
 }
 
-ACE_INLINE const ::GIOP::IORAddressingInfo *
+ACE_INLINE const GIOP::IORAddressingInfo *
 GIOP::IORAddressingInfo_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::GIOP::IORAddressingInfo *
+ACE_INLINE GIOP::IORAddressingInfo *
 GIOP::IORAddressingInfo_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE
-GIOP::IORAddressingInfo_var::operator const ::GIOP::IORAddressingInfo &() const // cast
+GIOP::IORAddressingInfo_var::operator const GIOP::IORAddressingInfo &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-GIOP::IORAddressingInfo_var::operator ::GIOP::IORAddressingInfo &() // cast 
+GIOP::IORAddressingInfo_var::operator GIOP::IORAddressingInfo &() // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE
-GIOP::IORAddressingInfo_var::operator ::GIOP::IORAddressingInfo &() const // cast 
+GIOP::IORAddressingInfo_var::operator GIOP::IORAddressingInfo &() const// cast
 {
   return *this->ptr_;
 }
 
-// variable-size types only
-ACE_INLINE
-GIOP::IORAddressingInfo_var::operator ::GIOP::IORAddressingInfo *&() // cast 
-{
-  return this->ptr_;
-}
-
-ACE_INLINE const ::GIOP::IORAddressingInfo &
+ACE_INLINE const GIOP::IORAddressingInfo &
 GIOP::IORAddressingInfo_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::GIOP::IORAddressingInfo &
+ACE_INLINE GIOP::IORAddressingInfo &
 GIOP::IORAddressingInfo_var::inout (void)
 {
   return *this->ptr_;
 }
 
-// mapping for variable size 
-ACE_INLINE ::GIOP::IORAddressingInfo *&
+// mapping for variable size
+ACE_INLINE GIOP::IORAddressingInfo *&
 GIOP::IORAddressingInfo_var::out (void)
 {
   delete this->ptr_;
@@ -287,15 +123,15 @@
   return this->ptr_;
 }
 
-ACE_INLINE ::GIOP::IORAddressingInfo *
+ACE_INLINE GIOP::IORAddressingInfo *
 GIOP::IORAddressingInfo_var::_retn (void)
 {
-  ::GIOP::IORAddressingInfo *tmp = this->ptr_;
+  GIOP::IORAddressingInfo *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::GIOP::IORAddressingInfo *
+ACE_INLINE GIOP::IORAddressingInfo *
 GIOP::IORAddressingInfo_var::ptr (void) const
 {
   return this->ptr_;
@@ -306,14 +142,14 @@
 // *************************************************************
 
 ACE_INLINE
-GIOP::IORAddressingInfo_out::IORAddressingInfo_out (::GIOP::IORAddressingInfo *&p)
+GIOP::IORAddressingInfo_out::IORAddressingInfo_out (GIOP::IORAddressingInfo *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-GIOP::IORAddressingInfo_out::IORAddressingInfo_out (IORAddressingInfo_var &p) // constructor from _var
+GIOP::IORAddressingInfo_out::IORAddressingInfo_out (GIOP::IORAddressingInfo_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -321,37 +157,37 @@
 }
 
 ACE_INLINE
-GIOP::IORAddressingInfo_out::IORAddressingInfo_out (const ::GIOP::IORAddressingInfo_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (IORAddressingInfo_out&, p).ptr_)
+GIOP::IORAddressingInfo_out::IORAddressingInfo_out (const GIOP::IORAddressingInfo_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (GIOP::IORAddressingInfo_out&,p).ptr_)
 {}
 
 ACE_INLINE GIOP::IORAddressingInfo_out &
-GIOP::IORAddressingInfo_out::operator= (const ::GIOP::IORAddressingInfo_out &p)
+GIOP::IORAddressingInfo_out::operator= (const GIOP::IORAddressingInfo_out &p)
 {
-  this->ptr_ = ACE_const_cast (IORAddressingInfo_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (GIOP::IORAddressingInfo_out&,p).ptr_;
   return *this;
 }
 
 ACE_INLINE GIOP::IORAddressingInfo_out &
-GIOP::IORAddressingInfo_out::operator= (IORAddressingInfo *p)
+GIOP::IORAddressingInfo_out::operator= (GIOP::IORAddressingInfo *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE 
-GIOP::IORAddressingInfo_out::operator ::GIOP::IORAddressingInfo *&() // cast
+ACE_INLINE
+GIOP::IORAddressingInfo_out::operator GIOP::IORAddressingInfo *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::GIOP::IORAddressingInfo *&
+ACE_INLINE GIOP::IORAddressingInfo *&
 GIOP::IORAddressingInfo_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::GIOP::IORAddressingInfo *
+ACE_INLINE GIOP::IORAddressingInfo *
 GIOP::IORAddressingInfo_out::operator-> (void)
 {
   return this->ptr_;
@@ -361,8 +197,24 @@
 // Inline operations for union GIOP::TargetAddress
 // *************************************************************
 
+// destructor
+ACE_INLINE
+GIOP::TargetAddress::~TargetAddress (void)
+{
+  // finalize
+  this->_reset (this->disc_, 1);
+}
+
+// this reset method is used by the decoding engine
+ACE_INLINE void
+GIOP::TargetAddress::_reset (void)
+{
+  this->_reset (this->disc_, 1);
+  ACE_OS::memcpy (&this->u_, 0, sizeof (this->u_));
+}
+
 // the implicit _default () method
-ACE_INLINE void 
+ACE_INLINE void
 GIOP::TargetAddress::_default ()
 {
   this->disc_ = -32768;
@@ -381,28 +233,29 @@
   return this->disc_;
 }
 
+
 // accessor to set the member
 ACE_INLINE void
-GIOP::TargetAddress::object_key (const GIOP::TargetAddress::_tao_seq_Octet &val)
+GIOP::TargetAddress::object_key (const TAO_ObjectKey &val)
 {
   // set the discriminant val
   this->_reset (0, 0);
   this->disc_ = 0;
   ACE_NEW (
       this->u_.object_key_,
-      GIOP::TargetAddress::_tao_seq_Octet (val)
+      TAO_ObjectKey (val)
     );
 }
 
-// readonly get method 
-ACE_INLINE const GIOP::TargetAddress::_tao_seq_Octet &
+// readonly get method
+ACE_INLINE const TAO_ObjectKey &
 GIOP::TargetAddress::object_key (void) const
 {
   return *this->u_.object_key_;
 }
 
-// read/write get method 
-ACE_INLINE GIOP::TargetAddress::_tao_seq_Octet &
+// read/write get method
+ACE_INLINE TAO_ObjectKey &
 GIOP::TargetAddress::object_key (void)
 {
   return *this->u_.object_key_;
@@ -421,14 +274,14 @@
     );
 }
 
-// readonly get method 
+// readonly get method
 ACE_INLINE const IOP::TaggedProfile &
 GIOP::TargetAddress::profile (void) const
 {
   return *this->u_.profile_;
 }
 
-// read/write get method 
+// read/write get method
 ACE_INLINE IOP::TaggedProfile &
 GIOP::TargetAddress::profile (void)
 {
@@ -448,14 +301,14 @@
     );
 }
 
-// readonly get method 
+// readonly get method
 ACE_INLINE const GIOP::IORAddressingInfo &
 GIOP::TargetAddress::ior (void) const
 {
   return *this->u_.ior_;
 }
 
-// read/write get method 
+// read/write get method
 ACE_INLINE GIOP::IORAddressingInfo &
 GIOP::TargetAddress::ior (void)
 {
@@ -476,15 +329,15 @@
 {}
 
 ACE_INLINE
-GIOP::TargetAddress_var::TargetAddress_var (TargetAddress *p)
+GIOP::TargetAddress_var::TargetAddress_var (GIOP::TargetAddress *p)
   : ptr_ (p)
 {}
 
 ACE_INLINE
-GIOP::TargetAddress_var::TargetAddress_var (const ::GIOP::TargetAddress_var &p) // copy constructor
+GIOP::TargetAddress_var::TargetAddress_var (const GIOP::TargetAddress_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::GIOP::TargetAddress (*p.ptr_));
+    ACE_NEW (this->ptr_, GIOP::TargetAddress (*p.ptr_));
   else
     this->ptr_ = 0;
 }
@@ -495,16 +348,16 @@
   delete this->ptr_;
 }
 
-ACE_INLINE ::GIOP::TargetAddress_var &
-GIOP::TargetAddress_var::operator= (TargetAddress *p)
+ACE_INLINE GIOP::TargetAddress_var &
+GIOP::TargetAddress_var::operator= (GIOP::TargetAddress *p)
 {
   delete this->ptr_;
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE ::GIOP::TargetAddress_var &
-GIOP::TargetAddress_var::operator= (const ::GIOP::TargetAddress_var &p)
+ACE_INLINE GIOP::TargetAddress_var &
+GIOP::TargetAddress_var::operator= (const GIOP::TargetAddress_var &p)
 {
   if (this != &p)
     {
@@ -515,73 +368,66 @@
         }
       else
         {
-          TargetAddress *deep_copy =
-            new TargetAddress (*p.ptr_);
-          
+          GIOP::TargetAddress *deep_copy =
+            new GIOP::TargetAddress (*p.ptr_);
+
           if (deep_copy != 0)
             {
-              TargetAddress *tmp = deep_copy;
+              GIOP::TargetAddress *tmp = deep_copy;
               deep_copy = this->ptr_;
               this->ptr_ = tmp;
               delete deep_copy;
             }
         }
     }
-  
+
   return *this;
 }
 
-ACE_INLINE const ::GIOP::TargetAddress *
+ACE_INLINE const GIOP::TargetAddress *
 GIOP::TargetAddress_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::GIOP::TargetAddress *
+ACE_INLINE GIOP::TargetAddress *
 GIOP::TargetAddress_var::operator-> (void)
 {
   return this->ptr_;
 }
 
-ACE_INLINE 
-GIOP::TargetAddress_var::operator const ::GIOP::TargetAddress &() const // cast
-{
-  return *this->ptr_;
-}
-
-ACE_INLINE 
-GIOP::TargetAddress_var::operator ::GIOP::TargetAddress &() // cast 
+ACE_INLINE
+GIOP::TargetAddress_var::operator const GIOP::TargetAddress &() const // cast
 {
   return *this->ptr_;
 }
 
-ACE_INLINE 
-GIOP::TargetAddress_var::operator ::GIOP::TargetAddress &() const// cast 
+ACE_INLINE
+GIOP::TargetAddress_var::operator GIOP::TargetAddress &() // cast
 {
   return *this->ptr_;
 }
 
-// variable-size types only
 ACE_INLINE
-GIOP::TargetAddress_var::operator ::GIOP::TargetAddress *&() // cast 
+GIOP::TargetAddress_var::operator GIOP::TargetAddress &() const// cast
 {
-  return this->ptr_;
+  return *this->ptr_;
 }
 
-ACE_INLINE const ::GIOP::TargetAddress &
+ACE_INLINE const GIOP::TargetAddress &
 GIOP::TargetAddress_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::GIOP::TargetAddress &
+ACE_INLINE GIOP::TargetAddress &
 GIOP::TargetAddress_var::inout (void)
 {
   return *this->ptr_;
 }
 
-// mapping for variable size 
-ACE_INLINE ::GIOP::TargetAddress *&
+// mapping for variable size
+ACE_INLINE GIOP::TargetAddress *&
 GIOP::TargetAddress_var::out (void)
 {
   delete this->ptr_;
@@ -589,15 +435,15 @@
   return this->ptr_;
 }
 
-ACE_INLINE ::GIOP::TargetAddress *
+ACE_INLINE GIOP::TargetAddress *
 GIOP::TargetAddress_var::_retn (void)
 {
-  ::GIOP::TargetAddress *tmp = this->ptr_;
+  GIOP::TargetAddress *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::GIOP::TargetAddress *
+ACE_INLINE GIOP::TargetAddress *
 GIOP::TargetAddress_var::ptr (void) const
 {
   return this->ptr_;
@@ -615,14 +461,14 @@
 // *************************************************************
 
 ACE_INLINE
-GIOP::TargetAddress_out::TargetAddress_out (TargetAddress *&p)
+GIOP::TargetAddress_out::TargetAddress_out (GIOP::TargetAddress *&p)
   : ptr_ (p)
 {
   this->ptr_ = 0;
 }
 
 ACE_INLINE
-GIOP::TargetAddress_out::TargetAddress_out (TargetAddress_var &p) // constructor from _var
+GIOP::TargetAddress_out::TargetAddress_out (GIOP::TargetAddress_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   delete this->ptr_;
@@ -630,37 +476,37 @@
 }
 
 ACE_INLINE
-GIOP::TargetAddress_out::TargetAddress_out (const ::GIOP::TargetAddress_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (TargetAddress_out&, p).ptr_)
+GIOP::TargetAddress_out::TargetAddress_out (const GIOP::TargetAddress_out &p) // copy constructor
+  : ptr_ (ACE_const_cast (GIOP::TargetAddress_out&,p).ptr_)
 {}
 
-ACE_INLINE ::GIOP::TargetAddress_out &
-GIOP::TargetAddress_out::operator= (const ::GIOP::TargetAddress_out &p)
+ACE_INLINE GIOP::TargetAddress_out &
+GIOP::TargetAddress_out::operator= (const GIOP::TargetAddress_out &p)
 {
-  this->ptr_ = ACE_const_cast (TargetAddress_out&, p).ptr_;
+  this->ptr_ = ACE_const_cast (GIOP::TargetAddress_out&,p).ptr_;
   return *this;
 }
 
-ACE_INLINE ::GIOP::TargetAddress_out &
-GIOP::TargetAddress_out::operator= (TargetAddress *p)
+ACE_INLINE GIOP::TargetAddress_out &
+GIOP::TargetAddress_out::operator= (GIOP::TargetAddress *p)
 {
   this->ptr_ = p;
   return *this;
 }
 
-ACE_INLINE 
-GIOP::TargetAddress_out::operator ::GIOP::TargetAddress *&() // cast
+ACE_INLINE
+GIOP::TargetAddress_out::operator GIOP::TargetAddress *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::GIOP::TargetAddress *&
+ACE_INLINE GIOP::TargetAddress *&
 GIOP::TargetAddress_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::GIOP::TargetAddress *
+ACE_INLINE GIOP::TargetAddress *
 GIOP::TargetAddress_out::operator-> (void)
 {
   return this->ptr_;
@@ -669,28 +515,149 @@
 
 #endif /* end #if !defined */
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const GIOP::Version &_tao_aggregate)
+// *************************************************************
+// Inline operations for class GIOP::Version_var
+// *************************************************************
+
+ACE_INLINE
+GIOP::Version_var::Version_var (void) // default constructor
+  : ptr_ (0)
+{}
+
+ACE_INLINE
+GIOP::Version_var::Version_var (Version *p)
+  : ptr_ (p)
+{}
+
+ACE_INLINE
+GIOP::Version_var::Version_var (const ::GIOP::Version_var &p) // copy constructor
 {
-  if (
-    (strm << CORBA::Any::from_octet (_tao_aggregate.major)) &&
-    (strm << CORBA::Any::from_octet (_tao_aggregate.minor))
-  )
-    return 1;
+  if (p.ptr_)
+    ACE_NEW (this->ptr_, ::GIOP::Version (*p.ptr_));
   else
-    return 0;
-  
+    this->ptr_ = 0;
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, GIOP::Version &_tao_aggregate)
+// fixed-size types only
+ACE_INLINE
+GIOP::Version_var::Version_var (const ::GIOP::Version &p)
 {
-  if (
-    (strm >> CORBA::Any::to_octet (_tao_aggregate.major)) &&
-    (strm >> CORBA::Any::to_octet (_tao_aggregate.minor))
-  )
-    return 1;
-  else
-    return 0;
-  
+  ACE_NEW (this->ptr_, ::GIOP::Version (p));
+}
+
+ACE_INLINE
+GIOP::Version_var::~Version_var (void) // destructor
+{
+  delete this->ptr_;
+}
+
+ACE_INLINE GIOP::Version_var &
+GIOP::Version_var::operator= (Version *p)
+{
+  delete this->ptr_;
+  this->ptr_ = p;
+  return *this;
+}
+
+ACE_INLINE ::GIOP::Version_var &
+GIOP::Version_var::operator= (const ::GIOP::Version_var &p)
+{
+  if (this != &p)
+    {
+      if (p.ptr_ == 0)
+        {
+          delete this->ptr_;
+          this->ptr_ = 0;
+        }
+      else
+        {
+          Version *deep_copy =
+            new Version (*p.ptr_);
+
+          if (deep_copy != 0)
+            {
+              Version *tmp = deep_copy;
+              deep_copy = this->ptr_;
+              this->ptr_ = tmp;
+              delete deep_copy;
+            }
+        }
+    }
+
+  return *this;
+}
+
+// fixed-size types only
+ACE_INLINE GIOP::Version_var &
+GIOP::Version_var::operator= (const ::GIOP::Version &p)
+{
+  if (this->ptr_ != &p)
+  {
+    delete this->ptr_;
+    ACE_NEW_RETURN (this->ptr_, ::GIOP::Version (p), *this);
+  }
+  return *this;
+}
+
+ACE_INLINE const ::GIOP::Version *
+GIOP::Version_var::operator-> (void) const
+{
+  return this->ptr_;
+}
+
+ACE_INLINE ::GIOP::Version *
+GIOP::Version_var::operator-> (void)
+{
+  return this->ptr_;
+}
+
+ACE_INLINE
+GIOP::Version_var::operator const ::GIOP::Version &() const // cast
+{
+  return *this->ptr_;
+}
+
+ACE_INLINE
+GIOP::Version_var::operator ::GIOP::Version &() // cast
+{
+  return *this->ptr_;
+}
+
+ACE_INLINE
+GIOP::Version_var::operator ::GIOP::Version &() const // cast
+{
+  return *this->ptr_;
+}
+
+ACE_INLINE const ::GIOP::Version &
+GIOP::Version_var::in (void) const
+{
+  return *this->ptr_;
+}
+
+ACE_INLINE ::GIOP::Version &
+GIOP::Version_var::inout (void)
+{
+  return *this->ptr_;
+}
+
+// mapping for fixed size
+ACE_INLINE ::GIOP::Version &
+GIOP::Version_var::out (void)
+{
+  return *this->ptr_;
+}
+
+ACE_INLINE ::GIOP::Version
+GIOP::Version_var::_retn (void)
+{
+  return *this->ptr_;
+}
+
+ACE_INLINE ::GIOP::Version *
+GIOP::Version_var::ptr (void) const
+{
+  return this->ptr_;
 }
 
 ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const GIOP::IORAddressingInfo &_tao_aggregate)
@@ -702,7 +669,7 @@
     return 1;
   else
     return 0;
-  
+
 }
 
 ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, GIOP::IORAddressingInfo &_tao_aggregate)
@@ -714,23 +681,29 @@
     return 1;
   else
     return 0;
-  
+
 }
 
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const GIOP::Version &ver)
+{
+  if ((strm.write_octet (ver.major)) &&
+      (strm.write_octet (ver.minor)))
+    return 1;
+  else
+    return 0;
+
+}
 
-#if !defined _TAO_CDR_OP_GIOP_TargetAddress__tao_seq_Octet_I_
-#define _TAO_CDR_OP_GIOP_TargetAddress__tao_seq_Octet_I_
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, GIOP::Version &ver)
+{
+  if ((strm.read_octet (ver.major)) &&
+       (strm.read_octet (ver.minor)))
+      return 1;
+      else
+      return 0;
+}
 
-CORBA::Boolean TAO_Export operator<< (
-    TAO_OutputCDR &,
-    const GIOP::TargetAddress::_tao_seq_Octet &
-  );
-CORBA::Boolean TAO_Export operator>> (
-    TAO_InputCDR &,
-    GIOP::TargetAddress::_tao_seq_Octet &
-  );
 
-#endif /* _TAO_CDR_OP_GIOP_TargetAddress__tao_seq_Octet_I_ */
 
 ACE_INLINE CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
@@ -780,13 +753,10 @@
   {
     case 0:
       {
-        GIOP::TargetAddress::_tao_seq_Octet _tao_union_tmp;
+        TAO_ObjectKey _tao_union_tmp;
         result = strm >> _tao_union_tmp;
         if (result)
-          {
-            _tao_union.object_key (_tao_union_tmp);
-            _tao_union._d (_tao_discriminant);
-          }
+          _tao_union.object_key (_tao_union_tmp);
       }
       break;
     case 1:
@@ -794,10 +764,7 @@
         IOP::TaggedProfile _tao_union_tmp;
         result = strm >> _tao_union_tmp;
         if (result)
-          {
-            _tao_union.profile (_tao_union_tmp);
-            _tao_union._d (_tao_discriminant);
-          }
+          _tao_union.profile (_tao_union_tmp);
       }
       break;
     case 2:
@@ -805,10 +772,7 @@
         GIOP::IORAddressingInfo _tao_union_tmp;
         result = strm >> _tao_union_tmp;
         if (result)
-          {
-            _tao_union.ior (_tao_union_tmp);
-            _tao_union._d (_tao_discriminant);
-          }
+          _tao_union.ior (_tao_union_tmp);
       }
       break;
     default:
@@ -817,4 +781,3 @@
   }
   return result;
 }
-
