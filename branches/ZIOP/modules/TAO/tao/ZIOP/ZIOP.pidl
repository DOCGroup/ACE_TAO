#include <orb.idl>
#include "tao/Policy.pidl"

module ZIOP
{
        exception CompressionException {    string reason;};
        exception FactoryAlreadyRegistered {};
        exception UnknownCompressorId {};
        typedef unsigned long CompressorId;
        typedef unsigned long CompressionLevel;
        const unsigned long TAG_IONA_ZIOP_COMPONENT = 1230266182;
        const CORBA::PolicyType COMPRESSION_ENABLING_POLICY_ID = 1230266247;
        const CORBA::PolicyType COMPRESSOR_ID_POLICY_ID = 1230266248;
        local interface CompressorFactory;
        local interface Compressor
        {
                void compress(in CORBA::OctetSeq source, inout CORBA::OctetSeq target) raises(    ZIOP::CompressionException);
                void decompress(in CORBA::OctetSeq source, inout CORBA::OctetSeq target) raises(    ZIOP::CompressionException);
                readonly attribute ZIOP::CompressorFactory compressor_factory;
                readonly attribute CompressionLevel compression_level;
        };

        local interface CompressorFactory
        {
                readonly attribute ZIOP::CompressorId compressor_id;
                readonly attribute unsigned long long compressed_bytes;
                readonly attribute unsigned long long uncompressed_bytes;
                readonly attribute double average_compression;
                ZIOP::Compressor get_compressor(in CompressionLevel compression_level);
                void add_sample(in unsigned long long compressed_bytes, in unsigned long long uncompressed_bytes);
        };
        typedef sequence<ZIOP::CompressorFactory> CompressorFactorySeq;

        local interface CompressionManager
        {
                void register_factory(    in ZIOP::CompressorFactory compressor_factory)raises(    ZIOP::FactoryAlreadyRegistered);
                void unregister_factory(    in ZIOP::CompressorId compressor_id) raises (    ZIOP::UnknownCompressorId);
                ZIOP::CompressorFactory get_factory(    in ZIOP::CompressorId compressor_id)raises(    ZIOP::UnknownCompressorId);
                ZIOP::Compressor get_compressor(    in ZIOP::CompressorId compressor_id,    in CompressionLevel compression_level)raises(    ZIOP::UnknownCompressorId);
                ZIOP::CompressorFactorySeq get_factories();
        };

/*        interface CompressionComponent : IOR::Component
        {
                readonly attribute ZIOP::CompressorId compressor_id;
        };

        interface CompressionComponentFactory
        {
                ZIOP::CompressionComponent get_compression_component(    in ZIOP::CompressorId compressor_id);
        };*/

        local interface CompressionEnablingPolicy : CORBA::Policy
        {
                readonly attribute boolean compression_enabled;
        };

        local interface CompressorIdPolicy : CORBA::Policy
        {
                readonly attribute ZIOP::CompressorId compressor_id;
        };

};
