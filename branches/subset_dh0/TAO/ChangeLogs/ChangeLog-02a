Sat Jun 29 06:34:29 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Typecode.cpp (member_visibility): Fixed compilation errors
	  in builds  with native exceptions turned off.

Fri Jun 28 18:08:18 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.idl:

	  Updated to better match the IDL in the current joint submission
	  revision.

	* orbsvcs/orbsvcs/CosLoadBalancing.dsp:
	* orbsvcs/orbsvcs/CosLoadBalancing.rc:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.inl:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LeastLoaded.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadMap.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_LoadMap.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_MemberLocator.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_MemberLocator.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_MonitorMap.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_MonitorMap.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Pull_Handler.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Pull_Handler.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Random.h:
	* orbsvcs/orbsvcs/LoadBalancing/LB_Random.cpp:
	* orbsvcs/orbsvcs/LoadBalancing/LB_conf.h:

	  Preliminary implementation of TAO's new load balancer.  It
	  implements the current joint load balancing submission
	  revision.  Do not use yet!  The implementation will be ready
	  prior to the release of the forthcoming beta.

	* orbsvcs/orbsvcs/PG_Default_Property_Validator.h:
	* orbsvcs/orbsvcs/PG_Default_Property_Validator.cpp:
	* orbsvcs/orbsvcs/PG_Null_Property_Validator.h:
	* orbsvcs/orbsvcs/PG_Null_Property_Validator.cpp:

	  New default and no-op property validation classes.

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Location_Equal_To.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Location_Hash.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Property_Utils.h:

	  Export the classes/functions in these files in MS Windows
	  builds.  Corrects link-time errors.

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp (poa):

	  Assert that the cached POA reference is nil before allowing the
	  method to continue.  This method should only be called once.

	  (process_criteria):

	  "org.omg.pg" -> "org.omg.PortableGroup", in accordance with
	  recent updates to the load balancing joint submission.

	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp
	  (object_group):

	  New method that returns object group reference given an
	  ObjectId.

	* orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.cpp
	  (set_default_properties, set_properties_dynamically):

	  "org.omg.pg" -> "org.omg.PortableGroup", in accordance with
	  recent updates to the load balancing joint submission.

  	  (set_default_properties, set_type_properties):
	  (set_properties_dynamically):

	  Invoke the property validator before actually setting any
	  properties.

	* orbsvcs/orbsvcs/PortableGroup/PG_conf.h:

	  Made constant names less verbose.  They were unnecessarily
	  "wordy" before.

Fri Jun 28 16:32:12 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCode.cpp:
	* tao/TypeCode.h:

	  Added missing methods member_visibility() and type_modifier(),
	  both for TypeCodes containing a valuetype. Thanks to Andy
	  Alvarez <andy_alvarez@baxter.com> for pointing this out.

Fri Jun 28 16:28:51 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* Manager.cpp:
	* AMI_Manager.cpp:
	  Fixed use of ACE_CHECK when ACE_TRY_CHECK was needed.

Fri Jun 28 11:50:10 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tests/Big_Twoways/Session.h:
	* tests/Big_Twoways/Session.cpp:
	  Fixed validate_connections() use of ACE_ENV_ARG_DECL, should
	  have been ACE_ENV_SINGLE_ARG_DECL.

Fri Jun 28 09:50:58 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/ORB_Core.cpp:
	* tao/ORB_Core.h: Added an allocator that could be used to
	  allocate buffers used for storing messages within the
	  transport. It is a bad idea to use the same allocators used for
	  the CDR streams.

	* tao/Transport.cpp:
	* tao/GIOP_Message_Base.cpp: Used the new allocators for the
	  incoming message buffers.

Fri Jun 28 10:08:56 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tests/LongUpcalls/Manager.cpp:
	* tests/LongUpcalls/AMI_Manager.cpp:
	  Add validate_connections() trick to avoid TRANSIENT exceptions
	  at run-time.  Check the following bugzilla entries for more
	  info:

	  http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1241
	  http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=189

Fri Jun 28 07:31:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Nested_Upcall_Crash/server.bor:
        * tests/Nested_Upcall_Crash/client.bor:
          Added missing files.

Thu Jun 27 22:04:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/DynamicInterface/DII_Reply_Dispatcher.cpp: Used the
	  input cdr allocators in place of the old message block
	  allocators.

Thu Jun 27 15:41:53 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ClientInterceptorAdapter.h (len_):
	* tao/PortableServer/ServerInterceptorAdapter.h	(len_):

	  Made this data member "const" to enforce the fact that the
	  length of the interceptor list is immutable.

	* tao/ClientInterceptorAdapter.h.inl (len_):
	* tao/PortableServer/ServerInterceptorAdapter.inl (len_):

	  Initialize this data member in the base member initializer list
	  since it is now "const."

Thu Jun 27 17:58:20 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp: Used the
	  input cdr allocators in place of the old message block
	  allocators.

Thu Jun 27 16:54:42 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/ORB_Core.h:
	* tao/ORB_Core.cpp: Made the following changes

	  - Deprecated the option -ORBResources since it served no
	    purpose. The output data was by default created on the TSS and
	    the input data into the ORB was created on the stack by
	    default. With flow control and other parameters affecting the
	    ORB they took appropriate action. The use of this option only
	    complicated code readability and was of zero use.

	  - The variable <use_tss_resources_> that was sprayed all around
	    the place was removed, since there is no use for it once the
	    above option was removed.

	  - The input CDR allocators by default will now be pointing to a
	    global memory pool. The facility to create it on the TSS has been
	    removed since this was not necessary.

	  - Removed 3 allocators that were added for
	    message_blocks. They were added before TAO 1.2 as a temporary
	    measure. Now that 1.2 is  out, time to clean up the mess a bit
	    and deprecate some of the old features.

	  The above changes help us to switch back to an old scheme where
	  we used 3 allocators for the output data path and 3 allocators
	  in the input data path. This reduces confusion.

	* tao/Resource_Factory.h:
	* tao/Resource_Factory.cpp:
	* tao/default_resources.h:
	* tao/default_resources.cpp: Removed all references to
	  use_tss_resources and the usage of -ORBResources option.

	* tao/Synch_Reply_Dispatcher.cpp:
	* tao/Asynch_Reply_Dispatcher.cpp:
	* tao/Transport.cpp:
	* tao/GIOP_Message_Base.cpp:
	* tao/GIOP_Message_Lite.cpp: Changed the usage of allocators. All
	  the allocators now point to the input CDR allocator in the
	  ORB_Core and there should be less confusion now on where the
	  memory for the data is being allocated from.

	* tao/Incoming_Message_Queue.h:
	* tao/Incoming_Message_Queue.cpp:
	* tao/Incoming_Message_Queue.inl: The memory allocated and
	  released for the queue now comes off the memory pool instead of
	  the heap. Changes made to use the memory pool instead of heap.

	* tao/Transport.h: Cosmetic fixes to the documentation.

	* tao/Strategies/DIOP_Transport.cpp: Changed the usage of
	  allocators. All the allocators now point to the input CDR
	  allocator in the ORB_Core and there should be less confusion now
	  on where the memory for the data is being allocated from.

	* docs/Options.html: Documented that -ORBResources is deprecated.

Thu Jun 27 14:55:08 2002  Ossama Othman  <ossama@uci.edu>

	* tao/IORTable/IOR_Table_Impl.h (TAO_IOR_Table_Impl):

          Changed underlying hash map from ACE_Hash_Map_Manager to
          ACE_Hash_Map_Manager_Ex.  The former requires three additional
          template instantiations and used the latter under the hood
          anyway.  This reduces the IORTable library footprint in addition
	  to fixing a link error exhibited in builds that disable implicit
	  template instantiation.  Thanks to Craig for pointing out the
	  build errors.

Thu Jun 27 16:47:36 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/Endpoint.h:
	* tao/Queued_Message.inl: Cosmetic changes.

Thu Jun 27 10:53:51 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Big_Oneways/Session_Control.cpp (session_finished):
	  Pre-connect to the remote sessions before trying to run multiple
	  threads to them. This solves [BUG 1241] for the Big_Oneway
	  test.

Thu Jun 27 10:28:29 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tests/Big_Twoways/Session.h:
	* tests/Big_Twoways/Session.cpp:
	  Pre-connect to the remote sessions before trying to run
	  multiple threads to them.
	  This solves bug 1241:

	  http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1241

Thu Jun 27 07:30:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Makefile.bor:
          Added Nested_Upcall_Crash.

Wed Jun 26 14:07:59 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/IOR_Multicast.cpp:
	* orbsvcs/orbsvcs/Event/ECG_Mcast_EH.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
	* orbsvcs/orbsvcs/AV/MCast.cpp:
	  Remove SOCK_Dgram_Mcast_T references.

Tue Jun 25 16:29:44 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tests/RTCORBA/: Eliminated an unnecessary 10 second wait for
	  platforms were multiple priorities are supported.  The following
	  file were changed.

	  - Banded_Connections/run_test.pl
	  - Client_Propagated/run_test.pl
	  - Collocation/run_test.pl
	  - Linear_Priority/run_test.pl
	  - MT_Client_Protocol_Priority/run_test.pl
	  - Persistent_IOR/run_test.pl
	  - Policy_Combinations/run_test.pl
	  - Private_Connection/run_test.pl
	  - Server_Declared/run_test.pl
	  - Thread_Pool/run_test.pl

Tue Jun 25 15:30:03 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tests/POA/Persistent_ID/server.cpp (destroy_POA): Fixed couple
	  of small errors.  Thanks to Jaiganesh Balasubramanian
	  <jai@doc.ece.uci.edu> for pointing them out.

Tue Jun 25 11:48:39 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* examples/README:
	* examples/AMH:
	* examples/AMH/Makefile:
	  Examples that illustrate how a simple AMH Sink-Server and an AMH
	  middle-server	work.

	* examples/AMH/Sink_Server:
	* examples/AMH/Sink_Server/README:
	* examples/AMH/Sink_Server/Makefile:
	  Example of an AMH 'sink' server that delays a reply to the
	  client by a specific amount of time. While the delayed reply is
	  still pending, the server can asynchronously handle other client
	  requests.

	* examples/AMH/Sink_Server/Test.idl:
	  'Roundtrip' IDL interface. Client stamps every request with a
	  timestamp. The server returns the request with the ame
	  timestamp.

	* examples/AMH/Sink_Server/AMH_Servant.h:
	* examples/AMH/Sink_Server/AMH_Servant.cpp:
	  Implement the AMH Roundtrip interface.

	* examples/AMH/Sink_Server/Base_Server.h:
	* examples/AMH/Sink_Server/Base_Server.cpp:
	  Implements common CORBA server ORB and POA initialisations. Yet
	  another attempt to put a wrapper around the common server-side
	  initialisations.

	* examples/AMH/Sink_Server/Timer_Handler.cpp:
	  Fires servant upcall after a specified period of delay.

	* examples/AMH/Sink_Server/st_server.cpp:
	* examples/AMH/Sink_Server/st_server.conf:
	  Single Threaded Reactive AMH server.

	* examples/AMH/Sink_Server/mt_server.cpp:
	  Multi Threaded AMH server.

	* examples/AMH/Sink_Server/client.cpp:
	  Simple client to test the AMH servers

	* examples/AMH/Sink_Server/run_test.pl:
	  Sample 'one-button' script that illustrates options to the
	  server(ST)/client, what output to expect and what is the
	  real output (in terms of throughput).

Mon Jun 24 17:54:43 2002  Krishnakumar B  <kitty@cs.wustl.edu>

        * rules.tao.GNU (TAO_BETA_VERSION):

          Grab the version information from Version.h rather than VERSION
          as VERSION is not likely to installed when doing a make install.
          Thanks to Bala for the suggestion.

Mon Jun 24 22:37:58 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/Trader/Constraint_Visitors.cpp: Remove unnecessary
	  ACE_TEMPLATE_METHOD_SPECIALIZATION macros.  Fixes build problems on
	  Borland, Solaris, and gcc.

Mon Jun 24 18:47:41 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* tao/Sequence.i: Remove unnecessary ACE_TEMPLATE_METHOD_SPECIALIZATION
	  macros, since the explicit specialization is already done in Sequence.h.
	  According to Section 14.7.3.5 (Explicit Specialization) of the
	  C++ Standard, "Definitions of members of an explicitly specialized class
	  are defined in the same manner as members of normal classes, and not
	  using the explicit specialization syntax."  Fixes build problems on
	  Solaris and Borland compilers.

Thu Jun 20 17:57:23 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tests/POA/Persistent_ID: Added a new test that checks the
	  combination of PERSISTENT & SYSTEM_ID POA policies.

	  A servant is registered on the RootPOA. The client tells the
	  server to create a POA with PERSISTENT & SYSTEM_ID policies.
	  The server does so and returns a object created and registered
	  in the child POA using a system generated id. Before returning
	  the object, the server saves the system generated id. The client
	  make a call on this new object to make sure that the new object
	  is valid.

	  After this the client instructs the server to destroy the child POA.

	  Then the client instructs the server to recreate the child POA.
	  The server does so and returns a object created and registered
	  in the child POA, but this time uses the previous generated id
	  instead of using a newly generated one. Before returning the
	  object, the server saves the system generated id. The client
	  make a call on this new object and on the previous object to
	  make sure that the objects are valid.

	  The following file were added/updated:

	   - tests/POA/Makefile
	   - tests/POA/Makefile.bor
	   - tests/POA/README
	   - tests/POA/Persistent_ID/Makefile
	   - tests/POA/Persistent_ID/Makefile.bor
	   - tests/POA/Persistent_ID/Persistent_ID.dsw
	   - tests/POA/Persistent_ID/README
	   - tests/POA/Persistent_ID/client.bor
	   - tests/POA/Persistent_ID/client.cpp
	   - tests/POA/Persistent_ID/client.dsp
	   - tests/POA/Persistent_ID/run_test.pl
	   - tests/POA/Persistent_ID/server.bor
	   - tests/POA/Persistent_ID/server.cpp
	   - tests/POA/Persistent_ID/server.dsp
	   - tests/POA/Persistent_ID/test.idl
	   - tests/TAO_Tests.dsw
	   - ACE_wrappers/bin/auto_run_tests.lst

Wed Jun 19 14:34:09 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/orbconf.h: Removed the #define,
	  TAO_RESUMES_CONNECTION_HANDLER

	* tao/IIOP_Connection_Handler.cpp:
	* tao/Strategies/DIOP_Connection_Handler.cpp:
	* tao/Strategies/SHMIOP_Connection_Handler.cpp:
	* tao/Strategies/UIOP_Connection_Handler.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_handler.cpp:
	  Changed the use of the above #define to
	  ACE_Event_Handler::ACE_APPLICATION_RESUMES_HANDLER in the method
	  resume_handler ().

Wed Jun 19 12:16:32 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_valuetype/arglist.cpp (visit_operation):
          ACE_ENV macros were generated immediately after the arguments
	  like: (Float xACE_ENV).  Changed the generation so that there is
	  now at least one space between the last argument and the macro.

Wed Jun 19 11:52:55 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tests/Nested_Upcall_Crash/Makefile:
	* tests/Nested_Upcall_Crash/Clock_Ticks.h:
	* tests/Nested_Upcall_Crash/Clock_Ticks.cpp:
	  Add a couple of functions to figure out the clock tick
	  resolution, first try sysconf() it is available, if that fails
	  try using the CLK_TCK macro (if defined), if that fails try to
	  use the HZ macro, if that fails fall back to some hardcoded
	  value.

	* tests/Nested_Upcall_Crash/Client_Peer.cpp:
	* tests/Nested_Upcall_Crash/client.cpp:
	* tests/Nested_Upcall_Crash/server.cpp:
	  Use the new Clock_Tick::* helper functions to figure out the
	  clock tick resolution.

Tue Jun 18 19:46:04 2002  Ossama Othman  <ossama@uci.edu>

	* tests/Nested_Upcall_Crash/Makefile.bor:
	* tests/Nested_Upcall_Crash/Nested_Upcall_Crash.dsw:
	* tests/Nested_Upcall_Crash/client.bor:
	* tests/Nested_Upcall_Crash/client.dsp:
	* tests/Nested_Upcall_Crash/scavenger.bor:
	* tests/Nested_Upcall_Crash/scavenger.dsp:
	* tests/Nested_Upcall_Crash/server.bor:
	* tests/Nested_Upcall_Crash/server.dsp:

	  Added missing MSVC++ project/workspace files and Borland C++
	  Makefiles.

Tue Jun 18 19:23:01 2002  Ossama Othman  <ossama@uci.edu>

	* TAOACE_Static.dsw:
	* orbsvcs/orbsvcs/orbsvcs_static.dsw:

	  Added new Security_Static and SSLIOP_Static projects to these
	  MSVC++ workspaces.

	* orbsvcs/orbsvcs/Security_Static.dsp:
	* orbsvcs/orbsvcs/SSLIOP_Static.dsp:

	  New static library project files contributed by Wayne Erchak
	  <wayne@stentor.com>.  [Bug 1232]

Tue Jun 18 15:16:32 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_valuetype/arglist.cpp (visit_operation):
	  No AMH ExceptionHolder valuetypes' raise operations need the
	  CORBA Environment variable.  Changed code so that the generated
	  method declarations for AMH ExceptionHolders reflect this.
	  Thanks also to Craig Rodrigues <crodrigu@bbn.com> for pointing
	  this out. The IDL compiler also generates better formatted code
	  for the raise operation now.

Tue Jun 18 13:54:25 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* performance-tests/Latency/AMH/Single_Threaded/Roundtrip.cpp (test_method):
	  Continuing saga in learning to use correct CORBA Environment
	  macros.  Had declared environment variable in both the method
	  argument list as well as inside the definition of the method.
	  Changed the argument list to ACE_ENV_ARG_DECL_NOT_USED. Should
	  fix up the remaining builds (static and no-inline).

Tue Jun 18 14:31:39 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tao/GIOP_Message_State.cpp:
	* tao/IIOP_Connector.cpp:
	* tao/LF_Connect_Strategy.cpp:
	* tao/Leader_Follower.cpp:
	* tao/Transport.cpp:
	* tao/Transport_Cache_Manager.cpp:
	* tao/Transport_Connector.cpp:
	  More normalization of debug messages.

	* tao/IIOP_Connection_Handler.cpp:
	  Add assertions to uncover memory management bugs.

Tue Jun 18 11:53:10 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * docs/releasenotes/OBV.html:

	  Updated point of contact information and known issues.

Tue Jun 18 10:09:45 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

	  In the gen_typecode (be_enum *node) method, removed an incorrect
	  check for optimized typecode generation before inserting the enum
	  into tc_queue_. Thanks to Shanliang Cheng <shanliang@huawei.com>
	  for pointing out the error.

Mon Jun 17 21:19:50 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCode.cpp (private_member_type, private_member_count):

	  Fixed a bug in the valuetype case where, instead of checking
	  tc_kind_holder for the 0xffffffff that indicates a recursive type,
	  we were incorrectly checking encap_length. Thanks to Wanjia
	  <jiawan@huawei.com> for pointing out the mistake.

Mon Jun 17 14:59:52 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_operation/operation.cpp (gen_environment_decl):
	  Changed IDL genration of macro for AMH 'no-arguments' method
	  definitions from ACE_ENV_SINGLE_ARG_DECL_NOT_USED to
	  ACE_ENV_SINGLE_ARG_DECL.  Thanks to Craig Rodrigues
	  <crodrigu@bbn.com> for picking this up and reporting it.

Mon Jun 17 16:02:36 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tests/Nested_Upcall_Crash/Makefile:
	  Disabled for builds without CORBA Messaging.

	* tests/Nested_Upcall_Crash/Server_Peer.cpp:
	* tests/Nested_Upcall_Crash/client.cpp:
	* tests/Nested_Upcall_Crash/scavenger.cpp:
	* tests/Nested_Upcall_Crash/server.cpp:
	  Fixed compilation problems for builds without native C++
	  exceptions.

Mon Jun 17 12:43:07 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tao/IIOP_Endpoint.cpp:
	* tao/Strategies/DIOP_Endpoint.cpp:
	  After my changes on Wed Jun 12 13:24:11 2002 the implementation
	  of is_equivalent() was broken.  Basically it use to depend on an
	  eager evaluation of object_addr_, but the field was supposed to
	  be lazy-evaluated (and my fixes made sure of that.)
	  There were also some problems in the implementation of hash().
	  Once more I only fixed some of the protocols, I do not have the
	  expertise or time to review/fix SHMIOP, UIOP, SSLIOP or UIPMC.
	  I am considering this change another partial fix to:

	  http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1220

Mon Jun 17 10:51:03 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* Makefile:
	  Forgot to add the test to the recursive Makefiles.

Mon Jun 17 10:47:11 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* SSLIOP_Transport.cpp (invalidate_event_handler_i):
	  Fixed typo in class name, too much cut&paste.

Sat Jun 15 11:57:02 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

	* tao/IIOP_Acceptor.cpp:
	* tao/IIOP_Acceptor.h:
	  Integrated Nick Cross <nick.cross@prismtechnologies.com>'s
	  contribution to add the hostname_in_ior syntax to the
	  IIOPEndpoint command line parameter specification.  This allows
	  one to override the hostname that is put into an IOR to be an
	  alias for the local machine.  This fixes bug 506.

	* tao/docs/ORBEndpoint.html:
	  Added documentation for the hostname_in_ior option.

Fri Jun 14 13:58:56 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* The following ChangeLog entry describe my fixes for bug 1222:

	  http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1222

	  The main changes to solve the problem were:

	* Re-factor the code to close connections, write a single function
	  that tells all the objects that need to know about connection
	  status (most of them are LF_Events) when a connection is
	  closed.
	* Make sure that errors detected during write (in
	  TAO_Transport::send_message_shared, formerly
	  TAO_Transport::send_message_i) do result in closing the
	  connection (they were ignored in some cases), for *all*
	  protocols.
	* Re-order some of the code in
	  XXX_Connection_Handler::handle_close() to ensure that it is
	  idempotent (i.e. the second call is a no-op).  Also make sure
	  that the LF_Event of all Connection_Handlers is changed to
	  LFS_CONNECTION_CLOSED when the connection is closed, it was for
	  IIOP, but not for other protocols!!  In fact, all the
	  Connection_Handler business is fishy and needs more
	  re-factoring.

	  Tracking down the problem required me to make two other changes:

	* Normalize the debug messages related to Transport and Connection
	  handlers.  It was impossible to figure out what was going on
	  with messages in different formats.

	* Make some of the method names more meaningful (at least to me).
          transition_handler_state_i() tells me that the state is changed,
	  but what is really going on is that the event handler is being
	  invalidated thus invalidate_event_handler_i() [the _i() because
	  locks are assumed held]
	  And others of similar ilk.

	* tao/Transport.h:
	* tao/Transport.cpp:
	  Here is where most of the changes did happen.  Re-named several
	  methods, factory the code to send connection closure
	  notifications into send_connection_closed_notifications() and
	  call that method whenever the connection is closed.

	* tao/IIOP_Connection_Handler.cpp:
	  Make handle_close() idempotent, if called twice nothing happens
	  because the handle is set to ACE_INVALID_HANDLE.
	  Make sure that peer.close() and
	  state_changed(...LFS_CONNECTION_CLOSED) are called ASAP, there
	  is no sense in delaying that until the last request finishes, in
	  fact it is a bad idea because you leave OS resources held that
	  should not be.
	  Remove obsolete (ancient!) comments and add new comments
	  describing what is really going on.

	* tao/IIOP_Transport.h:
	* tao/IIOP_Transport.cpp:
	  Renamed some methods to make their semantics more obvious.

	* tao/ORB_Core.cpp:
	* tao/GIOP_Message_Base.cpp:
	  Re-format debug messages to make them more consistent, easier to
	  parse, grep and understand them that way.

	* tao/Transport_Cache_Manager.cpp:
	  Call close_connection_no_purge(), the method used to be called
	  close_connection_i() which I find confusing because _i() is
	  normally attached to locking.

	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
	* tao/Strategies/DIOP_Transport.h:
	* tao/Strategies/DIOP_Transport.cpp:
	* tao/Strategies/DIOP_Connection_Handler.cpp:
	* tao/Strategies/SHMIOP_Transport.h:
	* tao/Strategies/SHMIOP_Transport.cpp:
	* tao/Strategies/SHMIOP_Connection_Handler.cpp:
	* tao/Strategies/UIOP_Transport.h:
	* tao/Strategies/UIOP_Transport.cpp:
	* tao/Strategies/UIOP_Connection_Handler.cpp:
	  Same changes as for IIOP, well, in some cases I had to add
	  missing code.

	* tests/Nested_Upcall_Crash/Makefile:
	* tests/Nested_Upcall_Crash/Client_Peer.cpp:
	* tests/Nested_Upcall_Crash/Server_Peer.cpp:
	* tests/Nested_Upcall_Crash/client.cpp:
	* tests/Nested_Upcall_Crash/run_test.pl:
	* tests/Nested_Upcall_Crash/scavenger.cpp:
	* tests/Nested_Upcall_Crash/server.cpp:
	  Make the test less verbose, add regression test driver.
	  It does not crash anymore, so I'll probably have to add another
	  test to reproduce the problems in bug 1202.

	* tests/Param_Test/objref.cpp:
	  Make it safe to call with debugging turned on, even when some of
	  the strings returned are null pointers.

Fri Jun 14 09:11:11 2002  Chad Elliott  <elliott_c@ociweb.com>

        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:

          Move the return statement to avoid warnings with gcc.

Fri Jun 14 07:46:50 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp:

          Do not initialize the trust_ data member when building
          for VxWorks and QNX.  The compilers for these OS's do
          not accept this.

Thu Jun 13 10:50:37 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/CosLoadBalancing.idl:

	  IDL for the new proposed OMG load balancing submission.  TAO's
	  new load balancer implements this IDL.

Wed Jun 12 13:24:11 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tao/IIOP_Acceptor.cpp:
	* tao/Strategies/DIOP_Acceptor.cpp:
	  Fixed bug 1220 for IIOP and DIOP endpoints.  For other protocols
	  either the bug does not apply (UIOP and UIPMC) or the problem is
	  more complicated than what I can handle today.

	* tao/Strategies/SHMIOP_Acceptor.cpp:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp:
	  Documented potential problems with the current collocation
	  approach.

Wed Jun 12 07:42:00 2002  Michael Kircher <Michael.Kircher@siemens.com>

	* docs/ORBEndpoints.html:
	  Added documentation about DIOP endpoints.

Mon Jun 10 22:48:11 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCode.cpp (private_member_type):

	  For the valuetype case, changed the skip to skip_short for the
	  ValueModifier and Visibility fields, since these are both inserted
	  into the type code as shorts. Previously, skip_ulong was being called.
	  Thanks to Jian Chen <jchen@huawei.com> for pointing out the mismatch.

Mon Jun 10 13:55:48 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* performance-tests/Latency/AMH/Single_Threaded/Roundtrip.cpp:
	  Oops, I did it again :-) .. forgot to delare the CORBA
	  environemnt variable macro. The builds should be happy now.

Mon Jun 10 14:30:18 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/RTPortableServer/RT_Collocation_Resolver.cpp:
	* tao/RTCORBA/RT_Thread_Lane_Resources_Manager.cpp:
	* tao/RTCORBA/RT_ORB_Loader.cpp: Fixed mismatched export macros.

	* orbsvcs/orbsvcs/PortableGroup/PG_Property_Utils.h: Fixed a fuzz
	  pre/post mismatch warning.

Sun Jun  9 19:16:57 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

	* orbsvcs/orbsvcs/AV/MCast.cpp:
	* orbsvcs/orbsvcs/IOR_Multicast.cpp:
	* orbsvcs/orbsvcs/Event/ECG_Mcast_EH.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
	  Added template instantiations for the new
 	  ACE_SOCK_Dgram_Mcast_Ex<ACE_Null_Mutex>.

Fri Jun  7 16:32:17 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* performance-tests/Latency/AMH/Single_Threaded/Roundtrip.cpp:
	  Modified RH calls for platforms without native exceptions.

Fri Jun  7 09:26:44 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

	* orbsvcs/orbsvcs/PortableGroup.bor (OBJFILES):
	  Added a missing line continuation backslash.

Thu Jun  6 13:36:22 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_operation/operation.cpp (gen_throw_spec):
	  The 'throw_spec_close' generation logic was a 'bit off'.  I had
	  changed the logic before by splitting the 'if' statement into
	  two separate parts.  The 'throw_spec_close' generation was
	  supposed to generated if only all the 'if' conditions were met.
	  But, previously I had left the 'throw_spec_close' generation
	  code outside of the second if.  I moved it into the second-if
	  and now the throw_spec close parenthesis are being generated
	  correctly. This should clean up all the broken AMI test builds.
	  The Throw spec generation for AMH is now listed as a separate
	  point:
	  --------------------------------------------------------------
	  2.6) Generate Throw Spec the confirms to raises clause of
	  original operation in IDL.
	  -------------------------------------------------------------

	* TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
	  I had forgotten to check if it was an AMH Exception Holder
	  before generating the protected CORBA::Exception member
	  variable (2.4), thus this was generating the member variable for
	  all ExceptionHolders.  This is now fixed.

	* TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
	  Cosmetic changes.

Thu Jun 06 13:56:54 2002  Ossama Othman  <ossama@uci.edu>

	* tao/PortableServer/Object_Adapter.cpp:
	* tao/RTCORBA/RT_Current.cpp:
	* tao/RTCORBA/RT_Endpoint_Selector_Factory.cpp:
	* tao/RTPortableServer/RT_Servant_Dispatcher.cpp:

	  Include "tao/Protocols_Hooks.h" to pull in TAO_Protocols_Hooks
	  class declaration.

Thu Jun 06 13:25:37 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB_Core.h:

	  No need to include "Protocols_Hooks.h".  A forward declaration
	  is enough.

	  (InitRefMap):

          Changed underlying hash map from ACE_Hash_Map_Manager to
          ACE_Hash_Map_Manager_Ex.  The former requires three additional
          template instantiations and used the latter under the hood
          anyway.  This reduces TAO's footprint.

	* tao/ORB_Core.cpp (ACE_Hash_Map_Manager):

          Removed all explicit template instantiations related to this
          template.  They are no longer used or needed.

Thu Jun 06 13:11:57 2002  Ossama Othman  <ossama@uci.edu>

	* tao/ORB_Core.cpp (TAO_ORB_Core):

	  Initialize the "init_ref_map_" hash map to a size much smaller
	  than ACE_DEFAULT_MAP_SIZE (1024),
	  i.e. TAO_DEFAULT_OBJECT_REF_TABLE_SIZE instead.  This further
	  reduces TAO's run-time memory requirements.

Wed Jun  5 18:05:35 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp (visit_valuetype):
	  AMH ExceptionHolders are (supposed to be) valuetypes.  They are,
	  except that, they are generated to have a concrete
	  implementation (unlike valuetypes that are generated as abstract
	  classes).  The way the generation of the ExceptionHolders
	  differs from Valuetypers is commented in this method but I'm
	  repeating it here again:
	  ---------------------------------------------------------------------
	  This is how we proceed:
	  1) Identify it is an AMH_ExceptionHolder class.
	  2) Inherit from CORBA_DefaultValueBaseRef i.e. provide a CONCRETE
             implementation for this ValueType!  This is because the alternative
             design of deriving a concrete-exception-holder class that the IDL
             compiler again has to generate is superflous, unnecessary,
	     leads to code bloat and unnecessary information for the
	     app-programmer.  The changes required for this are:
             2.1) Generate the raise_method as non-abstract.
             2.2) Generate a new constructor that takes in a CORBA::Exception*
             2.3) Make the destructor public (instead of protected)
             2.4) Generate a private CORBA::Exception* field.
             2.5) Generate the tao_marshal and tao_unmarshal methods as
                  non-abstarct.
          ----------------------------------------------------------------------

	* TAO_IDL/be/be_visitor_operation/operation.cpp (is_amh_exception_holder):
	* TAO_IDL/be_include/be_visitor_operation/operation.h:
	  If we are an ExceptionHolder operation, then we
	  go ahead and generate the throw spec for the operation (this is
	  not done for valuetypes).  Code changed to reflect this logic.
	  This same change in logic applies to the valuetype visitors
	  below:

	* TAO_IDL/be/be_visitor_valuetype/arglist.cpp (visit_operation):
	* TAO_IDL/be_include/be_visitor_valuetype/arglist.h:
	  Instead of generating the pure vitual method as is done for
	  valuetypes, we generate a 'normal' method and also go ahead and
	  define it as well!  All ExceptionHolder operations do only one
	  thing, raise the stored exception (all ExceptionHolder
	  constructors are declared to take in an CORBA::Exception
	  paramter). We generate the code that does that here.

	* TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp (visit_operation):
	  Changed generated '_tao_rh_init_reply' and 'tao_rh_send_reply'
	  to take in the ACE_ENV_SINGLE_ARG_PARAMTER to be compliant with
	  the changes in tao/PortableServer/AMH_Response_handler.*

	* TAO_IDL/be/be_visitor_amh_pre_proc.cpp (visit_interface):
	* TAO_IDL/be_include/be_visitor_amh_pre_proc.h:
	  Added a node for generating the exception_holder concrete class
	  for AMH exceptions.  This exception holder class is declared and
	  defined in the client stub header file by the IDL-compiler.

Wed Jun 05 11:06:22 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup.bor (OBJFILES):
	* orbsvcs/orbsvcs/PortableGroup.dsp:

	  Added new PortableGroup files to the list of files to build.

Wed Jun  5 10:59:08 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/Makefile (MKLIST):

	  The new Load Balancing service depends on the PortableGroup
	  library.

	  The PortableGroup library depends on the CosNaming library.

	* orbsvcs/orbsvcs/Makefile.PortableGroup (FILES):

	  Added new PortableGroup files to the list of files to build.

Wed Jun 05 10:46:04 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.cpp
	  (get_type_properties):

	  Use ACE_THROW_RETURN instead of ACE_THROW.  This method returns
	  a value.  Fixes an emulated exception build problem.

	  (set_properties_dynamically):

	  Fixed unused argument warning.

	  (get_properties):

	  Fixed g++ "better conversion" warning.

Wed Jun 05 10:41:43 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp
	  (get_object_group_id):

	  Fixed a race condition.

	  (create_object_group):

	  Added missing code that set the object group's group ID in the
	  object group map entry.

Wed Jun 05 10:36:28 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp
	  (locations_of_members):

	  Corrected type of return value in ACE_CHECK_RETURN macro.  Fixes
	  emulated exception builds.

	  (create_object_group):

	  Added missing semi-colon after ACE_CHECK_RETURN.  Fixes emulated
	  exception builds.

Wed Jun 05 10:30:43 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp
	  (~TAO_PG_GenericFactory):

	  Added missing ACE_DECLARE_NEW_CORBA_ENV;

	  Emulated exception fix:  ACE_CHECK -> ACE_TRY_CHECK;

Wed Jun 05 09:25:53 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup.idl:

	  Remove "local" keyword from interfaces that are not supposed to
	  be locality constrained.

	  Include "CosNaming.idl" to pull in CosNaming::Name typedef.

	  Updated to conform to PortableGroup IDL defined in the Load
	  Balancing joint submission.

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h:
	  (populate_object_group):
	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp
	  (populate_object_group):

	  Changed signature of this method so that it accepts the factory
	  creation ID for the object group being populated.  Fixes a
	  syntax error.

Tue Jun 04 21:10:43 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp
	  (process_criteria):
	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h
	  (process_criteria):

	  New method that extracts group-specific criteria defined by the
	  PortableGroup IDL.

	* orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Property_Utils.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_Property_Utils.h:

	  Moved override_properties() method to the "TAO_PG" namespace.
	  No need to make it a protected member of the
	  TAO_PG_PropertyManager class.

	* orbsvcs/orbsvcs/PortableGroup/PG_conf.h:

	  Added default values for the MembershipStyle,
	  InitialNumberMembers and MinimumNumberMembers properties.

Tue Jun  4 14:31:08 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tao/PortableServer/AMH_Response_Handler.cpp (TAO_AMH_Response_Handler):
	  Changed variable-name 'exception' to 'ex' and also declared
	  NEW_CORBA_ENV.  This should now fix the minimum-static and
	  no-inline builds.

Tue Jun  4 16:00:46 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/CORBA_String.h:
        * tao/CORBA_String.inl:

          Added CORBA_String_out constructor from TAO_String_Manager.
          This enables implicit conversion when for example a struct
          member string is passed as an OUT parameter. Tested on
          MSVC and gcc 2.95.3 20010315. Thanks to Stelios Sfakianakis
          <ssfak@ics.forth.gr> for reporting the problem and suggesting
          the fix.

Tue Jun  4 14:29:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * PortableServer/AMH_Response_Handler.cpp:

          Added a missing ACE_DECLARE_NEW_CORBA_ENV.

Tue Jun  4 00:34:08 2002  Mayur Deshpande  <mayur@ics.uci.edu>

	* tao/PortableServer/AMH_Response_Handler.h:
	* tao/PortableServer/AMH_Response_Handler.cpp:
	  Changed method signatures for platforms without native
	  exceptions. Other notable changes include:
	    - Making the destructor more intelligent.  If the AMH RH is
	  being destroyed before a reply has been sent to the client, then
	  a NO_RESPONSE SYSTEM_EXCEPTION is sent to the client.
	    - Incorporate the new AMH minor-codes when raising exceptions.
	    - Complete the _tao_rh_send_exception () method that Carlos
	  wrote. The part remaining was the actual marshalling of the
	  exception to the client.
	    - Changed method signatures for platforms without native
	  exceptions.
	    - More documentation on why we are raising exceptions in
	  operations and the logic for the minor codes in them.

	* tao/PortableServer/Servant_Base.cpp (asynchronous_upcall_dispatch):
	  Removed condition that unnecessarily checked if we needed to
	  send a reply.  Since this is an asynchronous upcall, we never
	  need to marshall anything back to the client .. unless, :-), we
	  encounter an exception.  This method has now been changed to
	  accomade the above semantics.

	* tao/corbafwd.h (TAO_AMH_RH_REPLY_LOCATION_CODE):
	* tao/Exception.cpp (_info):
	  Added new AMH exception minor code and description.

Mon Jun 03 17:10:38 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/PortableGroup/PG_Factory_Map.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_Factory_Map.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Factory_Set.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_Factory_Set.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_GenericFactory.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Location_Equal_To.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_Location_Equal_To.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Location_Equal_To.inl:
	* orbsvcs/orbsvcs/PortableGroup/PG_Location_Hash.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_Location_Hash.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Location_Hash.inl:
	* orbsvcs/orbsvcs/PortableGroup/PG_Location_Map.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_Location_Map.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_MemberInfo.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_MemberInfo.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroupManager.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroup_Map.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_ObjectGroup_Map.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_Operators.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_Operators.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.cpp:
	* orbsvcs/orbsvcs/PortableGroup/PG_PropertyManager.h:
	* orbsvcs/orbsvcs/PortableGroup/PG_conf.h:

	  Implementation of the pending standard PortableGroup
	  specification.  It will be used by TAO's new load balancer (soon
	  to follow), and potentially other services that require some
	  form of group management.

Mon Jun  3 11:10:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:

          Added a call to bind the repository, once it is created, to the
          ORB's table of initialized object references. This enables
          resolve_initial_references to resolve the IFR a step sooner and
          avoid resorting to multicast, which is especially helpful when
          the IFR is collocated with the application doing the resolving.
          Thanks to Craig Rodrigues <crodrigu@bbn.com> for supplying the
          patch.

Sun Jun  2 17:52:17 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h (init_with_orb):
	* orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp (init_with_orb):
	  Add flag (defaulted to true) which makes initializing a multicast
	  listening endpoint optional.

Fri May 31 15:22:00 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

	* orbsvcs/orbsvcs/Event/ECG_Mcast_EH.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp:
	* orbsvcs/tests/AVStreams/Multiple_Flows/sender.cpp:
	* tao/PortableServer/POA.cpp:
	  Removed the trailing ';' at the end of #pragma instantiates.
  	  Thanks to Oliver Kellog <okellogg@freenet.de> for reporting
 	  this.

Fri May 31 13:13:03 2002  Chris Hafey <chafey@stentor.com>

	* utils/NamingViewer/AddNameServerDlg.cpp
	  The default IOR is now the CORBALOC format for a name service

	* utils/NamingViewer/{ViewIORDlg,NamingViewerDlg,BindDialog,NamingTreeCtrl}:
	  Updated to work with new method to get an exception's repository ID

	* utils/NamingViewer/NamingViewerDlg.cpp
	  Added a timeout of 500ms for binding to a naming service

	* utils/NamingViewer/ViewIORDlg.cpp
	  Added support for viewing multiple endpoints

Wed May 29 15:25:37 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Strategies/DIOP_Connector.cpp:

	  Fixed syntax error for compilers that require explicit template
	  instantiation via preprocessor pragmas.  Thanks to Yigong Liu
	  <yigongliu@lucent.com> for reporting the problem.

Wed May 29 13:51:50 2002  Ossama Othman  <ossama@uci.edu>

	* tao/CORBA_String.cpp (operator>>):

	  Corrected type conversion logic in wstring extraction operators.

Wed May 29 12:31:53 2002  Ossama Othman  <ossama@uci.edu>

	* tao/CORBA_String.cpp (operator>>):

	  Allocate space for the wide string to be extracted before
	  performing the actual extraction.  Addresses memory access
	  violations.

	  Extract the wide string using the istream::read() unformatted
	  input method.  The operator>>() extraction operator cannot be
	  used on some platforms (e.g. g++ 2.95) due to ambiguous and/or
	  missing overloaded extraction operators.  Fixes compile-time
	  errors in g++ 2.95.x builds.

Wed May 29 09:15:17 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Notify_ConsumerAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.cpp:

          Fixed repeat definitions of loop counters.

Wed May 29 13:28:12 2002 Johnny Willemsen  <jwillemsen@remedy.nl>

	* tao/Strategies/DIOP_Acceptor.h:
	* tao/Strategies/DIOP_Connector.h:
	* tao/Strategies/SHMIOP_Acceptor.h:
	* tao/Strategies/SHMIOP_Connector.h:
	* tao/Strategies/UIOP_Acceptor.h:
	* tao/Strategies/UIOP_Connector.h:
	  Corrected filename where documentation of TAO_Acceptor and
	  TAO_Connector can be found.

Wed May 29 13:11:44 2002 Johnny Willemsen  <jwillemsen@remedy.nl?

	* tao/PortableServer/IORInfo.h:
	  Updated brief description so that doxygen generated page is correct

Tue May 28 20:24:16 CDT 2002 Pradeep Gore  <pradeep@oomworks.com>

	* orbsvcs/orbsvcs/Notify/Notify_Collection.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Collection.h:
	* orbsvcs/orbsvcs/Notify/Notify_ConsumerAdmin_i.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Event.cpp:
	* orbsvcs/orbsvcs/Notify/Notify_Event.h:
	* orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.cpp:

	  Fix for bug: http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1134
	  Proxy Suppliers are subscribed for all events (special) by default.

	* orbsvcs/tests/Notify/Basic/Events_Test.cpp:
	* orbsvcs/tests/Notify/Basic/Simple.cpp:
	* orbsvcs/tests/Notify/Blocking/Structured_Consumer.cpp:
	* orbsvcs/tests/Notify/Discarding/Sequence_Consumer.cpp:
	* orbsvcs/tests/Notify/Discarding/Structured_Consumer.cpp:
	* orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.cpp:
	* orbsvcs/tests/Notify/Ordering/Sequence_Consumer.cpp:
	* orbsvcs/tests/Notify/Ordering/Structured_Consumer.cpp:
	* orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.cpp:
	* orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.cpp:
	* orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.cpp:
	* orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.cpp:
	* orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.cpp:
	* orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.cpp:
	* orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.cpp:
	* orbsvcs/examples/Notify/Filter/Filter.cpp:
	* orbsvcs/examples/Notify/Subscribe/Subscribe.cpp:

	  Removed extraneous call to subscription_change.

Tue May 28 14:15:11 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Loader.cpp:

          Change export macro argument in ACE_FACTORY_DEFINE to
          match the one in ACE_FACTORY_DECLARE in the corresponding
          header file. Thanks to Don Hinton <dhinton@ieee.org> for
          tracking down the problem.

Tue May 28 11:12:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/AV/QoS_UDP.h:
          Converted old style documentation to doxygen style documentation

Tue May 28 09:02:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/POA_Cached_Policies.h:
        * tao/PortableServer/POA_Policy_Set.h:
        * tao/PortableServer/PortableServer.h:
        * orbsvcs/orbsvcs/Event/BCU.h:
        * orbsvcs/orbsvcs/Event/Dispatching_Modules.h:
        * orbsvcs/orbsvcs/Event/Event_Channel.h:
        * orbsvcs/orbsvcs/Event/Event_Manip.h:
        * orbsvcs/orbsvcs/Event/Memory_Pools.h:
        * orbsvcs/orbsvcs/Event/Module_Factory.h:
        * orbsvcs/orbsvcs/Event/RT_Task.h:
          Fixed fuzz errors about @file mismatch

Tue May 28 08:03:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/Active_Object_Map.h:
        * tao/PortableServer/Collocated_Object.h:
        * tao/PortableServer/Default_Acceptor_Filter.h:
        * tao/PortableServer/Direct_Object_Proxy_Impl.h:
        * tao/PortableServer/Key_Adapters.h:
        * tao/PortableServer/Object_Adapter.h:
        * tao/PortableServer/Operation_Table.h:
        * tao/PortableServer/POA_Cached_Policies.h:
        * tao/PortableServer/POA_Policies.h:
        * tao/PortableServer/POA_Policy_Set.h:
        * tao/PortableServer/POAManager.h:
        * tao/PortableServer/PortableServer.cpp:
        * tao/PortableServer/PortableServer.h:
        * tao/PortableServer/Servant_Base.h:
        * tao/PortableServer/Strategized_Object_Proxy_Broker.h:
        * tao/PortableServer/ThruPOA_Object_Proxy_Impl.h:
          Converted old style documentation to doxygen style documentation

Tue May 28 07:44:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Event/BCU.h:
        * orbsvcs/orbsvcs/Event/Dispatching_Modules.h:
        * orbsvcs/orbsvcs/Event/Event_Channel.h:
        * orbsvcs/orbsvcs/Event/Event_Manip.h:
        * orbsvcs/orbsvcs/Event/GPlot_File.cpp:
        * orbsvcs/orbsvcs/Event/GPlot_File.h:
        * orbsvcs/orbsvcs/Event/Local_ESTypes.h:
        * orbsvcs/orbsvcs/Event/Memory_Pools.h:
        * orbsvcs/orbsvcs/Event/Module_Factory.h:
        * orbsvcs/orbsvcs/Event/RT_Task.h:
          Converted old style documentation to doxygen style documentation

Mon May 27 10:46:41 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/Remote_Object_Proxy_Impl.cpp: Fixed gcc warnings on invalid
	  type conversion.

Mon May 27 08:52:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/RTCORBA/Activity/Makefile.bor:
          Created BCB makefile for this example

        * examples/RTCORBA/Makefile.bor:
          Created BCB makefile for this directory

        * examples/Makefile.bor:
          Added RTCORBA directory.

        * orbsvcs/orbsvcs/Naming/Bindings_Iterator_T.h:
        * orbsvcs/orbsvcs/Naming/Entries.h:
        * orbsvcs/orbsvcs/Naming/Flat_File_Persistence.h:
        * orbsvcs/orbsvcs/Naming/Hash_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Naming_Context_Interface.h:
        * orbsvcs/orbsvcs/Naming/Naming_Loader.h:
        * orbsvcs/orbsvcs/Naming/Naming_Service_Container.h:
        * orbsvcs/orbsvcs/Naming/Naming_Utils.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Context_Index.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Entries.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Storable.h:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Transient_Naming_Context.h:
          Converted old style documentation to doxygen style documentation

        * tao/Buffering_Constraint_Policy.h:
        * tao/Exclusive_TMS.h:
        * tao/GIOP_Utils.h:
        * tao/Interceptor_List.h:
        * tao/Invocation_Endpoint_Selectors.h:
        * tao/PolicyFactory_Registry.h:
        * tao/Sequence.h:
        * tao/Stub.h:
          Converted old style documentation to doxygen style documentation

        * tao/DynamicAny/DynAny_i.h:
          Converted old style documentation to doxygen style documentation

        * tao/IORTable/IOR_Table_Impl.h:
          Converted old style documentation to doxygen style documentation

        * tao/Messaging/Asynch_Timeout_Handler.h:
          Converted old style documentation to doxygen style documentation

        * tao/RTCORBA/Direct_Priority_Mapping.h:
        * tao/RTCORBA/Linear_Priority_Mapping.h:
        * tao/RTCORBA/Private_Transport_Descriptor.h:
          Converted old style documentation to doxygen style documentation

        * tao/RTPortableServer/RT_Acceptor_Filters.h:
          Converted old style documentation to doxygen style documentation

        * tao/SmartProxies/Smart_Proxies.h:
          Converted old style documentation to doxygen style documentation

        * tao/Strategies/DIOP_Acceptor.h:
        * tao/Strategies/DIOP_Connection_Handler.h:
        * tao/Strategies/DIOP_Connector.h:
        * tao/Strategies/DIOP_Endpoint.h:
        * tao/Strategies/DIOP_Factory.h:
        * tao/Strategies/DIOP_Profile.h:
        * tao/Strategies/DIOP_Transport.h:
        * tao/Strategies/LF_Strategy_Null.h:
        * tao/Strategies/SHMIOP_Acceptor.h:
        * tao/Strategies/SHMIOP_Connection_Handler.h:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/SHMIOP_Endpoint.h:
        * tao/Strategies/SHMIOP_Factory.h:
        * tao/Strategies/SHMIOP_Profile.h:
        * tao/Strategies/SHMIOP_Transport.h:
        * tao/Strategies/UIOP_Acceptor.h:
        * tao/Strategies/UIOP_Connection_Handler.h:
        * tao/Strategies/UIOP_Connector.h:
        * tao/Strategies/UIOP_Endpoint.h:
        * tao/Strategies/UIOP_Factory.h:
        * tao/Strategies/UIOP_Lite_Factory.h:
        * tao/Strategies/UIOP_Profile.h:
        * tao/Strategies/UIOP_Transport.h:
        * tao/Strategies/advanced_resource.h:
          Converted old style documentation to doxygen style documentation. For the
          UIOP files the include ordering is changed to the structure of the other
          files so that the documentation is correctly generated.

        * tao/TypeCodeFactory/TypeCodeFactory_Loader.h:
          Converted old style documentation to doxygen style documentation

Sun May 26 21:04:36 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* TAO_IDL/Makefile.EXE:
	* TAO_IDL/Makefile.BE:
	* TAO_IDL/Makefile.FE: Updated Makefile dependencies.

Sun May 26 01:18:05 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/Object_Proxy_Impl.h:
	* tao/Object.cpp:
	* tao/Object.h: Added a new interface default operation
	  <_get_component>.

	* tao/Abstract_Servant_Base.h:
	* tao/Remote_Object_Proxy_Impl.cpp:
	* tao/Remote_Object_Proxy_Impl.h: Provided a canned stub
	  implementation for the generic <_get_component> operation.

	* tao/PortableServer/Servant_Base.cpp:
	* tao/PortableServer/Servant_Base.h: Provided default
	  implementation for the <_get_component> implementation for
	  non-components.  Currently, this operation always return a nil
	  object reference.

	* tao/PortableServer/Direct_Object_Proxy_Impl.cpp:
	* tao/PortableServer/Direct_Object_Proxy_Impl.h:
	* tao/PortableServer/ThruPOA_Object_Proxy_Impl.cpp:
	* tao/PortableServer/ThruPOA_Object_Proxy_Impl.h: Provided canned
	  collocated stub implementations for the <_get_component>
	  operation.

	* TAO_IDL/be/be_interface.cpp:
	* TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp: Added code to
	  generate skeleton implementation for oepration <_get_component>
	  , whose name, according to the spec., should be sent as
	  "_component".

	* TAO_IDL/be_include/be_codegen.h:
	* TAO_IDL/be_include/be_visitor_interface.h:
	* TAO_IDL/be_include/be_visitor_operation.h:
	* TAO_IDL/be/be_visitor_attribute/attribute.cpp:
	* TAO_IDL/be/be_visitor_factory.cpp:
	* TAO_IDL/be/be_visitor_interface.cpp:
	* TAO_IDL/be/be_visitor_operation.cpp:
	* TAO_IDL/be/be_visitor_interface/interface.cpp: Removed obsolete
	  code generation states and their transitions.

	* TAO_IDL/be_include/be_visitor_operation/direct_collocated_sh.h:
	* TAO_IDL/be_include/be_visitor_operation/direct_collocated_ss.h:
	* TAO_IDL/be_include/be_visitor_operation/thru_poa_collocated_sh.h:
	* TAO_IDL/be_include/be_visitor_operation/thru_poa_collocated_ss.h:
	* TAO_IDL/be_include/be_visitor_interface/direct_collocated_sh.h:
	* TAO_IDL/be_include/be_visitor_interface/direct_collocated_ss.h:
	* TAO_IDL/be_include/be_visitor_interface/thru_poa_collocated_sh.h:
	* TAO_IDL/be_include/be_visitor_interface/thru_poa_collocated_ss.h:
	* TAO_IDL/be/be_visitor_operation/direct_collocated_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/direct_collocated_ss.cpp:
	* TAO_IDL/be/be_visitor_operation/thru_poa_collocated_sh.cpp:
	* TAO_IDL/be/be_visitor_operation/thru_poa_collocated_ss.cpp:
	* TAO_IDL/be/be_visitor_interface/direct_collocated_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/direct_collocated_ss.cpp:
	* TAO_IDL/be/be_visitor_interface/thru_poa_collocated_sh.cpp:
	* TAO_IDL/be/be_visitor_interface/thru_poa_collocated_ss.cpp:
	  Removed old collocated code generators.  They were superceded
	  long ago.

	* tao/PortableServer/Collocated_Object.cpp:
	* tao/PortableServer/Collocated_Object.h: Added the implementation
	  for <_get_component>.  This class should be removed but they are
	  still being used in
	  TAO/tao/DynamicInterface/Dynamic_Implementation.cpp.  We need to
	  remove these file once we remove the only usage in
	  aforementioned file.

Fri May 24 11:46:40 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_field/field_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL/be_include/be_codegen.h:

          If an IDL struct, exception, union, or valuetype 'foo' contains
 	  a field using the scoped name for the type, we have been
 	  generating the type with the ACE_NESTED_CLASS macro, a
 	  workaround for an MSVC problem. However, if foo is defined
 	  inside a module (rather than another struct, union, exception,
 	  valuetype or interface), not only is the macro not necessary,
 	  but it may cause problems of its own for deeply nested
 	  modules. So a check for the type of foo's container was added to
 	  code generation in field_ch.cpp. Also, a context sub-state
 	  called TAO_USE_FULL_NAME had been added as a helper for
 	  valuetype field code generation, and this has been removed since
 	  it is no longer needed. Thanks to Keith Thornton
 	  <keith.thornton.kt@germany.agfa.com> for sending in the use case
 	  that uncovered the bug.

Fri May 24 13:52:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

	* orbsvcs/orbsvcs/Trader/Constraint_Visitors.h:
	* orbsvcs/orbsvcs/Trader/Trader.h:
	* orbsvcs/orbsvcs/Trader/Trader_T.h:
	* orbsvcs/orbsvcs/Time/Timer_Helper.h:
	* orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_Listeners.h:
	* orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_Proxy_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushConsumer_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_StructuredProxyPushConsumer_i.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Service_Activate.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.h:
	* orbsvcs/orbsvcs/ETCL/ETCL_Constraint_Visitor.h:
	  Fixed fuzz errors

Fri May 24 09:48:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

	A long list with documentation updates.

	* orbsvcs/orbsvcs/Concurrency/CC_Lock.h:
	* orbsvcs/orbsvcs/Concurrency/CC_LockSet.h:
	* orbsvcs/orbsvcs/Concurrency/CC_LockSetFactory.cpp:
	* orbsvcs/orbsvcs/Concurrency/CC_LockSetFactory.h:
	* orbsvcs/orbsvcs/Concurrency/Concurrency_Loader.h:
	* orbsvcs/orbsvcs/Concurrency/Concurrency_Utils.cpp:
	* orbsvcs/orbsvcs/Concurrency/Concurrency_Utils.h:
	  Converted old style documentation to doxygen style

	* orbsvcs/orbsvcs/ESF/ESF_Busy_Lock.h:
	* orbsvcs/orbsvcs/ESF/ESF_Copy_On_Write.h:
	  Improved doxygen documentation

	* orbsvcs/orbsvcs/ETCL/ETCL_Constraint_Visitor.h:
	* orbsvcs/orbsvcs/ETCL/ETCL_Interpreter.h:
	  Converted old style documentation to doxygen style

	* orbsvcs/orbsvcs/FaultTolerance/FT_IOGR_Property.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_ORBInitializer.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_PolicyFactory.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Service_Activate.h:
	* orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.h:
	  Converted old style documentation to doxygen style

	* orbsvcs/orbsvcs/Notify/Notify_AdminProperties.h:
	* orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.h:
	* orbsvcs/orbsvcs/Notify/Notify_Channel_Objects_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_Collection.h:
	* orbsvcs/orbsvcs/Notify/Notify_Collection_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Interpreter.h:
	* orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h:
	* orbsvcs/orbsvcs/Notify/Notify_ConsumerAdmin_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_Default_Collection_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_Default_POA_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event.h:
	* orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Dispatch_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Manager.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Manager_Objects_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Map.h:
	* orbsvcs/orbsvcs/Notify/Notify_Event_Processor.h:
	* orbsvcs/orbsvcs/Notify/Notify_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_FilterFactory_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_Filter_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_ID_Pool_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_Listener_Filter_Eval_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_Listeners.h:
	* orbsvcs/orbsvcs/Notify/Notify_Lookup_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_MT_Worker_Task.h:
	* orbsvcs/orbsvcs/Notify/Notify_POA_Factory.h:
	* orbsvcs/orbsvcs/Notify/Notify_ProxyConsumer_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_ProxyPushConsumer_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_ProxyPushSupplier_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_Proxy_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_QoSAdmin_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushConsumer_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushSupplier_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_Signal_Property_T.h:
	* orbsvcs/orbsvcs/Notify/Notify_Source_Filter_Eval_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_StructuredEvents.h:
	* orbsvcs/orbsvcs/Notify/Notify_StructuredProxyPushConsumer_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_StructuredProxyPushSupplier_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_SupplierAdmin_i.h:
	* orbsvcs/orbsvcs/Notify/Notify_Update_Dispatch_Command.h:
	* orbsvcs/orbsvcs/Notify/Notify_Worker_Task.h:
	  Converted old style documentation to doxygen style

	* orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.h:
	* orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.h:
	  Converted old style documentation to doxygen style

	* orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Acceptor.h:
	* orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.h:
	  Improved doxygen documentation

	* orbsvcs/orbsvcs/Time/TAO_TIO.h:
	* orbsvcs/orbsvcs/Time/TAO_Time_Service_Clerk.h:
	* orbsvcs/orbsvcs/Time/TAO_Time_Service_Server.h:
	* orbsvcs/orbsvcs/Time/TAO_UTO.h:
	* orbsvcs/orbsvcs/Time/Timer_Helper.h:
	  Converted old style documentation to doxygen style

	* orbsvcs/orbsvcs/Trader/Constraint_Interpreter.h:
	* orbsvcs/orbsvcs/Trader/Constraint_Nodes.h:
	* orbsvcs/orbsvcs/Trader/Constraint_Visitors.h:
	* orbsvcs/orbsvcs/Trader/Interpreter.h:
	* orbsvcs/orbsvcs/Trader/Locking.h:
	* orbsvcs/orbsvcs/Trader/Offer_Database.h:
	* orbsvcs/orbsvcs/Trader/Offer_Iterators.h:
	* orbsvcs/orbsvcs/Trader/Offer_Iterators_T.h:
	* orbsvcs/orbsvcs/Trader/Service_Type_Repository.h:
	* orbsvcs/orbsvcs/Trader/Trader.h:
	* orbsvcs/orbsvcs/Trader/Trader_Constraint_Visitors.h:
	* orbsvcs/orbsvcs/Trader/Trader_Interfaces.h:
	* orbsvcs/orbsvcs/Trader/Trader_T.h:
	* orbsvcs/orbsvcs/Trader/Trader_Utils.h:
	  Converted old style documentation to doxygen style

Thu May 23 16:38:54 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Flushing_Strategy.h:

	  No need to include `corbafwd.h'.  `TAO_Export.h' is enough.

	  Forward declare ACE_Time_Value.  Necessitated by the above
	  change.

Thu May 23 17:38:10 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicInterface/Dynamic_Implementation.cpp:
        * tao/DynamicInterface/Dynamic_Implementation.h:

          Added overrides of _is_a() and _get_interface(), so DSI calls
          to these methods can be handled by the ORB, but only in
          the context of an existing request (see the CORBA C++
          mapping, section 1.38.3). Thanks to Eric Quere
          <Eric.Quere@med.ge.com> and Frank Pilhofer <fp@fpx.de> for
          reporting the omission.

        * tao/PortableServer/Servant_Base.cpp:
        * tao/PortableServer/Servant_Base.h:

          Cosmetic changes.

Thu May 23 15:46:01 2002  Ossama Othman  <ossama@uci.edu>

	* tao/debug.cpp:

	  "u_int" -> "unsigned int" so that "ace/OS.h" need not be
	  included.

Thu May 23 15:30:40 2002  Ossama Othman  <ossama@uci.edu>

	* tao/Cleanup_Func_Registry.h:
	* tao/debug.h:

	  No need to include `corbafwd.h'.  `TAO_Export.h' is enough.

	* tao/Connection_Handler.h:

	  No need to include `ace/SOCK.h'.  Forward declaring ACE_SOCK is
	  enough.

	  Removed non-essential forward declarations, i.e. ACE_Reactor and
	  ACE_Event_Handler.

	  Added forward declarations for TAO_Transport, ACE_SOCK and
	  ACE_Lock.

	* tao/LF_Event.h:

	  No need to include `corbafwd.h'.  `TAO_Export.h' is enough.

	  No need to forward declare TAO_Transport and
	  TAO_Leader_Follower.

	* tao/ORB.cpp (register_initial_reference):

	  Removed redundant parameter checks.

	* tao/Object_Ref_Table.cpp (register_initial_reference):

	  Corrected exception thrown if the object ID parameter is
	  invalid.  CORBA::ORB::InvalidName should be thrown instead of
	  CORBA::BAD_PARAM.

	  When attempting to register a duplicate object reference, throw
	  CORBA::ORB::InvalidName instead of CORBA::INV_OBJREF.  This is
	  required by the spec.

Thu May 23 12:51:51 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/util/utl_global.cpp:

          Fixed a bug in the IDL compiler's handling of
          #pragma prefix when there is a chain of included IDL files
          and repeated includes in the chain. Thanks to Bill Tonseth
          <wtonseth@yahoo.com> for reporting the bug.

Thu May 23 13:34:35 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* tests/Nested_Upcall_Crash/Makefile:
	* tests/Nested_Upcall_Crash/Test.idl:
	* tests/Nested_Upcall_Crash/Client_Peer.h:
	* tests/Nested_Upcall_Crash/Client_Peer.cpp:
	* tests/Nested_Upcall_Crash/Server_Peer.h:
	* tests/Nested_Upcall_Crash/Server_Peer.cpp:
	* tests/Nested_Upcall_Crash/client.cpp:
	* tests/Nested_Upcall_Crash/scavenger.cpp:
	* tests/Nested_Upcall_Crash/server.cpp:
	  Commit new regression test for
	  http://deuce.doc.wustl.edu/bugzilla/show_bug.cgi?id=1202

Thu May 23 12:02:19 2002  Carlos O'Ryan  <coryan@atdesk.com>

	* orbsvcs/performance-tests/RTEvent/lib/Control.cpp:
	  Fixed event type mismatch.  Add loopbacks for the low priority
	  consumers.

	* orbsvcs/performance-tests/RTEvent/lib/Loopback_Supplier.cpp:
	* orbsvcs/performance-tests/RTEvent/lib/Peer_Base.cpp:
	* orbsvcs/performance-tests/RTEvent/lib/Supplier.cpp:
	  Add debug messages, but commented out, they may be useful in the
	  future.

	* orbsvcs/performance-tests/RTEvent/Makefile:
	  Add new TCP_Baseline test to the Makefile.

	* orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/client.cpp:
	* orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/roundtrip.conf:
	  Enable EC_Factory in the Service Configurator.

	* orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/run_roundtrip.sh:
	  Fixed options.

Wed May 22 23:18:59 2002  Priyanka  <oci@cs.wustl.edu>

        * TAO version 1.2.3 released.

Wed May 22 11:55:10 2002 Ru Gunatilleke <ru@ociweb.com>

	* examples/RTCORBA/Activity/README: Added description on
	  options for creating POA.

	* examples/RTCORBA/Activity/svc.conf.client: Added -ThreadCount 2

Tue May 21 16:10:11 2002 Ru Gunatilleke <ru@ociweb.com>

	* examples/RTCORBA/Activity/README: Fixed the description on
	  supplying the service configurator file.

	* examples/RTCORBA/Activity/svc.conf.server: Added -POACount 1
	  and -JobCount 2.  Thanks to Patrick Lardieri
 	  <patrick.j.lardieri@lmco.com> and Gautam Thaker
 	  <gthaker@atl.lmco.com> for reporting this and to
	  Pradeep Gore for supplying the fix.

Tue May 21 15:53:07 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tests/File_IO/client.cpp (validate_connection): Fixed exception
	  macro error.

Tue May 21 15:03:45 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tao/Thread_Lane_Resources.cpp (connector_registry): There was a
	  subtle bug in this method: <connector_registry_> was being
	  assigned to a new registry without it being opened first,
	  resulting in other threads potentially seeing a partially
	  initialized connector registry.  In addition, the open() on the
	  registry was not being performed at the exact correct place.
	  This bug led to the File_IO test failing since it uses two
	  client threads invoking on the same server.

	* tests/File_IO/client.cpp: Added the ability to set the number of
	  iterations and the number of threads. Also validated the
	  connection to make sure we don't get an errand transient
	  exceptions.

Sat May 18 08:46:46 2002  Ossama Othman  <ossama@uci.edu>

	* tests/ORT/ORT.dsw:

	  Added missing workspace file.

	* tests/ORT/client.dsp:

	  Do not link IOR_Table and PortableServer libraries, and removed
	  IOR_Table and PortableServer directories from the include and
	  library search paths.  They aren't needed.

	* tests/ORT/server.dsp:

	  Do not link IOR_Table library, and removed IOR_Table directory
	  from the include and library search paths.  They aren't needed.

Sat May 18 07:59:59 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h:
	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (open):

	  Configure the connector to use blocked connections.  The recent
	  non-blocking connect fixes had some thread safety issues.  To be
	  addressed after the forthcoming beta.

Fri May 17 18:55:09 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tests/ORT/client.dsp :
	  Fixed a typo: Portableclient to PortableServer.

Fri May 17 11:30:05 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tests/ORT/client.dsp:
	* tests/ORT/server.dsp: Fixed and forced custom IDL build rules.

Thu May 16 16:39:01 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tests/TAO_tests.dsw:
	* tests/ORT/client.dsp:
	* tests/ORT/server.dsp:
	  Created new dsp files and inserted them in the TAO_tests workspace.

Thu May 16 15:29:33 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp (open):

	  Do not use the blocking connection strategy by default.  The
	  fixes below obviate the need to do so.

	  (make_connection):

	  Updated to use the latest connection timeout features and fixes
	  in TAO.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h
	  (TAO_SSLIOP_BASE_CONNECTOR):

	  This type is no longer an ACE_Strategy_Connector, and is now an
	  ACE_SSL_Strategy_Connector.  The former does not handle
	  protocols with multiple handshakes, such as SSL, correctly.
	  This fixes non-blocking SSLIOP connect() problems that prevented
	  the use of the latest connection timeout fixes and enhancements
	  available in TAO.

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (make_connection):

	  Updated to use the latest connection timeout features and fixes
	  in TAO.

Wed May 15 17:38:06 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* docs/tutorials/Quoter/On_Demand_Activation/Makefile:
	  Shouldnt compile when AMI is disabled. Put in the fix. This will
	  fix the errors in RedHat_7.1_No_AMI_(beguine)

Wed May 15 16:04:37 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* tests/File_IO/run_test.pl:
	  Increased the wait time for the ior file. It was raising an
	  exception because of insufficient time.

Wed May 15 15:59:42 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

	* orbsvcs/orbsvcs/Event/rtcorba_event_export.h:
	  MOdified the export file to fix the Winxp build errors.

Wed May 15 15:44:54 2002  Ossama Othman  <ossama@uci.edu>

	* TAO_IDL/be/be_visitor_interface/interface_sh.cpp
	  (visit_interface):
	* TAO_IDL/be/be_visitor_interface/interface_ss.cpp
	  (visit_interface):
	* TAO_IDL/be/be_visitor_operation/operation_sh.cpp
	  (visit_operation):
	* TAO_IDL/be/be_visitor_operation/operation_ss.cpp
	  (visit_operation):

	  Clarified one of the "_skel" method parameter names.  A pointer
	  to a servant is passed in, not an object reference.  Renamed
	  "_tao_object_reference" to "_tao_servant."

	From Eric Malenfant <EMalenfant@interstarinc.com>:
	* TAO_IDL/be/be_visitor_operation/operation_ss.cpp
	  (visit_operation):

	  Fixed generated skeleton code so that the upcall is not made if
	  the ServerRequestInterceptor::receive_request() interception
	  point caused a location forward to occur
	  (i.e. PortableInterceptor::ForwardRequest was thrown).

Wed May 15 15:20:15 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/IFRService/ConstantDef_i.cpp:

          Added a missing release from an ACE_Auto_Basic_Array_Ptr,
          which was causing the value of the constant to be trashed
          before it was returned. Thanks to Craig Rodrigues
          <crodrigu@bbn.com> for reporting the bug.

Wed May 15 11:26:15 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

	* orbsvcs/tests/Security/Big_Request/Makefile:
	  Updated dependencies.

Wed May 15 16:39:36 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* docs/tutorials/Quoter/Makefile: Only add On_Demand_Activation to
	  DIRS if corba_messaging=1.

Tue May 14 16:05:13 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

	* TAO_IDL/driver/drv_preproc.cpp (DRV_copy_input): Added ACE_OS:: to
	  fopen() and fclose().  Thanks to Eric Eide for reporting this.

Mon May 13 11:54:12 2002 Ru Gunatilleke <ru@ociweb.com>

	* orbsvcs/orbsvcs/PortableGroup.dsp:

	  Added a link to PortableServer library for each configuration.

Mon May 13 08:01:18 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Connection_Manager.cpp:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/distributer.cpp:

          Fixed exception macro related warnings.

Mon May 13 07:40:34 2002  Chad Elliott  <elliott_c@ociweb.com>

        * tests/RTCORBA/Linear_Priority/client.cpp:

          Change ACE_ENV_ARG_PARAMETER to ACE_ENV_SINGLE_ARG_PARAMETER.

Fri May 10 18:16:50 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

	* tests/RTCORBA/Linear_Priority/client.cpp (validate_connection):
	  Added calls to _validate_connection() to make sure that we give
	  enough time for connections to setup.  This way we can avoid
	  transient exceptions and unnecessary test failures.

Fri May 10 01:46:16 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/AVStreams/Component_Switching/receiver.cpp:
	  Remove unnecessary find() call.

Fri May 10 01:21:24 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/AVStreams/Asynch_Three_Stage/Connection_Manager.cpp:
	* orbsvcs/tests/AVStreams/Asynch_Three_Stage/distributer.cpp:
	* orbsvcs/tests/AVStreams/Asynch_Three_Stage/receiver.cpp:
	* orbsvcs/tests/AVStreams/Asynch_Three_Stage/run_test.pl:
	* orbsvcs/tests/AVStreams/Asynch_Three_Stage/sender.cpp:
	* orbsvcs/tests/AVStreams/Component_Switching/Connection_Manager.cpp:
	* orbsvcs/tests/AVStreams/Component_Switching/run_test.pl:
	  Minor memory management fixes.  Reduce complexity of
	  test scripts.

Thu May  9 14:26:52 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:
	  A pretty ugly for bug mentioned in bug id 1204. The change sets
	  a pointer to null after deletion. This would mask the actual
	  problem. The bug report should remind us of the problem anyway.

	  This should fix the LongUpcall test failure in our daily
	  builds.

Thu May  9 11:38:16 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	This checkin is to move the TAO_Connector_Registry to a lane. May
	be this should have been done in the first place, but it needed
	non-blocking connect code to show up. When using non-blocking
	connects the thread waits in the Reactor used to create a
	connector object. The reactor is usually the one created by the
	thread that created the maion thread and all hell breaks
	loose. This showed up only in the Collocation tests and thanks to
	Irfan for helping me understand what the Collocation test does.

	* tao/ORB_Core.cpp:
	* tao/ORB_Core.h:
	* tao/ORB_Core.i: Removed the pointer to the connector registry
	  maintained by the ORB_Core.

	  The accessor method to the connector registry now takes in an
	  ACE_ENV_ARG_DECL to propagate exceptions, since the connector
	  registry is created on demand.

	  Removed the code that initialized the connector_registry in
	  ORB_Core::init (), since it has to be created on demand.

	  The accessor to the connector registry gets the information from
	  the lane resources.

	* tao/CORBALOC_Parser.cpp:
	* tao/Invocation.cpp:
	* tao/ORB.cpp:
	* tao/Object.cpp: All accesses to the connector registry passes
	  the environment object and performs exception checking after the
	  call.

	* tao/Thread_Lane_Resources.cpp:
	* tao/Thread_Lane_Resources.h: Creates, manages and allows access
	  to the connector registry object.

	* tao/corbafwd.h: Added a location code to indicate the failure to
	  initialize a connector registry.


	  The above checkins should fix collocation test problems in our
	  builds.

Thu May  9 08:16:11 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Simple_Naming/run_test.pl:

          Reordered the individual tests and added a sleep between
          instances of the Naming_Service (for Windows only).

Thu May  9 03:33:20 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/AVStreams/Component_Switching/receiver.cpp:
	* orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:
	  Get rid of call to Connection_Manager::destroy() method.

Wed May  8 22:03:48 2002  Craig Rodrigues  <crodrigu@bbn.com>

	* orbsvcs/tests/AVStreams/Component_Switching/*:  Memory management
	  fixes.
	* orbsvcs/orbsvcs/AV/UDP.cpp:
	* orbsvcs/orbsvcs/AV/TCP.cpp:
	  Remove delete calls in destructors Acceptor and Connector classes
	  which where causing crashes under Windows.

Tue May  7 21:00:09 2002  Ossama Othman  <ossama@uci.edu>

	* orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:

	  Removed duplicate explicit template instantiations.

Tue May  7 22:58:20 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/No_Server_MT_Connect_Test/client.cpp: Mistaken include
	  causing link errors  in static builds.

Tue May 07 15:37:38 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/No_Server_MT_Connect_Test/client.cpp: The test used
	  multiple therads with reactive connect strategy. This caused the
	  test to behave in a crazy manner since a race condition was
	  getting introduced when multiple threads went in to the
	  reactor. Added a command line option for the number of threads
	  to be spawned.

	* tests/No_Server_MT_Connect_Test/run_test.pl: Use a single thread
	  for the test with reactive connect strategy. Thanks to Ru for
	  pointing out the problem on some platforms.

Tue May  7 15:00:16 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

	* tao/Messaging/messaging_export.h: Regenerated the export file
	  so it follows it's export settings based on TAO_AS_STATIC_LIBS
	  macros by default.

Tue May  7 14:40:01 2002  Chad Elliott  <elliott_c@ociweb.com>

        * tests/Muxed_GIOP_Versions/run_test.pl:

          Cleaned up the test script.

Tue May  7 12:27:16 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tests/Connection_Timeout/client.cpp (main): The bounds beyond
	  which a error is signalled is increased. This helps to reduce
	  noise in our daily builds. The bounds should not be increased
	  too much since we may miss errors doing that. Thanks to Ru
	  Gunatilleke for pointing it out.

Mon May  6 09:12:15 2002  Ru Gunatilleke  <ru@ociweb.com>

        * tests/Connection_Timeout/client.dsp:
          Added link to TAO_Messaging.lib for Release configuration.

Mon May  6 10:26:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Messaging/Makefile.bor:
          Added missing Asynch_Timeout_Handler

Fri May  3 07:37:34 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/performance-tests/RTEvent/lib/Control.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Low_Priority_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTClient_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.cpp:

          Replace the use of reset() on auto_ptr's with the macro
          ACE_AUTO_PTR_RESET.

Thu May  2 16:53:43 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * utils/catior/catior.cpp (main): A file with an IOR and a "\n"
          confused the "catior" into thinking that there is one more IOR
          in this file. Fix to rectify this. Thanks to Gautam Thaker
          <gthaker@atl.lmco.com> for the fix.

Thu May  2 07:56:24 2002  Chad Elliott  <elliott_c@ociweb.com>

        * tests/Queued_Message_Test/Queued_Message_Test.cpp:

          Include ace/Log_Msg.h to get the definition of the ACE_ERROR and
          related macros.

Thu May  2 01:44:35 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/Connection_Handler.cpp (decr_pending_upcalls): Uninlined a
          few methods.

        * tao/PortableServer/Default_Servant_Dispatcher.cpp: Changed
          ACE_ENV_ARG_DECL to ACE_ENV_ARG_DECL_NOT_USED.

        * tests/RTCORBA/Collocation/Collocation.cpp
          (setup_test_parameters): Fixed macro error.

Thu May  2 00:39:48 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/Security/*/Makefile: Updated dependencies. This
          should fix a lot of SunCC51 errors.

Thu May  2 00:28:25 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/miopconf.h: Fixed fuzz errors.

Thu May  2 00:26:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Connection_Timeout/client.bor: Fixed the Borland makefile
          to link the messaging library in.

Thu May  2 00:23:14 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Messaging/Messaging.bor: Added
          Connection_Timeout_Policy_i.cpp  to the list of files. This
          should fix Borland errors.

Thu May  2 00:18:34 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Connection_Timeout/client.cpp: Grr! The piece of code that
          sets the policy had been commented out. The policy needs to be
          applied for the test to work. This should fix the errors in the
          builds.

Thu May 02 00:23:08 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp: Removed reserved_ports.h and added
          default_ports.h.

Wed May 01 22:54:13 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/Servant_Dispatcher:
        * tao/RTPortableServer/RT_Servant_Dispatcher:
        * tao/PortableServer/Default_Servant_Dispatcher:

          The way these classes were being used was that in
          TAO_Object_Adapter::dispatch_servant, the dispatcher would take
          over, call pre_invoke using the request to change the priority
          of the upcall thread, make the upcall, and then call post_invoke
          to reset the priority of the upcall thread.  This worked fine
          for remote requests since all the request parameters are
          represented by the TAO_ServerRequest object.

          However, this scheme would not work for collocated cases as the
          request parameters are not represented in a single object.

          Therefore, the dispatch() call on the dispatchers was replaced
          by pre_invoke_remote_request(), pre_invoke_collocated_request(),
          and post_invoke().  pre_invoke_remote_request() and
          pre_invoke_collocated_request() are different since in the
          remote case we need to do more, i.e., extract the
          client-propagated priority from the ServiceContextList of the
          request.  In the collocated case, the priority of the client is
          the priority of the request thread.

          Default_Servant_Dispatcher still is a no-op.  The state for
          resetting the priority of the thread had to be moved from
          RT_Priority_Model_Processing to the Servant_Upcall.  Therefore,
          the RT_Priority_Model_Processing was no longer needed and was
          removed.

          pre_invoke_collocated_request() check for a thread pool without
          lanes and the SERVER_DECLARED policy.  If this combination
          exists, it may need to change the priority of the upcall thread
          if the target server declared priority is different.

        * tao/RTPortableServer/RT_Collocation_Resolver.cpp
          (is_collocated): If the target POA does not have a dedicated
          thread pool, then all calls to it are collocated.

        * tao/PortableServer/Object_Adapter.cpp (dispatch_servant):
          Pre_Invoke_State was removed from RT_Priority_Model_Processing
          and added to the Servant_Upcall.

        * tests/RTCORBA/Collocation: Extended this test to do more
          extensive and precise testing and cover all collocation uses
          cases. The new test now has the following structure:

          - One servant is in the Root POA which is service by the default
          thread pool.

          - One servant is in a POA with the CLIENT_PROPAGATED policy and
          is serviced by a thread pool without lanes.

          - Two servants are in a POA with the SERVER_DECLARED policy and
          is serviced by a thread pool without lanes.  One of the servant
          is at default priority and the other is at default + 1 priority.

          - One servant is in a POA without a priority model policy and is
          serviced by a thread pool without lanes.

          - One servants is in a POA with the CLIENT_PROPAGATED policy and
          is serviced by a thread pool with lanes.  Depending on the
          priority of the caller, either one of the lanes processes the
          request.

          - Two servants are in a POA with the SERVER_DECLARED policy and
          is serviced by a thread pool with lanes.  One of the servant is
          at default priority and the other is at default + 1 priority.

          The main thread still uses both the default priority and the
          default + 1 priority.  The test checks that the correct pool,
          lane, and priority is being used to run the upcall.  For
          servants in POAs without RT thread pools, made sure that all
          upcalls on these servants are collocated. Also, added additional
          assertion checks and abstracted out common code.

        * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp
          (visit_operation): Added a call to
          servant_upcall.pre_invoke_collocated_request() to
          ThruPOA_Proxy_Impl collocated methods.

        * tao/PortableServer/ThruPOA_Object_Proxy_Impl.cpp:
        * tao/PortableServer/Collocated_Object.cpp:
          Added a call to servant_upcall.pre_invoke_collocated_request()
          to _non_existent() and _is_a().

        * tao/PortableServer/ImplRepoS.cpp:
        * tao/Domain/DomainS.cpp:
        * tao/PortableServer/PolicyS.cpp:
          Added calls to servant_upcall.pre_invoke_collocated_request()
          for hand generated collocated upcall code.

Wed May  1 23:42:14 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp: #included
          default_ports.h.

Wed May  1 23:21:00 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/default_ports.h: Renamed tao/reserved_ports.h as per
          Ossama's suggestion.  He opines that the ports are not reserved
          but just defaults in TAO.

        * tao/reserved_ports.h: Removed file from the repo.

        * tao/ORB.cpp:
        * tao/MCAST_Parser.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp: Changed the includes
          to the new file.

Wed May  1 21:01:43 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.cpp (fini):

          Do not call "this->thread_lane_resources_manager()" since it
          attempts to create a thread lane resource manager if the cached
          pointer is zero.  Instead check if the cached pointer is zero,
          and then finalize the manager if the pointer is non-zero.  If
          the ORB was not fully initialized then there is no point in
          calling thread_lane_resources_manager(), have it attempt to
          create a new manager, and then finalize that completely unused
          manager.  Furthermore, if the factory method for the manager
          returns a zero pointer, a seg fault will occur since that method
          returns a dereferenced pointer.  This scenario is prone to occur
          when the Service Configurator is unable to initialize a
          service.  This change fixes a seg fault.

        * tao/Asynch_Queued_Message.cpp:
        * tao/Cleanup_Func_Registry.cpp:
        * tao/Sequence.h:
        * tao/Synch_Queued_Message.cpp:

          Include "ace/Log_Msg.h" to pull in the definition of the
          ACE_ASSERT macro.  Necessitated by inter-header dependency
          reductions in ACE.

        * tao/Endpoint.h:
        * tao/Principal.h:
        * tao/ValueBase.h:
        * tao/ValueFactory.h:

          Include "ace/Synch_T.h" to pull in the definition of the
          ACE_SYNCH_MUTEX macro.  Necessitated by inter-header dependency
          reductions in ACE.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.h
          (TAO_SSLIOP_Connection_Handler):

          Don't export this class.  It cause an internal compiler error
          from MS Visual Studio .NET (MSVC++ 7) to occur.  The export
          wasn't really needed to begin with.

          Removed useless forward declarations and typedefs.

          No need to include "tao/IIOP_Connection_Handler.h" to pull in
          TAO_IIOP_Properties class.  A forward declaration is enough.

          No need to include "tao/Wait_Strategy.h".

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:

          Include "tao/IIOP_Connection_Handler.h" and
          "tao/Wait_Strategy.h" to pull in TAO_IIOP_Properties and
          TAO_Wait_Strategy class declarations, respectively.

Wed May 01 22:56:44 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * orbsvcs/Naming_Service/Naming_Server_static.dsp:
        * orbsvcs/Naming_Service/Naming_Server.dsp:
        * orbsvcs/orbsvcs/FT_ORB.dsp:
        * orbsvcs/orbsvcs/PortableGroup.dsp: Added the new files in to the
          respective project files.

Wed May  1 22:12:04 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	This checkin is to reduce the size of orbconf.h. I see all
	similarities between this and ace/OS.h. Looks like it is an OS.h
	in the making. Trying to learn and avert the crisis before.

	* tao/orbconf.h: Removed a few definitions and moved it other
	  files. Please see below for the names of the new files and the
	  details of the contents removed from this file. The idea is to
	  keep the contents of this file very very ORB specific. No
	  service level details should be included. All the policies need
	  to be moved out, but that is the next round.

	* tao/objectid.h: ObjectIds redefined by TAO for internal use have
	  been moved here. Symbols recognized by resolveinitial_references
	  () and list_initial_services () have been placed here.

	* tao/reserved_ports.h: All the reserved ports for TAO's services
	  are defind here.

	* tao/Transport.cpp: Used TAO_MAXBUFSIZE instead of
	  TAO_CONNECTION_HANDLER_STACK_BUF_SIZE which needs to be
	  deprecated.

	* tao/MCAST_Parser.cpp:
	* tao/ORB.h:
	* tao/ORB.cpp:
	* tao/params.h: Additional includes because of the above changes.

	* orbsvcs/orbsvcs/FaultTolerance/ftconf.h:
	* orbsvcs/orbsvcs/Naming/nsconf.h:
	* orbsvcs/orbsvcs/PortableGroup/miopconf.h: New service specific
	  configuration files. IMHO, they dont have any business to be in
	  the ORB core.

	* orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
	* orbsvcs/orbsvcs/Naming/Hash_Naming_Context.cpp:
	* orbsvcs/orbsvcs/Naming/Naming_Utils.cpp:
	* orbsvcs/orbsvcs/Naming/Naming_Utils.h:
	* orbsvcs/orbsvcs/Naming/Persistent_Context_Index.h:
	* orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp:
	* orbsvcs/orbsvcs/Trader/Trading_Loader.cpp: Additional includes
	  because of the above changes.

Wed May  1 18:49:10 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * tests/Big_Oneways/Coordinator.h:
        * tests/Big_Oneways/Session.cpp:
        * tests/Big_Oneways/server.cpp:
        * tests/Big_Twoways/Session.h:
          Fix use of _remove_ref() to avoid "pure virtual method called"
          errors.

Tue Apr 30 23:17:04 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/orbconf.h: Fixed some typos and removed duplicate
          definitions.

Tue Apr 30 23:06:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Stub.cpp (TAO_Stub): Fixed compile errors in minimum corba
          builds.

Wed May  1 02:46:59 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/Endpoint_Strategy.cpp: Add .in() parameters
          to eliminate gcc warnings.

Tue Apr 30 20:50:06 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:

          Carlos modified the enum values in AST_Argument::Direction
          to have power-of-two values so sets of directions could be
          used in a bit mask for AMH. This means that the argument node
          direction can no longer be assigned directly to the
          CORBA::ParameterMode enum value in the CORBA::ParDescription
          struct used to describe a parameter when creating an operation
          definition in the Interface Repository. Thanks to Priyanka
          Gontla <pgontla@doc.ece.uci.edu> and Craig Rodrigues
          <crodrigu@bbn.com> for discovering this bug.

Tue Apr 30 09:31:42 2002  Carlos O'Ryan  <coryan@atdesk.com>

        * orbsvcs/performance-tests/RTEvent/TCP_Baseline/Makefile:
        * orbsvcs/performance-tests/RTEvent/TCP_Baseline/server.cpp:
        * orbsvcs/performance-tests/RTEvent/TCP_Baseline/client.cpp:
          Add new test to measure the baseline priority inversions in the
          TCP/IP stack, basically the canonical 'MT Cubit' configuration,
          but using a couple of sockets and the Reactor.

        * orbsvcs/performance-tests/RTEvent/lib/Control.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Low_Priority_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTClient_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.cpp:
          Use reset() to change the state of auto_ptr objects.

        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Makefile:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Makefile:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
          Update deps.

Wed May  1 00:59:39 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/receiver.cpp:
        * orbsvcs/tests/AVStreams/Bidirectional_Flows/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/receiver.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/receiver.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/receiver.cpp:
          Spelling corrections.

        * orbsvcs/orbsvcs/AV/Endpoint_Strategy.cpp:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy.h:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.h:
          Try to plug some more memory leaks.

Tue Apr 30 17:39:37 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/default_resource.cpp (init): Removed support for
	  "-ORBConnectionLock" and "-ORBConnectorLock". They had been in
	  the deperecated mode for sometime now.

	* docs/Options.html: Removed documentation for the above two
	  ORB options and added documentation for "-ORBConnectStrategy".

Tue Apr 30 17:03:49 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Resource_Factory.h:
        * tao/Resource_Factory.cpp: Changed the name of the enum
          Connection_Strategy to Purging_Strategy. Removed
          connection_caching_strategy_type () from the interface since it
          is no longer used.

        * tao/default_resource.cpp:
        * tao/default_resource.h: Changed all references of
          TAO_Resource_Factory::Connection_strategy to
          TAO_Resource_Factory::Purging_Strategy. Added a new -ORB option,
          -ORBConnectionPurgingStrategy. This would replace the option
          -ORBConnectionCachingStrategy which will be deprecated in the
          future. The new option has the same functionality of the
          -ORBConnectionCachingStrategy but with a more meaningful name.

        * tao/orbconf.h: Added a new #define
          TAO_CONNECTION_PURGING_STRATEGY that will replace the existing
          TAO_CONNECTION_CACHING_STRATEGY. The latter will be deprecated.

        * tao/Strategies/advanced_resource.cpp: Changed references of
          Connection_Strategy to Purging_Strategy.

        * docs/Options.html: Added documentation for the new ORB option,
          -ORBConnectionPurgingStrategy.

        * tests/Connection_Purging/*.conf: Replaced all the occurences of
          -ORBConnectionCachingStrategy with -ORBConnectionPurgingStrategy.

Tue Apr 30 21:41:12 UTC 2002  Craig Rodrigues

        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/run_test.pl:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/sender.h:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.h:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.h:
          Make frame_rate_ a double value.

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * orbsvcs/orbsvcs/AV/AVStreams_i.h:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.h:
          - Remove extraneous calls to _remove_ref() which were causing crashes
          - Add additional is_nil() checks before calling
          - Remove extraneous calls to string_to_object()
          - Various attempts at memory management fixes

Tue Apr 30 14:51:58 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Makefile:
        * tests/Makefile.bor: Added the Connection_Timeout test to the
          list of directories.

Tue Apr 30 14:46:26 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Connection_Timeout/client.cpp:
        * tests/Connection_Timeout/README:
        * tests/Connection_Timeout/run_test.pl:
        * tests/Connection_Timeout/Connection_Timeout.dsw:
        * tests/Connection_Timeout/Test.idl:
        * tests/Connection_Timeout/client.dsp:
        * tests/Connection_Timeout/client.bor:
        * tests/Connection_Timeout/Makefile.bor: A simple test for
          connection timeouts. The client tries connecting to a
          non-existing server and times out based on the policy value
          set.

Tue Apr 30 14:20:55 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Messaging/TAO_Messaging_Static.dsp: Added the new files,
          Connection_Timeout_Policy.*  to the project file.

Tue Apr 30 13:50:55 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

	* tao/IIOP_Connector.cpp: Checked to see if the connection timeout
	  policy is set by the application and if so, gets the value.

	* tao/ORB_Core.cpp:
	* tao/ORB_Core.h: Added new hook methods connection_timeout_hook
	  (), connection_timeout () and stubless_connection_timeout
	  (). They are used for setting the connection timeout hook and
	  querying the timeout values on the ORB and thread levels.

	* tao/Stub.cpp:
	* tao/Stub.h: Added a new method connection_timeout () that
	  queries the policy list at the object level for a
	  connection timeout policy and returns the policy.

	* tao/orbconf.h:
	  Removed TAO_HAS_MINIMUM_CONNECTION_CACHING_STRATEGY since it has
	  no meaning now. Added a new #define
	  TAO_HAS_CONNECTION_TIMEOUT_POLICY that can be configured into
	  the ORB. Added TAO_CACHED_POLICY_CONNECTION_TIMEOUT to the list
	  of cached policies in the ORB.

	* tao/Messaging/Connection_Timeout_Policy_i.cpp:
	* tao/Messaging/Connection_Timeout_Policy_i.h: New files
	  containing the implementation of the new proprietary connection
	  timeout policy.

	* tao/Messaging/TAO_Messaging.dsp:
	* tao/Messaging/Makefile: Added the new file.

	* tao/Messaging/Messaging.h: #included TAO_ExtC.h

	* tao/Messaging/Messaging_ORBInitializer.cpp: Initialized the hook
	  for the connection timeout.

	* tao/Messaging/Messaging_PolicyFactory.cpp: Added a call to
	  create the connection timeout policy.

	* tao/Messaging/Messaging_Policy_i.cpp: Moved the inline inclusion
	  to the global scope. The inline inclusion was within the #if
	  defined of RELATIVE_RT_TIMEOUT_POLICY and it doesnt sound
	  right.

	* tao/Messaging/Messaging_Policy_i.h: Doxygenized the
	  documentation of the classes.

Tue Apr 30 09:36:37 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * TAO_IDL/driver/drv_preproc.cpp (DRV_cpp_init): Removed a stray
          "%s%s%s%s".  Thanks to Vitaly Prapirny <marl@mebius.net> for
           reporting this.

Mon Apr 29 16:41:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Messaging/TAO_Ext.pidl: Added some documentation.

Mon Apr 29 16:02:35 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Messaging/Makefile.bor (OBJFILES): Added the new files.

Mon Apr 29 15:57:14 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Messaging/TAO_Messaging.dsp:
        * tao/Messaging/TAO_Messaging_Static.dsp: Added new files to the
          above project files.

Mon Apr 29 15:00:59 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/orbconf.h: Added a proprietary policy type for managing
          connection timeouts.

        * tao/Messaging/TAO_Ext.pidl:
        * tao/Messaging/TAO_ExtC.h:
        * tao/Messaging/TAO_ExtC.i:
        * tao/Messaging/TAO_ExtC.cpp: An extension to the TAO's
          proprietary messaging policy. We define the new policy for
          connection timeouts here.

        * tao/Messaging/Makefile: Added the new file to the makefile.
        * tao/Messaging/diffs/TAO_Ext.diff: The diffs between the
          generated code and code that is being checked in.

Mon Apr 29 14:42:07 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Muxed_GIOP_Versions/server.cpp: Fixed a compile error in
          single threaded builds.

Mon Apr 29 11:28:59 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
        * orbsvcs/IFR_Service/IFR_Service.cpp:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/orbsvcs/IFRService/Makefile.IFRService:
          Fixed the compilation errors for unused environment
          variables.
          Also updated the dependencies.

Mon Apr 29 06:41:53 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/DIOP_Connector.cpp: Fixed a typo. This was
          causing all the tests linking in the Strategies libraries to
          fail in our daily builds.

Mon Apr 29 08:17:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAOACE.dsw:
          Added dependencies for IFRService and IFR_Service

Sun Apr 28 21:43:17 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport_Connector.h:
        * tao/Transport_Connector.cpp: Changed the method
          create_connect_strategy () to return an int. This should help
          us to do some error checking.

        * tao/IIOP_Connector.cpp:
        * tao/Strategies/DIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp: Used the
          return value to check for errors.

Sun Apr 28 18:01:47 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Makefile:
        * tests/Makefile.bor: Added the new tests to the list.

Sun Apr 28 17:57:00 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Connect_Strategy_Test/client.cpp:
        * tests/Connect_Strategy_Test/server.cpp:
        * tests/Connect_Strategy_Test/Hello.cpp: Fixed the ACE_RCSID
          strings.

Sun Apr 28 17:51:43 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/No_Server_MT_Connect_Test/client.bor (IDLDIR):
        * tests/No_Server_MT_Connect_Test/Makefile:
        * tests/No_Server_MT_Connect_Test/Makefile.bor:
        * tests/No_Server_MT_Connect_Test/No_Server_Connect_Test.dsw:
        * tests/No_Server_MT_Connect_Test/README:
        * tests/No_Server_MT_Connect_Test/blocked.conf:
        * tests/No_Server_MT_Connect_Test/client.bor:
        * tests/No_Server_MT_Connect_Test/client.cpp:
        * tests/No_Server_MT_Connect_Test/client.dsp:
        * tests/No_Server_MT_Connect_Test/reactor.conf:
        * tests/No_Server_MT_Connect_Test/run_test.pl:
        * tests/No_Server_MT_Connect_Test/server.bor:
        * tests/No_Server_MT_Connect_Test/server.cpp:
        * tests/No_Server_MT_Connect_Test/server.dsp:
        * tests/No_Server_MT_Connect_Test/test.idl:
        * tests/No_Server_MT_Connect_Test/test_i.cpp:
        * tests/No_Server_MT_Connect_Test/test_i.h: Yet another test for
          non-blocking connect strategies. This test uses a stale
          reference to connect using multiple threads. The clients should
          exit gracefully, else there is something wrong going on in the
          refcount mechanism inside the ORB.

Sun Apr 28 17:29:39 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Connect_Strategy_Test/client.dsp (BuildCmds):
        * tests/Connect_Strategy_Test/server.dsp: Fixed the names of the
          server and client.

Sun Apr 28 17:07:52 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connection_Handler.inl: Fixed a typo in
          is_connect_succesfull ().

Sun Apr 28 16:52:19 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Connect_Strategy_Test/Connect_Strategy_Test.dsw:
        * tests/Connect_Strategy_Test/Hello.cpp:
        * tests/Connect_Strategy_Test/Hello.h:
        * tests/Connect_Strategy_Test/Makefile:
        * tests/Connect_Strategy_Test/Makefile.bor:
        * tests/Connect_Strategy_Test/README:
        * tests/Connect_Strategy_Test/Test.idl:
        * tests/Connect_Strategy_Test/blocked.conf:
        * tests/Connect_Strategy_Test/client.bor:
        * tests/Connect_Strategy_Test/client.cpp:
        * tests/Connect_Strategy_Test/client.dsp:
        * tests/Connect_Strategy_Test/reactor.conf:
        * tests/Connect_Strategy_Test/run_test.pl:
        * tests/Connect_Strategy_Test/server.bor:
        * tests/Connect_Strategy_Test/server.cpp:
        * tests/Connect_Strategy_Test/server.dsp: A simple test for
          testing the different connection establishment strategies.

Sun Apr 28 09:19:17 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/DIOP_Connector.cpp: Do not decrement the refcount
          on the handler since we dont use the new non-blocking connect
          scheme here. Rather there is no connection per-se. This should
          fix runtime errors in the examples using this protocol.

Sun Apr 28 08:54:07 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ORB_Core.cpp (shutdown): Added a #if (TAO_HAS_INTERCEPTORS
          ==1) around the place where pi_current_ is set to null. This
          should fix build errors in the minimum corba builds.

Sun Apr 28 08:50:18 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/LF_Connect_Strategy.cpp:
        * tao/Reactive_Connect_Strategy.cpp: Fixed compile errors with
          minimum corba builds.

Sat Apr 27 22:19:06 2002  Balachandran Natarajan  <bala@guajira.cs.wustl.edu>

        * tests/ORB_init/ORB_init.cpp:
        * orbsvcs/tests/Concurrency/CC_command.cpp: Changed the
          CORBA::Exception::_id () call in these files to the new spec
          defined CORBA::Exception::_rep_id () call.

Sat Apr 27 18:27:19 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/orbsvcs/Makefile:
          Modified the Makefile to get the Makefile.IFRService
          added to the MKLIST when minimum_corba = 0.

Sat Apr 27 18:05:16 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
          Modified the input parameter for the fini () member function.

Sat Apr 27 18:09:01 2002  Balachandran Natarajan  <bala@guajira.cs.wustl.edu>

        * tao/LF_Connect_Strategy.h:
        * tao/Connect_Strategy.h:
        * tao/Blocked_Connect_Strategy.h:
        * tao/Reactive_Connect_Strategy.h: Fixed fuzz errors.

Sat Apr 27 18:04:47 2002  Balachandran Natarajan  <bala@guajira.cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp: Fixed some
          warnings with g++.

Sat Apr 27 17:44:40 2002  Balachandran Natarajan  <bala@guajira.cs.wustl.edu>

        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.h: Fixed some stupid compile
          errors with g++.

Sat Apr 27 17:32:49 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp: Created an object
          of type blocked connect strategy that will be used by the
          IIOP_SSL_Connector and SSLIOP_Connector. Updated the
          make_connection () to establish connection the way other
          protocols do.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp: Updated the
          make_connection () to establish connection the way other
          protocols do.

          The above two connectors would use a blocked connect strategy
          since I was advised by Ossama not to try implementing
          non-blocking connects.

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp: Made changes
          to this protocol though they are not relevant. May be we should
          zap this. But let it be there for the time being.

Sat Apr 27 16:55:01 2002  Balachandran Natarajan  <bala@guajira.cs.wustl.edu>

        * tao/*Makefile: Updated dependencies.

Sat Apr 27 16:54:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Makefile.bor (OBJFILES):
        * tao/TAO.dsp:
        * tao/TAO_Static.dsp: Added the new files to the project files.

        This checkin is to add support for non-blocking connects. The code
        is merged from the branch in to the main trunk.

        Fri Apr 26 21:56:33 2002  Balachandran Natarajan  <bala@guajira.cs.wustl.edu>

        * tao/DynamicAny/DynamicAnyC.cpp:
        * tao/DynamicInterface/Unknown_User_Exception.cpp:
        * tao/IORManipulation/IORC.cpp:
        * tao/IORManipulation/IORC.i:
        * tao/IORTable/IORTableC.cpp:
        * tao/IORTable/IORTableC.i:
        * tao/Messaging/Messaging.h:
        * tao/Messaging/Messaging_ORBInitializer.cpp:
        * tao/Messaging/Messaging_PolicyFactory.cpp:
        * tao/Messaging/Messaging_Policy_i.cpp:
        * tao/Messaging/Messaging_Policy_i.h:
        * tao/PortableServer/Active_Object_Map.cpp:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/PortableServer/PortableServerC.i:
        * tao/RTCORBA/RTCORBAC.cpp: Yet another merge with the main trunk.


        Fri Apr 26 18:24:02 2002  Balachandran Natarajan  <bala@guajira.cs.wustl.edu>

        * tao/BoundsC.cpp:
        * tao/BoundsC.i:
        * tao/Cache_Entries.h:
        * tao/ClientRequestInfo_i.cpp:
          * tao/Environment.cpp:
          * tao/Exception.cpp:
          * tao/Exception.h:
          * tao/GIOP_Message_Base.cpp:
          * tao/GIOP_Message_Base.h:
          * tao/GIOP_Message_Generator_Parser_12.cpp:
          * tao/GIOP_Message_Lite.cpp:
          * tao/IIOP_Acceptor.cpp:
          * tao/IIOP_Connector.cpp:
          * tao/IIOP_Connector.h:
          * tao/IOPC.cpp:
          * tao/Invocation.cpp:
          * tao/Invocation.h:
          * tao/Invocation.i:
          * tao/Makefile:
          * tao/Messaging_SyncScopeC.cpp:
          * tao/Messaging_SyncScopeC.h:
          * tao/Messaging_SyncScopeC.i:
          * tao/NVList.cpp:
          * tao/ORB.cpp:
          * tao/ORBInitializer_Registry.cpp:
          * tao/ORBInitializer_Registry.h:
          * tao/ORB_Core.cpp:
          * tao/ORB_Core.h:
          * tao/ORB_Table.cpp:
          * tao/ORB_Table.h:
          * tao/ORB_Table.inl:
          * tao/PICurrent.cpp:
          * tao/PICurrent.inl:
          * tao/PolicyC.cpp:
        * tao/PolicyC.i:
        * tao/PollableC.cpp:
        * tao/PortableInterceptorC.cpp:
        * tao/PortableInterceptorC.i:
        * tao/Stub.cpp:
        * tao/Stub.h:
        * tao/TAOC.cpp:
        * tao/TAOC.h:
        * tao/TAOC.i:
        * tao/Transport.cpp:
        * tao/Transport_Connector.cpp:
        * tao/Transport_Connector.h:
        * tao/Typecode.cpp:
        * tao/WrongTransactionC.cpp:
        * tao/WrongTransactionC.i:
        * tao/default_resource.cpp:
        * tao/orbconf.h:
        * tao/Messaging/Makefile:
        * tao/RTCORBA/Makefile:
        * tao/Strategies/DIOP_Connector.cpp:
        * tao/Strategies/DIOP_Connector.h:
        * tao/Strategies/Makefile:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.h: Merged with the main trunk.

        Fri Apr 26 13:18:53 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.h:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/DIOP_Connector.cpp:
        * tao/Strategies/DIOP_Connector.h:
        * tao/Strategies/DIOP_Connection_Handler.cpp: Made the changes
          made for IIOP to the above protocols.

        Fri Apr 26 12:53:13 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connector.cpp:
        * tao/IIOP_Connection_Handler.cpp: Removed vague debug statement

        Tue Apr 23 12:16:01 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connection_Handler.cpp:
        * tao/Connection_Handler.h:
        * tao/Connection_Handler.inl: Removed the virtual method
          shutdown_object ().  Made the handle_close_i () implemented in
          all protocols a pure virtual method in this class.

          The decr_refcount () calls handle_close_i () when the refcount
          reaches zero instead of shutdown_object ().

        * tao/IIOP_Connection_Handler.cpp: When the upcall count reaches
          zero, we call decr_refcount () in handle_close () and
          handle_input ().

        * tao/Connector_Impl.cpp: Incremented the refcount of the
          connection handler as soon as it is created, since we are aware
          that this handler could land up in the reactor if the right
          strategies are used.

        * tao/IIOP_Connector.cpp: Decermented the refcount of the handler
          after the wait () call. Unsuccesful connects will destroy the
          handler at this point.

        Mon Apr 22 17:53:04 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connection_Handler.cpp:
        * tao/Connection_Handler.h:
        * tao/Connection_Handler.inl: Added reference count to check the
          life time of the handlers. Added a method shutdown_object () for
          memory management.

        * tao/IIOP_Connection_Handler.cpp:
        * tao/IIOP_Connection_Handler.h: Implement concrete
          implementations for shutdown_object ().

        Mon Apr 22 13:21:05 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connect_Strategy.h:
        * tao/Connect_Strategy.cpp: Base class for the new strategies for
          establishing non-blocking connections.

        * tao/LF_Connect_Strategy.h:
        * tao/LF_Connect_Strategy.cpp:
        * tao/Blocked_Connect_Strategy.h:
        * tao/Blocked_Connect_Strategy.cpp:
        * tao/Reactive_Connect_Strategy.h:
        * tao/Reactive_Connect_Strategy.cpp: Concrete connect strategies.

        * tao/Client_Strategy_Factory.cpp:
        * tao/Client_Strategy_Factory.h: Added a new virtual method,
          create_connect_strategy ().

        * tao/default_client.cpp:
        * tao/default_client.h: Concrete implementations for the
          create_connect_strategy ().

        * tao/Connection_Handler.cpp:
        * tao/Connection_Handler.h:
        * tao/Connection_Handler.inl: This class inherits from LF_Event to
          indicate/signal the change in state from "wait for a connection"
          to "completed connection" in the case of non-blocking
          connections. Added two new methods to query the status of the
          connection.

        * tao/IIOP_Connection_Handler.cpp: On completion of the connection
          successfully the status of the LF_Event is changed to
          LFS_SUCCESS and in case the connection initiation fails, we set
          the LFS_FAILURE.

        * tao/IIOP_Connector.cpp:
        * tao/IIOP_Connector.h: Merged from the main trunk and used the
          strategies to establish connections.

        * tao/LF_Event.cpp:
        * tao/LF_Event.h: Added a new event LFS_CONNECTION_WAIT to the
          list of LF_Events.

        * tao/Transport_Connector.cpp:
        * tao/Transport_Connector.h:
        * tao/Transport_Connector.inl: Added new methods to create and
          store the connect strategy.

        * tao/Strategies/DIOP_Connector.cpp:
        * tao/Strategies/DIOP_Connector.h:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.h: Merged from the main trunk

        * tao/*Makefile: Updated dependencies.



Sat Apr 27 12:41:50 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/orbsvcs/IFRService/IFR_Service_Loader.cpp~:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp~:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h~:
          Removed the files from the CVS as these are temporary files
          and should be not be in CVS.

Sat Apr 27 18:59:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/IFRService.bor:
        * orbsvcs/orbsvcs/IFRService.rc:
          Added new files to build new IFRService library

        * orbsvcs/orbsvcs/Makefile.bor:
          Added new IFRService library

        * orbsvcs/IFR_Service/IFR_Service.bor:
          Updated BCB makefile to use new IFRService library

        * orbsvcs/orbsvcs/ETCL.rc:
        * orbsvcs/orbsvcs/ETCL.bor:
          Added resource file

Fri Apr 26 19:15:05 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/orbsvcs/IFRService.dsp:
          Made changes to the .dsp file for WIN32 Release.

Fri Apr 26 19:06:34 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * TAOACE.dsw:
        * orbsvcs/IFR_Service/IFR_Service.dsp:
        * orbsvcs/orbsvcs/IFRService.dsp:
        * orbsvcs/orbsvcs/IFRService.dsw:
          Added new .dsp and .dsw files for the new IFR Service library.

Fri Apr 26 18:07:17 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/orbsvcs/IFRService/AbstractInterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/AbstractInterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/AliasDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/AliasDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ArrayDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ArrayDef_i.h:
        * orbsvcs/orbsvcs/IFRService/AttributeDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/AttributeDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ComponentRepository_i.h:
        * orbsvcs/orbsvcs/IFRService/ConstantDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ConstantDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ConsumesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/Contained_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Contained_i.h:
        * orbsvcs/orbsvcs/IFRService/Container_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Container_i.h:
        * orbsvcs/orbsvcs/IFRService/EmitsDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/EmitsDef_i.h:
        * orbsvcs/orbsvcs/IFRService/EnumDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/EnumDef_i.h:
        * orbsvcs/orbsvcs/IFRService/EventDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/EventDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ExceptionDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ExceptionDef_i.h:
        * orbsvcs/orbsvcs/IFRService/FactoryDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/FactoryDef_i.h:
        * orbsvcs/orbsvcs/IFRService/FinderDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/FinderDef_i.h:
        * orbsvcs/orbsvcs/IFRService/FixedDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/FixedDef_i.h:
        * orbsvcs/orbsvcs/IFRService/HomeDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/HomeDef_i.h:
        * orbsvcs/orbsvcs/IFRService/IDLType_i.cpp:
        * orbsvcs/orbsvcs/IFRService/IDLType_i.h:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS.h:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS.i:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.h:
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS_T.i:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS.h:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS.i:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.h:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS_T.i:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.h:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.i:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.h:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS_T.i:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.h:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.i:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.h:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS_T.i:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Loader.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Loader.h:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h:
        * orbsvcs/orbsvcs/IFRService/IFR_macro.h:
        * orbsvcs/orbsvcs/IFRService/IRObject_i.cpp:
        * orbsvcs/orbsvcs/IFRService/IRObject_i.h:
        * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/LocalInterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/LocalInterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ModuleDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ModuleDef_i.h:
        * orbsvcs/orbsvcs/IFRService/NativeDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/NativeDef_i.h:
        * orbsvcs/orbsvcs/IFRService/OperationDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/OperationDef_i.h:
        * orbsvcs/orbsvcs/IFRService/Options.cpp:
        * orbsvcs/orbsvcs/IFRService/Options.h:
        * orbsvcs/orbsvcs/IFRService/PrimaryKeyDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/PrimaryKeyDef_i.h:
        * orbsvcs/orbsvcs/IFRService/PrimitiveDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/PrimitiveDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ProvidesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ProvidesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/PublishesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/PublishesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/Repository_i.cpp:
        * orbsvcs/orbsvcs/IFRService/Repository_i.h:
        * orbsvcs/orbsvcs/IFRService/SequenceDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/SequenceDef_i.h:
        * orbsvcs/orbsvcs/IFRService/Servant_Factory.cpp:
        * orbsvcs/orbsvcs/IFRService/Servant_Factory.h:
        * orbsvcs/orbsvcs/IFRService/Servant_Locator.cpp:
        * orbsvcs/orbsvcs/IFRService/Servant_Locator.h:
        * orbsvcs/orbsvcs/IFRService/StringDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/StringDef_i.h:
        * orbsvcs/orbsvcs/IFRService/StructDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/StructDef_i.h:
        * orbsvcs/orbsvcs/IFRService/TypedefDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/TypedefDef_i.h:
        * orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/UnionDef_i.h:
        * orbsvcs/orbsvcs/IFRService/UsesDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/UsesDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ValueBoxDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ValueBoxDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ValueDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ValueDef_i.h:
        * orbsvcs/orbsvcs/IFRService/ValueMemberDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/ValueMemberDef_i.h:
        * orbsvcs/orbsvcs/IFRService/WstringDef_i.cpp:
        * orbsvcs/orbsvcs/IFRService/WstringDef_i.h:
        * orbsvcs/orbsvcs/IFRService/concrete_classes.h:
        * orbsvcs/orbsvcs/IFRService/ifr_service_export.h:
        * orbsvcs/orbsvcs/IFRService/tmplinst.cpp:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/IFR_Service/IFR_Service.h:
        * orbsvcs/IFR_Service/IFR_Service.cpp:
        * orbsvcs/orbsvcs/Makefile.IFRService:
          Renamed the directory IFR_Service under orbsvcs/orbsvcs to
          IFRService to fix the windows builds.

Fri Apr 26 16:32:53 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp:

          Inserted byte order to GroupID CDR stream.  This fixes a MIOP
          bug seen on Solaris.

Fri Apr 26 13:32:04 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ClientRequestInfo_i.cpp (TAO_ClientRequestInfo_i):
        * tao/PICurrent.cpp (TAO_PICurrent_Guard):

          Do not make invocations on the TAO_PICurrent object if the
          cached pointer to that object in the ORB Core is zero.  It can
          be zero if the ORB Core hasn't been initialized or if it has
          been shutdown.  Fixes a memory access violation that occurred
          when attempting to perform a remote invocation through an ORB
          that has been shutdown.

Fri Apr 26 12:04:08 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/orbsvcs/IFR_Service/AbstractInterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/AbstractInterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/AliasDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/AliasDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ArrayDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ArrayDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/AttributeDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/AttributeDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ComponentDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ComponentDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ComponentRepository_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ComponentRepository_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ConstantDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ConstantDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ConsumesDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ConsumesDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/Contained_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/Contained_i.h:
        * orbsvcs/orbsvcs/IFR_Service/Container_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/Container_i.h:
        * orbsvcs/orbsvcs/IFR_Service/EmitsDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/EmitsDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/EnumDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/EnumDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/EventDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/EventDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ExceptionDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ExceptionDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/FactoryDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/FactoryDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/FinderDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/FinderDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/FixedDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/FixedDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/HomeDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/HomeDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/IDLType_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IDLType_i.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS_T.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS_T.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BaseS_T.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS_T.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS_T.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_BasicS_T.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS_T.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS_T.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ComponentsS_T.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS_T.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS_T.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_ExtendedS_T.i:
        * orbsvcs/orbsvcs/IFR_Service/IFR_Service_Loader.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_Service_Loader.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_Service_Utils.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IFR_Service_Utils.h:
        * orbsvcs/orbsvcs/IFR_Service/IFR_macro.h:
        * orbsvcs/orbsvcs/IFR_Service/IRObject_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/IRObject_i.h:
        * orbsvcs/orbsvcs/IFR_Service/InterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/InterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/LocalInterfaceDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/LocalInterfaceDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ModuleDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ModuleDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/NativeDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/NativeDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/OperationDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/OperationDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/Options.cpp:
        * orbsvcs/orbsvcs/IFR_Service/Options.h:
        * orbsvcs/orbsvcs/IFR_Service/PrimaryKeyDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/PrimaryKeyDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/PrimitiveDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/PrimitiveDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ProvidesDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ProvidesDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/PublishesDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/PublishesDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/Repository_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/Repository_i.h:
        * orbsvcs/orbsvcs/IFR_Service/SequenceDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/SequenceDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/Servant_Factory.cpp:
        * orbsvcs/orbsvcs/IFR_Service/Servant_Factory.h:
        * orbsvcs/orbsvcs/IFR_Service/Servant_Locator.cpp:
        * orbsvcs/orbsvcs/IFR_Service/Servant_Locator.h:
        * orbsvcs/orbsvcs/IFR_Service/StringDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/StringDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/StructDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/StructDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/TypedefDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/TypedefDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/UnionDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/UnionDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/UsesDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/UsesDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ValueBoxDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ValueBoxDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ValueDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ValueDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/ValueMemberDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/ValueMemberDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/WstringDef_i.cpp:
        * orbsvcs/orbsvcs/IFR_Service/WstringDef_i.h:
        * orbsvcs/orbsvcs/IFR_Service/concrete_classes.h:
        * orbsvcs/orbsvcs/IFR_Service/ifr_service_export.h:
        * orbsvcs/orbsvcs/IFR_Service/tmplinst.cpp:
        * orbsvcs/orbsvcs/Makefile.IFRService:
        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/IFR_Service/ifr_visitor.h:
        * orbsvcs/IFR_Service/ifr_removing_visitor.h:
        * orbsvcs/IFR_Service/ifr_removing_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/Makefile:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/IFR_Service/IFR_Service.h:
        * orbsvcs/IFR_Service/IFR_Service.cpp:
        * orbsvcs/IFR_Service/Makefile.BE:
          Modified the server code, service executable for the IFR Service
          in the directory orbsvcs/IFR_Service.
          Moved the utilities and other files required by the server code
          to a new directory orbsvcs/orbsvcs/IFRService. A new library
          TAO_IFRService will be created by these utilities in this
          directory. This library will be linked at compile time
          to get the server execuatble in the orbsvcs/IFR_Service
          directory.
          Also the IFR Service can now be dynamically loaded.

Fri Apr 26 13:48:22 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * utils/catior/catior.cpp: Updated the utility so that it works
          correctly for UIOP 1.2.  Thanks to Gautam H Thaker
           <gthaker@atl.lmco.com> for reporting this.

Fri Apr 26 17:15:07 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * docs/interfacerepo/index.html:
        * docs/interfacerepo/tao_ifr.html:
          Add documentation for getting reference to Interface Repository via
          Interoperable Naming.

Fri Apr 26 10:07:45 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/RTCORBA/Client_Protocol/server.cpp:
        * tests/RTCORBA/Client_Protocol/test.idl:
        * tests/RTCORBA/Client_Protocol/client.cpp (main): Instead of
          making a remote call make teh client to sleep for 5
          seconds. This would make the server go away completely and stop
          the race seen in [Bug 1197]. This change seems better than the
          previous change made to this test.

Thu Apr 25 21:45:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport_Connector.cpp: Fixed a typo in a debug statement

Thu Apr 25 16:36:41 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.cpp (destroy_interceptors):

          Destroy the interceptors in reverse order in case the array list
          is only partially destroyed and another invocation occurs
          afterwards.

          Since Interceptor::destroy() can throw an exception, decrease
          the size of the interceptor array incrementally since some
          interceptors may not have been destroyed yet.  Note that this
          size reduction is fast since no memory is actually deallocated.
          This also forces the size of the ORB's interceptor array(s) to
          be set to zero, thus preventing any interceptors from being
          invoked after the ORB has shutdown (e.g. orb->run() and then
          naming_context->unbind()).  Consequently, this change fixes
          memory access violations in some applications that implement
          such scenarios.

          (shutdown):

          Set the cached pointer to the TAO_PICurrent object to zero to
          make it obvious that the object no longer exists.

Thu Apr 25 16:42:04 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_exception/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
        * tao/BoundsC.cpp:
        * tao/BoundsC.i:
        * tao/ClientRequestInfo_i.cpp:
        * tao/Environment.cpp:
        * tao/Exception.cpp:
        * tao/Exception.h:
        * tao/IOPC.cpp:
        * tao/ORB.cpp:
        * tao/PolicyC.cpp:
        * tao/PolicyC.i:
        * tao/PollableC.cpp:
        * tao/PortableInterceptorC.cpp:
        * tao/PortableInterceptorC.i:
        * tao/Typecode.cpp:
        * tao/WrongTransactionC.cpp:
        * tao/WrongTransactionC.i:
        * tao/DynamicAny/DynamicAnyC.cpp:
        * tao/DynamicInterface/Unknown_User_Exception.cpp:
        * tao/IORManipulation/IORC.cpp:
        * tao/IORManipulation/IORC.i:
        * tao/IORTable/IORTableC.cpp:
        * tao/IORTable/IORTableC.i:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/PortableServer/PortableServerC.i:
        * tao/RTCORBA/RTCORBAC.cpp:

          Added missing methods _rep_id() and _name() to class
          CORBA::Exception, as well as a new member name_ to hold the
          char* local name. Also changed the constructor signatures
          to pass in the new local name argument, and IDL compiler
          hand-crafted code and other exception code to use the new
          signatures. Thanks to Andy Alvarez <andy_alvarez@baxter.com>
          for pointing out the lack of these spec-required methods.

Thu Apr 25 16:37:28 2002 Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/RTCORBA/Server_Protocol/run_test.pl: For a change the hack
          in this test to get around bug 1197 is to disable SHMIOP at
          runtime. The test uses other protocols and so the functionality
          shouldnt be affected.

Thu Apr 25 16:35:28 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/RTCORBA/Explicit_Binding/client.cpp: Yet another ugly hack
          to get around bug 1197.

Thu Apr 25 14:59:31 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * docs/configurations.html: Added "Single ORB" to clarify that
          usecase.  Thanks to Daniel Garrido <dgarrido@lcc.uma.es> for
           motivating this clarification.

Thu Apr 25 15:13:01 2002  Balachandran Natarajan  <bala@guajira.cs.wustl.edu>

        * performance-tests/Cubit/TAO/MT_Cubit/Makefile: Updated
          dependencies again. Looks like I dont know how to do these
          things now a days!

Thu Apr 25 14:25:28 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Client.cpp:
        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_i.cpp:
        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_i.h:
        * performance-tests/Cubit/TAO/IDL_Cubit/client.cpp:
        * performance-tests/Cubit/TAO/IDL_Cubit/cubit.idl:

        * tests/RTCORBA/Client_Protocol/test.idl:
        * tests/RTCORBA/Client_Protocol/client.cpp:
        * tests/RTCORBA/Client_Protocol/server.cpp:

          Work around to for the nasty [BUG 1197] problem. The client
          makes yet another two way invocation before shutting down the
          ORB and deleting the underlying shared memory segment. This
          seems to work atleast on the platform that I tested, namely
           guajira.cs. Finding this race was not simple enough and it
           doesnt seem to be much fun either!

Thu Apr 25 05:36:48 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/Security/SecurityLevel1/Makefile:
        * orbsvcs/examples/Security/Send_File/Makefile: Updated
          dependencies.

Thu Apr 25 05:25:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/Security/Callback: Updated dependencies.

Wed Apr 24 19:06:50 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * performance-tests/Cubit/TAO/MT_Cubit/Makefile: Updated
          dependencies.

Tue Apr 23 15:44:46 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/tests/AVStreams/Pluggable/server.cpp:
          Exception macro fix.

Mon Apr 22 19:40:30 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/tests/AVStreams/Multicast/server.cpp:
        * orbsvcs/tests/AVStreams/Pluggable/server.cpp:
          Exception macro fixes.

Mon Apr 22 15:20:50 UTC 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:
        * orbsvcs/tests/AVStreams/Multicast/server.cpp:
        * orbsvcs/tests/AVStreams/Pluggable/server.cpp:

          Clean up termination:
          - do not call orb->shutdown() in a CORBA method
          - change orb->run() to work_pending()/perform_work()
          - put the orb->shutdown() after the perform_work()

Mon Apr 22 09:00:12 UTC 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Cache_Entries.h:
          Doxygen-ized some of the comments

Sun Apr 21 10:07:25 EDT 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * TAO_IDL/tao_idl_static.dsp: Add user32.lib and advapi32.lib to
          link line.

Sat Apr 20 21:12:10 EDT 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/Event/ECG_Mcast_EH.cpp: Instantiate
          ACE_Node<ACE_INET_Addr> template.

Sat Apr 20 18:51:41 EDT 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/IFR_Service/IFR_Service.h: Use _DECL_WITH_DEFAULTS
          macros.

Fri Apr 19 18:13:40 2002  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/PICurrent/ClientRequestInterceptor2.h:
        * tests/Portable_Interceptors/PICurrent/ClientRequestInterceptor2.cpp:

          New secondary client request interceptor used when verifying
          that the RSC->TSC->RSC copying scenario described below actually
          works.  All it does is attempt to extract a value from the RSC's
          slot table.

        * tests/Portable_Interceptors/PICurrent/ServerORBInitializer.cpp
          (post_init):

          Create and register a secondary client request interceptor for
          this test.  It is used when verifying that the RSC->TSC->RSC
          copying scenario described below actually works.

          Explicitly disable collocation optimizations since TAO doesn't
           implement interceptor support for THRU_POA collocated
          invocations yet, and we need to force a client request
          interceptor to be invoked in this server.

        * tests/Portable_Interceptors/PICurrent/test_i.cpp (invoke_me):

          Call the newly added invoke_you() method via the servant's own
          object reference (not the C++ "this" pointer!) to force the
          newly added client request interceptor to be invoked.

          (invoke_you):

          New no-op method to be called by the invoke_me() method when
          testing the RSC->TSC->RSC copying scenario described below.

        * tests/Portable_Interceptors/PICurrent/test_i.idl (invoke_you):
        * tests/Portable_Interceptors/PICurrent/test_i.h (invoke_you):

          Declare the newly added method described above.

        * tests/Portable_Interceptors/PICurrent/Makefile:
        * tests/Portable_Interceptors/PICurrent/server.bor:
        * tests/Portable_Interceptors/PICurrent/server.dsp:

          Added the new ClientRequestInterceptor2 sources to these files.

        * tests/Portable_Interceptors/PICurrent/README:

          Updated expected out.

Fri Apr 19 16:43:34 2002  Dmitry Goldshtain <dmitry@goldshtain.com>

        * tao/PICurrent.cpp (copy):

          Mark the destination PICurrent dirty upon shallow copying a
          source PICurrent.  Fixes a problem where a RSC->TSC->RSC
          sequence of shallow copies didn't work.  For example, the
          following sequence of operations didn't work:

          - ServerRequestInterceptor::receive_request_service_contexts()
                - ServerRequestInfo::set_slot()  -- set RSC
                - RSC->TSC shallow copy
          - servant implementation invokes method on another server
                - TSC->RSC shallow copy
                - ClientRequestInterceptor::send_request()
                        - ClientRequestInfo::get_slot()  --- FAILS!

        * tao/PICurrent.inl (slot_table):

          If the logically copied slot table pointer is not zero, then
          return a reference to that table.  This is part of the above
          fix.

Fri Apr 19 13:30:00 2002  Dan Troesser <troesser_d@ociweb.com>

        * docs/Options.html
          Corrected documentation for ORBReactorRegistry.  It is no longer
           supported.

Fri Apr 19 12:13:17 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/performance-tests/RTEvent/lib/Client_Options.cpp:

          Include "ace/OS.h" to pull in "ACE_OS" methods.  Necessitated by
          recent inter-header dependency reductions.

        * tests/Smart_Proxies/Collocation/Smart_Proxy_Impl.h:

          Include "ace/svc_export.h" to pull definition of ACE_Svc_Export
          macro.

Thu Apr 18 15:03:56 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Table.h:
        * tao/ORBInitializer_Registry.h:

          Removed friend declaration for the internally used
          TAO_Singleton, meaning that the singleton will only be
          instantiated within the ".cpp" file.  This completely avoids any
          Windows DLL multiple singleton instance issues since the
          singleton is now truly internal to the TAO library.

          Made the constructor public since the classes in question no
          longer have any friends.  It's tough being alone.  :-)

        * tao/ORBInitializer_Registry.inl:

          Removed this file.  It is no longer used.

        * tao/ORB_Table.inl (instance):
        * tao/ORB_Table.cpp (instance):
        * tao/ORBInitializer_Registry.cpp (instance):

          Un-inlined this method.  This allows the TAO_Singleton used by
          these classes to be completely internalized.

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:

          Removed references to ORBInitializer_Registry.inl.  That file no
          longer exists.

        * tao/Makefile:

          Updated dependencies.

Thu Apr 18 14:07:44 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Table.h:
        * tao/ORBInitializer_Registry.h (TAO_ORBInitializer_Registry):

          Export the internally used singleton via the "friend"
          declaration to get around Windows DLL singleton brain-damage.  I
          took this approach instead of the "TAO_SINGLETON_DECLARE" macro
          approach since the latter exhibits warnings in Release
          configuration builds.  Hopefully this will finally fix the
          multiple singletons that end up being created when using Windows
          DLLs.

Thu Apr 18 13:10:23 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp:

          The pragma that disables an MSVC++ 6 "overly long debugging
          symbol" warning is need in this file, too.

Thu Apr 18 13:01:54 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Naming/Persistent_Naming_Context.cpp:

          Moved the pragma that disabled an MSVC++ 6 warning related to an
          ACE_Auto_Basic_Ptr template instantiation before in the
          "ace/Auto_Ptr.h" include.  The pragma only applies to
          classes/templates declared after it.

Thu Apr 18 13:58:11 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

        * tests/ior_corbaloc/status_i.h (print_status): Replaced a hard-coded
          "throw" statement with an ACE_THROW_SPEC macro.  Thanks to Ma
           Ting Chong <ma_ting_chong@hotmail.com> for reporting this.

Thu Apr 18 12:20:16 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Acceptor.cpp: Added a missing template instantiation to
          keep Sun CC compilers happy.

Thu Apr 18 09:00:31 2002  Ossama Othman  <ossama@uci.edu>

        * tao/TAOC.cpp:
        * tao/diffs/TAOC.cpp.diff:

          Fixed "extra tokens at end of #endif directive" warning.  The
          "extra tokens" should have been comment.  Thanks to Craig for
          pointing out that a gcc 3.1 build exhibited this warning.

Thu Apr 18 10:51:52 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

        * orbsvcs/orbsvcs/Naming/Persistent_Naming_Context.cpp
          (open_helper): Replaced the ACE_NEW_RETURN macro with a direct
          call to operator placement new.  Thanks to Jean Quinsat
          <jean.quinsat@airbus.com> for reporting this.

Thu Apr 18 10:57:41 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.h: Removed the
          declaration of connect (), that is not needed anymore.

Thu Apr 18 08:49:55 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * performance-tests/Cubit/TAO/IDL_Cubit/Makefile:
          Updated Dependencies.

Thu Apr 18 08:09:06 2002  Ossama Othman  <ossama@uci.edu>

        * tests/Timed_Buffered_Oneways/client.cpp
          (setup_buffering_constraints):

          Corrected namespace to which the SYNC_EAGER_BUFFERING and
          SYNC_DELAYED_BUFFERING SyncScopes belong to.  They are
          TAO-specific, meaning that they belong to and are infact in the
          "TAO" namespace.

Thu Apr 18 08:02:06 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp: Fixed a compile
          error with g++.

Wed Apr 17 17:30:02 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp:
        * tao/GIOP_Message_Base.cpp: Fixed warnings with g++ builds.

Wed Apr 17 15:25:08 2002  Ossama Othman  <ossama@uci.edu>

        * tests/Makefile (DIRS):

          Added ORT directory to the list of directories to build.

Wed Apr 17 15:23:10 2002  Ossama Othman  <ossama@uci.edu>

        * tests/ORT/run_test.pl:

          Created this (missing) script.  It will be used mostly by our
          automated regression tests.

        * tests/ORT/ORT_test_IORInterceptor.cpp (establish_components):

          Fixed unused argument warning for the emulated exception case.

          (components_established, adapter_manager_state_changed):
          (adapter_state_changed):

          Added missing emulated exception macro parameter.  Fixes a
          compile-time problem.

        * tests/ORT/ORT_test.idl:
        * tests/ORT/ORT_test.h:
        * tests/ORT/ORT_test.cpp:

          Added a shutdown() method to allow the client to shutdown the
          server.  Useful for automated testing.

        * tests/ORT/ORT_test_i.h (request_server):

          Fixed emulated exception macro in this method's parameter list.

        * tests/ORT/ORT_test_i.cpp (ORT_test_i):

          Fixed unused argument warning.

        * tests/ORT/client.cpp (main):

          Fixed incorrect emulated exception macros.
          "ACE_ENV_ARG_PARAMETER," not "ACE_ENV_ARG_DECL."
          "ACE_ENV_SINGLE_ARG_PARAMETER," not "ACE_ENV_SINGLE_ARG_DECL."

          Addressed comment I left in a code review.  It was never
          addressed for some reason.

          Invoke the server's shutdown() method upon successful
          completion.

        * tests/ORT/server.cpp (main):

          Fixed incorrect emulated exception macros.

          Fixed incorrect string assignment.

          Pass the ORB pseudo-reference to the test servant's
          constructor.  Used by the servant's shutdown() method.

Wed Apr 17 14:46:30 2002  Ossama Othman  <ossama@uci.edu>

        * tests/ORT/Makefile (.PRECIOUS, realclean):

          Corrected name of IDL files.  The proper stubs and skeletons
          actually get cleaned now.

          Removed bogus "sum_server" IDL source from the list of generated
          and cleaned files.

        * tests/ORT/README:

          Clarified some comments.

Wed Apr 17 14:25:47 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Messaging_SyncScope.pidl:

          Changed DLL export include in comment from `TAO_Export.h' to
          `tao/corbafwd.h'.  The latter must regardless be included.  It
          also happens to pull in the TAO_Export macro.  Reduces the size
          of the diff for the stub header.

        * tao/Messaging_SyncScopeC.cpp:
        * tao/Messaging_SyncScopeC.h:
        * tao/Messaging_SyncScopeC.i:
        * tao/diffs/Messaging_SyncScope.diff:

          Regenerated these files.  Removed extraneous includes in the
          process of doing so.

Wed Apr 17 13:23:20 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Makefile (ORB_CORE_FILES):

          Always compile and link Messaging_SyncScopeC into libTAO, not
          just when "corba_messaging == 1".  It defines the
          Messaging::SyncScope constants required for all configurations
          of TAO.

Wed Apr 17 13:09:02 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Messaging/Messaging_ORBInitializer.cpp
          (register_policy_factories):
        * tao/Messaging/Messaging_PolicyFactory.cpp (create_policy):

          Protect some Messaging PolicyTypes with the appropriate
          preprocessor conditional.  Fixes minimum CORBA builds.

Wed Apr 17 11:34:55 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/IFR_Service/ifr_service_export.h:
          Added the new file to define the WIN32 export directives.

Wed Apr 17 11:21:52 2002  Ossama Othman  <ossama@uci.edu>

        * tao/TAOC.cpp:
        * tao/TAOC.h:
        * tao/TAOC.i:
        * tao/diffs/TAOC.cpp.diff:
        * tao/diffs/TAOC.h.diff:
        * tao/diffs/TAOC.i.diff:

          Regenerated these files.

Wed Apr 17 11:15:23 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Messaging/Messaging.h:

          Include "tao/TAOC.h" to pull in the TAO module that contains
          the oneway buffering related IDL.

Wed Apr 17 12:25:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Base.cpp (send_reply_exception):
        * tao/GIOP_Message_Base.h: Instead of creating a new OutputCDR
          buffer, reuse the one that has already been created when the
          request is cobbled up in a CDR. Changed the signature of the
          send_reply_exception () to take an OutputCDR argument instead of
          a pointer to the ORB_Core.

        * tao/Transport_Connector.cpp:
        * tao/Transport_Connector.h: Added a new method to set and
          validate (set_validate_endpoint ()) the endpoints that has been
          passed in. This is required since we dont set the standard
          addresses, like ACE_INET_Addr for IIOP from host and port
          information, in the endpoint encapsulation during IOR decode
          time. We lazily evaluate it during invocation.

        * tao/IIOP_Connector.cpp
        * tao/IIOP_Connector.h:
        * tao/Strategies/DIOP_Connector.cpp
        * tao/Strategies/DIOP_Connector.h
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.h:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.h: Implementation for
          the above method in all the protocols that we have.

Wed Apr 17 09:12:48 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PortableInterceptor.pidl:

          Include IOP.pidl to pull in types defined in the standard OMG
          IOP module.

Tue Apr 16 16:34:38 2002  Ossama Othman  <ossama@uci.edu>

        * tao/GIOP_Message_Generator_Parser_12.cpp (write_request_header):
        * tao/GIOP_Message_Lite.cpp (write_request_header):

          Use the SyncScope constants in the Messaging IDL module.  The
          redefinitions in the TAO IDL module no longer exist.

        * tao/Invocation.h:

          Include Messaging_SyncScopeC.h instead of TAOC.h.  The latter is
          no longer used to define a SyncScope typedef.  Instead, the
          standard Messaging::SyncScope typedef will be used.

          Changed all instances of TAO::SyncScope to
          Messaging::SyncScope.

        * tao/Invocation.i (sync_scope):

          Changed return type from TAO::SyncScope to
          Messaging::SyncScope.

        * tao/Invocation.cpp (TAO_GIOP_Oneway_Invocation):

          Pass the sync_scope_ member directly to the
          call_sync_scope_hook() call.  No need for a temporary.

          (invoke):

          Standard Messaging::SyncScope constants are now referenced via
          the Messaging module/namespace instead of the TAO namespace.

        * tao/ORB_Core.h:

          Changed all instances of "CORBA::Policy *" to
          "CORBA::Policy_ptr."  The latter is more technically correct.

          (call_sync_scope_hook, get_sync_strategy):

          Changed sync_scope parameter to be of type
          "Messaging::SyncScope" instead of "int".

          (stubless_sync_scope):

          Altered method so that it returns a policy instead of returning
          one by reference via the parameter list

        * tao/ORB_Core.cpp:

          Changed all instances of "CORBA::Policy *" to
          "CORBA::Policy_ptr."  The latter is more technically correct.

          (call_sync_scope_hook, get_sync_strategy):

          Changed sync_scope parameter to be of type
          "Messaging::SyncScope" instead of "int".

          (get_sync_strategy):

          Use the SyncScope constants in the Messaging IDL module.  The
          redefinitions in the TAO IDL module no longer exist.

          (stubless_sync_scope):

          Altered method so that it returns a policy instead of returning
          one by reference via the parameter list.  Note that this is
          equivalent to changing the parameter to a "CORBA::Policy_out"
          instead of "CORBA::Policy *&".  The former was chosen for
          consistency with other similarly named methods.  Addresses some
          memory management issues.

          (stubless_relative_roundtrip_timeout, get_cached_policy):

          Improved exception safety.

        * tao/Stub.h (relative_roundtrip_timeout, sync_scope):

          Protect these method prototypes within a
          "TAO_HAS_RELATIVE_ROUNDTRIP_TIMEOUT_POLICY" and
          "TAO_HAS_SYNC_SCOPE_POLICY" block, respectively, since the
          corresponding method definitions in `TAO_Stub.cpp' are protected
          by such blocks.

        * tao/Stub.cpp:

          Changed all instances of "CORBA::Policy *" to
          "CORBA::Policy_ptr."  The latter is more technically correct.

          (relative_roundtrip_timeout, sync_scope, buffering_constraint):

          Corrected technically incorrect initialization of a
          CORBA::Policy_var to zero.

          Corrected return types.  "CORBA::Policy_ptr" not
          "CORBA::Policy *".

          Improved exception safety.

          (sync_strategy):

          Pass a variable of type "Messaging::SyncScope" instead of "int"
          to the TAO_ORB_Core::call_sync_scope_hook().  The former is the
          correct type.

          (sync_scope):

          TAO_ORB_Core::stubless_sync_scope() now returns a
          CORBA::Policy_ptr.  Adjusted this method accordingly.

        * tao/orbconf.h:

          Removed all Messaging policy type redefinitions.  Just use the
          ones defined in the Messaging module.

        * tao/Messaging_SyncScope.pidl:

          Removed TAO-specific SyncScope constants.  They are defined in
          the TAO-specific "TAO" IDL module.

          No need to include "IOP.pidl."  Removed.

        * tao/TAO.pidl:

          Removed TAO redefinitions of the standard SyncScope constants.
          Only the TAO-specific ones remain.

          Removed TAO::SyncScope typedef.  Just use the
          Messaging::SyncScope typedef to avoid defining new typedefs and
          being forced to include headers that aren't needed.

          Include "tao/Messaging_SyncScope.pidl" to pull in the
          Messaging::SyncScope typedef.

        * tao/Transport.cpp (handle_input_i):

          Clarified a debugging statement.

        * tao/Messaging/Messaging_ORBInitializer.cpp (pre_init):
        * tao/Messaging/Messaging_PolicyFactory.cpp (create_policy):

          Use the PolicyTypes defined in the Messaging module instead of
          the (now removed) macro constants defined in `tao/orbconf.h'.

        * tao/Messaging/Messaging_Policy_i.h (hook):
        * tao/Messaging/Messaging_Policy_i.cpp (hook):

          Accept a parameter of type "Messaging::SyncScope" instead of
          "int" to the TAO_ORB_Core::call_sync_scope_hook().  The former
          is the correct type.

          Corrected technically incorrect initialization of a
          CORBA::Policy_var to zero.

          Added missing ACE_ENV_SINGLE_ARG_PARAMETER to
          Messaging::SyncScopePolicy::synchronization() call.  Removes an
          unnecessary TSS access from the critical path of oneway
          invocatons in emulated exception builds.

          No need to create a temporary CORBA::Policy_ptr to store a
          policy reference passed back from a method call as a parameter.
          Just pass the original policy being assigned as via the
          Policy_var's out() accessor.

Tue Apr 16 14:02:14 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/IFR_Service/AbstractInterfaceDef_i.h:
        * orbsvcs/IFR_Service/AliasDef_i.h:
        * orbsvcs/IFR_Service/ArrayDef_i.h:
        * orbsvcs/IFR_Service/AttributeDef_i.h:
        * orbsvcs/IFR_Service/ComponentDef_i.h:
        * orbsvcs/IFR_Service/ComponentRepository_i.h:
        * orbsvcs/IFR_Service/ConstantDef_i.h:
        * orbsvcs/IFR_Service/ConsumesDef_i.h:
        * orbsvcs/IFR_Service/Contained_i.h:
        * orbsvcs/IFR_Service/Container_i.h:
        * orbsvcs/IFR_Service/EmitsDef_i.h:
        * orbsvcs/IFR_Service/EnumDef_i.h:
        * orbsvcs/IFR_Service/EventDef_i.h:
        * orbsvcs/IFR_Service/ExceptionDef_i.h:
        * orbsvcs/IFR_Service/FactoryDef_i.h:
        * orbsvcs/IFR_Service/FinderDef_i.h:
        * orbsvcs/IFR_Service/FixedDef_i.h:
        * orbsvcs/IFR_Service/HomeDef_i.h:
        * orbsvcs/IFR_Service/IDLType_i.h:
        * orbsvcs/IFR_Service/IFR_Service.cpp:
        * orbsvcs/IFR_Service/IFR_Service.h:
        * orbsvcs/IFR_Service/IFR_Service_Loader.cpp:
        * orbsvcs/IFR_Service/IFR_Service_Loader.h:
        * orbsvcs/IFR_Service/IRObject_i.h:
        * orbsvcs/IFR_Service/InterfaceDef_i.h:
        * orbsvcs/IFR_Service/LocalInterfaceDef_i.h:
        * orbsvcs/IFR_Service/Makefile:
        * orbsvcs/IFR_Service/Makefile.BE:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/IFR_Service/Makefile.IFR_Service_LIB:
        * orbsvcs/IFR_Service/ModuleDef_i.h:
        * orbsvcs/IFR_Service/NativeDef_i.h:
        * orbsvcs/IFR_Service/OperationDef_i.h:
        * orbsvcs/IFR_Service/Options.h:
        * orbsvcs/IFR_Service/PrimaryKeyDef_i.h:
        * orbsvcs/IFR_Service/PrimitiveDef_i.h:
        * orbsvcs/IFR_Service/ProvidesDef_i.h:
        * orbsvcs/IFR_Service/PublishesDef_i.h:
        * orbsvcs/IFR_Service/Repository_i.h:
        * orbsvcs/IFR_Service/SequenceDef_i.h:
        * orbsvcs/IFR_Service/Servant_Factory.h:
        * orbsvcs/IFR_Service/Servant_Locator.h:
        * orbsvcs/IFR_Service/StringDef_i.h:
        * orbsvcs/IFR_Service/StructDef_i.h:
        * orbsvcs/IFR_Service/TypedefDef_i.h:
        * orbsvcs/IFR_Service/UnionDef_i.h:
        * orbsvcs/IFR_Service/UsesDef_i.h:
        * orbsvcs/IFR_Service/ValueBoxDef_i.h:
        * orbsvcs/IFR_Service/ValueDef_i.h:
        * orbsvcs/IFR_Service/ValueMemberDef_i.h:
        * orbsvcs/IFR_Service/WstringDef_i.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.h:
        * orbsvcs/IFR_Service/ifr_removing_visitor.h:
        * orbsvcs/IFR_Service/ifr_visitor.h:
          Made changes to dynamically load the IFR Service. Added a new
          file Makefile.IFR_Service_LIB to create a new library
          libTAO_IFRService which is needed for the dynamic loading
          of the service. Added a new file ifr_service_export.h to define
          the WIN32 export directives and modified the class headers
          to include the WIN32 directive in the class definitions.

Tue Apr 16 14:20:52 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport_Connector.h: Made the connect () call
          virtual. Theoretically this shouldnt be needed. The connect ()
          should check whether there is any connection in cache and if not
          it should invoke a make_connection () on the concrete
          connectors. This works for all protocols but SSLIOP. SSLIOP
          tends to validate some policies in every invocation after which
          it sets up a different code flow path. Making it virtual helps
          to maintain the code flow path.

Tue Apr 16 11:57:28 2002  Ossama Othman  <ossama@uci.edu>

        * tao/NVList.cpp:
        * tao/Stub.cpp:
        * tao/default_resource.cpp:
        * tao/PortableServer/Active_Object_Map.cpp:
        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/POA.cpp:

          Only instantiate ACE_Auto_Basic_Ptr templates if
          ACE_LACKS_AUTO_PTR is defined or if ACE_HAS_STANDARD_CPP_LIBRARY
          is not defined.  In the above cases, they are only used as
          base classes for ACE's implementation of the standard auto_ptr
          template.  When using the auto_ptr implementation provided by
          the standard C++ library in use, the ACE_Auto_Basic_Ptr template
          instances aren't needed.  Reduces footprint in cases where the
          standard C++ library implementation is used, and explicit
          template instantation is required.

Tue Apr 16 11:12:55 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/tests/Miop/McastHello/Makefile:
          Updated dependencies.

Tue Apr 16 07:26:18 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.cpp (create_object):
          Added the ":" to the "-r" option.  Thanks to Bharathi
           Kangatharan <bharathi.kangatharan@baesystems.com> for reporting
           this.

Tue Apr 16 09:31:19 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/tests/Security/Big_Request/Makefile:
          Updated dependencies.

Tue Apr 16 00:48:52 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * tao/Makefile.bor:
          Added missing files Transport_Acceptor and Transport_Connector.

        * tao/ORB_Table.h:
        * tao/ORBInitializer_Registry.h:
          Added #pragmas to force the export of the singleton templates
          from a Win32 DLL. This is needed in addition to the
          TAO_SINGLETON_DECLARE macro to work with Borland C++.

Mon Apr 15 23:13:23 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport_Connector.h:
        * tao/Transport_Connector.cpp: Changed the name of the method
          make_connect () as make_connection (), since the latter
          indicated what it was doing.

        * tao/IIOP_Connector.cpp (make_connection):
        * tao/IIOP_Connector.h:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.h:
        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/DIOP_Connector.h:
        * tao/Strategies/DIOP_Connector.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.h:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp: Changed the
          method name mentioned above in all the implementations.

Mon Apr 15 22:19:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Incoming_Message_Queue.h:
        * tao/Incoming_Message_Queue.cpp:
        * tao/Incoming_Message_Queue.inl: Added a check in
          TAO_Queued_Data::duplicate ()  to see if the incoming data block
          was off the stack or heap. If the data_block is off the stack,
          we carefully clone the datablock and then created a new
          TAO_Queued_Data pointer. This problem showed up along one of the
          code paths handling fragmented messages. Once we have the new
          design implemented these problem shouldnt show up.

          Thanks to Andy Guy <andrew.guy@monis.com> for reporting this
          problem.

Mon Apr 15 16:58:40 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp (init_new_naming):

          Cast the port extracted from the "NameServicePort" environment
          variable via atoi() to a "u_short" before assigning it another
	  to "u_short."  Silences a warning about loss of data when
          converting from an "int" to a "u_short."

Mon Apr 15 12:06:47 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp
          (handle_close_i):

          Fixed unused parameter warning.

Mon Apr 15 20:52:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Makefile.bor:
          Removed Pluggable

Mon Apr 15 11:30:50 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Table.h:
        * tao/ORBInitializer_Registry.h:

          Declare the singletons in these headers with the
          TAO_SINGLETON_DECLARE macro to force a single instance to be
          instantiated and exported in/from a Win32 TAO DLL.  This should
          correct a problem where multiple instances of TAO's ORB table
          and ORBInitializer registry would end up being created despite
          the fact they are supposed to be singletons.  Kudos to Nanbor
          for his help on these fixes.

        * tao/IIOP_Connector.cpp:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.cpp:

          Removed unused auto_ptr related explicit template
          instantiations.  They were only used by the preconnect code (see
          below).

Mon Apr 15 08:05:14 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Security/Security_Current_Impl.h: Included
          security_export.h for the file to compile fine.

        * orbsvcs/orbsvcs/Makefile.SSLIOP:
        * orbsvcs/orbsvcs/Makefile.Security: Fixed the dependency yet
          again :(.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (ssliop_connect):
          Added the handler in reactor after the transport has been
          cached.

        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.h: Added the handler
          in reactor after the transport has been cached in
          connect. Removed portions of the code that looked up connection
          from cache since this code has been moved to the common base
          class.

Mon Apr 15 07:37:02 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.h: Removed support
          for preconnects.  Fixed compile errors with g++.

        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.h:
          Forward declared TAO_Profile to avoid compile errors.

Mon Apr 15 07:12:12 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * performance-tests/Cubit/TAI/IDL_Cubit/Makefile:
        * performance-tests/Cubit/TAI/MT_Cubit/Makefile: Fixed the
          dependencies that have been generated.

Sun Apr 14 23:05:23 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.h: Fixed wrong
          includes. They were including Pluggable.h which doesnt exist
          anymore.

        * orbsvcs/orbsvcs/Makefile.PortableGroup: Generated dependency
          again.

Sun Apr 14 20:17:10 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Invocation.cpp: Fixed a compile error. Improper merge :(

Sun Apr 14 20:08:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Pluggable.{h,cpp,i}: Removed from the repo.

Sun Apr 14 19:51:52 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO_Static.dsp: Added new files like Transport_Acceptor.*
          and Transport_Connector.* and removed old ones, namely
          Pluggable.*

Sun Apr 14 19:43:56 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO.dsp: Added new files like Transport_Acceptor.*
          and Transport_Connector.* and removed old ones, namely
          Pluggable.*.

Sun Apr 14 19:05:52 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * */Makefile: Updated dependencies.

Sun Apr 14 19:02:16 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        Merged in from my branch.

        Fri Apr 12 15:39:50 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connector_Impl.cpp: Do not add the handler to the reactor.

        * tao/IIOP_Connector.cpp:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.cpp: Add the handler to the
          reactor after the transport has been cached.

          The above changes helps to works around a race condition. The
          race occurs in the following scenario:

          - the handler is added to the reactor as soon as the connection
             is established
          - the server crashes and a thread waiting on the reactor closes
            down the connection. As the connection handler and transports
            have not been ref counted (yet) they could be completely
            destroyed.
          - the thread that initiated the connection would try to
            duplicate a null transport and try adding that to cache and
            all hell would break loose.

          The methodology adopted is to delay adding the handler to the
          reactor till the handler is added to cache. This would make sure
          that the transport is refcounted and hence the thread making the
          connection will have a valid pointer to take action and do the
          cleanup when it finds that the connection is closed.

        Fri Apr 12 14:14:01 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connector_Registry.cpp:
        * tao/Connector_Registry.h:
        * tao/Connector_Registry.i: Added a new method, get_connector ()
          which returns a TAO_Connector based on a TAO_Endpoint. Need to
          deprecate connect (). The connector registry should not be
          involved in doing active connects.

        * tao/Invocation.cpp: Used the connector_registry's get_connector
          () to retrieve a connector before calling a connect on it.

        * tao/Transport_Connector.cpp:
        * tao/Transport_Connector.h: Consolidated some of the code from
          different protocols. All the transports before setting up a
          connection look for a connection in cache. That part of the code
          which looks for a connection in the cache has been moved in
          here. If a connection is not found in cache, the control is
          transferred to the underlying transports to set up a
          connection.

        * tao/IIOP_Connector.cpp:
        * tao/IIOP_Connector.h:
        * tao/Strategies/DIOP_Connector.cpp:
        * tao/Strategies/DIOP_Connector.h:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.h : Renamed connect () to be
          make_connect (). This method now exclusively sets up an active
          connection from the client and adds the connection in cache.


        Thu Apr 11 17:26:21 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/UIOP_Connector.h:
        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/DIOP_Connector.h:
        * tao/Strategies/DIOP_Connector.cpp: Cleaned up left over
          preconnect code.

        Thu Apr 11 14:36:37 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        This checkin does the following

          - Splits the file Pluggable.{h,cpp,i} into two files namely
            Transport_Acceptor.{h,cpp,inl} and
            Transport_Connector.{h,cpp,inl}.

          - Removes support for preconnects () totally. The code for
            preconnects is just #if 0'ed now. We can remove the code
            totally once these changes stabilizes.

        * tao/Pluggable.h:
        * tao/Pluggable.cpp:
        * tao/Pluggable.i: Files to be removed from the repository.

        * tao/Transport_Acceptor.h:
        * tao/Transport_Acceptor.cpp:
        * tao/Transport_Acceptor.inl:
        * tao/Transport_Connector.h:
        * tao/Transport_Connector.cpp:
        * tao/Transport_Connector.inl: New files to the repository.

        * tao/Acceptor_Registry.cpp:
        * tao/IIOP_Acceptor.h:
        * tao/Tagged_Profile.cpp:

        * tao/PortableServer/Default_Acceptor_Filter.cpp:
        * tao/RTCORBA/RT_Protocols_Hooks.cpp:
        * tao/RTPortableServer/RT_Acceptor_Filters.cpp:
        * tao/RTPortableServer/RT_Policy_Validator.cpp:
        * tao/Strategies/DIOP_Acceptor.h:
        * tao/Strategies/DIOP_Connector.h:
        * tao/Strategies/SHMIOP_Acceptor.h:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/UIOP_Acceptor.h:
        * tao/Strategies/UIOP_Connector.h: Changed the #include's of
          Pluggable.h to Transport_Acceptor.h or Transport_Connector.h, as
          the case may be

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_State.cpp:
        * tao/Pluggable_Messaging.cpp: Removed #include's of Pluggable.h
          since they are not needed.

        * tao/DynamicInterface/DII_Reply_Dispatcher.cpp: Removed a few
          unnecessary #includes.

        * tao/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/Messaging/Makefile:
        * tao/PortableServer/Makefile:
        * tao/RTCORBA/Makefile:
        * tao/RTPortableServer/Makefile:
        * tao/Strategies/Makefile: Updated dependencies.

        * tao/IIOP_Connector.h:
        * tao/IIOP_Connector.cpp: Removed the method preconnects () and
          template instantiations needed for them.

        * tao/Connector_Registry.cpp:
        * tao/Connector_Registry.h:
        * tao/params.cpp:
        * tao/params.h:
        * tao/params.i:
        * tao/ORB_Core.cpp:Removed references necessary for preconnects.


Sun Apr 14 10:35:49 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp: Yet
          another protocol needing the same fix.

Sun Apr 14 10:31:24 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Strategies/DIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp: Applied
          the fix in "Tue Feb 19 07:45:05 2002  Balachandran Natarajan
          <bala@cs.wustl.edu>" for other protocols.

Thu Apr 11 22:07:40 UTC 2002  Don Hinton  <dhinton@ieee.org>

        * tao/TAO_IDL/driver/drv_preproc.cpp:
        * tao/examples/IFR_Service/drv_preproc.cpp:
          Changed ACE_Log_Record::MAXLOGMSGLEN to ACE_MAXLOGMSGLEN.

Thu Apr 11 11:18:56 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/MT_BiDir/server.dsp (RSC): Fixed it yet again.

Wed Apr 10 19:28:40 2002  Ossama Othman  <ossama@uci.edu>

        * examples/Simple/time-date/Time_Date.h:
        * tests/Smart_Proxies/On_Demand/Smart_Test_Factory.h:

          Include "ace/svc_export.h" to pull in ACE_Svc_Export macro.

Wed Apr 10 17:34:32 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Naming/Persistent_Naming_Context.cpp:

          The recent "ace/OS.h" inclusion reductions prevented a pragma
          that disables a MSVC 6 warning about an overly long debugging
          symbol from occurring.  Explicitly disable that warning in this
          file to silence the warning.

Wed Apr 10 17:15:08 2002  Ossama Othman  <ossama@uci.edu>

        Run-time memory requirement reductions:

        * tao/orbconf.h (TAO_DEFAULT_POLICY_FACTORY_REGISTRY_SIZE):
          (TAO_DEFAULT_OBJECT_REF_TABLE_SIZE):

          New constants that specify the default size of TAO's
          PolicyFactory registry and initial object reference table
          (i.e. the one used by the
          CORBA::ORB::register_initial_reference()) method, respectively.
          Both of these are less than ACE_DEFAULT_MAP_SIZE (1024) by
          default.

        * tao/PolicyFactory_Registry.cpp (TAO_PolicyFactory_Registry):

          Initialize the underlying ACE_Map_Manager to have a size of
          TAO_DEFAULT_POLICY_FACTORY_REGISTRY_SIZE (<< 1024) instead of
          ACE_DEFAULT_MAP_SIZE (1024).

        * tao/Object_Ref_Table.cpp (TAO_Object_Ref_Table):

          Initialize the underlying ACE_Hash_Map_Manager_Ex table to have
          a size of TAO_DEFAULT_OBJECT_REF_TABLE_SIZE (< 1024) instead of
          ACE_DEFAULT_MAP_SIZE (1024).

Wed Apr 10 14:26:05 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ValueBase.h:

          Moved inclusion of "ace/OS.h" and "tao/corbafwd.h" within the
          TAO_HAS_VALUETYPE block.  No need include those headers if CORBA
          ValueType support is not enabled.

Wed Apr 10 15:07:03 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/MT_BiDir/client.dsp (BuildCmds):
        * tests/MT_BiDir/server.dsp: Fixed the path for release builds.

Tue Apr  9 12:50:32 2002  Chris Cleeland  <cleeland_c@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:

          Corrected expression controlling whether or not the cipher suite
           list is modified.  Change allows applications to set
           QOPNoProtection and EstablishTrust.trust_in_target = 1.  Thanks
           to Rob Martin <martin_r@ociweb.com> for finding and contributing
           this back.

Tue Apr  9 12:44:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/MT_BiDir/Makefile: Made a cosmetic change.

Tue Apr 09 07:36:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/POA/POA_BiDir/Makefile.bor:
          Corrected makefile

Sun Apr 07 16:18:41 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/MT_BiDir/server.dsp:
        * tests/MT_BiDir/client.dsp: Fixed the release build
          configuration. This should fix errors in the release builds of
          Win32.

        * examples/POA/POA_BiDir/POA_BiDir.dsp: Fixed the release build
          configuration.

Sun Apr  7 07:32:40 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * TAO-inheritance.pdf:
        * TAO-inheritance.ps.gz: Removed these files from the
          distribution. They are outdated. The doxygen documentation
          should be more useful since it has the latest documentation.

Sun Apr 07 10:31:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/MT_BiDir/server.bor:
        * tests/MT_BiDir/client.bor:
          Corrected makefiles

        * examples/POA/Makefile.bor:
          Added new POA_BiDir directory

        * examples/POA/POA_BiDir/Makefile.bor:
          Corrected makefile

        * examples/POA/POA_BiDir/POA_BiDir.cpp (main): Fixed a compiler
          error in Win32.

Sat Apr 06 22:24:03 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Policy_Validator.cpp: #included debug.h. This should fix
          compile errors in the minimum builds.

Sat Apr 06 15:50:19 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/POA/POA_BiDir/POA_BiDir.cpp (main): Fixed a compiler
          error in Win32.

        * examples/POA/POA_BiDir/POA_BiDir.dsp: Fixed the workspace files
          to compile and link properly on Win32.

Sat Apr  6 15:27:35 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/POA/Makefile: Added the new test to the list of tests.
        * examples/POA/POA_BiDir/run_test.pl: Fixed the script to work
          right.

Sat Apr  6 12:27:36 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/POA/POA_BiDir/Makefile:
        * examples/POA/POA_BiDir/Makefile.bor:
        * examples/POA/POA_BiDir/POA_BiDir.cpp:
        * examples/POA/POA_BiDir/POA_BiDir.dsp:
        * examples/POA/POA_BiDir/POA_BiDir.dsw:
        * examples/POA/POA_BiDir/README:
        * examples/POA/POA_BiDir/run_test.pl*: A new test that tests
          multiple POA's with one of the POA's assigned BiDirGIOP
          policy.

Sat Apr  6 12:10:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Policy_Validator.cpp: Added a check to make sure that we
          dont get the same validator to be chained.

        * tao/BiDir_GIOP/BiDirGIOP.cpp:
        * tao/BiDir_GIOP/BiDirGIOP.h: Added a flag to indicate whether the
          validator has been loaded. We dont need to load the validator
          twice.

          All this changes had to be done to put up with the *broken*
          BiDirGIOP specification. We maintain the BiDirGIOP policies at
          the ORB level. An application having more than one POA could
          load the validator more than once into the ORB and this could
          create problems if the same validator is chained twice. This
          would lead to an infinite loop when policies are parsed till
          stack overflows and the program crashes. Thanks to Werner
          Buchert <w.buchert@medat.de> for reporting this problem.

Sat Apr  6 17:22:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/MT_BiDir/client.bor:
        * tests/MT_BiDir/server.bor:
          Corrected makefiles

Sat Apr  6 07:40:13 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/ImplRepoS.h: Changed the export flag from
          TAO_Export to TAO_PortableServer_Export.

Sat Apr  6 09:24:40 UTC 2002  Don Hinton <dhinton@ieee.org>

        * tao/Strategies/advanced_resource.cpp (init): Removed
          an unreachable line. Thanks to Priyanka for pointing
          this out.

Fri Apr  5 23:04:01 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/PolicyS.cpp:
        * tao/PolicyS.i:
        * tao/PolicyS_T.h:
        * tao/PolicyS_T.cpp:
        * tao/PolicyS_T.i: A wrong checkin. By mistake these files got
          checked into the $TAO_ROOT/tao.

Fri Apr  5 19:49:57 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp: Fix for part of
          [Bug 1159]. Changed the way we perform a check for malformed GIOP
          message containing a sequence. The procedure we followed was to
          extract the length of the sequence, resize the length of
          sequence (this involved allocation) into which we need to
          extract and then perform a sanity check. This sanity check was
          too late. Malformed GIOP messages had very big size of sequences
          and allocations took time and sometimes crashed the
          application.

          We extract the length of the sequence and then check to see if
          the length of the sequence is greater than the size of the
          incoming stream. If it is greater we return an error. Thanks to
          Duane Binder <duane.binder@veritas.com> for reporting the
          problem.

        * tao/DomainC.cpp:
        * tao/DomainC.h:
        * tao/DomainC.i:
        * tao/DynamicC.cpp:
        * tao/DynamicC.h:
        * tao/DynamicC.i:
        * tao/IOPC.cpp:
        * tao/IOPC.h:
        * tao/IOPC.i:
        * tao/Messaging_PolicyValueC.cpp:
        * tao/Messaging_PolicyValueC.h:
        * tao/Messaging_PolicyValueC.i:
        * tao/ObjectReferenceTemplateC.cpp:
        * tao/ObjectReferenceTemplateC.h:
        * tao/ObjectReferenceTemplateC.i:
        * tao/PolicyC.cpp:
        * tao/PolicyC.h:
        * tao/PolicyC.i:
        * tao/Policy_ForwardC.cpp:
        * tao/Policy_ForwardC.h:
        * tao/Policy_ForwardC.i:
        * tao/Domain/DomainS.cpp:
        * tao/Domain/DomainS.h:
        * tao/Domain/DomainS.i:
        * tao/Domain/DomainS_T.cpp:
        * tao/Domain/DomainS_T.h:
        * tao/Domain/DomainS_T.i:
        * tao/DynamicAny/DynamicAnyC.cpp:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/ImplRepoS.cpp:
        * tao/PortableServer/ImplRepoS.h:
        * tao/PortableServer/ImplRepoS_T.cpp:
        * tao/PortableServer/ImplRepoS_T.h:
        * tao/PortableServer/ImplRepoS_T.i:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/RTCORBA/RTCORBAC.cpp:
        * tao/diffs/IOP.diff:
        * tao/diffs/Policy_Forward.diff: Regenerated all the code that
          needed to be changed with above change to the IDL compiler.

Fri Apr  5 12:10:38 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
        * TAO_IDL/be_include/be_visitor_exception.h:
        * TAO_IDL/be_include/be_visitor_structure.h:
        * TAO_IDL/be_include/be_visitor_union.h:
        * TAO_IDL/be_include/be_visitor_exception/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_exception/any_op_cs.h:
        * TAO_IDL/be_include/be_visitor_structure/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_structure/any_op_cs.h:
        * TAO_IDL/be_include/be_visitor_union/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_union/any_op_cs.h:

          Added methods to generate Any operators for exception,
          struct and union members defined rather than
          referenced. Thanks to Christian Veleba
          <christian.veleba@porsche.co.at> for reporting the
          problem.

Fri Apr  5 15:57:54 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Condition.inl: Fixed a compile error with SunCC.

Fri Apr  5 09:22:57 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/BiDir_GIOP/BiDirPolicy_Validator.cpp: Added a check for
          validating the BiDirGIOP policy before proceeding. This caused
          application to crash when they just linked in the BiDirGIOP
          library without setting any policies at the application
          level. Thanks to Werner Buchert <w.buchert@medat.de> for
          reporting the problem.

Fri Apr 05 08:24:27 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport_Cache_Manager.cpp: Added a missing template
          instantiation. Too bad. Looks like it has been too long since I
          have checked in stuff for TAO!

Fri Apr 05 08:16:27 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/MT_BiDir/client.dsp (RSC):
        * tests/MT_BiDir/server.dsp: Fixed minor problems with include
          path.  This should hopefully fix compile errors on Win32.

Fri Apr  5 09:32:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/tests/Makefile.bor:
          Added new directory MT_BiDir

Thu Apr  4 13:53:58 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * tao/PortableServer/AMH_Response_Handler.h:
        * tao/PortableServer/AMH_Response_Handler.cpp:
          Removed the inefficient huge locks in each method, split them to
          only protect shared variables.

Thu Apr  4 14:21:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * TAOACE.dsw (Package): Added TAO DLL as a dependency to the
          BiDirGIOP dll.

Thu Apr  4 14:20:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/MT_BiDir/MT_BiDir.dsw:
        * tests/MT_BiDir/client.dsp:
        * tests/MT_BiDir/server.dsp: Files for Win32 compilation.

Thu Apr  4 13:25:06 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/Options.html: Added documentation for the new -ORB option.

Thu Apr  4 13:15:47 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Makefile: Added the new test to the list tests that are
          compiled.

Thu Apr  4 12:49:58 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/MT_BiDir/client.cpp:
        * tests/MT_BiDir/Client_Task.cpp:
        * tests/MT_BiDir/Client_Task.h:
        * tests/MT_BiDir/Receiver_i.cpp:
        * tests/MT_BiDir/Receiver.idl:
        * tests/MT_BiDir/Receiver_i.h:
        * tests/MT_BiDir/Sender_i.cpp:
        * tests/MT_BiDir/Sender.idl:
        * tests/MT_BiDir/Sender_i.h:
        * tests/MT_BiDir/server.conf:
        * tests/MT_BiDir/server.cpp:
        * tests/MT_BiDir/Server_Task.cpp:
        * tests/MT_BiDir/Server_Task.h:
        * tests/MT_BiDir/run_test.pl:
        * tests/MT_BiDir/Makefile:
        * tests/MT_BiDir/Makefile.bor:
        * tests/MT_BiDir/server.bor:
        * tests/MT_BiDir/client.bor:
        * tests/MT_BiDir/README: A new test that exercises multiple
          threads for a BiDir GIOP connections. The problem such a
          scenario faced before was the extra connections that were being
          created from the server end when trying to callback the client.

          With the new policy that has been added to TAO, it is easier to
          control the number of connections opened by the server
          end. Making that 1, would prevent the multi-threaded server from
          opening up more connections to the client and the server threads
          will wait for the available connection to be released.

          This test exercises this feature and is a rigourous test for MT
          bidirectional connection.

Wed Apr 03 23:38:50 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Condition.h: Added a comment
        * tao/Condition.cpp: Added #ifdef's around the whole file.
        * tao/Condition.inl: Fixed a compile error on Win32.

Wed Apr  3 22:18:38 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        Changes to wide variety of stuff from my branch. The checkin
        contains the following:

        1. Couple of bug fixes [Bug 1129 and 1164]. They have been
           verified and they seem to work fine.
        2. A new policy to regulate the number of connections allowed by
           the ORB for every QoS property.

        The details of the checkin follows

        Sun Mar 24 08:57:37 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport.cpp: Fix for bug 1164.  When big messages are
          being read, read it in a loop till you get all the bytes or till
          you get an error. We used to do only one read before and looks
          like this had performance impacts. Thanks to James Kanyok
          <james.kanyok@lmco.com> for reporting the problem. This will go
          into the main trunk once we get a feedback from James.

          Tue Feb 19 07:45:05 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connection_Handler.cpp: Added a fix for Jody ie. bug
          #1129.  Yet, to get a reply whether the fix is right or
          wrong. Now, we close the socket with the first call to
          handle_close () and delete it when the upcall count gets to
          zero.

          Mon Feb 11 14:03:18 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport.h: Removed the virtual declaration from the method
          bidirectional_flag (). It shouldnt have been virtual to start
          with.

        * tao/Muxed_TMS.h: Removed some old comments

        * tao/Muxed_TMS.cpp (request_id):
        * tao/Exclusive_TMS.cpp: Added a condition within request_id
          (). The request_id that is generated will obey BiDirGIOP rules,
          ie. the originator will send even number requests and the
          receiver send odd numbered requests. The old method of
          generation was giving problems in MT cases.

        * tao/Invocation.cpp: Minor cosmetic changes.
        * tao/IIOP_Transport.cpp: Modify the request id only for the first
          request during BiDir connection origination.


        Thu Jan 31 11:23:59 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Cache_Entries.cpp: Did a cosmetic fix.

        * tao/Cache_Entries.h:
        * tao/Cache_Entries.inl: Added a new method incr_index () to the
          TAO_CacheExtId class.

        * tao/Resource_Factory.cpp:
        * tao/Resource_Factory.h:Added two new methods,
          max_muxed_connections () and locked_transport_cache (). The
          former returns the number of user specified muxed connections
          with a particular property. The latter returns a boolean value
          to indicate whether the transport cache needs to have a lock or
          not .

        * tao/default_resource.cpp:
        * tao/default_resource.h: Concrete implementations for the methods
          declared in Resource_Factory.

        * tao/Transport_Cache_Manager.cpp:
        * tao/Transport_Cache_Manager.h:
        * tao/Transport_Cache_Manager.inl: Added support for counted muxed
          connections ie. the user can limit the number of remote
          connections (with a particular property). If the thread
          searching the cache for a free connection doesnt find one that
          is free, the thread will wait on a condition variable for the
          connection to be released. To accomodate this the following set
          of changes were made

          - Added a condition variable to the class

          - Create the type of lock that needs to be used for the cache
            locally and use that lock to create the condition variable. If
            the cache is free of any locks we dont create a condition
            variable.

          - The creation of lock has been moved to the
            Transport_Cache_Manager from the Resource_Factory.

          - Added two new methods, wait_for_connection () and
            is_wakeup_useful (). The wait_for_connection () blocks the
            thread searching for connection, if there is a limit on the
            number of muxed connections and if there have been enough
            connections created with the same property. The
            is_wakeup_useful () method is called by an unblocked thread to
            check whether the transport that was returned is the one the
            thread was waiting for.

          - Removed a version of rebind () and a couple of version of
            unbind () calls as they were not used.

        * tao/Condition.h:
        * tao/Condition.cpp:.
        * tao/Condition.inl: A simple wrapper that wraps a
          TAO_SYNCH_CONDITION that can be used with different types of
          Mutex classes.

Tue Apr  3 12:44:51 UTC 2002  Don Hinton <dhinton@ieee.org>

        * tao/docs/pluggable_protocols/index.html:
          Fixed a minor html formatting problem in the POSA1
          entry.

        * tao/advanced_resource.{h|cpp}:
        * tao/docs/Options.html:
          Added new option, -ORBReactorThreadQueue, with LIFO and
          FIFO arguments.  Reorganized init() to use ACE_Arg_Shifter.
          And added new option description to the TAO_Advanced_Resource_Factory
          section of Options.html.

Tue Apr  2 14:20:38 2002  Steve Totten  <totten_s@ociweb.com>

        Applied to following changes on behalf of Rob Martin
        <martin_r@ociweb.com>.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Profile.h:

          Override parse_string() from the base class to update the ssl
          endpoint's iiop endpoint once the base class has completed
          parsing the string.

Tue Apr  2 13:41:38 UTC 2002  Don Hinton <dhinton@ieee.org>

        * tao/Acceptor_Registry.cpp:
        * tao/Connector_Registry.cpp:
        * tao/default_resource.cpp:
          Wrapped calls to ACE_CString::c_str() in ACE_TEXT_CHAR_TO_TCHAR,
          changed ACE_TEXT to ACE_LIB_TEXT, and added missing ACE_LIB_TEXT
          in ACE_DEBUG/ACE_ERROR calls.

Mon Apr  1 18:05:22 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/orbsvcs/Concurrency/Concurrency_Utils.cpp:
        * orbsvcs/orbsvcs/Concurrency/Concurrency_Utils.h:
        * orbsvcs/orbsvcs/Concurrency/Concurrency_Loader.cpp:
        * orbsvcs/orbsvcs/Concurrency/Concurrency_Loader.h:
        * orbsvcs/orbsvcs/Makefile.CosConcurrency:
        * orbsvcs/Concurrency_Service/Makefile:
        * orbsvcs/tests/Concurrency/Makefile:
          Made changes to dynamically load or unload the Concurrency
          service. Added the new files in the Makefile and updated
          the dependencies.

Mon Apr 01 07:38:45 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Resource_Factory.h:

          Forward declare ACE_Lock.  Necessitated by inter-header
          dependency reductions below.

Sun Mar 31 21:48:42 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Cache_Entries.h:

          Re-exported the TAO_Cache_IntId class.  VC 6 Release builds
          whine about unresolved symbols in pluggable protocols despite
          the fact the class isn't directly used in them.

Sun Mar 31 21:37:15 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Acceptor_Registry.h:

          Include "tao/Exception.h" to pull in CORBA::SystemException
          class declaration.  A complete type is necessary when used
          within an exception specification.

Sat Mar 30 20:49:46 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.cpp:

          Include "tao/Protocol_Factory.h" to pull in TAO_Protocol_Factory
          class declaration.

Sat Mar 30 14:49:13 2002  Ossama Othman  <ossama@uci.edu>

        * tao/RTPortableServer/RT_Policy_Validator.cpp:

          Include "tao/Pluggable.h" to pull in TAO_Acceptor class
          declaration.

Sat Mar 30 14:43:28 2002  Ossama Othman  <ossama@uci.edu>

        * tao/RTCORBA/RT_Protocols_Hooks.cpp:

          Include "tao/Protocol_Factory.h" and "tao/Pluggable.h" to pull
          in TAO_Protocol_Factory and TAO_Acceptor class declarations,
          respectively.

        * tao/RTCORBA/Private_Transport_Descriptor.cpp:

          Include "tao/Endpoint.h" to pull in TAO_Endpoint class
          declaration.

Sat Mar 30 14:01:43 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Transport_Cache_Manager.h:

          Reverted change that removed "tao/Connection_Purging_Strategy.h"
          include.  It is required since some inline methods in
          Transport_Cache_Manager.inl require a complete type.

Sat Mar 30 13:38:10 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Resource_Factory.h:

          No need to include "tao/Protocol_Factory.h".  Forward declaring
          TAO_Protocol_Factory is enough.

          Removed extraneous "tao/Pluggable.h" and "tao/orbconf.h"
          includes.

          Include "ace/SString.h" to pull in ACE_CString typedef.

        * tao/Resource_Factory.cpp:

          Include "tao/Protocol_Factory.h" to pull in TAO_Protocol_Factory
          class declaration.

        * tao/Acceptor_Registry.cpp:
        * tao/Connector_Registry.cpp:

          Include "tao/Pluggable.h" to pull in TAO_Acceptor and
          TAO_Connector class declarations, respectively, and
          "tao/Protocol_Factory.h" for TAO_Protocol_Factory.

        * tao/Transport_Descriptor_Interface.h:

          No need to include "tao/Endpoint.h".  Forward declaring
          TAO_Endpoint is enough.

        * tao/Transport_Descriptor_Interface.cpp:

          Include "tao/Endpoint.h" to pull in the TAO_Endpoint class
          declaration.

        * tao/Transport_Cache_Manager.h:

          No need to include "tao/Connection_Purging_Strategy.h".  Forward
          declaring TAO_Connection_Purging_Strategy is enough.

          (TAO_Transport_Cache_Manager):

          Changed underlying hash map from ACE_Hash_Map_Manager to
          ACE_Hash_Map_Manager_Ex.  The former requires three additional
          template instantiations and used the latter under the hood
          anyway.  This reduces TAO's footprint.

        * tao/Transport_Cache_Manager.cpp (TAO_Transport_Cache_Manager):

          Initialize the underlying hash map's size to be equal to the
          maximum number of handles allowed for the current process.  This
          addresses a potential problem where more connections may be
          opened than the Transport_Cache_Manager with a default size
          (ACE_DEFAULT_MAP_SIZE) is able to contain since the underlying
          hash map cannot be resized once it has been opened.
          Furthermore, it reduces the memory requirements for processes
          that have a maximum handle limit less than ACE_DEFAULT_MAP_SIZE,
          which was the previous default hash map size.

          (ACE_Hash_Map_Manager):

          Removed all explicit template instantiations related to this
          template.  They are no longer used or needed.

        * tao/Base_Transport_Property.h:

          Include "tao/Endpoint.h" to pull in declaration of TAO_Endpoint
          class.

        * tao/Cache_Entries.h (TAO_Cache_IntId, TAO_Cache_ExtId):

          No need to export these classes.  They are only used internally
          by TAO.

          (hash):

          Updated comment to reflect the fact that an
          ACE_Hash_Map_Manager_Ex is used instead of an
          ACE_Hash_Map_Manager.

        * tao/Leader_Follower.h:

          Forward declare TAO_Transport.  Made necessary by above
          inter-header dependency reductions.

Thu Mar 28 12:29:00 2002  Si Mong Park  <spark@ociweb.com>

        * orbsvcs/Event_Service/Event_Service.cpp:
          Fixed incorrect string comparison that caused event service to crash.

Thu Mar 28 06:46:55 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

        * docs/configurations.html: Fixed a broken link.  Thanks to
          Eric Eide for reporting this.

        * orbsvcs/Naming_Service/README: Corrected the README to say
          that SERVICE_DEMAND_START is the proper default option if only
           -i is specified.  Thanks to Whitney Kew
           <Whitney.Kew@Invensys.com> for reporting this.

Wed Mar 27 17:51:19 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/fe_declarator.cpp (compose):

          Moved a string compare to follow a block where one of the
          string compare args is checked for NULL. Thanks to Kevin
          Heifner <heifner_k@ociweb.com> and Chad Elliott
          <elliott_c@ociweb.com> for pointing out the oversight.

Wed Mar 27 12:31:33 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/orbsvcs/Naming/Flat_File_Persistence.cpp (operator <<):
          Fixed the format specifier mismatch warnings on Redhat
          IA64. Committing on behalf of Chad Elliott <elliott_c@ociweb.com>

Wed Mar 27 10:53:44 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/Makefile:
          Add the RTCORBA_Callback directory.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Test.idl:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Roundtrip.h:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Roundtrip.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/client.cpp:
          Add workload parameters to the test, the server will burn a
          prescribed amount of CPU before returning, command-line
          arguments in the client are used to set the amount of CPU.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Makefile:
          Regenerate depedendencies.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/client.cpp:
          Print out progress every 1000 iterations.  Reduce length of
          critical section when checking if the task should be stopped.
          Use helper class to run ORB event loop thread(s).
          Just wait for the low priority task, not for all the tasks in
          its Thread_Manager, otherwise we dead-lock during shutdown.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/server.cpp:
          Use helper class to run ORB event loop thread(s).

        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
          Run only one thread for the ORB event loop, no more should be
          needed because all the events are processed by the RT-POA
          threads.
          Simplify POA configuration.
          Improve debug messages.
          Make it possible to connect the high-priority consumer/supplier
          after all the low-priority consumers or before them.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/server.cpp:
          Use helper class to run ORB event loop thread(s).

        * orbsvcs/performance-tests/RTEvent/lib/Client_Options.cpp:
          Fixed options for low/high-priority workload (they were
          reversed).

        * orbsvcs/performance-tests/RTEvent/lib/RTPOA_Setup.cpp:
          Move thread pool policy to the end of the list, easier to remove
          the thread pool stuff that way.

        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.cpp:
          Configure a special POA when RT-CORBA is enabled, though the POA
          may not have a thread pool for the moment.

        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/roundtrip.conf:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/realtime.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/roundtrip.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.locking_copy_on_read.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.locking_copy_on_write.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.locking_delayed.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.locking_immediate.conf:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/realtime.conf:
          Per Irfan's recommendation used the 'direct' mapping instead of
          'continuous', with no visible effects.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/generate_percentiles.sh:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/run.sh:

        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/parameters:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/run_roundtrip.sh:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/parameters:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/run_test.sh:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/parameters:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/run_roundtrip.sh:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/parameters:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/run_dispatching.sh:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/run_locking.sh:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/run_locking.sh:
          Commit the driver scripts, I didn't keep track of all the
          changes, and IMHO they do no matter all that much, the scripts
          are throw-away prototypes, once the tests become stable I'll add
          the final perl scripts.

        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/generate_gnuplot.pl:
          Receive the list of 'types' from the command line, better than
          some hard-coded set.

        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/generate_percentiles.sh:
          Receive the list of types from the command line, also made the
          list of percentiles configurable.  Fix subtle problems in the
          boundary conditions.

Wed Mar 27 09:23:42 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/operation.cpp:

          Modified gen_throw_spec() to include the entire iterator
          loop inside the check for the operation belonging to a
          valuetype. This allows the removal of several similar
          checks inside the loop and the use of a loop counter.

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:

          Restored the copying of the exception list from a regular
          operation to the exception holder operation. Apparently
          this list is used not only for the throw spec generation
          but also for generation of other operations.

Wed Mar 27 10:03:47 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * tao/Invocation.cpp: Add include of ace/Auto_Ptr.h for Tru64 builds.

Tue Mar 26 12:21:41 2002  Carlos O'Ryan  <coryan@atdesk.com>

        * orbsvcs/orbsvcs/RtecEventChannelAdmin.idl:
          Fixed minor documentation errors, thanks to Johnny Willemsen
          <johnny.willemsen@meco.nl> for pointing them out.

Tue Mar 26 10:23:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs.CosNotification.dsp:

          Added some missing files to the project.

Tue Mar 26 09:11:10 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/Time_Service/Server_i.cpp (init): Change
          ACE_ENV_SINGLE_ARG_PARAMETER to ACE_ENV_ARG_PARAMETER.

Tue Mar 26 07:46:42 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp:

          Added back the -u option to the get_opts in parse_args().  It was
          accidentally removed during a merge.

Tue Mar 26 07:26:00 2002  Si Mong Park  <spark@ociweb.com>

        * tao/Services.cpp:
        * tao/Services.i:
          Moved _tao_seq_Octet's Dtor back to cpp as eVC (WinCE) does not complain
          unresolved symbol linker error anymore.  Inline Dtor was causing compiler
          error on Tru64, although it was okay on WinCE, NT, Solaris, and etc.
          (thanks to Craig Rodrigues for report)  In the future, if this causes a
          problem again on WinCE, then preprocessor for WinCE, such as ACE_HAS_WINCE,
          may be used to make inline Dtor specific for WinCE.

Mon Mar 25 16:00:00 2002  Si Mong Park  <spark@ociweb.com>

        * orbsvcs/orbsvcs/Naming/Flat_File_Persistence.cpp:
          Changed format specifier for size_t type from %d to %u.
          Thanks to Craig Rodrigues for this fix.

Mon Mar 25 15:07:24 2002  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/RTCORBA/Thread_Pool.cpp (validate_and_map_priority): We
          don't support thread lanes without any static threads - user
          must have at least one static thread in each lane.  Added a
          check for this inside the lane creation code.  Thanks to Michele
          Amoretti <amoretti@CE.UniPR.IT> for pointing this out.

Mon Mar 25 09:56:00 2002  Si Mong Park  <spark@ociweb.com>

        * orbsvcs/Event_Service/Event_Service.cpp:
          Added missing c_str() call for ACE_CString output on ACE_ERROR_RETURN.

        * orbsvcs/Time_Service/Server_i.cpp:
        * orbsvcs/Time_Service/Server_i.h:
          Fixed incorrect env parameter macro for init_naming_service().

Sun Mar 24 22:06:00 2002  Si Mong Park  <spark@ociweb.com>

        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.i:
          Fixed for warning on 'const char*' to 'char*' conversion.

        * orbsvcs/orbsvcs/Sched/DynSched.cpp:
          Added back original C-style casting, (const char*), for ACE_DEBUG
          output of task lists' entry points to fix compilation warning
          on some platforms.

Sun Mar 24 13:39:00 2002  Si Mong Park  <spark@ociweb.com>

        * orbsvcs/Concurrency_Service/Concurrency_Service.cpp:
        * orbsvcs/Concurrency_Service/Concurrency_Service.h:
        * orbsvcs/LifeCycle_Service/LifeCycle_Service.cpp:
        * orbsvcs/LifeCycle_Service/LifeCycle_Service.h:
        * orbsvcs/Naming_Service/Naming_Service.cpp:
        * orbsvcs/Naming_Service/Naming_Service.h:
        * orbsvcs/Time_Service/Clerk_i.cpp:
        * orbsvcs/Time_Service/Clerk_i.h:
        * orbsvcs/Time_Service/Server_i.cpp:
        * orbsvcs/Time_Service/Server_i.h:
          Changed 'char' type parameter to 'ACE_TCHAR' type, and removed
          attributes that store the argc and pointers of argv.

        * orbsvcs/CosEvent_Service/CosEvent_Service.cpp:
        * orbsvcs/Dump_Schedule/Dump_Schedule.cpp:
        * orbsvcs/Naming_Service/Naming_Server.cpp:
        * orbsvcs/Notify_Service/Notify_Server.cpp:
        * orbsvcs/Time_Service/Time_Service_Clerk.cpp:
        * orbsvcs/Time_Service/Time_Service_Server.cpp:
        * orbsvcs/Trading_Service/Trading_Server.cpp:
          Changed 'main' to 'ACE_TMAIN'.

        * orbsvcs/Event_Service/Event_Service.cpp:
        * orbsvcs/Event_Service/Event_Service.h:
        * orbsvcs/Scheduling_Service/Scheduling_Service.cpp:
        * orbsvcs/Scheduling_Service/Scheduling_Service.h:
          Changed 'char' type parameter to 'ACE_TCHAR' type, and changed '*char'
          type attributes to ACE_CString to make copy instead of storing pointer.

        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/Notify_Service/Notify_Service.h:
        * orbsvcs/Trading_Service/Trading_Service.cpp:
        * orbsvcs/Trading_Service/Trading_Service.h:
        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Utils.h:
        * orbsvcs/orbsvcs/Trader/Trader.cpp:
        * orbsvcs/orbsvcs/Trader/Trader.h:
          Changed 'char' type parameter to 'ACE_TCHAR' type.

        * orbsvcs/ImplRepo_Service/Repository.cpp:
        * orbsvcs/orbsvcs/Event/ECG_Mcast_EH.cpp:
        * orbsvcs/orbsvcs/Event/GPlot_File.cpp:
        * orbsvcs/orbsvcs/IOR_Multicast.cpp:
        * orbsvcs/orbsvcs/Scheduler_Factory.cpp:
        * orbsvcs/orbsvcs/Log/Log_i.cpp:
        * orbsvcs/orbsvcs/Naming/Flat_File_Persistence.cpp:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp:
        * orbsvcs/orbsvcs/Sched/Scheduler.cpp:
          Updated/changed to be wide-character build compatible.

        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.i:
        * orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.h:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.h:
        * orbsvcs/orbsvcs/Event/EC_Sched_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Sched_Factory.h:
        * orbsvcs/orbsvcs/Naming/Naming_Loader.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Loader.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_Collection_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_Collection_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_POA_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_POA_Factory.h:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp:
        * orbsvcs/orbsvcs/Trader/Trading_Loader.h:
          Changed the matching char parameter type to ACE_TCHAR as defined
          in the base class' virtual interface.

        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp:
        * orbsvcs/orbsvcs/Sched/DynSched.cpp:
        * orbsvcs/orbsvcs/Sched/Strategy_Scheduler.cpp:
        * orbsvcs/orbsvcs/Sched/Strategy_Scheduler.h:
        * orbsvcs/orbsvcs/Trader/Constraint_l.cpp:
          Added preprocessor for WinCE platform specific difference.

        * orbsvcs/orbsvcs/Naming/Hash_Naming_Context.h:
          Added preprocessor check to undefine 'interface' because the token
          'interface' is defined by default on WinCE causing error.  Since this
          works fine on Windows NT and Solaris, it is currently for all platforms.
          If any error is generated by this, then it may have to be changed for
          WinCE specific.

        * TAOACE_WinCE.vcw:
          Some dependencies have updated and removed Time Service projects.

        * orbsvcs/Concurrency_Service/Concurrency_Service.vcp:
        * orbsvcs/CosEvent_Service/CosEvent_Service.vcp:
        * orbsvcs/Dump_Schedule/Dump_Schedule.vcp:
        * orbsvcs/Event_Service/Event_Service.vcp:
        * orbsvcs/LifeCycle_Service/LifeCycle_Service.vcp:
        * orbsvcs/Naming_Service/Naming_Service.vcp:
        * orbsvcs/Notify_Service/Notify_Service.vcp:
        * orbsvcs/Scheduling_Service/Scheduling_Service.vcp:
        * orbsvcs/Time_Service/Time_Service_Clerk.vcp:
        * orbsvcs/Time_Service/Time_Service_Server.vcp:
        * orbsvcs/Trading_Service/Trading_Service.vcp:
        * orbsvcs/orbsvcs/IOR_Multicast.vcp:
        * orbsvcs/orbsvcs/Scheduler_Factory.vcp:
        * orbsvcs/orbsvcs/CosCOncurrency.vcp:
        * orbsvcs/orbsvcs/CosEvent.vcp:
        * orbsvcs/orbsvcs/CosLifeCycle.vcp:
        * orbsvcs/orbsvcs/CosNaming.vcp:
        * orbsvcs/orbsvcs/CosNotification.vcp:
        * orbsvcs/orbsvcs/CosProperty.vcp:
        * orbsvcs/orbsvcs/CosTime.vcp:
        * orbsvcs/orbsvcs/CosTrading.vcp:
        * orbsvcs/orbsvcs/DsLogAdmin.vcp:
        * orbsvcs/orbsvcs/ETCL.vcp:
        * orbsvcs/orbsvcs/Fault_Tolerance.vcp:
        * orbsvcs/orbsvcs/RTEvent.vcp:
        * orbsvcs/orbsvcs/RTOLDEvent.vcp:
        * orbsvcs/orbsvcs/RTSched.vcp:
        * orbsvcs/orbsvcs/RTSchedEvent.vcp:
        * orbsvcs/orbsvcs/Security.vcp:
        * orbsvcs/orbsvcs/Svc_Utils.vcp:
          New eMbedded Visual C++ 3.0 project file for WinCE build.

Sun Mar 24 10:29:08 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * examples/OBV/Typed_Events/Event_Types_impl.cpp (do_print):
          Change ACE_ENV_SINGLE_ARG_DECL_NOT_USED to
          ACE_ENV_SINGLE_ARG_DECL.

Sat Mar 23 10:42:42 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * TAO_IDL/be/be_visitor_operation/operation.cpp:
          Fix case where exception list is not generated if
          operation is part of a valuetype.

Fri Mar 22 19:19:18 2002  Ossama Othman  <ossama@uci.edu>

        * tao/CDR_Encaps_Codec.cpp (encode_value):

          Pass the GIOP version and ORB Core with which the CDR
          encapsulation Codec is associated to the TAO_InputCDR stream
          object used when encoding the value into a CDR encapsulation.

Fri Mar 22 14:23:46 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/tests/Event/Makefile:
          Made changes to have the dir Performance compliled always.
          Previously, the DIR was compiled when the flag CORBA_MESSAGING
          was set to 1.

Fri Mar 22 12:17:04 2002  Ossama Othman  <ossama@uci.edu>

        * tao/CDR_Encaps_Codec.h (TAO_CDR_Encaps_Codec):

          The constructor now accepts a pointer to the ORB Core which with
          the CDR encapsulation Codec is associated.

          Cache a pointer to the ORB Core.  To be used when decoding value
          from a CDR stream.

        * tao/CDR_Encaps_Codec.cpp (encode, encode_value):

          Do not instantiate the TAO_OutputCDR object with the default
          GIOP version supported by the ORB.  Each CDR Encapsulation Codec
          instance is meant to handle a specific GIOP version.  Use that
          version instead.

          (decode, decode_value):

          Instantiate the TAO_InputCDR object with the ORB Core with which
          the Codec is associated.  It will be needed when extracting
          object references and using codesets.

          Do not instantiate the TAO_InputCDR object with the default GIOP
          version supported by the ORB.  Each CDR Encapsulation Codec
          instance is meant to handle a specific GIOP version.  Use that
          version instead.

        * tao/CodecFactory.h:

          Cache a pointer to the ORB Core.  Some Codec implementations may
          need access to the ORB Core which they are associated.

        * tao/CodecFactory.cpp (create_codec):

          When creating a CDR encapsulation Codec, pass the cached
          TAO_ORB_Core pointer to its constructor.  The CDR encapsulation
          Codec can use it.

        * tao/CodecFactory_ORBInitializer.h:
        * tao/CodecFactory_ORBInitializer.cpp:
        * tao/ORBInitInfo.cpp (codec_factory):

          A single shared instance of the CodecFactory no longer exists.
          Instead, each ORB will have its own CodecFactory.  Certain
          Codecs require access to the ORB with which they are associated,
          thus requiring ORB-specific CodecFactorys.

        * tao/Any.cpp:

          Nuked trailing whitespace.

Fri Mar 22 09:38:14 2002  Ossama Othman  <ossama@uci.edu>

        * tao/MCAST_Parser.cpp (multicast_query):

          Fixed problem where the IP_MULTICAST_TTL socket option value was
          being passed directly to ACE_SOCK::set_option() instead of its
          address.  This should address some multicast query problems when
          using "mcast" IORs.  Thanks to Tim Iskander
          <timothy.j.iskander@lmco.com> for suggesting the fix. [Bug 1173]

Fri Mar 22 10:31:33 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/operation.cpp:

          Changed code to eliminate generation of throw spec
          if the operation is defined in a valuetype. Thanks to
          Boris Kolpackov for clarifying the behavior of valuetype
          operations.

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:

          Eliminated the copying of the exception list when creating
          an exception holder operation, since an exception holder is
          a valuetype (see above).

        * Examples/OBV/Typed_Events/Event_Types_Impl.cpp:
        * Examples/OBV/Typed_Events/Event_Types_Impl.h:

          Removed the throw specs from the impl class operations, since
          the impl classes are derived from value types.

Thu Mar 21 15:45:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Any.cpp:

          In copy constructor and assignment operator, added check for
          existence of source Any's message block before creating our
          own with ACE_NEW. This makes for more consistent behavior in
          the value() method. Thanks to Alex Hornby <alex@anvil.co.uk>
          for sending in the patch.

Thu Mar 21 12:20:25 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Invocation.cpp:

          When a CORBA system or user exception is raised, the invocation
          creates it on the heap. On platforms with native exceptions, it
          is then thrown, causing a memory leak, so in these cases the
          newly created exception is put into an ACE auto_ptr before
          raising. On platforms without native exceptions, the Environment
          class manages the memory. Thanks to Bruce McIntosh
          <Bruce.McIntosh@Australia.Boeing.com> for pointing out the
          leak, and to Nanbor for his help with the fix.

Wed Mar 21 08:11:15 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
          Fixed incorrect typecode genertaion for complex
          valuetype inheritance cases.
          Thanks to Frank Rybak <rybak@ll.mit.edu> for reporting
          this and helping to narrow it down.

        * tests/OBV/Any/Any.idl:
          Modified inheritance tree to cover above case.

Wed Mar 20 22:09:12 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/Trader/Interpreter_Utils_T.cpp:
          Replace ACE_TRY_ENV with ACE_ENV_ARG_PARAMETER and
          ACE_ENV_SINGLE_ARG_PARAMETER macros.

Wed Mar 20 11:20:14 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * tests/MT_Timeout/Client_Task.cpp: Include Messaging.h instead of
          MessagingC.h.

Wed Mar 20 06:59:58 2002  Douglas C. Schmidt  <schmidt@siesta.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Interpreter_Utils_T.cpp (TAO_find):
          Fixed a bug where a sequence was not being accessed properly.
            Thansk to Laurent Sabourin <lsabourin@interstarinc.com> for
           reporting this.

Tue Mar 19 21:01:24 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/operation.cpp:

          Fixed generation of extra comma when generating throw spec
          for an AMI exception holder.

        * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:

          Fixed indentation disagreement when generating throw spec for
          a valuetype operation, compared with generating a throw spec
          for an interface opertion.

Tue Mar 19 09:46:09 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Callback.h:

          No need to include "ace/pre.h" since this header is only used
          for an executable binary, not a library.

Tue Mar 19 10:18:42 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/lib/Client_Options.h:
          Add missing export directives.

        * orbsvcs/performance-tests/RTEvent/lib/TAO_RTEC_Perf.dsp:
          Add mising files to the project.

        * TAOACE.dsw:
          Add missing dependency.

        * orbsvcs/performance-tests/RTEvent/RTEvent.dsw:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/server.dsp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/client.dsp:
          Add new project files.

Mon Mar 18 17:43:49 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tao/Messaging/diffs/Messaging.diff:
          Updated the diffs file for the latest changes in the Messaging
          library.

Mon Mar 18 18:37:07 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Messaging/Messaging.h:
        * tao/Messaging/MessagingC.h: Prevent users from including
          MessagingC.h directly. Users should include only Messaging.h,
          else the static initializer for the Messaging library will not
          be included. This would mean that the symbols from the Messaging
          library will not be linked into the executable in static
          builds. If they dont get linked into the executable, the
          Messaging library will not be registered with the ORB and all
          bad things start happening. Builds with dynamic libraries dont
          have this problem.

        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingS.h:
        * tao/Messaging/Messaging_Policy_i.h: Included Messaging.h. The
          diffs for the generated code needs regeneration. I am going to
          ask Jai to do it, as I had spent lots of time trying to chase a
          bug because of the problem.

Mon Mar 18 11:57:28 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp:
          Corrected the cast-type.

Mon Mar 18 11:13:16 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/Server_Leaks/client.cpp:
          Fixed the ACE_CHECK to ACE_TRY_CHECK.

Mon Mar 18 13:06:10 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Added a flag to the front-end global data class to
          tell if an included IDL file has been included before.
          This was necessary to work in conjunction with the
          preprocessor output to handle #pragma prefix correctly.
          If an IDL file is included a second time, the #line number
          and filename are still generated by the preprocessor, but
          none of the contents of the IDL file (including a possible
          #pragma prefix directive). Thanks again to Frank Kuhlman
          <kuhlmann@materna.de> for pointing out the problem.

Mon Mar 18 15:34:26 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * TAO_IDL/be_include/be_visitor_field/cdr_op_ci.h:
        * TAO_IDL/be/be_visitor_field/cdr_op_ci.cpp:
          Fixed bug in marshaling code for a valuetype inside a struct.

        * TAO_IDL/be/be_visitor_operation/operation.cpp:
          Fixed bug in a throw specification for valuetype operations.
          Before the CORBA::SystemException would wrongly appear there.

          Thanks to Chen Jian <jchen@huawei.com> for reporting them.

Sat Mar 16 09:07:20 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * TAOACE.dsw: Added Messaging DLL as a dependency to the
          Event_Service and add TAO DLL as a dependency to the Messaging
          DLL.

Sat Mar 16 11:35:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orsvcs/orbsvcs/CosNaming.bor:
          Updated this BCB makefile with the changes of
          Thu Mar 14 09:26:54 2002  Chad Elliott  <elliott_c@ociweb.com>

Sat Mar 16 00:47:58 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Object.h (refcount_):

          The CORBA::Object implementation will once again retain its own
          reference count.

          (refcount_lock_):

          The reference count lock member is now instantiated on the
          heap.  It will only be instantiated if the object is an
          unconstrained object (as opposed to locality-constrained).  This
          retains the same proven reference count semantics that existed
          prior to the object reference instantiation optimization changes
          from Wed Mar  6 21:55:11 2002  Ossama Othman  <ossama@uci.edu>,
          and simultaneously retains the optimization without the subtle
          reference count issues incurred by coupling the object reference
          reference count with the TAO_Stub reference count.

        * tao/Object.i (CORBA_Object):
        * tao/Object.cpp (CORBA_Object):

          Initialize the reference count to one, and the reference count
          lock pointer to zero.

          (_add_ref, _remove_ref):

          If the reference count lock pointer is non-zero then, perform
          the appropriate reference count manipulation.

          (~CORBA_Object):

          Deallocate the reference count lock instance.

Sat Mar 16 01:58:21 2002  Ossama Othman  <ossama@uci.edu>

        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.cpp:

          Include "tao/Invocation.h" to pull in TAO_GIOP_Invocation class
          declaration.  Necessitated by header reduction in IFR_BaseC.h.
          Fixes minimum CORBA builds.

        * tao/IFR_Client/diffs/IFR_BaseC.cpp.diff:
        * tao/IFR_Client/diffs/IFR_BaseC.h.diff:
        * tao/IFR_Client/diffs/IFR_ComponentsC.cpp.diff:

          Regenerated these diff files.

Sat Mar 16 01:27:32 2002  Ossama Othman  <ossama@uci.edu>

        * tao/IFR_Client/IFR_BaseC.h:

          Include appropriate headers to allow the IFR_Client library to
          compile in minimum CORBA builds.  Necessitated by the
          inter-header dependency reductions made about a week ago.

Fri Mar 15 16:06:10 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/orbsvcs/Naming/Flat_File_Persistence.cpp (operator >>):
          Fixed the warning gcc-3.0 was complaining about by correcting the
          format specifier used.

Fri Mar 15 16:02:52 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * TAO-INSTALL.html: Updated to include Solaris 8.  Thanks to
          Stephane Chatre <schatre@qoptics.com> for reporting this.

Fri Mar 15 07:50:23 2002  Chad Elliott  <elliott_c@ociweb.com>

       Committing this change for Yan Dai <dai_y@ociweb.com>.

       * tao/SmartProxies/Smart_Proxies.cpp:

         Declared an integer to please the VisualAge5.0.2.2 compiler,
         otherwise this error message is displayed.

         "ld: 0711-244 ERROR: No csects or exported symbols have been saved."

Fri Mar 15 07:15:28 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/CosNaming.dsp:
        * orbsvcs/orbsvcs/CosNaming_Static.dsp:

          Forgot about Windows.  I added the new Naming files from
          Thu Mar 14 09:26:54 2002 to the CosNaming project files.

Fri Mar 15 00:46:00 2002  Si Mong Park  <spark@ociweb.com>

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
          Changed TAO_ORB_Core::init() to accept char type to match the
          type used in CORBA::ORB_init() to prevent confusion.

        * tao/TAO_Internal.cpp:
          Fixed an error that caused an access violation upon deleting
          string sequence that is not under proper owner ship.

        * tao/default_resource.cpp:
        * tao/Resource_Factory.cpp:
        * tao/Resource_Factory.h:
          Changed back to use ACE_CString due to the unexpected additional
          awkward type conversion.

        * tao/BiDir_GIOP/BiDirGIOP.cpp:
        * tao/BiDir_GIOP/BiDirGIOP.h:
        * tao/DynamicAny/DynamicAny.cpp:
        * tao/DynamicAny/DynamicAny.h:
        * tao/IORManipulation/IORManip_Loader.cpp:
        * tao/IORManipulation/IORManip_Loader.h:
        * tao/RTCORBA/RT_ORB_Loader.cpp:
        * tao/RTCORBA/RT_ORB_Loader.h:
        * tao/Strategies/advanced_resource.cpp:
        * tao/Strategies/advanced_resource.h:
        * tao/Strategies/DIOP_Factory.cpp:
        * tao/Strategies/DIOP_Factory.h:
        * tao/Strategies/SHMIOP_Acceptor.cpp:
        * tao/Strategies/SHMIOP_Acceptor.h:
        * tao/Strategies/SHMIOP_Factory.cpp:
        * tao/Strategies/SHMIOP_Factory.h:
        * tao/Strategies/UIOP_Factory.cpp:
        * tao/Strategies/UIOP_Factory.h:
        * tao/Strategies/UIOP_Lite_Factory.cpp:
        * tao/Strategies/UIOP_Lite_Factory.h:
        * tao/TypeCodeFactory/TypeCodeFactory_Loader.cpp:
        * tao/TypeCodeFactory/TypeCodeFactory_Loader.h:
          Changed the matching char parameter type to ACE_TCHAR as defined
          in the base class' virtual interface.

        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
          Changed ACE_TEXT to ACE_LIB_TEXT.

        * TAOACE_WinCE.vcw:
          Minor change in project dependency.

        * tao/BiDir_GIOP/TAO_BiDir_GIOP.vcp:
        * tao/Domain/TAO_Domain.vcp:
        * tao/DynamicAny/TAO_DynamicAny.vcp:
        * tao/DynamicInterface/TAO_DynamicInterface.vcp:
        * tao/IFR_Client/TAO_IFR_Client.vcp:
        * tao/IORManipulation/TAO_IORManip.vcp:
        * tao/IORTable/TAO_IORTable.vcp:
        * tao/PortableServer/TAO_PortableServer.vcp:
        * tao/RTCORBA/TAO_RTCORBA.vcp:
        * tao/RTPortableServer/TAO_RTPortableServer.vcp:
        * tao/SmartProxies/SmartProxies.vcp:
        * tao/Strategies/TAO_Strategies.vcp:
        * tao/TypeCodeFactory/TypeCodeFactory.vcp:
          eMbedded Visual C++ 3.0 project file for main TAO.dll for WinCE
          build.

Thu Feb 28 09:55:21 2002  Chad Elliott  <elliott_c@ociweb.com>

        * examples/Simple/time/Time_Client_i.cpp:

          Fix a core dump for 64-bit Solaris and HP-UX.  The address of the
          CORBA::Long (in the call to ctime) needed to be 8 byte aligned and
          the reentrant version of ctime needed to be used (due to
          problems on Solaris).

Thu Mar 14 14:13:02 2002  Chad Elliott  <elliott_c@ociweb.com>

        * tests/File_IO/server.cpp:

          Destroy the POA and ORB at the end of the test.  This avoids a
          core dump on HP-UX 10.20.

        * tests/Server_Leaks/run_test.pl:

          Increase the wait time for server startup.  Slower machines were
          failing due to this.

        * tests/Server_Leaks/client.cpp:

          Switched an ACE_CHECK within a try block to an ACE_TRY_CHECK.

Thu Mar 14 12:03:21 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PICurrent.cpp (~TAO_PICurrent_Impl):

          Make sure the peer TAO_PICurrent_Impl object no longer considers
          this TAO_PICurrent_Impl its peer since this object will no
          longer exist once this destructor completes execution.  Fixes a
          seg fault.  Thanks  to Jeffrey Shaffer <jeffs@integ.com> for
          reporting the problem, and for confirming that this fix works.

Thu Mar 14 13:50:59 2002  Chad Elliott  <elliott_c@ociweb.com>

        Committing this change for Scott Harris <harris_s@ociweb.com>.

        * orbsvcs/examples/Security/Send_File/Send_File_Server.dsp:

          Changed %ACE_ROOT%/bin/tao_idl to a relative path to be
          consistent with other project files.

Thu Mar 14 13:44:15 2002  Chad Elliott  <elliott_c@ociweb.com>

        Committing this change for Yan Dai <dai_y@ociweb.com>.

        * docs/tutorials/Quoter/RT_Event_Service/Stock_i.cpp:

          Changed MyTieStock to be a friend of class Quoter_Stock_i
          instead of the constructor to avoid a compilation error on AIX.

Thu Mar 14 09:26:54 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Makefile.CosNaming:
        * orbsvcs/orbsvcs/Naming/Flat_File_Persistence.h:
        * orbsvcs/orbsvcs/Naming/Flat_File_Persistence.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Service_Container.h:
        * orbsvcs/orbsvcs/Naming/Naming_Service_Container.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Utils.h:
        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp:
        * orbsvcs/orbsvcs/Naming/Storable.h:
        * orbsvcs/orbsvcs/Naming/Storable.inl:
        * orbsvcs/orbsvcs/Naming/Storable.cpp:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp:

          Adding a flat file Naming Service persistence originally written
          by Chanaka Liyanaarachchi <chanaka@ociweb.com> and Bruce Trask
          <trask_b@ociweb.com>.  A new option, -u, was added to use the flat
          file persistence instead of the mmap() persistence.  The -u option
          takes a parameter which specifies which directory is used to
          store the persistence files.

        * orbsvcs/tests/Simple_Naming/run_test.pl:

          Update the test to include a test for -u.

Thu Mar 14 09:51:06 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/Makefile:
          Removed directories until I have time to fix them.

Thu Mar 14 08:12:26 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:

          Removed unused variable.

Wed Mar 13 21:41:00 2002  Si Mong Park  <spark@ociweb.com>

        * tao/BiDir_Adapter.h:
        * tao/default_client.cpp:
        * tao/default_client.h:
        * tao/default_resource.cpp:
        * tao/default_resource.h:
        * tao/default_server.cpp:
        * tao/default_server.h:
        * tao/IIOP_Factory.cpp:
        * tao/IIOP_Factory.h:
        * tao/IIOP_Lite_Factory.cpp:
        * tao/IIOP_Lite_Factory.h:
        * tao/Object_Loader.h:
        * tao/Protocol_Factory.cpp:
        * tao/Protocol_Factory.h:
          Changed parameter type from 'char'-base to 'ACE_TCHAR'-base for
          the interface defined in base class that is in the ACE layer.

        * tao/Resource_Factory.cpp:
        * tao/Resource_Factory.h:
          Changed ACE_CString to ACE_TString to reduce type conversions on
          wide-character/Unicode builds.

        * tao/DLL_ORB.cpp:
          Added argv type conversion only for WinCE.

        * tao/Services.cpp:
        * tao/Services.h:
        * tao/Services.i:
          Made virtual Dtor's empty body as inline to make WinCE compiler happy.

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
          Changed all char* type names to ACE_CString to have its own copies of
          strings instead of storing argv pointers.  This is required to make TAO
          compatible with wide-character/Unicode platforms because of possible
          type conversions of argv parameters.

        * tao/TAO_Internal.cpp:
        * tao/TAO_Internal.h:
          Changed open_services() to use ACE_TCHAR to reduce the amount of
          conversion using ACE library.

        * tao/Exception.cpp:
        * tao/Exception.h:
        * tao/FILE_Parser.cpp:
        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_State.cpp:
        * tao/IIOP_Acceptor.cpp:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/IIOP_Connector.cpp:
        * tao/Object.cpp:
        * tao/ORB.cpp:
        * tao/Transport.cpp:
          Modified to be compatible with wide-character/Unicode platforms.

        * TAOACE_WinCE.vcw:
        * tao/TAO.vcp:
          eMbedded Visual C++ 3.0 project file for main TAO.dll for WinCE build.

Wed Mar 13 14:39:06 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/util/utl_global.cpp:
        * TAO_IDL/include/idl_global.h:

          Another tweak to the #pragma prefix pushing and popping
          logic to handle another use case with conditionally included
          IDL files sent in by Frank Kuhlman <kuhlmann@materna.de>.
          This closes [BUGID:1167].

Wed Mar 13 14:51:32 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/Makefile:
        * orbsvcs/performance-tests/RTEvent/Makefile:
          Update Makefiles to include the new directories (and remove old
          ones).

        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Options.h:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Options.cpp:
          New class to parse and hold the client options, they were too
          numerous to parse on each application.

        * orbsvcs/performance-tests/RTEvent/lib/RTClient_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTEC_Initializer.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.cpp:
          Temporarly disable the use of RT-POAs.

        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.h:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Pair.h:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Pair.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Low_Priority_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/Low_Priority_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Supplier.h:
        * orbsvcs/performance-tests/RTEvent/lib/Supplier.cpp:
          Add support for multiple event sources in the high-priority
          supplier.  This is useful when trying to showcase the
          improvements of per-supplier filtering.

        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/driver.cpp:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Makefile:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
          Use the Client_Options class.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Makefile:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Test.idl:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Callback.h:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Callback.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Session.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Session.h:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Session_Factory.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Session_Factory.h:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/client.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/server.cpp:
          New test to measure the performance of CORBA (and RT-CORBA)
          through callback interfaces.

        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/compare_histo.cpp:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/compare_histo.pl:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/ec.dispatching_reactive.conf:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/ec.dispatching_rtcorba.conf:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/ec.dispatching_threaded.conf:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/ec.filter_null.conf:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/ec.filter_per_supplier.conf:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/ec.locking_copy_on_read.conf:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/ec.locking_copy_on_write.conf:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/ec.locking_delayed.conf:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/ec.locking_immediate.conf:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/generate_acc.sh:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/generate_cmp.sh:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/generate_compared_histo.sh:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/generate_gnuplot.pl:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/generate_histo.sh:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/generate_percentiles.sh:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/generate_stat.sh:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/parameters:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/run_dispatching.sh:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/run_filter.sh:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/run_locking.sh:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.locking_copy_on_read.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.locking_copy_on_write.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.locking_delayed.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.locking_immediate.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/run_locking.sh:
          Add many helper scripts and configuration files.

Wed Mar 13 14:48:12 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/EC_Scalability/*:
        * orbsvcs/performance-tests/EC_Latency/*:
        * orbsvcs/performance-tests/EC_Colocated_Latency/*:
        * orbsvcs/performance-tests/EC_Federated_Latency/*:
        * orbsvcs/performance-tests/EC_Federated_Scalability/*:
          Removed old versions of the tests, the new tests in RTEvent are
          more featured and share more code in the RTEvent/lib directory.

Wed Mar 13 10:02:11 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/driver/drv_args.cpp:

          In the case where a dash is followed by a space instead of
          command line option letters, replaced the action adding
          stdin to the IDL file list with an error message. The
          previous action was causing an endless self-spawn loop.
          This was the last item listed in [BUGID:390] that has not
          yet been fixed, so I'll close the bug entry. Thanks to
          Craig Rodrigues <crodrigu@bbn.com> for pointing out that
          this entry was almost ready to be closed.

Wed Mar 13 15:12:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/ETCL.bor:
          Corrected wrong comment

Wed Mar 13 12:45:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Muxed_GIOP_Versions/client.cpp:
        * tests/Muxed_GIOP_Versions/server.cpp:
          Fixed fuzz errors

Wed Mar 13 10:47:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/AV.dsp:
          Added missing ace/QoS directory to the libpath of several
          configurations

Tue Mar 12 17:12:51 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/util/utl_global.cpp:

          Made changes to the logic of the #pragma prefix pushes and pops
          to fix a bug in the example IDL files sent in by Frank Kuhlman
          <kuhlmann@materna.de>. This closes [BUGID:1163].

Tue Mar 12 16:19:28 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Sequence_T.cpp: Removed a \ at the end of a comment.

Tue Mar 12 15:33:45 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * PROBLEM-REPORT-FORM (Subject): Added a request for the version
          of winsock on Windows based OS's.

Tue Mar 12 15:27:17 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Sequence.h:
        * tao/Sequence.cpp:
        * tao/Sequence_T.h"
        * tao/Sequence_T.cpp:

          Added replace() methods, with signatures as described on page
          1-45 of the C++ mapping (00-01-02), to (un)bounded (w)string
          sequences. Thanks to Espen Harlinn <espen.harlinn@seamos.no>
          for pointing out the oversight. Also made many cosmetic changes
          to all the above files.

Tue Mar 12 12:30:16 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Notify_ID_Pool_T.cpp:

        Switch the code back to use the postfix ++ operator.
        Using the prefix ++ operator was causing problems with the default
        supplier and consumer admins.

Tue Mar 12 11:07:31 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h:

          Changed the private functions and members to protected,
          to make for easier subclassing of the visitor. Thanks to
          Lothat Werzinger <Werzinger.Lothar@krones.de> for the
          suggestion.

Tue Mar 12 13:45:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/CosEvent_Service/Makefile.bor:
        * orbsvcs/Event_Service/Makefile.bor:
        * orbsvcs/Notify_Service/NT_Notify_Service.bor:
        * orbsvcs/Notify_Service/Notify_Service.bor:
          Added TAO_Messaging library, this solves the link errors in the
          static BCB build. Thanks to Oleg Kraynov <olegvkr@yahoo.com>
          for reporting this.

Tue Mar 12 10:41:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/Load_Balancing/README:
          Corrected typing error

Mon Mar 11 19:29:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Makefile.bor:
          Added new Muxed_GIOP_Versions test

Sun Mar 10 13:55:55 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/lib/TAO_RTEC_Perf.dsp:
          Add new files to the MSVC project.

        * orbsvcs/performance-tests/RTEvent/lib/Control.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback.h:
        * orbsvcs/performance-tests/RTEvent/lib/Peer_Base.h:
          Add missing export directives.

        * orbsvcs/performance-tests/RTEvent/lib/ORB_Shutdown.cpp:
          Fixed inline includes, only noticeable in non-inline builds.

Sun Mar 10 08:33:10 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Muxed_GIOP_Versions/test_i.cpp: Fixed a unused variable
          warning.

Sun Mar 10 08:05:36 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp: Pass the CDR
          stream to check whether BiDirectional GIOP can be enabled or
          not.

Sun Mar 10 05:48:37 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Muxed_GIOP_Versions/run_test.pl: Changed the timeouts a
          bit so that the tests can run on other platforms.

        * tests/Makefile: Added the new test to the list.
Sun Mar 10 00:00:08 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Muxed_GIOP_Versions/server.dsp:
        * tests/Muxed_GIOP_Versions/client.dsp: Cosmetic fixes.
        * tests/Muxed_GIOP_Versions/MT_Server)and_Client.dsw: Removed this
          file from the repo.
        * tests/Muxed_GIOP_Versions/Muxed_GIOP_Versions.dsw: Added this
          workspace file.

Sat Mar  9 21:00:18 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Muxed_GIOP_Versions/*:
        * tests/Muxed_GIOP_Versions/client.bor:
        * tests/Muxed_GIOP_Versions/Makefile.bor:
        * tests/Muxed_GIOP_Versions/run_test.pl:
        * tests/Muxed_GIOP_Versions/test_i.cpp:
        * tests/Muxed_GIOP_Versions/test_i.h:
        * tests/Muxed_GIOP_Versions/test_i.i:
        * tests/Muxed_GIOP_Versions/test.idl:
        * tests/Muxed_GIOP_Versions/client.cpp:
        * tests/Muxed_GIOP_Versions/MT_Server_and_Client.dsw:
        * tests/Muxed_GIOP_Versions/server.bor:
        * tests/Muxed_GIOP_Versions/client.dsp:
        * tests/Muxed_GIOP_Versions/README:
        * tests/Muxed_GIOP_Versions/server.cpp:
        * tests/Muxed_GIOP_Versions/Makefile:
        * tests/Muxed_GIOP_Versions/server.dsp:
        * tests/Muxed_GIOP_Versions/run_test.pl: New stress test for bug
          1159. Thanks to Duane Binder for donating this test.

Sat Mar  9 20:02:34 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Base.h:
        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Lite.h:
        * tao/GIOP_Message_Lite.cpp:
        * tao/IIOP_Transport.cpp:
        * tao/Pluggable_Messaging.h: The state of the GIOP version that
          got shared between threads created problems if the threads
          processed messages of different GIOP versions. With muxed
          connections one could expect different GIOP versions on the same
          connection which is perfectly valid with latest CORBA specs.

          Removed shared state information of the GIOP version from the
          GIOP_Message_Base class. All the state information is now on the
          stack of the thread processing the request. In places where we
          dont have the version information ready, we use the CDR stream
          created by the thread to check for GIOP versions. This should
          fix [BUG 1159].

        * tao/TAO_Server_Request.cpp: If the upcall thread sends an
          exception to the client, we were creating a new output CDR
          stream instead of using the one that was already
          created. Removed creation of a new CDR stream.

          The above two fixes should solve the problem reported in
           tao-users newsgroup under the thread "wide-strings in
           exceptions". Thanks to Val Dumitrescu
           <val.dumitrescu@am-beo.com> and Sorin Iordachescu
           <sorin.iordachescu@am-beo.com> for reporting the problem and
           Duane Binder <duane.binder@veritas.com> for helping me to narrow
           down the problem.

Sat Mar  9 16:22:25 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * performance-tests/Latency/Thread_Per_Connection/Test.idl:
          Make shutdown() method oneway.

Fri Mar  8 19:01:33 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/Makefile:
          Disable RTEvent directory on nightly builds.

        * orbsvcs/performance-tests/RTEvent/Makefile:
          Add RTCORBA_Baseline to build list.

        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Makefile:
          Update dependencies.

        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/server.cpp:
          Completed implementation of federated test based on the
          Federated_Test.idl interface.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Makefile:
          Update dependencies.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/client.cpp:
          Use RTClient_Setup, no need to configure a POA for this client.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/server.cpp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/server.cpp:
          Use new RTServer_Setup helper method to fetch the correct POA in
          a single line of code.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/generate_cmp.sh:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/generate_histo.sh:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/generate_percentiles.sh:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/run.sh:
          Add scripts required to run the test, first use 'run.sh' you may
          need to be root or set client & server setuid, then use
          generate_percentiles.sh to obtain the min, avg, 99, 99.9 and
          99.99 percentiles.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile:
          Update dependencies.

        * orbsvcs/performance-tests/RTEvent/lib/Auto_Functor.h:
        * orbsvcs/performance-tests/RTEvent/lib/Auto_Functor.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Auto_Functor.cpp:
          New template to automatically call an operation in its
          destructor.

        * orbsvcs/performance-tests/RTEvent/lib/Auto_Disconnect.h:
        * orbsvcs/performance-tests/RTEvent/lib/Auto_Disconnect.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Auto_Disconnect.cpp:
          Re-implement based on 'Auto_Functor'

        * orbsvcs/performance-tests/RTEvent/lib/Implicit_Deactivator.h:
        * orbsvcs/performance-tests/RTEvent/lib/Implicit_Deactivator.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Implicit_Deactivator.cpp:
          New helper class to automatically deactivate an implicitly
          activated servant.

        * orbsvcs/performance-tests/RTEvent/lib/Consumer.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Consumer.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Supplier.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Supplier.cpp:
          Use Implicit_Deactivator.

        * orbsvcs/performance-tests/RTEvent/lib/RTClient_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTClient_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/RTClient_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.cpp:
          Re-factor client-only code into a separate class.
          Made RTServer_Setup::poa() return the "right" POA for RT-CORBA
          as well as for non-RT-CORBA configurations.

        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
        * orbsvcs/performance-tests/RTEvent/lib/Federated_Test.idl:
          Add IDL interfaces to run federated tests.

        * orbsvcs/performance-tests/RTEvent/lib/Control.h:
        * orbsvcs/performance-tests/RTEvent/lib/Control.cpp:
          Add implementation of the Federated_Test::Control interface.

        * orbsvcs/performance-tests/RTEvent/lib/Loopback.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback.cpp:
          Add implementation of the Federated_Test::Loopback interface.

        * orbsvcs/performance-tests/RTEvent/lib/Peer_Base.h:
        * orbsvcs/performance-tests/RTEvent/lib/Peer_Base.cpp:
          Add partial implementation of the Federated_Test::Peer
          interface.  Each test needs to specialize one operation.

        * orbsvcs/performance-tests/RTEvent/lib/ORB_Shutdown.h:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Shutdown.inl:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Shutdown.cpp:
          Add functor to shutdown the ORB automatically, use in
          conjunction with Auto_Functor.

        * orbsvcs/performance-tests/RTEvent/lib/PriorityBand_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTPOA_Setup.cpp:
          Cosmetic fixes.

        * orbsvcs/performance-tests/RTEvent/lib/Shutdown.h:
        * orbsvcs/performance-tests/RTEvent/lib/Shutdown.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Shutdown.cpp:
          Add functor to call shutdown() operation, use in conjunction
          with Auto_Functor.

Fri Mar  8 16:35:15 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/performance-tests/RTEvent/lib/RIR_Narrow.cpp:
          Change ACE_CHECK to ACE_TRY_CHECK.

Fri Mar  8 09:44:56 2002  Ossama Othman  <ossama@uci.edu>

        * examples/Advanced/ch_3/Makefile (LDLIBS):

          Corrected order of libraries to fix link-time errors.  Thanks to
            James Mansion <james.mansion@uk.nomura.com> suggesting the fix.

          (BIN):

          Do not build the example if CORBA Messaging support is
          disabled.  The client attempts use
          CORBA::Object::_validate_connection(). Thanks to James Mansion
          for reporting that the example didn't compile when minimum CORBA
          support was enabled.

Fri Mar  8 09:30:32 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/IFR_Service/Repository_i.cpp:

          Include "tao/ORB.h" to pull in CORBA::ORB class declaration.
          Necessitated by the inter-header dependency reductions.

Fri Mar  8 09:22:02 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/IFR_Service/IFR_Service.cpp:

          Include "tao/ORB_Core.h" to pull in TAO_ORB_Core class
          declaration.  Necessitated by the inter-header dependency
          reductions.

        * orbsvcs/IFR_Service/Repository_i.h:

          Include "tao/CORBA_String.h" to pull in CORBA::String_var class
          declaration.  Necessitated by the inter-header dependency
          reductions.

        * orbsvcs/orbsvcs/FaultTolerance/FT_Invocation_Endpoint_Selectors.h:

          Forward declare TAO_Profile to fix a compile-time error.

        * orbsvcs/orbsvcs/FaultTolerance/FT_IOGR_Property.cpp:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.cpp:
        * orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp:

          Include "tao/Profile.h" to pull in TAO_Profile class
          declaration.  Necessitated by the inter-header dependency
          reductions.

Thu Mar  7 21:39:17 2002  Ossama Othman  <ossama@uci.edu>

        * tao/MProfile.cpp (add_profile, grow):

          Removed vestigial ACE_INLINE declarations.

Thu Mar  7 21:27:58 2002  Ossama Othman  <ossama@uci.edu>

        * tao/RTCORBA/RT_Invocation_Endpoint_Selectors.h:

          More inter-header dependency reduction.  Forward declarations
          are enough.

        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_Client_Adapter_Impl.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:

          Include "tao/Stub.h" to pull in TAO_Stub class declaration.
          Neccessitated by the inter-header dependency reductions.

        * tao/IORManipulation/IORManipulation.cpp:
        * tao/RTPortableServer/RT_Acceptor_Filters.cpp:

          Include "tao/Profile.h" to pull in TAO_Profile class
          declaration.  Neccessitated by the inter-header dependency
          reductions.

        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

          Include "ace/Containers_T.h" and "ace/Hash_Map_Manager_T.h" to
          pull in the ACE_Bounded_Set and ACE_Hash_Map_Manager template
          declarations.  Neccessitated by the inter-header dependency
          reductions.

Thu Mar  7 21:01:46 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Messaging/Messaging.cpp:

          Include "tao/Stub.h" instead of "tao/Invocation.h".  The former
          is enough.  This change was brought on by the inter-header
          dependency reductions below.

Thu Mar  7 20:43:56 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Acceptor_Registry.h:
        * tao/Connector_Registry.h:
        * tao/Invocation.h:
        * tao/Invocation_Endpoint_Selectors.h:
        * tao/MProfile.h:
        * tao/MProfile.i:
        * tao/Pluggable.h:
        * tao/Stub.h:
        * tao/Stub.i:

          Reduced inter-header dependencies by removing extraneous header
          includes, forward declaring where appropriate, moving some
          (large) inline methods of `.i' files to the corresponding `.cpp'
          file.  The latter was needed to make it possible to remove some
          includes from the corresponding header file.  These changes
          should further reduce TAO preprocessing/compile times.

        * tao/Acceptor_Registry.cpp:
        * tao/Asynch_Invocation.cpp:
        * tao/ClientInterceptorAdapter.cpp:
        * tao/ClientRequestInfo_i.cpp:
        * tao/Connector_Registry.cpp:
        * tao/Default_Endpoint_Selector_Factory.cpp:
        * tao/Invocation.cpp:
        * tao/Invocation_Endpoint_Selectors.cpp:
        * tao/MProfile.cpp:
        * tao/ORB.cpp:
        * tao/ORB_Core.cpp:
        * tao/Object.cpp:
        * tao/Pluggable.cpp:
        * tao/Stub.cpp:
        * tao/PortableServer/POA.cpp:

          The inter-header dependency reductions above required inclusion
          of the appropriate header(s) in these source files.  In some
          cases, some inline methods were moved to the corresponding
          source file.

        * tao/TAO_Singleton.h:

          Made TAO_TSS_Singleton assignment operator and copy constructor
          private to mirror a change that was made to the
          ACE_TSS_Singleton class.

        * tao/Any.h:

          Corrected author information.

Thu Mar  7 17:34:26 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/server.cpp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/server.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/server.cpp:
          Add support for multiple low priority threads in the thread pool
          lanes.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/client.cpp:
          Add period to the low priority threads.
          Add debug message to find out when a thread terminates.
          Too many high priority threads started.
          Print useful info before trying to shutdown the server.

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/realtime.conf:
          Add svc conf file for real-time CORBA configurations.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.dispatching_rtcorba.conf:
          Configure the priority mapping in the svc conf file, memory
          management is easier that way.

        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Supplier.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Supplier.cpp:
          Add a counter to track sent messages, normally disabled but
          useful in debug runs.

        * orbsvcs/performance-tests/RTEvent/lib/Low_Priority_Setup.cpp:
          Schedule low priority tasks to make the throughput independant
          on the number of threads, and change only with the low priority
          period.

        * orbsvcs/performance-tests/RTEvent/lib/ORB_Task_Activator.h:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Task_Activator.inl:
          Allow applications to startup multiple threads.

        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.cpp:
          Set the number of low priority threads in the constructor.
          Use the svc.conf file to set the priority mapping.

        * orbsvcs/performance-tests/RTEvent/lib/RTEC_Initializer.cpp:
          Running the EC without co-scheduled dispatching tasks.

        * orbsvcs/performance-tests/RTEvent/lib/Send_Task.h:
        * orbsvcs/performance-tests/RTEvent/lib/Send_Task.cpp:
          Allow task to sleep before starting test to distribute different
          threads more homogenously.

        * orbsvcs/performance-tests/RTEvent/lib/Send_Task_Stopper.inl:
          Start only one thread.

        * orbsvcs/performance-tests/RTEvent/lib/Task_Activator.h:
        * orbsvcs/performance-tests/RTEvent/lib/Task_Activator.cpp:
          Allow applications to start multiple threads in a single
          activator.

Thu Mar  7 19:59:36 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/performance-tests/RTEvent/Federated_RoundTrip/server.cpp:
        * orbsvcs/performance-tests/RTEvent/RoundTrip:
          Chance ACE_ENV_SINGLE_ARG_PARAMETER  to ACE_ENV_ARG_PARAMETER.
        * orbsvcs/performance-tests/RTEvent/lib/PriorityBand_Setup.cpp:
          Chance ACE_ENV_ARG_PARAMETER to ACE_ENV_SINGLE_ARG_PARAMETER.

        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.cpp:
          Add ACE_TRY block to eliminate compilation errors
          complaining about lack of ACE_TRY_FLAG.

Thu Mar  7 18:40:05 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Makefile:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Test.idl:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Roundtrip.h:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Roundtrip.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/client.cpp:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/server.cpp:
          Add new test to measure the baseline performance and
          predictability of RT-CORBA for the event service configuration.
          Without knowing how much to expect from the infrastructure I
          cannot decide if the RTEC is doing well or not.

Thu Mar  7 13:03:50 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/Notify_Service/Notify_Service.h:
        * orbsvcs/Notify_Service/Notify_Service.cpp:

          Added the ability to use a CosNaming::NamingContext instead
          of the default which is a CosNaming::NamingContextExt.
          This CosNaming::NamingContext is used by defining
          TAO_NOTIFY_USE_NAMING_CONTEXT at compile time.

          Thanks to Markus Wild <markus.wild@homag.de> for supplying these
          changes.

Wed Mar  6 21:55:11 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Object.cpp (_remove_ref):

          Fixed a race condition, and an extraneous lock used upon object
          reference destruction.

        * tao/Stub.h:
        * tao/Stub.i (refcount_lock, refcount, destroy):

          New accessors used by the CORBA::Object::_remove_ref()
          implementation.

Wed Mar 06 18:59:37 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * examples/AMI/FL_Callback/AMI_Peer.dsp:
        * examples/AMI/FL_Callback/AMI_Progress.dsp:
        * performance-tests/Latency/AMH/Single_Threaded/client.dsp:
        * performance-tests/Latency/AMH/Single_Threaded/server.dsp:
        * performance-tests/Latency/DII/client.dsp:
        * performance-tests/Latency/DII/server.dsp:
        * performance-tests/Latency/DSI/client.dsp:
        * performance-tests/Latency/DSI/server.dsp:
        * performance-tests/Latency/Deferred/client.dsp:
        * performance-tests/Latency/Deferred/server.dsp:
        * performance-tests/Latency/Single_Threaded/client.dsp:
        * performance-tests/Latency/Single_Threaded/server.dsp:
        * performance-tests/Latency/Thread_Per_Connection/client.dsp:
        * performance-tests/Latency/Thread_Per_Connection/server.dsp:
        * performance-tests/Latency/Thread_Pool/client.dsp:
        * performance-tests/Latency/Thread_Pool/server.dsp:
        * performance-tests/Throughput/client.dsp:
        * performance-tests/Throughput/server.dsp:
          Added links to the new Messaging library.

Wed Mar  6 15:09:17 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tao/Messaging/diffs/Messaging.diff:
          Updated the diffs file with the latest changes in the source files.

Wed Mar  6 14:37:41 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

        * examples/Simple/time-date/server.cpp:
        * orbsvcs/ImplRepo_Service/tao_imr.cpp:
        * orbsvcs/TAO_Service/TAO_Service.cpp:
        * tests/Queued_Message_Test/Queued_Message_Test.cpp: Changed the
          argv type in main to char*.

Wed Mar  6 14:32:00 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tao/Messaging/MessagingC.cpp:
          Made changes to fix the Debbian_KCC builds.

Wed Mar  6 11:03:12 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/FaultTolerance/FT_IOGR_Property.h:
        * orbsvcs/orbsvcs/FaultTolerance/FT_IOGR_Property.i
          (_add_ref, _remove_ref):
        * tao/IORManipulation/IORManipulation.h:
        * tao/IORManipulation/IORManipulation.cpp (_add_ref, _remove_ref):
        * tests/Portable_Interceptors/Benchmark/interceptors.h:
        * tests/Portable_Interceptors/Benchmark/interceptors.cpp
          (_add_ref, _remove_ref):
        * tests/Portable_Interceptors/Dynamic/interceptors.h:
        * tests/Portable_Interceptors/Dynamic/interceptors.cpp
          (_add_ref, _remove_ref):
        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.h:
        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.cpp (_add_ref, _remove_ref):
        * tests/RTCORBA/Client_Propagated/interceptors.h:
        * tests/RTCORBA/Client_Propagated/interceptors.cpp:
          (_add_ref, _remove_ref):

          Removed these methods.  They called methods that no longer
          exist.  Inheriting from TAO_Local_RefCounted_Object provides the
          correct implementation.

Wed Mar  6 07:29:19 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

        * orbsvcs/orbsvcs/Property/CosPropertyService_i.h: Correctly push/pop
          the pragma that disables the annoying MSVC 4250 warning.  Thanks
           to Bruce McIntosh <Bruce.McIntosh@Australia.Boeing.com> for
           reporting this.

Tue Mar  5 23:47:17 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Object.h:

          No need to include "Object_Proxy_Broker.h".  Forward declaring
          the TAO_Object_Proxy_Broker class is enough.  This should
          improve overall compile times slightly.

          (_incr_refcnt, _decr_refcnt, refcount_lock_, refcount_):

          Removed these CORBA::Object class members.  They are no longer
          used.  See below.

        * tao/Object.i (_incr_refcnt, _decr_refcnt):

          Removed these internally used methods.  All reference counting
          is now deferred to the underlying TAO_Stub object.

        * tao/Object.cpp (CORBA_Object):

          Fixed bug where the CORBA::Object instance be considered to be
          one that points to an unconstrained object instead of the
          locality-constrained one.  If the TAO_Stub pointer parameter is
          zero then the CORBA::Object instance represents a
          locality-constrained object.  Set the "is_local_" member
          appropriately.

          If the object is locality-constrained then do not attempt to
          initialize a remote proxy broker.

          (add_ref, remove_ref):

          Defer reference counting to the underlying TAO_Stub object.
          There is no need for the CORBA::Object class to maintain a
          separate reference count.  This reduces memory requirements
          slightly, in addition to improving object reference creation
          times for both unconstrained objects and locality-constrained
          objects (e.g. one lock initialization -- not acquisition --
          instead of two).

          These changes are part of an optimization for creation of
          locality-constrained objects.  This is particularly useful for
          locality-constrained objects that are instantiated in the
          critical a path, such as the Portable Interceptor "RequestInfo"
          objects.  [Bug 874]

          (_hash):

          Added an implementation for locality-constrained objects.  It
          isn't strictly needed, but better to be consistent.

        * tao/LocalObject.h (TAO_Local_RefCounted_Object):

          Added reference counting (lock and count variable) to this
          class.  It no longer relies on the CORBA::Object base class
          reference counting.

        * tao/LocalObject.i (TAO_Local_RefCounted_Object):

          Initialize the reference counting lock and count variable
          appropriately.

        * tao/LocalObject.cpp (_add_ref, _remove_ref):

          Implemented these methods in the TAO_Local_RefCounted_Object
          class using the newly added lock and reference count variable.

Tue Mar 05 19:16:22 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * docs/tutorials/Quoter/AMI/server.dsp:
        * docs/tutorials/Quoter/AMI/client.dsp:
        * docs/tutorials/Quoter/AMI/server.dsp:
        * docs/tutorials/Quoter/On_Demand_Activation/server.dsp:
        * examples/Buffered_AMI/client.dsp:
        * examples/Buffered_AMI/server.dsp:
        * examples/Buffered_Oneways/client.dsp:
        * examples/Buffered_Oneways/server.dsp:
        * examples/Content_Server/AMI_Iterator/client.dsp:
        * examples/Content_Server/AMI_Iterator/server.dsp:
        * examples/Content_Server/AMI_Observer/client.dsp:
        * examples/Content_Server/AMI_Observer/server.dsp:
        * examples/POA/DSI/client.dsp:
        * examples/POA/DSI/server.dsp:
        * examples/Simulator/Event_Supplier/DualEC_Sup.dsp:
        * examples/Simulator/Event_Supplier/Event_Sup.dsp:
        * examples/Simulator/Event_Supplier/Logging_Sup.dsp:
        * orbsvcs/CosEvent_Service/CosEvent_Service.dsp:
        * orbsvcs/Event_Service/Event_Service_static.dsp:
        * orbsvcs/examples/CosEC/Factory/FactoryClient.dsp:
        * orbsvcs/examples/CosEC/Factory/FactoryServer.dsp:
        * orbsvcs/examples/CosEC/RtEC_Based/bin/RtEC_Based_CosEC.dsp:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Basic/Basic.dsp:
        * orbsvcs/examples/CosEC/Simple/CEC_Simple_Consumer.dsp:
        * orbsvcs/examples/CosEC/Simple/CEC_Simple_Service.dsp:
        * orbsvcs/examples/CosEC/Simple/CEC_Simple_Supplier.dsp:
        * orbsvcs/examples/RtEC/MCast/MCast.dsp:
        * orbsvcs/examples/RtEC/Schedule/EC_Schedule_Service.dsp:
        * orbsvcs/examples/RtEC/Simple/EC_Simple_Consumer.dsp:
        * orbsvcs/examples/RtEC/Simple/EC_Simple_Service.dsp:
        * orbsvcs/examples/RtEC/Simple/EC_Simple_Supplier.dsp:
        * orbsvcs/performance-tests/EC_Latency/client.dsp:
        * orbsvcs/performance-tests/EC_Latency/server.dsp:
        * orbsvcs/performance-tests/EC_Federated_Latency/client.dsp:
        * orbsvcs/performance-tests/EC_Federated_Latency/server.dsp:
        * orbsvcs/performance-tests/EC_Federated_Scalability/client.dsp:
        * orbsvcs/performance-tests/EC_Federated_Scalability/server.dsp:
        * orbsvcs/performance-tests/EC_Latency/client.dsp:
        * orbsvcs/performance-tests/EC_Latency/server.dsp:
        * orbsvcs/performance-tests/EC_Scalability/client.dsp:
        * orbsvcs/performance-tests/EC_Scalability/server.dsp:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.dsp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.dsp:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.dsp:
        * orbsvcs/tests/EC_Throughput/ECT_Throughput.dsp:
        * orbsvcs/tests/Event/Basic/Atomic_Reconnect.dsp:
        * orbsvcs/tests/Event/Basic/BCast.dsp:
        * orbsvcs/tests/Event/Basic/Bitmask.dsp:
        * orbsvcs/tests/Event/Basic/Complex.dsp:
        * orbsvcs/tests/Event/Basic/Control.dsp:
        * orbsvcs/tests/Event/Basic/Disconnect.dsp:
        * orbsvcs/tests/Event/Basic/Gateway.dsp:
        * orbsvcs/tests/Event/Basic/MT_Disconnect.dsp:
        * orbsvcs/tests/Event/Basic/Negation.dsp:
        * orbsvcs/tests/Event/Basic/Observer.dsp:
        * orbsvcs/tests/Event/Basic/Random.dsp:
        * orbsvcs/tests/Event/Basic/Reconnect.dsp:
        * orbsvcs/tests/Event/Basic/Schedule.dsp:
        * orbsvcs/tests/Event/Basic/Shutdown.dsp:
        * orbsvcs/tests/Event/Basic/Timeout.dsp:
        * orbsvcs/tests/Event/Basic/Wildcard.dsp:
        * orbsvcs/tests/Event/Performance/Connect.dsp:
        * orbsvcs/tests/Event/Performance/Inversion.dsp:
        * orbsvcs/tests/Event/Performance/Latency.dsp:
        * orbsvcs/tests/Event/Performance/Latency_Server.dsp:
        * orbsvcs/tests/Event/Performance/Throughput.dsp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.dsp:
        * performance-tests/Callback/client.dsp:
        * performance-tests/Callback/server.dsp:
        * performance-tests/Latency/AMI/client.dsp:
        * performance-tests/Latency/AMI/server.dsp:
        * performance-tests/RTCorba/Oneways/Reliable/client.dsp:
        * performance-tests/RTCorba/Oneways/Reliable/server.dsp:
        * tests/AMI/AMI_Test_Client.dsp:
        * tests/AMI/AMI_Test_Server.dsp:
        * tests/AMI/AMI_Test_Simple_Client.dsp:
        * tests/AMI_Buffering/admin.dsp:
        * tests/AMI_Buffering/client.dsp:
        * tests/AMI_Buffering/server.dsp:
        * tests/AMI_Timeouts/client.dsp:
        * tests/AMI_Timeouts/server.dsp:
        * tests/Big_Request_Muxing/client.dsp:
        * tests/Big_Request_Muxing/server.dsp:
        * tests/Blocking_Sync_None/client.dsp:
        * tests/Blocking_Sync_None/server.dsp:
        * tests/Crashed_Callback/client.dsp:
        * tests/Crashed_Callback/server.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Client.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Server.dsp:
        * tests/DSI_Gateway/DSI_Gateway_Service.dsp:
        * tests/LongUpcalls/ami_client.dsp:
        * tests/LongUpcalls/ami_server.dsp:
        * tests/LongUpcalls/blocking_client.dsp:
        * tests/LongUpcalls/blocking_server.dsp:
        * tests/MT_Timeout/MT_Timeout_Client.dsp:
        * tests/MT_Timeout/MT_Timeout_Server.dsp:
        * tests/Oneway_Buffering/admin.dsp:
        * tests/Oneway_Buffering/client.dsp:
        * tests/Oneway_Buffering/server.dsp:
        * tests/Param_Test/anyop.dsp:
        * tests/Param_Test/client.dsp:
        * tests/Param_Test/server.dsp:
        * tests/Policies/Manipulation.dsp:
        * tests/Reliable_Oneways/client.dsp:
        * tests/Reliable_Oneways/server.dsp:
        * tests/Strategies/client.dsp:
        * tests/Strategies/server.dsp:
        * tests/Timed_Buffered_Oneways/client.dsp:
        * tests/Timed_Buffered_Oneways/server.dsp:
        * tests/Timeout/client.dsp:
        * tests/Timeout/server.dsp
          Added link to the new Messaging library.

Tue Mar  5 17:32:35 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:

          Fixed a bug in #pragma prefix implementation reported by
          Craig Rodrigues <crodrigu@bbn.com>, who is using Red Hat
          7.1 and an experimental configuration of gcc
          (version 3.1 20020302 prerelease). The preprocessor output
          of this configuration is radically different than any
          others we support, and an additional check was required to
          prevent the current prefix from being popped off the stack
          prematurely.

Tue Mar  5 15:21:51 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/lib/Low_Priority_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/Low_Priority_Setup.cpp:
          Improve the implementation of stop_all_threads(), it is more
          efficient to stop them all and then simultaneously wait for all
          the threads to finish.
          Fixed a number of bugs in the template, it was only working
          because some global variables were visible at the point of
          instantiation.

        * orbsvcs/performance-tests/RTEvent/lib/RT_Class.cpp:
          Run the process at the right priority, it was runnning at the
          minimum priority + 1, while it is supposed to be (min+max)/2

        * orbsvcs/performance-tests/RTEvent/lib/Send_Task.cpp:
          Do not return if there is a single exception, simply continue
          the loop.  Add a bunch of debug messages, only to find out that
          the ORB is dead-locking in the Leader/Followers code (yuck!)

        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
          Add debugging messages.
          Use the new Low_Priority_Setup constructor.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.dispatching_reactive.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.dispatching_rtcorba.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.dispatching_threaded.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.supplier_filter_null.conf:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/ec.supplier_filter_per_supplier.conf:
          Add service configurator files required for the test.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/run_dispatching.sh:
          Add a simple test driver

Tue Mar  5 11:37:52 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/orbsvcs/Makefile:
          Made changes to have the Makefile.RTCORBAEvent used in
          compilation only when the option corba_messaging is set to 1.

Tue Mar  5 10:52:44 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security/Security_PolicyFactory.cpp
          (create_policy):

          Enabled support for creation of the
          SecurityLevel2::InvocationCredentialsPolicy.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Util.cpp:

          Include "tao/debug.h" to pull in "TAO_debug_level" declaration
          in minimum CORBA builds.  Thanks to Stan Sosnovsky
          <sosnovsky_stan@emc.com> for pointing out the problem.

Tue Mar  5 12:52:30 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/ImplRepo_Service/Forwarder.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:

          Fix some memory leaks due to misuse of CORBA memory management.

Tue Mar  5 10:56:36 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * TAOACE.dsw: Make AV project depend on ACE_QoS project.
        * orbsvcs/orbsvcs/AV.dsp: Add ACE_QoS library to link line.

Tue Mar  5 13:52:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Asynch_Reply_Dispatcher_Base.h:
        * tao/Service_Callbacks.h:
        * tao/TAO_Server_Request.h:
        * tao/Adapter.h:
        * tao/Resource_Factory.h:
          Fixed small typing errors in comment

Tue Mar  5 00:07:13 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tests/LongUpcalls/Makefile:
          Added links to TAO_Messaging library.

Mon Mar  4 15:35:08 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingC.h:
        * tao/Messaging/MessagingC.i:
        * tao/Messaging/MessagingS.cpp:
        * tao/Messaging/MessagingS.h:
        * tao/Messaging/MessagingS_T.h:
        * tao/Messaging/MessagingS_T.i:
          Made changes to have the code compile when the TAO_HAS_AMI
          option is 0.

Mon Mar  4 14:43:11 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Makefile.RTCORBAEvent:
          Update dependencies

Mon Mar 04 17:29:25 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
        * orbsvcs/performance-tests/RTEvent/lib/TAO_RTEC_Perf.dsp:
        * orbsvcs/performance-tests/RTEvent/lib/EC_Destroyer.h:
        * orbsvcs/performance-tests/RTEvent/lib/EC_Destroyer.inl:
        * orbsvcs/performance-tests/RTEvent/lib/EC_Destroyer.cpp:
          Factor out code to destroy the EC into an exception safe class.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/client.cpp:
          Use new EC_Destroyer class.

Mon Mar  4 13:38:11 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tests/Hello/Makefile:
        * tests/LongUpcalls/Makefile:
        * tests/Two_Objects/Makefile:
          Removed the links to TAO_Messaging library.

Mon Mar  4 11:49:27 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/orbsvcs/Makefile.CosNaming:
        * orbsvcs/orbsvcs/Makefile.PortableGroup:
        * orbsvcs/orbsvcs/Makefile.Security:
          Removed links to TAO_Messaging library.

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
          Removed #include tao/Messaging/Messaging_Policy_i.h
          as that is not used anywhere in the code.

Mon Mar  4 12:24:52 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao.Any.h:
        * tao/Any.i:

          Removed Any_out's assignment operator from const Any *. The C++
          mapping for Any_out is supposed to be the same as for any T_out
          class, which contains no such assignment operator. Thanks to
          Don Hinton <dhinton@ieee.org> for pointing this out.

Mon Mar  4 11:47:17 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.h:

          Changed a label at the middle of the class declaration from
          'public' to 'private'. This got rid of link errors caused
          by a copy constructor and assignment operator declared below
          which were not defined, and doesn't seem to cause any other errors
          in the Trading Service build.

        * orbsvcs/orbsvcs/CosEvent.dsp:
        * TAOACE.dsw:

          Added link to the new Messaging library, and added the dependency
          to the workspace.

Mon Mar  4 12:11:05 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.cpp:
          Fixed merge problems.

        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
          Add missing RTServer_Setup to the library.
          Updated dependencies.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Makefile:
          Updated dependencies.

Mon Mar 04 11:35:34 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Federated_Roundtrip.dsw:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/client.dsp:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/server.dsp:
          Add project files and workspaces for the Federated_Roundtrip test.

        * orbsvcs/performance-tests/RTEvent/RTEvent.dsw:
          Add big workspace to simplify compilation.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.dsp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/server.dsp:

        * orbsvcs/performance-tests/RTEvent/lib/Client_Pair.h:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Pair.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Pair.cpp:
          Add new class to factor out the code required to setup a
          Supplier/Consumer pair (without the loopback).

        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Pair.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Pair.cpp:
          Add support to activate the loopack on a creator-supplied POA.

        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.h:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.cpp:
          Use the Client_Pair class to implement this one.

        * orbsvcs/performance-tests/RTEvent/lib/Consumer.h:
        * orbsvcs/performance-tests/RTEvent/lib/Consumer.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Supplier.h:
        * orbsvcs/performance-tests/RTEvent/lib/Supplier.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Consumer.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Consumer.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Supplier.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Supplier.cpp:
          Add support to activate the object on a creator-supplier POA.

        * orbsvcs/performance-tests/RTEvent/lib/Low_Priority_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/Low_Priority_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Low_Priority_Setup.cpp:
          New helper class to initialize the low priority consumers often
          found in the EC tests.  It creates the supplier/consumer pairs,
          connects them to the EC (and automatically disconnects them),
          activate a thread for each supplier, and if needed it can
          collect statistics about all of them.

        * orbsvcs/performance-tests/RTEvent/lib/PriorityBand_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/PriorityBand_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/PriorityBand_Setup.cpp:
          New class to setup the PriorityBand policy.

        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.cpp:
          New accessor to find the process priority.

        * orbsvcs/performance-tests/RTEvent/lib/ORB_Task.h:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Task.inl:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Task.cpp:
          Add smart-pointer operator-> to find the underlying ORB.

        * orbsvcs/performance-tests/RTEvent/lib/ORB_Task_Activator.h:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Task_Activator.inl:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Task_Activator.cpp:
          New helper class to automatically startup the ORB::run() method
          on a different thread, shutdown the ORB and wait until it
          completes the event loop.

        * orbsvcs/performance-tests/RTEvent/lib/RTPOA_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTPOA_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/RTPOA_Setup.cpp:
          New helper class to configure a POA with the correct Real-time
          properties.

        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/RTServer_Setup.cpp:
          Meta-configuration class, it is a single stop shopping class to
          configure the POA, the policies, RTCORBA, etc. etc.

        * orbsvcs/performance-tests/RTEvent/lib/Send_Task_Stopper.h:
        * orbsvcs/performance-tests/RTEvent/lib/Send_Task_Stopper.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Send_Task_Stopper.cpp:
          Add helper class to automatically startup a Send_Task, and then
          stop it and wait for it (in the destructor).

        * orbsvcs/performance-tests/RTEvent/lib/Send_Task.cpp:
          Improved code to handle the case where the number of iterations
          is 0, i.e. it must run forever.

        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.cpp:
          Fixed constructor with multiple defaults.

        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
        * orbsvcs/performance-tests/RTEvent/lib/TAO_RTEC_Perf.dsp:
          Add all new files to the project file and (hopefully!) to the
          Makefile too.

        * orbsvcs/performance-tests/RTEvent/lib/Task_Activator.h:
        * orbsvcs/performance-tests/RTEvent/lib/Task_Activator.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Task_Activator.cpp:
          Helper class to activate an ACE_Task in the constructor, and
          wait for it in the destructor.

        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/server.cpp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/server.cpp:
          Use all the new helper classes to re-write both tests.  The
          resulting code is shorter, more exception-safe/neutral and it
          actually runs on NT :-)

Mon Mar 04 11:30:06 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Makefile:
          Enable RTCORBAEvent by default.

        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.cpp:
          Fixed initialization

        * orbsvcs/orbsvcs/Event/EC_Event_Channel.h:
        * orbsvcs/orbsvcs/Event/EC_Event_Channel.i:
        * orbsvcs/orbsvcs/Event/EC_Event_Channel.cpp:
          Keep track of the event channel status (IDLE -> ACTIVE ->
          DESTROYED).  This is important for applications and tests that
          need to shutdown when the event channel has been destroyed.

Mon Mar  4 09:14:36 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.inl: Fixed
          a fuzz error.

Mon Mar  4 08:32:37 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/performance-tests/RTEvent/lib/RIR_Narrow.cpp:
          Add ACE_TRY block to resolve().
        * orbsvcs/performance-tests/RTEvent/lib/RTEC_Initializer.cpp:
          Pass ACE_ENV_ARG_DECL_NOT_USED to create().
        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.cpp:
          Comment out unused parameter.

Mon Mar  4 08:10:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/DynamicInterface/Makefile.bor:
          Removed messaging cflags and added portableserver cflags

Sun Mar  3 18:18:08 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tao/Makefile:
        * tests/Makefile:
          Undo the changes on the Makefile that cause the conditional
          compile of the files depending on Messaging library.

Sun Mar  3 17:51:37 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tao/DynamicInterface/Makefile:
          updated the dependencies.

Sun Mar  3 17:48:19 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * tao/DynamicInterface/DII_Reply_Dispatcher.h:
          Remove include of "tao/Messaging/Asynch_Reply_Dispatcher.h"

        * tao/DynamicInterface/Request.h:
          Remove include of "tao/Messaging/MessagingC.h"

        * tao/DynamicInterface/Makefile:
        * tao/DynamicInterface/Makefile.bor:
          Remove TAO_Messaging library.

Sun Mar  3 17:35:32 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/performance-tests/EC_Federated_Scalability/Makefile:
          Add -lTAO_Messaging.

Sun Mar  3 16:09:14 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.h:
          Add ACE_ENV_ARG_DECL parameters to setup_lane().

        * orbsvcs/performance-tests/RTEvent/lib/Send_Task.cpp:
          Add ACE exception handling macros in svc() method.

        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.cpp:
          Change ACE_ENV_ARG_PARAMETER to
          ACE_SINGLE_ENV_ARG_PARAMETER  in call to policy_list->destroy().

Sun Mar  3 10:20:23 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/performance-tests/RTEvent/lib/RIR_Narrow.cpp:
          Add ACE_TYPENAME to RIR_Narrow<Interface>::resolve()
          to eliminate gcc 3.1 warning:
          "typename RIR_Narrow<Interface>::Interface_ptr'
          is implicitly a typename"

Sun Mar  3 10:19:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/Content_Server/SMI_Iterator/client.bor:
        * examples/Content_Server/SMI_Iterator/server.bor:
          Added TAO_Messaging library

        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/*.bor:
          Created BCB makefiles for this test

        * orbsvcs/tests/AVStreams/Makefile.bor:
          Added the Simple_Two_Stage_With_QoS directory

Sat Mar  2 17:08:47 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * docs/releasenotes/amh.html:
          'Converted' the Word generated HTML document to 'plain'
          HTML.  Also added links to the two AMH papers.

Sat Mar  2 16:27:16 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * orbsvcs/CosEvent_Service/Makefile:
        * orbsvcs/Event_Service/Makefile:
        * orbsvcs/examples/CosEC/Factory/Makefile:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Basic/Makefile:
        * orbsvcs/examples/CosEC/Simple/Makefile:
        * orbsvcs/examples/RtEC/MCast/Makefile:
        * orbsvcs/examples/RtEC/Schedule/Makefile:
        * orbsvcs/examples/RtEC/Simple/Makefile:
        * orbsvcs/tests/EC_Mcast/Makefile:
        * orbsvcs/tests/EC_Throughput/Makefile:
          Made changes to include the Messaging library.

Sat Mar  2 14:53:44 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/performance-tests/EC_Scalability/Makefile:
        * orbsvcs/tests/CosEvent/Basic/Makefile:
        * orbsvcs/tests/Event/Basic/Makefile:
        * orbsvcs/examples/CosEC/RtEC_Based/bin/Makefile:

          Add -lTAO_Messaging

Sat Mar  2 20:37:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/performance-tests/Throughput/Makefile.bor:
          Added TAO_Messaging library

Sat Mar  2 14:32:32 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/performance-tests/RTEvent/lib/ORB_Holder.h (ORB_Holder) :
          Change ACE_ENV_ARG_DECL to ACE_ENV_ARG_DECL_WITH_DEFAULTS.

        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.cpp (RTCORBA_Setup::RTCORBA_Setup):

          Change ACE_ENV_ARG_DECL to ACE_ENV_ARG_PARAMETER.

        * orbsvcs/performance-tests/RTEvent/lib/Send_Task.cpp (Send_Task::svc):

          Add  ACE_DECLARE_NEW_CORBA_ENV.

        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.h (SyncScope_Setup):
          Change ACE_ENV_ARG_DECL to ACE_ENV_ARG_DECL_WITH_DEFAULTS.

Sat Mar  2 19:26:34 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * performance-tests/Latency/AMH/Single_Threaded/client.bor:
        * performance-tests/Latency/AMH/Single_Threaded/server.bor:
          Added TAO_Messaging library

Sat Mar  2 09:30:35 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Stub.cpp (sync_scope): Do not check for policies at other
          levels if the policy has been cached in the stubs. This helps
          to fix a problem, which prevented applications to set policies
          at the object level.

Sat Mar  2 13:30:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/Buffered_Oneways/Buffered_Oneways_client.bor:
        * examples/Buffered_Oneways/Buffered_Oneways_server.bor:
        * performance-tests/Callback/client.bor:
        * performance-tests/Callback/server.bor:
        * performance-tests/Latency/AMI/client.bor:
        * performance-tests/Latency/AMI/server.bor:
        * performance-tests/RTCorba/Oneways/Reliable/client.bor:
        * performance-tests/RTCorba/Oneways/Reliable/server.bor:
        * orbsvcs/tests/Event/Performance/Connect.bor:
        * orbsvcs/tests/Event/Performance/Inversion.bor:
        * orbsvcs/tests/Event/Performance/Latency.bor:
        * orbsvcs/tests/Event/Performance/Latency_Server.bor:
        * orbsvcs/tests/Event/Performance/Throughput.bor:
          Added TAO_Messaging library

Fri Mar  1 17:42:54 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tao/Makefile:
          Made changes to get Messaging library compiled always.

Fri Mar  1 18:56:21 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/lib/Auto_Disconnect.h:
        * orbsvcs/performance-tests/RTEvent/lib/Auto_Disconnect.cpp:
          Add methods to reset the contained pointer, useful when
          declaring arrays of Auto_Disconnect objects.

        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Pair.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Pair.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Pair.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.h:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.cpp:
          Factor out code to create a Loopback_Consumer/Loopback_Supplier
          pair.

        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/SyncScope_Setup.cpp:
          New helper class to set the SyncScope policy.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/server.cpp:
          Take advantage of the new classes to implement the client and
          server.

        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/server.cpp:
          Start new test to measure the roundtrip delay (and scalability)
          of the federated architecture.

Fri Mar  1 15:17:27 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tao/Messaging/Messaging.cpp:
        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingC.h:
        * tao/Messaging/MessagingC.i:
        * tao/Messaging/MessagingS.cpp:
        * tao/Messaging/Messaging_PolicyFactory.cpp
          Made changes to fix the compiler errors for MINIMUM_CORBA
          and CORBA_MESSAGING.

Fri Mar  1 11:59:30 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tao/Messaging/MessagingC.cpp:
          Fixed the compiler warnings.

Fri Mar  1 11:12:30 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/Callback/Makefile (TAO_IDLFLAGS):

          Removed the "-GC" flag.  This test does not require AMI
          callbacks.  Fixes link-time errors.  Thanks to Priyanka for
          reminding me that I needed a ChangeLog entry.  :-)

Fri Mar  1 10:41:58 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Generator_Parser.cpp:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_Lite.cpp:
        * tao/Tagged_Profile.cpp: Made some cosmetic fixes. Further, made
          sure that return values in case of errors are consistent, for the
          sake of uniformity. Thanks to Don Hinton for pointing this out.

Fri Mar  1 07:56:43 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/Makefile:
          Add new RTEvent directory to the Makefile.

        * orbsvcs/performance-tests/EC_Colocated_Latency/Makefile:
        * orbsvcs/performance-tests/EC_Colocated_Latency/run_dispatching.sh:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Consumer.cpp:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Consumer.h:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Send_Task.cpp:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Send_Task.h:
        * orbsvcs/performance-tests/EC_Colocated_Latency/driver.cpp:
        * orbsvcs/performance-tests/EC_Colocated_Latency/ec.dispatching_reactive.conf:
        * orbsvcs/performance-tests/EC_Colocated_Latency/ec.dispatching_rtcorba.conf:
        * orbsvcs/performance-tests/EC_Colocated_Latency/ec.dispatching_threaded.conf:
        * orbsvcs/performance-tests/EC_Colocated_Latency/ec.supplier_filter_null.conf:
        * orbsvcs/performance-tests/EC_Colocated_Latency/ec.supplier_filter_per_supplier.conf:
        * orbsvcs/performance-tests/EC_Colocated_Latency/run_supplier_filtering.sh:
          The Colocated Latency test was greatly expanded to search for
          priority inversions, however, it turns out that this is not a
          good configuration for that benchmark.
          A new series of tests, with better code re-use (among other
          coding practice improvements) is being developed under the
          RTEvent directory.  The current tests are saved for historical
          reasons, but will soon be removed.

Fri Mar  1 07:47:07 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
          Add TAO_Messaging to the list of libraries.
          Update dependencies.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/server.cpp:
          Include "RTPortableServer.h", otherwise the internal Service
          Configurator initialization may be incomplete on static builds.
          Initialize the event service default services.

Fri Mar 01 13:30:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/DynamicInterface/Makefile.bor:
        * orbsvcs/orbsvcs/RTEvent.bor:
        * orbsvcs/orbsvcs/CosEvent.bor:
        * tests/AMI/client.bor:
        * tests/AMI/server.bor:
        * tests/AMI/simple_server.bor:
        * tests/AMI_Buffering/admin.bor:
        * tests/AMI_Buffering/client.bor:
        * tests/AMI_Buffering/server.bor:
        * tests/AMI_Timeouts/client.bor:
        * tests/AMI_Timeouts/server.bor:
        * tests/Big_Request_Muxing/client.bor:
        * tests/Big_Request_Muxing/server.bor:
        * tests/Blocking_Sync_None/client.bor:
        * tests/Blocking_Sync_None/server.bor:
        * tests/Crashed_Callback/client.bor:
        * tests/Crashed_Callback/server.bor:
        * tests/LongUpcalls/ami_client.bor:
        * tests/LongUpcalls/ami_server.bor:
        * tests/LongUpcalls/blocking_client.bor:
        * tests/LongUpcalls/blocking_server.bor:
        * tests/MT_Timeout/client.bor:
        * tests/MT_Timeout/server.bor:
        * tests/Oneway_Buffering/admin.bor:
        * tests/Oneway_Buffering/client.bor:
        * tests/Oneway_Buffering/server.bor:
        * tests/Policies/Makefile.bor:
        * tests/Reliable_Oneways/client.bor:
        * tests/Reliable_Oneways/server.bor:
        * tests/Timed_Buffered_Oneways/client.bor:
        * tests/Timed_Buffered_Oneways/server.bor:
        * tests/Timeout/client.bor:
        * tests/Timeout/server.bor:
        * examples/Buffered_AMI/client.bor
        * examples/Buffered_AMI/server.bor
          Added TAO_Messaging library

Thu Feb 28 20:25:00 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tests/Makefile (DIRS):

          Conditionally compile tests that require the TAO_Messaging
          library on the "corba_messaging" make variable.  Fixes compile
          and link-time errors in builds that disable CORBA Messaging.

Thu Feb 28 19:59:45 2002  Jaiganesh Balasubramanian  <jai@doc.ece.uci.edu>

        * tao/Makefile:

          Only compile Messaging and DynamicInterface directories if
          "corba_messaging" make variable is set to 1.

        * tao/Messaging/Messaging.cpp:
        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingC.h:
        * tao/Messaging/MessagingS.h:
        * tao/Messaging/Messaging_ORBInitializer.cpp:
        * tao/Messaging/Messaging_ORBInitializer.h:
        * tao/Messaging/Messaging_PolicyFactory.cpp:
        * tao/Messaging/Messaging_PolicyFactory.h:

          No need to protect these sources with "TAO_HAS_CORBA_MESSAGING"
          preprocessor blocks since the CORBA Messaging code is now in a
          separate library.

        * tao/Strategies/DIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:

          Removed vestigial include of `Messaging_Policy_i.h'.  Fixes
          compile-time errors.

        * tao/Strategies/Makefile:

            Updated dependencies.

Thu Feb 28 13:15:39 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

        * tests/DLL_ORB/Makefile.Test_Client_Module:
        * tests/DLL_ORB/Makefile.Test_Server_Module:
          updated the Makefile dependencies.

Thu Feb 28 11:55:39 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

        * orbsvcs/examples/CosEC/Factory/Makefile:
        * orbsvcs/examples/Security/Send_File/Makefile:
        * tests/IDL_Test/Makefile:
        * tests/DLL_ORB/Makefile:
        * orbsvcs/tests/Security/Big_Request/Makefile:
        * orbsvcs/tests/Security/Callback/Makefile:
        * orbsvcs/tests/Security/Secure_Invocation/Makefile:
        * orbsvcs/tests/Security/SecurityLevel1/Makefile:
          updated the Makefile dependencies.

Thu Feb 28 15:12:35 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/lib/TAO_RTEC_Perf.dsp:
        * orbsvcs/performance-tests/RTEvent/lib/TAO_RTEC_Perf.dsw:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/Roundtrip.dsw:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.dsp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/server.dsp:
          Add MSVC project files and workspaces.

        * TAOACE.dsw:
        * TAOACE_Static.dsw:
        * orbsvcs/orbsvcs/orbsvcs.dsw:
        * orbsvcs/orbsvcs/orbsvcs_static.dsw:
        * orbsvcs/orbsvcs/RTCORBAEvent.dsp:
        * orbsvcs/orbsvcs/RTCORBAEvent_Static.dsp:
          Add new project files for the RTCORBAEvent library, and insert
          the project in the corresponding workspaces.

        * orbsvcs/orbsvcs/Event/EC_Event_Channel.h:
        * orbsvcs/orbsvcs/Event/EC_Event_Channel.i:
        * orbsvcs/orbsvcs/Event/EC_Event_Channel.cpp:
          Add PortableServer::RefCountServantBase mixin.
          Add new method to check if an event channel is getting
          destroyed.

        * orbsvcs/orbsvcs/Event/rtcorba_event_export.h:
        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.h:
        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.h:
          Fixed export macros.

        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.cpp:
          Fixed misuse of return statement in void functions.

        * tao/Messaging/MessagingC.h:
          The code did not link on NT because a couple of CDR operators
          are declared, but not defined nor used. I removed offending code
          until Jaiganesh can introduce a complete fix.

        * orbsvcs/orbsvcs/RTEvent.dsp:
          The RTEvent library needs the TAO_Messaging library to work
          correctly.

        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
          Fixed #include for Messaging.h
          Fixed problems with explicit auto_ptr<> constructors.
          Create special thread for ORB::run()

        * orbsvcs/performance-tests/RTEvent/Roundtrip/server.cpp:
          Fixed #include for Messaging.h
          Fixed problems with explicit auto_ptr<> constructors.
          Stop the event loop if the event channel is destroyed.

        * orbsvcs/performance-tests/RTEvent/lib/rtec_perf_export.h:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.h:
        * orbsvcs/performance-tests/RTEvent/lib/Consumer.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Consumer.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Supplier.h:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Holder.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTEC_Initializer.h:
        * orbsvcs/performance-tests/RTEvent/lib/RT_Class.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/Send_Task.h:
        * orbsvcs/performance-tests/RTEvent/lib/Supplier.h:
          Create export macro file for the benchmark library.
          Add export macros to all the classes.

        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Task.h:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Task.cpp:
          Add new files to the Makefile too!

        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.cpp:
          Fixed event types in the loopback supplier.

        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.cpp:
          Fixed problems with explicit auto_ptr<> constructors.
          I used ACE_THROW_RETURN() where an ACE_THROW() was needed.

        * orbsvcs/performance-tests/RTEvent/lib/RTEC_Initializer.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Send_Task.cpp:
          Fixed problems with explicit auto_ptr<> constructors.

Thu Feb 28 13:51:30 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_interface.cpp:

          Fixed a typo on a previous fix I checked in for QNX. Thanks to
          Sean I. Luzader <sean.i.luzader@lmco.com> for catching it.

Thu Feb 28 11:50:39 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

        * orbsvcs/orbsvcs/Makefile.Security:
          updated the Makefile dependencies.

Thu Feb 28 11:40:19 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

        * tests/AMI_Buffering/Makefile:
          updated the Makefile dependencies.

Thu Feb 28 11:38:51 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/orbsvcs/Makefile.SSLIOP:
          Updated the dependencies.

Thu Feb 28 07:44:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Messaging/Makefile.bor:
          Added missing files that I forgot to add when creating this makefile.
          Thanks to Jaiganesh for noticing this.

Wed Feb 27 20:20:19 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
          Changed the include to point to the Messaging directory.

Wed Feb 27 20:24:12 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/RT_Class.inl: Fixed fuzz
          errors.


Wed Feb 27 15:20:19 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

        * tao/Messaging/Messaging.cpp:
          Added code to check for exceptions.

        * orbsvcs/orbsvcs/Makefile.Security:
          Added code to link to the new Messaging library.

Wed Feb 27 14:30:21 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

        * tests/Two_Objects/Makefile:
        * tao/Makefile:
          Added links to the new Messaging library.

Wed Feb 27 10:50:45 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Makefile.RTCORBAEvent:
          Update depdendencies

        * orbsvcs/orbsvcs/Event/EC_Event_Channel.h:
          Derive the event channel from the
          PortableServer::RefCountServantBase mixin, it makes lifecycle
          management much easier.

        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.cpp:
          Fixed thread activation properties.

Wed Feb 27 03:59:35 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAOACE.dsw:
        * TAOACE_Static.dsw:
        * tao/TAO.dsw:
        * tao/Messaging/TAO_Messaging.dsp:
        * tao/Messaging/TAO_Messaging_Static.dsp:
          Add new project files for the TAO_Messaging library.
          Add the projects to the workspaces and fixed dependencies.

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * tao/PortableServer/TAO_PortableServer.dsp:
        * tao/PortableServer/TAO_PortableServer_Static.dsp:
          Remove files that are now on the TAO_Messaging library, add new
          files.

        * tao/Messaging/Messaging.h:
          Fixed TAO_Export macros.

Wed Feb 27 10:39:12 2002  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Messaging/Asynch_Timeout_Handler.h:
          Replaced the old TAO_Export macro with the TAO_Messaging_Export
          macro

Wed Feb 27 01:33:44 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/RTEvent/Makefile:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/server.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Makefile:
        * orbsvcs/performance-tests/RTEvent/lib/Auto_Disconnect.h:
        * orbsvcs/performance-tests/RTEvent/lib/Auto_Disconnect.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Auto_Disconnect.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.h:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Client_Group.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Consumer.h:
        * orbsvcs/performance-tests/RTEvent/lib/Consumer.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Consumer.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Consumer.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Supplier.h:
        * orbsvcs/performance-tests/RTEvent/lib/Loopback_Supplier.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Holder.h:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Holder.inl:
        * orbsvcs/performance-tests/RTEvent/lib/ORB_Holder.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RIR_Narrow.h:
        * orbsvcs/performance-tests/RTEvent/lib/RIR_Narrow.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.inl:
        * orbsvcs/performance-tests/RTEvent/lib/RTCORBA_Setup.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RTEC_Initializer.h:
        * orbsvcs/performance-tests/RTEvent/lib/RTEC_Initializer.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/RT_Class.h:
        * orbsvcs/performance-tests/RTEvent/lib/RT_Class.inl:
        * orbsvcs/performance-tests/RTEvent/lib/RT_Class.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Send_Task.h:
        * orbsvcs/performance-tests/RTEvent/lib/Send_Task.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Servant_var.h:
        * orbsvcs/performance-tests/RTEvent/lib/Servant_var.inl:
        * orbsvcs/performance-tests/RTEvent/lib/Servant_var.cpp:
        * orbsvcs/performance-tests/RTEvent/lib/Supplier.h:
        * orbsvcs/performance-tests/RTEvent/lib/Supplier.cpp:
          Add new test library to capture shared code, start new Roundtrip
          delay test.

Wed Feb 27 09:32:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Messaging/Makefile.bor:
          Added new BCB makefile for this library

        * tao/Messaging/TAO_Messaging.rc:
          Added resource file for this library

        * tao/Messaging/Asynch_Reply_Dispatcher.cpp:
          Fixed compile error when __ACE_INLINE__ is not defined

        * tao/Makefile.bor:
          Added new Messaging directory and removed all files that where
          moved to the new subdirectory

Tue Feb 26 21:29:05 2002  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp (visit_interface):

          Corrected code that exhibited a warning with some compilers.
          Generate code that returns a value for local interfaces, too.

Mon Feb 26 18:10:24 2002 Jaiganesh Balasubramanian <jai@kelvar.ece.uci.edu>

        * tao/Asynch_Invocation.h:
        * tao/Asynch_Invocation.i:
        * tao/Asynch_Invocation.cpp:
          Moved the TAO_GIOP_Twoway_Asynch_Invocation to its own file in
          the Messaging directory.

        * tao/Asynch_Reply_Dispatcher.cpp:
        * tao/Asynch_Reply_Dispatcher.h:
        * tao/Asynch_Reply_Dispatcher.i:
          Moved the TAO_Asynch_Reply_Dispatcher class to this file in the
          Messaging directory.

        * tao/Asynch_Reply_Dispatcher_Base.cpp:
        * tao/Asynch_Reply_Dispatcher_Base.h:
        * tao/Asynch_Reply_Dispatcher_Base.i:
          Moved the TAO_Asynch_Reply_Dispatcher class to its own file in the
          Messaging directory and the class TAO_Asynch_Reply_Dispatcher_Base
          remained in this file.

        * tao/Asynch_Timeout_Handler.cpp:
        * tao/Asynch_Timeout_Handler.h:
          Moved the class TAO_Asynch_Timeout_Handler to its own file in the
          Messaging directory.

        * tao/Connection_Handler.cpp:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/Invocation.cpp:
        * tao/Policy_Manager.cpp:
        * tao/Stub.cpp:
          There is no need to #include tao/Messaging_Policy_i.h, the classes
          in that file are not used at all, probably old code left
          around.

        * tao/Makefile:
        * tao/Makefile.am:
          Removed all links to the Messaging files in the Makefile.
          Links are made to the new Messading directory.

        * tao/Messaging.cpp:
        * tao/Messaging.h:
        * tao/Messaging.pidl:
        * tao/MessagingC.cpp:
        * tao/MessagingC.h:
        * tao/MessagingC.i:
        * tao/Messaging_ORBInitializer.cpp:
        * tao/Messaging_ORBInitializer.h:
        * tao/Messaging_PolicyFactory.cpp:
        * tao/Messaging_PolicyFactory.h:
        * tao/Messaging_PolicyValue.pidl:
        * tao/Messaging_PolicyValueC.cpp:
        * tao/Messaging_PolicyValueC.h:
        * tao/Messaging_PolicyValueC.i:
        * tao/Messaging_Policy_i.cpp:
        * tao/Messaging_Policy_i.h:
        * tao/Messaging_Policy_i.i:
          Moved all the Messaging classes in the Messaging NAMESPACE except
          the variables SyncScope and SynScope_out to the new Messaging
          directory. The variables SyncScope and SyncScope_out are needed
          by the ORB. So they are moved to a new file
          Messaging_SyncScopeC.h in the tao directory.

        * tao/Messaging_SyncScope.pidl:
        * tao/Messaging_SyncScopeC.cpp:
        * tao/Messaging_SyncScopeC.h:
        * tao/Messaging_SyncScopeC.i:
          The variables SyncScope and SyncScope_out in the Messaging
          NAMESPACE are needed by the ORB. So they are not moved to the new
          Messaging directory and are moved to these new files in the
          tao directory.

        * tao/ORB.cpp:
          Moved the ORB_Initializer for the Messaging class to the
          Messaging directory.

        * tao/PortableInterceptor.pidl:
          Removed the #include "Messaging.pidl and added the
          #include "Messaging_SyncScope.idl". THe new idl file is used
          to create the idl stubs for just the SyncScope and the SyncScope_out
          variables in the Messaging class.

        * tao/PortableInterceptorC.h:
        * tao/Profile.cpp:
          Added #include Messaging_SyncScopeC.h and removed
          #include MessagingC.h to include only those variables in the
          Messaging namespace that are not in the new Messaging directory.

        * tao/DynamicInterface/Makefile:
        * tao/BiDir_GIOP/Makefile:
        * tao/Domain/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/IFR_Client/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
          Make changes in the Makefile to link the new TAO_Messaging library.

        * tao/DynamicInterface/DII_Reply_Dispatcher.h:
        * tao/DynamicInterface/Request.h:
          Change all #includes to point to the new Messaging directory.
          For example, change #include MessagingC.h to
          #include tao/Messaging/MessagingC.h.

        * tao/Messaging/Asynch_Reply_Dispatcher.cpp:
        * tao/Messaging/Asynch_Reply_Dispatcher.h:
        * tao/Messaging/Asynch_Reply_Dispatcher.i:
          Moved the TAO_Asynch_Reply_Dispatcher class to its own file
          in the Messaging directory.

        * tao/Messaging/Asynch_Timeout_Handler.cpp:
        * tao/Messaging/Asynch_Timeout_Handler.h:
          Moved the TAO_Asynch_Timeout_Handler to its own file in the
          Messaging directory.

        * tao/Messaging/Makefile:
          Added a new Makefile in the Messaging directory to create the
          new library TAO_messaging.

        * tao/Messaging/Messaging.cpp:
        * tao/Messaging/Messaging.h:
        * tao/Messaging/Messaging.pidl:
        * tao/Messaging/MessagingC.cpp:
        * tao/Messaging/MessagingC.h:
        * tao/Messaging/MessagingC.i:
        * tao/Messaging/MessagingS.cpp:
        * tao/Messaging/MessagingS.h:
        * tao/Messaging/MessagingS.i:
        * tao/Messaging/MessagingS_T.cpp:
        * tao/Messaging/MessagingS_T.h:
        * tao/Messaging/MessagingS_T.i:
        * tao/Messaging/Messaging_ORBInitializer.cpp:
        * tao/Messaging/Messaging_ORBInitializer.h:
        * tao/Messaging/Messaging_PolicyFactory.cpp:
        * tao/Messaging/Messaging_PolicyFactory.h:
        * tao/Messaging/Messaging_Policy_i.cpp:
        * tao/Messaging/Messaging_Policy_i.h:
        * tao/Messaging/Messaging_Policy_i.i:
          Moved all the Messaging classes in the Messaging NAMESPACE except
          the variables SyncScope and SynScope_out to the new Messaging
          directory. The variables SyncScope and SyncScope_out are needed
          by the ORB. So they are moved to a new file
          Messaging_SyncScopeC.h in the tao directory.

        * tao/Messaging/Twoway_Asynch_Invocation.cpp:
        * tao/Messaging/Twoway_Asynch_Invocation.h:
        * tao/Messaging/Twoway_Asynch_Invocation.i:
          Moved the TAO_GIOP_Twoway_Asynch_Invocation to its own file in
          the Messaging directory.

        * tao/Messaging/messaging_export.h:
          Created a new TAO_Messaging_Export type in the new Messaging
          library.

        * tao/Messaging/diffs/Messaging.diff:
          Added a new diffs directory for the new Messaging directory and
          generated new diff files for future use.

        * tao/PortableServer/Makefile:
        * tao/PortableServer/Makefile.bor:
          Changed the Makefile to remove links to the Messaging files.
          All the Messaging files in this directory are moved to their
          own files in the Messaging directory.

        * tao/PortableServer/MessagingS.cpp:
        * tao/PortableServer/MessagingS.h:
        * tao/PortableServer/MessagingS.i:
        * tao/PortableServer/MessagingS_T.cpp:
        * tao/PortableServer/MessagingS_T.h:
        * tao/PortableServer/MessagingS_T.i:
          Moved all the Messaging files in the PortableServer directory
          to their own files in the Messaging directory.

        * tao/RTCORBA/Makefile:
        * tao/RTPortableServer/Makefile:
        * tao/SmartProxies/Makefile:
        * tao/Strategies/Makefile:
        * tao/TypeCodeFactory/Makefile:
          Made changes to link to the messaging SyncScope files in the
          tao directory.

        * tao/Strategies/DIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * TAO_IDL/Makefile.BE:
        * TAO_IDL/Makefile.EXE:
        * TAO_IDL/Makefile.FE:
        * TAO_IDL/be/be_codegen.cpp:
        * docs/tutorials/Quoter/AMI/Makefile:
        * docs/tutorials/Quoter/Event_Service/Makefile:
        * docs/tutorials/Quoter/Naming_Service/Makefile:
        * docs/tutorials/Quoter/On_Demand_Activation/Makefile:
        * docs/tutorials/Quoter/RT_Event_Service/Makefile:
        * docs/tutorials/Quoter/Simple/Client/Makefile:
        * docs/tutorials/Quoter/Simple/Impl-Repo/Makefile:
        * docs/tutorials/Quoter/Simple/ImprovedServer/Makefile:
        * docs/tutorials/Quoter/Simple/Persistent/Makefile:
        * docs/tutorials/Quoter/Simple/Server/Makefile:
        * docs/tutorials/Quoter/idl/Makefile:
        * examples/AMI/FL_Callback/Makefile:
        * examples/Buffered_AMI/Makefile:
        * examples/Buffered_AMI/client.cpp:
        * examples/Buffered_Oneways/Makefile:
        * examples/Buffered_Oneways/client.cpp:
        * examples/Callback_Quoter/Makefile:
        * examples/Content_Server/AMI_Iterator/Makefile:
        * examples/Content_Server/AMI_Observer/Makefile:
        * examples/Content_Server/SMI_Iterator/Makefile:
        * examples/Event_Comm/Makefile:
        * examples/Load_Balancing/Makefile:
        * examples/Load_Balancing_persistent/Makefile:
        * examples/Logging/Makefile:
        * examples/OBV/Typed_Events/Makefile:
        * examples/POA/Adapter_Activator/Makefile:
        * examples/POA/DSI/Makefile:
        * examples/POA/Default_Servant/Makefile:
        * examples/POA/Explicit_Activation/Makefile:
        * examples/POA/FindPOA/Makefile:
        * examples/POA/Forwarding/Makefile:
        * examples/POA/Generic_Servant/Makefile:
        * examples/POA/Loader/Makefile:
        * examples/POA/NewPOA/Makefile:
        * examples/POA/On_Demand_Activation/Makefile:
        * examples/POA/On_Demand_Loading/Makefile:
        * examples/POA/Reference_Counted_Servant/Makefile:
        * examples/POA/RootPOA/Makefile:
        * examples/POA/TIE/Makefile:
        * examples/Persistent_Grid/Makefile:
        * examples/PluggableUDP/tests/Basic/Makefile:
        * examples/PluggableUDP/tests/Performance/Makefile:
        * examples/PluggableUDP/tests/SimplePerformance/Makefile:
        * examples/Quoter/Makefile:
        * examples/RTCORBA/Activity/Makefile:
        * examples/Simple/bank/Makefile:
        * examples/Simple/chat/Makefile:
        * examples/Simple/echo/Makefile:
        * examples/Simple/grid/Makefile:
        * examples/Simple/time/Makefile:
        * examples/Simple/time-date/Makefile:
        * examples/Simulator/Event_Supplier/Makefile:
        * examples/TypeCode_Creation/Makefile:
        * orbsvcs/Concurrency_Service/Makefile:
        * orbsvcs/CosEvent_Service/Makefile:
        * orbsvcs/Dump_Schedule/Makefile:
        * orbsvcs/Event_Service/Makefile:
        * orbsvcs/IFR_Service/Makefile.BE:
        * orbsvcs/IFR_Service/Makefile.EX:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/ImplRepo_Service/Makefile:
        * orbsvcs/LifeCycle_Service/Makefile:
        * orbsvcs/LoadBalancer/Makefile:
        * orbsvcs/Logging_Service/Makefile:
        * orbsvcs/Naming_Service/Makefile:
        * orbsvcs/Notify_Service/Makefile:
        * orbsvcs/Scheduling_Service/Makefile:
        * orbsvcs/TAO_Service/Makefile:
        * orbsvcs/Time_Service/Makefile:
        * orbsvcs/Trading_Service/Makefile:
        * orbsvcs/examples/CosEC/Factory/Makefile:
        * orbsvcs/examples/CosEC/RtEC_Based/bin/Makefile:
        * orbsvcs/examples/CosEC/RtEC_Based/lib/Makefile:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Basic/Makefile:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Makefile:
        * orbsvcs/examples/CosEC/Simple/Makefile:
        * orbsvcs/examples/Log/Client/Makefile:
        * orbsvcs/examples/Log/test/Makefile:
        * orbsvcs/examples/Notify/Filter/Makefile:
        * orbsvcs/examples/Notify/Subscribe/Makefile:
        * orbsvcs/examples/RtEC/MCast/Makefile:
        * orbsvcs/examples/RtEC/Schedule/Makefile:
        * orbsvcs/examples/RtEC/Simple/Makefile:
        * orbsvcs/examples/Security/Send_File/Makefile:
        * orbsvcs/orbsvcs/Makefile.CosConcurrency:
        * orbsvcs/orbsvcs/Makefile.CosEvent:
        * orbsvcs/orbsvcs/Makefile.CosLifeCycle:
        * orbsvcs/orbsvcs/Makefile.CosNaming:
        * orbsvcs/orbsvcs/Makefile.CosNotification:
        * orbsvcs/orbsvcs/Makefile.CosProperty:
        * orbsvcs/orbsvcs/Makefile.CosTime:
        * orbsvcs/orbsvcs/Makefile.CosTrading:
        * orbsvcs/orbsvcs/Makefile.DsLogAdmin:
        * orbsvcs/orbsvcs/Makefile.ETCL:
        * orbsvcs/orbsvcs/Makefile.FTORB:
        * orbsvcs/orbsvcs/Makefile.FaultTolerance:
        * orbsvcs/orbsvcs/Makefile.LoadBalancing:
        * orbsvcs/orbsvcs/Makefile.PortableGroup:
        * orbsvcs/orbsvcs/Makefile.RTEvent:
        * orbsvcs/orbsvcs/Makefile.RTOLDEvent:
        * orbsvcs/orbsvcs/Makefile.RTSched:
        * orbsvcs/orbsvcs/Makefile.RTSchedEvent:
        * orbsvcs/orbsvcs/Makefile.SSLIOP:
        * orbsvcs/orbsvcs/Makefile.Svc_Utils:
        * orbsvcs/orbsvcs/Makefile.av:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/Sched/DynSched.cpp:
        * orbsvcs/performance-tests/EC_Federated_Latency/Makefile:
        * orbsvcs/performance-tests/EC_Federated_Latency/client.cpp:
        * orbsvcs/performance-tests/EC_Federated_Latency/server.cpp:
        * orbsvcs/performance-tests/EC_Federated_Scalability/Makefile:
        * orbsvcs/performance-tests/EC_Federated_Scalability/client.cpp:
        * orbsvcs/performance-tests/EC_Federated_Scalability/server.cpp:
        * orbsvcs/performance-tests/EC_Latency/Makefile:
        * orbsvcs/performance-tests/EC_Latency/client.cpp:
        * orbsvcs/performance-tests/EC_Latency/server.cpp:
        * orbsvcs/performance-tests/EC_Scalability/Makefile:
        * orbsvcs/performance-tests/EC_Scalability/client.cpp:
        * orbsvcs/performance-tests/EC_Scalability/server.cpp:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile:
        * orbsvcs/tests/AVStreams/Component_Switching/Makefile:
        * orbsvcs/tests/AVStreams/Full_Profile/Makefile:
        * orbsvcs/tests/AVStreams/Latency/Makefile:
        * orbsvcs/tests/AVStreams/Multicast/Makefile:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/Makefile:
        * orbsvcs/tests/AVStreams/Pluggable/Makefile:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/Makefile:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/Makefile:
        * orbsvcs/tests/Concurrency/Makefile:
        * orbsvcs/tests/CosEvent/Basic/Makefile:
        * orbsvcs/tests/CosEvent/lib/Makefile:
        * orbsvcs/tests/EC_Custom_Marshal/Makefile:
        * orbsvcs/tests/EC_Mcast/Makefile:
        * orbsvcs/tests/EC_Multiple/Makefile:
        * orbsvcs/tests/EC_Throughput/Makefile:
        * orbsvcs/tests/Event/Basic/Makefile:
        * orbsvcs/tests/Event/Performance/Latency.cpp:
        * orbsvcs/tests/Event/Performance/Latency_Server.cpp:
        * orbsvcs/tests/Event/Performance/Makefile:
        * orbsvcs/tests/Event/lib/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGR/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile:
        * orbsvcs/tests/ImplRepo/Makefile:
        * orbsvcs/tests/ImplRepo/NameService/Makefile:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Makefile:
        * orbsvcs/tests/Interoperable_Naming/Makefile:
        * orbsvcs/tests/LoadBalancing/Makefile:
        * orbsvcs/tests/Miop/McastHello/Makefile:
        * orbsvcs/tests/Notify/Basic/Makefile:
        * orbsvcs/tests/Notify/Blocking/Makefile:
        * orbsvcs/tests/Notify/Discarding/Makefile:
        * orbsvcs/tests/Notify/MT_Dispatching/Makefile:
        * orbsvcs/tests/Notify/Ordering/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/lib/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Filter/Makefile:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.cpp:
        * orbsvcs/tests/Property/Makefile:
        * orbsvcs/tests/Sched/Makefile:
        * orbsvcs/tests/Sched_Conf/Makefile:
        * orbsvcs/tests/Security/Big_Request/Makefile:
        * orbsvcs/tests/Security/Callback/Makefile:
        * orbsvcs/tests/Security/MT_SSLIOP/Makefile:
        * orbsvcs/tests/Security/Secure_Invocation/Makefile:
        * orbsvcs/tests/Security/SecurityLevel1/Makefile:
        * orbsvcs/tests/Simple_Naming/Makefile:
        * orbsvcs/tests/Time/Makefile:
        * orbsvcs/tests/Trading/Makefile:
        * orbsvcs/tests/ior_corbaname/Makefile::
        * orbsvcs/tests/tests_svc_loader/Makefile:
        * performance-tests/Callback/Makefile:
        * performance-tests/Callback/client.cpp:
        * performance-tests/Callback/server.cpp:
        * performance-tests/Cubit/DII_Cubit/Makefile:
        * performance-tests/Cubit/IDL_Cubit/Makefile:
        * performance-tests/Cubit/MT_Cubit/Makefile:
        * performance-tests/Latency/AMH/Single_Threaded/Makefile:
        * performance-tests/Latency/AMI/Makefile:
        * performance-tests/Latency/DII/Makefile:
        * performance-tests/Latency/DSI/Makefile:
        * performance-tests/Latency/Deferred/Makefile:
        * performance-tests/Latency/Single_Threaded/Makefile:
        * performance-tests/Latency/Thread_Per_Connection/Makefile:
        * performance-tests/Latency/Thread_Pool/Makefile:
        * performance-tests/POA/Create_Reference/Makefile:
        * performance-tests/POA/Demux/Makefile:
        * performance-tests/POA/Implicit_Activation/Makefile:
        * performance-tests/POA/Object_Creation_And_Registration/Makefile:
        * performance-tests/Pluggable/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Common/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/Makefile:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/Makefile:
        * performance-tests/RTCorba/Oneways/Reliable/Makefile:
        * performance-tests/RTCorba/Oneways/Reliable/client.cpp:
        * performance-tests/Throughput/Makefile:
        * tests/AMI/Makefile:
        * tests/AMI_Buffering/Makefile:
        * tests/AMI_Buffering/client.cpp:
        * tests/AMI_Timeouts/Makefile:
        * tests/AMI_Timeouts/timeout_client.cpp:
        * tests/BiDirectional/Makefile:
        * tests/BiDirectional_NestedUpcall/Makefile:
        * tests/Big_Oneways/Makefile:
        * tests/Big_Reply/Makefile:
        * tests/Big_Request_Muxing/Client_Task.h:
        * tests/Big_Request_Muxing/Makefile:
        * tests/Big_Request_Muxing/client.cpp:
        * tests/Big_Twoways/Makefile:
        * tests/Blocking_Sync_None/Makefile:
        * tests/Blocking_Sync_None/client.cpp:
        * tests/CDR/Makefile:
        * tests/Cache_Growth_Test/Makefile:
        * tests/Client_Leaks/Makefile:
        * tests/Codec/Makefile:
        * tests/Collocation/Makefile.impl:
        * tests/Collocation/Makefile.stub:
        * tests/Collocation/Makefile.test:
        * tests/Connection_Purging/Makefile:
        * tests/Crash_On_Write/Makefile:
        * tests/Crashed_Callback/Makefile:
        * tests/Crashed_Callback/client.cpp:
        * tests/Crashed_Callback/server.cpp:
        * tests/DLL_ORB/Makefile.Test_Client_Module:
        * tests/DLL_ORB/Makefile.Test_Server_Module:
        * tests/DSI_Gateway/Makefile:
        * tests/DynAny_Test/Makefile:
        * tests/Explicit_Event_Loop/Makefile:
        * tests/Exposed_Policies/Makefile:
        * tests/FL_Cube/Makefile:
        * tests/Faults/Makefile:
        * tests/File_IO/Makefile:
        * tests/Forwarding/Makefile:
        * tests/Hello/Makefile:
        * tests/IDL_Test/Makefile:
        * tests/IORManipulation/Makefile:
        * tests/InterOp-Naming/Makefile:
        * tests/Leader_Followers/Makefile:
        * tests/LongUpcalls/Makefile:
        * tests/MProfile/Makefile:
        * tests/MProfile_Forwarding/Makefile:
        * tests/MT_Client/Makefile:
        * tests/MT_Server/Makefile:
        * tests/MT_Timeout/Client_Task.cpp:
        * tests/MT_Timeout/Makefile:
        * tests/Multiple/Makefile:
        * tests/Multiple_Inheritance/Makefile:
        * tests/Muxing/Makefile:
        * tests/Native_Exceptions/Makefile:
        * tests/NestedUpcall/MT_Client_Test/Makefile:
        * tests/NestedUpcall/Simple/Makefile:
        * tests/NestedUpcall/Triangle_Test/Makefile:
        * tests/Nested_Event_Loop/Makefile:
        * tests/OBV/Any/Makefile:
        * tests/OBV/Factory/Makefile:
        * tests/OBV/Forward/Makefile:
        * tests/ORB_destroy/Makefile:
        * tests/ORB_init/Makefile:
        * tests/Object_Loader/Makefile:
        * tests/Objref_Sequence_Test/Makefile:
        * tests/OctetSeq/Makefile:
        * tests/Oneway_Buffering/Makefile:
        * tests/Oneway_Buffering/client.cpp:
        * tests/Oneways_Invoking_Twoways/Makefile:
        * tests/POA/Etherealization/Makefile:
        * tests/POA/Excessive_Object_Deactivations/Makefile:
        * tests/POA/Identity/Makefile:
        * tests/POA/Non_Servant_Upcalls/Makefile:
        * tests/POA/Object_Reactivation/Makefile:
        * tests/POA/POA_Destruction/Makefile:
        * tests/POA/Single_Threaded_POA/Makefile:
        * tests/POA/wait_for_completion/Makefile:
        * tests/Param_Test/Makefile:
        * tests/Policies/Makefile:
        * tests/Policies/Manipulation.cpp:
        * tests/Portable_Interceptors/Benchmark/Makefile:
        * tests/Portable_Interceptors/Dynamic/Makefile:
        * tests/Portable_Interceptors/ForwardRequest/Makefile:
        * tests/Portable_Interceptors/IORInterceptor/Makefile:
        * tests/Portable_Interceptors/PICurrent/Makefile:
        * tests/Portable_Interceptors/Request_Interceptor_Flow/Makefile:
        * tests/Portable_Interceptors/Service_Context_Manipulation/Makefile:
        * tests/QtTests/Makefile:
        * tests/Queued_Message_Test/Makefile:
        * tests/RTCORBA/Banded_Connections/Makefile:
        * tests/RTCORBA/Client_Propagated/Makefile:
        * tests/RTCORBA/Client_Protocol/Makefile:
        * tests/RTCORBA/Collocation/Makefile:
        * tests/RTCORBA/Destroy_Thread_Pool/Makefile:
        * tests/RTCORBA/Explicit_Binding/Makefile:
        * tests/RTCORBA/Linear_Priority/Makefile:
        * tests/RTCORBA/MT_Client_Protocol_Priority/Makefile:
        * tests/RTCORBA/ORB_init/Makefile:
        * tests/RTCORBA/Persistent_IOR/Makefile:
        * tests/RTCORBA/Policy_Combinations/Makefile:
        * tests/RTCORBA/Private_Connection/Makefile:
        * tests/RTCORBA/RTMutex/Makefile:
        * tests/RTCORBA/Server_Declared/Makefile:
        * tests/RTCORBA/Server_Protocol/Makefile:
        * tests/RTCORBA/Thread_Pool/Makefile:
        * tests/Reliable_Oneways/Makefile:
        * tests/Reliable_Oneways/client.cpp:
        * tests/Server_Leaks/Makefile:
        * tests/Single_Read/Makefile:
        * tests/Smart_Proxies/Makefile:
        * tests/Smart_Proxies/On_Demand/Makefile:
        * tests/Strategies/Makefile:
        * tests/Timed_Buffered_Oneways/Makefile:
        * tests/Timed_Buffered_Oneways/client.cpp:
        * tests/Timeout/Makefile:
        * tests/Timeout/client.cpp:
        * tests/Xt_Stopwatch/Makefile:
        * utils/IOR-parser/Makefile:
        * utils/catior/Makefile:
        * utils/nslist/Makefile:
          Change all #includes to point to the new Messaging directory.
          For example, change #include MessagingC.h to
          #include tao/Messaging/MessagingC.h.

        * tao/diffs/MessagingC.cpp.diff:
        * tao/diffs/MessagingC.h.diff:
        * tao/diffs/MessagingC.i.diff:
        * tao/diffs/MessagingS.cpp.diff:
        * tao/diffs/MessagingS.h.diff:
        * tao/diffs/MessagingS.i.diff:
        * tao/diffs/MessagingS_T.cpp.diff:
        * tao/diffs/MessagingS_T.h.diff:
        * tao/diffs/MessagingS_T.i.diff:
        * tao/diffs/Messaging_PolicyValue.diff:
        * tao/diffs/Messaging_SyncScope.diff:
          Added a new diffs directory for the new Messaging directory and
          generated new diff files for future use.

        * TAO_IDL/be/be_codegen.cpp:
          Modified the file to point to the new Messaging directory.

Mon Feb 25 19:25:27 2002 UTC  Don Hinton <dhinton@ieee.org>

        * tao/default_resource.cpp (allocate_reactor_impl):
        * tao/Strategies/advanced_resource.cpp (allocate_reactor_impl):
          Modified the ctors for the multi-threaded Select_Reactor
          and TP_Reactor to use the new ACE_Token::LIFO queueing strategy.

Fri Feb 22 19:07:36 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * tao/Any.cpp:
        * tao/CDR_Encaps_Codec.cpp:
          Need to allow up to 2*ACE_CDR::MAX_ALIGNMENT bytes of extra space in
          the message block to accommodate all rd_ptr() alignment adjustments.

        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
          Pass the message block's rd_ptr(), rather than base(), to the
          CORBA_TypeCode constructor. An earlier call to ACE_CDR::consolidate()
          may have already shifted the rd_ptr, so we cannot rely on the buffer
          returned by base() being correct.

Fri Feb 22 16:32:17 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
          Add template instantiations needed for
          ACE_Hash_Map_Manager <ACE_CString, structured_event_field,
          TAO_SYNCH_MUTEX>.

Thu Feb 21 15:46:52 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:

          Removed unnused
          ACE_Auto_Basic_Array_Ptr<TAO_SSLIOP_Connection_Handler*>
          template instantiation.

Thu Feb 21 15:37:37 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (ssliop_connect):

          If trust in neither the client nor the target is explicitly
          specified, then use the default setting found in the
          ACE_SSL_Context singleton.  Fixes a problem a where client side
          authentication was always disabled if not explicitly enabled via
          the SecurityLevel2::EstablishTrustPolicy.  Thanks to Tom
          Venturella at OCI for pointing out this problem.

Thu Feb 21 13:15:50 2002  Chris Cleeland  <cleeland_c@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp (init): Added new
        option, -SSLDHparams, to permit explicit specification of a
        Diffie-Hellman parameters file.

        Also, it will now try to load DH parameters from the certificate
        file if the -SSLDHparams options isn't used.

        This all fixes a problem where DSA certificates couldn't be used
        because no ephemeral DH keys could be exchanged since no
        parameters had been loaded.

Thu Feb 21 09:34:41 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

        * tao/ORB_Core.cpp (init): Added an (ACE_SignalHandler) cast to
          SIG_IGN to avoid problems with GCC 3.0.1 on IRIX 6.5.  Thanks to
           Dan Green <dan.c.green@lmco.com> for reporting this.

Wed Feb 20 11:20:00 2002  Daniel Troesser  <troesser_d@ociweb.com>

        * Fixing Bugzilla Bug 1139:

        * tests/RTCORBA/check_supported_priorities.cpp

          Changed to return a value of 2 when priorities are not supported.

        * tests/RTCORBA/Banded_Connections/run_test.pl
        * tests/RTCORBA/Client_Propagated/run_test.pl
        * tests/RTCORBA/Collocation/Collocation.cpp
        * tests/RTCORBA/Collocation/run_test.pl
        * tests/RTCORBA/Linear_Priority/run_test.pl
        * tests/RTCORBA/MT_Client_Protocol_Priority/run_test.pl
        * tests/RTCORBA/Policy_Combinations/run_test.pl
        * tests/RTCORBA/Server_Declared/run_test.pl
        * tests/RTCORBA/Thread_Pool/run_test.pl

          Changed run_test.pl scripts to exit gracefully, without error,
          if multiple priorities are not supported.

Tue Feb 19 17:57:37 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/CORBA_String.cpp:

          Fixed istream extraction operators to CORBA::String_var
          and CORBA::String out. Thanks to Patrick J Lardieri
          <plardier@atl.lmco.com> for reporting the problem and to
          Carlos for suggesting the fix.

Tue Feb 19 09:11:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/AV.bor:
          Added ACE_QoS library

Tue Feb 19 08:58:34 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/GIOP_Message_State.cpp:
          Removed a space in the ACE_DEBUG macro for getting the byte order
          info.

Mon Feb 18 19:38:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_interface/tie_sh.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.h:
        * tao/IIOP_Transport.h:
        * tao/Domain/DomainS_T.h:
        * tao/PortableServer/ImplRepoS_T.h:
        * tao/PortableServer/MessagingS_T.h:
        * tao/PortableServer/PolicyS_T.h:
        * tao/Strategies/DIOP_Transport.h:
        * tao/Strategies/SHMIOP_Transport.h:
        * TAO-INSTALL.html:

          Made TAO compiling with the Microsoft Visual C++ 7 compiler.
          Template classes cannot be exported when doing a dynamic build, so
          removed some export macro's from template definitions. When a class
          is derived from a class template then the class template must be
          explicit instantiated and be exported. To make sure that we only do
          this when a compiler supports this we introduced the new define
          ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION_EXPORT.

Mon Feb 18 11:27:00 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/AV_Core.cpp:
        * orbsvcs/orbsvcs/AV/Transport.cpp:
          Check for ACE_HAS_WINSOCK2_GQOS in addition to ACE_HAS_RAPI
          for compiling QoS enabled code.

        * orbsvcs/orbsvcs/AV/QoS_UDP.cpp:
        * orbsvcs/orbsvcs/AV/QoS_UDP.h:
          Check for ACE_HAS_WINSOCK2_GQOS in addition to ACE_HAS_RAPI
          for compiling QoS enabled code.
          Add TAO_AV_UDP_QoS_Acceptor::qos_acceptor_addr_.  Populate
          this address with localhost in open_default(), instead of the
          any address (0.0.0.0).

        * orbsvcs/orbsvcs/AV/AV_Static.dsp:
        * orbsvcs/orbsvcs/AV/AV.dsp:
        * orbsvcs/orbsvcs/AV/AV.bor:
          Add Fill_ACE_QoS.* and QoS_UDP.* to Win32 makefiles.

        * TAOACE.dsw:
          Add ACE_QoS.dsp to workspace.

Mon Feb 18 09:26:02 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/ETCL/ETCL.dsp:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h:

          Modified constraints and visitor to recognize values
          from all the fields of a structured event, not just
          'filterable_data', if they occur in a filter string.
          Also modified visitor's handling of enum values so no
          cast to CORBA::ULong is required when setting an enum
          value in a structured event. In the filter string,
          however, any rhs value to be compared against an enum
          value must still be a CORBA::ULong, since the spec
          does not allow enum values as valid literals in a filter
          string. Thanks to Bhaskara Rao G <bhaskar@mihy.mot.com>
          for reporting the problem with enums, and to Chad Elliott
          <elliott_c@ociweb.com> for reporting the problem with
          fields of the structured event.

Mon Feb 18 09:14:47 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_array.cpp:

          Fixed arrays to be marked as 'local' if they
          contain a local type at some level.

        * TAO_IDL/be/be_visitor_array/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_cs.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/structure_cs.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_cs.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/union_ch.cpp:
        * TAO_IDL/be/be_visitor_union/union_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:

          Added typecode generation and Any operator generation
          for all local types. Sometimes these may have to be
          inserted into CORBA policies, and for that we need
          the Any operators.

        * tao/Any.h:
        * tao/Any.i:
        * tao/Any.cpp:

          Added a new flag that is set by an insertion operator when
          inserting a local type. Then the flag is checked when
          marshaling the Any to return 0 if the Any contains a local
          type at some level.

Mon Feb 18 08:53:14 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/tao_idl_static.dsp:
        * TAO_IDL/driver/drv_init.cpp:

          Made some changes to the project settings, and added an error
          message if no valid preprocessor path is set on Windows. Thanks
          to Joe Hayes <Joe.Hayes@lmco.com> for reporting the problem.

Sun Feb 17 11:52:36 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

        * orbsvcs/examples/Notify/Subscribe/Subscribe.cpp (Subscribe):
          Initialize done_ to 0.  Thanks to Markus Wild
          <markus.wild@homag.de> for reporting this.

Mon Feb 18 08:37:26 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Fixed typecode generation and repo id calculation to remove
          the '_cxx_' prepended by the IDL compiler if the identifier
          is a C++ keyword. The prefix is necessary for C++ compilation
          of generated code, but should not go out over the wire. Thanks
          to Torsten Kuepper <Torsten.Kuepper@nokia.com> for pointing this
          out.

Mon Feb 18 01:45:07 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * orbsvcs/orbsvcs/Sched/DynSched.cpp:
        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.cpp:
        * orbsvcs/orbsvcs/Sched/Strategy_Scheduler.cpp:
          Use ACE_OS::qsort() instead of global qsort() to fix build error
          with Borland C++Builder 6.

Sun Feb 17 16:32:32 2002  Venkita  <venkita@cs.wustl.edu>

        * TAO version 1.2.2 released.

Fri Feb 15 07:01:28 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp: Added fixes for the NULL ptr
           being accessed when stopping associated flows to a stream.
            Thanks to Martin Johnson for these fixes.

Thu Feb 14 17:03:48 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.cpp (shutdown):
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.cpp (shutdown):
          Fixed event channel shutdown problems:  the event channel
          removes some Event_Handlers from the Reactor, but did not reset
          the reactor pointer in those Event_Handlers. If the ORB Reactor is
          deleted before the event channel (not that strange in some cases
          because the Reactor) the Event_Handler destructor tries to
          remove itself from the Reactor, and all hell breaks loose.

Thu Feb 14 15:20:19 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushConsumer.cpp (supplier_non_existent):
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushSupplier.cpp (consumer_non_existent):
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullConsumer.cpp (supplier_non_existent):
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullSupplier.cpp (consumer_non_existent):
          Do not hold the mutex while checking if the peer stil exists.
          Doing so can result in dead-locks whenever there is a nested
          upcall as part of the request.
          Thanks to Mark Hoffmann <Mark.Hoffmann@Axcelis.com> for
          reporting this one.

        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_Pulling_Strategy.cpp:
          Fixed shutdown() method, removing an Event_Handler from the
          Reactor does not reset the reactor() pointer to 0, unfortunately
          that means that the Event_Handler destructor tries to remove the
          handler *again*, at which point the reactor may have been
          destroyed.

Thu Feb 14 14:21:31 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableServer/POA.cpp:
        * tao/ORB_Core.cpp:
          Committing the files again. Somehow they didnt go to the repo
          yesterday.

Thu Feb 14 16:16:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * COPYING: Updated copyright years.

Thu Feb 14 01:12:23 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

        * Makefile.bor: Renamed XML directory to ACEXML.  Thanks to Johnny
          Willemsen for reminding this.

Wed Feb 13 17:21:00 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableServer/POA.cpp :
        * tao/ORB_Core.cpp :
          Moved code related to adding the policies to the mprofile
          to TAO_ORB_Core::create_stub_object from
          TAO_POA::create_stub_object to get the RTCORBA tests running.
          The control wasnt coming to the TAO_POA::create_stub_object
          and hence the policies were not added correctly.

Wed Feb 13 18:39:01 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/Miop/McastHello/Makefile: Added a check for
          compilation.
        * orbsvcs/orbsvcs/Makefile.PortableGroup: Added CosNaming to list
          of libraries against which this needs to be linked.

Wed Feb 13 12:47:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/IFR_Service/ConstantDef_i.cpp: Changed the usage of
          Auto_Basic_Ptr to Auto_Basic_Array_Ptr. Thanks to Johnny for
          reporting this problem.

Tue Feb 12 17:53:31 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableServer/POA.cpp (destroy_i):
          Got a duplicate before releasing the poa so that it stays around
          while we change its status and call the corresponding
          interceptor's adapter_state_changed methods.

Tue Feb 12 16:01:25 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PICurrent.cpp (copy):

          Now that the code has been greatly simplified, an ACE_TRY block
          is no longer necessary.  Fixes an "unused label" warning in
          emulated exception builds.

Tue Feb 12 15:02:38 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ObjectReferenceTemplateC.i: Regenerated the code after the
          change to the IDL compiler.

Tue Feb 12 14:52:36 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * TAO_IDL/be/be_valuetype.cpp (gen_helper_inline): Hacked up the
          problem with the generation of add_ref () and remove_ref () for
          value types. The fundamental problem is that, these methods are
          getting generated within a #ifndef (__ACE_INLINE_) condition in
          the header file. In the inlined file they are just generated
          like the CDR operators. This gives problems with Win32 debug
          builds. The present hack adds a #if defined (__ACE_INLINE__)
          around the declaration of add_ref () and remove_ref (). This
          problem needs to be revisited later. Any other quick fixes
          breaks builds.

Tue Feb 12 06:01:12 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/examples/RtEC/MCast/MCast.cpp: Making this checkin for
          Oliver Kellogg. Fixed comments about exception handling in the
          code.

Mon Feb 11 16:32:00 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PICurrent.h:

          Disable the "C4251" warning in MSVC++ builds.  MSVC++ is being
          too paranoid about a class it thinks should be exported.

          (Table):

          The underlying slot table is now an array of CORBA::Anys.  The
          memory management headaches of using an array of pointers to
          void were becoming too much of a hassle.  This was motivated by
          memory leak and fix reported by Grig <grig@plesk.com>.

          (tsc_to_rsc_):

          New flag that indicates if the TSC is to be copied to the RSC.
          If false, then the RSC must be deep copied upon leaving the
          request scope and entering the thread scope.  This is necessary
          since the RSC slot table is no longer available upon leaving the
          thread scope, meaning that a logical copy is not enough.

        * tao/PICurrent.cpp (~TAO_PICurrent_Impl):

          No longer any need to deallocate the elements of the underlying
          slot table since it contains "first class citizens," i.e. they
          will automatically be cleaned up when the array is destroyed.

          (get_slot):

          Updated to retrieve data from an array of CORBA::Anys instead of
          an array of pointers to void.

          (set_slot, copy):

          The switch to an array of CORBA::anys greatly simplifies these
          methods.  It also happens to fix a memory leak and improves the
          efficiency of the code.

          (~TAO_PICurrent_Guard):

          Set the "peer" in the TSC when logically copying from the
          contents of the TSC to the RSC.  The TSC may have to callback on
          the RSC (i.e. the "peer") if the TSC is modified after it has
          been logically copied to the RSC.  Fixes a problem where the RSC
          and TSC were not treated as separate entities due to the logical
          copying that occurs.

        * tests/Portable_Interceptors/PICurrent/ServerORBInitializer.cpp
          (post_init):

          Pass a reference to the PICurrent object down to the server
          request interceptor created in this method.  The interceptor
          will invoke methods on the PICurrent at a later time.  Saves a
          resolve_initial_references() call in the critical path.

        * tests/Portable_Interceptors/PICurrent/ServerRequestInterceptor.h
          (pi_current_):

          Cache a reference to the PICurrent object.

        * tests/Portable_Interceptors/PICurrent/ServerRequestInterceptor.cpp
          (send_reply):

          Added another test that verifies that the RSC and TSC are
          treated as a separate entities.  This is necessary since TAO
          logically copies the contents of the TSC to the RSC, and only
          deep copies if the contents of either are about to be modified.

        * tests/Portable_Interceptors/PICurrent/ClientRequestInterceptor.cpp:
          (send_request):

          Corrected debugging output.

        * tests/Portable_Interceptors/PICurrent/README:

          New file that explains what the test does.

Mon Feb 11 18:20:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/ORT/ORT_test_IORInterceptor.h:
        * orbsvcs/examples/ORT/Server_IORInterceptor.h:
        * tao/PortableServer/Object_Adapter.h:
        * tao/PortableServer/ObjectReferenceFactory.h:
        * tao/PortableServer/ObjectReferenceTemplate.h: More fuzz errors.

Mon Feb 11 18:02:18 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/PortableServer/POAManager.h:
        * tests/Oneways_Invoking_Twoways/Receiver_i.h :
        * tests/Oneways_Invoking_Twoways/Sender_i.h:
        * orbsvcs/tests/FaultTolerance/IOGR/Client_i.h:
        * orbsvcs/tests/FaultTolerance/IOGR/Manager.h: More fuzz errors.

Mon Feb 11 17:56:14 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Base_Transport_Property.h:
        * tao/Cache_Entries.h:
        * tao/Policy_Manager.h:
        * tao/Transport_Cache_Manager.h:
        * tao/Transport_Descriptor_Interface.h: Fixed Fuzz errors from
          #pragma warnings.

Mon Feb 11 16:04:20 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Fault_Tolerance_Service.h:
        * tao/Connection_Handler.h:
        * tao/Fault_Tolerance_Service.h:
        * tao/GIOP_Message_Generator_Parser.h:
        * tao/GIOP_Message_Generator_Parser_10.h:
        * tao/GIOP_Message_Generator_Parser_11.h:
        * tao/GIOP_Message_Generator_Parser_12.h: Removed the #pragma
          warning (push) from the above files as they are not needed in
          the first place. Thanks to Ossama for pointing these out.

Sun Feb 10 13:16:45 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/ImplRepo_Service/Options.cpp:
          Include yet another missing "tao/Environment.h"

Sun Feb 10 09:08:36 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/IORManipulation/IORTest.cpp:
        * orbsvcs/performance-tests/EC_Latency/Client_Task.cpp:
        * orbsvcs/performance-tests/EC_Scalability/Client_Task.cpp:
        * orbsvcs/IFR_Service/IFR_Server.cpp: All of the above files
          needed an include of tao/Environment.h to get rid of compile
          errors in the TRU 64 build.

Sat Feb  9 23:40:31 2002  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/PICurrent/client.bor (OBJFILES):
        * tests/Portable_Interceptors/PICurrent/client.dsp:

          Added new client request interceptor related files to the list
          of sources to compile.

Sat Feb  9 23:27:23 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ClientRequestInfo_i.h (rs_pi_current_):

          New class member that is the request-scope current (RSC).

        * tao/ClientRequestInfo_i.cpp (TAO_ClientRequestInfo_i):

          Logically copy the thread-scope PICurrent (TSC) object to the
          request-scope PICurrent (RSC) object.  This corrects the
          semantics of RSC on the client side.  The RSC is always
          independent of the TSC.  Note that deep copies are automatically
          done when necessary when calling set_slot() via the PICurrent
          object, so there is no need to worry about that case here.  This
          fix is also part of an optimization.  Instead of one TSS access
          each time the RSC's get_slot() method is called (can be many
          times in a given invocation), only one TSS access now occurs
          when setting up the invocation.

          (get_slot):

          Retrieve the slot contents from the RSC class member instead of
          TSC.  This is the correct behavior, as opposed to the previous
          where the slot contents were always retrieved from the TSC.
          This also limits the number of PICurrent related TSS accesses
          per invocation to one instead of potentially many.  [Bug 1128]

          (copy):

          Once a deep copy has been made, reset the pointer to the
          logically copied slot table to zero.  At that point, the RSC and
          TSC are completely separate entities.

        * tao/PICurrent.h (TAO_PICurrent_Guard):
        * tao/PICurrent.cpp (TAO_PICurrent_Guard):

          Removed superfluous constructor.  The above changes obviate it.

        * tests/Portable_Interceptors/PICurrent/ClientORBInitializer.h:
        * tests/Portable_Interceptors/PICurrent/ClientORBInitializer.cpp:
        * tests/Portable_Interceptors/PICurrent/ClientRequestInterceptor.h:
        * tests/Portable_Interceptors/PICurrent/ClientRequestInterceptor.cpp:

          New client request interceptor related files that test the
          client side RSC/TSC semantics.

        * tests/Portable_Interceptors/PICurrent/client.cpp (main):

          Insert data into the clients allocated PICurrent slot prior to
          invoking the test method, and then retrieve the data after
          invoking the test method.  This merely verifies that the data
          inserted into TSC within the client request interceptor is
          actually available to the calling thread outside of the client
          request interceptor.

Sat Feb  9 15:21:52 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * TAO_IDL/be/be_valuetype.cpp: Added the keywords
          TAO_NAMESPACE_STORAGE_CLASS to the declarations of add_ref ()
          and remove_ref (). This should fix link errors in Win32.

        * tao/ObjectReferenceTemplateC.h:
        * tao/ObjectReferenceTemplateC.i: Regenerated code for this
          class. Looks like other classes dont need regeneration.

Sat Feb  9 09:36:08 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/releasenotes/amh.html (href): Removed some wizard generated
          stuff. Still a lot more remains.

Sat Feb  9 08:24:08 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/releasenotes/amh.html: Removed references to pages in the
          docs section through Dr.Schmidt's home page. This also fixes
          fuzz errors.

Sat Feb 09 01:58:00 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/IORInfo.cpp (current_factory):

          Increment the reference count before returning a pointer to the
          current factory.  Corrects an off-by-one reference count error.

Sat Feb 09 00:30:38 2002  Mayur Deshpande  <mayur@ics.uci.edu@>

        * docs/releasenotes/index.html:
        * docs/releasenotes/amh.html:

          Release Notes for Asynchronous Method Handling (AMH)

Fri Feb 08 22:20:38 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Environment.cpp (operator=):

          Carlos doesn't know how to swap two variables.  We need to have
          a generic version.  Fixes a seg fault in emulated exception
          builds.

Fri Feb 08 21:27:32 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Environment.cpp (exception_type):

          Exceptions in the PortableServer module are user exceptions, not
          system exceptions.  Removed code that caused them to be
          considered system exceptions.

Sat Feb  9 04:57:45 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/PortableServer/POA.cpp: Added a template instantiation for
          ACE_Array_Base <IOP::ProfileId>. This shold fix link errors in
          Sun CC builds.

Fri Feb  8 21:51:05 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/PortableServer/POA.cpp: Fixed a redefinition error in
          Win32.

Fri Feb  8 19:36:33 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/ServerRequestInfo.cpp (adapter_name):

          Corrected and simplified code that incorrectly assigned the
          AdapterName sequence to a CORBA::StringSeq.  Just return the
          value, no need to assign the return value to a temporary
          variable of incorrect type.

        * tao/PortableServer/POA.cpp (adapter_name_i):

          It is technically illegal to initialize a POA_var with zero.
          Fixed.

Fri Feb  8 18:27:13 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/POAManager.h:

          Removed the static AdapterManagerId.  It wasn't needed, and it
          wasn't accessed/modified in an atomic way.

        * tao/PortableServer/POAManager.i (generate_manager_id):

          New method used for generating the AdapterManagerId in an atomic
          way.

        * tao/PortableServer/POAManager.cpp (TAO_POA_Manager):

          Removed broken code that incremented a static AdapterManagerId
          counter in a non-thread-safe way.  Call the new
          generate_manager_id() method to generate an ID in an atomic
          way.  Fixes a race condition.

        * tao/PortableServer/POA.i (get_manager_id):
        * tao/PortableServer/POA.cpp (set_obj_ref_factory):
        * tao/PortableServer/POAManager.cpp
          (activate_i, discard_requests_i):
        * tao/PortableServer/ObjectReferenceTemplate.cpp (adapter_name):

          Fixed syntax errors related to emulated exceptions.

Fri Feb  8 17:40:42 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.cpp (get_protocols_hooks):

          Fixed a syntax error.  ACE_CHECK_RETURN, not ACE_CHECK!

          (run):

          Fixed an unused argument warning.

Fri Feb  8 16:40:38 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ORB_Core.cpp :
        * tao/ORB_Core.h :
          Removed the unnecessary and wrongly places open call.
          Removed the no-longer needed open () method.

        * tao/PortableServer/POAManager.h :
        * tao/PortableServer/POAManager.cpp:
          Modified the way in which the POAManager Id is set.
          Added a new public method to return the manager id.

        * tao/PortableServer/ObjectReferenceTemplate.h:
          Removed unnecessary includes.

        * tao/PortableServer/ObjectReferenceTemplate.cpp :
        * tao/PortableServer/ObjectReferenceFactory.cpp:
          Assigned and returned variables in memory-correct
          syntax following the C++ mapping rules.

        * tao/PortableServer/IORInfo.cpp :
          Removed the fixed review comments. Incremented the reference
          count of the adapter_template where needed.

        * tao/PortableServer/Object_Adapter.cpp (open):
          Re-added the open_default_resources method call in the open
          method which is the right place to do.

        * tao/PortableServer/POA.cpp :
        * tao/PortableServer/POA.h :
          Removed unnecessary reinterpret casts. Modified the
          instantiation of ObjectReferenceTemplate in accordance with its
          modified constructor. And, similar other minor but important
          changes such as setting the default value of the private
          variable adapter_state_. Invoked the adapter_state_changed
          methods when they should have been called.

          Modified the signature of the adapter_name_i method to return a
          PortableInterceptor::AdapterName * instead of returning
          CORBA::StringSeq *. Fixed its implementation to reduce locks and
          return the correct format.

          Modified the signature of adapter_state_changed method to take
          the reference to the object reference template sequence rather
          than a pointer to it.

          Removed the call to TAO_ORB_Core::open from the key_to_stub_i
          method since its not needed here.

          Modified the implementation of the save_ior_component* methods
          to save all the IOP::TaggedComponents passed it. With the way it
          was done before, if the method was called more than once, the
          previous values are over written. Modified accordingly the
          implementation of create_stub_object.

        * tao/PortableServer/POA.i :
          Modified the implementation of TAO_POA::get_manager_id method to
          invoke the get_manager_id method in TAO_POA_Manager.

        * tao/ObjectReferenceTemplateC.h (PortableInterceptor):
        * tao/ObjectReferenceTemplateC.cpp (_tao_unmarshal_v):
          Re-added the _tao_marshal_v and _tao_unmarshal_v internal
          methods.

        * orbsvcs/examples/ORT/Gateway_i.cpp (invoke):
          Added the missing ACE_ENV macros.

        * tests/ORT/server.cpp :
          Added a missing ACE_ENV macro.

        * tests/ORT/README:
          Updated on commands to run the test.

Fri Feb  8 14:12:54 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

        * docs/tutorials/Quoter/index.html: Updated the tutorial to make
          it clear that the files shouldn't be obtained individually, but
           instead used from the version of ACE+TAO downloaded wholesale
           from the web.  Thanks to Donna Maskell <Donna.Maskell@udlp.com>
           for this suggestion.

Fri Feb  8 12:33:29 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/DLL_ORB.cpp:
        * tao/Policy_Set.cpp:
          The Tru64/CXX builds require #including "tao/Environment.h",
          this is one of the few builds that does not define
          ACE_TEMPLATES_REQUIRE_SOURCE.

Fri Feb  8 12:25:55 2002  Carlos O'Ryan  <coryan@uci.edu>

        * ObjectReferenceTemplateC.h:
        * diffs/ObjectReferenceTemplate.diff:
          Add missing #include for "tao/Exception.h".

        * Domain/DomainS.cpp:
        * diffs/Domain.diff:
          Since we link TAO_IFR_Client we can use the CORBA::InterfaceDef
          operators directly instead of using the IFR_Client_Adapter, that
          makes the patches shorter and, therefore, makes for easier long
          term maintainance.

        * Domain/DomainS.h:
        * diffs/Domain.diff:
          Fixed the export macros.

        * PortableServer/Default_ORTC.cpp:
        * PortableServer/diffs/Default_ORT.diff:
          Add missing #include for "tao/ValueFactory.h", only required in
          minimum CORBA builds.

        * PortableServer/ObjectReferenceFactory.h:
        * PortableServer/ObjectReferenceTemplate.h:
          Fixed throw specs for make_object()

        * diffs/Policy.diff:
          Generate a new patch file that includes the export macro changes
          on the PolicyS.h file.

Fri Feb  8 13:55:44 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Xt_Stopwatch/server.cpp (main): Added a patch for single
          threaded builds. Thanks to Marco Kranawetter
          <Marco.Kranawetter@icn.siemens.de> for the patch.

        * tests/Xt_Stopwatch/Makefile: Fixed dependency.

Thu Feb 08 12:08:09 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/RTCORBA/Activity/activity_export.h: Added a new export
          definition file. This is needed for Win32 based systems.

        * examples/RTCORBA/Activity/Thread_Task.h:
        * examples/RTCORBA/Activity/Activity.h:
        * examples/RTCORBA/Activity/Job_i.h:
        * examples/RTCORBA/Activity/POA_Holder.h:
        * examples/RTCORBA/Activity/Periodic_Task.h:
        * examples/RTCORBA/Activity/Task_Stats.h:
        * examples/RTCORBA/Activity/Thread_Task.h: Added the export flag
          to all the header files.

        * examples/RTCORBA/Activity/Builder.cpp:
        * examples/RTCORBA/Activity/Builder.h: Changed the svc_conf macros
          to use the export flags.

        * examples/RTCORBA/Activity/activity.dsp: Added the export
          definition file. Fixed the release build configurtaion. It was
          broken.

          The above fixes should fix the annoying warnings in Win32 builds.

Thu Feb 07 22:52:07 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/PolicyS.h:
          Fixed export macros, I still need to re-generate the patch
          files.

Thu Feb 07 17:17:01 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * tao/PortableServer/TAO_PortableServer.dsp:
        * tao/PortableServer/TAO_PortableServer_Static.dsp:
          Add new files to MSVC projects.

Thu Feb  7 17:06:24 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Exception.h:
        * tao/Exception.i:
        * tao/Exception.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:
          Generate new _tao_duplicate() virtual method for all
          exceptions.  This method performs a deep-copy of the exception.
          Also made sure that the operations are generated in the same
          order on both the header and source files.

        * tao/Environment.cpp:
          Use the new _tao_duplicate() operation to safely keep a copy of
          the exception.
          Made some of the assignment operators exception safe.
          Documented the memory management rules for the exception()
          attribute.

        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
          Generate a space between the export macro and the return type
          (void) for the <<= and >>= operators.

        * TAO_IDL/util/utl_scope.cpp:
          Update comments about TypeCode and TCKind inside the CORBA::
          namespace.

        * examples/RTCORBA/Activity/POA_Holder.cpp:
          Use CORBA::Policy instead of CORBA_Policy.

        * tao/Bounds.pidl:
          Add new pre-compiled IDL source for the CORBA::Bounds exception.

        * tao/BoundsC.h:
        * tao/BoundsC.i:
        * tao/BoundsC.cpp:
          Re-generate the code to take advantage of namespaces, no need to
          keep complicated patches around.

        * tao/Dynamic.pidl:
        * tao/Current.pidl:
        * tao/GIOP.pidl:
        * tao/IIOP.pidl:
        * tao/OctetSeq.pidl:
        * tao/StringSeq.pidl:
        * tao/TAO.pidl:
        * tao/TimeBase.pidl:
        * tao/iiop_endpoints.pidl:
        * tao/IFR_Client/IFR_Base.pidl:
        * tao/IORTable/IORTable.pidl:
        * tao/PortableServer/PortableServer.pidl:
        * tao/RTCORBA/RTCORBA.pidl:
          Update the comments about how the IDL compiler should be
          invoked.
          In some cases I changed the documentation to use Doxygen-style
          comments.

        * tao/Domain.pidl:
        * tao/IOP.pidl:
        * tao/ObjectReferenceTemplate.pidl:
        * tao/PortableInterceptor.pidl:
        * tao/DynamicAny/DynamicAny.pidl:
          Change the comments to Doxygen style, and update them to
          describe the use of a single patch file, and reflect the fact
          that we take advantage of namespaces now.

        * tao/DomainC.h:
        * tao/DomainC.i:
        * tao/DomainC.cpp:
        * tao/IOPC.h:
        * tao/IOPC.i:
        * tao/IOPC.cpp:
        * tao/ObjectReferenceTemplateC.h:
        * tao/ObjectReferenceTemplateC.i:
        * tao/ObjectReferenceTemplateC.cpp:
        * tao/PortableInterceptorC.h:
        * tao/PortableInterceptorC.i:
        * tao/PortableInterceptorC.cpp:
        * tao/WrongTransactionC.h:
        * tao/WrongTransactionC.cpp:
        * tao/Domain/DomainS.h:
        * tao/Domain/DomainS.i:
        * tao/Domain/DomainS.cpp:
        * tao/Domain/DomainS_T.h:
        * tao/Domain/DomainS_T.i:
        * tao/Domain/DomainS_T.cpp:
        * tao/DynamicAny/DynamicAnyC.h:
        * tao/DynamicAny/DynamicAnyC.i:
        * tao/DynamicAny/DynamicAnyC.cpp:
        * tao/IORManipulation/IORC.h:
        * tao/IORManipulation/IORC.i:
        * tao/IORManipulation/IORC.cpp:
        * tao/IORTable/IORTableC.h:
        * tao/IORTable/IORTableC.i:
        * tao/IORTable/IORTableC.cpp:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoS.h:
        * tao/PortableServer/ImplRepoS.i:
        * tao/PortableServer/ImplRepoS.cpp:
        * tao/PortableServer/ImplRepoS_T.h:
        * tao/PortableServer/ImplRepoS_T.i:
        * tao/PortableServer/ImplRepoS_T.cpp:
        * tao/RTCORBA/RTCORBAC.h:
        * tao/RTCORBA/RTCORBAC.i:
        * tao/RTCORBA/RTCORBAC.cpp:
        * tao/PortableServer/PortableServerC.h:
        * tao/PortableServer/PortableServerC.i:
        * tao/PortableServer/PortableServerC.cpp:
          Re-generate the code to get the new CORBA::Exception methods.

        * tao/IOP_N.pidl:
          Removed, this file is no longer used or part of any
          specification.

        * tao/InterfaceDef.pidl:
          New file to forward declare CORBA::InterfaceDef, makes the
          generation of other pre-compiled IDL files *much* simpler.

        * tao/ORB.pidl:
        * tao/InvalidName.pidl:
          New file to generate CORBA::ORB::InvalidName, unfortunately the
          code has to be manually inserted into tao/ORB.{h,i,cpp}, but it
          is still simpler than hacking the implementation "manually".
          Removed the ORB.pidl file.

        * tao/ORB.h:
        * tao/ORB.cpp:
          Use the newly generated source for CORBA::ORB::InvalidName.

        * tao/Makefile:
        * tao/Makefile.am:
        * tao/Makefile.bor:
          Add the new Policy_ForwardC.* files.

        * tao/Policy.pidl:
          Move some of the declarations to Policy_Forward.pidl, using a
          separate file to forward declare CORBA::Policy simplified the
          generation and patching of the code, as it breaks the cycle
          between CORBA::Policy and CORBA::Object.
          In detail: CORBA::Policy derives from CORBA::Object, but the
          latter uses CORBA::Policy as arguments to the
          set_policy_override operations (and friends), using a forward
          declaration allow us to use the arguments without requiring a
          complete definition (in the header file).
          Update the comments to Doxygen style.
          Document the use of a single patch file.

        * tao/PolicyC.h:
        * tao/PolicyC.i:
        * tao/PolicyC.cpp:
        * tao/PortableServer/PolicyS.h:
        * tao/PortableServer/PolicyS.i:
        * tao/PortableServer/PolicyS.cpp:
        * tao/PortableServer/PolicyS_T.h:
        * tao/PortableServer/PolicyS_T.i:
        * tao/PortableServer/PolicyS_T.cpp:
          Re-generate the code using the new .pidl file.

        * tao/Policy_Forward.pidl:
          Add new pre-compiled IDL file to declare the basic
          Policy-related types and forward declare CORBA::Policy.

        * tao/Policy_ForwardC.h:
        * tao/Policy_ForwardC.i:
        * tao/Policy_ForwardC.cpp:
          Add new pre-compiled IDL files.

        * tao/Policy_Manager.h:
        * tao/Policy_Manager.i:
          Use CORBA::InvalidPolicies instead of CORBA_InvalidPolicies.

        * tao/Pollable.pidl:
        * tao/PollableC.h:
        * tao/PollableC.i:
        * tao/PollableC.cpp:
          Take advantage of namespaces to simplify the code generation.

        * tao/Object.h:
        * tao/Policy_Validator.h:
        * tao/Protocols_Hooks.h:
        * tao/RTCORBA/RT_Endpoint_Utils.h:
          Add #include for Policy_ForwardC.h

        * tao/Synch_Reply_Dispatcher.h:
          Add missing #include

        * tao/Typecode.h:
        * tao/Typecode.cpp:
          Update the TypeCode::Bounds and TypeCode::BadKind exceptions to
          look more like what the IDL compiler would generated.
          I wanted to use real pre-compiled IDL for them, but it is
          impossible without significant changes to the IDL compiler: the
          CORBA::TypeCode pseudo-object is automagically inserted by the
          IDL compiler, and any attempt to define it in a .pidl file would
          fail.

        * tao/Typecode_Constants.cpp:
          Remove a number of TypeCodes that are defined in the generated
          code.

        * tao/WrongTransaction.pidl:
          Add missing pre-compiled IDL source.

        * tao/corbafwd.h:
          Removed obsolete comments about alignment and packing, the code
          the comments made reference was removed looong time ago.
          Removed a number of forward references that are better declared
          in the generated (from PIDL) files.

        * tao/DynamicInterface/Unknown_User_Exception.h:
        * tao/DynamicInterface/Unknown_User_Exception.cpp:
          Update hand-crafted code to include the new _tao_duplicate()
          method.  Unfortunately there is no PIDL source for this file,
          and I could not figure out how to reverse-engineer one of them.

        * tao/IOR.pidl:
        * tao/IORManipulation/IOR.pidl:
          Moved the IOR.pidl file to the only directory where it is
          actually used.

        * tao/PortableServer/Default_ORT.pidl:
        * tao/PortableServer/Default_ORTC.h:
        * tao/PortableServer/Default_ORTC.i:
        * tao/PortableServer/Default_ORTC.cpp:
          Add concrete valuetypes derived from
          PortableInterceptor::ObjectReferenceFactory and
          PortableInterceptor::ObjectReferenceTemplate, otherwise it is
          impossible to create concrete instances of the valuetypes.

        * tao/PortableServer/ObjectReferenceFactory.h:
        * tao/PortableServer/ObjectReferenceTemplate.h:
          Derive from the versions in OBV_TAO_Default_ORT.

        * tao/PortableServer/AMH_Response_Handler.h:
          Re-order #includes

        * tao/PortableServer/diffs/ImplRepo.diff:
        * tao/PortableServer/diffs/PortableServer.diff:
        * tao/PortableServer/diffs/Default_ORT.diff:
        * tao/RTCORBA/diffs/RTCORBA.diff:
        * tao/RTCORBA/diffs/RTCORBAC.cpp.diff:
        * tao/RTCORBA/diffs/RTCORBAC.h.diff:
        * tao/RTCORBA/diffs/RTCORBAC.i.diff:
        * tao/DynamicAny/diffs/DynamicAny.diff:
        * tao/DynamicAny/diffs/DynamicAnyC.h.diff:
        * tao/DynamicAny/diffs/DynamicAnyC.i.diff:
        * tao/DynamicAny/diffs/DynamicAnyC.cpp.diff:
        * tao/IORManipulation/diffs/IOR.diff:
        * tao/IORManipulation/diffs/IORC.cpp.diff:
        * tao/IORManipulation/diffs/IORC.h.diff:
        * tao/IORManipulation/diffs/IORC.i.diff:
        * tao/IORTable/diffs/IORTable.diff:
        * tao/IORTable/diffs/IORTableC.cpp.diff:
        * tao/IORTable/diffs/IORTableC.h.diff:
        * tao/IORTable/diffs/IORTableC.i.diff:
        * tao/diffs/Bounds.diff:
        * tao/diffs/Current.pidl.diff:
        * tao/diffs/Domain.diff:
        * tao/diffs/Domain.pidl.diff:
        * tao/diffs/DomainC.cpp.diff:
        * tao/diffs/DomainC.h.diff:
        * tao/diffs/DomainC.i.diff:
        * tao/diffs/DomainS.cpp.diff:
        * tao/diffs/DomainS.h.diff:
        * tao/diffs/DomainS.i.diff:
        * tao/diffs/DomainS_T.cpp.diff:
        * tao/diffs/DomainS_T.h.diff:
        * tao/diffs/DomainS_T.i.diff:
        * tao/diffs/IOP.diff:
        * tao/diffs/IOPC.cpp.diff:
        * tao/diffs/IOPC.h.diff:
        * tao/diffs/IOPC.i.diff:
        * tao/diffs/ObjectReferenceTemplate.diff:
        * tao/diffs/OctetSeqC.cpp.diff:
        * tao/diffs/Policy.diff:
        * tao/diffs/Policy.pidl.diff:
        * tao/diffs/PolicyC.cpp.diff:
        * tao/diffs/PolicyC.h.diff:
        * tao/diffs/PolicyC.i.diff:
        * tao/diffs/PolicyS.cpp.diff:
        * tao/diffs/PolicyS.h.diff:
        * tao/diffs/PolicyS.i.diff:
        * tao/diffs/PolicyS_T.cpp.diff:
        * tao/diffs/PolicyS_T.h.diff:
        * tao/diffs/PolicyS_T.i.diff:
        * tao/diffs/Policy_Forward.diff:
        * tao/diffs/Pollable.diff:
        * tao/diffs/PollableC.cpp.diff:
        * tao/diffs/PollableC.h.diff:
        * tao/diffs/PollableC.i.diff:
        * tao/diffs/PortableInterceptor.diff:
        * tao/diffs/PortableInterceptorC.cpp.diff:
        * tao/diffs/PortableInterceptorC.h.diff:
        * tao/diffs/PortableInterceptorC.i.diff:
        * tao/diffs/PortableServerC.cpp.diff:
        * tao/diffs/PortableServerC.h.diff:
        * tao/diffs/PortableServerC.i.diff:
        * tao/diffs/WrongTransaction.diff:
          Removed the per-file patches.
          Generate a new patch file.

        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
        * tao/NVList.cpp:
        * tests/Param_Test/Makefile:
        * tao/Service_Context.cpp:
          Cosmetic fixes.

        * TAO_IDL/Makefile.BE:
        * TAO_IDL/Makefile.EXE:
        * TAO_IDL/Makefile.FE:

Thu Feb  7 16:37:16 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_interface.cpp:
          Fixed (this time I did test it) the operation table for builds
          without gperf.

Thu Feb  7 13:13:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be_include/be_codegen.h:

          Added new substate and used it in generation of AMH response
          handler operations, where the environment arg is not used
          in the body if there are no other args.

Thu Feb  7 09:12:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/fe_init.cpp:
        * TAO_IDL/util/utl_scope.cpp:

          Added partial support for the use of 'ValueBase' in
          IDL files.

Wed Feb  6 18:56:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/ORB.cpp:
        * tao/corbafwd.h:
        * tao/orb.idl:

          Added the enum TCKind to orb.idl, and added the CDR operators
          for it to corbafwd.h and ORB.cpp.

        * TAO_IDL/ast/ast_module.cpp:

          Removed the addition of TCKind to the CORBA module, when orb.idl
          is included. It now gets added directly from the idl file.

        * TAO_IDL/util/utl_scope.cpp:

          Fixed lookup function, and changed many instances of iterators
          to be created on the stack. Thanks to Carlos O"Ryan <coryan@uci.edu>
          for reporting the bug in the handling of TCKind.

Wed Feb  6 16:34:49 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_include/be_valuetype.h:

          Minor cosmetic change.

        * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:

          Fixed generated code to eliminate an unused arg warning
          for _tao_marshal_state(), in the special case when
          the CDR stream arg is not used in the function body.

        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:

          Added a generated space between the export macro and the
          return type of the operator.

Wed Feb  6 13:36:00 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.cpp (shutdown):

          Synchronize the ORB Core state during shutdown.  Fixes a race
          condition.

Tue Feb 05 15:37:15 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp
          Fixed minor bug with type selection for field visitor.

Mon Feb 04 09:19:53 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
          AMH_*ExceptionHolder valuetypes do not need to derive from
          Messaging::ExceptionHolder, that would make it possible to use
          AMH even if CORBA Messaging is disabled at compile time, plus it
          makes the ExceptionHolders lighter-weight.

        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
          Improved the checks to detect *_excep() operations.
          Generate the right call to the raise_*() operation.
          Fixed indentation in the generated code.

        * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
          Started changes to add the ExceptionHolder factory method.

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
          Cosmetic fixes.

Mon Feb  4 10:47:52 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_decl.cpp:
        * TAO_IDL/ast/ast_enum.cpp:
        * TAO_IDL/ast/ast_exception.cpp:
        * TAO_IDL/ast/ast_factory.cpp:
        * TAO_IDL/ast/ast_interface.cpp:
        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/ast/ast_recursive.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/ast/ast_union_branch.cpp:
        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_interface_strategy.cpp:
        * TAO_IDL/be/be_operation.cpp:
        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_sunsoft.cpp:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_scope.cpp:
        * TAO_IDL/be/be_visitor_constant/constant_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_exception_holder_operation_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/exceptlist_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_exceptlist.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
        * TAO_IDL/be/be_visitor_root/root_sth.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_union/union_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/marshal_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
        * TAO_IDL/be_include/be_attribute.h:
        * TAO_IDL/fe/fe_interface_header.cpp:
        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/y.tab.cpp:.diff:
        * TAO_IDL/fe/y.tab.h:
        * TAO_IDL/util/utl_decllist.cpp:

          Replaced heap visitors with stack visitors, 'new' with
          'ACE_NEW*', put iterators into the stack-created FOR
          loop format suggested by Carlos, and made cosmetic
          changes.

Mon Feb  4 09:46:09 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * examples/RTCORBA/Activity/activity.dsp:
          Added missing idl compile section for Win32 Release.

Sun Feb  3 07:55:49 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * examples/RTCORBA/Activity/activity.dsp:
          Fixed include path. Thanks to Bala.

Sat Feb  2 21:56:41 2002  Ossama Othman  <ossama@uci.edu>

        * performance-tests/Latency/Single_Threaded/default_configuration.pl:

          Corrected Perl include path.  This should fix the missing
          benchmarks on our performance statistics web page.

Sat Feb  2 21:33:43 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Service_Context.h (get_context):
        * tao/Service_Context.cpp (get_context):

          New version of this method that uses CORBA-style parameter
          passing rules.  The returned service context is returned as an
          "out" parameter.  This is part of an optimization in the
          PortableInterceptor::{Client,Server}RequestInfo implementation.
          In particular, a new service context instance is only
          instantiated if the service context with the given ServiceId
          exists in the service context list.

        * tao/ClientRequestInfo_i.cpp (get_service_context_i):
        * tao/PortableServer/ServerRequestInfo.cpp
          (get_service_context_i):

          Use the new TAO_Service_Context::get_context() method to prevent
          needless dynamic instantation an IOP::ServiceContext if the
          service context with the given ServiceId was not found.  This is
          a nice optimization for services that attempt to retrieve
          service contexts during each request in standard/portable way,
          i.e. via portable interceptors.

Sat Feb  2 23:05:54 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * examples/RTCORBA/Activity/Makefile:
          Changed VLDLIBS to LDLIBS. This would hopefully fix errors
          regarding duplicate shared libraries.

Sat Feb  2 20:45:08 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:  Do not use ACE_CHECK or
          ACE_CHECK_RETURN macros if ACE_ENV_ARG_DECL_NOT_USED macro
          is defined, otherwise it messes up build which define exceptions=0.

Sat Feb  2 12:36:31 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.cpp (init):
        * tao/TAO_Internal.cpp (open_services):

          Moved vestigial code that retrieved the debug level from the
          TAO_ORB_DEBUG environment variable to the appropriate location
          in TAO_Internal.cpp.  Fixes a problem where the debug level was
          sometimes reset to zero despite the fact it was explicitly set
          by the -ORBDebugLevel ORB option.
          Reported by Scott Harris <harris_s@ociweb.com>

Fri Feb  1 23:25:39 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp:
        Fixed warnings about idl compiler.

Fri Feb  1 22:00:00 2002  Rob Ruff  <rruff@scires.com>
                          Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/RTP.h (TAO_AV_RTP_Object::connection_gone_):
          Added.

        * orbsvcs/orbsvcs/AV/RTP.cpp (TAO_AV_RTP_Object::handle_input):
          Check errno to see if remote peer has disappeared.

Fri Feb  1 21:53:45 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * examples/OBV/Typed_Events/Event_Types_impl.h:
        * examples/OBV/Typed_Events/Event_Types_impl.cpp:
          Make CORBA methods in servants have the same exception specifications
          as in the IDL generated stubs.

Fri Feb  1 06:44:51 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * tao/ORB_Core.h (TAO_ORB_Core): Changed the comment to refer to
          RTCORBA::Current rather than RTCORBA::RTCurrent.  Thanks to
           Juliana Diniz <jrbd@cin.ufpe.br> for reporting this.

Thu Jan 31 13:17:24 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/AMH_Response_Handler.h:
        * tao/PortableServer/AMH_Response_Handler.cpp:
          Add method to send exceptions back to the client.
          Cleanup some of the code and left @@ comments for Mayur.

        * TAO_IDL/be/be_interface.cpp:
          Fixed operation table entry for the _interface()
          pseudo-operation, it was broken for non-GPERF tables.

        * TAO_IDL/be_include/be_visitor_amh_pre_proc.h:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
          Add the AMH_*ExceptionHolder node after the AMH*_ResponseHandler
          node in the AST, that seems to generate the C++ code in the
          right order.
          Pass the ExceptionHolder argument down to the methods that
          insert the ResponseHandler operations, cuts down in lookup time
          when creating arguments for the *_excep() operations.
          Add code to generate the *_excep() operations in the ResponseHandler.

        * TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
          Remove obsolete comment.

        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
          Generate different code for _excep() and regular operations.
          Needs a little more work to detect _excep() operations reliable,
          but it is close enough for goverment work :-)

        * TAO_IDL/be/be_visitor_operation/operation.cpp:
          Simplify implementation of gen_throw_spec(), with a little work
          it could be turned into an static function, making it more
          reusable.  Similar changed could be made to
          gen_environemnt_decl(), gen_environment_var(),
          gen_raise_exception(), gen_check_exception() and even
          gen_check_interceptor_exception().

Thu Jan 31 13:06:39 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * performance-tests/Latency/AMH/Single_Threaded/Makefile:
          Added a check so that this test is not made for minimum CORBA
          builds.

Thu Jan 31 13:31:17 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.cpp:

          Removed an unused variable.

Thu Jan 31 13:26:33 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_module.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_visitor_argument/arglist.cpp:
        * TAO_IDL/be/be_visitor_argument/invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_argument/marshal_ss.cpp:
        * TAO_IDL/be/be_visitor_argument/post_invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_arglist.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_ch.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_result.cpp:
        * TAO_IDL/be/be_visitor_argument/request_info_sh.cpp:
        * TAO_IDL/be/be_visitor_argument/upcall_ss.cpp:
        * TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp:
        * TAO_IDL/be/be_visitor_field/field_ch.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_info_rettype.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_result.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_assign_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_marshal_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_return_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_vardecl_ss.cpp:
        * TAO_IDL/be/be_visitor_union_branch/public_ch.cpp:
        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/be_include/be_visitor_argument/arglist.h:
        * TAO_IDL/be_include/be_visitor_argument/invoke_cs.h:
        * TAO_IDL/be_include/be_visitor_argument/marshal_ss.h:
        * TAO_IDL/be_include/be_visitor_argument/post_invoke_cs.h:
        * TAO_IDL/be_include/be_visitor_argument/request_info_arglist.h:
        * TAO_IDL/be_include/be_visitor_argument/request_info_ch.h:
        * TAO_IDL/be_include/be_visitor_argument/request_info_result.h:
        * TAO_IDL/be_include/be_visitor_argument/request_info_sh.h:
        * TAO_IDL/be_include/be_visitor_argument/upcall_ss.h:
        * TAO_IDL/be_include/be_visitor_argument/vardecl_ss.h:
        * TAO_IDL/be_include/be_visitor_field/field_ch.h:
        * TAO_IDL/be_include/be_visitor_module/module.h:
        * TAO_IDL/be_include/be_visitor_operation/interceptors_info_rettype.h:
        * TAO_IDL/be_include/be_visitor_operation/interceptors_result.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_assign_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_marshal_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_return_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_vardecl_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/rettype_vardecl_ss.h:
        * TAO_IDL/be_include/be_visitor_root/root.h:
        * TAO_IDL/be_include/be_visitor_union_branch/public_ch.h:
        * TAO_IDL/driver/drv_args.cpp:
        * TAO_IDL/fe/fe_interface_header.cpp:
        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/include/fe_interface_header.h:
        * TAO_IDL/include/idl.h:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Removed all uses of IDL_HAS_VALUETYPE, since it's just defined
          in idl.h and checked in dozens of places.

Thu Jan 31 13:18:39 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:

          Changes the settings for the release versions of these projects
          to use the release version of the IDL compiler. Thanks to
          Venkita <venkits@cs.wustl.edu> for tracking this down.

Thu Jan 31 10:37:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:

          Added ACE_NOTREACHED macro at the end of several functions.

Thu Jan 31 09:39:59 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * orbsvcs/examples/Security/Send_File/Makefile:
        * orbsvcs/tests/Security/SecurityLevel1/Makefile (SRVR_LIBS):
        * orbsvcs/tests/Security/Secure_Invocation/Makefile:
          Fixed KCC error complaining about duplicate shared lib.

Thu Jan 31 09:37:22 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.cpp:

          Fixed an unreachable statement warning for KCC.

Thu Jan 31 14:14:32 2002  Boris Kolpackov <bosk@ipmce.ru>

        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp (visit_exception):

          Added generation of nested into valuetype exceptions.

Thu Jan 31 13:06:12 2002  Boris Kolpackov <bosk@ipmce.ru>

        * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:

          Eliminated code that triggers bug with fully-qualified names
          in VC++ 6. Thanks to Koushik Banerjee <koushik.banerjee@icmg.nu>
          for reporting this.

Wed Jan 30 21:08:22 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

        * performance-tests/Latency/AMH/Single_Threaded/Roundtrip.cpp:
        * performance-tests/Latency/AMH/Single_Threaded/Roundtrip.h:
        * performance-tests/Latency/AMH/Single_Threaded/client.cpp:
        * performance-tests/Latency/AMH/Single_Threaded/server.cpp:
        * performance-tests/Latency/AMI/Roundtrip.cpp:
        * performance-tests/Latency/AMI/Roundtrip.h:
        * performance-tests/Latency/AMI/Roundtrip_Handler.cpp:
        * performance-tests/Latency/AMI/Roundtrip_Handler.h:
        * performance-tests/Latency/AMI/Server_Task.cpp:
        * performance-tests/Latency/AMI/client.cpp:
        * performance-tests/Latency/AMI/server.cpp:
        * performance-tests/Latency/DII/Roundtrip.cpp:
        * performance-tests/Latency/DII/Roundtrip.h:
        * performance-tests/Latency/DII/client.cpp:
        * performance-tests/Latency/DII/server.cpp:
        * performance-tests/Latency/DSI/Roundtrip.cpp:
        * performance-tests/Latency/DSI/Roundtrip.h:
        * performance-tests/Latency/DSI/client.cpp:
        * performance-tests/Latency/DSI/server.cpp:
        * performance-tests/Latency/Deferred/Roundtrip.cpp:
        * performance-tests/Latency/Deferred/Roundtrip.h:
        * performance-tests/Latency/Deferred/client.cpp:
        * performance-tests/Latency/Deferred/server.cpp:
        * performance-tests/Latency/Single_Threaded/Roundtrip.cpp:
        * performance-tests/Latency/Single_Threaded/Roundtrip.h:
        * performance-tests/Latency/Single_Threaded/client.cpp:
        * performance-tests/Latency/Single_Threaded/server.cpp:
        * performance-tests/Latency/Thread_Per_Connection/Client_Task.cpp:
        * performance-tests/Latency/Thread_Per_Connection/Client_Task.h:
        * performance-tests/Latency/Thread_Per_Connection/Roundtrip.cpp:
        * performance-tests/Latency/Thread_Per_Connection/Roundtrip.h:
        * performance-tests/Latency/Thread_Per_Connection/client.cpp:
        * performance-tests/Latency/Thread_Per_Connection/server.cpp:
        * performance-tests/Latency/Thread_Pool/Client_Task.cpp:
        * performance-tests/Latency/Thread_Pool/Client_Task.h:
        * performance-tests/Latency/Thread_Pool/Roundtrip.cpp:
        * performance-tests/Latency/Thread_Pool/Roundtrip.h:
        * performance-tests/Latency/Thread_Pool/Worker_Thread.cpp:
        * performance-tests/Latency/Thread_Pool/client.cpp:
        * performance-tests/Latency/Thread_Pool/server.cpp:

          Conversion to the ACE_ENV_ macros.
          Thanks to Johnny Willemsen for keeping an eye out.

Wed Jan 30 13:38:03 2002  Douglas C. Schmidt  <schmidt@tango.doc.wustl.edu>

        * orbsvcs/examples/Notify/Subscribe/Subscribe.h (RefCountServantBase): Fixed
          a cut&paste error.  Thanks to Gautam H Thaker
           <gthaker@atl.lmco.com> for reporting this.

Wed Jan 30 12:49:43 2002  Rob Ruff  <rruff@scires.com>
                          Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp: Change ACE_ENV_ARG_DECL to
          ACE_ENV_ARG_DECL_NOT_USED.
        * orbsvcs/orbsvcs/AV/RTCP.cpp:  Clean up debugging statements.
          Change value of RTCP_SDES_NOTE to "An important note..."
        * orbsvcs/orbsvcs/AV/RTCP_Channel.cpp (update_seq):
          Only show debug statement if TAO_debug_level is > 0.
        * orbsvcs/orbsvcs/AV/Transport.cpp: Default initialize timer_id_ to
          -1.  Only call cancel_timer() and handle_timeout() if timer_id_ is
          not -1.
        * orbsvcs/orbsvcs/AV/UDP.cpp:
         (TAO_AV_UDP_Connector::connect) Set the control address.
         (TAO_AV_UDP_Connection_Setup::setup) Treat the setup of sockets
         which are used as acceptors or connectors differently.

Wed Jan 30 16:07:33 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/Makefile.bor:
          Added Structured_Filter and Structured_Multi_Filter

        * orbsvcs/tests/Notify/Structured_Filter/*.bor:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/*.bor:
          Added BCB makefiles for these tests

Wed Jan 30 11:19:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/orbconf.h:
          Added backwards compatible macro define for TAO_ENV_DECLARE_NEW_ENV

Wed Jan 30 07:39:09 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

        * orbsvcs/tests/Notify/Structured_Filter/Notify_Push_Consumer.cpp
          (Notify_Push_Consumer::push_structured_event): Corrected
          usage of ACE_ENV_ARG_DECL_NOT_USED.

Tue Jan 29 17:13:53 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:

          Changed the code in idl_store_pragma() to keep track of how
          many characters it 'crunches' when removing whitespace
          between the '#' and the 'pragma'. When the trailing '\n' of
          the pragma string is removed later on, it must be shifted
          this many places to the left, to skip over the characters
          that have now become garbage. Thanks to Ossama Othman
          <ossama@doc.ece.uci.edu> for providing the KCC preprocessor
          output that showed the source of the problem.

Tue Jan 29 23:31:14 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

        * rules.tao.GNU:
          Removed the include_env switch, it now lives in
          $ACE_ROOT/include/makeinclude/wrapper_macros.GNU.

Tue Jan 29 21:34:20 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
          Oops, fixed bad comment in line 1.

Tue Jan 29 21:09:12 2002  Oliver Kellogg <oliver.kellogg@sysde.eads.net>

        * tao/orbconf.h (TAO_ENV_*):
          Deprecated. Instead, use the equivalent ACE_ENV_ macros from
          $ACE_ROOT/ace/CORBA_macros.h.

        * (many source files):
          Corresponding to the above change, changed all relevant source
          files to use the new ACE_ENV_ARG macros instead of the TAO_ENV_ARG
          macros. All exception related macros are now defined in
          $ACE_ROOT/ace/CORBA_macros.h.

Tue Jan 29 09:01:41 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_interface.cpp:
          Removed bogus semicolon.

        * TAO_IDL/be_include/be_visitor_interface/amh_ch.h:
          Changed broken private inheritance to public inheritance.

Tue Jan 29 08:57:31 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Messaging.h:
          Add TAO_Export to the function declaration, otherwise it is
          invisible outside the library.

Tue Jan 29 10:56:35 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Notify/Structured_Filter/Notify_Push_Consumer.cpp:
          Added throw spec to push_structured_event() to match the
          declaration.

Tue Jan 29 09:38:35 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tao/CORBALOC_Parser.cpp:
          Fixed compile error. Added #include "tao/debug.h".

Tue Jan 29 13:09:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/Makefile.bor:
          Added Blocking, Discarding, MT_Dispatching,
          Sequence_Multi_ETCL_Filter and Sequence_Multi_Filter directory

        * orbsvcs/tests/Notify/Blocking/*.bor:
          Added new BCB makefiles to build this test

        * orbsvcs/tests/Notify/Discarding/*.bor:
          Added new BCB makefiles to build this test

        * orbsvcs/tests/Notify/MT_Dispatching/*.bor:
          Added new BCB makefiles to build this test

        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/*.bor:
          Added new BCB makefiles to build this test

        * orbsvcs/tests/Notify/Sequence_Multi_Filter/*.bor:
          Added new BCB makefiles to build this test

Tue Jan 29 11:20:36 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/tests/Notify/performance-tests/Makefile.bor:
          Added Throughput and Filter directory

        * orbsvcs/tests/Notify/performance-tests/Throughput/Makefile.bor:
          Added new BCB makefile to build this test

        * orbsvcs/tests/Notify/performance-tests/Filter/*.bor:
          Added new BCB makefiles to build these tests

        * orbsvcs/tests/Notify/Makefile.bor:
          Added Ordering directory

        * orbsvcs/tests/Notify/Ordering/*.bor:
          Added new BCB makefiles to build these tests

Tue Jan 29 09:10:17 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Messaging.h:
          Removed TAO_Export from namespace definitions because namespaces
          aren't exported. BCB compiler complains about this

Tue Jan 29 08:14:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvs/tests/Makefile.bor:
          Added CosEvent and Notify directory

        * orbsvcs/tests/CosEvent/Makefile.bor:
          Added new BCB makefile to build subdirectories

        * orbsvcs/tests/CosEvent/lib/Makefile.bor:
          Added new BCB makefile to build this test library

        * orbsvcs/tests/CosEvent/Basic/Makefile.bor:
          Added new BCB makefile to build these tests

        * orbsvcs/tests/Notify/Makefile.bor:
          Added new BCB makefile to build subdirectories

        * orbsvcs/tests/Notify/lib/Makefile.bor:
          Added new BCB makefile to build this test library

        * orbsvcs/tests/Notify/Basic/Makefile.bor:
          Added new BCB makefile to build these tests

        * orbsvcs/tests/Notify/performance-tests/Makefile.bor:
          Added new BCB makefile to build subdirectories

        * orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile.bor:
          Added new BCB makefile to build this test

Mon Jan 28 20:21:44 2002  Ossama Othman  <ossama@uci.edu>

        * tao/CORBALOC_Parser.cpp
          (check_prefix, parse_string_count_helper):

          Only print debugging information if desired by the user.

          Improved efficiency of some code.

Mon Jan 28 16:21:59 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
          Add Messaging.cpp to the project files.

Mon Jan 28 16:11:36 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
          Add generation of the AMH_*ExceptionHolder valuetype.

        * TAO_IDL/be/be_visitor_operation/ami_exception_holder_operation_cs.cpp:
          The IDL compiler simply calls the shared code in
          TAO_Messaging_Helper::exception_holder_raise().
          Using a shared function for the raise methods in the
          ExceptionHolders reduced the line count from 59Kloc to 56Kloc,
          more importantly it saved 10% in the text segment for
          param_testC.o.

        * TAO_IDL/be/be_visitor_valuetype/arglist.cpp:
          Cleanup indentation.
          Generate throw specs for valuetype operations.

        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
          Remove obsolete @@ comment.

        * tao/Messaging.h:
        * tao/Messaging.cpp:
          Add new Messaging.cpp, it should contain helper code used in the
          implementation of CORBA Messaging.

        * tao/Makefile:
        * tao/Makefile.am:
        * tao/Makefile.bor:
          Add new Messaging.cpp file and update deps.

        * tao/BiDir_GIOP/Makefile:
        * tao/Domain/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/IFR_Client/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
        * tao/PortableServer/Makefile:
        * tao/RTCORBA/Makefile:
        * tao/RTPortableServer/Makefile:
        * tao/SmartProxies/Makefile:
        * tao/Strategies/Makefile:
        * tao/TypeCodeFactory/Makefile:
          Update deps.

Mon Jan 28 13:40:38 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
          Fixed typo in UTL_ScopeActiveIterator change, the loop
          termination should have been !si.is_done(), but I typed
          si.is_done().

Mon Jan 28 12:40:15 2002  Ossama Othman  <ossama@uci.edu>

        * performance-tests/Latency/AMH/Single_Threaded/client.dsp:
        * performance-tests/Latency/AMH/Single_Threaded/server.dsp:
        * performance-tests/Latency/AMI/client.dsp:
        * performance-tests/Latency/AMI/server.dsp:
        * performance-tests/Latency/DII/client.dsp:
        * performance-tests/Latency/DII/server.dsp:
        * performance-tests/Latency/DSI/client.dsp:
        * performance-tests/Latency/DSI/server.dsp:
        * performance-tests/Latency/Deferred/client.dsp:
        * performance-tests/Latency/Deferred/server.dsp:
        * performance-tests/Latency/Single_Threaded/client.dsp:
        * performance-tests/Latency/Single_Threaded/server.dsp:
        * performance-tests/Latency/Thread_Per_Connection/client.dsp:
        * performance-tests/Latency/Thread_Per_Connection/server.dsp:
        * performance-tests/Latency/Thread_Pool/client.dsp:
        * performance-tests/Latency/Thread_Pool/server.dsp:

          Updated paths in accordance with the new "Latency" performance
          test organization.

Mon Jan 28 12:39:50 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/EC_Throughput/README:
          Fixed paths in the README file, some of the binaries were
          completely wrong.  Made a pass to improved documentation.

Mon Jan 28 12:30:38 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
          The code was generating a TAO_ENV_ARG_PARAMETER in the header
          file.  BIG mistake, I should have generated a TAO_ENV_ARG_DECL.

Mon Jan 28 14:25:04 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.dsp:

          Removed these files and added them below, renamed uniquely so they
          could be inserted into the workspace containing all the Notify tests.

        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter_Supplier.dsp:

          Added these files as renamings of the ones removed above.

        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter.dsw:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter.dsw:

          Changed the names of the included projects to reflect the
          changes above.

        * orbsvcs/tests/Notify/Structured_Filter/Notify_Push_Consumer.cpp:

          Changed the way a signed 64-bit integer is handled in a case
          statement.

        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.cpp:
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp:
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.h:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.cpp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.h:
        * orbsvcs/tests/Notify/Basic/Events_Test.cpp:
        * orbsvcs/tests/Notify/Basic/Events_Test.h:
        * orbsvcs/tests/Notify/Basic/IdAssignment.cpp:
        * orbsvcs/tests/Notify/Basic/IdAssignment.dsp:
        * orbsvcs/tests/Notify/Basic/IdAssignment.h:
        * orbsvcs/tests/Notify/Basic/LifeCycleTest.cpp:
        * orbsvcs/tests/Notify/Basic/LifeCycleTest.dsp:
        * orbsvcs/tests/Notify/Basic/LifeCycleTest.h:
        * orbsvcs/tests/Notify/Basic/Simple.cpp:
        * orbsvcs/tests/Notify/Basic/Simple.h:
        * orbsvcs/tests/Notify/Basic/Updates.cpp:
        * orbsvcs/tests/Notify/Basic/Updates.h:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/lib/Notify_PushConsumer.cpp:
        * orbsvcs/tests/Notify/lib/Notify_PushSupplier.cpp:
        * orbsvcs/tests/Notify/lib/Notify_SequencePushConsumer.cpp:
        * orbsvcs/tests/Notify/lib/Notify_SequencePushSupplier.cpp:
        * orbsvcs/tests/Notify/lib/Notify_StructuredPushConsumer.cpp:
        * orbsvcs/tests/Notify/lib/Notify_StructuredPushSupplier.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.h:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.cpp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.h:

          Cosmetic changes.

Mon Jan 28 12:23:39 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be_include/be_visitor_argument/argument.h:
        * TAO_IDL/be/be_visitor_argument/argument.cpp:
          Add functionality to support fixed-direction arguments, i.e. the
          visitor caller can override the actual direction of the
          argument.  This is used in AMH to make all the INOUT arguments
          behave as IN arguments.

        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
          Use the set_fixed_direction() functionality in the
          be_visitor_args visitors to generate correct code for the INOUT
          arguments in an AMH function.

        * TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
          Removed extra argument in the generate_shared_section() helper,
          the argument is no longer needed.


        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
          Fixed problem in UTL_ScopeActiveIterator, a bogus si.next() was
          left in the for()-loop body.

Mon Jan 28 12:15:43 2002  Ossama Othman  <ossama@uci.edu>

        * tests/OBV/Forward/server.dsp:

          Corrected TAO_IDL compiler path in "Debug" configuration
          dependencies.

Mon Jan 28 11:50:27 2002  Ossama Othman  <ossama@uci.edu>

        * performance-tests/Latency/AMH/Single_Threaded/run_test.pl:
        * performance-tests/Latency/AMI/run_test.pl:
        * performance-tests/Latency/DII/run_test.pl:
        * performance-tests/Latency/Deferred/run_test.pl:
        * performance-tests/Latency/Single_Threaded/run_test.pl:
        * performance-tests/Latency/Thread_Per_Connection/run_test.pl:
        * performance-tests/Latency/Thread_Pool/run_test.pl:

          Corrected Perl include path.  Thanks to Carlos for pointing out
          the problem.

Mon Jan 28 11:38:22 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
        * TAO_IDL/be_include/be_visitor_operation/amh_sh.h:
        * TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
          Another iteration in the AMH support.  This time we make sure
          that only IN and INOUT arguments are generated in the AMH
          skeletons, but I believe that INOUT arguments are not generated
          correctly.

Mon Jan 28 11:17:40 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_ami_pre_proc.cpp:
          Removed last instances of head-allocated
          UTL_ScopeActiveIterator, hopefully this will stop the madness
          and people will cut&paste the "Right Thing"[tm] from now on.

Mon Jan 28 10:50:40 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/Notify/Notify_Constraint_Visitors.cpp:

          Removed some lines of unreachable code.

Mon Jan 28 10:39:26 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Application_Test/ifr_dii_client.cpp:

          Changed the name of a local variable to avoid a warning,
          on SunOS Forte, of a possible hiding of a class member
          variable.

Mon Jan 28 08:39:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * performance-tests/Makefile.bor:
          Updated BCB makefile with changes in Latency tests

Sun Jan 27 14:35:32 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Pluggable.cpp (make_mprofile):

          Fixed support for parsing URL style IORs with multiple addrs in
          them.  [Bug 1130]

Sun Jan 27 13:22:11 2002  Ossama Othman  <ossama@uci.edu>

        * performance-tests/README:
        * performance-tests/Latency/README:

          Updated in accordance with the new "Latency" performance test
          organization.

Sun Jan 27 12:51:02 2002  Ossama Othman  <ossama@uci.edu>

        * performance-tests/Makefile (DIRS):

          Updated in accordance with the new "Latency" performance
          test organization.

        * performance-tests/Latency/Makefile (DIRS):
        * performance-tests/Latency/Makefile.bor (DIRS):
        * performance-tests/Latency/AMH/Makefile (DIRS):
        * performance-tests/Latency/AMH/Makefile.bor (DIRS):

          Makefiles for the newly reorganized "Latency" performance
          tests.

Sun Jan 27 12:02:37 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.cpp:
          Added missing explicit template instantiation.

Sun Jan 27 15:04:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * Makefile.bor:
          Added the XML library

Sun Jan 27 00:52:49 2002  Ossama Othman  <ossama@uci.edu>

        * tests/ORT/ORT_test_IORInterceptor.cpp:
        * tests/ORT/client.cpp:
        * tests/ORT/server.cpp:

          Minor code review.  Nothing major.  Just style issues.

Sat Jan 26 23:09:56 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB.h:
        * tao/ORB.cpp (id, register_initial_reference):

          The CORBA specification recently added these methods to the
          CORBA::ORB interface.  Implemented them.

        * tao/ORB_Core.cpp:

          Moved template instantiations from `ORB.cpp' to this file. They
          aren't used in the former.

        * tao/Object_Ref_Table.h:
        * tao/Object_Ref_Table.cpp:

          Synchronize access to the underlying hash map by instantiating
          the template(s) with a TAO_SYNCH_MUTEX instead of an
          ACE_Null_Mutex.  Multiple threads may potentially attempt to
          register an object reference concurrently.

        * tao/ClientRequestInfo_i.cpp (get_service_context_i):

          Corrected exception minor code (26 instead of incorrect 23).

Sat Jan 26 22:53:04 2002  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

        * examples/Callback_Quoter/Notifier_i.cpp:
        * tao/Asynch_Invocation.cpp:
        * tao/corbafwd.h:
        * tao/PortableServer/poa_macros.h:
          Removed dependence on tao/try_macros.h.

        * tao/orbconf.h: Added back special comment line for Doxygen.

Sat Jan 26 13:44:39 2002  Ossama Othman  <ossama@uci.edu>

        * docs/releasenotes/TODO.html:

          Updated Bugzilla URL.

Sat Jan 26 20:10:04 2002  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

        * tao/orbconf.h (TAO_ENV_ARG_DEFN): Removed.

Sat Jan 26 20:10:04 2002  Oliver Kellogg  <oliver.kellogg@sysde.eads.net>

        * tests/ORT/ORT_test_IORInterceptor_ORBInitializer.cpp
          (ORT_test_IORInterceptor_ORBInitializer::post_init):
          Removed TAO_ENV_ARG_DEFN and corrected usage of
          TAO_ENV_ARG_PARAMETER.

Fri Jan 25 19:05:24 2002  Ossama Othman  <ossama@uci.edu>

        * tests/OBV/Forward/server.dsp:

          Added missing IDL custom build step for the "Release"
          configuration.

Fri Jan 25 20:14:19 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/PortableServer/Makefile:

          Added missing PortableGroup_Hooks.

Fri Jan 25 14:25:11 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * performance-tests/AMH_Single_Threaded_Latency/Roundtrip.h:
        * performance-tests/AMH_Single_Threaded_Latency/Roundtrip.cpp:
          Changed TAO_ENV_SINGLE_ARG_DECL to TAO_ENV_ARG_DECL.  I had
          copied the code as is from the Single_threaded_Latency test and
          since for AMH_skeletons we add an extra rh paramater, the 'void
          shutdown (void)' method now had an argument (comapred to none
          before).  This was causing a problem on builds that used
          emulated exceptions.

Fri Jan 25 14:10:48 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/AV/RTCP.cpp (handle_stop):

          Removed unreachable statement.

Fri Jan 25 13:26:40 2002  Ossama Othman  <ossama@uci.edu>

        * tests/OBV/Any/AnyS_impl.cpp (magic):

          Removed unsed global variable.

Fri Jan 25 11:34:35 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/ast/ast_operation.cpp:
        * TAO_IDL/be/be_generator.cpp:
        * TAO_IDL/be/be_operation.cpp:
        * TAO_IDL/be/be_scope.cpp:
        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_scope.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
        * TAO_IDL/be/be_visitor_root/root_sth.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_union/union_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/marshal_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype.cpp:
          For some mystifying reason many UTL_ScopeActiveIterator
          instances were created on the heap, and immediately deleted (or
          not, leaking memory.)
          Funny enough the language has a perfectly usable feature for
          that kind of behavior, it is called "automatic variables".
          Also, several while()-loops were really for()-loops in disguise,
          changed them to make the behavior more obvious.

Fri Jan 25 10:40:03 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/SecurityLevel1/client.dsp:
        * orbsvcs/tests/Security/SecurityLevel1/server.dsp:
        * orbsvcs/tests/Security/SecurityLevel1/SecurityLevel1.dsw:

          Added missing MSVC++ project and workspace files.

Fri Jan 25 10:21:10 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/Big_Request/client.dsp:
        * orbsvcs/tests/Security/Big_Request/server.dsp:
        * orbsvcs/tests/Security/Callback/client.dsp:
        * orbsvcs/tests/Security/Callback/server.dsp:
        * orbsvcs/tests/Security/MT_SSLIOP/client.dsp:
        * orbsvcs/tests/Security/MT_SSLIOP/server.dsp:
        * orbsvcs/tests/Security/Secure_Invocation/client.dsp:
        * orbsvcs/tests/Security/Secure_Invocation/server.dsp:

          Corrected the "Release" configuration output filenames.
          Binaries for "Release" builds belong in the `Release' directory,
          by convention.

Fri Jan 25 10:06:44 2002  Ossama Othman  <ossama@uci.edu>

        * tests/OBV/Any/client.dsp:

          Added missing custom build step in the "Release" configuration
          for the this test's IDL file.

Fri Jan 25 11:24:35 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_array.cpp:

          Added base class constructor calls to class be_array
          constructor.

        * TAO_IDL/be/be_visitor_array/array_cs.cpp:

          Cosmetic changes to source code.

        * TAO_IDL/fe/fe_declarator.cpp:

          Removed addition of arrays to AST at global scope. This seems to
          be legacy code that there is no good reason for, and it was
          causing problems when an array is declared, typedef'd, and
          used as the element of another array at global scope. Anonymous
          arrays and the corresponding typdef (if any) are still
          added to the scope where they are declared. Thanks to Boris
          Kolpackov <boris@upsa.kent.orc.ru> for reporting this bug.

        * TAO_IDL/fe/idl.yy:
        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/y.tab.cpp.diff:

          Made change for sequences similar to change for arrays
          above.

Fri Jan 25 12:14:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * performance-tests/AMH_Single_Threaded_Latency/*.bor:
          Added BCB makefiles

Fri Jan 25 00:04:05 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * docs/tutorials/Quoter/RT_Event_Service/Makefile:
        * docs/tutorials/Quoter/On_Demand_Activation/Makefile:
        * docs/tutorials/Quoter/AMI/Makefile:
        * docs/tutorials/Quoter/idl/Makefile:
          Regenerated dependencies.

Thu Jan 24 20:15:01 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * performance-tests/AMH_Single_Threaded_Latency/AMH_Single_Threaded_Latency.dsw:
        * performance-tests/AMH_Single_Threaded_Latency/client.dsp:
        * performance-tests/AMH_Single_Threaded_Latency/server.dsp:
          Workspace and projects for the AMH performance test.

Thu Jan 24 18:51:21 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * performance-tests/AMH_Single_Threaded_Latency:
        * performance-tests/AMH_Single_Threaded_Latency/client.cpp:
        * performance-tests/AMH_Single_Threaded_Latency/server.cpp:
        * performance-tests/AMH_Single_Threaded_Latency/Roundtrip.h:
        * performance-tests/AMH_Single_Threaded_Latency/Roundtrip.cpp:
        * performance-tests/AMH_Single_Threaded_Latency/Makefile:
        * performance-tests/AMH_Single_Threaded_Latency/run_test.pl:
        * performance-tests/Makefile:
        * performance-tests/Makefile.bor:
        * performance-tests/README:
          Performance test for AMH based on the Single_Threaded_Latency
          test.

Thu Jan 24 17:47:00 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_decl.cpp:
          Fixed the implementation of compute_flat_name() there was
          nothing flat about the named computed: it used the regular full
          name for the containing scope, so for nested modules the results
          were wrong.

        * TAO_IDL/be/be_interface.cpp:
          Fixed warning about unused argument and made several cosmetic
          fixes.

        * TAO_IDL/be/be_visitor_argument.cpp:
        * TAO_IDL/be/be_visitor_argument/vardecl_ss.cpp:
          Cosmetic fixes.

        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
          Implement code to process attributes as well as operations.

        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
          Fixed implementation of the _downcast() method on the AMH
          skeleton.

        * TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
        * TAO_IDL/be_include/be_visitor_interface/interface_ss.h:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
          Generate correct code for AMH-copy constructors.  I used the new
          class-based traverse_inheritance_graph().

        * TAO_IDL/be_include/be_visitor_operation/amh_sh.h:
        * TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
          Add support for attributes, in both cases I used a technique
          slightly different from what the rest of the IDL compiler does.
          Normally a fake be_operation node is generated on the fly
          (usually heap allocated) and used to generate the code "as if"
          it was a real operation.  However, the code to generate
          operations has to be modified to treat these nodes with some
          magic, because the attribute name (on GIOP) are different than
          the actual name of the attribute.
          My approach was to re-factor the common code to generate
          attributes and operations in these new fangled things called
          "subroutines".  The attribute code calls the subroutines to
          generate the desired code.  I did have to generate a temporary
          node (of type be_argument), but I was able to stack-allocate it
          and use it in a very localized section of the code.
          Also, none of the operation code has to understand about
          attributes.


Thu Jan 24 15:48:01 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * tao/TAO_Static.dsp:
        * tao/PortableServer/TAO_PortableServer_Static.dsp:

          Fixed worspaces regarding moving of the AMH_Response_Handler
          files.

Thu Jan 24 11:48:01 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be_include/be_interface.h:
          Use the new class-based version traverse_inheritance_graph() to
          generate the operation table.  The name of the derived class is
          computed by the caller and pass through the Worker class down to
          the code generation routines.  This was useful to factor out the
          common code between the AMH-class (where the base class name is
          not obtainable via a simple method call) and the regular
          (non-AMH) skeletons.
          Also use stack-allocate iterators, it makes no sense in the
          world to allocate an object from the head only to delete when we
          return from the function!
          Change some while() loops to for() loops because the latter
          document the intent better.

Thu Jan 24 12:35:17 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * TAO_IDL/be_include/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Fixed a bug in typecode generation for multidimension arrays.
          Implemented first part of new recursive IDL handling machanism.
           Refactored some repetitive code.

Thu Jan 24 00:08:22 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/IORInfo.cpp:
        * tao/PortableServer/ObjectReferenceTemplate.cpp:
        * tao/PortableServer/ObjectReferenceTemplate.h:
        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POA.h:
        * tao/PortableServer/POA.i:

          Code review!  Left a whole slew of "@@" comments regarding
          disfunctional code, exception safety, memory leaks, etc.

Wed Jan 23 22:00:16 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/IORInfo.cpp
          (manager_id, state, current_factory):

          Fixed code that couldn't possibly work since an exception was
          always thrown.  Where's the testing?!

Wed Jan 23 16:40:21 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

        * tao/ORB.cpp:
          Made changes to get the correct port value to search the NameService
          when the ORBDefaultInitRef option is used.
          The changes are made thanks to Andrew L. Shwaika<als@solvo.ru>

Wed Jan 23 14:16:35 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/include/ast_argument.h:
          Changed values of the AST_Argument::Direction enum.  The new
          values allow me to specify sets of directions as bit masks.

        * TAO_IDL/include/ast_operation.h:
        * TAO_IDL/ast/ast_operation.cpp:
          Add new method to count the arguments in a given set of
          directions, for example, all (dir_IN|dir_OUT) arguments.

        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
          The AMH_<Interface> class was deriving from the non-AMH
          classes.
          Remove stale comments.
          Use UTL_ScopeActiveIterator on the stack, there is no sense in
          declaring objects with a well-defined scope on the heap!  Fixed
          a memory leak in the process.

        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
          After we generate the ResponseHandler argument in AMH-operations
          we need to insert a comma, but only if there are IN or INOUT
          arguments.  The code used to check for any kind of argument.

        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
          Generate the code for the _tao_in variable (the TAO_InputCDR) in
          the skeleton.
          Fix indentation in the skeleton.
          Insert the arguments for the upcall.  Unfortunately we are
          generating *all* the arguments, not only the IN and INOUT ones.

        * TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
          Eliminate duplicate code using the
          count_arguments_with_direction routine.


Wed Jan 23 13:09:40 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/AMH_Response_Handler.h:

          Fixed a "fuzz" error related to a filename mismatch.

          Declare the class attributes after the class methods to more
          closely match ACE/TAO programming styles and common C++
          conventions.  Darn Java programmers!

          Wrapped overly long lines in class documentation.

Wed Jan 23 12:06:37 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * tao/Makefile:
        * tao/Makefile.bor:
        * tao/PortableServer/Makefile:
        * tao/PortableServer/Makefile.bor:

          Updated the files with the changes of moving the
          AMH_Response_Handler files from `tao' and `tao/PortableServer'.

Wed Jan 23 12:03:01 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
        * TAO_IDL/be_include/be_visitor_interface/interface_ss.h:

          Fixed generate of the _downcast() method for AMH skeletons.  I
          used the new worker class to traverse inheritance graphs to do
          the job.

Wed Jan 23 12:00:35 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp
          (authentication_state):

          Do not check if the credential is valid.  Once the credential
          has been authenticated it remains authenticated.  Users should
          call the is_valid() method if they wish to determine whether or
          not the credential has expired.

Wed Jan 23 11:10:33 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * tao/PortableServer/AMH_Response_Handler.h:
        * tao/PortableServer/TAO_PortableServer.dsp:
        * tao/TAO.dsp:

          Changed workspaces and header file to compile/link on Windows
          platforms.

Wed Jan 23 10:47:30 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be_include/be_interface.h:
        * TAO_IDL/be/be_interface.cpp:
          Add a new traverse_inheritance_graph() method that takes a class
          (with a virtual method) instead of a naked pointer to function.
          I will need the new version to pass state into one of the
          traversals.

Wed Jan 23 09:55:33 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:

          Changed code to generate the right signatures for constructors
          and destructors, similar to the way it is done in
          be_visitor_operation/amh_rh_ss.cpp.

Wed Jan 23 09:33:31 2002  Ossama Othman  <ossama@uci.edu>

        * tests/ORT/ORT_test_IORInterceptor.cpp
          (establish_components, components_established):

          Fixed unused argument warnings.

Wed Jan 23 09:30:19 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Current.pidl:

          Removed backslashes in comments.  Some compilers correctly flag
          them as potential problems through warnings.

Wed Jan 23 09:25:31 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h:

          Corrected some documentation.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp (is_valid):

          Implemented this method.

Wed Jan 23 11:05:04 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * examples/Quoter/Quoter.idl:

          Added leading underscore to an operation parameter
          named 'object' because it clashes with the IDL
          keyword 'Object'.

Wed Jan 23 16:14:43 2002 Boris Kolpackov  <bosk@ipmce.ru>

        * TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:

          Fixed mistake in initialization of _tao_retval for valuetypes.

        * tests/OBV/Any/Makefile:
        * tests/OBV/Forward/Makefile:

          Fixed few stupid mistakes that made some time ago.

        * tao/ValueBase.h

          Added work around for famous Sun CC "pure virtual function called"
          bug. Unfortunately this involves introduction of yet another #define.
          See include/makeinclude/platform_sunos5_sunc++.GNU for more information.

Wed Jan 23 06:43:27  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushSupplier_i.cpp:

          Added missing include files.

Wed Jan 23 06:24:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.cpp (create):
        * orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.h: Fixed warnings in
          Borland builds.

Tue Jan 22 17:21:15 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_marshal_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_post_invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_pre_invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_return_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/rettype_vardecl_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/thru_poa_collocated_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
          Made stupid mistake in last round of changes: I did not test on
          a platform without exceptions enabled.
          This revealed a number of inconsistencies in the generated code,
          as well as very complicated logic to process arrays, sequences
          and interfaces as return arguments.
          Unfortunately, we were generating '_tao_safe_retval' for some
          types, and using _tao_retval for a dummy variable.  In yet other
          places we generated such a variable but not used it, yuck.
          I have made the generated code mode consistent, this allows the
          re-use in the last change, but it forces us to always call the
          return variable (if any) '_tao_retval'.

Tue Jan 22 19:14:22 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

          Shortened some line lengths that were over 80 characters
          in both source code and generated code. plus other
          cosmetic changes.

Tue Jan 22 15:32:10 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be_include/be_visitor_operation/operation.h:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_factory.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/direct_collocated_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/direct_proxy_impl_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/remote_proxy_impl_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/thru_poa_collocated_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/thru_poa_proxy_impl_ss.cpp:
        * TAO_IDL/be_include/be_visitor_operation/ami_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/ami_handler_reply_stub_operation_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/direct_collocated_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/direct_proxy_impl_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/remote_proxy_impl_cs.h:
        * TAO_IDL/be_include/be_visitor_operation/thru_poa_collocated_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/thru_poa_proxy_impl_ss.h:
          I found multiple copies of the following routines:
          gen_raise_exception(): generate the code to raise exceptions
          using either 'throw', 'ACE_THROW' or 'ACE_THROW_RETURN'.
          gen_check_interceptor_exception(): generate the code to check
          for exceptions (in interceptors) using either
          'TAO_INTERCEPTOR_CHECK or 'TAO_INTERCEPTOR_CHECK_RETURN_RETURN'.
          gen_check_exception(): generate the code to check
          for exceptions (in interceptors) using either 'ACE_CHECK' or
          'ACE_CHECK_RETURN'.
          Interestingly the implementations of these routines were all
          slightly different, for example, some did not deal with non-void
          routines properly, while others did not deal with the
          use_raw_throw() IDL-compiler option.
          The changes were motivated by some Borland warnings, another
          lesson on why we need to keep looking at warnings carefully, and
          not simply shut them up using some hack.

Tue Jan 22 13:36:05 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ClientRequestInfo_i.h (~TAO_ClientRequestInfo_i):
        * tao/ClientRequestInfo_i.cpp (~TAO_ClientRequestInfo_i):

          Added a virtual destructor to silence G++ warnings.

Tue Jan 22 13:19:52 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp (operator==):

          Fixed problem where a const variable was passed as a non-const
          parameter.

Tue Jan 22 12:42:13 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tests/OBV/Forward/Makefile:
        * docs/tutorials/Quoter/Event_Service/Makefile:
        * orbsvcs/tests/Security/Callback/Makefile:
        * performance-tests/Cubit/MT_Cubit/Makefile:
        * performance-tests/Cubit/IDL_Cubit/Makefile:
          Regenerated dependencies.

Tue Jan 22 12:25:31 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/Strategies/simple_test.idl:

          Changed a 'Boolean' to 'boolean'.

Tue Jan 22 11:25:13 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup.dsp:
          Fixed MSVC warning.

Tue Jan 22 11:22:33 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/tests/Miop/McastHello/Makefile:
          Added check to skip compilation under minimum CORBA
          builds.

Tue Jan 22 11:08:02 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/NestedUpcall/Simple/test.idl:

          Changed several operation parameter types from 'UShort'
          to 'unsigned short'.

Tue Jan 22 10:46:41 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/util/utl_idlist.cpp (copy):

          Fixed method to propagate the value of the 'escaped_'
          member of each contained instance of class Identifier.

        * TAO_IDL/util/utl_scope.cpp:

          When checking for case difference errors, modified logic
          to pass the check if one or the other (but not both) of
          the identifiers is escaped.

        * orbsvcs/orbsvcs/LifeCycleService.idl:

          Added an escape to an operation parameter named 'object',
          since it clashes with the IDL keyword 'Object'.

Tue Jan 22 06:52:32 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:

          Reverting the const_cast change from "Mon Jan 21 08:02:28 2002".
          It was not necessary.  Thanks to Christopher Kohlhoff
          <chris@kohlhoff.com> and Johnny Willemsen <jwillemsen@remedy.nl>
          for pointing this out.

Mon Jan 21 17:37:47 2002  Jeff Parsons  <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/InterfaceDef_i.cpp:

          Added checks for illegal oneway operation properties
          (non-void return type, user exceptions, OUT or INOUT
          parameters) that CORBA 2.6 says must cause BAD_PARAM
          minor code 31 to be thrown.

Mon Jan 21 18:03:11 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * tao/TAO_AMH_Response_Handler.cpp
        * tao/TAO_AMH_Response_Handler.h
        * tao/PortableServer/AMH_Response_Handler.cpp
        * tao/PortableServer/AMH_Response_Handler.h

          Removed TAO_AMH_Response_Handler.* files from ORB_CORE and added
          them to tao/PortableServer, also renaming them to
          AMH_Response_Handler. This was doen to reduce tao orb_core
          foot-print.  Other changes to the AMH_Response_Handler:

        - The RH methods are now thread-safe.
        - Documentation of class, methods and members
        - The 'once-only' semantics is now made more
          explicit by using an enum to hold the various ststes.
        - init_reply and send_reply method names changed with _tao_rh_
          prefix to reduce possibility of user defining similar methods in
          IDL and creating a conflict.  Thanks to Carlos for all the '@@'
          comments regarding the above :-)

        * TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp
        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp

          Changed code-generation to generate _tao_rh_init_reply () and
          _tao_init_send_reply () as per changes above.

        * TAO_IDL/be/be_codegen.cpp (start_server_header):
          Changed code generation to include the (tao) ResponseHandler
          classes from the tao/PortableServer/ rather than from tao/

Mon Jan 21 17:15:18 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/include/utl_scope.h:
        * TAO_IDL/util/utl_scope.cpp:

          Because things like 'CORBA::ULong' and 'CORBA::Float'
          are added to the AST automatically, the IDL compiler
          was wrongly accepting types like 'ULong' and "Float'.
          This was fixed in lookup_by_name_local() and a new
          method lookup_pseudo() was added to specialize the
          cases 'Object' and 'TypeCode', where we want to find
          a match. Thanks to Jerome Julius <julius@erols.com> for
          sending in the example IDL file that uncovered this
          problem.

Mon Jan 21 20:59:09 GMT 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * tests/OBV/Any/Makefile:

          Fixed minor bug.

Mon Jan 21 10:51:52 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/examples/Notify/Filter/Filter.dsp:
        * orbsvcs/examples/Notify/Subscribe/Subscribe.dsp:
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.dsp:
        * orbsvcs/tests/Notify/Basic/Events_Test.dsp:
        * orbsvcs/tests/Notify/Basic/IdAssignment.dsp:
        * orbsvcs/tests/Notify/Basic/LifeCycleTest.dsp:
        * orbsvcs/tests/Notify/Basic/Simple.dsp:
        * orbsvcs/tests/Notify/Basic/Updates.dsp:
        * orbsvcs/tests/Notify/Blocking/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Blocking/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Discarding/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Ordering/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Ordering/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.dsp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.dsp:

          Added the ETCL directory to libpath.

Mon Jan 21 10:42:41 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/Notify_Service/Makefile:
        * orbsvcs/examples/Notify/Filter/Makefile:
        * orbsvcs/examples/Notify/Subscribe/Makefile:
        * orbsvcs/tests/Notify/Basic/Makefile:
        * orbsvcs/tests/Notify/Blocking/Makefile:
        * orbsvcs/tests/Notify/Discarding/Makefile:
        * orbsvcs/tests/Notify/MT_Dispatching/Makefile:
        * orbsvcs/tests/Notify/Ordering/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/lib/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Filter/Makefile:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Makefile:

          Reverse the order of the CosNotification and ETCL libs in order to
          link properly with static libraries.

Mon Jan 21 10:30:38 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/Notify_Service/Notify_Service.dsp:
        * orbsvcs/orbsvcs/Fault_Tolerance.dsp:

          Added the ETCL directory to libpath.

Mon Jan 21 08:02:28 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:

          Added const cast's to appease the Borland compiler.

Mon Jan 21 07:15:35 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.h:
        * orbsvcs/tests/Notify/Blocking/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/Blocking/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Blocking/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Discarding/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Ordering/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Ordering/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Notify_Sequence_Push_Consumer.cpp:

          Fix build errors for Debian Minimum.  Added a missing include of
          "orbsvcs/TimeBaseC.h".

Mon Jan 21 06:59:24 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.cpp:
          Fixed compile error. Added #include "tao/debug.h".

Mon Jan 21 04:35:14 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP.idl:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.inl:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp:

          Removed all uses of the OpenSSL RSA data structure and related
          functions in favor of the OpenSSL EVP_PKEY data structure and
          functions.  The latter is more generic, and automatically
          handles multiple private key types.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.inl:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.cpp:

          New TAO_SSLIOP_EVP_PKEY_var class that provides CORBA-style
          memory management of the OpenSSL "EVP_PKEY" key data structure.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.inl:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_EVP_PKEY.cpp:

          Removed these files.  They have been superseded by the EVP_PKEY
          files above.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.inl (_duplicate):

          Do not attempt to increase the reference count if the X509
          pointer is zero.  Fixes a segmentation fault.

        * orbsvcs/orbsvcs/Makefile.SSLIOP:
        * orbsvcs/orbsvcs/SSLIOP.bor:
        * orbsvcs/orbsvcs/SSLIOP.dsp:

          Added new SSLIOP_EVP_PKEY.* files and removed the deprecated
          SSLIOP_RSA.* files.

Mon Jan 21 02:12:34 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h
          (retrieved_credentials):

          Changed the return type to be a Credentials object, thus making
          the method act as advertised.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp
          (ssliop_connect):

          Once a connection has been made and before it is cached, set the
          quality-of-protection, establishment-of-trust and credentials
          specific to the connection in the TAO_SSLIOP_Endpoint.  They
          must be taken into account when searching the transport cache
          for suitable SSLIOP connections.

          (retrieve_credentials):

          Returned the retrieved credentials to the caller instead of
          attempting to do too much in this method.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp
          (operator==, hash):

          Added these comparison methods for use with TAO's transport
          caching mechanism.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h:

          Added a SSLIOP_Credentials attribute, and accompanying
          accessors.

          Removed unnecessary `tao/ORB.h' include.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.i (credentials):

          New "credentials_" member set/get accessor methods.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp
          (is_equivalent, hash):

          Use the corresponding methods in the SSLIOP_Credentials class
          when comparing/hashing two SSLIOP_Credentials objects.

Mon Jan 21 01:05:37 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.cpp
          (TAO_SSLIOP_password_callback):

          Fixed static_cast from "void *" to "const char *".  Such a cast
          is invalid.  Instead, static_cast to a "char *" and then assign
          to a "const char *".

          (make_X509, make_RSA):

          Corrected misuse of ACE_OS::close() where ACE_OS::fclose() was
          expected.

Sun Jan 20 23:14:47 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP.idl:

          Added structures to be filled in with certificate and key
          information.  These will be used in conjunction with the
          SecurityLevel2::PrincipalAuthenticator object, i.e passed in via
          the authenticate() method.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp
          (retrieve_credentials):

          Set the RSA private key for the current invocation if one was
          set in the retrieved credentials.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_RSA.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_RSA.inl:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_RSA.cpp:

          New TAO_SSLIOP_RSA_var class that provides CORBA-style memory
          management of the OpenSSL "RSA" key data structure.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.inl:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp:

          The Credentials objects now hold a pointer to an OpenSSL "RSA"
          key data structure.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.h (make_X509, make_RSA):

          Added these methods to the TAO_SSLIOP_Vault class.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.cpp (acquire_credentials):

          Completed initial implementation of this method.  Support for
          ASN.1 and PEM encoded certificates and RSA private keys is
          available.

          (make_X509, make_RSA):

          New methods create OpenSSL X509 and RSA data structures,
          respectively, based on authentication data supplied by the user.

          (TAO_SSLIOP_password_callback):

          Callback method passed to OpenSSL calls that require passwords
          or passphrases to decrypt PEM files.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_X509.h:

          Include "ace/config-all.h" instead of "tao/corbafwd.h."  The
          former is all that is needed.

        * orbsvcs/orbsvcs/Makefile.SSLIOP:
        * orbsvcs/orbsvcs/SSLIOP.bor:
        * orbsvcs/orbsvcs/SSLIOP.dsp:

          Added new SSLIOP_RSA.* files to the appropriate file lists.

Mon Jan 21 00:13:42 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * orbsvcs/Notify_Service/NT_Notify_Service.bor:
        * orbsvcs/Notify_Service/Notify_Service.bor:
          Added in ETCL library now required for static linking.

        * orbsvcs/orbsvcs/CosNotification.bor:
          Added missing source files Notify_Extensions and
          Notify_StructuredEvents.

        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:
        * orbsvcs/orbsvcs/Security/SecurityManager.cpp:
          Added .in()s in places to fix Borland C++ compiler error about
          ambiguous conversion.

Sun Jan 20 17:38:01 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_exception.cpp:
        * TAO_IDL/ast/ast_sequence.cpp:
        * TAO_IDL/ast/ast_structure.cpp:
        * TAO_IDL/ast/ast_union.cpp:
        * TAO_IDL/be/be_valuetype.cpp:

          Added a check in be_valuetype::in_recursion() to catch
          the case where a valuetype contains a valuetype that
          is recursive. Also changed in_recursion in each of the
          files above to create the scope visitor on the stack
          instead of on the heap. Also removed narrowing of return
          value from field->field_type() to AST_Type - that method
          returns an AST_Type already.

Sun Jan 20 16:33:39 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/Notify_Service/Makefile:

          Added orbsvcs/orbsvcs/ETCL to library search path.

Sun Jan 20 15:56:47 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/OBV/Any/Any.dsw:
        * tests/OBV/Any/client.dsp:
        * tests/OBV/Any/server.dsp:

          Added some files to server.dsp. Also recreated client.dsp
          and added it again to the workspace, since the original
          project file wouldn't load.

Sun Jan 20 09:44:12 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup.dsp:
          Added TAO_CosNaming.lib to link list for Win32 Release.

Sat Jan 19 18:23:54 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.h: Fixed some more
          errors with exception specifications.

Sat Jan 19 23:57:13 GMT 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * tests/OBV/Any/Makefile:
          Regenerated dependencies.

Sat Jan 19 23:30:42 GMT 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
          Fixed some bugs in generated any extraction operator.

Sat Jan 19 14:15:37 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.h: Not sure why this
          was lying in workspace for a long time. Fixed a compile error
          with g++. Exceptions were not specified in the signature and
          hence the error.

Sat Jan 19 10:58:53 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/ServerRequestInfo.cpp (server_id, orb_id):

          Fixed code that didn't conform to the C++ mapping.  The caller
          owns the storage.  Return a string using CORBA::string_dup().
          Don't just return a string with the const-ness casted away.

Sat Jan 19 11:36:22 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/tests/Miop/McastHello/server.cpp (main):
          Fixed a few warnings.  Thanks to Venkita for catching them.

Sat Jan 19 11:16:09 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * utils/nslist/nsdel.cpp:
          Fixed (hopefully!!) compile errors.

Sat Jan 19 09:22:54 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/Transport.cpp: Just swapped a couple of
          #includes. The dependency generation was getting messed up
          somehow.

        * orbsvcs/orbsvcs/Makefile.av: Fixed the dependencies.

Sat Jan 19 09:03:32 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * performance-tests/Cubit/MT_Cubit/Makefile:
          Fixed Makefile error.

Sat Jan 19 09:00:16 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * performance-tests/Cubit/IDL_Cubit/Makefile:
          Fixed Makefile error.

Sat Jan 19 08:52:55 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tests/OBV/Forward/Test_impl.cpp:
          tests/OBV/Forward/Test_impl.h:
          Fixed compile errors.

Sat Jan 19 08:41:01 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tests/OBV/Factory/FactoryS_impl.cpp:
          tests/OBV/Factory/FactoryS_impl.h:
          Fixed compile errors.

Sat Jan 19 08:24:10 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tao/ValueBase.cpp:
          Fixed compile error. Added "#include tao/debug.h".

Fri Jan 18 21:34:33 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile*: Regenerated dependencies.

Fri Jan 18 18:46:39 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/ObjectReferenceTemplate.cpp:

          Removed duplicate template instantiations.  They were already
          defined in ObjectReferenceTemplateC.cpp.

Fri Jan 18 18:25:55 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO_AMH_Response_Handler.cpp:
          Fixed inconsistency in _tao_out field name.

Fri Jan 18 18:02:41 2002  Ossama Othman  <ossama@uci.edu>

        * tao/IFR_Client/IFR_BaseC.cpp:
        * tao/IFR_Client/IFR_BasicC.cpp:
        * tao/IFR_Client/IFR_ComponentsC.cpp:
        * tao/IFR_Client/IFR_ExtendedC.cpp:

          Updated with new Portable Interceptor updates.

Fri Jan 18 16:42:18 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ClientInterceptorAdapter.h:

          No need to include corbafwd.h, ClientRequestInfo.h.  Forward
          declaring classes is sufficient.

          Added a new "TAO_ClientRequestInfo *" member.  It is the cached
          value of the object retrieved from TSS.

        * tao/ClientInterceptorAdapter.inl:

          Initialize the new "info_" member in the base member initializer
          list.

        * tao/ClientInterceptorAdapter.cpp:

          Updated all interception point methods to accept pointers to the
          new TAO_ClientRequestInfo_i pointer.

        * tao/ClientRequestInfo_i.h:
        * tao/ClientRequestInfo_i.inl:
        * tao/ClientRequestInfo_i.cpp:

          New files containing the new "underlying" implementation of the
          PortableInterceptor::ClientRequestInfo interface.  They
          basically contain the implementation that was previously found
          in TAO_ClientRequestInfo.  This new class, i.e.
          "TAO_ClientRequestInfo_i," does not inherit from any class.  All
          operation-specific ClientRequestInfo subclasses in the client
          stubs now inherit from this class.  This removes a lock
          initialization from the critical path, and replaces it with a
          TSS access.  This should improve performance on the client side
          significantly in both cases where interceptors were registered
          and not registered with the ORB.   [Bug 874]

        * tao/ClientRequestInfo.h:

          No need to include "StringSeqC.h."

          Added a new "TAO_ClientRequestInfo_Guard" class that is designed
          to ensure the swapping of TAO_ClientRequestInfo_i pointers in a
          TAO_ClientRequestInfo object is performed in an exception-safe
          manner when interception points are being invoked.

        * tao/ClientRequestInfo.inl:
        * tao/ClientRequestInfo.cpp:

          Moved implementation code to the new TAO_ClientRequestInfo_i
          class.

          Added "TAO_ClientRequestInfo_Guard" class implementation.

        * tao/ORB_Core.h:
        * tao/ORB_Core.cpp:

          Store a TAO_ClientRequestInfo object in the ORB_Core's TSS
          resources.

        * tao/DomainC.cpp:
        * tao/PolicyC.cpp:
        * tao/PortableServer/ImplRepoC.cpp:

          Updated to use new TAO_ClientRequestInfo_i class.

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_operation/interceptors_cs.cpp:

          Updated generated code to use new TAO_ClientRequestInfo_i class.
          [Bug 874]

Fri Jan 18 17:29:36 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO_Server_Request.h:
        * tao/TAO_Server_Request.cpp:
        * tao/TAO_AMH_Response_Handler.h:
        * tao/TAO_AMH_Response_Handler.cpp:
          The TAO_Server_Request class does not depend on
          TAO_AMH_Response_Handler anymore,  instead of forsing
          ServerRequest to know about AMH and make it copy its state to
          the AMH_Response_Handler we make AMH_Response_Handler a
          friend. That way the AMH_Response_Handler can copy whatever
          state it needs.
          Add some comments for Mayur about this stuff.

        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
          Do not generate AMH_*ResponseHandler nodes for AMI nodes or
          other implied-IDL nodes.

        * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
          Fixed inconsistencies in the generated name for the
          TAO_AMH_<InterfaceName>ResponseHandler class.
          Change the constructor of those generated classes to take the
          TAO_ServerRequest parameter.


        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
          Fixed indentation problems.

        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
          Fixed class name in operations (made it consistent with the
          generated name in be_visitor_interface/amh_rh_*.cpp).
          Fixed exception throwing code (it was hardcoded to use
          ACE_THROW, but the IDL compiler should be able to generate raw
          throws also).

        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
          Fixed indentation problem in the generated code.
          Improved error messages in case of failure.
          Set the visitor context state properly for the arglist visitor.

        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
          Use the right constructor for the TAO_AMH_*ResponseHandler
          class.

        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:
        * TAO_IDL/be_include/be_visitor_operation/operation.h:
        * TAO_IDL/be_include/be_visitor_operation/operation_ss.h:
          Move several helper methods to the base class
          (be_visitor_operation), because we need them in classes that do
          not derive from be_visitor_operation_ss

        * TAO_IDL/ast/ast_decl.cpp:
          Fixed small compilation warning.

Fri Jan 18 15:55:59 2002  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/ForwardRequest/client.dsp:
        * tests/Portable_Interceptors/ForwardRequest/server.dsp:

          Added missing TAO_IDL include flag and ValueType generation
          flag.  PortableInteceptor.pidl now has support for
          ObjectReferenceTemplates, which requires ValueType support.

Fri Jan 18 22:30:03 GMT 2002  Boris Kolpackov <bosk@ipmce.ru>

        * tests/OBV/Any/*:
        * tests/OBV/Factory/Makefile:
        * tests/OBV/Forward/Makefile:
        * tests/OBV/README:
        * tests/OBV/Makefile:
        * tests/Makefile:

          Added OBV-and-Any test. Updated relevant Makefile's.

Fri Jan 18 15:41:22 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp (idl_store_pragma):

          Changed the string "id" to match for #pragma ID to
          upper case.

        * TAO_IDL/ast/ast_decl.cpp:

          Changed check in version setting function to correspond to
          the CORBA 2.5 change that now allows the version to be reset
          if it is reset to the same value.

Fri Jan 18 13:19:00 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * tao/TAO_AMH_Response_handler.h:
        * tao/TAO_AMH_Response_handler.cpp:

          Added code that now generates AMH-RH code for operation in
          skeleton-source file.  Changed 'tao_out' CDR stream in
          TAO_AMH_Response_Handler so that the variable names of the
          generated IDL code and that in the tao orb_core files match.

Fri Jan 18 13:47:26 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_include/be_visitor_valuetype.h:
        * TAO_IDL/be/be_visitor_valuetype.cpp:

          Removed duplicate file inclusions.

Fri Jan 18 13:21:28 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_interface.cpp:

          Added patch sent in by Andy Olsen <olsona@uswest.net> that
          limits the last component of the name of the temporary file
          used by gperf to no more than 48 characters, when the
          platform is QNX.

Fri Jan 18 22:16:06 2002  Boris Kolpackov <bosk@ipmce.ru>

        * TAO_IDL/be_include/be_visitor_typecode/typecode_decl.h:
        * TAO_IDL/be_include/be_visitor_typecode/typecode_defn.h:
        * TAO_IDL/be_include/be_visitor_valuetype/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_valuetype/any_op_cs.h:
        * TAO_IDL/be_include/be_valuetype.h:
        * TAO_IDL/be_include/be_visitor_valuetype.h:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be/be_visitor_factory.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
        * TAO_IDL/be/be_visitor_valuetype.cpp:
        * tao/Typecode.h:
        * tao/Marshal.h:
        * tao/Marshal.i:
        * tao/Marshal.cpp:
        * tao/Typecode.cpp:
        * tao/ValueBase.cpp:
        * tao/append.cpp:
        * tao/skip.cpp:
          Added Any and TypeCode support for valuetypes.

Fri Jan 18 11:50:06 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * */Makefile: Regenerated dependencies.

Fri Jan 18 09:32:57 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be_include/be_interface.h:
        * TAO_IDL/be/be_interface.cpp:
          Improved comments in generated code.
          New gen_operation_table() helper method, it can generate an
          operation table with a different class name (and class flat
          name).  This is useful for the AMH code generation.
          Changed the related methods to take a flat_name argument.

        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
          Do not create a temporary "AMH_*" node, the visitors deal with
          the original interface node directly.
          Fixed generation of the _this() method to use the new
          TAO_ENV_ARG_* macros.

        * TAO_IDL/be_include/be_visitor_interface/interface_ss.h:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
          Make the "flat_name" customizable in the be_visitor_interface_ss
          vistor.  This is used to generate an AMH-specific flat name and
          take advantage of the new gen_operation_table() helper method in
          be_interface.

        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
          Since there is no AMH_* node anymore then we need to add the
          AMH_ prefix explicitly.

        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
          Removed traditional visitors, but I still need to add the new
          ones.

Fri Jan 18 09:23:42 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup.dsp:
          Fixed custom build for .idl files for Release builds.

Fri Jan 18 06:54:48 2002  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/orbsvcs.dsw:

          Added ETCL to the dependencies for the Fault_Tolerance workspace.

Thu Jan 17 23:31:13 2002  Ossama Othman  <ossama@uci.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:

          Added missing ObjectReferenceTemplateC.* files.

Fri Jan 18 07:55:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor:
          Added Policy_Validator, ObjectReferenceTemplateC

        * tao/PortableServer/Makefile.bor:
          Removed Policy_Validator

        * tao/BiDir_GIOP/Makefile.bor:
          Added BiDirPolicy_Validator

Thu Jan 17 21:46:16 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.{h,cpp}
          (retrieve_credentials):

          New method that extracts SSLIOP-specific credentials from the
          SecurityLevel2::InvocationCredentialsPolicy via the ORB's policy
          framework.  Extracted credentials will be used when establishing
          the underlying SSL connection.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (ssliop_connect):

          Fixed a memory leak that occurred on error before an attempt to
          establish a connection was made.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ReceivedCredentials.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_TargetCredentials.cpp:

          Added downcast related methods that make it possible to downcast
          to the TAO_SSLIOP-specific interfaces.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Credentials.inl (x509):

          New file that contains the new x509() accessor method.

Thu Jan 17 22:02:38 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Notify_Extensions.h:
        * tao/BiDir_GIOP/BiDirPolicy_Validator.h:
          Fixed Fuzz compile errors.

Thu Jan 17 21:52:22 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * utils/nslist/nsdel.cpp:
          Fixed compile errors on Win32 builds.

Thu Jan 17 19:24:24 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ObjectReferenceTemplateC.h:
          Removed the if-defs around the ValueBase and ValueFactory
          includes. The includes are needed in all cases and not just when
          minimum_corba=1

Thu Jan 17 19:06:58 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.cpp:
          Fixed unused parameter warnings.

Thu Jan 17 18:59:14 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableServer/IORInfo.cpp:
          Fixes for the KCC statement-not-reachable warnings.

Thu Jan 17 18:40:49 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/TAO_Internal.cpp:
          Included the missing debug.h

Thu Jan 17 17:40:55 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * be_include/be_visitor_interface/amh_rh_sh.h:
        * be_include/be_visitor_interface/amh_rh_ss.h:
        * be_include/be_visitor_operation/amh_rh_sh.h:
        * be_include/be_visitor_operation/amh_rh_ss.h:
        * be/be_visitor_interface/amh_rh_sh.cpp:
        * be/be_visitor_interface/amh_rh_ss.cpp:
        * be/be_visitor_operation/amh_rh_sh.cpp:
        * be/be_visitor_operation/amh_rh_ss.cpp:

          Most of the 'bugs' have been fixed with the AMH-RH generated
          code now.  The only known remaining 'to-do' is the generation of
          the marshalling code for the RH-parametes in the skeleton source
          file.

Thu Jan 17 17:39:00 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Acceptor.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Invocation_Interceptor.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Invocation_Interceptor.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ORBInitializer.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ORBInitializer.cpp:

          Use the Security::QOP type instead of an integer to store the
          desired quality-of-protection.  The former is more descriptive.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.h (TAO_SSLIOP_Endpoint):

            Cache the quality-of-protection and establishment-of-trust
          settings associated with the endpoint object.  They are need
          when determining if a given cached connection is suitable for an
          invocation with a given set of security policies
          (e.g. QOPPolicy).

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.i (qop, trust):

          Accessors methods for their cached counterparts.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Endpoint.cpp (is_equivalent, hash):

          Take into account the quality-of-protection and
          establishment-of-trust settings when determining endpoint
          equivalence and computing hashes.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp (ssliop_connect):

          Added support for the Security::SecQOPIntegrity
          quality-of-protection.  Integrity without confidentiality is
          achieved by using the "eNULL" SSL cipher.  Despite the fact that
          encryption is disabled, a secure hash is still used to ensure
          integrity.

          Cleaned up the code in this method.

Thu Jan 17 17:34:10 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ObjectReferenceTemplate.pidl:
        * tao/PortableInterceptor.pidl:
          Moved the ObjectReferenceTemplate stuff from
          PortableInterceptor.pidl to the new
          ObjectReferenceTemplate.pidl. This is needed to get the builds
          straight for the minimum corba. By moving the ORT related part
          to a separate pidl, we are making it (ORT) usable irrespective
          of the usage of interceptors.

        * tao/PortableInterceptorC.i:
        * tao/PortableInterceptorC.h:
        * tao/PortableInterceptorC.cpp:
          Regenerated and applied patches.

        * tao/ObjectReferenceTemplateC.h:
        * tao/ObjectReferenceTemplateC.h:
        * tao/ObjectReferenceTemplateC.h:
          Generated and made modifications as needed.

        * tao/PortableServer/ObjectReferenceTemplate.cpp:
        * tao/PortableServer/ObjectReferenceTemplate.h:
        * tao/PortableServer/ObjectReferenceFactory.cpp:
        * tao/PortableServer/ObjectReferenceFactory.h:
          Since this part is out of the interceptor loop, removed the
          if-defines checking for interceptors. Removed the include of
          PortableInterceptorC.h and included ObjectReferenceTemplateC.h
          instead.

        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POA.h:
          Included StringSeqC.h needed for minimum corba builds.
          Moved wrongly placed #endif for TAO_HAS_MINIMUM_POA check.

        * tao/Makefile:
          Added ObjectReferenceTemplateC to the list of ORB_CORE files.

Thu Jan 17 16:02:50 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be_include/be_visitor_interface/amh_sh.h:
        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
        * TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
          Override visit_operation() and visit_attribute() to invoke the
          AMH-specific visitors.

        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
          Improve comments in generated code, instead of saying silly
          things like "//constructor" (like I didn't know what a
          constructor looks like).  Instead we generate a pointer to where
          the code is generated from.
          Fixed indentation in the generated code also.

        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
          Do not use CORBA::_tc_Object to get the CORBA::Object interface
          repository ID, the string can as easily get hard-coded, is not
          like the OMG changes that string every week.

        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
          The AMH-operations have their AMH_*ResponseHandler argument
          generated, however we still need to double check the arglist
          because some black magic is going on inside the AMH visitor for
          interfaces that seems to create a special operation node.

        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
          Improved skeletons for AMH-operations.  The skeleton is
          starting to take shape, it creates the AMH_*ResponseHandler but
          no marshaling or demarshaling code is present.

        * TAO_IDL/be/be_visitor_operation/arglist.cpp:
        * TAO_IDL/be/be_visitor_operation/operation.cpp:
        * TAO_IDL/be_include/be_visitor_operation/operation.h:
          Factor out code to generate the TAO_ENV_ARG parameter to a
          separate function, that makes it easier to reuse the arglist
          visitors.

Thu Jan 17 17:20:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO_Static.dsp: Added the files the Policy_Validator.*
        * tao/BiDir_GIOP/TAO_BiDir_GIOP.dsp: Added the policy validator
          class files.

Thu Jan 17 17:09:46 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/TAO.dsp (SOURCE): Added the files the Policy_Validator.*
        * tao/PortableServer/*.dsp: Removed the file Policy_Validator.*.

Thu Jan 17 17:04:25 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Acceptor_Impl.h: Removed the out_of_sockets_handler ()
          method as this was not used. Thanks to Andrew
          <andrew@activesol.net> for pointing this out.

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h: Removed the method parse_bidir_policy () method
          and added a new method load_policy_validators ().

        * tao/orbconf.h: Added a new cached policy for BiDir connections.

        * tao/Policy_Validators.h:
        * tao/Policy_Validators.cpp: Moved this class from PortableServer
          library. This is very useful in TAO when policy validators from
          other libraries needs to be added to the POA policy
          validator. We now use this as a basis of a new policy validator
          class in BiDir library. The BiDir library would add its policy
          validator to the POA policy validator.

        * tao/BiDir_Adapter.h: Added a method load_policy_validators () to
          add the policy validator.

        * tao/Makefile: Added the new files.

        * tao/BiDir_GIOP/BiDirPolicy_Validator.h:
        * tao/BiDir_GIOP/BiDirPolicy_Validator.cpp: The new policy
          validator for BiDir GIOP.

        * tao/BiDir_GIOP/BiDirGIOP.cpp:
        * tao/BiDir_GIOP/BiDirGIOP.h:
        * tao/BiDir_GIOP/BiDir_Policy_i.cpp:
        * tao/BiDir_GIOP/BiDir_Policy_i.h:
        * tao/BiDir_GIOP/Makefile: Changes to create and use the validator
          properly.

        * tao/PortableServer/Default_Policy_Validator.cpp:
        * tao/PortableServer/Default_Policy_Validator.h: Changes to use
          the Policy_Validator in TAO.

        * tao/PortableServer/Makefile: Removed the Policy_Validator.* and
          generated dependecies.

        * tao/PortableServer/Policy_Validator.h:
        * tao/PortableServer/Policy_Validator.cpp: Moved to
          $TAO_ROOT/tao.

        * tao/PortableServer/Object_Adapter.h
        * tao/PortableServer/Object_Adapter.i
        * tao/PortableServer/POA.h:
        * tao/PortableServer/POA_Policy_Set.cpp:
        * tao/PortableServer/POA_Policy_Set.h:
        * tao/PortableServer/Policy_Validator.h:
        * tao/RTPortableServer/RT_Policy_Validator.cpp:
        * tao/RTPortableServer/RT_Policy_Validator.h: Changes to
          accomodate the new policy_Validator class in $TAO_ROOT/tao.

Thu Jan 17 12:22:32 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.cpp (init):
        * tao/TAO_Internal.cpp (open_services):

          Moved the parsing code for the "-ORBDebug" and "-ORBDebugLevel"
          options to TAO_Internal::open_services() so that Service_Objects
          and ORBInitializers may use debugging output dependent on their
          values.  Note that this change does not affect other debugging
          code in the ORB.  It simply moves the option parsing code
          earlier in the bootstrapping process.

Thu Jan 17 12:04:41 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp (init):

          The certificate must be set before the private key since the
          ACE_SSL_Context attempts to check the private key for
          consistency.  That check requires the certificate to be
          available in the underlying SSL_CTX.

Thu Jan 17 13:40:09 2002  Chad Elliott  <elliott_c@ociweb.com>

        Added new features to the Notification Service.  The following items
        have been implemented: Sequence Push Consumers/Suppliers, Pacing
        Interval, Maximum Batch Size, Deadline ordering policy,
        Deadline, Priority and LIFO discarding policies.

        Tests were written by Chip Jones <jones_c@ociweb.com> and Pete
        Maher <maher_p@ociweb.com>.

        * docs/releasenotes/index.html:

          Update the documentation to reflect the current state of the
          Notification Service.

        * orbsvcs/Notify_Service/Makefile:
        * orbsvcs/Notify_Service/Notify_Service.dsp:
        * orbsvcs/examples/Notify/Filter/Filter.dsp:
        * orbsvcs/examples/Notify/Filter/Makefile:
        * orbsvcs/examples/Notify/Subscribe/Makefile:
        * orbsvcs/examples/Notify/Subscribe/Subscribe.dsp:
        * orbsvcs/orbsvcs/CosNotification.dsp:
        * orbsvcs/orbsvcs/CosNotification_Static.dsp:
        * orbsvcs/orbsvcs/Fault_Tolerance.dsp:
        * orbsvcs/orbsvcs/Makefile.CosNotification:
        * orbsvcs/orbsvcs/orbsvcs.dsw:

          Update Makefiles and project files to use the ETCL library.

        * orbsvcs/orbsvcs/Notify/Notify_AdminProperties.h:
        * orbsvcs/orbsvcs/Notify/Notify_AdminProperties.i:
        * orbsvcs/orbsvcs/Notify/Notify_AdminProperties.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.h:
        * orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Command.h:
        * orbsvcs/orbsvcs/Notify/Notify_Command.i:
        * orbsvcs/orbsvcs/Notify/Notify_ConsumerAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Processor.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Processor.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Extensions.h:
        * orbsvcs/orbsvcs/Notify/Notify_Extensions.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_FilterFactory_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_MT_Worker_Task.h:
        * orbsvcs/orbsvcs/Notify/Notify_MT_Worker_Task.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ProxyConsumer_T.h:
        * orbsvcs/orbsvcs/Notify/Notify_ProxyConsumer_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.h:
        * orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Proxy_T.h:
        * orbsvcs/orbsvcs/Notify/Notify_Proxy_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_QoSAdmin_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_QoSAdmin_i.inl:
        * orbsvcs/orbsvcs/Notify/Notify_QoSAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushConsumer_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushSupplier_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_SequenceProxyPushSupplier_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Signal_Property_T.h:
        * orbsvcs/orbsvcs/Notify/Notify_Signal_Property_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_StructuredEvents.h:
        * orbsvcs/orbsvcs/Notify/Notify_StructuredEvents.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Worker_Task.h:
        * orbsvcs/orbsvcs/Notify/Notify_Worker_Task.cpp:

          Modifications and additions for the new features.

        * orbsvcs/tests/Notify/Makefile:
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp:
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.h:
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.cpp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.dsp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.h:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.cpp:
        * orbsvcs/tests/Notify/Basic/Events_Test.dsp:
        * orbsvcs/tests/Notify/Basic/Events_Test.h:
        * orbsvcs/tests/Notify/Basic/Events_Test.cpp:
        * orbsvcs/tests/Notify/Basic/IdAssignment.dsp:
        * orbsvcs/tests/Notify/Basic/LifeCycleTest.dsp:
        * orbsvcs/tests/Notify/Basic/Makefile:
        * orbsvcs/tests/Notify/Basic/Simple.dsp:
        * orbsvcs/tests/Notify/Basic/Simple.h:
        * orbsvcs/tests/Notify/Basic/Simple.cpp:
        * orbsvcs/tests/Notify/Basic/Updates.dsp:
        * orbsvcs/tests/Notify/Basic/Updates.h:
        * orbsvcs/tests/Notify/Basic/Updates.cpp:
        * orbsvcs/tests/Notify/lib/Makefile:
        * orbsvcs/tests/Notify/lib/Notify_Test_Client.h:
        * orbsvcs/tests/Notify/lib/Notify_Test_Client.cpp:
        * orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.dsp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.dsp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.h:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.cpp:

          Update the current Nofication tests to allow smooth integration of
          the new tests.

        * orbsvcs/tests/Notify/Blocking/Blocking.dsw:
        * orbsvcs/tests/Notify/Blocking/Makefile:
        * orbsvcs/tests/Notify/Blocking/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/Blocking/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Blocking/README:
        * orbsvcs/tests/Notify/Blocking/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Blocking/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Blocking/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Blocking/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Blocking/common.h:
        * orbsvcs/tests/Notify/Blocking/common.cpp:
        * orbsvcs/tests/Notify/Blocking/go.idl:
        * orbsvcs/tests/Notify/Blocking/notify.conf:
        * orbsvcs/tests/Notify/Blocking/run_test.pl:
        * orbsvcs/tests/Notify/Discarding/Discarding.dsw:
        * orbsvcs/tests/Notify/Discarding/Makefile:
        * orbsvcs/tests/Notify/Discarding/Notify_Sequence_Push_Consumer.h:
        * orbsvcs/tests/Notify/Discarding/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Discarding/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/Discarding/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Discarding/README:
        * orbsvcs/tests/Notify/Discarding/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Discarding/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Discarding/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Discarding/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Discarding/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Discarding/common.h:
        * orbsvcs/tests/Notify/Discarding/common.cpp:
        * orbsvcs/tests/Notify/Discarding/go.idl:
        * orbsvcs/tests/Notify/Discarding/notify.conf:
        * orbsvcs/tests/Notify/Discarding/run_test.pl:
        * orbsvcs/tests/Notify/MT_Dispatching/MT_Dispatching.dsw:
        * orbsvcs/tests/Notify/MT_Dispatching/Makefile:
        * orbsvcs/tests/Notify/MT_Dispatching/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/MT_Dispatching/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/MT_Dispatching/README:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/MT_Dispatching/go.idl:
        * orbsvcs/tests/Notify/MT_Dispatching/notify_mtdispatching.conf:
        * orbsvcs/tests/Notify/MT_Dispatching/notify_mtlistener.conf:
        * orbsvcs/tests/Notify/MT_Dispatching/notify_mtsource.conf:
        * orbsvcs/tests/Notify/MT_Dispatching/notify_nothreads.conf:
        * orbsvcs/tests/Notify/MT_Dispatching/run_test.pl:
        * orbsvcs/tests/Notify/Ordering/Makefile:
        * orbsvcs/tests/Notify/Ordering/Notify_Sequence_Push_Consumer.h:
        * orbsvcs/tests/Notify/Ordering/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/Ordering/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Ordering.dsw:
        * orbsvcs/tests/Notify/Ordering/README:
        * orbsvcs/tests/Notify/Ordering/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Ordering/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Ordering/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Ordering/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Ordering/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Ordering/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Ordering/common.h:
        * orbsvcs/tests/Notify/Ordering/common.cpp:
        * orbsvcs/tests/Notify/Ordering/go.idl:
        * orbsvcs/tests/Notify/Ordering/notify.conf:
        * orbsvcs/tests/Notify/Ordering/run_test.pl:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Notify_Sequence_Push_Consumer.h:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/README:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Multi_ETCL_Filter.dsw:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/common.h:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/common.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/go.idl:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/notify.conf:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Notify_Sequence_Push_Consumer.h:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/README:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Multi_Filter.dsw:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/common.h:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/common.cpp:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/go.idl:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/notify.conf:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Filter/Notify_Push_Consumer.h:
        * orbsvcs/tests/Notify/Structured_Filter/Notify_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Structured_Filter/README:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Filter.dsw:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Structured_Filter/control.idl:
        * orbsvcs/tests/Notify/Structured_Filter/run_test.pl:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Makefile:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Notify_Push_Consumer.h:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Notify_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Notify_Push_Supplier.h:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Notify_Push_Supplier.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/README:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Multi_Filter.dsw:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/control.idl:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/run_test.pl:
        * orbsvcs/tests/Notify/performance-tests/Filter/Filter.dsw:
        * orbsvcs/tests/Notify/performance-tests/Filter/Makefile:
        * orbsvcs/tests/Notify/performance-tests/Filter/Notify_Sequence_Push_Consumer.h:
        * orbsvcs/tests/Notify/performance-tests/Filter/Notify_Sequence_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Notify_Structured_Push_Consumer.h:
        * orbsvcs/tests/Notify/performance-tests/Filter/Notify_Structured_Push_Consumer.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/README:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Supplier.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Supplier.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Supplier.dsp:
        * orbsvcs/tests/Notify/performance-tests/Filter/Structured_Supplier.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/common.h:
        * orbsvcs/tests/Notify/performance-tests/Filter/common.cpp:
        * orbsvcs/tests/Notify/performance-tests/Filter/go.idl:
        * orbsvcs/tests/Notify/performance-tests/Filter/notify.conf:
        * orbsvcs/tests/Notify/performance-tests/Filter/run_test.pl:

          Add many new tests to test the various features of the
          Notification Service.

Thu Jan 17 11:03:14 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
        * TAO_IDL/be_include/be_visitor_interface/interface_ss.h:
          Fixed code generation for the AMH_* classes, at this point the
          code for *S.h looks reasonable (and compiles!).
          Ditto for the _is_a(), _interface() and similar methods in the
          *S.cpp file, but we need to fix the generated skeletons.

Thu Jan 17 10:40:57 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security/EstablishTrustPolicy.cpp
          (policy_type, destroy, trust):
        * orbsvcs/orbsvcs/Security/QOPPolicy.cpp
          (policy_type, destroy, qop):

          Fixed unused parameter warnings.

Thu Jan 17 10:30:41 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security/Security_ORBInitializer.cpp (pre_init):

          Create and register the SecurityManager object with the ORB's
          resolve_initial_references() mechanism.

Thu Jan 17 10:17:18 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_codegen.cpp:
          Add the #include for "tao/TAO_AMH_Response_Handler.h" if needed.

        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
          Add missing close braces in the generated code.  We never
          finished the definition of the AMH_* class.

        * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
          We were not closing the definition of the
          TAO_AMH_*ResponseHandler class either.
          Fixed TAO_AMH_Response_Handler name in generated code.
          Fixed indentation in the generated code too.

Thu Jan 17 10:08:36 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security/SecurityManager.cpp
          (remove_own_credentials):

          Corrected assignment where equality conditional was expected.

Thu Jan 17 09:49:23 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
          Fixed the UTL_ScopedName for the AMH_*ResponseHandler, finally
          we got the generated code to look like we want (and compiles
          too!)

Thu Jan 17 10:28:54 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp.diff:

          Initialized two register char* variables in the generated
          lex file. Even though they are clearly initialized about
          20 lines down and never skipped, Redhat Static seems to
          have a problem with it.

Thu Jan 17 10:25:54 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * TAO_IDL/be_include/be_interface_strategy.h:
          Fixed compile errors.

Thu Jan 17 09:25:11 2002  Frank Hunleth   <fhunleth@cs.wustl.edu>

        * orbsvcs/tests/Miop/Makefile: Added.

Thu Jan 17 09:25:11 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.cpp:
          Fixed KCC warning.

Thu Jan 17 00:54:41 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

          Made code generation logic for AMH-skeletons and AMH-RH
          consistent (and symmetric) in the amh_rh and amh_ss files.

Tue Jan 17 08:12:22 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Security.bor:
          Added missing IDL build rule for SecurityReplaceable.idl

Wed Jan 16 22:46:12 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h (ssliop_connect):

          Updated this method to accept a "no protection" parameter.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp
          (connect, ssliop_connect):

          In the "NoProtection/EstablishTrust" case, establish a
          connection using the "eNULL" cipher.  This disables encryption
          but allows certificate authentication to occur.  Previously two
          connections were used, one to authenticate over SSL and the
          other to invoke requests over plain IIOP, which is clearly
          undesirable.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp (init):

          If "NoProtection" is enabled, then add the "eNULL" cipher to the
          default cipher list.  This allows encryption to be disabled
          while allowing certificate authentication to occur.

Wed Jan 16 20:08:39 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security/PrincipalAuthenticator.h:

          Cache a reference to the SecurityManager passed in as a
          parameter to the constructor.

        * orbsvcs/orbsvcs/Security/PrincipalAuthenticator.cpp
          (authenticate, continue_authentication):

            Register authenticated credentials with the SecurityManager's
          "own credentials" list.

        * orbsvcs/orbsvcs/Security/SecurityManager.h:

          Added an "own_credentials" attribute.  All credentials
          authenticated by the PrincipalAuthenticator will be stored in
          it.

        * orbsvcs/orbsvcs/Security/SecurityManager.cpp
          (principal_authenticator):

          Pass a pointer to the SecurityManager to the
          PrincipalAuthenticator's constructor so that the
          PrincipalAuthenticator may call back some of the
          SecurityManager's methods.

          (own_credentials, remove_own_credentials):

          Implemented these SecurityLevel2::SecurityManager methods.

          (add_own_credentials):

          New TAO-specific method used internally by the
          PrincipalAuthenticator to register authenticated credentials
          with SecurityManager's "own credentials" list.

Wed Jan 16 21:26:14 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile:
          Disabled compiling PortableGroup when Minimum CORBA is
          enabled.

        * orbsvcs/orbsvcs/Makefile.PortableGroup:
          Regenerated dependencies.

        * orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Request_Dispatcher.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp:
          Fixed a misuses of TAO_ENV_ARG_*.

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
          Fixed subtle typo on MIOP packet segmentation.

        * orbsvcs/tests/Makefile:
          Added MIOP.

        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POA.h:
        * tao/PortableServer/PortableGroup_Hooks.h:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/PortableServer/PortableServerC.h:
        * tao/PortableServer/PortableServerC.i:
        * tao/diffs/PortableServerC.cpp.diff:
        * tao/diffs/PortableServerC.h.diff:
        * tao/diffs/PortableServerC.i.diff:
          #ifdef'd out PortableGroup additions to the POA when
          minimum CORBA is enabled.

Wed Jan 16 20:28:56 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Wait_Never.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Wait_Never.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
        * orbsvcs/orbsvcs/PortableGroup.bor:
        * orbsvcs/orbsvcs/Makefile.PortableGroup:
        * orbsvcs/orbsvcs/PortableGroup.dsp:
          Added custom wait strategy for UIPMC to prevent any
          one from waiting for a response.  Previously, if
          someone tried invoking a twoway using MIOP, execution
          would hang until a time out.  This way, the user
          gets a system exception if they ever try to wait for
          a response.

Wed Jan 16 19:18:14 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * performance-tests/AMI_Latency/client.cpp:
          Fixed compile errors.

Wed Jan 16 13:17:04 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * TAO_IDL/be_include/be_visitor_interface/interface.h:
        * TAO_IDL/be/be_visitor_interface/interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

          Added method to check if a particular node is an 'AMH' node that
          was added during pre-processing.  This check is used to
          dynamically create the amh_rh visitors in interface_s{h/s}
          visitors.

Wed Jan 16 12:57:56 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
          The AMH_*ResponseHandler identifier should not include the
          Module:: prefix.  The fix is incomplete, as I believe that the
          Identifier for the implied be_interface node should have the
          enclosing scope identifier, but this change makes the *C.h file
          compilable.
          Also fixed the operations for the implied AMH_*ResponseHandler,
          they were supposed to be 'local' too.

Wed Jan 16 12:22:13 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:

          Fixed Fuzz errors for @file

Wed Jan 16 14:12:17 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_global.cpp:

          Added initialization of the gen_amh_classes_ member.

        * TAOACE.dsw:

          Restored ETCL project to workspace and updated project
          dependencies for this project and for CosNotifcation. My
          previous checkin of these changes got clobbered someehow.

        * orbsvcs/orbsvcs/CosNotification.dsp:

          Somehow these settings got clobbered as well.

Wed Jan 16 12:02:40 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PICurrent.cpp (copy):

          Only perform the shallow/logical copy if the source slot table
          was modified.  Fixes a problem where values logically copied
          from the RSC to the TSC were lost after the TSC was copied back
          to the RSC, despite the fact the TSC's slot table was not
          modifed.  Thanks to Greg Hall <Greg.Hall@Australia.Boeing.com>
          for discovering the problem.

Wed Jan 16 11:45:23 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableServer/ObjectReferenceTemplate.cpp (adapter_name):
          Fixed warnings on Debian_NoInline build.

Wed Jan 16 11:38:21 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/ORT/server.cpp (main):
        * orbsvcs/examples/ORT/Object_Factory_i.cpp:
        * orbsvcs/examples/ORT/Gateway_ObjRef_Factory.h:
        * orbsvcs/examples/ORT/gateway_server.cpp :
        * orbsvcs/examples/ORT/server.cpp :
        * orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.cpp:
          Fixed fuzz compile errors.

Wed Jan 16 11:23:04 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/ior_corbaloc/README (ftp):
          Updated the README.

          Thanks to Gerhard Voss <Gerhard_Voss@t-online.de> for
          reporting that it is outdated.

Wed Jan 16 08:37:55 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * utils/nslist/nsdel.cpp:
          Fixed compile errors.

Wed Jan 16 08:33:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/ETCL.bor:
          Added BCB makefile for this new library

        * orbsvcs/orbsvcs/CosNotification.bor:
          Added ETCL and DynamicAny libraries, removed Trading

        * orbsvcs/orbsvcs/Makefile.bor:
          Added ETCL

        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile.bor:
        * orbsvcs/tests/FaultTolerance/IOGR/Manager.bor:
        * orbsvcs/tests/FaultTolerance/IOGR/Server.bor:
          Use the FTORB library instead of the FT library

        * tests/Portable_Interceptors/ForwardRequest/server.bor:
        * tests/Portable_Interceptors/ForwardRequest/client.bor:
          Added -Gv to the TAO_IDL since PortableInterceptor.pidl now
           has valuetypes.

Tue Jan 15 20:24:24 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
        * TAO_IDL/be_include/be_visitor_valuetype/any_op_ch.h:
        * TAO_IDL/be_include/be_visitor_valuetype/any_op_cs.h:

          New files that generate Any operators for value types.
          For now, all that's generated is the TAO_Valuetype_Manager
          template class instantiation that takes the value type
          as its parameter. The TAO_Object_Manager template
          instantiations for interfaces are generated along with
          the Any operators, so the same approach is followed for
          value types, even though Any operators for value types
          are not yet supported.

        * TAO_IDL/be/be_visitor_factory.cpp:
        * TAO_IDL/be/be_visitor_valuetype.cpp:
        * TAO_IDL/be/be_visitor_module/module.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be_include/be_visitor_valuetype.h:

          Modified files to create and call the visitors in the new
          files above.

Tue Jan 15 17:59:46 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Vault.h:

          New SSLIOP-specific (no-op) implementation of the
          SecurityReplaceable::Vault interface.  These files supersede the
          SSLIOP_PrincipalAuthenticator.* files.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ORBInitializer.cpp:

          Register the SSLIOP-specific Vault object with the Security
          Service's PrincipalAuthenticator object.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_PrincipalAuthenticator.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_PrincipalAuthenticator.h:

          Removed these files.  They have been superseded by the
          SSLIOP_Vault* files.

        * orbsvcs/orbsvcs/Security/PrincipalAuthenticator.cpp:
        * orbsvcs/orbsvcs/Security/PrincipalAuthenticator.h:

          Updated the PrincipalAuthenticator implementation to use the
          Chain-of-Responsibility design pattern on all registered
          SecurityReplaceable::Vault implementations until one is found
          that recognizes the user-supplied parameters.

        * orbsvcs/orbsvcs/Security/PrincipalAuthenticator_Impl.h:

          Removed this file in favor of the standard
          SecurityReplaceable::Vault functionality.

Tue Jan 15 16:22:48 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
          Use a local interface for the AMH_*ResponseHandler, that
          generates *exactly* the right code for the *C.{h,i,cpp} files.
          We need different visitors for the implementation class on the
          *S.{h,i,cpp} files.

        * TAO_IDL/be_include/be_visitor_interface.h:
        * TAO_IDL/be_include/be_visitor_operation.h:
        * TAO_IDL/be/be_visitor_interface.cpp:
        * TAO_IDL/be/be_visitor_operation.cpp:
          Enable compilation of AMH visitors by default.

        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be_include/be_visitor_interface/amh_sh.h:
        * TAO_IDL/be_include/be_visitor_interface/amh_ss.h:
        * TAO_IDL/be_include/be_visitor_interface/interface_ss.h:
          Improved generated AMH code.  For starters the IDL compiler does
          not crash while generating AMH code :-)  But the generated code
          does not compile yet.
          Mayur and myself factored out the shared code between the
          skeleton source visitors (*S.cpp files) for AMH and non-AMH
          interfaces.
          Also stopped the system from generating any AMH classes for
          implied AMH or AMI classes.

        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
          Fixed warnings.

        * TAO_IDL/Makefile.BE:
        * TAO_IDL/Makefile.EXE:
        * TAO_IDL/Makefile.FE:
          Updated dependencies.

Tue Jan 15 15:55:54 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Makefile.Security (IDL_FILES):

          Added the `SecurityReplaceable.idl' file to the IDL file list.

Tue Jan 15 15:46:20 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SecurityReplaceable.idl:

          Corrected typo.  "Replaceable" not "Replacable."

Tue Jan 15 15:01:48 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableServer/ServerRequestInfo.cpp :
        * tao/PortableServer/POA.i :
        * tao/PortableServer/ObjectReferenceTemplate.h :
        * tao/PortableServer/ObjectReferenceFactory.cpp :
        * tao/PortableServer/ObjectReferenceTemplate.cpp :
        * tao/PortableServer/IORInfo.cpp :
          Corrected the usage of TAO_ENV_ARG_DECL and
          TAO_ENV_ARG_PARAMETER

        * tao/PortableServer/POA.h :
        * tao/PortableServer/POA.cpp :
          In addition to correcting the usage of TAO_ENV_ARG_DECL, added a
          new protected method so that there is only a single ACE_TRY
          block in TAO_POA::establish_components method.

Tue Jan 15 14:28:50 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableInterceptorC.h:
          Fixed by inserting a space where needed.

Tue Jan 15 13:30:07 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * TAO_IDL/be_include/be_visitor_amh_pre_proc.h:
        * TAO_IDL/be_include/be_visitor_operation.h:
        * TAO_IDL/be_include/be_visitor_operation/amh_sh.h:
        * TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
        * TAO_IDL/be_include/be_visitor_operation/amh_rh_sh.h:
        * TAO_IDL/be_include/be_visitor_operation/amh_rh_ss.h:
        * TAO_IDL/be_include/be_visitor_interface.h:
        * TAO_IDL/be_include/be_visitor_interface/amh_ch.cpp:
        * TAO_IDL/be_include/be_visitor_interface/amh_sh.cpp:
        * TAO_IDL/be_include/be_visitor_interface/amh_ss.cpp:
        * TAO_IDL/be_include/be_visitor_interface/amh_rh_sh.cpp:
        * TAO_IDL/be_include/be_visitor_interface/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:
        * TAO_IDL/be/be_visitor_factory.cpp:
        * TAO_IDL/be/be_visitor_operation.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_operation/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface.cpp:
        * TAO_IDL/be/be_visitor_interface/interface.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/amh_rh_ss.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

          This is a snap-shot of the changes to facilitate parallel
          working on AMH.  The new files and changes to old ones is part
          of a new approach to generate AMh code from the IDL-compiler.
          In the new approach, only one new implied-idl node is added to
          the main AST i.e. the ResponseHandler (RH) node.  With this
          node, code is generated in the following files:
                - The Client Header (Base abstract RH class)
                - The Skeleton Header (implementation RH class declaration)
                - The Skeleton Source (implementation RH class definition)
          In this snapshot, the code for the above is in place and there
          are no compilation errors.  The implementation is yet to be
          tested, though.  Also, in keeping with the new approach,
          AMH-skeleton code is generated 'on the fly'.  In the
          interface_{ch/sh/ss} files, AMH_skeleton code is generated if
          the be_global->generate_amh_classes () is set.  Currently, this
          code is commented out and the amh_{ch/sh/ss} files are not
          included in the compiltation of TAO_IDL but once the code is in
          place amd working, the IDL compiler will include these visitors.

Tue Jan 15 13:35:07 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableInterceptorS.h:
          Committing the right one.

        * tests/Portable_Interceptors/ForwardRequest/Makefile:
          Added -Gv to the TAO_IDLFLAGS since PortableInterceptor.pidl now
           has valuetypes.

Tue Jan 15 12:33:34 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ORB_Core.cpp:
          Removed stray characters put in by mistake.

Tue Jan 15 12:28:21 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableInterceptorC.i:
        * tao/PortableInterceptorC.h:
        * tao/PortableInterceptorC.cpp:
           Regenerated and applied patches.

Tue Jan 15 12:03:54 2002  Ossama Othman  <ossama@uci.edu>

        * docs/releasenotes/index.html:

          Updated Security Service and SSLIOP release notes.

Tue Jan 15 14:02:04 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup.bor:
        * orbsvcs/orbsvcs/PortableGroup.rc:
          Added resource files for the PortableGroup library.  Thanks
          to Johnny Willemsen <johnny_willemsen@planet.nl> for pointing
          this out.

Tue Jan 15 11:50:37 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * utils/nslist/nsdel: There were 2 problems with nsdel:
          1. difficult to remove subcontexts
          2. not possible to remove contexts where the name.kind is not null

          We've now fixe this problem so it's possible to do the following:
          usage example nsdel --name com/sun/server/app1.service
          usage example nsdel --name com/sun/server.context

          Thanks to Paul Caffrey <pcaffrey@iel.ie> for contributing this.

Tue Jan 15 11:43:48 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * docs/releasenotes/index.html:

          Added items to IDL compiler section about the expanded
          support of value types, and about the revamped/expanded
          support of the IDL #pragma directives. Also add item in the
          Notification Service section about the new support of the
          Extended Trader Constraint Language (ETCL) grammar for filter
          construction.

Tue Jan 15 09:08:17 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.cpp:
        * tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.h:
          Added new methods to class FOO_IORInterceptor to go along with
          the added methods in PortableInterceptor::IORInterceptor. Missed
          committing in the first round.

Tue Jan 15 08:55:52 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ORB_Core.cpp (create_stub_object):
          Fixed usage of TAO_ENV_ARG_DECL

Tue Jan 15 09:16:22 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile:

          Added Makefile.ETCL to the list when Makefile>CosNotification
          is added.

        * orbsvcs/orbsvcs/ETCL/ETCL_Static.dsp:

          Fixed path errors.

        * orbsvcs/tests/Notify/lib/Notify_Test_Client.cpp:

          Changed an incorrect TAO_ENV_ARG_PARAMETER to
          TAO_ENV_ARG_DECL.

Tue Jan 15 13:22:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/ORT/*.bor:
          Added BCB makefiles for this test

        * tests/Makefile.bor:
          Added new ORT test

Tue Jan 15 11:09:13 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/PortableServer/Makefile.bor:
          Added PortableGroup_Hooks

        * orbsvcs/orbsvcs/PortableGroup.bor:
          Added new BCB makefile for building PortableGroup

        * orbsvcs/orbsvcs/Makefile.bor
          Added PortableGroup

Tue Jan 15 02:51:04 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/RTCP.cpp: Return 0 in
          TAO_AV_RTCP_Callback::handle_destroy().

Tue Jan 15 07:35:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor:
          Removed IORInfo

        * tao/PortableServer/Makefile.bor:
          Added IORInfo, ObjectReferenceFactory and ObjectReferenceTemplate

Mon Jan 14 22:08:46 2002  Ossama Othman  <ossama@uci.edu>

        From Bruce Trask <trask_b@ociweb.com>
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.h:

          Use the ACE_STATIC_SVC_DECLARE_EXPORT macro instead of
          ACE_STATIC_SVC_DECLARE to force the static service descriptor to
          be exported on Windows, and thus allow it to be used when the
          TAO SSLIOP pluggable protocol is linked statically.

Tue Jan 15 00:01:09 2002  Rob Ruff <rruff@scires.com>
                          Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/UDP.:
        * orbsvcs/orbsvcs/AV/UDP.cpp: Fix memory leaks of address
          and control_address.

        * orbsvcs/orbsvcs/AV/RTCP.cpp:  Fix TAO_AV_RTCP_Object::destroy().
          Call send_report() from TAO_AV_RTCP_Callback::handle_stop() and
          TAO_AV_RTCP_Callback::handle_destroy().

Mon Jan 14 23:51:54 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/tests/AVStreams/server_discovery: Removed.
          Depends on files from the old mpeg player which is no longer
          in repository.

Mon Jan 14 19:53:18 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableServer/IORInfo.cpp (current_factory):
          Was a returning a void value. Fixed it.

        * tao/PortableServer/POA.cpp (establish_components):
          Modified variable i as variable j to satisfy win.
          Also modified a const variable as non-const.

Mon Jan 14 19:37:03 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/PortableServer/TAO_PortableServer_Static.dsp (SOURCE):
        * tao/PortableServer/TAO_PortableServer.dsp:
          Updated to add IORInfor, ObjectReferenceTemplate and
          ObjectReferenceFactory.

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
          Updated to remove IORInfo

Mon Jan 14 18:08:50 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ORB_Core.h (TAO_ORB_Core):
          Used the correct form of TAO_ENV_ARG_DECL

Mon Jan 14 17:56:09 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile.CosNotification:
        * orbsvcs/orbsvcs/Makefile.ETCL:

          Updated dependencies.

Mon Jan 14 15:25:25 2002  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_interface_fwd/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ci.cpp:
          Fixed syntax error generated in the CDR operators for
`          valuetypes.  There was no blank after the export macro name.

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * TAO_IDL/be/be_valuetype.cpp:
          Cosmetic fixes

Mon Jan 14 15:19:05 2002  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableInterceptorC.h:
          Fixed compilation problem due to bugs in IDL compiler.

        * tao/PortableServer/ObjectReferenceTemplate.cpp:
          Removed bogus #include for ObjectReferenceTemplate.i, the file
          does not exist.

        * tao/Makefile:
        * tao/BiDir_GIOP/Makefile:
        * tao/Domain/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/IFR_Client/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
        * tao/PortableServer/Makefile:
        * tao/RTCORBA/Makefile:
        * tao/RTPortableServer/Makefile:
        * tao/SmartProxies/Makefile:
        * tao/Strategies/Makefile:
        * tao/TypeCodeFactory/Makefile:
          Update dependencies.

Mon Jan 14 15:03:53 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ORB_Core.cpp:
          Removed include of IORInfo.h

Mon Jan 14 14:41:17 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        The following set of changes are wrt to Object Reference Template.

        * tao/IORInfo.h:
        * tao/IORInfo.cpp:
          Moved these files to PortableServer directory to continue
          keeping the TAO library independent of PortableServer.

        * tao/Exception.cpp:
          Added a new minor code to the OBJ_ADAPTER_TABLE.
          The description of the minor code is "Exception in
          IORInterceptor::components_established in call
          to POA::create_POA "

        * tao/ClientRequestInfo.cpp (get_service_context_i):
          Changed the minor code from 23 to 26 according to the ORT
          spec.

        * tao/ORB_Core.h :
        * tao/ORB_Core.i :
        * tao/ORB_Core.cpp :

          Removed the include of IORInfo.h since ORB_Core doesnt use
          IORInfo anymore.

          Added support for the new ORB Configuration Options:
          -ORBId: is to set an Id to the ORB as the name suggests.
          -ORBServerId:  is to uniquely identify a server.
          -ORBListenEndpoints: is similar to ORBEndPoint option.
              The ORBEndpoint Option will be deprecated later.
          -ORBNoProprietaryActivation: is to set a glabal flag so
          that none of the ORB's proprietary can be used.

          Added a new method set_endpoint_helper for code reusing purposes
          since the two ORB options -ORBEndpoint and -ORBListenEndPoints
          are the same. This might not be needed later when the
          -ORBEndpoint is deprecated totally.

          New accessor method for the ORBServerId that was passed
          using        the -ORBServerId Option:
          const char *server_id (void) const;

          Added another accessor method is to get the underlying
          transport cache:
          TAO_Transport_Cache_Manager *transport_cache (void);

          Modified the implementation of create_stub_object method.
          The establish_components method should now be invoked
          every time a new POA is created and hence should be
          invoked even before the create_stub_object is invoked.
          Hence the implementation of TAO_ORB_Core::create_stub_object
          now doesnt involve invoking the establish components method.

          The establish_components method is now modified and moved to
          TAO_POA.

          Added a new method open (TAO_ENV_ARG_DECL) to set endpoints for
          listening.

          In the TAO_ORB_Core::run method, the Environment variable is
          going to be used. So, changed TAO_ENV_ARG_DECL_NOT_USED to
          TAO_ENV_ARG_DECL. Also, invoke the new TAO_ORB_Core::open method
          in here. We donot want to setup the listening points
          when the RootPOA is created but now. One of the main features of
          ORT is the ability to set a new factory (and possibly point the
          ior to another endpoint) with the help of interceptors.
          If we open an endpoint when the RootPOA is created, then it
          would endup costly if another endpoint has to be
          opened during run time (i.e. because of the interceptors being
          used). So, we are going to open the endpoints during the run
          time rather than during the RootPOA creation.

          Private variables: server_id_, open_lock_, open_called_;

        * tao/PortableServer/IORInfo.h:
        * tao/PortableServer/IORInfo.h:
          Moved the files from tao to PortableServer. And, added new
          methods: manager_id, state, adapter_template, current_factory
          according to the ORT spec.

          Modified the implementation of add_ior_component and
          add_ior_component_to_profile to invoke
          TAO_POA::save_ior_component and
          save_ior_component_and_profile_id instead of adding them
          immediately for reasons explained later.

        * tao/PortableServer/ObjectReferenceTemplate.h :
        * tao/PortableServer/ObjectReferenceTemplate.cpp :
        * tao/PortableServer/ObjectReferenceFactory.h :
        * tao/PortableServer/ObjectReferenceFactory.cpp :
          New files for the ObjectReferenceFactory and
          ObjectReferenceTemplate classes.

        * tao/RTPortableServer/RT_POA.i (create_reference_with_priority):
          Modified the call create_reference_i and
           create_reference_with_id_i to go along with the
          modified signatures of the respective methods.

        * tao/PortableServer/ServerRequestInfo.h:
        * tao/PortableServer/ServerRequestInfo.cpp:
          New methods server_id, orb_id and adapter_name from the ORT
          spec. Accessor methods to get the server_id of the server
          ( passed via -ORBServerId option), orb_id ( ORBId value that
          is passed to the ORB_init call) and the name of the related
          Object Adapter.

        * tao/PortableServer/POAManager.h:
        * tao/PortableServer/POAManager.cpp:
          New method adapter_manager_state_changed which calls all
          the registered interceptor's adapter_manager_state_changed
          methods. Included new header files as needed.

        * tao/PortableServer/Object_Adapter.cpp (open):
          As explained in ORB_Core changes, we are going to open
          the default resources during run time and not during RootPOA
          creation. So, removed the invocation leading to opening the
          endpoints.

        * tao/PortableServer/POA.cpp :
          This file has a big bunch of changes.

          Included new header files as needed.

          New methods:

          set_obj_ref_factory: Public method to set the private
          variable: TAO_ObjectReferenceFactory *obj_ref_factory_
          The value of this variable is initially the same as
          TAO_ObjectReferenceTemplate *obj_ref_template_.
          The value of obj_ref_factory_ can be reset by the
          TAO_IOR_Info::current_factory method.

          tao_establish_components: Helper method for
          establish_components. Instantiates the needed variables and
          calls establish_components.

          adapter_name: Returns the adapter_name of an object_adapter
          (POA).

          adapter_name_i: Helper method for adapter_name.

          get_adapter_template:
          set_adapter_template:
          get_obj_ref_factory:
          set_obj_ref_factory: Accessor methods to ort_template_ and
          obj_ref_factory_ member variables related to a POA.

          get_policy_list:
          set_policy_list:
          get_mprofile:
          set_mprofile: Accessor methods to get policy_list_ and
          mprofile_ respectively. TAO_IORInfo needs these values.

          save_ior_component:
          save_ior_component_and_profile_id:
          According to the ORT spec, the Interceptor's
          establish_components method should be invoked each time a new
          POA is created. And, the establish_components method is where
          the IORInfo can get hold of the ior components that are to be
          added to the mprofiles. But, we donot add the components to the
          profile when the POA is created but rather when the stub object is
          to be created. So, to solve this, we save the tagged component
          and profile_id that we get via the establish_components method
          and use them later when we are actually creating the stub
          object. These two methods help save the values, as the name of
          the method suggests.

          tao_add_ior_component:
          tao_add_ior_component_to_profile: Methods to call the
          add_tagged_component of all the registered interceptors.

          get_adapter_state:
          set_adapter_state: Accessor methods to the POA state which could
          be in one of HOLDING, ACTIVE, DISCARDING, INACTIVE and
          NON_EXISTENT states.

          adapter_state_changed: Method to notify the IOR Interceptors
            when there is a change in the state of the POA not related to the
          POA Manager.

          invoke_key_to_object: The TAO_ObjectReferenceFactory::make_object
          creates the object references by default (ie. unless the factory
          is changed with the help of interceptors). It invokes the POA's
          invoke_key_to_object method for the same purpose. This method
          gets all the required values and invokes the key_to_object which
          actually creates the object reference.

          get_manager_id: Accessor method to get the manager id.

          The constructor of TAO_POA is also changed. Each POA has an
          ObjectReferenceTemplate * and ObjectReferenceFactory * member
          variables. The initial values of the ObjectReferenceTemplate is
          set in the TAO_POA constructor. The initial value of
          obj_ref_factory_  is the same as that of ort_template_. While
          the value of ort_template_ is remains the same, the value of the
          obj_ref_factory_ can be changed with the help of the
          interceptors.

          According to the ORT specification, the interceptor's
          establish_components method needs to be invoked each time any
          new POA is created. By invoking the tao's
          establish_components method from the constructor itself, we
          are making sure that this method is called for all the POA's
          including the RootPOA.

          Changed the order in which the private variables are
          instantiated in the constructor.

          Modified the signature of create_reference_i and
          create_reference_with_id_i to not have the priority as
          an argument. Where needed, we can get the priority value using
          the cached_policies_ variable.

          Modified their implementation to call the this->obj_ref_factory_
          's make_object method instead of calling the key_to_object
          method directly. Made changes accordingly. The implementation of
          servant_to_reference method is also modified similarly.
          This is because the ObjectReferenceFactory associated with the
          POA is the one that is supposed to create the object references.
          To generalize between the default case and the case in which the
          object reference factory is changed with the help of interceptors,
          all the methods that end up creating a object reference (by
          invoking key_to_object method) now end up invoking the
          associated object reference factory's make_object method. If the
          default value of the obj_ref_factory_ is not changed, the
          TAO_ObjectReferenceFactory::make_object is invoked. If the value
          of obj_ref_factory_ is changed, the make_object of that
          particular class in invoked.

          Also, in the servant_to_reference method, instead of setting
          value of the priority variable to
          this->cached_policies_.server_priority (), am setting it to
          TAO_INVALID_PRIORITY. This is because when the control comes to
          this method, this->cached_policies_ is nil. By setting it to
          TAO_INVALID_PRIORITY doesnt hurt since the priority is actually
          set in servant_to_system_id method.

          Added TAO_ObjectReferenceFactory and TAO_ObjectReferenceTemplate
          as friend classes to TAO_POA class.

        * tao/PortableServer/Makefile:
          Added new files.
          IORInfo
          ObjectReferenceTemplate
          ObjectReferenceFactory

        * tao/PortableInterceptorC.cpp:
        * tao/PortableInterceptorC.h:
        * tao/PortableInterceptorC.i:
        * tao/PortableInterceptorS.h:
          Regenerated and applied patches. The diffs are generated and
          placed in diffs directory.

        * tao/PortableInterceptor.pidl:
          Modified according to the ORT specification.


        * tao/Makefile:
          Removed IORInfo since its now moved to PortableServer. Updated
          dependencies.

        * tao/BiDir_GIOP/Makefile:
        * tao/Domain/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/IFR_Client/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
          Updated dependencies.

        * orbsvcs/examples/ORT/README :
        * orbsvcs/examples/ORT/Makefile :
        * orbsvcs/examples/ORT/server.cpp :
        * orbsvcs/examples/ORT/client.cpp :
        * orbsvcs/examples/ORT/Gateway.idl :
        * orbsvcs/examples/ORT/sum_server.idl :
        * orbsvcs/examples/ORT/sum_server_i.h :
        * orbsvcs/examples/ORT/sum_server_i.cpp :
        * orbsvcs/examples/ORT/Server_IORInterceptor.cpp :
        * orbsvcs/examples/ORT/Server_IORInterceptor.h :
        * orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.cpp :
        * orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.h :
        * orbsvcs/examples/ORT/Gateway_i.h :
        * orbsvcs/examples/ORT/Gateway_i.cpp :
        * orbsvcs/examples/ORT/Server_IORInterceptor_ORBInitializer.cpp :
        * orbsvcs/examples/ORT/Object_Factory_i.h :
        * orbsvcs/examples/ORT/Object_Factory_i.cpp :
        * orbsvcs/examples/ORT/Gateway_ObjRef_Factory.h :
        * orbsvcs/examples/ORT/Gateway_ObjRef_Factory.cpp :

          Example to show how ORT can be used.

        * tests/ORT/README:
        * tests/ORT/Makefile:
        * tests/ORT/server.cpp:
        * tests/ORT/ORT_test.idl:
        * tests/ORT/ORT_test_IORInterceptor.cpp:
        * tests/ORT/ORT_test_IORInterceptor.h:
        * tests/ORT/ORT_test_IORInterceptor_ORBInitializer.cpp:
        * tests/ORT/ORT_test_IORInterceptor_ORBInitializer.h:
        * tests/ORT/ORT_test_i.cpp:
        * tests/ORT/ORT_test_i.h:
        * tests/ORT/client.cpp:
          Test for the ORT changes.

Mon Jan 14 14:46:54 2002  Carlos O'Ryan  <coryan@uci.edu>

        * docs/tutorials/Quoter/Event_Service/Makefile:
        * docs/tutorials/Quoter/RT_Event_Service/Makefile:
          Update dependencies.

Mon Jan 14 14:44:31 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Makefile.av:
          The dependencies for AV/md5c.c were not generated properly
          because the Makefile assumed all sources were .cpp files.

Tue Jan 15 00:30:30 2002  Boris Kolpackov  <bosk@ipmce.ru>

        * TAO_IDL/be/be_valuetype.cpp:
          Moved implementation to client stubs for _var and _out classes.

Mon Jan 14 15:35:13 2002  Rob Ruff <rruff@scires.com>
                          Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/AV_Core.h:
        * orbsvcs/orbsvcs/AV/AV_Core.cpp: Add remove_acceptor(), remove_connector(),
          get_control_flowname() methods.

        * orbsvcs/orbsvcs/AV/UDP.h: Add close() method.
        * orbsvcs/orbsvcs/AV/UDP.i: Add close() method.
        * orbsvcs/orbsvcs/AV/UDP.cpp: Improve cleanup in TAO_AV_UDP_Connector
          TAO_AV_UDP_Flow_Handler, and TAO_AV_UDP_Acceptor classes.  Close
          socket in TAO_AV_UDP_Flow_Handler destructor.

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp: Improve cleanup in destructors
          and destroy() method.  TAO_Tokenizer::operator[] returns
          a const char * instead of dynamically allocated char *.
          In TAO_StreamEndpoint::destroy(), call destroy() on protocol
          objects AFTER calling remove_connector() on the AV core.

        * orbsvcs/orbsvcs/AV/TCP.h: Add virtual destructor to TAO_AV_TCP_Flow_Handler.
        * orbsvcs/orbsvcs/AV/TCP.cpp: Add destructor to TAO_AV_TCP_Flow_Handler, improve cleanup in other classes.
        * orbsvcs/orbsvcs/AV/Transport.h: Add close() methods to
          TAO_AV_Connector_Registry and TAO_AV_Acceptor_Registry.
        * orbsvcs/orbsvcs/AV/Transport.cpp: Add close() methods to
          TAO_AV_Connector_Registry and TAO_AV_Acceptor_Registry.
          Return result of reactor()->cancel_timer() in
          TAO_AV_Flow_Handler::cancel_timer().
        * orbsvcs/orbsvcs/AV/RTCP.cpp: In TAO_AV_RTCP_Object::destroy(),
          delete this.
        * orbsvcs/orbsvcs/AV/RTP.cpp: In TAO_AV_RTP_Object::destroy(),
          delete this.
        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.h: Make operator[] return
          const char *.  Add variables for cleanup.
        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.cpp: Add variables for cleanup.
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp: Memory leak fixes.
          Comment out calls to activate_with_poa().
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/receiver.cpp:
          Do not call orb->shutdown(), instead set a flag.


Mon Jan 14 14:04:36 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile.PortableGroup: Regenerated
          dependencies.

Mon Jan 14 13:41:11 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/ETCL/ETCL.dsp:
        * orbsvcs/orbsvcs/ETCL/ETCL_Static.dsp:
        * orbsvcs/orbsvcs/ETCL/ETCL.rc:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.inl:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint_Visitor.h:
        * orbsvcs/orbsvcs/ETCL/ETCL_Interpreter.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_Interpreter.h:
        * orbsvcs/orbsvcs/ETCL/ETCL_y.cpp.diff:
        * orbsvcs/orbsvcs/ETCL/ETCL_y.h.diff:

          New files added to finish the implementation of the
          Extended Trader Constraint Language library that was
          begun by Carlos O'Ryan <coryan@uci.edu>. Thanks to
          Chad Elliott <elliott_c@ociweb.com> for supplying
          ETCL_Static.dsp.

        * orbsvcs/orbsvcs/ETCL/ETCL.ll:
        * orbsvcs/orbsvcs/ETCL/ETCL.yy:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.h:
        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp.diff:
        * orbsvcs/orbsvcs/ETCL/ETCL_y.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_y.h:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Interpreter.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Interpreter.h:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.h:
        * orbsvcs/orbsvcs/Makefile.CosNotification:
        * orbsvcs/orbsvcs/Makefile.ETCL:
        * TAOACE_Static.dsw:

          Changes to ETCL and Notification Service files to complete
          the implementation of the ETCL library and to make the
          Notification Service use this library to filter events,
          instead of using the Trading Service's Trader Constraint
          Language, as it did previously.

        * orbsvcs/tests/Notify/Notify_Tests.dsw:
        * orbsvcs/tests/Notify/Basic/Simple.dsp:
        * orbsvcs/tests/Notify/lib/Notify_Test_Client.cpp:
        * orbsvcs/tests/Notify/lib/Notify_Test_Client.h:

          Changes to Notification Service test coce submitted by
          Chad Elliott <elliott_c@ociweb.com>.

Mon Jan 14 13:09:31 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:

          Added .in() to instances of TAO_String_Manager and
          TAO_Object_Manager when used in the rhs of an expression,
          and made other cosmetic changes.

        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:

          Removed unused local variable in visit_valuetype().

Mon Jan 14 10:01:12 2002  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/PortableServerC.i
          (tao_PortableServer_IdUniquenessPolicy_narrow):
        * tao/diffs/PortableServerC.i.diff:

          Fixed incorrect use of TAO_ENV_ARG_PARAMETER where
          TAO_ENV_ARG_DECL was expected.

        * tao/PortableServer/POA.cpp (reference_to_ids):

          Fixed incorrect use of PortableServer::IDs::_nil().  There is no
          such thing.  Zero is the correct value.

Mon Jan 14 10:32:09 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/FaultTolerance/IOGRManipulation/IOGRTest.dsp:

        * orbsvcs/tests/FaultTolerance/IOGR/Manager.dsp:
        * orbsvcs/tests/FaultTolerance/IOGR/server.dsp: Fixed the
          libraries that are linked to.

Mon Jan 14 10:25:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Fault_Tolerance.dsp (RSC): Added the right
          library for linking in the debug  builds.

Mon Jan 14 09:34:35 2002  Chad Elliott  <elliott_c@ociweb.com>

        * tests/IDL_Test/including.idl:

          Prefix the enum value FE with TAO_ to avoid a conflict on HP-UX
          10.20.

Mon Jan 14 09:27:44 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile.PortableGroup: Added missing
          PortableGroup directory for POA_Hooks.

Mon Jan 14 09:19:43 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * performance-tests/AMI_Latency/client.cpp:
          Fixed compile error.

Mon Jan 14 08:49:31 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/orbsvcs/PortableGroup.idl: Changed include
          specification to work under Win32 release builds.

Mon Jan 14 09:52:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor:
          Added Request_Dispatcher

        * orbsvcs/tests/Makefile.bor:
          Added new Miop directory

        * orbsvcs/tests/Miop/Makefile.bor:
          Added new BCB makefile

        * orbsvcs/orbsvcs/FT_ORB.bor:
          Added new BCB makefile for this library

        * orbsvcs/orbsvcs/FaultTolerance.bor:
          Updated makefile to use the new FT_ORB library

        * orbsvcs/orbsvcs/Makefile.bor:
          Added new FT_ORB.bor makefile

Sun Jan 13 21:50:22 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/TAO_Static.dsp: Added Request_Dispatcher.{cpp,h} to the
          file listing.

Sun Jan 13 21:24:59 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Request_Dispatcher.cpp: Fixed ACE_CHECK typo.  Thanks to
          Venkita for catching it.

        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.h:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.h:
          Cleaned up two comments.

Sun Jan 13 18:23:11 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tests/Two_Objects/Makefile:
          Regenerated dependencies.

Sun Jan 13 16:19:24 2002  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security/Security_ORBInitializer.cpp (pre_init):
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.cpp
          (pre_init):

          Corrected erroneous comments.

Sun Jan 13 15:22:10 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * docs/releasenotes/index.html (MIOP): Added a section for
          MIOP.

Sun Jan 13 14:35:08 2002  Douglas C. Schmidt  <schmidt@macarena.cs.wustl.edu>

        * performance-tests/AMI_Latency/client.cpp: Rearranged the code
          a bit to perform better in single-threaded configurations.
            Thanks to Sean McCauliff <seanm@Narus.com> for reporting this.

Sun Jan 13 13:02:41 2002  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * TAOACE.dsw:
        * orbsvcs/orbsvcs/PortableGroup.dsp
          Added PortableGroup (MIOP) to the workspace.

        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/orbsvcs/Makefile.PortableGroup:
          Build the PortableGroup code now.

        * orbsvcs/orbsvcs/PortableGroup.idl:
        * orbsvcs/orbsvcs/mgm.idl:
        * orbsvcs/orbsvcs/miop.idl:
          Added new IDL from the MIOP specification:

        * tao/IOP.pidl:
        * tao/corbafwd.h:
          Added MIOP specification tag identifiers.  These need to be
          updated to OMG specified numbers as soon as they come out.

        * orbsvcs/orbsvcs/PortableGroup/README:
          Readme for the MIOP and PortableGroup code.

        * orbsvcs/orbsvcs/PortableGroup/POA_Hooks.cpp:
        * orbsvcs/orbsvcs/PortableGroup/POA_Hooks.h:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Acceptor_Registry.h:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Loader.h:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_ORBInitializer.h:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Request_Dispatcher.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PortableGroup_Request_Dispatcher.h:
        * orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.cpp:
        * orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.h:
        * orbsvcs/orbsvcs/PortableGroup/portablegroup_export.h:
          PortableGroup implementation.  Includes hooks to handle
          new POA methods to associate group references with normal
          references, dispatch code based on group ID, and code to
          dynamically open multicast endpoint acceptors when association
          is made.

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Acceptor.i:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connection_Handler.i:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Connector.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Endpoint.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Endpoint.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Endpoint.i:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Factory.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Factory.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Profile.i:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.h:
        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.i:
          UIPMC (Unreliable IP MultiCast) pluggable protocol
          implementation.

        * orbsvcs/tests/Miop/README:
          README for MIOP tests.  Currently just describes the
          McastHello test.

        * orbsvcs/tests/Miop/McastHello/Makefile:
        * orbsvcs/tests/Miop/McastHello/Makefile.bor:
        * orbsvcs/tests/Miop/McastHello/McastHello.cpp:
        * orbsvcs/tests/Miop/McastHello/McastHello.dsw:
        * orbsvcs/tests/Miop/McastHello/McastHello.h:
        * orbsvcs/tests/Miop/McastHello/README:
        * orbsvcs/tests/Miop/McastHello/Test.idl:
        * orbsvcs/tests/Miop/McastHello/client.bor:
        * orbsvcs/tests/Miop/McastHello/client.conf:
        * orbsvcs/tests/Miop/McastHello/client.cpp:
        * orbsvcs/tests/Miop/McastHello/client.dsp:
        * orbsvcs/tests/Miop/McastHello/run_test.pl:
        * orbsvcs/tests/Miop/McastHello/server.bor:
        * orbsvcs/tests/Miop/McastHello/server.conf:
        * orbsvcs/tests/Miop/McastHello/server.cpp:
        * orbsvcs/tests/Miop/McastHello/server.dsp:
          Added a simple unit test to try out multicast
          request generation, transmission, reception,
          and dispatch.

        * tao/CORBALOC_Parser.cpp:
          Added check to allow "miop" corbaloc specifiers.

        * tao/GIOP_Message_Base.cpp:
          Added call to request dispatcher to strategize how
          requests are dispatched to the POA.  For MIOP, a
          request be identified by a GroupId and be dispatched
          to one or more ObjectKeys.

        * tao/GIOP_Message_Generator_Parser.cpp:
        * tao/GIOP_Message_Generator_Parser.h:
        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
          Moved GIOP 1.2 target address spec demarshal code
          to Tagged_Profile.*, so that the TAO_Tagged_Profile could
          know what kind of addressing mode it was actually
          representing.  Previously, it was always assumed that
          TAO_Tagged_Profile contained an object key.  Now, with
          MIOP, it is possible for requests to not have ObjectKeys
          in their target specifiers.  Instead, they have a profile
          that has a GroupID embedded within it.

        * tao/Tagged_Profile.cpp:
        * tao/Tagged_Profile.h:
        * tao/Tagged_Profile.i:
          Added logic to unmarshal target specifications from
          GIOP_Message_Generator_Parser*.  Note that
          TAO_Tagged_Profile is only used to handle the target
          specification field and was specialized for this
          purpose before this change - despite what it's name
          may imply.

        * tao/IIOP_Acceptor.cpp:
        * tao/Strategies/DIOP_Acceptor.cpp:
        * tao/Strategies/SHMIOP_Acceptor.cpp:
          Fixed debug text to indicate the right method name.

        * tao/Makefile:
          Added Request_Dispatcher and updated dependencies.

        * tao/Profile.cpp:
        * tao/Profile.h:
        * tao/Profile.i:
        * tao/Stub.cpp
        * tao/Stub.h
        * tao/Stub.i
        * tao/Invocation.cpp:
          Changes to maintain the GIOP 1.2 target addressing mode
          in the profile as opposed to the stub.  This is the needed
          since the target addressing mode is decided upon based on
          the profile.  For example, a UIPMC profile needs to use
          the "profile" addressing mode, since it does not have an
          object key.  Additionally, if a remote ORB sends an
          addressing mode exception back, it should only affect the
          current profile as opposed to all profiles on a stub, since
          those profiles might go to some other ORB.

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
          Added request dispatcher strategy and hooks for the
          PortableGroup library to replace functionality in the
          PortableServer library.

        * tao/Request_Dispatcher.cpp:
        * tao/Request_Dispatcher.h:
          Default request dispatcher to send requests to the POA
          based on their ObjectKey.  (Replaced when the
          PortableGroup library is active.)

        * tao/TAO.dsp:
          Added Request_Dispatcher.{cpp,h}.

        * tao/TAO_Server_Request.cpp:
          Added missing this-> to conform to ACE standard.

        * tao/orbconf.h:
          Added MIOP version definitions.

        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POA.h:
          Added methods to forward processing of the new group
          functionality introduced by the MIOP specification.

        * tao/PortableServer/PortableGroup_Hooks.cpp:
        * tao/PortableServer/PortableGroup_Hooks.h:
          Base class to implementing the PortableGroup functionality.

        * tao/PortableServer/TAO_PortableServer.dsp:
          Added PortableGroup_Hooks.{cpp,h}.

        * tao/BiDir_GIOP/Makefile:
        * tao/Domain/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/IFR_Client/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
        * tao/PortableServer/Makefile:
        * tao/RTCORBA/Makefile:
        * tao/RTPortableServer/Makefile:
        * tao/SmartProxies/Makefile:
        * tao/Strategies/Makefile:
        * tao/TypeCodeFactory/Makefile:
          Regenerated dependencies.

        * tao/PortableServer/PortableServer.pidl:
        * tao/PortableServer/PortableServerC.cpp:
        * tao/PortableServer/PortableServerC.h:
        * tao/PortableServer/PortableServerC.i:
        * tao/diffs/PortableServerC.cpp.diff:
        * tao/diffs/PortableServerC.h.diff:
        * tao/diffs/PortableServerC.i.diff:
          Updated the POA with the group reference association
          methods introduced by the MIOP specification.

Sun Jan 13 10:52:03 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/FaultTolerance/IOGManpulation/Makefile: Updated
          dependencies.
        * orbsvcs/tests/FaultTolerance/IOGManpulation/IOGRTest.cpp: Fixed
          a compilation error.

Sun Jan 13 10:33:18 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile: Added an FTORB option.
        * orbsvcs/tests/FaultTolerance/IOGR/Makefile: Updated
          dependencies.

Sun Jan 13 09:35:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * TAOACE_Static.dsw (Project): Added FT_ORB.dsp.

Sun Jan 13 09:03:25 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tests/Two_Objects/worker.h:
        * tests/Two_Objects/server.cpp:
          Fixed compile errors on SunCC51.

Sat Jan 12 21:45:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/FT_ORB.dsp (RSC): Added a new dsp file
        * orbsvcs/orbsvcs/Fault_Tolerance.dsp: Made some slight changes.

        * orbsvcs/orbsvcs/orbsvcs.dsw:
        * orbsvcs/orbsvcs/orbsvcs_static.dsw: Added the new dsp file to
          the workspace.

Sat Jan 12 21:14:31 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/FT_CORBA_ORB.idl: A new file that contains
          additions only to the ORB core. This would be good for a variety
          of reasons. Some point in time, users would like to have only
          the FT ORB features loaded without the service layer. This
          should be useful for such cases. An excellent example is when
          the Heartbeats are going to be implemented. Regular users may
          need that without any extra stuff, like Notification, DynamicAny
          etc.

        * orbsvcs/orbsvcs/FT_CORBA.idl: Has only the service layer
          interfaces.

        * orbsvcs/orbsvcs/Makefile.FTORB: A new file for the TAO_FTORB
          library.

        * orbsvcs/orbsvcs/Makefile.FaultTolerance: Updated this file.

        * orbsvcs/orbsvcs/Makefile: Added the new Makefile.

        * orbsvcs/orbsvcs/FaultTolerance/FT_IOGR_Property.h:
        * orbsvcs/orbsvcs/FaultTolerance/FT_ORBInitializer.cpp:
        * orbsvcs/orbsvcs/FaultTolerance/FT_PolicyFactory.cpp:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Policy_i.h:
        * orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.h: Included
          FT_CORBA_ORBC.h.

        * orbsvcs/tests/FaultTolerance/IOGR/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile: Updated
          the file to include the TAO_FTORB library.

        * orbsvcs/tests/FaultTolerance/IOGR/svc.conf: Used the new library
          to load.

Sat Jan 12 10:46:47 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tests/Two_Objects/worker.h:
          Fixed compile error on Fuzz builds.

Sat Jan 12 09:46:00 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tests/Two_Objects/server.cpp:
        * tests/Two_Objects/First_i.cpp:
        * tests/Two_Objects/Second_i.cpp:
        * tests/Two_Objects/Second_i.h:
        * tests/Two_Objects/Object_Factory_i.cpp:
          Fixed compile errors on certain builds.

Sat Jan 12 13:06:12 2002  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Makefile.bor:
          Added new Two_Obects directory to BCB makefile

Fri Jan 11 17:36:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/orbconf.h: Removed the #if defined clause for the
          TAO_NAMESPACE definition. Now TAO_NAMESPACE will define
          namespace by default with no conditionality associated. The
          macro has been left behind for backward compatibility. This
          shoudl fix the LynxOS builds.

Fri Jan 11 12:28:48 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * orbsvcs/tests/Security/Makefile (DIRS):
          Added MT_SSLIOP to DIRS section.

Fri Jan 11 07:50:41 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.h:
          Fixed some Fuzz warnings.

Fri Jan 11 09:53:41 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tests/Makefile:
          Added entry for Two_Objects test.

Thu Jan 10 17:43:22 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Makefile.RTCORBAEvent:
        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.h:
        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.inl:
        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Dispatching.cpp:
        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.h:
        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.inl:
        * orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.cpp:
          Add new dispatching strategy based on RT-CORBA.  Still
          work-in-progress.

        * orbsvcs/performance-tests/EC_Colocated_Latency/Makefile:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Consumer.h:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Consumer.cpp:
        * orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.h:
        * orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.inl:
        * orbsvcs/performance-tests/EC_Colocated_Latency/POA_Destroyer.cpp:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Receive_Task.h:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Receive_Task.cpp:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Send_Task.h:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Send_Task.cpp:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Servant_var.h:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Servant_var.inl:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Servant_var.cpp:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Supplier.h:
        * orbsvcs/performance-tests/EC_Colocated_Latency/Supplier.cpp:
        * orbsvcs/performance-tests/EC_Colocated_Latency/driver.cpp:
        * orbsvcs/performance-tests/EC_Colocated_Latency/ec.supplier_filter_null.conf:
        * orbsvcs/performance-tests/EC_Colocated_Latency/ec.supplier_filter_per_supplier.conf:
        * orbsvcs/performance-tests/EC_Colocated_Latency/run_supplier_filtering.sh:
          Add new performance test to measure latency in the colocated
          case.

Thu Jan 10 12:48:02 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tests/Two_Objects/worker.cpp:
        * tests/Two_Objects/worker.h:

        Fixed compile errors.

Thu Jan 10 12:13:28 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * tests/Two_Objects/Two_Objects.idl:
        * tests/Two_Objects/server.cpp:
        * tests/Two_Objects/client.cpp:
        * tests/Two_Objects/worker.h:
        * tests/Two_Objects/worker.cpp:
        * tests/Two_Objects/First_i.cpp:
        * tests/Two_Objects/First_i.h:
        * tests/Two_Objects/Second_i.cpp:
        * tests/Two_Objects/Second_i.h:
        * tests/Two_Objects/Object_Factory_i.h:
        * tests/Two_Objects/Object_Factory_i.cpp:
        * tests/Two_Objects/Two_Objects.dsw:
        * tests/Two_Objects/server.dsp:
        * tests/Two_Objects/client.dsp:
        * tests/Two_Objects/run_test.pl:
        * tests/Two_Objects/Makefile:
        * tests/Two_Objects/Makefile.bor:
        * tests/Two_Objects/server.bor:
        * tests/Two_Objects/client.bor:
        * tests/Two_Objects/README:

        Created a new test for bug fix 575. This is a test to show
        that there can be concurrent upcalls to two objects in the
        same POA on the same connection.

Thu Jan 10 11:53:22 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP.pidl: Added come comments.
        * tao/GIOPC.h:
        * tao/GIOPC.cpp:
        * tao/GIOPC.i (Version_var): Added GIOP::Version_var to the
          generated code.

        * tao/diffs/GIOPC.cpp.diff:
        * tao/diffs/GIOPC.h.diff:
        * tao/diffs/GIOPC.i.diff:
        * tao/diffs/GIOPS.cpp.diff:
        * tao/diffs/GIOPS.h.diff:
        * tao/diffs/GIOPS.i.diff:
        * tao/diffs/GIOPS_T.cpp.diff:
        * tao/diffs/GIOPS_T.h.diff:
        * tao/diffs/GIOPS_T.i.diff: Added diffs to the generated code.


Wed Jan  9 18:07:55 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TO_IDL/fe/fe_init.cpp (populate_global_scope):

          Removed the guards around the calls related to valuetypes.

Wed Jan  9 11:35:58 2002  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.cpp (init):

          Removed last remnants of the long deprecated -ORBSetUID and
          -ORBSetGID ORB options.

Wed Jan  9 13:36:14 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_decl.cpp:

          Changed the order of member initialization to match the
          order of declaration.

Wed Jan  9 11:39:02 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_ci.cpp:

          Added declaration of CDR operators for anonymous sequence
          array element to the stub inline file. When ACE_INLINE is
          defined, the declarations of these in the header file is
          not included.

Wed Jan  9 08:46:58 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * docs/Options.html: Clarified the use of the
          -ORBDottedDecimalAddresses option.  Thanks to Michael Gillmann
          <michael.gillmann@infor.de> for motivating this.

Tue Jan  8 16:20:37 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:

          Added '::' to instances of 'CORBA::TypeCode_ptr' in
          type code generation. If there is a nested module
          named 'CORBA', MSVC gets confused. Thanks to
          Tom Howard <tom_howard@yahoo.com> for pointing out
          the problem.

Tue Jan  8 14:52:46 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/ast/ast_typedef.cpp:
        * TAO_IDL/be/be_array.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be/be_type.cpp:
        * TAO_IDL/be/be_typedef.cpp:

          Added explicit calls to base class constructors.

        * TAO_IDL/be/be_decl.cpp:

          Added explicit calls to base class constructors, and
          added missing member initialization.

        * TAO_IDL/be/be_visitor_array/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_ci.cpp:
        * TAO_IDL/be/be_visitor_typedef/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/cdr_op_ci.cpp:

          Changed the logic for generating CDR operators for
          named arrays of anonymous sequences. Some recent
          change broke this, and it was showing up in IDL_Test.
          Also made cosmetic changes.

        * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/any_op_ch.cpp:

          Added line breaks to strings of output stream operators,
          to avoid side effects when a method call is in the string.
          Also made cosmetic changes.

        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ch.cpp:

          Changed the logic of the code generation for forward
          declared interfaces. The existing logic was a case of two
          wrongs making a right, and was causing a problem with the
          implementation of AMH in the IDL compiler. Thanks to
          Carlos O'Ryan <coryan@uci.edu> and Mayur Deshpande
          <mayur@ics.uci.edu> for pointing out the problem.

Mon Jan  7 10:27:43 2002  Chad Elliott  <elliott_c@ociweb.com>

        * tao/PortableServer/PolicyS_T.i:

          Corrected an invalid ENV parameter macro name.  This was detected
          as an error on HP-UX.  Thanks to Rob Martin <martin_r@ociweb.com>
          for pointing this out.

Sun Jan  6 13:18:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_operation_strategy.cpp:

          Removed an unused argument, and made cosmetic changes.

Sun Jan  6 09:45:24 2002  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * examples/Advanced/ch_8_and_10/client.cpp (main):
          Added some casts to make certain C++ compilers happy.
          Thanks to Roy Sharon <roysharon@hotmail.com> for
          reporting this.

Sat Jan  5 21:31:43 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * TAO_IDL/be_include/be_visitor_amh_pre_proc.h:
        * TAO_IDL/be/be_visitor_amh_pre_proc.cpp:

          Added code to generate the Client side abstract RH class and the
          skeleton RH class. For the above two interfaces, there should be
          no classes generated on teh 'other side' i.e. for the client RH
          interface node, there should be no class generatd in the
          skeleton files.  Currently there are a few problems with this
          and with the exact names and inheritance of the generated
          classes.

Sat Jan  5 18:27:59 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * TAO_IDL/be_include/be_visitor_operation/amh_ss.h:
        * TAO_IDL/be/be_visitor_operation/amh_ss.cpp:

          Added code to generate the skeleton-source code for AMH-skelton
          operation.  The amh-method differs from the original method in
          the following ways:
          - Return type is always void
          - IN and INOUT parameters _only_ are de-marshalled
          One part left to be done is the creation and instantiation of
          the RH inside the generated method body.

Sat Jan  5 18:15:34 2002  Mayur Deshpande  <mayur@ics.uci.edu>

        * TAO_IDL/be/be_visitor_interface/interface.cpp:

          Added actions for all the AMH states (including amh_rh).
          Previously some of them returned 0 or just didn't do anything.

        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:

          Removed all the code from the visit_interface that generates
          code for the this_method and put it into a seperate method
          called this_method.  This method already existed but for some
          reason a part of the code was left in the visit_interface
          method.  With this in place, the AMH class can now implement all
          the changes that are needed in the _this () method.

        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp:

          - Changed the this_method().  This method now generates all the
          code for the _this() method in amh-skeleton.  Changes include a
          narrow of original interface rather than teh AMH-skeleton narrow
          and commenting of the generation of the safe_stub.release()
          line.  - Changed the dispath_method () so that it now generates
          a call to asynchronous_upcall_dispatch rather than
          synchronous_upcall_dispatch as is generated for a normal
          skeleton.

Sat Jan  5 20:39:25 2002  Ossama Othman  <ossama@uci.edu>

        * tao/IIOP_Connection_Handler.cpp (handle_input, handle_output):

          Reverted my change that avoided a function call.  Bala correctly
          points out that the handled passed in as a parameter may be an
          invalid handle if the event handler is dispatched by the
          reactor's notification mechanism.  Not bueno.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp
          (handle_input, handle_output):

          Likewise.

Sat Jan  5 20:00:21 2002  Ossama Othman  <ossama@uci.edu>

        * tao/Connection_Handler.inl (TAO_Connection_Handler):

          Initialize "pending_upcalls_" and "pending_upcall_lock_" in the
          base member initializer list.  Although this constructor is not
          used, it is best to ensure that proper initialization is
          performed in the event this constructor is used in the future.

Sat Jan  5 19:30:08 2002  Ossama Othman  <ossama@uci.edu>

        * tao/orbconf.h:

          Include "ace/Basic_Types.h" to pull in the definition of
          ACE_LITTLE_ENDIAN.

Sat Jan  5 17:54:27 2002  Ossama Othman  <ossama@uci.edu>

        * tao/LF_Strategy.h:

          No need to include "tao/orbconf.h."  Forward declaring
          ACE_Time_Value is enough.

        * tao/orbconf.h:

          Instead of "ace/OS.h", include "ace/config-all.h".  The latter
          is all that is needed.  This change should improve compile times
          since "config-all.h" does not include the large number of system
          headers found in "OS.h," which provides for improved C++
          preprocessing times in TAO.

          (TAO_DEFAULT_ORB_TABLE_SIZE):

          New constant that is used when setting the initial size of the
          ORB table.  Previously a default of 1024 was used.  However,
          most applications rarely use more than one ORB, meaning that
          an ORB table size of 1024 is overkill.  The default is now 16.
          This size should be more than adequate for the majority of
          applications.

          (MCAST_SERVICE_ID, NO_OF_MCAST_SERVICES):

          Prepend "TAO_" to these macros to avoid polluting the global
          namespace.

        * tao/ORB.h (resolve_service):
        * tao/ORB.cpp (resolve_service):
        * tao/params.h (service_port):
        * tao/params.i (service_port):
        * tao/params.cpp (TAO_ORB_Parameters):

          Changed the parameter type "MCAST_SERVICEID" to
          "TAO_MCAST_SERVICEID," in accordance with the changes made to
          `orbconf.h' described above.

        * tao/ORB_Table.cpp (TAO_ORB_Table):

          Initialize the underlying hash map (the ORB table) to a size of
          TAO_DEFAULT_ORB_TABLE_SIZE.  This change reduces the default ORB
          table size from 1024 to 16 (TAO_DEFAULT_ORB_TABLE_SIZE), thus
          greatly reducing the initial ORB table memory utilization.

        * tao/IIOP_Connection_Handler.cpp (handle_input, handle_output):

          No need to make a function call to retrieve the handle.  Just
          use the handle parameter passed in to the method.

Sat Jan  5 15:04:46 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/Fill_ACE_QoS.h:  Fix comments.

        * orbsvcs/performance-tests/EC_Federated_Scalability/Makefile:
         * orbsvcs/performance-tests/EC_Scalability/Makefile:
         * orbsvcs/performance-tests/EC_Federated_Latency/Makefile:
         * orbsvcs/performance-tests/EC_Latency/Makefile:

          Only build these tests if RTEvent is set in TAO_ORBSVCS.

Fri Jan 4 17:30:21 2002  Jaiganesh Balasubramanian  <jai@kelvar.ece.uci.edu>

        * docs/tutorials/Quoter/RT_Event_Service/index.html:
          Corrected some broken links. The errors were pointed out thanks
          to Eric Peters <egpeters@u.washington.edu>.

Fri Jan  4 19:02:41 2002  Balachandran Natarajan  <bala@cs.wustl.edu>

        * ChangeLogs/ChangeLog-01c: A new file after splitting from this
          one.

Fri Jan  4 18:28:44 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_decl.cpp:
        * TAO_IDL/be_include/be_decl.h:

          Removed compute_repoID(), the version that is always
          called in in the base class AST_Decl. Thanks to
          Brian Olson <bolson@rtlogic.com> for pointing out
          that the be_decl version was not doing the version
          part of the string correctly.

Fri Jan  4 16:30:04 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicAny/DynCommon.cpp (insert_reference):

          Since the argument is passed in as a CORBA::Object_ptr,
          and ultimately inserted into the member Any with the
          non-virtual operator <<=, then
          dyn_any->to_any()->type ()->id() would always yield
          "IDL:CORBA/Object:1.0", no matter what
          dyn_any->type()->id() yields. So the insertion into
          the memeber Any has been changed to use _tao_replace(),
          and passing in the dyn_any's type code, which is
          always of the derived type. Thanks to Mahesh Vedantam
          <mahesh@ociweb.com> for reporting the problem.

Fri Jan  4 15:21:33 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_visitor.cpp (visit_factory):

          Removed an unused argument.

        * TAO_IDL/fe/fe_tmplinst.cpp:

          Removed explicit instantiation of ACE_Node<char *>, since
          it already appears in ACE.

        * TAO_IDL/fe/lex.yy.cpp:

          Changed isspace() to ACE_OS::ace_isspace().

        * TAO_IDL/be/be_interface_strategy.cpp (compute_coll_names):

          Changed a local const char[] to static const char*. The
          string  "POA_" is assigned to this constant, and there
          has been a long-standing intermittent problem with
          garbage being generated in place of the string. Although
          the problem has never been duplicated by the DOC Group,
          Sorin Iordachescu <sorin.iordachescu@am-beo.com> has
          produced it repeated and has suggested the above fix.

        * TAO_IDL/util/utl_err.cpp:

          Removed all use of ACE_TEXT from methods that return char*.
          When compilation is done with ACE_USES_WCHAR, the return
          type is incorrect. Thanks to Johnny Willemsen
          <johnny_willemsen@planet.nl> for reporting the problem.

Fri Jan  4 14:32:43 2002  Craig Rodrigues  <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/Fill_QoS.h: Add #include <ace/OS_QoS.h>.

Thu Jan  3 07:18:22 2002  Christopher Kohlhoff  <chris@kohlhoff.com>

        * orbsvcs/LifeCycle_Service/LifeCycle_Service.bor:
          Added library required for a statically linked build.

        * orbsvcs/Notify_Service/NT_Notify_Service.bor:
        * orbsvcs/Notify_Service/Notify_Service.bor:
          Reverted the changes made to these files in
          Sun Dec 30 20:30:12 2001  Johnny Willemsen <jwillemsen@remedy.nl>
          as the trading library is required for a static build.

        * orbsvcs/orbsvcs/*.bor:
        * orbsvcs/orbsvcs/Security.rc:
        * tao/*/Makefile.bor:
        * tao/*/*.rc:
          Added Borland makefile support for the new resource files.

Wed Jan  2 20:48:36 2002  Douglas C. Schmidt  <schmidt@siesta.cs.wustl.edu>

        * TAO-INSTALL.html: Fixed a couple of missing links.  Thanks to
          Patrick Cosmo <Patrick@incognito.com> for reporting this.

Wed Jan  2 18:00:43 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/lex.yy.cpp:

          Changed an instance of != ' ' to !isspace.

Wed Jan  2 15:57:52 2002  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/orbsvcs/Naming/Naming_Context_Interface.cpp (to_url):
          The to_url method should actually be returning a corbaname type
          URL instead of the corbaloc style URL. According to the
          INS specification, the method should return a fully formed URL
          along with the key_string and corbaname format is the one that
          can have the key_string in it.

          Moved the pointer to the end of the dest string before
          concatenating something to it. Previously, it was returning only
          escaped key_string.

        * orbsvcs/tests/Interoperable_Naming/ncontextext_client_i.cpp :
          Modified the string that is passed to the to_url method to have
          a ':' before the dummy address. Now, its in one of the correct
          syntaxes.

          Thanks to Scott Harris <harris_s@ociweb.com> for reporting all
          these.

Wed Jan 02 15:25:53 2002  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/ValueFactory.h: Removed the non-standard tao extension
          repository_id().  According to the spec, for valuetypes without
          a factory method, the developer supplied ValueFactory class
          should inherit from CORBA::ValueFactoryBase directly.
          Therefore, we can no longer generate this repository_id() method
          in the IDL compiler.

          Changed the TAO_OBV_REGISTER_FACTORY to take the type of
          valuetype it handles as an extra parameter.  The macro will
          simply use the non-standard TAO extension to stick in the
          repository_id for the valuetype.  This may not be the correct
          way to get the repository_id for a valuetype as it is not clear
          to me how one can get it.

        * examples/OBV/Typed_Events/Event_Types_impl.h: Changed to inherit
          valuetype factories from CORBA::ValueFactoryBase.

        * examples/OBV/Typed_Events/Server_i.cpp:
        * examples/OBV/Typed_Events/Client_i.cpp: Added type of valuetype
          when registering factory with the TAO_OBV_REGISTER_FACTORY
          macro.

Wed Jan  2 15:27:57 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_valuetype.cpp:

          Added some missing ACE_INLINEs to the _var and _out class
          method implementation code generation.

Wed Jan  2 12:02:35 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/fe/lex.yy.cpp (idl_valid_version):

          Had to add a check for trailing whitespace. SunCC's
          preprocessor leaves it in, it seems, and this was
          leading to version strings being falsely invalidated.

Wed Jan  2 10:22:59 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_typedef/typedef_ci.cpp (visit_array):

          Made changes that were overlooked in

          Fri Dec 28 15:41:18 2001  Jeff Parsons <parsons@cs.wustl.edu>

          that correspond to changes made in typedef_ch.cpp.

        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp (visit_array):

          Cosmetic changes.

Wed Jan  2 09:41:03 2002  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/drv_init_ifr.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.h:

          Changes related to corresponding changes in the TAO IDL
          compiler regarding value types and #pragma prefix.

Tue Jan  1 17:40:23 2002  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.h:
        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
          Remove dummy copy constructor, that should clear some of the
          builds.

Tue Jan  1 09:38:58 2002  Venkita Subramonian  <venkita@cs.wustl.edu>

        * examples/RTCORBA/Activity/Activity.cpp:
          examples/RTCORBA/Activity/Builder.cpp:
          Fixed compile errors.
