//$Id$
project(TAO) : acelib, taoversion, core, tao_output, taodefaults, pidl, extra_core {
  sharedname   = TAO
  dynamicflags = TAO_BUILD_DLL
  macros += TAO_HAS_NO_HEADER_REMARSHALL

  // It is no longer necessary to override IDL_Files since it is a
  // custom build type and comes from the taoidldefaults base project.

  Source_Files(TAO_COMPONENTS) {
    Pluggable_Protocols {
      Transport_Acceptor.cpp
      Transport_Connector.cpp
      Transport.cpp
      Incoming_Message_Queue.cpp
      Resume_Handle.cpp
      Profile.cpp
      Endpoint.cpp
      Connector_Registry.cpp
      Connection_Handler.cpp
      Thread_Per_Connection_Handler.cpp
      Acceptor_Registry.cpp
      Protocol_Factory.cpp
      Acceptor_Filter.cpp
      IIOP_Factory.cpp
      IIOP_Lite_Factory.cpp
      IIOP_Profile.cpp
      IIOP_Transport.cpp
      IIOP_Connector.cpp
      IIOP_Acceptor.cpp
      IIOP_Connection_Handler.cpp
      IIOP_Endpoint.cpp
      IIOP_EndpointsC.cpp
      IIOP_EndpointsA.cpp
      IIOPC.cpp
      IIOPA.cpp
    }

    Pluggable_Messaging {
      Pluggable_Messaging.cpp
      Pluggable_Messaging_Utils.cpp
      GIOP_Message_Base.cpp
      GIOP_Message_Lite.cpp
      GIOP_Message_Generator_Parser.cpp
      GIOP_Message_Generator_Parser_10.cpp
      GIOP_Message_Generator_Parser_11.cpp
      GIOP_Message_Generator_Parser_12.cpp
      GIOP_Message_Generator_Parser_Impl.cpp
      GIOP_Utils.cpp
      GIOP_Message_Locate_Header.cpp
      target_specification.cpp
      GIOP_Message_State.cpp
      GIOP_Message_Version.cpp
      Tagged_Profile.cpp
    }
    Default_Resources {
      default_client.cpp
      default_server.cpp
      default_resource.cpp
      xt_resource.cpp
      qt_resource.cpp
    }
    Interpretive_Marshaling {
      append.cpp
      Marshal.cpp
      skip.cpp
    }
    IDL_Compiler {
      Managed_Types.cpp
    }
    ORB_Core {
      Any.cpp
      Any_Basic_Impl.cpp
      Any_Impl.cpp
      Any_Unknown_IDL_Type.cpp
      Any_SystemException.cpp
      CORBA_String.cpp
      CurrentC.cpp
      CurrentA.cpp
      Exception.cpp
      SystemException.cpp
      UserException.cpp
      WrongTransactionC.cpp
      WrongTransactionA.cpp
      Environment.cpp
      Object.cpp
      LocalObject.cpp
      ObjectIdListC.cpp
      ObjectIdListA.cpp
      ORB.cpp
      Policy_ForwardC.cpp
      Policy_ForwardA.cpp
      PolicyC.cpp
      PolicyA.cpp
      Policy_Validator.cpp
      Encodable.cpp
      Abstract_Servant_Base.cpp
      Object_Proxy_Broker.cpp
      Remote_Object_Proxy_Broker.cpp
      Object_Proxy_Impl.cpp
      DomainC.cpp
      DomainA.cpp
      TimeBaseC.cpp
      TimeBaseA.cpp
      Principal.cpp
      Sequence.cpp
      MProfile.cpp
      Stub.cpp
      Typecode.cpp
      CDR.cpp
      Client_Strategy_Factory.cpp
      debug.cpp
      Object_KeyC.cpp
      Protocols_Hooks.cpp
      Default_Protocols_Hooks.cpp
      Messaging_SyncScopeC.cpp
      Invocation_Base.cpp
      Invocation_Adapter.cpp
      LocateRequest_Invocation_Adapter.cpp
      Profile_Transport_Resolver.cpp
      Remote_Invocation.cpp
      Collocated_Invocation.cpp
      Synch_Invocation.cpp
      LocateRequest_Invocation.cpp
      Invocation_Endpoint_Selectors.cpp
      operation_details.cpp
      ClientRequestInfo.cpp
      ClientRequestInfo_i.cpp
      RequestInfo_Util.cpp
      ClientRequestInterceptor_Adapter.cpp
      PI_ForwardC.cpp
      PortableInterceptorC.cpp
      PortableInterceptorA.cpp
      PICurrent.cpp
      PICurrent_Copy_Callback.cpp
      PICurrent_ORBInitializer.cpp
      DynamicC.cpp
      DynamicA.cpp
      Dynamic_ParameterC.cpp
      Dynamic_ParameterA.cpp
      ParameterModeC.cpp
      AnySeqA.cpp
      AnySeqC.cpp
      BooleanSeqA.cpp
      BooleanSeqC.cpp
      CharSeqA.cpp
      CharSeqC.cpp
      DoubleSeqA.cpp
      DoubleSeqC.cpp
      FloatSeqA.cpp
      FloatSeqC.cpp
      LongDoubleSeqA.cpp
      LongDoubleSeqC.cpp
      LongLongSeqA.cpp
      LongLongSeqC.cpp
      LongSeqA.cpp
      LongSeqC.cpp
      OctetSeqA.cpp
      OctetSeqC.cpp
      ShortSeqA.cpp
      ShortSeqC.cpp
      StringSeqA.cpp
      StringSeqC.cpp
      ULongLongSeqA.cpp
      ULongLongSeqC.cpp
      ULongSeqA.cpp
      ULongSeqC.cpp
      UShortSeqA.cpp
      UShortSeqC.cpp
      WCharSeqA.cpp
      WCharSeqC.cpp
      WStringSeqA.cpp
      WStringSeqC.cpp
      Codeset_Manager.cpp
      Codeset_Translator_Factory.cpp
      UTF16_BOM_Translator.cpp
      UTF16_BOM_Factory.cpp
      ORB_Core.cpp
      ORB_Core_Auto_Ptr.cpp
      Collocation_Resolver.cpp
      Default_Collocation_Resolver.cpp
      Stub_Factory.cpp
      ORB_Table.cpp
      LF_Follower.cpp
      LF_Follower_Auto_Ptr.cpp
      LF_Follower_Auto_Adder.cpp
      Leader_Follower.cpp
      Leader_Follower_Flushing_Strategy.cpp
      LF_Event.cpp
      LF_Invocation_Event.cpp
      LF_CH_Event.cpp
      LF_Event_Binder.cpp
      LF_Event_Loop_Thread_Helper.cpp
      LF_Strategy.cpp
      LF_Strategy_Complete.cpp
      params.cpp
      Resource_Factory.cpp
      Server_Strategy_Factory.cpp
      Sync_Strategies.cpp
      TAO_Internal.cpp
      TAO_Server_Request.cpp
      Typecode_Constants.cpp
      PredefinedType_Seq_Tmplinst.cpp
      TypeCodeFactory_Adapter.cpp
      Wait_Strategy.cpp
      Wait_On_Read.cpp
      Wait_On_Reactor.cpp
      Wait_On_Leader_Follower.cpp
      Wait_On_LF_No_Upcall.cpp
      Transport_Mux_Strategy.cpp
      Exclusive_TMS.cpp
      Muxed_TMS.cpp
      Reply_Dispatcher.cpp
      Synch_Reply_Dispatcher.cpp
      Synch_Refcountable.cpp
      Asynch_Reply_Dispatcher_Base.cpp
      IOP_IORC.cpp
      IOP_IORA.cpp
      IOP_CodecC.cpp
      IOP_CodecA.cpp
      IOPC.cpp
      PollableC.cpp
      CONV_FRAMEC.cpp
      CONV_FRAMEA.cpp
      Tagged_Components.cpp
      Service_Context.cpp
      GIOPC.cpp
      GIOPA.cpp
      BoundsC.cpp
      BoundsA.cpp
      TAOC.cpp
      TAOA.cpp
      Object_Loader.cpp
      TAO_Singleton_Manager.cpp
      Adapter.cpp
      Services_Activate.cpp
      Service_Callbacks.cpp
      Parser_Registry.cpp
      IOR_Parser.cpp
      DLL_Parser.cpp
      FILE_Parser.cpp
      CORBALOC_Parser.cpp
      CORBANAME_Parser.cpp
      MCAST_Parser.cpp
      Bind_Dispatcher_Guard.cpp
      Fault_Tolerance_Service.cpp
      Interceptor_List.cpp
      IORInterceptor_Adapter.cpp
      IORInterceptor_Adapter_Factory.cpp
      IFR_Client_Adapter.cpp
      ORBInitInfo.cpp
      ORBInitializer_Registry.cpp
      PolicyFactory_Registry.cpp
      Cache_Entries.cpp
      Base_Transport_Property.cpp
      Transport_Cache_Manager.cpp
      Cleanup_Func_Registry.cpp
      Transport_Descriptor_Interface.cpp
      Object_Ref_Table.cpp
      BiDir_Adapter.cpp
      CodecFactory.cpp
      CodecFactory_ORBInitializer.cpp
      CDR_Encaps_Codec.cpp
      Endpoint_Selector_Factory.cpp
      Flushing_Strategy.cpp
      Block_Flushing_Strategy.cpp
      Reactive_Flushing_Strategy.cpp
      Connect_Strategy.cpp
      Blocked_Connect_Strategy.cpp
      Reactive_Connect_Strategy.cpp
      LF_Connect_Strategy.cpp
      Queued_Message.cpp
      Synch_Queued_Message.cpp
      Asynch_Queued_Message.cpp
      Transport_Timer.cpp
      Connection_Purging_Strategy.cpp
      LRU_Connection_Purging_Strategy.cpp
      Policy_Set.cpp
      Default_Endpoint_Selector_Factory.cpp
      Thread_Lane_Resources.cpp
      Thread_Lane_Resources_Manager.cpp
      Default_Thread_Lane_Resources_Manager.cpp
      Default_Stub_Factory.cpp
      Request_Dispatcher.cpp
      Valuetype_Adapter.cpp
      ObjectKey_Table.cpp
      Refcounted_ObjectKey.cpp
      TSS_Resources.cpp
      Argument.cpp
      Basic_Arguments.cpp
      Special_Basic_Arguments.cpp
    }
  }

  Header_Files {
    *.h
  }

  Inline_Files {
    *.i
    *.inl
  }

  Template_Files {
    *_T.cpp
    Acceptor_Impl.cpp
    Condition.cpp
    Connector_Impl.cpp
    TAO_Singleton.cpp
    orb.idl
  }
}
