/* $Id$
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please contact the current XSC maintainer:
 *             Will Otte <wotte@dre.vanderbilt.edu>
 */

#include "toplevel.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {
    // TopLevelPackageDescription
    //

    TopLevelPackageDescription::
    TopLevelPackageDescription (::CIAO::Config_Handlers::PackageConfiguration const& package__)
      :
      ::XSCRT::Type (),
      package_ (new ::CIAO::Config_Handlers::PackageConfiguration (package__)),
      regulator__ ()
    {
      package_->container (this);
    }

    TopLevelPackageDescription::
    TopLevelPackageDescription (::CIAO::Config_Handlers::TopLevelPackageDescription const& s)
      :
      ::XSCRT::Type (),
      package_ (new ::CIAO::Config_Handlers::PackageConfiguration (*s.package_)),
      regulator__ ()
    {
      package_->container (this);
    }

    ::CIAO::Config_Handlers::TopLevelPackageDescription& TopLevelPackageDescription::
    operator= (::CIAO::Config_Handlers::TopLevelPackageDescription const& s)
    {
      package (s.package ());

      return *this;
    }


    // TopLevelPackageDescription
    //
    ::CIAO::Config_Handlers::PackageConfiguration const& TopLevelPackageDescription::
    package () const
    {
      return *package_;
    }

    void TopLevelPackageDescription::
    package (::CIAO::Config_Handlers::PackageConfiguration const& e)
    {
      *package_ = e;
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
    // TopLevelPackageDescription
    //

    TopLevelPackageDescription::
    TopLevelPackageDescription (::XSCRT::XML::Element< ACE_TCHAR > const& e)
      :Base__ (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
        {
          ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
          ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

          if (n == "package")
            {
              package_ = ::std::auto_ptr< ::CIAO::Config_Handlers::PackageConfiguration > (new ::CIAO::Config_Handlers::PackageConfiguration (e));
              package_->container (this);
            }

          else
            {
            }
        }
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
  }
}

#include "XMLSchema/TypeInfo.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace
    {
      ::XMLSchema::TypeInfoInitializer < ACE_TCHAR > XMLSchemaTypeInfoInitializer_ (::XSCRT::extended_type_info_map ());

      struct TopLevelPackageDescriptionTypeInfoInitializer
      {
        TopLevelPackageDescriptionTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (TopLevelPackageDescription));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      TopLevelPackageDescriptionTypeInfoInitializer TopLevelPackageDescriptionTypeInfoInitializer_;
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace Traversal
    {
      // TopLevelPackageDescription
      //
      //

      void TopLevelPackageDescription::
      traverse (Type& o)
      {
        pre (o);
        package (o);
        post (o);
      }

      void TopLevelPackageDescription::
      traverse (Type const& o)
      {
        pre (o);
        package (o);
        post (o);
      }

      void TopLevelPackageDescription::
      pre (Type&)
      {
      }

      void TopLevelPackageDescription::
      pre (Type const&)
      {
      }

      void TopLevelPackageDescription::
      package (Type& o)
      {
        dispatch (o.package ());
      }

      void TopLevelPackageDescription::
      package (Type const& o)
      {
        dispatch (o.package ());
      }

      void TopLevelPackageDescription::
      post (Type&)
      {
      }

      void TopLevelPackageDescription::
      post (Type const&)
      {
      }
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace Writer
    {
      // TopLevelPackageDescription
      //
      //

      TopLevelPackageDescription::
      TopLevelPackageDescription (::XSCRT::XML::Element< ACE_TCHAR >& e)
        : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      TopLevelPackageDescription::
      TopLevelPackageDescription ()
      {
      }

      void TopLevelPackageDescription::
      traverse (Type const& o)
      {
        Traversal::TopLevelPackageDescription::traverse (o);
      }

      void TopLevelPackageDescription::
      package (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("package", top_ ()));
        Traversal::TopLevelPackageDescription::package (o);
        pop_ ();
      }
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
  }
}

