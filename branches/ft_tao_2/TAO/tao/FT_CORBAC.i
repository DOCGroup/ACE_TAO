/* -*- C++ -*- $Id$ */

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

// *************************************************************
// Inline operations for class FT::TagFTGroupTaggedComponent_var
// *************************************************************

ACE_INLINE
FT::TagFTGroupTaggedComponent_var::TagFTGroupTaggedComponent_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
FT::TagFTGroupTaggedComponent_var::TagFTGroupTaggedComponent_var (TagFTGroupTaggedComponent *p)
  : ptr_ (p)
{}

ACE_INLINE
FT::TagFTGroupTaggedComponent_var::TagFTGroupTaggedComponent_var (const ::FT::TagFTGroupTaggedComponent_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::FT::TagFTGroupTaggedComponent (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
FT::TagFTGroupTaggedComponent_var::~TagFTGroupTaggedComponent_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE FT::TagFTGroupTaggedComponent_var &
FT::TagFTGroupTaggedComponent_var::operator= (TagFTGroupTaggedComponent *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::FT::TagFTGroupTaggedComponent_var &
FT::TagFTGroupTaggedComponent_var::operator= (const ::FT::TagFTGroupTaggedComponent_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::TagFTGroupTaggedComponent (*p.ptr_), *this);
  }
  return *this;
}

ACE_INLINE const ::FT::TagFTGroupTaggedComponent *
FT::TagFTGroupTaggedComponent_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::TagFTGroupTaggedComponent *
FT::TagFTGroupTaggedComponent_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
FT::TagFTGroupTaggedComponent_var::operator const ::FT::TagFTGroupTaggedComponent &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
FT::TagFTGroupTaggedComponent_var::operator ::FT::TagFTGroupTaggedComponent &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
FT::TagFTGroupTaggedComponent_var::operator ::FT::TagFTGroupTaggedComponent &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
FT::TagFTGroupTaggedComponent_var::operator ::FT::TagFTGroupTaggedComponent *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::FT::TagFTGroupTaggedComponent &
FT::TagFTGroupTaggedComponent_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::FT::TagFTGroupTaggedComponent &
FT::TagFTGroupTaggedComponent_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::FT::TagFTGroupTaggedComponent *&
FT::TagFTGroupTaggedComponent_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::FT::TagFTGroupTaggedComponent *
FT::TagFTGroupTaggedComponent_var::_retn (void)
{
  ::FT::TagFTGroupTaggedComponent *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::FT::TagFTGroupTaggedComponent *
FT::TagFTGroupTaggedComponent_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class FT::TagFTGroupTaggedComponent_out
// *************************************************************

ACE_INLINE
FT::TagFTGroupTaggedComponent_out::TagFTGroupTaggedComponent_out (::FT::TagFTGroupTaggedComponent *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
FT::TagFTGroupTaggedComponent_out::TagFTGroupTaggedComponent_out (TagFTGroupTaggedComponent_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
FT::TagFTGroupTaggedComponent_out::TagFTGroupTaggedComponent_out (const ::FT::TagFTGroupTaggedComponent_out &p) // copy constructor
  : ptr_ (ACE_const_cast (TagFTGroupTaggedComponent_out&, p).ptr_)
{}

ACE_INLINE FT::TagFTGroupTaggedComponent_out &
FT::TagFTGroupTaggedComponent_out::operator= (const ::FT::TagFTGroupTaggedComponent_out &p)
{
  this->ptr_ = ACE_const_cast (TagFTGroupTaggedComponent_out&, p).ptr_;
  return *this;
}

ACE_INLINE FT::TagFTGroupTaggedComponent_out &
FT::TagFTGroupTaggedComponent_out::operator= (TagFTGroupTaggedComponent *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
FT::TagFTGroupTaggedComponent_out::operator ::FT::TagFTGroupTaggedComponent *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::FT::TagFTGroupTaggedComponent *&
FT::TagFTGroupTaggedComponent_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::FT::TagFTGroupTaggedComponent *
FT::TagFTGroupTaggedComponent_out::operator-> (void)
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class FT::TagFTPrimaryTaggedComponent_var
// *************************************************************

ACE_INLINE
FT::TagFTPrimaryTaggedComponent_var::TagFTPrimaryTaggedComponent_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
FT::TagFTPrimaryTaggedComponent_var::TagFTPrimaryTaggedComponent_var (TagFTPrimaryTaggedComponent *p)
  : ptr_ (p)
{}

ACE_INLINE
FT::TagFTPrimaryTaggedComponent_var::TagFTPrimaryTaggedComponent_var (const ::FT::TagFTPrimaryTaggedComponent_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::FT::TagFTPrimaryTaggedComponent (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
FT::TagFTPrimaryTaggedComponent_var::TagFTPrimaryTaggedComponent_var (const ::FT::TagFTPrimaryTaggedComponent &p)
{
  ACE_NEW (this->ptr_, ::FT::TagFTPrimaryTaggedComponent (p));
}

ACE_INLINE
FT::TagFTPrimaryTaggedComponent_var::~TagFTPrimaryTaggedComponent_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE FT::TagFTPrimaryTaggedComponent_var &
FT::TagFTPrimaryTaggedComponent_var::operator= (TagFTPrimaryTaggedComponent *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::FT::TagFTPrimaryTaggedComponent_var &
FT::TagFTPrimaryTaggedComponent_var::operator= (const ::FT::TagFTPrimaryTaggedComponent_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::TagFTPrimaryTaggedComponent (*p.ptr_), *this);
  }
  return *this;
}

// fixed-size types only
ACE_INLINE FT::TagFTPrimaryTaggedComponent_var &
FT::TagFTPrimaryTaggedComponent_var::operator= (const ::FT::TagFTPrimaryTaggedComponent &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::TagFTPrimaryTaggedComponent (p), *this);
  }
  return *this;
}

ACE_INLINE const ::FT::TagFTPrimaryTaggedComponent *
FT::TagFTPrimaryTaggedComponent_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::TagFTPrimaryTaggedComponent *
FT::TagFTPrimaryTaggedComponent_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
FT::TagFTPrimaryTaggedComponent_var::operator const ::FT::TagFTPrimaryTaggedComponent &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
FT::TagFTPrimaryTaggedComponent_var::operator ::FT::TagFTPrimaryTaggedComponent &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
FT::TagFTPrimaryTaggedComponent_var::operator ::FT::TagFTPrimaryTaggedComponent &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE const ::FT::TagFTPrimaryTaggedComponent &
FT::TagFTPrimaryTaggedComponent_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::FT::TagFTPrimaryTaggedComponent &
FT::TagFTPrimaryTaggedComponent_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE ::FT::TagFTPrimaryTaggedComponent &
FT::TagFTPrimaryTaggedComponent_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::FT::TagFTPrimaryTaggedComponent
FT::TagFTPrimaryTaggedComponent_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::FT::TagFTPrimaryTaggedComponent *
FT::TagFTPrimaryTaggedComponent_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class FT::FTGroupVersionServiceContext_var
// *************************************************************

ACE_INLINE
FT::FTGroupVersionServiceContext_var::FTGroupVersionServiceContext_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
FT::FTGroupVersionServiceContext_var::FTGroupVersionServiceContext_var (FTGroupVersionServiceContext *p)
  : ptr_ (p)
{}

ACE_INLINE
FT::FTGroupVersionServiceContext_var::FTGroupVersionServiceContext_var (const ::FT::FTGroupVersionServiceContext_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::FT::FTGroupVersionServiceContext (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
FT::FTGroupVersionServiceContext_var::FTGroupVersionServiceContext_var (const ::FT::FTGroupVersionServiceContext &p)
{
  ACE_NEW (this->ptr_, ::FT::FTGroupVersionServiceContext (p));
}

ACE_INLINE
FT::FTGroupVersionServiceContext_var::~FTGroupVersionServiceContext_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE FT::FTGroupVersionServiceContext_var &
FT::FTGroupVersionServiceContext_var::operator= (FTGroupVersionServiceContext *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::FT::FTGroupVersionServiceContext_var &
FT::FTGroupVersionServiceContext_var::operator= (const ::FT::FTGroupVersionServiceContext_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::FTGroupVersionServiceContext (*p.ptr_), *this);
  }
  return *this;
}

// fixed-size types only
ACE_INLINE FT::FTGroupVersionServiceContext_var &
FT::FTGroupVersionServiceContext_var::operator= (const ::FT::FTGroupVersionServiceContext &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::FTGroupVersionServiceContext (p), *this);
  }
  return *this;
}

ACE_INLINE const ::FT::FTGroupVersionServiceContext *
FT::FTGroupVersionServiceContext_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::FTGroupVersionServiceContext *
FT::FTGroupVersionServiceContext_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
FT::FTGroupVersionServiceContext_var::operator const ::FT::FTGroupVersionServiceContext &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
FT::FTGroupVersionServiceContext_var::operator ::FT::FTGroupVersionServiceContext &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
FT::FTGroupVersionServiceContext_var::operator ::FT::FTGroupVersionServiceContext &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE const ::FT::FTGroupVersionServiceContext &
FT::FTGroupVersionServiceContext_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::FT::FTGroupVersionServiceContext &
FT::FTGroupVersionServiceContext_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE ::FT::FTGroupVersionServiceContext &
FT::FTGroupVersionServiceContext_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::FT::FTGroupVersionServiceContext
FT::FTGroupVersionServiceContext_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::FT::FTGroupVersionServiceContext *
FT::FTGroupVersionServiceContext_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class FT::FTRequestServiceContext_var
// *************************************************************

ACE_INLINE
FT::FTRequestServiceContext_var::FTRequestServiceContext_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
FT::FTRequestServiceContext_var::FTRequestServiceContext_var (FTRequestServiceContext *p)
  : ptr_ (p)
{}

ACE_INLINE
FT::FTRequestServiceContext_var::FTRequestServiceContext_var (const ::FT::FTRequestServiceContext_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::FT::FTRequestServiceContext (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
FT::FTRequestServiceContext_var::~FTRequestServiceContext_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE FT::FTRequestServiceContext_var &
FT::FTRequestServiceContext_var::operator= (FTRequestServiceContext *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::FT::FTRequestServiceContext_var &
FT::FTRequestServiceContext_var::operator= (const ::FT::FTRequestServiceContext_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::FTRequestServiceContext (*p.ptr_), *this);
  }
  return *this;
}

ACE_INLINE const ::FT::FTRequestServiceContext *
FT::FTRequestServiceContext_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::FTRequestServiceContext *
FT::FTRequestServiceContext_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
FT::FTRequestServiceContext_var::operator const ::FT::FTRequestServiceContext &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
FT::FTRequestServiceContext_var::operator ::FT::FTRequestServiceContext &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
FT::FTRequestServiceContext_var::operator ::FT::FTRequestServiceContext &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
FT::FTRequestServiceContext_var::operator ::FT::FTRequestServiceContext *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::FT::FTRequestServiceContext &
FT::FTRequestServiceContext_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::FT::FTRequestServiceContext &
FT::FTRequestServiceContext_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::FT::FTRequestServiceContext *&
FT::FTRequestServiceContext_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::FT::FTRequestServiceContext *
FT::FTRequestServiceContext_var::_retn (void)
{
  ::FT::FTRequestServiceContext *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::FT::FTRequestServiceContext *
FT::FTRequestServiceContext_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class FT::FTRequestServiceContext_out
// *************************************************************

ACE_INLINE
FT::FTRequestServiceContext_out::FTRequestServiceContext_out (::FT::FTRequestServiceContext *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
FT::FTRequestServiceContext_out::FTRequestServiceContext_out (FTRequestServiceContext_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
FT::FTRequestServiceContext_out::FTRequestServiceContext_out (const ::FT::FTRequestServiceContext_out &p) // copy constructor
  : ptr_ (ACE_const_cast (FTRequestServiceContext_out&, p).ptr_)
{}

ACE_INLINE FT::FTRequestServiceContext_out &
FT::FTRequestServiceContext_out::operator= (const ::FT::FTRequestServiceContext_out &p)
{
  this->ptr_ = ACE_const_cast (FTRequestServiceContext_out&, p).ptr_;
  return *this;
}

ACE_INLINE FT::FTRequestServiceContext_out &
FT::FTRequestServiceContext_out::operator= (FTRequestServiceContext *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
FT::FTRequestServiceContext_out::operator ::FT::FTRequestServiceContext *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::FT::FTRequestServiceContext *&
FT::FTRequestServiceContext_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::FT::FTRequestServiceContext *
FT::FTRequestServiceContext_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
FT::RequestDurationPolicy::RequestDurationPolicy (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}


#if !defined (_FT_REQUESTDURATIONPOLICY___VAR_CI_)
#define _FT_REQUESTDURATIONPOLICY___VAR_CI_

// *************************************************************
// Inline operations for class FT::RequestDurationPolicy_var
// *************************************************************

ACE_INLINE
FT::RequestDurationPolicy_var::RequestDurationPolicy_var (void) // default constructor
  : ptr_ (RequestDurationPolicy::_nil ())
{}

ACE_INLINE
FT::RequestDurationPolicy_var::RequestDurationPolicy_var (RequestDurationPolicy_ptr p)
  : ptr_ (p)
{}

ACE_INLINE ::FT::RequestDurationPolicy_ptr
FT::RequestDurationPolicy_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
FT::RequestDurationPolicy_var::RequestDurationPolicy_var (const ::FT::RequestDurationPolicy_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (RequestDurationPolicy::_duplicate (p.ptr ()))
{}

ACE_INLINE
FT::RequestDurationPolicy_var::~RequestDurationPolicy_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE FT::RequestDurationPolicy_var &
FT::RequestDurationPolicy_var::operator= (RequestDurationPolicy_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE FT::RequestDurationPolicy_var &
FT::RequestDurationPolicy_var::operator= (const ::FT::RequestDurationPolicy_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::FT::RequestDurationPolicy::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
FT::RequestDurationPolicy_var::operator const ::FT::RequestDurationPolicy_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
FT::RequestDurationPolicy_var::operator ::FT::RequestDurationPolicy_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::FT::RequestDurationPolicy_ptr
FT::RequestDurationPolicy_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::RequestDurationPolicy_ptr
FT::RequestDurationPolicy_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::RequestDurationPolicy_ptr &
FT::RequestDurationPolicy_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::FT::RequestDurationPolicy_ptr &
FT::RequestDurationPolicy_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FT::RequestDurationPolicy::_nil ();
  return this->ptr_;
}

ACE_INLINE ::FT::RequestDurationPolicy_ptr
FT::RequestDurationPolicy_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::FT::RequestDurationPolicy_ptr val = this->ptr_;
  this->ptr_ = ::FT::RequestDurationPolicy::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_FT_REQUESTDURATIONPOLICY___OUT_CI_)
#define _FT_REQUESTDURATIONPOLICY___OUT_CI_

// *************************************************************
// Inline operations for class FT::RequestDurationPolicy_out
// *************************************************************

ACE_INLINE
FT::RequestDurationPolicy_out::RequestDurationPolicy_out (RequestDurationPolicy_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::FT::RequestDurationPolicy::_nil ();
}

ACE_INLINE
FT::RequestDurationPolicy_out::RequestDurationPolicy_out (RequestDurationPolicy_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FT::RequestDurationPolicy::_nil ();
}

ACE_INLINE
FT::RequestDurationPolicy_out::RequestDurationPolicy_out (const ::FT::RequestDurationPolicy_out &p) // copy constructor
  : ptr_ (ACE_const_cast (RequestDurationPolicy_out &, p).ptr_)
{}

ACE_INLINE ::FT::RequestDurationPolicy_out &
FT::RequestDurationPolicy_out::operator= (const ::FT::RequestDurationPolicy_out &p)
{
  this->ptr_ = ACE_const_cast (RequestDurationPolicy_out&, p).ptr_;
  return *this;
}

ACE_INLINE FT::RequestDurationPolicy_out &
FT::RequestDurationPolicy_out::operator= (const ::FT::RequestDurationPolicy_var &p)
{
  this->ptr_ = ::FT::RequestDurationPolicy::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE FT::RequestDurationPolicy_out &
FT::RequestDurationPolicy_out::operator= (RequestDurationPolicy_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
FT::RequestDurationPolicy_out::operator ::FT::RequestDurationPolicy_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::FT::RequestDurationPolicy_ptr &
FT::RequestDurationPolicy_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::FT::RequestDurationPolicy_ptr
FT::RequestDurationPolicy_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class FT::TagFTHeartbeatEnabledTaggedComponent_var
// *************************************************************

ACE_INLINE
FT::TagFTHeartbeatEnabledTaggedComponent_var::TagFTHeartbeatEnabledTaggedComponent_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
FT::TagFTHeartbeatEnabledTaggedComponent_var::TagFTHeartbeatEnabledTaggedComponent_var (TagFTHeartbeatEnabledTaggedComponent *p)
  : ptr_ (p)
{}

ACE_INLINE
FT::TagFTHeartbeatEnabledTaggedComponent_var::TagFTHeartbeatEnabledTaggedComponent_var (const ::FT::TagFTHeartbeatEnabledTaggedComponent_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::FT::TagFTHeartbeatEnabledTaggedComponent (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
FT::TagFTHeartbeatEnabledTaggedComponent_var::TagFTHeartbeatEnabledTaggedComponent_var (const ::FT::TagFTHeartbeatEnabledTaggedComponent &p)
{
  ACE_NEW (this->ptr_, ::FT::TagFTHeartbeatEnabledTaggedComponent (p));
}

ACE_INLINE
FT::TagFTHeartbeatEnabledTaggedComponent_var::~TagFTHeartbeatEnabledTaggedComponent_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE FT::TagFTHeartbeatEnabledTaggedComponent_var &
FT::TagFTHeartbeatEnabledTaggedComponent_var::operator= (TagFTHeartbeatEnabledTaggedComponent *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::FT::TagFTHeartbeatEnabledTaggedComponent_var &
FT::TagFTHeartbeatEnabledTaggedComponent_var::operator= (const ::FT::TagFTHeartbeatEnabledTaggedComponent_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::TagFTHeartbeatEnabledTaggedComponent (*p.ptr_), *this);
  }
  return *this;
}

// fixed-size types only
ACE_INLINE FT::TagFTHeartbeatEnabledTaggedComponent_var &
FT::TagFTHeartbeatEnabledTaggedComponent_var::operator= (const ::FT::TagFTHeartbeatEnabledTaggedComponent &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::TagFTHeartbeatEnabledTaggedComponent (p), *this);
  }
  return *this;
}

ACE_INLINE const ::FT::TagFTHeartbeatEnabledTaggedComponent *
FT::TagFTHeartbeatEnabledTaggedComponent_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::TagFTHeartbeatEnabledTaggedComponent *
FT::TagFTHeartbeatEnabledTaggedComponent_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
FT::TagFTHeartbeatEnabledTaggedComponent_var::operator const ::FT::TagFTHeartbeatEnabledTaggedComponent &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
FT::TagFTHeartbeatEnabledTaggedComponent_var::operator ::FT::TagFTHeartbeatEnabledTaggedComponent &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
FT::TagFTHeartbeatEnabledTaggedComponent_var::operator ::FT::TagFTHeartbeatEnabledTaggedComponent &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE const ::FT::TagFTHeartbeatEnabledTaggedComponent &
FT::TagFTHeartbeatEnabledTaggedComponent_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::FT::TagFTHeartbeatEnabledTaggedComponent &
FT::TagFTHeartbeatEnabledTaggedComponent_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE ::FT::TagFTHeartbeatEnabledTaggedComponent &
FT::TagFTHeartbeatEnabledTaggedComponent_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::FT::TagFTHeartbeatEnabledTaggedComponent
FT::TagFTHeartbeatEnabledTaggedComponent_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::FT::TagFTHeartbeatEnabledTaggedComponent *
FT::TagFTHeartbeatEnabledTaggedComponent_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class FT::HeartbeatPolicyValue_var
// *************************************************************

ACE_INLINE
FT::HeartbeatPolicyValue_var::HeartbeatPolicyValue_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
FT::HeartbeatPolicyValue_var::HeartbeatPolicyValue_var (HeartbeatPolicyValue *p)
  : ptr_ (p)
{}

ACE_INLINE
FT::HeartbeatPolicyValue_var::HeartbeatPolicyValue_var (const ::FT::HeartbeatPolicyValue_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::FT::HeartbeatPolicyValue (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
FT::HeartbeatPolicyValue_var::HeartbeatPolicyValue_var (const ::FT::HeartbeatPolicyValue &p)
{
  ACE_NEW (this->ptr_, ::FT::HeartbeatPolicyValue (p));
}

ACE_INLINE
FT::HeartbeatPolicyValue_var::~HeartbeatPolicyValue_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE FT::HeartbeatPolicyValue_var &
FT::HeartbeatPolicyValue_var::operator= (HeartbeatPolicyValue *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::FT::HeartbeatPolicyValue_var &
FT::HeartbeatPolicyValue_var::operator= (const ::FT::HeartbeatPolicyValue_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::HeartbeatPolicyValue (*p.ptr_), *this);
  }
  return *this;
}

// fixed-size types only
ACE_INLINE FT::HeartbeatPolicyValue_var &
FT::HeartbeatPolicyValue_var::operator= (const ::FT::HeartbeatPolicyValue &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::HeartbeatPolicyValue (p), *this);
  }
  return *this;
}

ACE_INLINE const ::FT::HeartbeatPolicyValue *
FT::HeartbeatPolicyValue_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicyValue *
FT::HeartbeatPolicyValue_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
FT::HeartbeatPolicyValue_var::operator const ::FT::HeartbeatPolicyValue &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
FT::HeartbeatPolicyValue_var::operator ::FT::HeartbeatPolicyValue &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
FT::HeartbeatPolicyValue_var::operator ::FT::HeartbeatPolicyValue &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE const ::FT::HeartbeatPolicyValue &
FT::HeartbeatPolicyValue_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicyValue &
FT::HeartbeatPolicyValue_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE ::FT::HeartbeatPolicyValue &
FT::HeartbeatPolicyValue_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicyValue
FT::HeartbeatPolicyValue_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicyValue *
FT::HeartbeatPolicyValue_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
FT::HeartbeatPolicy::HeartbeatPolicy (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}


#if !defined (_FT_HEARTBEATPOLICY___VAR_CI_)
#define _FT_HEARTBEATPOLICY___VAR_CI_

// *************************************************************
// Inline operations for class FT::HeartbeatPolicy_var
// *************************************************************

ACE_INLINE
FT::HeartbeatPolicy_var::HeartbeatPolicy_var (void) // default constructor
  : ptr_ (HeartbeatPolicy::_nil ())
{}

ACE_INLINE
FT::HeartbeatPolicy_var::HeartbeatPolicy_var (HeartbeatPolicy_ptr p)
  : ptr_ (p)
{}

ACE_INLINE ::FT::HeartbeatPolicy_ptr
FT::HeartbeatPolicy_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
FT::HeartbeatPolicy_var::HeartbeatPolicy_var (const ::FT::HeartbeatPolicy_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (HeartbeatPolicy::_duplicate (p.ptr ()))
{}

ACE_INLINE
FT::HeartbeatPolicy_var::~HeartbeatPolicy_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE FT::HeartbeatPolicy_var &
FT::HeartbeatPolicy_var::operator= (HeartbeatPolicy_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE FT::HeartbeatPolicy_var &
FT::HeartbeatPolicy_var::operator= (const ::FT::HeartbeatPolicy_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::FT::HeartbeatPolicy::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
FT::HeartbeatPolicy_var::operator const ::FT::HeartbeatPolicy_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
FT::HeartbeatPolicy_var::operator ::FT::HeartbeatPolicy_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicy_ptr
FT::HeartbeatPolicy_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicy_ptr
FT::HeartbeatPolicy_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicy_ptr &
FT::HeartbeatPolicy_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicy_ptr &
FT::HeartbeatPolicy_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FT::HeartbeatPolicy::_nil ();
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicy_ptr
FT::HeartbeatPolicy_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::FT::HeartbeatPolicy_ptr val = this->ptr_;
  this->ptr_ = ::FT::HeartbeatPolicy::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_FT_HEARTBEATPOLICY___OUT_CI_)
#define _FT_HEARTBEATPOLICY___OUT_CI_

// *************************************************************
// Inline operations for class FT::HeartbeatPolicy_out
// *************************************************************

ACE_INLINE
FT::HeartbeatPolicy_out::HeartbeatPolicy_out (HeartbeatPolicy_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::FT::HeartbeatPolicy::_nil ();
}

ACE_INLINE
FT::HeartbeatPolicy_out::HeartbeatPolicy_out (HeartbeatPolicy_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FT::HeartbeatPolicy::_nil ();
}

ACE_INLINE
FT::HeartbeatPolicy_out::HeartbeatPolicy_out (const ::FT::HeartbeatPolicy_out &p) // copy constructor
  : ptr_ (ACE_const_cast (HeartbeatPolicy_out &, p).ptr_)
{}

ACE_INLINE ::FT::HeartbeatPolicy_out &
FT::HeartbeatPolicy_out::operator= (const ::FT::HeartbeatPolicy_out &p)
{
  this->ptr_ = ACE_const_cast (HeartbeatPolicy_out&, p).ptr_;
  return *this;
}

ACE_INLINE FT::HeartbeatPolicy_out &
FT::HeartbeatPolicy_out::operator= (const ::FT::HeartbeatPolicy_var &p)
{
  this->ptr_ = ::FT::HeartbeatPolicy::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE FT::HeartbeatPolicy_out &
FT::HeartbeatPolicy_out::operator= (HeartbeatPolicy_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
FT::HeartbeatPolicy_out::operator ::FT::HeartbeatPolicy_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicy_ptr &
FT::HeartbeatPolicy_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatPolicy_ptr
FT::HeartbeatPolicy_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
FT::HeartbeatEnabledPolicy::HeartbeatEnabledPolicy (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}


#if !defined (_FT_HEARTBEATENABLEDPOLICY___VAR_CI_)
#define _FT_HEARTBEATENABLEDPOLICY___VAR_CI_

// *************************************************************
// Inline operations for class FT::HeartbeatEnabledPolicy_var
// *************************************************************

ACE_INLINE
FT::HeartbeatEnabledPolicy_var::HeartbeatEnabledPolicy_var (void) // default constructor
  : ptr_ (HeartbeatEnabledPolicy::_nil ())
{}

ACE_INLINE
FT::HeartbeatEnabledPolicy_var::HeartbeatEnabledPolicy_var (HeartbeatEnabledPolicy_ptr p)
  : ptr_ (p)
{}

ACE_INLINE ::FT::HeartbeatEnabledPolicy_ptr
FT::HeartbeatEnabledPolicy_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
FT::HeartbeatEnabledPolicy_var::HeartbeatEnabledPolicy_var (const ::FT::HeartbeatEnabledPolicy_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (HeartbeatEnabledPolicy::_duplicate (p.ptr ()))
{}

ACE_INLINE
FT::HeartbeatEnabledPolicy_var::~HeartbeatEnabledPolicy_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE FT::HeartbeatEnabledPolicy_var &
FT::HeartbeatEnabledPolicy_var::operator= (HeartbeatEnabledPolicy_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE FT::HeartbeatEnabledPolicy_var &
FT::HeartbeatEnabledPolicy_var::operator= (const ::FT::HeartbeatEnabledPolicy_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::FT::HeartbeatEnabledPolicy::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
FT::HeartbeatEnabledPolicy_var::operator const ::FT::HeartbeatEnabledPolicy_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
FT::HeartbeatEnabledPolicy_var::operator ::FT::HeartbeatEnabledPolicy_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatEnabledPolicy_ptr
FT::HeartbeatEnabledPolicy_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatEnabledPolicy_ptr
FT::HeartbeatEnabledPolicy_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatEnabledPolicy_ptr &
FT::HeartbeatEnabledPolicy_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatEnabledPolicy_ptr &
FT::HeartbeatEnabledPolicy_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FT::HeartbeatEnabledPolicy::_nil ();
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatEnabledPolicy_ptr
FT::HeartbeatEnabledPolicy_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::FT::HeartbeatEnabledPolicy_ptr val = this->ptr_;
  this->ptr_ = ::FT::HeartbeatEnabledPolicy::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_FT_HEARTBEATENABLEDPOLICY___OUT_CI_)
#define _FT_HEARTBEATENABLEDPOLICY___OUT_CI_

// *************************************************************
// Inline operations for class FT::HeartbeatEnabledPolicy_out
// *************************************************************

ACE_INLINE
FT::HeartbeatEnabledPolicy_out::HeartbeatEnabledPolicy_out (HeartbeatEnabledPolicy_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::FT::HeartbeatEnabledPolicy::_nil ();
}

ACE_INLINE
FT::HeartbeatEnabledPolicy_out::HeartbeatEnabledPolicy_out (HeartbeatEnabledPolicy_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FT::HeartbeatEnabledPolicy::_nil ();
}

ACE_INLINE
FT::HeartbeatEnabledPolicy_out::HeartbeatEnabledPolicy_out (const ::FT::HeartbeatEnabledPolicy_out &p) // copy constructor
  : ptr_ (ACE_const_cast (HeartbeatEnabledPolicy_out &, p).ptr_)
{}

ACE_INLINE ::FT::HeartbeatEnabledPolicy_out &
FT::HeartbeatEnabledPolicy_out::operator= (const ::FT::HeartbeatEnabledPolicy_out &p)
{
  this->ptr_ = ACE_const_cast (HeartbeatEnabledPolicy_out&, p).ptr_;
  return *this;
}

ACE_INLINE FT::HeartbeatEnabledPolicy_out &
FT::HeartbeatEnabledPolicy_out::operator= (const ::FT::HeartbeatEnabledPolicy_var &p)
{
  this->ptr_ = ::FT::HeartbeatEnabledPolicy::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE FT::HeartbeatEnabledPolicy_out &
FT::HeartbeatEnabledPolicy_out::operator= (HeartbeatEnabledPolicy_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
FT::HeartbeatEnabledPolicy_out::operator ::FT::HeartbeatEnabledPolicy_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatEnabledPolicy_ptr &
FT::HeartbeatEnabledPolicy_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::FT::HeartbeatEnabledPolicy_ptr
FT::HeartbeatEnabledPolicy_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
FT::GenericFactory::GenericFactory (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}


#if !defined (_FT_GENERICFACTORY___VAR_CI_)
#define _FT_GENERICFACTORY___VAR_CI_

// *************************************************************
// Inline operations for class FT::GenericFactory_var
// *************************************************************

ACE_INLINE
FT::GenericFactory_var::GenericFactory_var (void) // default constructor
  : ptr_ (FT::GenericFactory::_nil ())
{}

ACE_INLINE
FT::GenericFactory_var::GenericFactory_var (FT::GenericFactory_ptr p)
  : ptr_ (p)
{}

ACE_INLINE FT::GenericFactory_ptr 
FT::GenericFactory_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
FT::GenericFactory_var::GenericFactory_var (const FT::GenericFactory_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (GenericFactory::_duplicate (p.ptr ()))
{}

ACE_INLINE
FT::GenericFactory_var::~GenericFactory_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE FT::GenericFactory_var &
FT::GenericFactory_var::operator= (FT::GenericFactory_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE FT::GenericFactory_var &
FT::GenericFactory_var::operator= (const FT::GenericFactory_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = FT::GenericFactory::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
FT::GenericFactory_var::operator const FT::GenericFactory_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
FT::GenericFactory_var::operator FT::GenericFactory_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE FT::GenericFactory_ptr 
FT::GenericFactory_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE FT::GenericFactory_ptr
FT::GenericFactory_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE FT::GenericFactory_ptr &
FT::GenericFactory_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE FT::GenericFactory_ptr &
FT::GenericFactory_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = FT::GenericFactory::_nil ();
  return this->ptr_;
}

ACE_INLINE FT::GenericFactory_ptr 
FT::GenericFactory_var::_retn (void)
{
  // yield ownership of managed obj reference
  FT::GenericFactory_ptr val = this->ptr_;
  this->ptr_ = FT::GenericFactory::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_FT_GENERICFACTORY___OUT_CI_)
#define _FT_GENERICFACTORY___OUT_CI_

// *************************************************************
// Inline operations for class FT::GenericFactory_out
// *************************************************************

ACE_INLINE
FT::GenericFactory_out::GenericFactory_out (FT::GenericFactory_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = FT::GenericFactory::_nil ();
}

ACE_INLINE
FT::GenericFactory_out::GenericFactory_out (FT::GenericFactory_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = FT::GenericFactory::_nil ();
}

ACE_INLINE
FT::GenericFactory_out::GenericFactory_out (const FT::GenericFactory_out &p) // copy constructor
  : ptr_ (ACE_const_cast (FT::GenericFactory_out&,p).ptr_)
{}

ACE_INLINE FT::GenericFactory_out &
FT::GenericFactory_out::operator= (const FT::GenericFactory_out &p)
{
  this->ptr_ = ACE_const_cast (FT::GenericFactory_out&,p).ptr_;
  return *this;
}

ACE_INLINE FT::GenericFactory_out &
FT::GenericFactory_out::operator= (const FT::GenericFactory_var &p)
{
  this->ptr_ = FT::GenericFactory::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE FT::GenericFactory_out &
FT::GenericFactory_out::operator= (FT::GenericFactory_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
FT::GenericFactory_out::operator FT::GenericFactory_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE FT::GenericFactory_ptr &
FT::GenericFactory_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE FT::GenericFactory_ptr 
FT::GenericFactory_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
FT::FaultNotifier::FaultNotifier (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}


#if !defined (_FT_FAULTNOTIFIER___VAR_CI_)
#define _FT_FAULTNOTIFIER___VAR_CI_

// *************************************************************
// Inline operations for class FT::FaultNotifier_var
// *************************************************************

ACE_INLINE
FT::FaultNotifier_var::FaultNotifier_var (void) // default constructor
  : ptr_ (FT::FaultNotifier::_nil ())
{}

ACE_INLINE
FT::FaultNotifier_var::FaultNotifier_var (FT::FaultNotifier_ptr p)
  : ptr_ (p)
{}

ACE_INLINE FT::FaultNotifier_ptr 
FT::FaultNotifier_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
FT::FaultNotifier_var::FaultNotifier_var (const FT::FaultNotifier_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (FaultNotifier::_duplicate (p.ptr ()))
{}

ACE_INLINE
FT::FaultNotifier_var::~FaultNotifier_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE FT::FaultNotifier_var &
FT::FaultNotifier_var::operator= (FT::FaultNotifier_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE FT::FaultNotifier_var &
FT::FaultNotifier_var::operator= (const FT::FaultNotifier_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = FT::FaultNotifier::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
FT::FaultNotifier_var::operator const FT::FaultNotifier_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
FT::FaultNotifier_var::operator FT::FaultNotifier_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE FT::FaultNotifier_ptr 
FT::FaultNotifier_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE FT::FaultNotifier_ptr
FT::FaultNotifier_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE FT::FaultNotifier_ptr &
FT::FaultNotifier_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE FT::FaultNotifier_ptr &
FT::FaultNotifier_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = FT::FaultNotifier::_nil ();
  return this->ptr_;
}

ACE_INLINE FT::FaultNotifier_ptr 
FT::FaultNotifier_var::_retn (void)
{
  // yield ownership of managed obj reference
  FT::FaultNotifier_ptr val = this->ptr_;
  this->ptr_ = FT::FaultNotifier::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_FT_FAULTNOTIFIER___OUT_CI_)
#define _FT_FAULTNOTIFIER___OUT_CI_

// *************************************************************
// Inline operations for class FT::FaultNotifier_out
// *************************************************************

ACE_INLINE
FT::FaultNotifier_out::FaultNotifier_out (FT::FaultNotifier_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = FT::FaultNotifier::_nil ();
}

ACE_INLINE
FT::FaultNotifier_out::FaultNotifier_out (FT::FaultNotifier_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = FT::FaultNotifier::_nil ();
}

ACE_INLINE
FT::FaultNotifier_out::FaultNotifier_out (const FT::FaultNotifier_out &p) // copy constructor
  : ptr_ (ACE_const_cast (FT::FaultNotifier_out&,p).ptr_)
{}

ACE_INLINE FT::FaultNotifier_out &
FT::FaultNotifier_out::operator= (const FT::FaultNotifier_out &p)
{
  this->ptr_ = ACE_const_cast (FT::FaultNotifier_out&,p).ptr_;
  return *this;
}

ACE_INLINE FT::FaultNotifier_out &
FT::FaultNotifier_out::operator= (const FT::FaultNotifier_var &p)
{
  this->ptr_ = FT::FaultNotifier::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE FT::FaultNotifier_out &
FT::FaultNotifier_out::operator= (FT::FaultNotifier_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
FT::FaultNotifier_out::operator FT::FaultNotifier_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE FT::FaultNotifier_ptr &
FT::FaultNotifier_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE FT::FaultNotifier_ptr 
FT::FaultNotifier_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class FT::FaultMonitoringIntervalAndTimeoutValue_var
// *************************************************************

ACE_INLINE
FT::FaultMonitoringIntervalAndTimeoutValue_var::FaultMonitoringIntervalAndTimeoutValue_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
FT::FaultMonitoringIntervalAndTimeoutValue_var::FaultMonitoringIntervalAndTimeoutValue_var (FaultMonitoringIntervalAndTimeoutValue *p)
  : ptr_ (p)
{}

ACE_INLINE
FT::FaultMonitoringIntervalAndTimeoutValue_var::FaultMonitoringIntervalAndTimeoutValue_var (const ::FT::FaultMonitoringIntervalAndTimeoutValue_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::FT::FaultMonitoringIntervalAndTimeoutValue (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size types only
ACE_INLINE
FT::FaultMonitoringIntervalAndTimeoutValue_var::FaultMonitoringIntervalAndTimeoutValue_var (const ::FT::FaultMonitoringIntervalAndTimeoutValue &p)
{
  ACE_NEW (this->ptr_, ::FT::FaultMonitoringIntervalAndTimeoutValue (p));
}

ACE_INLINE
FT::FaultMonitoringIntervalAndTimeoutValue_var::~FaultMonitoringIntervalAndTimeoutValue_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE FT::FaultMonitoringIntervalAndTimeoutValue_var &
FT::FaultMonitoringIntervalAndTimeoutValue_var::operator= (FaultMonitoringIntervalAndTimeoutValue *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::FT::FaultMonitoringIntervalAndTimeoutValue_var &
FT::FaultMonitoringIntervalAndTimeoutValue_var::operator= (const ::FT::FaultMonitoringIntervalAndTimeoutValue_var &p)
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::FaultMonitoringIntervalAndTimeoutValue (*p.ptr_), *this);
  }
  return *this;
}

// fixed-size types only
ACE_INLINE FT::FaultMonitoringIntervalAndTimeoutValue_var &
FT::FaultMonitoringIntervalAndTimeoutValue_var::operator= (const ::FT::FaultMonitoringIntervalAndTimeoutValue &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::FaultMonitoringIntervalAndTimeoutValue (p), *this);
  }
  return *this;
}

ACE_INLINE const ::FT::FaultMonitoringIntervalAndTimeoutValue *
FT::FaultMonitoringIntervalAndTimeoutValue_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::FaultMonitoringIntervalAndTimeoutValue *
FT::FaultMonitoringIntervalAndTimeoutValue_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
FT::FaultMonitoringIntervalAndTimeoutValue_var::operator const ::FT::FaultMonitoringIntervalAndTimeoutValue &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
FT::FaultMonitoringIntervalAndTimeoutValue_var::operator ::FT::FaultMonitoringIntervalAndTimeoutValue &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
FT::FaultMonitoringIntervalAndTimeoutValue_var::operator ::FT::FaultMonitoringIntervalAndTimeoutValue &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE const ::FT::FaultMonitoringIntervalAndTimeoutValue &
FT::FaultMonitoringIntervalAndTimeoutValue_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::FT::FaultMonitoringIntervalAndTimeoutValue &
FT::FaultMonitoringIntervalAndTimeoutValue_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE ::FT::FaultMonitoringIntervalAndTimeoutValue &
FT::FaultMonitoringIntervalAndTimeoutValue_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::FT::FaultMonitoringIntervalAndTimeoutValue
FT::FaultMonitoringIntervalAndTimeoutValue_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::FT::FaultMonitoringIntervalAndTimeoutValue *
FT::FaultMonitoringIntervalAndTimeoutValue_var::ptr (void) const
{
  return this->ptr_;
}


#if !defined (_FT_STATE_CI_)
#define _FT_STATE_CI_

// *************************************************************
// Inline operations for class FT::State_var
// *************************************************************

ACE_INLINE
FT::State_var::State_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
FT::State_var::State_var (State *p)
  : ptr_ (p)
{}

ACE_INLINE
FT::State_var::State_var (const ::FT::State_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::FT::State (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size base types only
ACE_INLINE
FT::State_var::State_var (const ::FT::State &p)
{
  ACE_NEW (this->ptr_, ::FT::State (p));
}

ACE_INLINE
FT::State_var::~State_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE FT::State_var &
FT::State_var::operator= (State *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE FT::State_var &
FT::State_var::operator= (const ::FT::State_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::State (*p.ptr_), *this);
  }
  return *this;
}

// fixed-size types only
ACE_INLINE ::FT::State_var &
FT::State_var::operator= (const ::FT::State &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::FT::State (p), *this);
  }
  return *this;
}

ACE_INLINE const ::FT::State *
FT::State_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::State *
FT::State_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
FT::State_var::operator const ::FT::State &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
FT::State_var::operator ::FT::State &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
FT::State_var::operator ::FT::State &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Octet &
FT::State_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::FT::State &
FT::State_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::FT::State &
FT::State_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::FT::State *&
FT::State_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::FT::State *
FT::State_var::_retn (void)
{
  ::FT::State *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::FT::State *
FT::State_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class FT::State_out
// *************************************************************

ACE_INLINE
FT::State_out::State_out (State *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
FT::State_out::State_out (State_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
FT::State_out::State_out (const ::FT::State_out &p) // copy constructor
  : ptr_ (ACE_const_cast (State_out&, p).ptr_)
{}

ACE_INLINE ::FT::State_out &
FT::State_out::operator= (const ::FT::State_out &p)
{
  this->ptr_ = ACE_const_cast (State_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::FT::State_out &
FT::State_out::operator= (State *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
FT::State_out::operator ::FT::State *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::FT::State *&
FT::State_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::FT::State *
FT::State_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Octet &
FT::State_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for exception FT::NoStateAvailable
// *************************************************************

// *************************************************************
// Inline operations for exception FT::InvalidState
// *************************************************************

// *************************************************************
// Inline operations for exception FT::NoUpdateAvailable
// *************************************************************

// *************************************************************
// Inline operations for exception FT::InvalidUpdate
// *************************************************************

ACE_INLINE
FT::Checkpointable::Checkpointable (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}


#if !defined (_FT_CHECKPOINTABLE___VAR_CI_)
#define _FT_CHECKPOINTABLE___VAR_CI_

// *************************************************************
// Inline operations for class FT::Checkpointable_var
// *************************************************************

ACE_INLINE
FT::Checkpointable_var::Checkpointable_var (void) // default constructor
  : ptr_ (Checkpointable::_nil ())
{}

ACE_INLINE
FT::Checkpointable_var::Checkpointable_var (Checkpointable_ptr p)
  : ptr_ (p)
{}

ACE_INLINE ::FT::Checkpointable_ptr
FT::Checkpointable_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
FT::Checkpointable_var::Checkpointable_var (const ::FT::Checkpointable_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (Checkpointable::_duplicate (p.ptr ()))
{}

ACE_INLINE
FT::Checkpointable_var::~Checkpointable_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE FT::Checkpointable_var &
FT::Checkpointable_var::operator= (Checkpointable_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE FT::Checkpointable_var &
FT::Checkpointable_var::operator= (const ::FT::Checkpointable_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::FT::Checkpointable::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
FT::Checkpointable_var::operator const ::FT::Checkpointable_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
FT::Checkpointable_var::operator ::FT::Checkpointable_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::FT::Checkpointable_ptr
FT::Checkpointable_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::Checkpointable_ptr
FT::Checkpointable_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::Checkpointable_ptr &
FT::Checkpointable_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::FT::Checkpointable_ptr &
FT::Checkpointable_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FT::Checkpointable::_nil ();
  return this->ptr_;
}

ACE_INLINE ::FT::Checkpointable_ptr
FT::Checkpointable_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::FT::Checkpointable_ptr val = this->ptr_;
  this->ptr_ = ::FT::Checkpointable::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_FT_CHECKPOINTABLE___OUT_CI_)
#define _FT_CHECKPOINTABLE___OUT_CI_

// *************************************************************
// Inline operations for class FT::Checkpointable_out
// *************************************************************

ACE_INLINE
FT::Checkpointable_out::Checkpointable_out (Checkpointable_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::FT::Checkpointable::_nil ();
}

ACE_INLINE
FT::Checkpointable_out::Checkpointable_out (Checkpointable_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FT::Checkpointable::_nil ();
}

ACE_INLINE
FT::Checkpointable_out::Checkpointable_out (const ::FT::Checkpointable_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Checkpointable_out &, p).ptr_)
{}

ACE_INLINE ::FT::Checkpointable_out &
FT::Checkpointable_out::operator= (const ::FT::Checkpointable_out &p)
{
  this->ptr_ = ACE_const_cast (Checkpointable_out&, p).ptr_;
  return *this;
}

ACE_INLINE FT::Checkpointable_out &
FT::Checkpointable_out::operator= (const ::FT::Checkpointable_var &p)
{
  this->ptr_ = ::FT::Checkpointable::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE FT::Checkpointable_out &
FT::Checkpointable_out::operator= (Checkpointable_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
FT::Checkpointable_out::operator ::FT::Checkpointable_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::FT::Checkpointable_ptr &
FT::Checkpointable_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::FT::Checkpointable_ptr
FT::Checkpointable_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE
FT::Updateable::Updateable (TAO_Stub *objref, TAO_ServantBase *_tao_servant, CORBA::Boolean _tao_collocated) // constructor
  : CORBA_Object (objref, _tao_servant, _tao_collocated)
{}


#if !defined (_FT_UPDATEABLE___VAR_CI_)
#define _FT_UPDATEABLE___VAR_CI_

// *************************************************************
// Inline operations for class FT::Updateable_var
// *************************************************************

ACE_INLINE
FT::Updateable_var::Updateable_var (void) // default constructor
  : ptr_ (Updateable::_nil ())
{}

ACE_INLINE
FT::Updateable_var::Updateable_var (Updateable_ptr p)
  : ptr_ (p)
{}

ACE_INLINE ::FT::Updateable_ptr
FT::Updateable_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
FT::Updateable_var::Updateable_var (const ::FT::Updateable_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (Updateable::_duplicate (p.ptr ()))
{}

ACE_INLINE
FT::Updateable_var::~Updateable_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

ACE_INLINE FT::Updateable_var &
FT::Updateable_var::operator= (Updateable_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE FT::Updateable_var &
FT::Updateable_var::operator= (const ::FT::Updateable_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::FT::Updateable::_duplicate (p.ptr ());
  }
  return *this;
}

ACE_INLINE 
FT::Updateable_var::operator const ::FT::Updateable_ptr &() const // cast
{
  return this->ptr_;
}

ACE_INLINE 
FT::Updateable_var::operator ::FT::Updateable_ptr &() // cast 
{
  return this->ptr_;
}

ACE_INLINE ::FT::Updateable_ptr
FT::Updateable_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::Updateable_ptr
FT::Updateable_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE ::FT::Updateable_ptr &
FT::Updateable_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE ::FT::Updateable_ptr &
FT::Updateable_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FT::Updateable::_nil ();
  return this->ptr_;
}

ACE_INLINE ::FT::Updateable_ptr
FT::Updateable_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::FT::Updateable_ptr val = this->ptr_;
  this->ptr_ = ::FT::Updateable::_nil ();
  return val;
}


#endif /* end #if !defined */


#if !defined (_FT_UPDATEABLE___OUT_CI_)
#define _FT_UPDATEABLE___OUT_CI_

// *************************************************************
// Inline operations for class FT::Updateable_out
// *************************************************************

ACE_INLINE
FT::Updateable_out::Updateable_out (Updateable_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::FT::Updateable::_nil ();
}

ACE_INLINE
FT::Updateable_out::Updateable_out (Updateable_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FT::Updateable::_nil ();
}

ACE_INLINE
FT::Updateable_out::Updateable_out (const ::FT::Updateable_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Updateable_out &, p).ptr_)
{}

ACE_INLINE ::FT::Updateable_out &
FT::Updateable_out::operator= (const ::FT::Updateable_out &p)
{
  this->ptr_ = ACE_const_cast (Updateable_out&, p).ptr_;
  return *this;
}

ACE_INLINE FT::Updateable_out &
FT::Updateable_out::operator= (const ::FT::Updateable_var &p)
{
  this->ptr_ = ::FT::Updateable::_duplicate (p.ptr ());
  return *this;
}

ACE_INLINE FT::Updateable_out &
FT::Updateable_out::operator= (Updateable_ptr p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
FT::Updateable_out::operator ::FT::Updateable_ptr &() // cast
{
  return this->ptr_;
}

ACE_INLINE ::FT::Updateable_ptr &
FT::Updateable_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::FT::Updateable_ptr
FT::Updateable_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::TagFTGroupTaggedComponent &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.version) &&
    (strm << _tao_aggregate.ft_domain_id.in ()) &&
    (strm << _tao_aggregate.object_group_id) &&
    (strm << _tao_aggregate.object_group_ref_version)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, FT::TagFTGroupTaggedComponent &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.version) &&
    (strm >> _tao_aggregate.ft_domain_id.out ()) &&
    (strm >> _tao_aggregate.object_group_id) &&
    (strm >> _tao_aggregate.object_group_ref_version)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::TagFTPrimaryTaggedComponent &_tao_aggregate)
{
  if (
    (strm << CORBA::Any::from_boolean (_tao_aggregate.primary))
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, FT::TagFTPrimaryTaggedComponent &_tao_aggregate)
{
  if (
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.primary))
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::FTGroupVersionServiceContext &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.object_group_ref_version)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, FT::FTGroupVersionServiceContext &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.object_group_ref_version)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::FTRequestServiceContext &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.client_id.in ()) &&
    (strm << _tao_aggregate.retention_id) &&
    (strm << _tao_aggregate.expiration_time)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, FT::FTRequestServiceContext &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.client_id.out ()) &&
    (strm >> _tao_aggregate.retention_id) &&
    (strm >> _tao_aggregate.expiration_time)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const FT::RequestDurationPolicy_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    FT::RequestDurationPolicy_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const FT::RequestDurationPolicy_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    FT::RequestDurationPolicy_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      FT::RequestDurationPolicy::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::TagFTHeartbeatEnabledTaggedComponent &_tao_aggregate)
{
  if (
    (strm << CORBA::Any::from_boolean (_tao_aggregate.heartbeat_enabled))
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, FT::TagFTHeartbeatEnabledTaggedComponent &_tao_aggregate)
{
  if (
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.heartbeat_enabled))
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::HeartbeatPolicyValue &_tao_aggregate)
{
  if (
    (strm << CORBA::Any::from_boolean (_tao_aggregate.heartbeat)) &&
    (strm << _tao_aggregate.heartbeat_interval) &&
    (strm << _tao_aggregate.heartbeat_timeout)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, FT::HeartbeatPolicyValue &_tao_aggregate)
{
  if (
    (strm >> CORBA::Any::to_boolean (_tao_aggregate.heartbeat)) &&
    (strm >> _tao_aggregate.heartbeat_interval) &&
    (strm >> _tao_aggregate.heartbeat_timeout)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const FT::HeartbeatPolicy_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    FT::HeartbeatPolicy_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const FT::HeartbeatPolicy_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    FT::HeartbeatPolicy_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      FT::HeartbeatPolicy::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const FT::HeartbeatEnabledPolicy_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    FT::HeartbeatEnabledPolicy_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const FT::HeartbeatEnabledPolicy_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    FT::HeartbeatEnabledPolicy_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      FT::HeartbeatEnabledPolicy::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const FT::GenericFactory_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    FT::GenericFactory_ptr &
  );
ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const FT::FaultNotifier_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    FT::FaultNotifier_ptr &
  );
ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::FaultMonitoringIntervalAndTimeoutValue &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.monitoring_interval) &&
    (strm << _tao_aggregate.timeout)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, FT::FaultMonitoringIntervalAndTimeoutValue &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.monitoring_interval) &&
    (strm >> _tao_aggregate.timeout)
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_FT_State_I_
#define _TAO_CDR_OP_FT_State_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const FT::State &
  );
CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    FT::State &
  );

#endif /* _TAO_CDR_OP_FT_State_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::NoStateAvailable &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,FT::NoStateAvailable&)
{
  return 1;
}

#if !defined (ACE_LACKS_IOSTREAM_TOTALLY)

ACE_INLINE
ostream & operator<< (ostream &os, const FT::NoStateAvailable &_tao_aggregate)
{
  CORBA::TypeCode_ptr tc = _tao_aggregate._type ();
  if (tc)
    {
      os << tc->name () << " (";
    }
  os << _tao_aggregate._id ();
  if (tc)
    {
      os << ")";
    }
  return os;
}

#endif /* ACE_LACKS_IOSTREAM_TOTALLY */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::InvalidState &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,FT::InvalidState&)
{
  return 1;
}

#if !defined (ACE_LACKS_IOSTREAM_TOTALLY)

ACE_INLINE
ostream & operator<< (ostream &os, const FT::InvalidState &_tao_aggregate)
{
  CORBA::TypeCode_ptr tc = _tao_aggregate._type ();
  if (tc)
    {
      os << tc->name () << " (";
    }
  os << _tao_aggregate._id ();
  if (tc)
    {
      os << ")";
    }
  return os;
}

#endif /* ACE_LACKS_IOSTREAM_TOTALLY */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::NoUpdateAvailable &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,FT::NoUpdateAvailable&)
{
  return 1;
}

#if !defined (ACE_LACKS_IOSTREAM_TOTALLY)

ACE_INLINE
ostream & operator<< (ostream &os, const FT::NoUpdateAvailable &_tao_aggregate)
{
  CORBA::TypeCode_ptr tc = _tao_aggregate._type ();
  if (tc)
    {
      os << tc->name () << " (";
    }
  os << _tao_aggregate._id ();
  if (tc)
    {
      os << ")";
    }
  return os;
}

#endif /* ACE_LACKS_IOSTREAM_TOTALLY */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const FT::InvalidUpdate &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,FT::InvalidUpdate&)
{
  return 1;
}

#if !defined (ACE_LACKS_IOSTREAM_TOTALLY)

ACE_INLINE
ostream & operator<< (ostream &os, const FT::InvalidUpdate &_tao_aggregate)
{
  CORBA::TypeCode_ptr tc = _tao_aggregate._type ();
  if (tc)
    {
      os << tc->name () << " (";
    }
  os << _tao_aggregate._id ();
  if (tc)
    {
      os << ")";
    }
  return os;
}

#endif /* ACE_LACKS_IOSTREAM_TOTALLY */

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const FT::Checkpointable_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    FT::Checkpointable_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const FT::Checkpointable_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    FT::Checkpointable_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      FT::Checkpointable::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &,
    const FT::Updateable_ptr
  );
ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &,
    FT::Updateable_ptr &
  );

ACE_INLINE CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const FT::Updateable_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

ACE_INLINE CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    FT::Updateable_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      FT::Updateable::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

