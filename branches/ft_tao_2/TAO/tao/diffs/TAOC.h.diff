--- orig/TAOC.h	Fri Aug 18 23:18:42 2000
+++ TAOC.h	Tue Jun 27 22:47:12 2000
@@ -1,4 +1,4 @@
-/* -*- C++ -*- $Id$ */
+/* -*- C++ -*- $Id$ */
 
 // ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
 // TAO and the TAO IDL Compiler have been developed by the Center for
@@ -9,17 +9,24 @@
 
 #ifndef _TAO_IDL_ORIG_TAOC_H_
 #define _TAO_IDL_ORIG_TAOC_H_
-
 #include "ace/pre.h"
-#include "tao/corba.h"
+
+#include "tao/corbafwd.h"
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
-#include "tao/corbafwd.h"
-#include "PolicyC.h"
-#include "TimeBaseC.h"
+#if (TAO_HAS_CLIENT_PRIORITY_POLICY == 1 || \
+     TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1)
+
+#include "tao/PolicyC.h"
+#include "tao/TimeBaseC.h"
+
+#endif /* TAO_HAS_CLIENT_PRIORITY_POLICY == 1 ||
+          TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1 */
+
+#include "tao/Priority_Mapping_Manager.h"
 
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
@@ -42,6 +49,19 @@
 
 TAO_NAMESPACE  TAO
 {
+
+#if (TAO_HAS_RT_CORBA == 1)
+
+  typedef TAO_Priority_Mapping_Manager PriorityMappingManager;
+  typedef TAO_Priority_Mapping_Manager *PriorityMappingManager_ptr;
+  typedef TAO_Priority_Mapping_Manager_var PriorityMappingManager_var;
+  typedef TAO_Priority_Mapping_Manager_out PriorityMappingManager_out;
+
+#endif /* TAO_HAS_RT_CORBA == 1 */
+
+
+#if (TAO_HAS_CLIENT_PRIORITY_POLICY == 1)
+
   typedef CORBA::Short PrioritySelectionMode;
   typedef CORBA::Short_out PrioritySelectionMode_out;
     TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_PrioritySelectionMode;
@@ -54,7 +74,7 @@
 
   struct PrioritySpecification;
   class PrioritySpecification_var;
-  
+
   struct TAO_Export PrioritySpecification
   {
 
@@ -77,18 +97,18 @@
     PrioritySpecification_var (const PrioritySpecification_var &); // copy constructor
     PrioritySpecification_var (const PrioritySpecification &); // fixed-size types only
     ~PrioritySpecification_var (void); // destructor
-    
+
     PrioritySpecification_var &operator= (PrioritySpecification *);
     PrioritySpecification_var &operator= (const PrioritySpecification_var &);
     PrioritySpecification_var &operator= (const PrioritySpecification &); // fixed-size types only
     PrioritySpecification *operator-> (void);
     const PrioritySpecification *operator-> (void) const;
-    
+
     operator const PrioritySpecification &() const;
     operator PrioritySpecification &();
     operator PrioritySpecification &() const;
-    
-    // in, inout, out, _retn 
+
+    // in, inout, out, _retn
     const PrioritySpecification &in (void) const;
     PrioritySpecification &inout (void);
     PrioritySpecification &out (void);
@@ -111,7 +131,7 @@
 
   class ClientPriorityPolicy;
   typedef ClientPriorityPolicy *ClientPriorityPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -122,17 +142,17 @@
   {
   public:
     ClientPriorityPolicy_var (void); // default constructor
-    ClientPriorityPolicy_var (ClientPriorityPolicy_ptr p) : ptr_ (p) {} 
+    ClientPriorityPolicy_var (ClientPriorityPolicy_ptr);
     ClientPriorityPolicy_var (const ClientPriorityPolicy_var &); // copy constructor
     ~ClientPriorityPolicy_var (void); // destructor
-    
+
     ClientPriorityPolicy_var &operator= (ClientPriorityPolicy_ptr);
     ClientPriorityPolicy_var &operator= (const ClientPriorityPolicy_var &);
     ClientPriorityPolicy_ptr operator-> (void) const;
-    
+
     operator const ClientPriorityPolicy_ptr &() const;
     operator ClientPriorityPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     ClientPriorityPolicy_ptr in (void) const;
     ClientPriorityPolicy_ptr &inout (void);
     ClientPriorityPolicy_ptr &out (void);
@@ -165,7 +185,7 @@
     operator ClientPriorityPolicy_ptr &();
     ClientPriorityPolicy_ptr &ptr (void);
     ClientPriorityPolicy_ptr operator-> (void);
-    
+
   private:
     ClientPriorityPolicy_ptr &ptr_;
   };
@@ -189,12 +209,12 @@
     static ClientPriorityPolicy_ptr _duplicate (ClientPriorityPolicy_ptr obj);
     static ClientPriorityPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ClientPriorityPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static ClientPriorityPolicy_ptr _nil (void)
@@ -203,7 +223,7 @@
       }
 
     virtual TAO::PrioritySpecification priority_specification (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -211,7 +231,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -225,6 +245,10 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_CLIENT_PRIORITY_POLICY == 1 */
+
+#if (TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1)
+
   typedef CORBA::UShort BufferingConstraintMode;
   typedef CORBA::UShort_out BufferingConstraintMode_out;
     TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_BufferingConstraintMode;
@@ -239,7 +263,7 @@
 
   struct BufferingConstraint;
   class BufferingConstraint_var;
-  
+
   struct TAO_Export BufferingConstraint
   {
 
@@ -263,18 +287,18 @@
     BufferingConstraint_var (const BufferingConstraint_var &); // copy constructor
     BufferingConstraint_var (const BufferingConstraint &); // fixed-size types only
     ~BufferingConstraint_var (void); // destructor
-    
+
     BufferingConstraint_var &operator= (BufferingConstraint *);
     BufferingConstraint_var &operator= (const BufferingConstraint_var &);
     BufferingConstraint_var &operator= (const BufferingConstraint &); // fixed-size types only
     BufferingConstraint *operator-> (void);
     const BufferingConstraint *operator-> (void) const;
-    
+
     operator const BufferingConstraint &() const;
     operator BufferingConstraint &();
     operator BufferingConstraint &() const;
-    
-    // in, inout, out, _retn 
+
+    // in, inout, out, _retn
     const BufferingConstraint &in (void) const;
     BufferingConstraint &inout (void);
     BufferingConstraint &out (void);
@@ -297,7 +321,7 @@
 
   class BufferingConstraintPolicy;
   typedef BufferingConstraintPolicy *BufferingConstraintPolicy_ptr;
-  
+
 #endif /* end #if !defined */
 
 
@@ -308,17 +332,17 @@
   {
   public:
     BufferingConstraintPolicy_var (void); // default constructor
-    BufferingConstraintPolicy_var (BufferingConstraintPolicy_ptr p) : ptr_ (p) {} 
+    BufferingConstraintPolicy_var (BufferingConstraintPolicy_ptr);
     BufferingConstraintPolicy_var (const BufferingConstraintPolicy_var &); // copy constructor
     ~BufferingConstraintPolicy_var (void); // destructor
-    
+
     BufferingConstraintPolicy_var &operator= (BufferingConstraintPolicy_ptr);
     BufferingConstraintPolicy_var &operator= (const BufferingConstraintPolicy_var &);
     BufferingConstraintPolicy_ptr operator-> (void) const;
-    
+
     operator const BufferingConstraintPolicy_ptr &() const;
     operator BufferingConstraintPolicy_ptr &();
-    // in, inout, out, _retn 
+    // in, inout, out, _retn
     BufferingConstraintPolicy_ptr in (void) const;
     BufferingConstraintPolicy_ptr &inout (void);
     BufferingConstraintPolicy_ptr &out (void);
@@ -351,7 +375,7 @@
     operator BufferingConstraintPolicy_ptr &();
     BufferingConstraintPolicy_ptr &ptr (void);
     BufferingConstraintPolicy_ptr operator-> (void);
-    
+
   private:
     BufferingConstraintPolicy_ptr &ptr_;
   };
@@ -375,12 +399,12 @@
     static BufferingConstraintPolicy_ptr _duplicate (BufferingConstraintPolicy_ptr obj);
     static BufferingConstraintPolicy_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static BufferingConstraintPolicy_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       );
     static BufferingConstraintPolicy_ptr _nil (void)
@@ -389,7 +413,7 @@
       }
 
     virtual TAO::BufferingConstraint buffering_constraint (
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &ACE_TRY_ENV =
           TAO_default_environment ()
       )
       ACE_THROW_SPEC ((
@@ -397,7 +421,7 @@
       )) = 0;
 
     virtual void *_tao_QueryInterface (ptr_arith_t type);
-    
+
     virtual const char* _interface_repository_id (void) const;
 
   protected:
@@ -411,6 +435,8 @@
 
 #endif /* end #if !defined */
 
+#endif /* TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1 */
+
   typedef CORBA::Short SyncScope;
   typedef CORBA::Short_out SyncScope_out;
     TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_SyncScope;
@@ -427,25 +453,41 @@
 
   TAO_NAMESPACE_STORAGE_CLASS const CORBA::Short SYNC_DELAYED_BUFFERING;
 
-
 }
 TAO_NAMESPACE_CLOSE // module TAO
 
+#if (TAO_HAS_CLIENT_PRIORITY_POLICY == 1)
+
 TAO_Export void operator<<= (CORBA::Any &, const TAO::PrioritySpecification &); // copying version
 TAO_Export void operator<<= (CORBA::Any &, TAO::PrioritySpecification*); // noncopying version
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, TAO::PrioritySpecification *&); // deprecated
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const TAO::PrioritySpecification *&);
+#endif /* TAO_HAS_CLIENT_PRIORITY_POLICY == 1 */
+
+#if (TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1)
+
 TAO_Export void operator<<= (CORBA::Any &, const TAO::BufferingConstraint &); // copying version
 TAO_Export void operator<<= (CORBA::Any &, TAO::BufferingConstraint*); // noncopying version
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, TAO::BufferingConstraint *&); // deprecated
 TAO_Export CORBA::Boolean operator>>= (const CORBA::Any &, const TAO::BufferingConstraint *&);
 
+#endif /* TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1 */
+
 #ifndef __ACE_INLINE__
 
+#if (TAO_HAS_CLIENT_PRIORITY_POLICY == 1)
+
 TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const TAO::PrioritySpecification &);
 TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, TAO::PrioritySpecification &);
+
+#endif /* TAO_HAS_CLIENT_PRIORITY_POLICY == 1 */
+
+#if (TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1)
+
 TAO_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const TAO::BufferingConstraint &);
 TAO_Export CORBA::Boolean operator>> (TAO_InputCDR &, TAO::BufferingConstraint &);
+
+#endif /* TAO_HAS_BUFFERING_CONSTRAINT_POLICY == 1 */
 
 #endif /* __ACE_INLINE__ */
 
