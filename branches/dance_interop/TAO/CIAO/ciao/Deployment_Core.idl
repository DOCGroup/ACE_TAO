// $Id$

#if !defined (DEPLOYMENT_CORE_IDL)
#define DEPLOYMENT_CORE_IDL

#include "CCM_Component.idl"
#include <ciaosvcs/Events/CIAO_Events_Base/CIAO_Events.idl>

// *************** Packaging and Deployment ***************
module Deployment
{
  // Typeprefix Components "omg.org";
  // OMG threw these things away, didn't it.

  exception UnknownImplId
  {
    string name;
    string reason;
  };

  exception InvalidLocation {};
  exception InstallationFailure
  {
    string name;
    string reason;
  };
  exception ImplEntryPointNotFound
  {
    string name;
    string reason;
  };

  //Below are from the OMG Deployment.idl
  exception InvalidNodeExecParameter 
  {
    string name;
    string reason;
  };

  exception InvalidComponentExecParameter 
  {
    string name;
    string reason;
  };

  exception StartError
  {
    string name;
    string reason;
  };

  exception StopError {
    string name;
    string reason;
  };

  exception InvalidConnection
  {
    string name;
    string reason;
  };

  //==============property==================
  struct Property
  {
    string name;
    any value;
  };

  typedef sequence < Property > Properties;

  //============connection==================

  typedef sequence < Object > Endpoints;
  //typedef Object Endpoint;

  enum CCMComponentPortKind
  {
    Facet,
    SimplexReceptacle,
    MultiplexReceptacle,
    EventEmitter,
    EventPublisher,
    EventConsumer
  };

  struct Connection
  {
    string name;
    Endpoints endpoint;
  };

  typedef sequence < Connection > Connections;

  //=======================================
  struct ComponentImplementationInfo
  {
    string component_instance_name;
    string executor_dll;
    string executor_entrypt;
    string servant_dll;
    string servant_entrypt;
    Properties component_config;
    //  Properties home_config;      //ignored for now.
  };

  typedef sequence <ComponentImplementationInfo> ComponentImplementationInfos;

  // ContainerImplementationInfo contains a list of components to be installed and
  // policy configuration for the container which hosts these components
  struct ContainerImplementationInfo
  {
    ComponentImplementationInfos impl_infos;
    Properties container_config;
  };

  typedef sequence <ContainerImplementationInfo> ContainerImplementationInfos;

  struct NodeImplementationInfo
  {
    ContainerImplementationInfos impl_infos;
    Properties nodeapp_config;
  };

  //==================================
  interface Application
  {
    void finishLaunch (in Connections providedReference,
                       in boolean start)
      raises (StartError, InvalidConnection);
    void start ()
      raises (StartError);
  };
  
  typedef sequence < Application > Applications;

  struct Component_Info
  {
    string component_instance_name;
    Components::CCMObject component_ref;
  };

  typedef sequence < Component_Info > ComponentInfos;

  // @@ (OO) You're altering an OMG defined interface below.  In
  //         order to avoid confusion, it is probably better to create
  //         another NodeApplication interface in the CIAO namespace
  //         that inherits from Deployment::NodeApplication.  You'd
  //         then use the CIAO::NodeApplication in your
  //         implementation.
  //
  //         Alternatively, you should at least place a CIAO-specific
  //         typeprefix within your altered NodeApplication interface
  //         to prevent interoperability issues.

  interface NodeApplication; // Forward decl.
  typedef sequence<NodeApplication> NodeApplications;

  /// CIAO specific interface, which could deal with installing multiple
  /// containers into a single NodeApplication.
  interface Container
  {
    readonly attribute ::Deployment::Properties properties;

    /// Get the NodeApplication which created us
    NodeApplication get_node_application ();

    /// Initialize the container with policies
    // long init (in ::CORBA::PolicyList policies);

    // NW: The following should be component specific info because the
    // container has already been created and initialized at this
    // time.  So there's not much container configuration to be done
    // at this stage.
    //@@ The container_impl_info will contain
    //1 component instance name as the key.
    //2 dll/so name of the exec
    //3 entry point of the exec
    //4 dll/so name of the svnt
    //5 entry point of the svnt
    //6 Poosible other configuration for container/home/component

    /// Install all homes and components
    Deployment::ComponentInfos install (in ContainerImplementationInfo container_impl_info)
        raises (UnknownImplId,
                ImplEntryPointNotFound,
                InstallationFailure,
                ::Components::InvalidConfiguration);

    /// Remove all homes and components
    void remove ()
      raises (::Components::RemoveFailure);

    /// Remove a component instance
    void remove_component (in string inst_name)
      raises (::Components::RemoveFailure);
  };

  typedef sequence<Container> Containers;
  typedef sequence<CIAO::CIAO_Event_Service> CIAO_Event_Services;

  /// CIAO specific extension
  /// This struct captures the installation information of a particular
  /// CIAO_Event_Service, as defined in <ciaosvcs/Events/CIAO_Events.idl>
  struct ESInstallationInfo
  {
    string id;
    CIAO::EventServiceType type;
    string svcconf;
    //Properties es_config;
  };

  /// CIAO specific extension
  typedef sequence<ESInstallationInfo> ESInstallationInfos;

  interface NodeApplication : Application
  {
  };

};
#endif /* DEPLOYMENT_CORE_IDL */
