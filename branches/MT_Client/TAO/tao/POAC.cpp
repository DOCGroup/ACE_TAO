// $Id$
//
// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO ORB and the TAO IDL Compiler have been developed by Washington
// University Computer Science's Distributed Object Computing Group.
//
// Information on TAO is available at
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

// Take care: The typecodes are platform dependent, therefor 
// a ifdef is needed right now. This is going to be changed in
// the future.

#include "tao/corba.h"

#if !defined (__ACE_INLINE__)
#include "POAC.i"
#endif // !defined INLINE

#if !defined (_PORTABLESERVER__TAO_SEQ_OCTET_CS_)
#define _PORTABLESERVER__TAO_SEQ_OCTET_CS_

static const CORBA::Long _oc_PortableServer__tao_seq_Octet[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  CORBA::tk_octet,

  0,
};
static CORBA::TypeCode _tc__tc_PortableServer__tao_seq_Octet (CORBA::tk_sequence, sizeof (_oc_PortableServer__tao_seq_Octet), (char *) &_oc_PortableServer__tao_seq_Octet, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc__tao_seq_Octet = &_tc__tc_PortableServer__tao_seq_Octet;


#endif // end #if !defined

static const CORBA::Long _oc_PortableServer_ObjectId[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  32, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f4f), ACE_NTOHL (0x626a6563), ACE_NTOHL (0x7449643a), ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableServer/ObjectId:1.0
  9, ACE_NTOHL (0x4f626a65), ACE_NTOHL (0x63744964), ACE_NTOHL (0xfdfdfd),  // name = ObjectId
  CORBA::tk_sequence, // typecode kind
  12, // encapsulation length
  TAO_ENCAP_BYTE_ORDER, // byte order
  CORBA::tk_octet,

  0,
};
static CORBA::TypeCode _tc__tc_PortableServer_ObjectId (CORBA::tk_alias, sizeof (_oc_PortableServer_ObjectId), (char *) &_oc_PortableServer_ObjectId, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ObjectId = &_tc__tc_PortableServer_ObjectId;

// default constructor
PortableServer::ForwardRequest::ForwardRequest (void)
  : CORBA_SystemException (PortableServer::_tc_ForwardRequest, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::ForwardRequest::~ForwardRequest (void)
{
}

// copy constructor
PortableServer::ForwardRequest::ForwardRequest (const PortableServer::ForwardRequest &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
  this->forward_reference = CORBA::Object::_duplicate (_tao_excp.forward_reference.in ());
}

// assignment operator
PortableServer::ForwardRequest&
PortableServer::ForwardRequest::operator= (const PortableServer::ForwardRequest &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  this->forward_reference = CORBA::Object::_duplicate (_tao_excp.forward_reference.in ());
  return *this;
}

PortableServer::ForwardRequest::ForwardRequest(
                                               const CORBA::Object_ptr  _tao_forward_reference)
  : CORBA_SystemException  (PortableServer::_tc_ForwardRequest, 0xffff0000L, CORBA::COMPLETED_NO)
{
  this->forward_reference = CORBA::Object::_duplicate (_tao_forward_reference);
}

// narrow
PortableServer::ForwardRequest_ptr
PortableServer::ForwardRequest::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/ForwardRequest:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::ForwardRequest_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::ForwardRequest::_alloc (void)
{
  return new PortableServer::ForwardRequest;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::ForwardRequest &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::_tc_ForwardRequest, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::ForwardRequest *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::_tc_ForwardRequest, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::ForwardRequest *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::_tc_ForwardRequest, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::ForwardRequest, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::_tc_ForwardRequest, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::ForwardRequest *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_ForwardRequest[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  38, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f46), ACE_NTOHL (0x6f727761), ACE_NTOHL (0x72645265), ACE_NTOHL (0x71756573), ACE_NTOHL (0x743a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/ForwardRequest:1.0
  15, ACE_NTOHL (0x466f7277), ACE_NTOHL (0x61726452), ACE_NTOHL (0x65717565), ACE_NTOHL (0x737400fd),  // name = ForwardRequest
  1, // member count
  18, ACE_NTOHL (0x666f7277), ACE_NTOHL (0x6172645f), ACE_NTOHL (0x72656665), ACE_NTOHL (0x72656e63), ACE_NTOHL (0x6500fdfd),  // name = forward_reference
  CORBA::tk_objref,
  44, // encapsulation length
  TAO_ENCAP_BYTE_ORDER, // byte order
  21, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x434f5242), ACE_NTOHL (0x412f4f62), ACE_NTOHL (0x6a656374), ACE_NTOHL (0x3a312e30), ACE_NTOHL (0xfdfdfd),  // repository ID = IDL:CORBA/Object:1.0
  7, ACE_NTOHL (0x4f626a65), ACE_NTOHL (0x637400fd),  // name = Object,
};
static CORBA::TypeCode _tc__tc_PortableServer_ForwardRequest (CORBA::tk_except, sizeof (_oc_PortableServer_ForwardRequest), (char *) &_oc_PortableServer_ForwardRequest, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ForwardRequest = &_tc__tc_PortableServer_ForwardRequest;


static const CORBA::Long _oc_PortableServer_ThreadPolicyValue[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  41, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f54), ACE_NTOHL (0x68726561), ACE_NTOHL (0x64506f6c), ACE_NTOHL (0x69637956), ACE_NTOHL (0x616c7565), ACE_NTOHL (0x3a312e30), ACE_NTOHL (0xfdfdfd),  // repository ID = IDL:PortableServer/ThreadPolicyValue:1.0
  18, ACE_NTOHL (0x54687265), ACE_NTOHL (0x6164506f), ACE_NTOHL (0x6c696379), ACE_NTOHL (0x56616c75), ACE_NTOHL (0x6500fdfd),  // name = ThreadPolicyValue
  2, // member count
  15, ACE_NTOHL (0x4f52425f), ACE_NTOHL (0x4354524c), ACE_NTOHL (0x5f4d4f44), ACE_NTOHL (0x454c00fd),  // name = ORB_CTRL_MODEL
  20, ACE_NTOHL (0x53494e47), ACE_NTOHL (0x4c455f54), ACE_NTOHL (0x48524541), ACE_NTOHL (0x445f4d4f), ACE_NTOHL (0x44454c00),  // name = SINGLE_THREAD_MODEL
};
static CORBA::TypeCode _tc__tc_PortableServer_ThreadPolicyValue (CORBA::tk_enum, sizeof (_oc_PortableServer_ThreadPolicyValue), (char *) &_oc_PortableServer_ThreadPolicyValue, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ThreadPolicyValue = &_tc__tc_PortableServer_ThreadPolicyValue;

PortableServer::ThreadPolicy_ptr PortableServer::ThreadPolicy::_duplicate (PortableServer::ThreadPolicy_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::ThreadPolicy_ptr PortableServer::ThreadPolicy::_narrow (
                                                                        CORBA::Object_ptr obj,
                                                                        CORBA::Environment &env
                                                                        )
{
  if (CORBA::is_nil (obj))
    return PortableServer::ThreadPolicy::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/ThreadPolicy:1.0", env))
    return PortableServer::ThreadPolicy::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      PortableServer::ThreadPolicy_ptr new_obj = new PortableServer::ThreadPolicy (obj->_get_parent ()); // construct obj ref using the stub object
      return new_obj;
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::ThreadPolicy::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/ThreadPolicy:1.0");
  return new POA_PortableServer::_tao_collocated_ThreadPolicy(
                                                              ACE_reinterpret_cast(POA_PortableServer::ThreadPolicy_ptr, servant),
                                                              stub
                                                              );
}

PortableServer::ThreadPolicyValue PortableServer::ThreadPolicy::value(CORBA::Environment &env)
{
  static const TAO_Param_Data _get_PortableServer_ThreadPolicy_value_paramdata [] =
  {
    {PortableServer::_tc_ThreadPolicyValue, PARAM_RETURN, 0}};

  static const TAO_Call_Data _get_PortableServer_ThreadPolicy_value_calldata =
  {"_get_value", 1, 1, _get_PortableServer_ThreadPolicy_value_paramdata, 0, 0};

  PortableServer::ThreadPolicyValue retval =
    ACE_static_cast (PortableServer::ThreadPolicyValue, -1);
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != TAO_NOERROR)
    {
      env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
      return retval;
    }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_static_call (env, &_get_PortableServer_ThreadPolicy_value_calldata, &retval);
  return retval;

}

CORBA::Boolean PortableServer::ThreadPolicy::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/ThreadPolicy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/Policy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_ThreadPolicy[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  36, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f54), ACE_NTOHL (0x68726561), ACE_NTOHL (0x64506f6c), ACE_NTOHL (0x6963793a), ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableServer/ThreadPolicy:1.0
  13, ACE_NTOHL (0x54687265), ACE_NTOHL (0x6164506f), ACE_NTOHL (0x6c696379), ACE_NTOHL (0xfdfdfd),  // name = ThreadPolicy,
};
static CORBA::TypeCode _tc__tc_PortableServer_ThreadPolicy (CORBA::tk_objref, sizeof (_oc_PortableServer_ThreadPolicy), (char *) &_oc_PortableServer_ThreadPolicy, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ThreadPolicy = &_tc__tc_PortableServer_ThreadPolicy;


static const CORBA::Long _oc_PortableServer_LifespanPolicyValue[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  43, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f4c), ACE_NTOHL (0x69666573), ACE_NTOHL (0x70616e50), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x7956616c), ACE_NTOHL (0x75653a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/LifespanPolicyValue:1.0
  20, ACE_NTOHL (0x4c696665), ACE_NTOHL (0x7370616e), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x63795661), ACE_NTOHL (0x6c756500),  // name = LifespanPolicyValue
  2, // member count
  10, ACE_NTOHL (0x5452414e), ACE_NTOHL (0x5349454e), ACE_NTOHL (0x5400fdfd),  // name = TRANSIENT
  11, ACE_NTOHL (0x50455253), ACE_NTOHL (0x49535445), ACE_NTOHL (0x4e5400fd),  // name = PERSISTENT
};
static CORBA::TypeCode _tc__tc_PortableServer_LifespanPolicyValue (CORBA::tk_enum, sizeof (_oc_PortableServer_LifespanPolicyValue), (char *) &_oc_PortableServer_LifespanPolicyValue, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_LifespanPolicyValue = &_tc__tc_PortableServer_LifespanPolicyValue;

PortableServer::LifespanPolicy_ptr PortableServer::LifespanPolicy::_duplicate (PortableServer::LifespanPolicy_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::LifespanPolicy_ptr PortableServer::LifespanPolicy::_narrow (
                                                                            CORBA::Object_ptr obj,
                                                                            CORBA::Environment &env
                                                                            )
{
  if (CORBA::is_nil (obj))
    return PortableServer::LifespanPolicy::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/LifespanPolicy:1.0", env))
    return PortableServer::LifespanPolicy::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      PortableServer::LifespanPolicy_ptr new_obj = new PortableServer::LifespanPolicy (obj->_get_parent ()); // construct obj ref using the stub object
      return new_obj;
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::LifespanPolicy::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/LifespanPolicy:1.0");
  return new POA_PortableServer::_tao_collocated_LifespanPolicy(
                                                                ACE_reinterpret_cast(POA_PortableServer::LifespanPolicy_ptr, servant),
                                                                stub
                                                                );
}

PortableServer::LifespanPolicyValue PortableServer::LifespanPolicy::value(CORBA::Environment &env)
{
  static const TAO_Param_Data _get_PortableServer_LifespanPolicy_value_paramdata [] =
  {
    {PortableServer::_tc_LifespanPolicyValue, PARAM_RETURN, 0}};

  static const TAO_Call_Data _get_PortableServer_LifespanPolicy_value_calldata =
  {"_get_value", 1, 1, _get_PortableServer_LifespanPolicy_value_paramdata, 0, 0};

  PortableServer::LifespanPolicyValue retval =
    ACE_static_cast (PortableServer::LifespanPolicyValue, -1);
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != TAO_NOERROR)
    {
      env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
      return retval;
    }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_static_call (env, &_get_PortableServer_LifespanPolicy_value_calldata, &retval);
  return retval;

}

CORBA::Boolean PortableServer::LifespanPolicy::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/LifespanPolicy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/Policy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_LifespanPolicy[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  38, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f4c), ACE_NTOHL (0x69666573), ACE_NTOHL (0x70616e50), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x793a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/LifespanPolicy:1.0
  15, ACE_NTOHL (0x4c696665), ACE_NTOHL (0x7370616e), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x637900fd),  // name = LifespanPolicy,
};
static CORBA::TypeCode _tc__tc_PortableServer_LifespanPolicy (CORBA::tk_objref, sizeof (_oc_PortableServer_LifespanPolicy), (char *) &_oc_PortableServer_LifespanPolicy, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_LifespanPolicy = &_tc__tc_PortableServer_LifespanPolicy;


static const CORBA::Long _oc_PortableServer_IdUniquenessPolicyValue[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  47, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f49), ACE_NTOHL (0x64556e69), ACE_NTOHL (0x7175656e), ACE_NTOHL (0x65737350), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x7956616c), ACE_NTOHL (0x75653a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/IdUniquenessPolicyValue:1.0
  24, ACE_NTOHL (0x4964556e), ACE_NTOHL (0x69717565), ACE_NTOHL (0x6e657373), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x63795661), ACE_NTOHL (0x6c756500),  // name = IdUniquenessPolicyValue
  2, // member count
  10, ACE_NTOHL (0x554e4951), ACE_NTOHL (0x55455f49), ACE_NTOHL (0x4400fdfd),  // name = UNIQUE_ID
  12, ACE_NTOHL (0x4d554c54), ACE_NTOHL (0x49504c45), ACE_NTOHL (0x5f494400),  // name = MULTIPLE_ID
};
static CORBA::TypeCode _tc__tc_PortableServer_IdUniquenessPolicyValue (CORBA::tk_enum, sizeof (_oc_PortableServer_IdUniquenessPolicyValue), (char *) &_oc_PortableServer_IdUniquenessPolicyValue, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_IdUniquenessPolicyValue = &_tc__tc_PortableServer_IdUniquenessPolicyValue;

PortableServer::IdUniquenessPolicy_ptr PortableServer::IdUniquenessPolicy::_duplicate (PortableServer::IdUniquenessPolicy_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::IdUniquenessPolicy_ptr PortableServer::IdUniquenessPolicy::_narrow (
                                                                                    CORBA::Object_ptr obj,
                                                                                    CORBA::Environment &env
                                                                                    )
{
  if (CORBA::is_nil (obj))
    return PortableServer::IdUniquenessPolicy::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/IdUniquenessPolicy:1.0", env))
    return PortableServer::IdUniquenessPolicy::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      PortableServer::IdUniquenessPolicy_ptr new_obj = new PortableServer::IdUniquenessPolicy (obj->_get_parent ()); // construct obj ref using the stub object
      return new_obj;
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::IdUniquenessPolicy::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/IdUniquenessPolicy:1.0");
  return new POA_PortableServer::_tao_collocated_IdUniquenessPolicy(
                                                                    ACE_reinterpret_cast(POA_PortableServer::IdUniquenessPolicy_ptr, servant),
                                                                    stub
                                                                    );
}

PortableServer::IdUniquenessPolicyValue PortableServer::IdUniquenessPolicy::value(CORBA::Environment &env)
{
  static const TAO_Param_Data _get_PortableServer_IdUniquenessPolicy_value_paramdata [] =
  {
    {PortableServer::_tc_IdUniquenessPolicyValue, PARAM_RETURN, 0}};

  static const TAO_Call_Data _get_PortableServer_IdUniquenessPolicy_value_calldata =
  {"_get_value", 1, 1, _get_PortableServer_IdUniquenessPolicy_value_paramdata, 0, 0};

  PortableServer::IdUniquenessPolicyValue retval =
    ACE_static_cast (PortableServer::IdUniquenessPolicyValue, -1);
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != TAO_NOERROR)
    {
      env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
      return retval;
    }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_static_call (env, &_get_PortableServer_IdUniquenessPolicy_value_calldata, &retval);
  return retval;

}

CORBA::Boolean PortableServer::IdUniquenessPolicy::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/IdUniquenessPolicy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/Policy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_IdUniquenessPolicy[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  42, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f49), ACE_NTOHL (0x64556e69), ACE_NTOHL (0x7175656e), ACE_NTOHL (0x65737350), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x793a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/IdUniquenessPolicy:1.0
  19, ACE_NTOHL (0x4964556e), ACE_NTOHL (0x69717565), ACE_NTOHL (0x6e657373), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x637900fd),  // name = IdUniquenessPolicy,
};
static CORBA::TypeCode _tc__tc_PortableServer_IdUniquenessPolicy (CORBA::tk_objref, sizeof (_oc_PortableServer_IdUniquenessPolicy), (char *) &_oc_PortableServer_IdUniquenessPolicy, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_IdUniquenessPolicy = &_tc__tc_PortableServer_IdUniquenessPolicy;


static const CORBA::Long _oc_PortableServer_IdAssignmentPolicyValue[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  47, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f49), ACE_NTOHL (0x64417373), ACE_NTOHL (0x69676e6d), ACE_NTOHL (0x656e7450), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x7956616c), ACE_NTOHL (0x75653a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/IdAssignmentPolicyValue:1.0
  24, ACE_NTOHL (0x49644173), ACE_NTOHL (0x7369676e), ACE_NTOHL (0x6d656e74), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x63795661), ACE_NTOHL (0x6c756500),  // name = IdAssignmentPolicyValue
  2, // member count
  8, ACE_NTOHL (0x55534552), ACE_NTOHL (0x5f494400),  // name = USER_ID
  10, ACE_NTOHL (0x53595354), ACE_NTOHL (0x454d5f49), ACE_NTOHL (0x4400fdfd),  // name = SYSTEM_ID
};
static CORBA::TypeCode _tc__tc_PortableServer_IdAssignmentPolicyValue (CORBA::tk_enum, sizeof (_oc_PortableServer_IdAssignmentPolicyValue), (char *) &_oc_PortableServer_IdAssignmentPolicyValue, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_IdAssignmentPolicyValue = &_tc__tc_PortableServer_IdAssignmentPolicyValue;

PortableServer::IdAssignmentPolicy_ptr PortableServer::IdAssignmentPolicy::_duplicate (PortableServer::IdAssignmentPolicy_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::IdAssignmentPolicy_ptr PortableServer::IdAssignmentPolicy::_narrow (
                                                                                    CORBA::Object_ptr obj,
                                                                                    CORBA::Environment &env
                                                                                    )
{
  if (CORBA::is_nil (obj))
    return PortableServer::IdAssignmentPolicy::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/IdAssignmentPolicy:1.0", env))
    return PortableServer::IdAssignmentPolicy::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      PortableServer::IdAssignmentPolicy_ptr new_obj = new PortableServer::IdAssignmentPolicy (obj->_get_parent ()); // construct obj ref using the stub object
      return new_obj;
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::IdAssignmentPolicy::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/IdAssignmentPolicy:1.0");
  return new POA_PortableServer::_tao_collocated_IdAssignmentPolicy(
                                                                    ACE_reinterpret_cast(POA_PortableServer::IdAssignmentPolicy_ptr, servant),
                                                                    stub
                                                                    );
}

PortableServer::IdAssignmentPolicyValue PortableServer::IdAssignmentPolicy::value(CORBA::Environment &env)
{
  static const TAO_Param_Data _get_PortableServer_IdAssignmentPolicy_value_paramdata [] =
  {
    {PortableServer::_tc_IdAssignmentPolicyValue, PARAM_RETURN, 0}};

  static const TAO_Call_Data _get_PortableServer_IdAssignmentPolicy_value_calldata =
  {"_get_value", 1, 1, _get_PortableServer_IdAssignmentPolicy_value_paramdata, 0, 0};

  PortableServer::IdAssignmentPolicyValue retval =
    ACE_static_cast (PortableServer::IdAssignmentPolicyValue, -1);
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != TAO_NOERROR)
    {
      env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
      return retval;
    }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_static_call (env, &_get_PortableServer_IdAssignmentPolicy_value_calldata, &retval);
  return retval;

}

CORBA::Boolean PortableServer::IdAssignmentPolicy::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/IdAssignmentPolicy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/Policy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_IdAssignmentPolicy[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  42, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f49), ACE_NTOHL (0x64417373), ACE_NTOHL (0x69676e6d), ACE_NTOHL (0x656e7450), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x793a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/IdAssignmentPolicy:1.0
  19, ACE_NTOHL (0x49644173), ACE_NTOHL (0x7369676e), ACE_NTOHL (0x6d656e74), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x637900fd),  // name = IdAssignmentPolicy,
};
static CORBA::TypeCode _tc__tc_PortableServer_IdAssignmentPolicy (CORBA::tk_objref, sizeof (_oc_PortableServer_IdAssignmentPolicy), (char *) &_oc_PortableServer_IdAssignmentPolicy, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_IdAssignmentPolicy = &_tc__tc_PortableServer_IdAssignmentPolicy;


static const CORBA::Long _oc_PortableServer_ImplicitActivationPolicyValue[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  53, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f49), ACE_NTOHL (0x6d706c69), ACE_NTOHL (0x63697441), ACE_NTOHL (0x63746976), ACE_NTOHL (0x6174696f), ACE_NTOHL (0x6e506f6c), ACE_NTOHL (0x69637956), ACE_NTOHL (0x616c7565), ACE_NTOHL (0x3a312e30), ACE_NTOHL (0xfdfdfd),  // repository ID = IDL:PortableServer/ImplicitActivationPolicyValue:1.0
  30, ACE_NTOHL (0x496d706c), ACE_NTOHL (0x69636974), ACE_NTOHL (0x41637469), ACE_NTOHL (0x76617469), ACE_NTOHL (0x6f6e506f), ACE_NTOHL (0x6c696379), ACE_NTOHL (0x56616c75), ACE_NTOHL (0x6500fdfd),  // name = ImplicitActivationPolicyValue
  2, // member count
  20, ACE_NTOHL (0x494d504c), ACE_NTOHL (0x49434954), ACE_NTOHL (0x5f414354), ACE_NTOHL (0x49564154), ACE_NTOHL (0x494f4e00),  // name = IMPLICIT_ACTIVATION
  23, ACE_NTOHL (0x4e4f5f49), ACE_NTOHL (0x4d504c49), ACE_NTOHL (0x4349545f), ACE_NTOHL (0x41435449), ACE_NTOHL (0x56415449), ACE_NTOHL (0x4f4e00fd),  // name = NO_IMPLICIT_ACTIVATION
};
static CORBA::TypeCode _tc__tc_PortableServer_ImplicitActivationPolicyValue (CORBA::tk_enum, sizeof (_oc_PortableServer_ImplicitActivationPolicyValue), (char *) &_oc_PortableServer_ImplicitActivationPolicyValue, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ImplicitActivationPolicyValue = &_tc__tc_PortableServer_ImplicitActivationPolicyValue;

PortableServer::ImplicitActivationPolicy_ptr PortableServer::ImplicitActivationPolicy::_duplicate (PortableServer::ImplicitActivationPolicy_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::ImplicitActivationPolicy_ptr PortableServer::ImplicitActivationPolicy::_narrow (
                                                                                                CORBA::Object_ptr obj,
                                                                                                CORBA::Environment &env
                                                                                                )
{
  if (CORBA::is_nil (obj))
    return PortableServer::ImplicitActivationPolicy::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/ImplicitActivationPolicy:1.0", env))
    return PortableServer::ImplicitActivationPolicy::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      PortableServer::ImplicitActivationPolicy_ptr new_obj = new PortableServer::ImplicitActivationPolicy (obj->_get_parent ()); // construct obj ref using the stub object
      return new_obj;
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::ImplicitActivationPolicy::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/ImplicitActivationPolicy:1.0");
  return new POA_PortableServer::_tao_collocated_ImplicitActivationPolicy(
                                                                          ACE_reinterpret_cast(POA_PortableServer::ImplicitActivationPolicy_ptr, servant),
                                                                          stub
                                                                          );
}

PortableServer::ImplicitActivationPolicyValue PortableServer::ImplicitActivationPolicy::value(CORBA::Environment &env)
{
  static const TAO_Param_Data _get_PortableServer_ImplicitActivationPolicy_value_paramdata [] =
  {
    {PortableServer::_tc_ImplicitActivationPolicyValue, PARAM_RETURN, 0}};

  static const TAO_Call_Data _get_PortableServer_ImplicitActivationPolicy_value_calldata =
  {"_get_value", 1, 1, _get_PortableServer_ImplicitActivationPolicy_value_paramdata, 0, 0};

  PortableServer::ImplicitActivationPolicyValue retval =
    ACE_static_cast (PortableServer::ImplicitActivationPolicyValue, -1);
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != TAO_NOERROR)
    {
      env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
      return retval;
    }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_static_call (env, &_get_PortableServer_ImplicitActivationPolicy_value_calldata, &retval);
  return retval;

}

CORBA::Boolean PortableServer::ImplicitActivationPolicy::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/ImplicitActivationPolicy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/Policy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_ImplicitActivationPolicy[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  48, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f49), ACE_NTOHL (0x6d706c69), ACE_NTOHL (0x63697441), ACE_NTOHL (0x63746976), ACE_NTOHL (0x6174696f), ACE_NTOHL (0x6e506f6c), ACE_NTOHL (0x6963793a), ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableServer/ImplicitActivationPolicy:1.0
  25, ACE_NTOHL (0x496d706c), ACE_NTOHL (0x69636974), ACE_NTOHL (0x41637469), ACE_NTOHL (0x76617469), ACE_NTOHL (0x6f6e506f), ACE_NTOHL (0x6c696379), ACE_NTOHL (0xfdfdfd),  // name = ImplicitActivationPolicy,
};
static CORBA::TypeCode _tc__tc_PortableServer_ImplicitActivationPolicy (CORBA::tk_objref, sizeof (_oc_PortableServer_ImplicitActivationPolicy), (char *) &_oc_PortableServer_ImplicitActivationPolicy, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ImplicitActivationPolicy = &_tc__tc_PortableServer_ImplicitActivationPolicy;


static const CORBA::Long _oc_PortableServer_ServantRetentionPolicyValue[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  51, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f53), ACE_NTOHL (0x65727661), ACE_NTOHL (0x6e745265), ACE_NTOHL (0x74656e74), ACE_NTOHL (0x696f6e50), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x7956616c), ACE_NTOHL (0x75653a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/ServantRetentionPolicyValue:1.0
  28, ACE_NTOHL (0x53657276), ACE_NTOHL (0x616e7452), ACE_NTOHL (0x6574656e), ACE_NTOHL (0x74696f6e), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x63795661), ACE_NTOHL (0x6c756500),  // name = ServantRetentionPolicyValue
  2, // member count
  7, ACE_NTOHL (0x52455441), ACE_NTOHL (0x494e00fd),  // name = RETAIN
  11, ACE_NTOHL (0x4e4f4e5f), ACE_NTOHL (0x52455441), ACE_NTOHL (0x494e00fd),  // name = NON_RETAIN
};
static CORBA::TypeCode _tc__tc_PortableServer_ServantRetentionPolicyValue (CORBA::tk_enum, sizeof (_oc_PortableServer_ServantRetentionPolicyValue), (char *) &_oc_PortableServer_ServantRetentionPolicyValue, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ServantRetentionPolicyValue = &_tc__tc_PortableServer_ServantRetentionPolicyValue;

PortableServer::ServantRetentionPolicy_ptr PortableServer::ServantRetentionPolicy::_duplicate (PortableServer::ServantRetentionPolicy_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::ServantRetentionPolicy_ptr PortableServer::ServantRetentionPolicy::_narrow (
                                                                                            CORBA::Object_ptr obj,
                                                                                            CORBA::Environment &env
                                                                                            )
{
  if (CORBA::is_nil (obj))
    return PortableServer::ServantRetentionPolicy::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/ServantRetentionPolicy:1.0", env))
    return PortableServer::ServantRetentionPolicy::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      PortableServer::ServantRetentionPolicy_ptr new_obj = new PortableServer::ServantRetentionPolicy (obj->_get_parent ()); // construct obj ref using the stub object
      return new_obj;
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::ServantRetentionPolicy::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/ServantRetentionPolicy:1.0");
  return new POA_PortableServer::_tao_collocated_ServantRetentionPolicy(
                                                                        ACE_reinterpret_cast(POA_PortableServer::ServantRetentionPolicy_ptr, servant),
                                                                        stub
                                                                        );
}

PortableServer::ServantRetentionPolicyValue PortableServer::ServantRetentionPolicy::value(CORBA::Environment &env)
{
  static const TAO_Param_Data _get_PortableServer_ServantRetentionPolicy_value_paramdata [] =
  {
    {PortableServer::_tc_ServantRetentionPolicyValue, PARAM_RETURN, 0}};

  static const TAO_Call_Data _get_PortableServer_ServantRetentionPolicy_value_calldata =
  {"_get_value", 1, 1, _get_PortableServer_ServantRetentionPolicy_value_paramdata, 0, 0};

  PortableServer::ServantRetentionPolicyValue retval =
    ACE_static_cast (PortableServer::ServantRetentionPolicyValue, -1);
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != TAO_NOERROR)
    {
      env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
      return retval;
    }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_static_call (env, &_get_PortableServer_ServantRetentionPolicy_value_calldata, &retval);
  return retval;

}

CORBA::Boolean PortableServer::ServantRetentionPolicy::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/ServantRetentionPolicy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/Policy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_ServantRetentionPolicy[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  46, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f53), ACE_NTOHL (0x65727661), ACE_NTOHL (0x6e745265), ACE_NTOHL (0x74656e74), ACE_NTOHL (0x696f6e50), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x793a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/ServantRetentionPolicy:1.0
  23, ACE_NTOHL (0x53657276), ACE_NTOHL (0x616e7452), ACE_NTOHL (0x6574656e), ACE_NTOHL (0x74696f6e), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x637900fd),  // name = ServantRetentionPolicy,
};
static CORBA::TypeCode _tc__tc_PortableServer_ServantRetentionPolicy (CORBA::tk_objref, sizeof (_oc_PortableServer_ServantRetentionPolicy), (char *) &_oc_PortableServer_ServantRetentionPolicy, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ServantRetentionPolicy = &_tc__tc_PortableServer_ServantRetentionPolicy;


static const CORBA::Long _oc_PortableServer_RequestProcessingPolicyValue[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  52, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f52), ACE_NTOHL (0x65717565), ACE_NTOHL (0x73745072), ACE_NTOHL (0x6f636573), ACE_NTOHL (0x73696e67), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x63795661), ACE_NTOHL (0x6c75653a), ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableServer/RequestProcessingPolicyValue:1.0
  29, ACE_NTOHL (0x52657175), ACE_NTOHL (0x65737450), ACE_NTOHL (0x726f6365), ACE_NTOHL (0x7373696e), ACE_NTOHL (0x67506f6c), ACE_NTOHL (0x69637956), ACE_NTOHL (0x616c7565), ACE_NTOHL (0xfdfdfd),  // name = RequestProcessingPolicyValue
  3, // member count
  27, ACE_NTOHL (0x5553455f), ACE_NTOHL (0x41435449), ACE_NTOHL (0x56455f4f), ACE_NTOHL (0x424a4543), ACE_NTOHL (0x545f4d41), ACE_NTOHL (0x505f4f4e), ACE_NTOHL (0x4c5900fd),  // name = USE_ACTIVE_OBJECT_MAP_ONLY
  20, ACE_NTOHL (0x5553455f), ACE_NTOHL (0x44454641), ACE_NTOHL (0x554c545f), ACE_NTOHL (0x53455256), ACE_NTOHL (0x414e5400),  // name = USE_DEFAULT_SERVANT
  20, ACE_NTOHL (0x5553455f), ACE_NTOHL (0x53455256), ACE_NTOHL (0x414e545f), ACE_NTOHL (0x4d414e41), ACE_NTOHL (0x47455200),  // name = USE_SERVANT_MANAGER
};
static CORBA::TypeCode _tc__tc_PortableServer_RequestProcessingPolicyValue (CORBA::tk_enum, sizeof (_oc_PortableServer_RequestProcessingPolicyValue), (char *) &_oc_PortableServer_RequestProcessingPolicyValue, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_RequestProcessingPolicyValue = &_tc__tc_PortableServer_RequestProcessingPolicyValue;

PortableServer::RequestProcessingPolicy_ptr PortableServer::RequestProcessingPolicy::_duplicate (PortableServer::RequestProcessingPolicy_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::RequestProcessingPolicy_ptr PortableServer::RequestProcessingPolicy::_narrow (
                                                                                              CORBA::Object_ptr obj,
                                                                                              CORBA::Environment &env
                                                                                              )
{
  if (CORBA::is_nil (obj))
    return PortableServer::RequestProcessingPolicy::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/RequestProcessingPolicy:1.0", env))
    return PortableServer::RequestProcessingPolicy::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      PortableServer::RequestProcessingPolicy_ptr
        new_obj = new PortableServer::RequestProcessingPolicy (obj->_get_parent ()); // construct obj ref using the stub object
      return new_obj;
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::RequestProcessingPolicy::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/RequestProcessingPolicy:1.0");
  return new POA_PortableServer::_tao_collocated_RequestProcessingPolicy(
                                                                         ACE_reinterpret_cast(POA_PortableServer::RequestProcessingPolicy_ptr, servant),
                                                                         stub
                                                                         );
}

PortableServer::RequestProcessingPolicyValue PortableServer::RequestProcessingPolicy::value(CORBA::Environment &env)
{
  static const TAO_Param_Data _get_PortableServer_RequestProcessingPolicy_value_paramdata [] =
  {
    {PortableServer::_tc_RequestProcessingPolicyValue, PARAM_RETURN, 0}};

  static const TAO_Call_Data _get_PortableServer_RequestProcessingPolicy_value_calldata =
  {"_get_value", 1, 1, _get_PortableServer_RequestProcessingPolicy_value_paramdata, 0, 0};

  PortableServer::RequestProcessingPolicyValue retval =
    ACE_static_cast (PortableServer::RequestProcessingPolicyValue, -1);
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != TAO_NOERROR)
    {
      env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
      return retval;
    }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_static_call (env, &_get_PortableServer_RequestProcessingPolicy_value_calldata, &retval);
  return retval;

}

CORBA::Boolean PortableServer::RequestProcessingPolicy::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/RequestProcessingPolicy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/Policy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_RequestProcessingPolicy[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  47, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f52), ACE_NTOHL (0x65717565), ACE_NTOHL (0x73745072), ACE_NTOHL (0x6f636573), ACE_NTOHL (0x73696e67), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x63793a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/RequestProcessingPolicy:1.0
  24, ACE_NTOHL (0x52657175), ACE_NTOHL (0x65737450), ACE_NTOHL (0x726f6365), ACE_NTOHL (0x7373696e), ACE_NTOHL (0x67506f6c), ACE_NTOHL (0x69637900),  // name = RequestProcessingPolicy,
};
static CORBA::TypeCode _tc__tc_PortableServer_RequestProcessingPolicy (CORBA::tk_objref, sizeof (_oc_PortableServer_RequestProcessingPolicy), (char *) &_oc_PortableServer_RequestProcessingPolicy, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_RequestProcessingPolicy = &_tc__tc_PortableServer_RequestProcessingPolicy;

// **************************************************
//
// TAO spcific POA locking policy (non-standard)
//
// **************************************************

static const CORBA::Long _oc_PortableServer_SynchronizationPolicyValue[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  50, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f53), ACE_NTOHL (0x796e6368), ACE_NTOHL (0x726f6e69), ACE_NTOHL (0x7a617469), ACE_NTOHL (0x6f6e506f), ACE_NTOHL (0x6c696379), ACE_NTOHL (0x56616c75), ACE_NTOHL (0x653a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/SynchronizationPolicyValue:1.0
  27, ACE_NTOHL (0x53796e63), ACE_NTOHL (0x68726f6e), ACE_NTOHL (0x697a6174), ACE_NTOHL (0x696f6e50), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x7956616c), ACE_NTOHL (0x756500fd),  // name = SynchronizationPolicyValue
  3, // member count
    13, ACE_NTOHL (0x44454641), ACE_NTOHL (0x554c545f), ACE_NTOHL (0x4c4f434b), ACE_NTOHL (0xfdfdfd),  // name = DEFAULT_LOCK
    10, ACE_NTOHL (0x4e554c4c), ACE_NTOHL (0x5f4c4f43), ACE_NTOHL (0x4b00fdfd),  // name = NULL_LOCK
    12, ACE_NTOHL (0x54485245), ACE_NTOHL (0x41445f4c), ACE_NTOHL (0x4f434b00),  // name = THREAD_LOCK
};
static CORBA::TypeCode _tc__tc_PortableServer_SynchronizationPolicyValue (CORBA::tk_enum, sizeof (_oc_PortableServer_SynchronizationPolicyValue), (char *) &_oc_PortableServer_SynchronizationPolicyValue, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_SynchronizationPolicyValue = &_tc__tc_PortableServer_SynchronizationPolicyValue;

PortableServer::SynchronizationPolicy_ptr PortableServer::SynchronizationPolicy::_duplicate (PortableServer::SynchronizationPolicy_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::SynchronizationPolicy_ptr PortableServer::SynchronizationPolicy::_narrow (
                                                                                          CORBA::Object_ptr obj,
                                                                                          CORBA::Environment &env
                                                                                          )
{
  if (CORBA::is_nil (obj))
    return PortableServer::SynchronizationPolicy::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/SynchronizationPolicy:1.0", env))
    return PortableServer::SynchronizationPolicy::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      PortableServer::SynchronizationPolicy_ptr
        new_obj = new PortableServer::SynchronizationPolicy (obj->_get_parent ()); // construct obj ref using the stub object
      return new_obj;
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::SynchronizationPolicy::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/SynchronizationPolicy:1.0");
  return new POA_PortableServer::_tao_collocated_SynchronizationPolicy(
                                                                       ACE_reinterpret_cast(POA_PortableServer::SynchronizationPolicy_ptr, servant),
                                                                       stub
                                                                       );
}

PortableServer::SynchronizationPolicyValue PortableServer::SynchronizationPolicy::value(CORBA::Environment &env)
{
  static const TAO_Param_Data _get_PortableServer_SynchronizationPolicy_value_paramdata [] =
  {
    {PortableServer::_tc_SynchronizationPolicyValue, PARAM_RETURN, 0}};

  static const TAO_Call_Data _get_PortableServer_SynchronizationPolicy_value_calldata =
  {"_get_value", 1, 1, _get_PortableServer_SynchronizationPolicy_value_paramdata, 0, 0};

  PortableServer::SynchronizationPolicyValue retval =
    ACE_static_cast (PortableServer::SynchronizationPolicyValue, -1);
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != TAO_NOERROR)
    {
      env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
      return retval;
    }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_static_call (env, &_get_PortableServer_SynchronizationPolicy_value_calldata, &retval);
  return retval;

}

CORBA::Boolean PortableServer::SynchronizationPolicy::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/SynchronizationPolicy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/Policy:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_SynchronizationPolicy[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  45, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f53), ACE_NTOHL (0x796e6368), ACE_NTOHL (0x726f6e69), ACE_NTOHL (0x7a617469), ACE_NTOHL (0x6f6e506f), ACE_NTOHL (0x6c696379), ACE_NTOHL (0x3a312e30), ACE_NTOHL (0xfdfdfd),  // repository ID = IDL:PortableServer/SynchronizationPolicy:1.0
  22, ACE_NTOHL (0x53796e63), ACE_NTOHL (0x68726f6e), ACE_NTOHL (0x697a6174), ACE_NTOHL (0x696f6e50), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x7900fdfd),  // name = SynchronizationPolicy,
};
static CORBA::TypeCode _tc__tc_PortableServer_SynchronizationPolicy (CORBA::tk_objref, sizeof (_oc_PortableServer_SynchronizationPolicy), (char *) &_oc_PortableServer_SynchronizationPolicy, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_SynchronizationPolicy = &_tc__tc_PortableServer_SynchronizationPolicy;

PortableServer::POAManager_ptr PortableServer::POAManager::_duplicate (PortableServer::POAManager_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::POAManager_ptr PortableServer::POAManager::_narrow (
                                                                    CORBA::Object_ptr obj,
                                                                    CORBA::Environment &env
                                                                    )
{
  if (CORBA::is_nil (obj))
    return PortableServer::POAManager::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/POAManager:1.0", env))
    return PortableServer::POAManager::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      // This can only be colocated
      env.exception (new CORBA::MARSHAL (CORBA::COMPLETED_NO));
      return PortableServer::POAManager::_nil ();
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::POAManager::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/POAManager:1.0");
  return new POA_PortableServer::_tao_collocated_POAManager(
                                                            ACE_reinterpret_cast(POA_PortableServer::POAManager_ptr, servant),
                                                            stub
                                                            );
}

// default constructor
PortableServer::POAManager::AdapterInactive::AdapterInactive (void)
  : CORBA_SystemException (PortableServer::POAManager::_tc_AdapterInactive, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POAManager::AdapterInactive::~AdapterInactive (void)
{
}

// copy constructor
PortableServer::POAManager::AdapterInactive::AdapterInactive (const PortableServer::POAManager::AdapterInactive &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POAManager::AdapterInactive&
PortableServer::POAManager::AdapterInactive::operator= (const PortableServer::POAManager::AdapterInactive &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POAManager::AdapterInactive_ptr
PortableServer::POAManager::AdapterInactive::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POAManager/AdapterInactive:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POAManager::AdapterInactive_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POAManager::AdapterInactive::_alloc (void)
{
  return new PortableServer::POAManager::AdapterInactive;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POAManager::AdapterInactive &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POAManager::_tc_AdapterInactive, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POAManager::AdapterInactive *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POAManager::_tc_AdapterInactive, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POAManager::AdapterInactive *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POAManager::_tc_AdapterInactive, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POAManager::AdapterInactive, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POAManager::_tc_AdapterInactive, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POAManager::AdapterInactive *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POAManager_AdapterInactive[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  50, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f414d61), ACE_NTOHL (0x6e616765), ACE_NTOHL (0x722f4164), ACE_NTOHL (0x61707465), ACE_NTOHL (0x72496e61), ACE_NTOHL (0x63746976), ACE_NTOHL (0x653a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/POAManager/AdapterInactive:1.0
  16, ACE_NTOHL (0x41646170), ACE_NTOHL (0x74657249), ACE_NTOHL (0x6e616374), ACE_NTOHL (0x69766500),  // name = AdapterInactive
  0, // member count
};
static CORBA::TypeCode _tc__tc_PortableServer_POAManager_AdapterInactive (CORBA::tk_except, sizeof (_oc_PortableServer_POAManager_AdapterInactive), (char *) &_oc_PortableServer_POAManager_AdapterInactive, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POAManager::_tc_AdapterInactive = &_tc__tc_PortableServer_POAManager_AdapterInactive;

CORBA::Boolean PortableServer::POAManager::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/POAManager:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_POAManager[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  34, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f414d61), ACE_NTOHL (0x6e616765), ACE_NTOHL (0x723a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/POAManager:1.0
  11, ACE_NTOHL (0x504f414d), ACE_NTOHL (0x616e6167), ACE_NTOHL (0x657200fd),  // name = POAManager,
};
static CORBA::TypeCode _tc__tc_PortableServer_POAManager (CORBA::tk_objref, sizeof (_oc_PortableServer_POAManager), (char *) &_oc_PortableServer_POAManager, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_POAManager = &_tc__tc_PortableServer_POAManager;

PortableServer::AdapterActivator_ptr PortableServer::AdapterActivator::_duplicate (PortableServer::AdapterActivator_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::AdapterActivator_ptr PortableServer::AdapterActivator::_narrow (
                                                                                CORBA::Object_ptr obj,
                                                                                CORBA::Environment &env
                                                                                )
{
  if (CORBA::is_nil (obj))
    return PortableServer::AdapterActivator::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/AdapterActivator:1.0", env))
    return PortableServer::AdapterActivator::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      // This can only be colocated
      env.exception (new CORBA::MARSHAL (CORBA::COMPLETED_NO));
      return PortableServer::AdapterActivator::_nil ();
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::AdapterActivator::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/AdapterActivator:1.0");
  return new POA_PortableServer::_tao_collocated_AdapterActivator(
                                                                  ACE_reinterpret_cast(POA_PortableServer::AdapterActivator_ptr, servant),
                                                                  stub
                                                                  );
}

CORBA::Boolean PortableServer::AdapterActivator::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/AdapterActivator:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_AdapterActivator[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  40, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f41), ACE_NTOHL (0x64617074), ACE_NTOHL (0x65724163), ACE_NTOHL (0x74697661), ACE_NTOHL (0x746f723a), ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableServer/AdapterActivator:1.0
  17, ACE_NTOHL (0x41646170), ACE_NTOHL (0x74657241), ACE_NTOHL (0x63746976), ACE_NTOHL (0x61746f72), ACE_NTOHL (0xfdfdfd),  // name = AdapterActivator,
};
static CORBA::TypeCode _tc__tc_PortableServer_AdapterActivator (CORBA::tk_objref, sizeof (_oc_PortableServer_AdapterActivator), (char *) &_oc_PortableServer_AdapterActivator, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_AdapterActivator = &_tc__tc_PortableServer_AdapterActivator;

PortableServer::ServantManager_ptr PortableServer::ServantManager::_duplicate (PortableServer::ServantManager_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::ServantManager_ptr PortableServer::ServantManager::_narrow (
                                                                            CORBA::Object_ptr obj,
                                                                            CORBA::Environment &env
                                                                            )
{
  if (CORBA::is_nil (obj))
    return PortableServer::ServantManager::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/ServantManager:1.0", env))
    return PortableServer::ServantManager::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      // This can only be colocated
      env.exception (new CORBA::MARSHAL (CORBA::COMPLETED_NO));
      return PortableServer::ServantManager::_nil ();
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::ServantManager::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/ServantManager:1.0");
  return new POA_PortableServer::_tao_collocated_ServantManager(
                                                                ACE_reinterpret_cast(POA_PortableServer::ServantManager_ptr, servant),
                                                                stub
                                                                );
}

CORBA::Boolean PortableServer::ServantManager::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/ServantManager:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_ServantManager[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  38, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f53), ACE_NTOHL (0x65727661), ACE_NTOHL (0x6e744d61), ACE_NTOHL (0x6e616765), ACE_NTOHL (0x723a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/ServantManager:1.0
  15, ACE_NTOHL (0x53657276), ACE_NTOHL (0x616e744d), ACE_NTOHL (0x616e6167), ACE_NTOHL (0x657200fd),  // name = ServantManager,
};
static CORBA::TypeCode _tc__tc_PortableServer_ServantManager (CORBA::tk_objref, sizeof (_oc_PortableServer_ServantManager), (char *) &_oc_PortableServer_ServantManager, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ServantManager = &_tc__tc_PortableServer_ServantManager;

PortableServer::ServantActivator_ptr PortableServer::ServantActivator::_duplicate (PortableServer::ServantActivator_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::ServantActivator_ptr PortableServer::ServantActivator::_narrow (
                                                                                CORBA::Object_ptr obj,
                                                                                CORBA::Environment &env
                                                                                )
{
  if (CORBA::is_nil (obj))
    return PortableServer::ServantActivator::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/ServantActivator:1.0", env))
    return PortableServer::ServantActivator::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      // This can only be colocated
      env.exception (new CORBA::MARSHAL (CORBA::COMPLETED_NO));
      return PortableServer::ServantActivator::_nil ();
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::ServantActivator::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/ServantActivator:1.0");
  return new POA_PortableServer::_tao_collocated_ServantActivator(
                                                                  ACE_reinterpret_cast(POA_PortableServer::ServantActivator_ptr, servant),
                                                                  stub
                                                                  );
}

CORBA::Boolean PortableServer::ServantActivator::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/ServantActivator:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/ServantManager:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_ServantActivator[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  40, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f53), ACE_NTOHL (0x65727661), ACE_NTOHL (0x6e744163), ACE_NTOHL (0x74697661), ACE_NTOHL (0x746f723a), ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableServer/ServantActivator:1.0
  17, ACE_NTOHL (0x53657276), ACE_NTOHL (0x616e7441), ACE_NTOHL (0x63746976), ACE_NTOHL (0x61746f72), ACE_NTOHL (0xfdfdfd),  // name = ServantActivator,
};
static CORBA::TypeCode _tc__tc_PortableServer_ServantActivator (CORBA::tk_objref, sizeof (_oc_PortableServer_ServantActivator), (char *) &_oc_PortableServer_ServantActivator, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ServantActivator = &_tc__tc_PortableServer_ServantActivator;

PortableServer::ServantLocator_ptr PortableServer::ServantLocator::_duplicate (PortableServer::ServantLocator_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::ServantLocator_ptr PortableServer::ServantLocator::_narrow (
                                                                            CORBA::Object_ptr obj,
                                                                            CORBA::Environment &env
                                                                            )
{
  if (CORBA::is_nil (obj))
    return PortableServer::ServantLocator::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/ServantLocator:1.0", env))
    return PortableServer::ServantLocator::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      // This can only be colocated
      env.exception (new CORBA::MARSHAL (CORBA::COMPLETED_NO));
      return PortableServer::ServantLocator::_nil ();
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::ServantLocator::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/ServantLocator:1.0");
  return new POA_PortableServer::_tao_collocated_ServantLocator(
                                                                ACE_reinterpret_cast(POA_PortableServer::ServantLocator_ptr, servant),
                                                                stub
                                                                );
}

CORBA::Boolean PortableServer::ServantLocator::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/ServantLocator:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/ServantManager:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_ServantLocator[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  38, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f53), ACE_NTOHL (0x65727661), ACE_NTOHL (0x6e744c6f), ACE_NTOHL (0x6361746f), ACE_NTOHL (0x723a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/ServantLocator:1.0
  15, ACE_NTOHL (0x53657276), ACE_NTOHL (0x616e744c), ACE_NTOHL (0x6f636174), ACE_NTOHL (0x6f7200fd),  // name = ServantLocator,
};
static CORBA::TypeCode _tc__tc_PortableServer_ServantLocator (CORBA::tk_objref, sizeof (_oc_PortableServer_ServantLocator), (char *) &_oc_PortableServer_ServantLocator, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_ServantLocator = &_tc__tc_PortableServer_ServantLocator;

PortableServer::POA_ptr PortableServer::POA::_duplicate (PortableServer::POA_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::POA_ptr PortableServer::POA::_narrow (
                                                      CORBA::Object_ptr obj,
                                                      CORBA::Environment &env
                                                      )
{
  if (CORBA::is_nil (obj))
    return PortableServer::POA::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/POA:1.0", env))
    return PortableServer::POA::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      // This can only be colocated
      env.exception (new CORBA::MARSHAL (CORBA::COMPLETED_NO));
      return PortableServer::POA::_nil ();
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::POA::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/POA:1.0");
  return new POA_PortableServer::_tao_collocated_POA(
                                                     ACE_reinterpret_cast(POA_PortableServer::POA_ptr, servant),
                                                     stub
                                                     );
}

// default constructor
PortableServer::POA::AdapterAlreadyExists::AdapterAlreadyExists (void)
  : CORBA_SystemException (PortableServer::POA::_tc_AdapterAlreadyExists, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::AdapterAlreadyExists::~AdapterAlreadyExists (void)
{
}

// copy constructor
PortableServer::POA::AdapterAlreadyExists::AdapterAlreadyExists (const PortableServer::POA::AdapterAlreadyExists &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POA::AdapterAlreadyExists&
PortableServer::POA::AdapterAlreadyExists::operator= (const PortableServer::POA::AdapterAlreadyExists &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POA::AdapterAlreadyExists_ptr
PortableServer::POA::AdapterAlreadyExists::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/AdapterAlreadyExists:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::AdapterAlreadyExists_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::AdapterAlreadyExists::_alloc (void)
{
  return new PortableServer::POA::AdapterAlreadyExists;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::AdapterAlreadyExists &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_AdapterAlreadyExists, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::AdapterAlreadyExists *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_AdapterAlreadyExists, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::AdapterAlreadyExists *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_AdapterAlreadyExists, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::AdapterAlreadyExists, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_AdapterAlreadyExists, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::AdapterAlreadyExists *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_AdapterAlreadyExists[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  48, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f41), ACE_NTOHL (0x64617074), ACE_NTOHL (0x6572416c), ACE_NTOHL (0x72656164), ACE_NTOHL (0x79457869), ACE_NTOHL (0x7374733a), ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableServer/POA/AdapterAlreadyExists:1.0
  21, ACE_NTOHL (0x41646170), ACE_NTOHL (0x74657241), ACE_NTOHL (0x6c726561), ACE_NTOHL (0x64794578), ACE_NTOHL (0x69737473), ACE_NTOHL (0xfdfdfd),  // name = AdapterAlreadyExists
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_AdapterAlreadyExists (CORBA::tk_except, sizeof (_oc_PortableServer_POA_AdapterAlreadyExists), (char *) &_oc_PortableServer_POA_AdapterAlreadyExists, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_AdapterAlreadyExists = &_tc__tc_PortableServer_POA_AdapterAlreadyExists;

// default constructor
PortableServer::POA::AdapterInactive::AdapterInactive (void)
  : CORBA_SystemException (PortableServer::POA::_tc_AdapterInactive, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::AdapterInactive::~AdapterInactive (void)
{
}

// copy constructor
PortableServer::POA::AdapterInactive::AdapterInactive (const PortableServer::POA::AdapterInactive &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POA::AdapterInactive&
PortableServer::POA::AdapterInactive::operator= (const PortableServer::POA::AdapterInactive &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POA::AdapterInactive_ptr
PortableServer::POA::AdapterInactive::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/AdapterInactive:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::AdapterInactive_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::AdapterInactive::_alloc (void)
{
  return new PortableServer::POA::AdapterInactive;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::AdapterInactive &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_AdapterInactive, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::AdapterInactive *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_AdapterInactive, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::AdapterInactive *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_AdapterInactive, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::AdapterInactive, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_AdapterInactive, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::AdapterInactive *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_AdapterInactive[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  43, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f41), ACE_NTOHL (0x64617074), ACE_NTOHL (0x6572496e), ACE_NTOHL (0x61637469), ACE_NTOHL (0x76653a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/POA/AdapterInactive:1.0
  16, ACE_NTOHL (0x41646170), ACE_NTOHL (0x74657249), ACE_NTOHL (0x6e616374), ACE_NTOHL (0x69766500),  // name = AdapterInactive
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_AdapterInactive (CORBA::tk_except, sizeof (_oc_PortableServer_POA_AdapterInactive), (char *) &_oc_PortableServer_POA_AdapterInactive, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_AdapterInactive = &_tc__tc_PortableServer_POA_AdapterInactive;

// default constructor
PortableServer::POA::AdapterNonExistent::AdapterNonExistent (void)
  : CORBA_SystemException (PortableServer::POA::_tc_AdapterNonExistent, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::AdapterNonExistent::~AdapterNonExistent (void)
{
}

// copy constructor
PortableServer::POA::AdapterNonExistent::AdapterNonExistent (const PortableServer::POA::AdapterNonExistent &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POA::AdapterNonExistent&
PortableServer::POA::AdapterNonExistent::operator= (const PortableServer::POA::AdapterNonExistent &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POA::AdapterNonExistent_ptr
PortableServer::POA::AdapterNonExistent::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/AdapterNonExistent:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::AdapterNonExistent_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::AdapterNonExistent::_alloc (void)
{
  return new PortableServer::POA::AdapterNonExistent;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::AdapterNonExistent &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_AdapterNonExistent, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::AdapterNonExistent *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_AdapterNonExistent, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::AdapterNonExistent *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_AdapterNonExistent, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::AdapterNonExistent, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_AdapterNonExistent, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::AdapterNonExistent *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_AdapterNonExistent[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  46, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f41), ACE_NTOHL (0x64617074), ACE_NTOHL (0x65724e6f), ACE_NTOHL (0x6e457869), ACE_NTOHL (0x7374656e), ACE_NTOHL (0x743a312e), ACE_NTOHL (0x3000fdfd),  // repository ID = IDL:PortableServer/POA/AdapterNonExistent:1.0
  19, ACE_NTOHL (0x41646170), ACE_NTOHL (0x7465724e), ACE_NTOHL (0x6f6e4578), ACE_NTOHL (0x69737465), ACE_NTOHL (0x6e7400fd),  // name = AdapterNonExistent
  0, // member count
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_AdapterNonExistent (CORBA::tk_except, sizeof (_oc_PortableServer_POA_AdapterNonExistent), (char *) &_oc_PortableServer_POA_AdapterNonExistent, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_AdapterNonExistent = &_tc__tc_PortableServer_POA_AdapterNonExistent;

// default constructor
PortableServer::POA::InvalidPolicy::InvalidPolicy (void)
  : CORBA_SystemException (PortableServer::POA::_tc_InvalidPolicy, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::InvalidPolicy::~InvalidPolicy (void)
{
}

// copy constructor
PortableServer::POA::InvalidPolicy::InvalidPolicy (const PortableServer::POA::InvalidPolicy &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
  this->index = _tao_excp.index;
}

// assignment operator
PortableServer::POA::InvalidPolicy&
PortableServer::POA::InvalidPolicy::operator= (const PortableServer::POA::InvalidPolicy &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  this->index = _tao_excp.index;
  return *this;
}

PortableServer::POA::InvalidPolicy::InvalidPolicy(
                                                  CORBA::UShort _tao_index)
  : CORBA_SystemException  (PortableServer::POA::_tc_InvalidPolicy, 0xffff0000L, CORBA::COMPLETED_NO)
{
  this->index = _tao_index;
}

// narrow
PortableServer::POA::InvalidPolicy_ptr
PortableServer::POA::InvalidPolicy::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/InvalidPolicy:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::InvalidPolicy_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::InvalidPolicy::_alloc (void)
{
  return new PortableServer::POA::InvalidPolicy;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::InvalidPolicy &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_InvalidPolicy, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::InvalidPolicy *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_InvalidPolicy, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::InvalidPolicy *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_InvalidPolicy, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::InvalidPolicy, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_InvalidPolicy, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::InvalidPolicy *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_InvalidPolicy[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  41, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f49), ACE_NTOHL (0x6e76616c), ACE_NTOHL (0x6964506f), ACE_NTOHL (0x6c696379), ACE_NTOHL (0x3a312e30), ACE_NTOHL (0xfdfdfd),  // repository ID = IDL:PortableServer/POA/InvalidPolicy:1.0
  14, ACE_NTOHL (0x496e7661), ACE_NTOHL (0x6c696450), ACE_NTOHL (0x6f6c6963), ACE_NTOHL (0x7900fdfd),  // name = InvalidPolicy
  1, // member count
  6, ACE_NTOHL (0x696e6465), ACE_NTOHL (0x7800fdfd),  // name = index
  CORBA::tk_ushort,
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_InvalidPolicy (CORBA::tk_except, sizeof (_oc_PortableServer_POA_InvalidPolicy), (char *) &_oc_PortableServer_POA_InvalidPolicy, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_InvalidPolicy = &_tc__tc_PortableServer_POA_InvalidPolicy;

// default constructor
PortableServer::POA::NoServant::NoServant (void)
  : CORBA_SystemException (PortableServer::POA::_tc_NoServant, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::NoServant::~NoServant (void)
{
}

// copy constructor
PortableServer::POA::NoServant::NoServant (const PortableServer::POA::NoServant &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POA::NoServant&
PortableServer::POA::NoServant::operator= (const PortableServer::POA::NoServant &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POA::NoServant_ptr
PortableServer::POA::NoServant::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/NoServant:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::NoServant_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::NoServant::_alloc (void)
{
  return new PortableServer::POA::NoServant;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::NoServant &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_NoServant, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::NoServant *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_NoServant, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::NoServant *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_NoServant, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::NoServant, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_NoServant, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::NoServant *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_NoServant[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  37, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f4e), ACE_NTOHL (0x6f536572), ACE_NTOHL (0x76616e74), ACE_NTOHL (0x3a312e30), ACE_NTOHL (0xfdfdfd),  // repository ID = IDL:PortableServer/POA/NoServant:1.0
  10, ACE_NTOHL (0x4e6f5365), ACE_NTOHL (0x7276616e), ACE_NTOHL (0x7400fdfd),  // name = NoServant
  0, // member count
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_NoServant (CORBA::tk_except, sizeof (_oc_PortableServer_POA_NoServant), (char *) &_oc_PortableServer_POA_NoServant, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_NoServant = &_tc__tc_PortableServer_POA_NoServant;

// default constructor
PortableServer::POA::ObjectAlreadyActive::ObjectAlreadyActive (void)
  : CORBA_SystemException (PortableServer::POA::_tc_ObjectAlreadyActive, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::ObjectAlreadyActive::~ObjectAlreadyActive (void)
{
}

// copy constructor
PortableServer::POA::ObjectAlreadyActive::ObjectAlreadyActive (const PortableServer::POA::ObjectAlreadyActive &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POA::ObjectAlreadyActive&
PortableServer::POA::ObjectAlreadyActive::operator= (const PortableServer::POA::ObjectAlreadyActive &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POA::ObjectAlreadyActive_ptr
PortableServer::POA::ObjectAlreadyActive::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/ObjectAlreadyActive:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::ObjectAlreadyActive_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::ObjectAlreadyActive::_alloc (void)
{
  return new PortableServer::POA::ObjectAlreadyActive;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::ObjectAlreadyActive &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_ObjectAlreadyActive, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::ObjectAlreadyActive *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_ObjectAlreadyActive, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::ObjectAlreadyActive *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_ObjectAlreadyActive, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::ObjectAlreadyActive, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_ObjectAlreadyActive, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::ObjectAlreadyActive *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_ObjectAlreadyActive[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  47, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f4f), ACE_NTOHL (0x626a6563), ACE_NTOHL (0x74416c72), ACE_NTOHL (0x65616479), ACE_NTOHL (0x41637469), ACE_NTOHL (0x76653a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/POA/ObjectAlreadyActive:1.0
  20, ACE_NTOHL (0x4f626a65), ACE_NTOHL (0x6374416c), ACE_NTOHL (0x72656164), ACE_NTOHL (0x79416374), ACE_NTOHL (0x69766500),  // name = ObjectAlreadyActive
  0, // member count
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_ObjectAlreadyActive (CORBA::tk_except, sizeof (_oc_PortableServer_POA_ObjectAlreadyActive), (char *) &_oc_PortableServer_POA_ObjectAlreadyActive, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_ObjectAlreadyActive = &_tc__tc_PortableServer_POA_ObjectAlreadyActive;

// default constructor
PortableServer::POA::ObjectNotActive::ObjectNotActive (void)
  : CORBA_SystemException (PortableServer::POA::_tc_ObjectNotActive, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::ObjectNotActive::~ObjectNotActive (void)
{
}

// copy constructor
PortableServer::POA::ObjectNotActive::ObjectNotActive (const PortableServer::POA::ObjectNotActive &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POA::ObjectNotActive&
PortableServer::POA::ObjectNotActive::operator= (const PortableServer::POA::ObjectNotActive &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POA::ObjectNotActive_ptr
PortableServer::POA::ObjectNotActive::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/ObjectNotActive:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::ObjectNotActive_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::ObjectNotActive::_alloc (void)
{
  return new PortableServer::POA::ObjectNotActive;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::ObjectNotActive &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_ObjectNotActive, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::ObjectNotActive *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_ObjectNotActive, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::ObjectNotActive *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_ObjectNotActive, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::ObjectNotActive, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_ObjectNotActive, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::ObjectNotActive *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_ObjectNotActive[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  43, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f4f), ACE_NTOHL (0x626a6563), ACE_NTOHL (0x744e6f74), ACE_NTOHL (0x41637469), ACE_NTOHL (0x76653a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/POA/ObjectNotActive:1.0
  16, ACE_NTOHL (0x4f626a65), ACE_NTOHL (0x63744e6f), ACE_NTOHL (0x74416374), ACE_NTOHL (0x69766500),  // name = ObjectNotActive
  0, // member count
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_ObjectNotActive (CORBA::tk_except, sizeof (_oc_PortableServer_POA_ObjectNotActive), (char *) &_oc_PortableServer_POA_ObjectNotActive, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_ObjectNotActive = &_tc__tc_PortableServer_POA_ObjectNotActive;

// default constructor
PortableServer::POA::ServantAlreadyActive::ServantAlreadyActive (void)
  : CORBA_SystemException (PortableServer::POA::_tc_ServantAlreadyActive, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::ServantAlreadyActive::~ServantAlreadyActive (void)
{
}

// copy constructor
PortableServer::POA::ServantAlreadyActive::ServantAlreadyActive (const PortableServer::POA::ServantAlreadyActive &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POA::ServantAlreadyActive&
PortableServer::POA::ServantAlreadyActive::operator= (const PortableServer::POA::ServantAlreadyActive &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POA::ServantAlreadyActive_ptr
PortableServer::POA::ServantAlreadyActive::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/ServantAlreadyActive:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::ServantAlreadyActive_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::ServantAlreadyActive::_alloc (void)
{
  return new PortableServer::POA::ServantAlreadyActive;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::ServantAlreadyActive &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_ServantAlreadyActive, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::ServantAlreadyActive *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_ServantAlreadyActive, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::ServantAlreadyActive *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_ServantAlreadyActive, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::ServantAlreadyActive, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_ServantAlreadyActive, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::ServantAlreadyActive *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_ServantAlreadyActive[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  48, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f53), ACE_NTOHL (0x65727661), ACE_NTOHL (0x6e74416c), ACE_NTOHL (0x72656164), ACE_NTOHL (0x79416374), ACE_NTOHL (0x6976653a), ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableServer/POA/ServantAlreadyActive:1.0
  21, ACE_NTOHL (0x53657276), ACE_NTOHL (0x616e7441), ACE_NTOHL (0x6c726561), ACE_NTOHL (0x64794163), ACE_NTOHL (0x74697665), ACE_NTOHL (0xfdfdfd),  // name = ServantAlreadyActive
  0, // member count
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_ServantAlreadyActive (CORBA::tk_except, sizeof (_oc_PortableServer_POA_ServantAlreadyActive), (char *) &_oc_PortableServer_POA_ServantAlreadyActive, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_ServantAlreadyActive = &_tc__tc_PortableServer_POA_ServantAlreadyActive;

// default constructor
PortableServer::POA::ServantNotActive::ServantNotActive (void)
  : CORBA_SystemException (PortableServer::POA::_tc_ServantNotActive, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::ServantNotActive::~ServantNotActive (void)
{
}

// copy constructor
PortableServer::POA::ServantNotActive::ServantNotActive (const PortableServer::POA::ServantNotActive &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POA::ServantNotActive&
PortableServer::POA::ServantNotActive::operator= (const PortableServer::POA::ServantNotActive &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POA::ServantNotActive_ptr
PortableServer::POA::ServantNotActive::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/ServantNotActive:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::ServantNotActive_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::ServantNotActive::_alloc (void)
{
  return new PortableServer::POA::ServantNotActive;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::ServantNotActive &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_ServantNotActive, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::ServantNotActive *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_ServantNotActive, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::ServantNotActive *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_ServantNotActive, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::ServantNotActive, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_ServantNotActive, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::ServantNotActive *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_ServantNotActive[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  44, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f53), ACE_NTOHL (0x65727661), ACE_NTOHL (0x6e744e6f), ACE_NTOHL (0x74416374), ACE_NTOHL (0x6976653a), ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableServer/POA/ServantNotActive:1.0
  17, ACE_NTOHL (0x53657276), ACE_NTOHL (0x616e744e), ACE_NTOHL (0x6f744163), ACE_NTOHL (0x74697665), ACE_NTOHL (0xfdfdfd),  // name = ServantNotActive
  0, // member count
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_ServantNotActive (CORBA::tk_except, sizeof (_oc_PortableServer_POA_ServantNotActive), (char *) &_oc_PortableServer_POA_ServantNotActive, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_ServantNotActive = &_tc__tc_PortableServer_POA_ServantNotActive;

// default constructor
PortableServer::POA::WrongAdapter::WrongAdapter (void)
  : CORBA_SystemException (PortableServer::POA::_tc_WrongAdapter, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::WrongAdapter::~WrongAdapter (void)
{
}

// copy constructor
PortableServer::POA::WrongAdapter::WrongAdapter (const PortableServer::POA::WrongAdapter &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POA::WrongAdapter&
PortableServer::POA::WrongAdapter::operator= (const PortableServer::POA::WrongAdapter &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POA::WrongAdapter_ptr
PortableServer::POA::WrongAdapter::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/WrongAdapter:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::WrongAdapter_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::WrongAdapter::_alloc (void)
{
  return new PortableServer::POA::WrongAdapter;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::WrongAdapter &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_WrongAdapter, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::WrongAdapter *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_WrongAdapter, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::WrongAdapter *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_WrongAdapter, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::WrongAdapter, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_WrongAdapter, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::WrongAdapter *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_WrongAdapter[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  40, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f57), ACE_NTOHL (0x726f6e67), ACE_NTOHL (0x41646170), ACE_NTOHL (0x7465723a), ACE_NTOHL (0x312e3000),  // repository ID = IDL:PortableServer/POA/WrongAdapter:1.0
  13, ACE_NTOHL (0x57726f6e), ACE_NTOHL (0x67416461), ACE_NTOHL (0x70746572), ACE_NTOHL (0xfdfdfd),  // name = WrongAdapter
  0, // member count
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_WrongAdapter (CORBA::tk_except, sizeof (_oc_PortableServer_POA_WrongAdapter), (char *) &_oc_PortableServer_POA_WrongAdapter, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_WrongAdapter = &_tc__tc_PortableServer_POA_WrongAdapter;

// default constructor
PortableServer::POA::WrongPolicy::WrongPolicy (void)
  : CORBA_SystemException (PortableServer::POA::_tc_WrongPolicy, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::POA::WrongPolicy::~WrongPolicy (void)
{
}

// copy constructor
PortableServer::POA::WrongPolicy::WrongPolicy (const PortableServer::POA::WrongPolicy &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::POA::WrongPolicy&
PortableServer::POA::WrongPolicy::operator= (const PortableServer::POA::WrongPolicy &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::POA::WrongPolicy_ptr
PortableServer::POA::WrongPolicy::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/POA/WrongPolicy:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::POA::WrongPolicy_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::POA::WrongPolicy::_alloc (void)
{
  return new PortableServer::POA::WrongPolicy;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::POA::WrongPolicy &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_WrongPolicy, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::POA::WrongPolicy *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::POA::_tc_WrongPolicy, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::POA::WrongPolicy *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::POA::_tc_WrongPolicy, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::POA::WrongPolicy, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::POA::_tc_WrongPolicy, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::POA::WrongPolicy *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_POA_WrongPolicy[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  39, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f412f57), ACE_NTOHL (0x726f6e67), ACE_NTOHL (0x506f6c69), ACE_NTOHL (0x63793a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/POA/WrongPolicy:1.0
  12, ACE_NTOHL (0x57726f6e), ACE_NTOHL (0x67506f6c), ACE_NTOHL (0x69637900),  // name = WrongPolicy
  0, // member count
};
static CORBA::TypeCode _tc__tc_PortableServer_POA_WrongPolicy (CORBA::tk_except, sizeof (_oc_PortableServer_POA_WrongPolicy), (char *) &_oc_PortableServer_POA_WrongPolicy, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::POA::_tc_WrongPolicy = &_tc__tc_PortableServer_POA_WrongPolicy;

CORBA::Boolean PortableServer::POA::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/POA:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_POA[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  27, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f50), ACE_NTOHL (0x4f413a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/POA:1.0
  4, ACE_NTOHL (0x504f4100),  // name = POA,
};
static CORBA::TypeCode _tc__tc_PortableServer_POA (CORBA::tk_objref, sizeof (_oc_PortableServer_POA), (char *) &_oc_PortableServer_POA, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_POA = &_tc__tc_PortableServer_POA;

PortableServer::Current_ptr PortableServer::Current::_duplicate (PortableServer::Current_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->AddRef ();

  return obj;
} // end of _duplicate

PortableServer::Current_ptr PortableServer::Current::_narrow (
                                                              CORBA::Object_ptr obj,
                                                              CORBA::Environment &env
                                                              )
{
  if (CORBA::is_nil (obj))
    return PortableServer::Current::_nil ();
  if (!obj->_is_a ("IDL:PortableServer/Current:1.0", env))
    return PortableServer::Current::_nil ();
  if (!obj->_is_collocated () || !obj->_servant())
    {
      PortableServer::Current_ptr
        new_obj = new PortableServer::Current (obj->_get_parent ()); // construct obj ref using the stub object
      return new_obj;
    } // end of if

  STUB_Object *stub = obj->_servant ()->_create_stub (env);
  if (env.exception () != 0)
    return PortableServer::Current::_nil ();
  void* servant = obj->_servant ()->_downcast ("IDL:PortableServer/Current:1.0");
  return new POA_PortableServer::_tao_collocated_Current(
                                                         ACE_reinterpret_cast(POA_PortableServer::Current_ptr, servant),
                                                         stub
                                                         );
}

// default constructor
PortableServer::Current::NoContext::NoContext (void)
  : CORBA_SystemException (PortableServer::Current::_tc_NoContext, 0xffff0000L, CORBA::COMPLETED_NO)
{
}

// destructor - all members are of self managing types
PortableServer::Current::NoContext::~NoContext (void)
{
}

// copy constructor
PortableServer::Current::NoContext::NoContext (const PortableServer::Current::NoContext &_tao_excp)
  : CORBA_SystemException (_tao_excp._type (), _tao_excp.minor (), _tao_excp.completion ())
{
}

// assignment operator
PortableServer::Current::NoContext&
PortableServer::Current::NoContext::operator= (const PortableServer::Current::NoContext &_tao_excp)
{
  this->CORBA_SystemException::operator= (_tao_excp);
  return *this;
}

// narrow
PortableServer::Current::NoContext_ptr
PortableServer::Current::NoContext::_narrow (CORBA::Exception *exc)
{
  if (!ACE_OS::strcmp ("IDL:PortableServer/Current/NoContext:1.0", exc->_id ())) // same type
    return ACE_dynamic_cast (PortableServer::Current::NoContext_ptr, exc);
  else
    return 0;
}

// TAO extension - the _alloc method
CORBA::Exception *PortableServer::Current::NoContext::_alloc (void)
{
  return new PortableServer::Current::NoContext;
}

void operator<<= (CORBA::Any &_tao_any, const PortableServer::Current::NoContext &_tao_elem) // copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::Current::_tc_NoContext, &_tao_elem, 1, _tao_env);
}
void operator<<= (CORBA::Any &_tao_any, PortableServer::Current::NoContext *_tao_elem) // non copying
{
  CORBA::Environment _tao_env;
  _tao_any.replace (PortableServer::Current::_tc_NoContext, _tao_elem, 0, _tao_env);
}
CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, PortableServer::Current::NoContext *&_tao_elem)
{
  CORBA::Environment _tao_env;
  if (!_tao_any.type ()->equal (PortableServer::Current::_tc_NoContext, _tao_env)) return 0; // not equal
  if (_tao_any.any_owns_data ())
    {
      ACE_NEW_RETURN (_tao_elem, PortableServer::Current::NoContext, 0);
      TAO_InputCDR stream ((ACE_Message_Block *)_tao_any.value ());
      if (stream.decode (PortableServer::Current::_tc_NoContext, _tao_elem, 0, _tao_env)
          == CORBA::TypeCode::TRAVERSE_CONTINUE)
        {
          ((CORBA::Any *)&_tao_any)->replace (_tao_any.type (), _tao_elem, 1, _tao_env);
          return 1;
        }
      else
        {
          delete _tao_elem;
          return 0;
        }
    }
  else
    {
      _tao_elem = (PortableServer::Current::NoContext *)_tao_any.value ();
      return 1;
    }
}

static const CORBA::Long _oc_PortableServer_Current_NoContext[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  41, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f43), ACE_NTOHL (0x75727265), ACE_NTOHL (0x6e742f4e), ACE_NTOHL (0x6f436f6e), ACE_NTOHL (0x74657874), ACE_NTOHL (0x3a312e30), ACE_NTOHL (0xfdfdfd),  // repository ID = IDL:PortableServer/Current/NoContext:1.0
  10, ACE_NTOHL (0x4e6f436f), ACE_NTOHL (0x6e746578), ACE_NTOHL (0x7400fdfd),  // name = NoContext
  0, // member count
};
static CORBA::TypeCode _tc__tc_PortableServer_Current_NoContext (CORBA::tk_except, sizeof (_oc_PortableServer_Current_NoContext), (char *) &_oc_PortableServer_Current_NoContext, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::Current::_tc_NoContext = &_tc__tc_PortableServer_Current_NoContext;

PortableServer::POA_ptr  PortableServer::Current::get_POA (CORBA::Environment &env)
{
  env.exception (new CORBA::MARSHAL (CORBA::COMPLETED_NO));
  return PortableServer::POA::_nil ();
}

PortableServer::ObjectId * PortableServer::Current::get_object_id (CORBA::Environment &env)
{
  static const TAO_Param_Data PortableServer_Current_get_object_id_paramdata [] =
  {
    {PortableServer::_tc_ObjectId, PARAM_RETURN, sizeof (PortableServer::ObjectId)}
  };

  static const TAO_Call_Data PortableServer_Current_get_object_id_calldata =
  {"get_object_id", 1, 1, PortableServer_Current_get_object_id_paramdata, 0, 0};

  PortableServer::ObjectId *retval = 0;
  STUB_Object *istub;

  if (this->QueryInterface (IID_STUB_Object, (void **)&istub) != TAO_NOERROR)
    {
      env.exception (new CORBA::DATA_CONVERSION (CORBA::COMPLETED_NO));
      return 0;
    }
  this->Release (); // QueryInterface has bumped up our refcount
  istub->do_static_call (env, &PortableServer_Current_get_object_id_calldata, &retval);
  return retval;

}

CORBA::Boolean PortableServer::Current::_is_a (const CORBA::Char *value, CORBA::Environment &_tao_environment)
{
  if (
      (!ACE_OS::strcmp ((char *)value, "IDL:PortableServer/Current:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, "IDL:CORBA/Current:1.0")) ||
      (!ACE_OS::strcmp ((char *)value, CORBA::_tc_Object->id (_tao_environment))))
    return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, _tao_environment); // remote call
}

static const CORBA::Long _oc_PortableServer_Current[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  31, ACE_NTOHL (0x49444c3a), ACE_NTOHL (0x506f7274), ACE_NTOHL (0x61626c65), ACE_NTOHL (0x53657276), ACE_NTOHL (0x65722f43), ACE_NTOHL (0x75727265), ACE_NTOHL (0x6e743a31), ACE_NTOHL (0x2e3000fd),  // repository ID = IDL:PortableServer/Current:1.0
  8, ACE_NTOHL (0x43757272), ACE_NTOHL (0x656e7400),  // name = Current,
};
static CORBA::TypeCode _tc__tc_PortableServer_Current (CORBA::tk_objref, sizeof (_oc_PortableServer_Current), (char *) &_oc_PortableServer_Current, CORBA::B_FALSE);
CORBA::TypeCode_ptr PortableServer::_tc_Current = &_tc__tc_PortableServer_Current;

char *
PortableServer::ObjectId_to_string (const PortableServer::ObjectId &id)
{
  return TAO_POA::ObjectId_to_string (id);
}

CORBA::WChar *
PortableServer::ObjectId_to_wstring (const PortableServer::ObjectId &id)
{
  return TAO_POA::ObjectId_to_wstring (id);
}

PortableServer::ObjectId *
PortableServer::string_to_ObjectId (const char *id)
{
  return TAO_POA::string_to_ObjectId (id);
}

PortableServer::ObjectId *
PortableServer::wstring_to_ObjectId (const CORBA::WChar *id)
{
  return TAO_POA::wstring_to_ObjectId (id);
}
