// -*- C++ -*-
//
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 *       http://doc.ece.uci.edu/
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:1278

#include "Sender_exec.h"
#include "ciao/CIAO_common.h"
#include "ace/Guard_T.h"

namespace CIAO_Shapes_Sender_Impl
{
  //============================================================
  // Pulse generator
  //============================================================

  pulse_Generator::pulse_Generator (Sender_exec_i &callback)
    : active_ (0),
      pulse_callback_ (callback)
  {
    // initialize the reactor
    this->reactor (ACE_Reactor::instance ());
  }

  pulse_Generator::~pulse_Generator ()
  {
  }

  int
  pulse_Generator::open_h ()
  {
    // convert the task into a active object that runs in separate thread
    return this->activate ();
  }

  int
  pulse_Generator::close_h ()
  {
    this->reactor ()->end_reactor_event_loop ();

    // wait for all threads in the task to exit before it returns
    return this->wait ();
  }

  int
  pulse_Generator::start (CORBA::ULong hertz)
  {
    // return if not valid
    if (hertz == 0 || this->active_ != 0)
    {
      return -1;
    }

    // calculate the interval time
    long usec = 1000000 / hertz;

    std::cerr << "Starting pulse_generator with hertz of " << hertz << ", interval of "
              << usec << std::endl;

    if (this->reactor ()->schedule_timer (this,
                                          0,
                                          ACE_Time_Value (0, usec),
                                          ACE_Time_Value (0, usec)) == -1)
    {
      ACE_ERROR_RETURN ((LM_ERROR,
                         "Unable to setup Timer\n"),
                          -1);

    }

    this->active_ = 1;
    return 0;
  }

  int
  pulse_Generator::stop (void)
  {
    // return if not valid.
    printf ("Stopping ticker\n");
    if (this->active_ == 0)
    {
      return -1;
    }
    // cancle the timer
    this->reactor ()->cancel_timer (this);
    this->active_ = 0;
    return 0;
  }

  int
  pulse_Generator::active (void)
  {
    return this->active_;
  }

  int
  pulse_Generator::handle_close (ACE_HANDLE handle,
                                 ACE_Reactor_Mask close_mask)
  {
    ACE_DEBUG ((LM_DEBUG,
                ACE_TEXT ("[%x] handle = %d, close_mask = %d\n"),
                this,
                handle,
                close_mask));
    return 0;
  }

  int
  pulse_Generator::handle_timeout (const ACE_Time_Value &,
                                   const void *)
  {
    // Notify the subscribers
    this->pulse_callback_.tick ();
    return 0;
  }

  int
  pulse_Generator::svc (void)
  {
    // define the owner of the reactor thread
    this->reactor ()->owner (ACE_OS::thr_self ());

    // run event loop to wait for event, and then dispatch them to corresponding handlers
    this->reactor ()->run_reactor_event_loop ();

    return 0;
  }
  
  //============================================================
  // Component Executor Implementation Class: Sender_exec_i
  //============================================================
  
  Sender_exec_i::Sender_exec_i (void) 
    : rate_ (1),
      max_x_ (100),
      max_y_ (100),
      max_size_ (25)
  {
    this->ticker_ = new pulse_Generator (*this);
  }
  
  Sender_exec_i::~Sender_exec_i (void)
  {
  }
  
  // Supported operations and attributes.
  
  void 
  Sender_exec_i::tick ()
  {
    for (Shapes::iterator i = this->shapes_.begin ();
         i != this->shapes_.end ();
         ++i)
      {
        if (i->second->x_increasing)
          {
            ++i->second->x;
            i->second->x_increasing = i->second->x + 1 <= this->max_x_;
          }
        else
          {
            --i->second->x;
            i->second->x_increasing = i->second->x - 1 < 0;
          }
        if (i->second->y_increasing)
          {
            ++i->second->y;
            i->second->y_increasing = i->second->y + 1 <= this->max_y_;
          }
        else
          {
            --i->second->y;
            i->second->y_increasing = i->second->x - 1 < 0;
          }
        if (i->second->size_increasing)
          {
            ++i->second->size;
            i->second->size_increasing = i->second->size + 1 <= this->max_size_;
          }
        else
          {
            --i->second->size;
            i->second->size_increasing = i->second->size - 1 < 0;
          }
        try 
          {
            this->updater_->update (i->second);
            printf ("UPDATED Shape_info for <%s> %u:%u:%u\n",
                      i->first.c_str (),
                      i->second->x,
                      i->second->y,
                      i->second->size);
          }
        catch (CCM_DDS::NonExistent& )
          {
            printf ("Shape_info for <%s> not updated: <%s> didn't exist.\n",
                        i->first.c_str (), i->first.c_str ());
          }
        catch (CCM_DDS::InternalError& )
          {
            printf ("Internal Error while updating Shape_info for <%s>.\n",
                        i->first.c_str ());
          }
      }
  }

  void 
  Sender_exec_i::add_shape (const char * color)
  {
    printf ("Sender_exec_i::add_shape - Adding shape with color <%s>\n", color);

    ACE_GUARD_THROW_EX (TAO_SYNCH_MUTEX, _guard,
                        this->mutex_, CORBA::INTERNAL ());

    ::Shapes::Shape_Info *shape = new ::Shapes::Shape_Info;

    shape->x = ACE_OS::rand () % 100;
    shape->y = shape->x;
    shape->size = ACE_OS::rand () % 25;
    shape->color = color;

    this->shapes_[color] = shape;
    //Register shape with dds.
    printf ("REGISTER Shape_info for <%s> %u:%u:%u\n",
                  color,
                  shape->x,
                  shape->y,
                  shape->size);
    try 
      {
        this->updater_->create (*shape);
      }
    catch (CCM_DDS::AlreadyCreated& )
      {
        printf ("Shape_info for <%s> already created.\n",
                    color);
      }
    catch (CCM_DDS::InternalError& )
      {
        printf ("Internal Error while creating Shape_info for <%s>.\n",
                      color);
      }
  }

  void
  Sender_exec_i::start (void)
  {
    this->ticker_->start (this->rate_);
  }
  
  void
  Sender_exec_i::stop (void)
  {
    this->ticker_->stop ();
  }
  
  // Component attributes.
  
  ::CORBA::ULong
  Sender_exec_i::rate (void)
  {
    return this->rate_;
  }
  
  void
  Sender_exec_i::rate (
    ::CORBA::ULong rate)
  {
    this->rate_ = rate;
    printf ("SETTING rate sender : <%d>\n", rate);
  }
  
  
  ::CORBA::UShort
  Sender_exec_i::max_x (void)
  {
    return this->max_x_;
  }
  
  void
  Sender_exec_i::max_x (
    ::CORBA::UShort max_x)
  {
    this->max_x_ = max_x;
    printf ("SETTING max x : <%d>\n", max_x);
  }
  
  ::CORBA::UShort
  Sender_exec_i::max_y (void)
  {
    return this->max_y_;
  }
  
  void
  Sender_exec_i::max_y (
    ::CORBA::UShort max_y)
  {
    this->max_y_ = max_y;
    printf ("SETTING max y : <%d>\n", max_y);
  }
  
  ::CORBA::UShort
  Sender_exec_i::max_size (void)
  {
    return this->max_size_;
  }
  
  void
  Sender_exec_i::max_size (
    ::CORBA::UShort max_size)
  {
    this->max_size_ = max_size;
    printf ("SETTING max size : <%d>\n", max_size);
  }

  // Port operations.
  
  // Operations from Components::SessionComponent.
  
  void
  Sender_exec_i::set_session_context (
    ::Components::SessionContext_ptr ctx)
  {
    this->context_ =
      ::Shapes::CCM_Sender_Context::_narrow (ctx);
    
    if ( ::CORBA::is_nil (this->context_.in ()))
      {
        throw ::CORBA::INTERNAL ();
      }
  }
  
  void
  Sender_exec_i::configuration_complete (void)
  {
    /* Your code here. */
    this->updater_ = this->context_->get_connection_info_update_data ();
    this->ticker_->activate ();
  }
  
  void
  Sender_exec_i::ccm_activate (void)
  {
    this->start ();
    this->add_shape ("blue");
    this->add_shape ("pink");
    this->add_shape ("green");
    this->add_shape ("yellow");
  }
  
  void
  Sender_exec_i::ccm_passivate (void)
  {
    /* Your code here. */
  }
  
  void
  Sender_exec_i::ccm_remove (void)
  {
    /* Your code here. */
  }
  
  extern "C" SENDER_EXEC_Export ::Components::EnterpriseComponent_ptr
  create_Shape_Sender_Impl (void)
  {
    ::Components::EnterpriseComponent_ptr retval =
      ::Components::EnterpriseComponent::_nil ();
    
    ACE_NEW_NORETURN (
      retval,
      Sender_exec_i);
    
    return retval;
  }
}

