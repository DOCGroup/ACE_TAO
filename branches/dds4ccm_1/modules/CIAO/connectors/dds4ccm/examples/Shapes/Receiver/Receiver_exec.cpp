// -*- C++ -*-
//
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 *       http://doc.ece.uci.edu/
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:1278

#include "Receiver_exec.h"
#include "ciao/CIAO_common.h"

namespace CIAO_Shape_Receiver_Impl
{
  read_action_Generator::read_action_Generator (Receiver_exec_i &callback)
    : active_ (0),
      pulse_callback_ (callback)
  {
    // initialize the reactor
    this->reactor (ACE_Reactor::instance ());
  }

  read_action_Generator::~read_action_Generator ()
  {
  }

  int
  read_action_Generator::open_h ()
  {
    // convert the task into a active object that runs in separate thread
    return this->activate ();
  }

  int
  read_action_Generator::close_h ()
  {
    this->reactor ()->end_reactor_event_loop ();
    // wait for all threads in the task to exit before it returns
    return this->wait ();
  }

  int
  read_action_Generator::start (CORBA::ULong hertz)
  {
    // return if not valid
    if (hertz == 0 || this->active_ != 0)
    {
      return -1;
    }

    // calculate the interval time
    long usec = 1000 / hertz;

    std::cerr << "Starting read_action_generator with hertz of " << hertz << ", interval of "
              << usec << std::endl;

    if (this->reactor ()->schedule_timer (this,
                                          0,
                                          ACE_Time_Value(0),
                                          ACE_Time_Value(3)) == -1)
    {
      ACE_ERROR_RETURN ((LM_ERROR,
                         "Unable to setup Timer\n"),
                          -1);

    }

    this->active_ = 1;
    return 0;
  }

  int
  read_action_Generator::stop (void)
  {
    // return if not valid.
    if (this->active_ == 0)
    {
      return -1;
    }
    // cancle the timer
    this->reactor ()->cancel_timer (this);
    this->active_ = 0;
    return 0;
  }

  int
  read_action_Generator::active (void)
  {
    return this->active_;
  }

  int
  read_action_Generator::handle_close (ACE_HANDLE handle,
                                 ACE_Reactor_Mask close_mask)
  {
    ACE_DEBUG ((LM_DEBUG,
                ACE_TEXT ("[%x] handle = %d, close_mask = %d\n"),
                this,
                handle,
                close_mask));
    return 0;
  }

  int
  read_action_Generator::handle_timeout (const ACE_Time_Value &,
                                   const void *)
  {
    // Notify the subscribers
    printf ("START NOTIFY SUBSCRIBERS\n");
    this->pulse_callback_.read_one();
    this->pulse_callback_.read_all();
    return 0;
  }

  int
  read_action_Generator::svc (void)
  {
    // define the owner of the reactor thread
    this->reactor ()->owner (ACE_OS::thr_self ());

    // run event loop to wait for event, and then dispatch them to corresponding handlers
    this->reactor ()->run_reactor_event_loop ();

    return 0;
  }

  //============================================================
  // Facet Executor Implementation Class: Shape_Info_RawListener_exec_i
  //============================================================
  
  Shape_Info_RawListener_exec_i::Shape_Info_RawListener_exec_i (void)
  {
  }
  
  Shape_Info_RawListener_exec_i::~Shape_Info_RawListener_exec_i (void)
  {
  }
  
  // Operations from ::CCM_DDS::Shape_Info_RawListener
  
  void
  Shape_Info_RawListener_exec_i::on_data (
    const ::Shapes::Shape_Info & an_instance ,
    const ::CCM_DDS::ReadInfo & /* info */)
  {
    printf ("Shape_Info_RawListener: received shape_info for <%s> at %u:%u:%u\n",
            an_instance.color.in (),
            an_instance.x,
            an_instance.y,
            an_instance.size);
  }
  //============================================================
  // Component Executor Implementation Class: Receiver_exec_i
  //============================================================
  
  Receiver_exec_i::Receiver_exec_i (void)
    : rate_ (0)
  {
    this->ticker_ = new read_action_Generator (*this);
  }
  
  Receiver_exec_i::~Receiver_exec_i (void)
  {
  }
  
  // Supported operations and attributes.
   void
   Receiver_exec_i::read_one (void)
   {
    printf ("read_one\n");
    ::Shapes::Shape_Info  shape_info;
    shape_info.color = "IBM";
    ::CCM_DDS::ReadInfo readinfo;

    try
    {
        this->reader_->read_one (shape_info, readinfo );
        time_t tim = readinfo.timestamp.sec;
        tm* time = localtime(&tim);
        printf("Read_Info -> date = %02d:%02d:%02d.%d\n",
                            time->tm_hour,
                            time->tm_min,
                            time->tm_sec,
                            readinfo.timestamp.nanosec);
        printf ("Shape_Info_Read_One: received shape_info for <%s> at %u:%u:%u\n",
            shape_info.color.in (),
            shape_info.x,
            shape_info.y,
            shape_info.size);
    }
    catch(CCM_DDS::NonExistent& )
    {
      printf("Shape_Info_Read_One: no shape_info receieved\n");
    }

    printf("END OF READ_ONE\n");
  }

  void
  Receiver_exec_i::read_all (void)
  {
    printf ("read_all\n");

    ::Shapes::Shape_Info_Seq_var shape_infos;
    ::CCM_DDS::ReadInfoSeq_var readinfoseq;
    this->reader_->read_all(shape_infos.out(), readinfoseq.out());
    for(unsigned int i = 0; i < readinfoseq->length(); ++i)
      {
        time_t tim = readinfoseq[i].timestamp.sec;
        tm* time = localtime(&tim);
        printf("Read_All_Info -> UTC date = %02d:%02d:%02d.%d\n",
                            time->tm_hour,
                            time->tm_min,
                            time->tm_sec,
                            readinfoseq[i].timestamp.nanosec);
      }
    for(CORBA::ULong i = 0; i < (CORBA::ULong)shape_infos->length(); ++i)
      {
        printf ("Shape_Info_Read_All: Number %d : received shape_info for <%s> at %u:%u:%u\n",
            i,
            shape_infos[i].color.in (),
            shape_infos[i].x,
            shape_infos[i].y,
            shape_infos[i].size);
      }
  }

  // Component attributes.
  ::CORBA::ULong
  Receiver_exec_i::rate (void)
  {
    return this->rate_;
  }
  
  void
  Receiver_exec_i::rate (
    ::CORBA::ULong rate)
  {
    this->rate_ = rate;
    printf ("SETTING rate receiver : <%d>\n", rate);
  }

  // Port operations.
  
  ::CCM_DDS::CCM_Shape_Info_RawListener_ptr
  Receiver_exec_i::get_info_out_listener (void)
  {
    printf ("*************** out listener\n");
    return new Shape_Info_RawListener_exec_i ();
  }
  
  ::CCM_DDS::CCM_PortStatusListener_ptr
  Receiver_exec_i::get_info_out_status (void)
  {
    /* Your code here. */
    return ::CCM_DDS::CCM_PortStatusListener::_nil ();
  }
  
  // Operations from Components::SessionComponent.
  
  void
  Receiver_exec_i::set_session_context (
    ::Components::SessionContext_ptr ctx)
  {
    this->context_ =
      ::Shape::CCM_Receiver_Context::_narrow (ctx);
    
    if ( ::CORBA::is_nil (this->context_.in ()))
      {
        throw ::CORBA::INTERNAL ();
      }
  }
  
  void
  Receiver_exec_i::configuration_complete (void)
  {
    this->reader_ = this->context_->get_connection_info_out_data();
    this->ticker_->activate ();
  }
  
  void
  Receiver_exec_i::ccm_activate (void)
  {
    this->ticker_->start (this->rate_);
  }
  
  void
  Receiver_exec_i::ccm_passivate (void)
  {
    this->ticker_->stop ();
  }
  
  void
  Receiver_exec_i::ccm_remove (void)
  {
    this->ticker_->close_h ();
  }
  
  extern "C" RECEIVER_EXEC_Export ::Components::EnterpriseComponent_ptr
  create_Shape_Receiver_Impl (void)
  {
    ::Components::EnterpriseComponent_ptr retval =
      ::Components::EnterpriseComponent::_nil ();
    
    ACE_NEW_NORETURN (
      retval,
      Receiver_exec_i);
    
    return retval;
  }
}

