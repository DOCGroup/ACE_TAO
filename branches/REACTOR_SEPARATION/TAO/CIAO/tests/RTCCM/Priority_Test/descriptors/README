* Overview

Check out file "NOTE-win.txt" for general hints and procedures for
running various tests.  When using the regular (non-real-time)
ComponentServer, the following environment variable can be used to
help debugging and configuring the server.

1. CIAO_DEBUG_LEVEL=25

        can be used to set the -ORBDebugLevel in ComponentServer.

2. CIAO_FIFO_SCHED=1

        Make sure the component server are running with FIFO
   scheduling class.

Moreover, because of the lack of mechanism for configuring component
attributes, the following environment variable is used to control the
Controller component whether it should output all the latency samples.

        CIAO_DUMP_SAMPLE_HISTORY=1

* Important files:

  bench.conf: the svc.conf file used in all the benchmarking tests.

* Basic remote test measure the maximum sustainable rates a worker can
  service under certain load.  basic-remote.cad is the CCM assembly
  file that defines the test application.

  basic_remote.pl is a perl script that helps start deploy the test
  application.  There are many different ways of using the script.
  basic_remote.pl provides many command line flags to configure all
  these different deployment strategies, take a look at the source
  code.

* Real-time behavior tests: All these tests use the real-time
  behaviors defined in file "basic_rt.rtd", i.e., this file is
  referenced from all of the following cad files but the first
  non-rt one.  All of the following RT test applications employ
  3 controller of different rates invoking one or more Workers on the
  server side ComponentServer to serve the requests.

  rate-test.pl can help iterate thru the range of workloads we want to
  test.

  * no-rt-3rates.cad: No real-time behavior is enforced.  A single
    worker is used to serve requests from all the Controller.

  * rt-3rates-inc.cad: Each Controller has a dedicated Worker instance
    on the server-side ComponentServer to serve the requests.  Each
    Worker are associated to a dedicated threadpool and assigned a
    priority level that requests of the specific rate will be handle.
    This cad file apply the rate monotonic scheduling (RMS) strategy.

  * rt-3rates-dec.cad: Same as above but instead uses the reverse RMS
    strategy.

  * rt-3rates-laned-inc.cad: Same as above but instead of 3 dedicated
    threadpools, a laned threadpool is used.  All 3 Workers serving
    the different rates shared the threadpool.  This example uses the
    RMS strategy.

  * rt-3rates-laned-dec.cad: Same as above but uses the reverse-RMS
    strategy.
