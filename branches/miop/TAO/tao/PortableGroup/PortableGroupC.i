// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// *************************************************************
// Inline operations for class PortableGroup::TagGroupTaggedComponent_var
// *************************************************************

ACE_INLINE
PortableGroup::TagGroupTaggedComponent_var::TagGroupTaggedComponent_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
PortableGroup::TagGroupTaggedComponent_var::TagGroupTaggedComponent_var (TagGroupTaggedComponent *p)
  : ptr_ (p)
{}

ACE_INLINE
PortableGroup::TagGroupTaggedComponent_var::TagGroupTaggedComponent_var (const ::PortableGroup::TagGroupTaggedComponent_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::PortableGroup::TagGroupTaggedComponent (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::TagGroupTaggedComponent_var::~TagGroupTaggedComponent_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE PortableGroup::TagGroupTaggedComponent_var &
PortableGroup::TagGroupTaggedComponent_var::operator= (TagGroupTaggedComponent *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::PortableGroup::TagGroupTaggedComponent_var &
PortableGroup::TagGroupTaggedComponent_var::operator= (const ::PortableGroup::TagGroupTaggedComponent_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          TagGroupTaggedComponent *deep_copy =
            new TagGroupTaggedComponent (*p.ptr_);
          
          if (deep_copy != 0)
            {
              TagGroupTaggedComponent *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::PortableGroup::TagGroupTaggedComponent *
PortableGroup::TagGroupTaggedComponent_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::TagGroupTaggedComponent *
PortableGroup::TagGroupTaggedComponent_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
PortableGroup::TagGroupTaggedComponent_var::operator const ::PortableGroup::TagGroupTaggedComponent &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
PortableGroup::TagGroupTaggedComponent_var::operator ::PortableGroup::TagGroupTaggedComponent &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
PortableGroup::TagGroupTaggedComponent_var::operator ::PortableGroup::TagGroupTaggedComponent &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
PortableGroup::TagGroupTaggedComponent_var::operator ::PortableGroup::TagGroupTaggedComponent *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::PortableGroup::TagGroupTaggedComponent &
PortableGroup::TagGroupTaggedComponent_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::PortableGroup::TagGroupTaggedComponent &
PortableGroup::TagGroupTaggedComponent_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::PortableGroup::TagGroupTaggedComponent *&
PortableGroup::TagGroupTaggedComponent_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::TagGroupTaggedComponent *
PortableGroup::TagGroupTaggedComponent_var::_retn (void)
{
  ::PortableGroup::TagGroupTaggedComponent *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::PortableGroup::TagGroupTaggedComponent *
PortableGroup::TagGroupTaggedComponent_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class PortableGroup::TagGroupTaggedComponent_out
// *************************************************************

ACE_INLINE
PortableGroup::TagGroupTaggedComponent_out::TagGroupTaggedComponent_out (::PortableGroup::TagGroupTaggedComponent *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::TagGroupTaggedComponent_out::TagGroupTaggedComponent_out (TagGroupTaggedComponent_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::TagGroupTaggedComponent_out::TagGroupTaggedComponent_out (const ::PortableGroup::TagGroupTaggedComponent_out &p) // copy constructor
  : ptr_ (ACE_const_cast (TagGroupTaggedComponent_out&, p).ptr_)
{}

ACE_INLINE PortableGroup::TagGroupTaggedComponent_out &
PortableGroup::TagGroupTaggedComponent_out::operator= (const ::PortableGroup::TagGroupTaggedComponent_out &p)
{
  this->ptr_ = ACE_const_cast (TagGroupTaggedComponent_out&, p).ptr_;
  return *this;
}

ACE_INLINE PortableGroup::TagGroupTaggedComponent_out &
PortableGroup::TagGroupTaggedComponent_out::operator= (TagGroupTaggedComponent *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
PortableGroup::TagGroupTaggedComponent_out::operator ::PortableGroup::TagGroupTaggedComponent *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::TagGroupTaggedComponent *&
PortableGroup::TagGroupTaggedComponent_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::TagGroupTaggedComponent *
PortableGroup::TagGroupTaggedComponent_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (_PORTABLEGROUP_GROUPIIOPPROFILE_CI_)
#define _PORTABLEGROUP_GROUPIIOPPROFILE_CI_

// *************************************************************
// Inline operations for class PortableGroup::GroupIIOPProfile_var
// *************************************************************

ACE_INLINE
PortableGroup::GroupIIOPProfile_var::GroupIIOPProfile_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
PortableGroup::GroupIIOPProfile_var::GroupIIOPProfile_var (GroupIIOPProfile *p)
  : ptr_ (p)
{}

ACE_INLINE
PortableGroup::GroupIIOPProfile_var::GroupIIOPProfile_var (const ::PortableGroup::GroupIIOPProfile_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::PortableGroup::GroupIIOPProfile (*p.ptr_));
  else
    this->ptr_ = 0;
}

// fixed-size base types only
ACE_INLINE
PortableGroup::GroupIIOPProfile_var::GroupIIOPProfile_var (const ::PortableGroup::GroupIIOPProfile &p)
{
  ACE_NEW (this->ptr_, ::PortableGroup::GroupIIOPProfile (p));
}

ACE_INLINE
PortableGroup::GroupIIOPProfile_var::~GroupIIOPProfile_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE PortableGroup::GroupIIOPProfile_var &
PortableGroup::GroupIIOPProfile_var::operator= (GroupIIOPProfile *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::PortableGroup::GroupIIOPProfile_var &
PortableGroup::GroupIIOPProfile_var::operator= (const ::PortableGroup::GroupIIOPProfile_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          GroupIIOPProfile *deep_copy =
            new GroupIIOPProfile (*p.ptr_);
          
          if (deep_copy != 0)
            {
              GroupIIOPProfile *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

// fixed-size types only
ACE_INLINE ::PortableGroup::GroupIIOPProfile_var &
PortableGroup::GroupIIOPProfile_var::operator= (const ::PortableGroup::GroupIIOPProfile &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (this->ptr_, ::PortableGroup::GroupIIOPProfile (p), *this);
  }
  return *this;
}

ACE_INLINE const ::PortableGroup::GroupIIOPProfile *
PortableGroup::GroupIIOPProfile_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::GroupIIOPProfile *
PortableGroup::GroupIIOPProfile_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
PortableGroup::GroupIIOPProfile_var::operator const ::PortableGroup::GroupIIOPProfile &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
PortableGroup::GroupIIOPProfile_var::operator ::PortableGroup::GroupIIOPProfile &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
PortableGroup::GroupIIOPProfile_var::operator ::PortableGroup::GroupIIOPProfile &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Octet &
PortableGroup::GroupIIOPProfile_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const CORBA::Octet &
PortableGroup::GroupIIOPProfile_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::Octet &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::PortableGroup::GroupIIOPProfile &
PortableGroup::GroupIIOPProfile_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::PortableGroup::GroupIIOPProfile &
PortableGroup::GroupIIOPProfile_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::PortableGroup::GroupIIOPProfile *&
PortableGroup::GroupIIOPProfile_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::GroupIIOPProfile *
PortableGroup::GroupIIOPProfile_var::_retn (void)
{
  ::PortableGroup::GroupIIOPProfile *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::PortableGroup::GroupIIOPProfile *
PortableGroup::GroupIIOPProfile_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class PortableGroup::GroupIIOPProfile_out
// *************************************************************

ACE_INLINE
PortableGroup::GroupIIOPProfile_out::GroupIIOPProfile_out (GroupIIOPProfile *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::GroupIIOPProfile_out::GroupIIOPProfile_out (GroupIIOPProfile_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::GroupIIOPProfile_out::GroupIIOPProfile_out (const ::PortableGroup::GroupIIOPProfile_out &p) // copy constructor
  : ptr_ (ACE_const_cast (GroupIIOPProfile_out&, p).ptr_)
{}

ACE_INLINE ::PortableGroup::GroupIIOPProfile_out &
PortableGroup::GroupIIOPProfile_out::operator= (const ::PortableGroup::GroupIIOPProfile_out &p)
{
  this->ptr_ = ACE_const_cast (GroupIIOPProfile_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::PortableGroup::GroupIIOPProfile_out &
PortableGroup::GroupIIOPProfile_out::operator= (GroupIIOPProfile *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
PortableGroup::GroupIIOPProfile_out::operator ::PortableGroup::GroupIIOPProfile *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::GroupIIOPProfile *&
PortableGroup::GroupIIOPProfile_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::GroupIIOPProfile *
PortableGroup::GroupIIOPProfile_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Octet &
PortableGroup::GroupIIOPProfile_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class PortableGroup::Property_var
// *************************************************************

ACE_INLINE
PortableGroup::Property_var::Property_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
PortableGroup::Property_var::Property_var (Property *p)
  : ptr_ (p)
{}

ACE_INLINE
PortableGroup::Property_var::Property_var (const ::PortableGroup::Property_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::PortableGroup::Property (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::Property_var::~Property_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE PortableGroup::Property_var &
PortableGroup::Property_var::operator= (Property *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::PortableGroup::Property_var &
PortableGroup::Property_var::operator= (const ::PortableGroup::Property_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          Property *deep_copy =
            new Property (*p.ptr_);
          
          if (deep_copy != 0)
            {
              Property *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::PortableGroup::Property *
PortableGroup::Property_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Property *
PortableGroup::Property_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
PortableGroup::Property_var::operator const ::PortableGroup::Property &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
PortableGroup::Property_var::operator ::PortableGroup::Property &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
PortableGroup::Property_var::operator ::PortableGroup::Property &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
PortableGroup::Property_var::operator ::PortableGroup::Property *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::PortableGroup::Property &
PortableGroup::Property_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::PortableGroup::Property &
PortableGroup::Property_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::PortableGroup::Property *&
PortableGroup::Property_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Property *
PortableGroup::Property_var::_retn (void)
{
  ::PortableGroup::Property *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::PortableGroup::Property *
PortableGroup::Property_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class PortableGroup::Property_out
// *************************************************************

ACE_INLINE
PortableGroup::Property_out::Property_out (::PortableGroup::Property *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::Property_out::Property_out (Property_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::Property_out::Property_out (const ::PortableGroup::Property_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Property_out&, p).ptr_)
{}

ACE_INLINE PortableGroup::Property_out &
PortableGroup::Property_out::operator= (const ::PortableGroup::Property_out &p)
{
  this->ptr_ = ACE_const_cast (Property_out&, p).ptr_;
  return *this;
}

ACE_INLINE PortableGroup::Property_out &
PortableGroup::Property_out::operator= (Property *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
PortableGroup::Property_out::operator ::PortableGroup::Property *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Property *&
PortableGroup::Property_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Property *
PortableGroup::Property_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_PORTABLEGROUP_PROPERTIES_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_PORTABLEGROUP_PROPERTIES_CI_

  // = Static operations.
  ACE_INLINE PortableGroup::Property *
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    PortableGroup::Property *retval = 0;
    ACE_NEW_RETURN (retval, PortableGroup::Property[size], 0);
    return retval;
  }
  
  ACE_INLINE void PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::freebuf (PortableGroup::Property *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::_TAO_Unbounded_Sequence_PortableGroup_Properties (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::_TAO_Unbounded_Sequence_PortableGroup_Properties (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_PortableGroup_Properties::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::_TAO_Unbounded_Sequence_PortableGroup_Properties (CORBA::ULong maximum,
    CORBA::ULong length,
    PortableGroup::Property *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::_TAO_Unbounded_Sequence_PortableGroup_Properties (const _TAO_Unbounded_Sequence_PortableGroup_Properties &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      PortableGroup::Property *tmp1 = _TAO_Unbounded_Sequence_PortableGroup_Properties::allocbuf (this->maximum_);
      PortableGroup::Property * const tmp2 = ACE_reinterpret_cast (PortableGroup::Property * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties &
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::operator= (const _TAO_Unbounded_Sequence_PortableGroup_Properties &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        PortableGroup::Property *tmp = ACE_reinterpret_cast (PortableGroup::Property *, this->buffer_);
        _TAO_Unbounded_Sequence_PortableGroup_Properties::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_PortableGroup_Properties::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_PortableGroup_Properties::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    PortableGroup::Property *tmp1 = ACE_reinterpret_cast (PortableGroup::Property *, this->buffer_);
    PortableGroup::Property * const tmp2 = ACE_reinterpret_cast (PortableGroup::Property * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE PortableGroup::Property &
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    PortableGroup::Property* tmp = ACE_reinterpret_cast(PortableGroup::Property*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const PortableGroup::Property &
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    PortableGroup::Property * const tmp = ACE_reinterpret_cast (PortableGroup::Property* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE PortableGroup::Property *
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::get_buffer (CORBA::Boolean orphan)
  {
    PortableGroup::Property *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_PortableGroup_Properties::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (PortableGroup::Property*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(PortableGroup::Property*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const PortableGroup::Property *
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const PortableGroup::Property * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Properties::replace (CORBA::ULong max,
  CORBA::ULong length,
  PortableGroup::Property *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      PortableGroup::Property *tmp = ACE_reinterpret_cast(PortableGroup::Property*,this->buffer_);
      _TAO_Unbounded_Sequence_PortableGroup_Properties::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_PORTABLEGROUP_PROPERTIES_CI_)
#define _PORTABLEGROUP_PROPERTIES_CI_

// *************************************************************
// Inline operations for class PortableGroup::Properties_var
// *************************************************************

ACE_INLINE
PortableGroup::Properties_var::Properties_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
PortableGroup::Properties_var::Properties_var (Properties *p)
  : ptr_ (p)
{}

ACE_INLINE
PortableGroup::Properties_var::Properties_var (const ::PortableGroup::Properties_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::PortableGroup::Properties (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::Properties_var::~Properties_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE PortableGroup::Properties_var &
PortableGroup::Properties_var::operator= (Properties *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::PortableGroup::Properties_var &
PortableGroup::Properties_var::operator= (const ::PortableGroup::Properties_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          Properties *deep_copy =
            new Properties (*p.ptr_);
          
          if (deep_copy != 0)
            {
              Properties *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::PortableGroup::Properties *
PortableGroup::Properties_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Properties *
PortableGroup::Properties_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
PortableGroup::Properties_var::operator const ::PortableGroup::Properties &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
PortableGroup::Properties_var::operator ::PortableGroup::Properties &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
PortableGroup::Properties_var::operator ::PortableGroup::Properties &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
PortableGroup::Properties_var::operator ::PortableGroup::Properties *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE PortableGroup::Property &
PortableGroup::Properties_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const PortableGroup::Property &
PortableGroup::Properties_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const PortableGroup::Property &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::PortableGroup::Properties &
PortableGroup::Properties_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::PortableGroup::Properties &
PortableGroup::Properties_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::PortableGroup::Properties *&
PortableGroup::Properties_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Properties *
PortableGroup::Properties_var::_retn (void)
{
  ::PortableGroup::Properties *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::PortableGroup::Properties *
PortableGroup::Properties_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class PortableGroup::Properties_out
// *************************************************************

ACE_INLINE
PortableGroup::Properties_out::Properties_out (Properties *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::Properties_out::Properties_out (Properties_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::Properties_out::Properties_out (const ::PortableGroup::Properties_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Properties_out&, p).ptr_)
{}

ACE_INLINE ::PortableGroup::Properties_out &
PortableGroup::Properties_out::operator= (const ::PortableGroup::Properties_out &p)
{
  this->ptr_ = ACE_const_cast (Properties_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::PortableGroup::Properties_out &
PortableGroup::Properties_out::operator= (Properties *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
PortableGroup::Properties_out::operator ::PortableGroup::Properties *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Properties *&
PortableGroup::Properties_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Properties *
PortableGroup::Properties_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE PortableGroup::Property &
PortableGroup::Properties_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_PORTABLEGROUP_LOCATIONS_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_PORTABLEGROUP_LOCATIONS_CI_

  // = Static operations.
  ACE_INLINE PortableGroup::Location *
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    PortableGroup::Location *retval = 0;
    ACE_NEW_RETURN (retval, PortableGroup::Location[size], 0);
    return retval;
  }
  
  ACE_INLINE void PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::freebuf (PortableGroup::Location *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::_TAO_Unbounded_Sequence_PortableGroup_Locations (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::_TAO_Unbounded_Sequence_PortableGroup_Locations (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_PortableGroup_Locations::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::_TAO_Unbounded_Sequence_PortableGroup_Locations (CORBA::ULong maximum,
    CORBA::ULong length,
    PortableGroup::Location *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::_TAO_Unbounded_Sequence_PortableGroup_Locations (const _TAO_Unbounded_Sequence_PortableGroup_Locations &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      PortableGroup::Location *tmp1 = _TAO_Unbounded_Sequence_PortableGroup_Locations::allocbuf (this->maximum_);
      PortableGroup::Location * const tmp2 = ACE_reinterpret_cast (PortableGroup::Location * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations &
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::operator= (const _TAO_Unbounded_Sequence_PortableGroup_Locations &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        PortableGroup::Location *tmp = ACE_reinterpret_cast (PortableGroup::Location *, this->buffer_);
        _TAO_Unbounded_Sequence_PortableGroup_Locations::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_PortableGroup_Locations::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_PortableGroup_Locations::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    PortableGroup::Location *tmp1 = ACE_reinterpret_cast (PortableGroup::Location *, this->buffer_);
    PortableGroup::Location * const tmp2 = ACE_reinterpret_cast (PortableGroup::Location * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE PortableGroup::Location &
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    PortableGroup::Location* tmp = ACE_reinterpret_cast(PortableGroup::Location*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const PortableGroup::Location &
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    PortableGroup::Location * const tmp = ACE_reinterpret_cast (PortableGroup::Location* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE PortableGroup::Location *
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::get_buffer (CORBA::Boolean orphan)
  {
    PortableGroup::Location *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_PortableGroup_Locations::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (PortableGroup::Location*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(PortableGroup::Location*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const PortableGroup::Location *
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const PortableGroup::Location * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_Locations::replace (CORBA::ULong max,
  CORBA::ULong length,
  PortableGroup::Location *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      PortableGroup::Location *tmp = ACE_reinterpret_cast(PortableGroup::Location*,this->buffer_);
      _TAO_Unbounded_Sequence_PortableGroup_Locations::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_PORTABLEGROUP_LOCATIONS_CI_)
#define _PORTABLEGROUP_LOCATIONS_CI_

// *************************************************************
// Inline operations for class PortableGroup::Locations_var
// *************************************************************

ACE_INLINE
PortableGroup::Locations_var::Locations_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
PortableGroup::Locations_var::Locations_var (Locations *p)
  : ptr_ (p)
{}

ACE_INLINE
PortableGroup::Locations_var::Locations_var (const ::PortableGroup::Locations_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::PortableGroup::Locations (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::Locations_var::~Locations_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE PortableGroup::Locations_var &
PortableGroup::Locations_var::operator= (Locations *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::PortableGroup::Locations_var &
PortableGroup::Locations_var::operator= (const ::PortableGroup::Locations_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          Locations *deep_copy =
            new Locations (*p.ptr_);
          
          if (deep_copy != 0)
            {
              Locations *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::PortableGroup::Locations *
PortableGroup::Locations_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Locations *
PortableGroup::Locations_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
PortableGroup::Locations_var::operator const ::PortableGroup::Locations &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
PortableGroup::Locations_var::operator ::PortableGroup::Locations &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
PortableGroup::Locations_var::operator ::PortableGroup::Locations &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
PortableGroup::Locations_var::operator ::PortableGroup::Locations *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE PortableGroup::Location &
PortableGroup::Locations_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const PortableGroup::Location &
PortableGroup::Locations_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const PortableGroup::Location &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::PortableGroup::Locations &
PortableGroup::Locations_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::PortableGroup::Locations &
PortableGroup::Locations_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::PortableGroup::Locations *&
PortableGroup::Locations_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Locations *
PortableGroup::Locations_var::_retn (void)
{
  ::PortableGroup::Locations *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::PortableGroup::Locations *
PortableGroup::Locations_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class PortableGroup::Locations_out
// *************************************************************

ACE_INLINE
PortableGroup::Locations_out::Locations_out (Locations *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::Locations_out::Locations_out (Locations_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::Locations_out::Locations_out (const ::PortableGroup::Locations_out &p) // copy constructor
  : ptr_ (ACE_const_cast (Locations_out&, p).ptr_)
{}

ACE_INLINE ::PortableGroup::Locations_out &
PortableGroup::Locations_out::operator= (const ::PortableGroup::Locations_out &p)
{
  this->ptr_ = ACE_const_cast (Locations_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::PortableGroup::Locations_out &
PortableGroup::Locations_out::operator= (Locations *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
PortableGroup::Locations_out::operator ::PortableGroup::Locations *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Locations *&
PortableGroup::Locations_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::Locations *
PortableGroup::Locations_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE PortableGroup::Location &
PortableGroup::Locations_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for class PortableGroup::FactoryInfo_var
// *************************************************************

ACE_INLINE
PortableGroup::FactoryInfo_var::FactoryInfo_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
PortableGroup::FactoryInfo_var::FactoryInfo_var (FactoryInfo *p)
  : ptr_ (p)
{}

ACE_INLINE
PortableGroup::FactoryInfo_var::FactoryInfo_var (const ::PortableGroup::FactoryInfo_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::PortableGroup::FactoryInfo (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::FactoryInfo_var::~FactoryInfo_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE PortableGroup::FactoryInfo_var &
PortableGroup::FactoryInfo_var::operator= (FactoryInfo *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::PortableGroup::FactoryInfo_var &
PortableGroup::FactoryInfo_var::operator= (const ::PortableGroup::FactoryInfo_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          FactoryInfo *deep_copy =
            new FactoryInfo (*p.ptr_);
          
          if (deep_copy != 0)
            {
              FactoryInfo *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::PortableGroup::FactoryInfo *
PortableGroup::FactoryInfo_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::FactoryInfo *
PortableGroup::FactoryInfo_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
PortableGroup::FactoryInfo_var::operator const ::PortableGroup::FactoryInfo &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
PortableGroup::FactoryInfo_var::operator ::PortableGroup::FactoryInfo &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
PortableGroup::FactoryInfo_var::operator ::PortableGroup::FactoryInfo &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
PortableGroup::FactoryInfo_var::operator ::PortableGroup::FactoryInfo *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::PortableGroup::FactoryInfo &
PortableGroup::FactoryInfo_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::PortableGroup::FactoryInfo &
PortableGroup::FactoryInfo_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::PortableGroup::FactoryInfo *&
PortableGroup::FactoryInfo_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::FactoryInfo *
PortableGroup::FactoryInfo_var::_retn (void)
{
  ::PortableGroup::FactoryInfo *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::PortableGroup::FactoryInfo *
PortableGroup::FactoryInfo_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class PortableGroup::FactoryInfo_out
// *************************************************************

ACE_INLINE
PortableGroup::FactoryInfo_out::FactoryInfo_out (::PortableGroup::FactoryInfo *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::FactoryInfo_out::FactoryInfo_out (FactoryInfo_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::FactoryInfo_out::FactoryInfo_out (const ::PortableGroup::FactoryInfo_out &p) // copy constructor
  : ptr_ (ACE_const_cast (FactoryInfo_out&, p).ptr_)
{}

ACE_INLINE PortableGroup::FactoryInfo_out &
PortableGroup::FactoryInfo_out::operator= (const ::PortableGroup::FactoryInfo_out &p)
{
  this->ptr_ = ACE_const_cast (FactoryInfo_out&, p).ptr_;
  return *this;
}

ACE_INLINE PortableGroup::FactoryInfo_out &
PortableGroup::FactoryInfo_out::operator= (FactoryInfo *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
PortableGroup::FactoryInfo_out::operator ::PortableGroup::FactoryInfo *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::FactoryInfo *&
PortableGroup::FactoryInfo_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::FactoryInfo *
PortableGroup::FactoryInfo_out::operator-> (void)
{
  return this->ptr_;
}


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  
#if !defined (__TAO_UNBOUNDED_SEQUENCE_PORTABLEGROUP_FACTORYINFOS_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_PORTABLEGROUP_FACTORYINFOS_CI_

  // = Static operations.
  ACE_INLINE PortableGroup::FactoryInfo *
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::allocbuf (CORBA::ULong size)
  // Allocate storage for the sequence.
  {
    PortableGroup::FactoryInfo *retval = 0;
    ACE_NEW_RETURN (retval, PortableGroup::FactoryInfo[size], 0);
    return retval;
  }
  
  ACE_INLINE void PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::freebuf (PortableGroup::FactoryInfo *buffer)
  // Free the sequence.
  {
    delete [] buffer;
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos (void) // Default constructor.
  {
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos (CORBA::ULong maximum) // Constructor using a maximum length value.
    : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::allocbuf (maximum))
  {
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos (CORBA::ULong maximum,
    CORBA::ULong length,
    PortableGroup::FactoryInfo *data,
    CORBA::Boolean release)
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
  {
  }
  
  ACE_INLINE
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos (const _TAO_Unbounded_Sequence_PortableGroup_FactoryInfos &rhs)
  // Copy constructor.
    : TAO_Unbounded_Base_Sequence (rhs)
  {
    if (rhs.buffer_ != 0)
    {
      PortableGroup::FactoryInfo *tmp1 = _TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::allocbuf (this->maximum_);
      PortableGroup::FactoryInfo * const tmp2 = ACE_reinterpret_cast (PortableGroup::FactoryInfo * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        tmp1[i] = tmp2[i];
      
      this->buffer_ = tmp1;
    }
    else
    {
      this->buffer_ = 0;
    }
  }
  
  ACE_INLINE PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos &
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::operator= (const _TAO_Unbounded_Sequence_PortableGroup_FactoryInfos &rhs)
  // Assignment operator.
  {
    if (this == &rhs)
      return *this;
    
    if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
      {
        // free the old buffer
        PortableGroup::FactoryInfo *tmp = ACE_reinterpret_cast (PortableGroup::FactoryInfo *, this->buffer_);
        _TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::freebuf (tmp);
        this->buffer_ = _TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::allocbuf (rhs.maximum_);
      }
    }
    else
      this->buffer_ = _TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::allocbuf (rhs.maximum_);
    
    TAO_Unbounded_Base_Sequence::operator= (rhs);
    
    PortableGroup::FactoryInfo *tmp1 = ACE_reinterpret_cast (PortableGroup::FactoryInfo *, this->buffer_);
    PortableGroup::FactoryInfo * const tmp2 = ACE_reinterpret_cast (PortableGroup::FactoryInfo * ACE_CAST_CONST, rhs.buffer_);
    
    for (CORBA::ULong i = 0; i < this->length_; ++i)
      tmp1[i] = tmp2[i];
    
    return *this;
  }
  
  // = Accessors.
  ACE_INLINE PortableGroup::FactoryInfo &
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::operator[] (CORBA::ULong i)
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    PortableGroup::FactoryInfo* tmp = ACE_reinterpret_cast(PortableGroup::FactoryInfo*,this->buffer_);
    return tmp[i];
  }
  
  ACE_INLINE const PortableGroup::FactoryInfo &
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::operator[] (CORBA::ULong i) const
  // operator []
  {
    ACE_ASSERT (i < this->maximum_);
    PortableGroup::FactoryInfo * const tmp = ACE_reinterpret_cast (PortableGroup::FactoryInfo* ACE_CAST_CONST, this->buffer_);
    return tmp[i];
  }
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  
  ACE_INLINE PortableGroup::FactoryInfo *
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::get_buffer (CORBA::Boolean orphan)
  {
    PortableGroup::FactoryInfo *result = 0;
    if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
      {
        result = _TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::allocbuf (this->length_);
        this->buffer_ = result;
        this->release_ = 1;
      }
      else
      {
        result = ACE_reinterpret_cast (PortableGroup::FactoryInfo*, this->buffer_);
      }
    }
    else // if (orphan == 1)
    {
      if (this->release_ != 0)
      {
        // We set the state back to default and relinquish
        // ownership.
        result = ACE_reinterpret_cast(PortableGroup::FactoryInfo*,this->buffer_);
        this->maximum_ = 0;
        this->length_ = 0;
        this->buffer_ = 0;
        this->release_ = 0;
      }
    }
    return result;
  }
  
  ACE_INLINE const PortableGroup::FactoryInfo *
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::get_buffer (void) const
  {
    return ACE_reinterpret_cast(const PortableGroup::FactoryInfo * ACE_CAST_CONST, this->buffer_);
  }
  
  ACE_INLINE void
  PortableGroup::_TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::replace (CORBA::ULong max,
  CORBA::ULong length,
  PortableGroup::FactoryInfo *data,
  CORBA::Boolean release)
  {
    this->maximum_ = max;
    this->length_ = length;
    if (this->buffer_ && this->release_ == 1)
    {
      PortableGroup::FactoryInfo *tmp = ACE_reinterpret_cast(PortableGroup::FactoryInfo*,this->buffer_);
      _TAO_Unbounded_Sequence_PortableGroup_FactoryInfos::freebuf (tmp);
    }
    this->buffer_ = data;
    this->release_ = release;
  }
  
#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_PORTABLEGROUP_FACTORYINFOS_CI_)
#define _PORTABLEGROUP_FACTORYINFOS_CI_

// *************************************************************
// Inline operations for class PortableGroup::FactoryInfos_var
// *************************************************************

ACE_INLINE
PortableGroup::FactoryInfos_var::FactoryInfos_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
PortableGroup::FactoryInfos_var::FactoryInfos_var (FactoryInfos *p)
  : ptr_ (p)
{}

ACE_INLINE
PortableGroup::FactoryInfos_var::FactoryInfos_var (const ::PortableGroup::FactoryInfos_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::PortableGroup::FactoryInfos (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::FactoryInfos_var::~FactoryInfos_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE PortableGroup::FactoryInfos_var &
PortableGroup::FactoryInfos_var::operator= (FactoryInfos *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::PortableGroup::FactoryInfos_var &
PortableGroup::FactoryInfos_var::operator= (const ::PortableGroup::FactoryInfos_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          FactoryInfos *deep_copy =
            new FactoryInfos (*p.ptr_);
          
          if (deep_copy != 0)
            {
              FactoryInfos *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::PortableGroup::FactoryInfos *
PortableGroup::FactoryInfos_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::FactoryInfos *
PortableGroup::FactoryInfos_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
PortableGroup::FactoryInfos_var::operator const ::PortableGroup::FactoryInfos &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
PortableGroup::FactoryInfos_var::operator ::PortableGroup::FactoryInfos &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
PortableGroup::FactoryInfos_var::operator ::PortableGroup::FactoryInfos &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
PortableGroup::FactoryInfos_var::operator ::PortableGroup::FactoryInfos *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE PortableGroup::FactoryInfo &
PortableGroup::FactoryInfos_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const PortableGroup::FactoryInfo &
PortableGroup::FactoryInfos_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const PortableGroup::FactoryInfo &, this->ptr_->operator[] (index));
}

ACE_INLINE const ::PortableGroup::FactoryInfos &
PortableGroup::FactoryInfos_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::PortableGroup::FactoryInfos &
PortableGroup::FactoryInfos_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::PortableGroup::FactoryInfos *&
PortableGroup::FactoryInfos_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::FactoryInfos *
PortableGroup::FactoryInfos_var::_retn (void)
{
  ::PortableGroup::FactoryInfos *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::PortableGroup::FactoryInfos *
PortableGroup::FactoryInfos_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class PortableGroup::FactoryInfos_out
// *************************************************************

ACE_INLINE
PortableGroup::FactoryInfos_out::FactoryInfos_out (FactoryInfos *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::FactoryInfos_out::FactoryInfos_out (FactoryInfos_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
PortableGroup::FactoryInfos_out::FactoryInfos_out (const ::PortableGroup::FactoryInfos_out &p) // copy constructor
  : ptr_ (ACE_const_cast (FactoryInfos_out&, p).ptr_)
{}

ACE_INLINE ::PortableGroup::FactoryInfos_out &
PortableGroup::FactoryInfos_out::operator= (const ::PortableGroup::FactoryInfos_out &p)
{
  this->ptr_ = ACE_const_cast (FactoryInfos_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::PortableGroup::FactoryInfos_out &
PortableGroup::FactoryInfos_out::operator= (FactoryInfos *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
PortableGroup::FactoryInfos_out::operator ::PortableGroup::FactoryInfos *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::FactoryInfos *&
PortableGroup::FactoryInfos_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::PortableGroup::FactoryInfos *
PortableGroup::FactoryInfos_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE PortableGroup::FactoryInfo &
PortableGroup::FactoryInfos_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */

// *************************************************************
// Inline operations for exception PortableGroup::InterfaceNotFound
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::ObjectGroupNotFound
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::MemberNotFound
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::ObjectNotFound
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::MemberAlreadyPresent
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::BadReplicationStyle
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::ObjectNotCreated
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::ObjectNotAdded
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::UnsupportedProperty
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::InvalidProperty
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::NoFactory
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::InvalidCriteria
// *************************************************************

// *************************************************************
// Inline operations for exception PortableGroup::CannotMeetCriteria
// *************************************************************


#if !defined (_PORTABLEGROUP_PROPERTYMANAGER___CI_)
#define _PORTABLEGROUP_PROPERTYMANAGER___CI_


#endif /* end #if !defined */


#if !defined (_PORTABLEGROUP_OBJECTGROUPMANAGER___CI_)
#define _PORTABLEGROUP_OBJECTGROUPMANAGER___CI_


#endif /* end #if !defined */


#if !defined (_PORTABLEGROUP_GENERICFACTORY___CI_)
#define _PORTABLEGROUP_GENERICFACTORY___CI_


#endif /* end #if !defined */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::TagGroupTaggedComponent &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.component_version) &&
    (strm << _tao_aggregate.group_domain_id.in ()) &&
    (strm << _tao_aggregate.object_group_id) &&
    (strm << _tao_aggregate.object_group_ref_version)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, PortableGroup::TagGroupTaggedComponent &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.component_version) &&
    (strm >> _tao_aggregate.group_domain_id.out ()) &&
    (strm >> _tao_aggregate.object_group_id) &&
    (strm >> _tao_aggregate.object_group_ref_version)
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_PortableGroup_GroupIIOPProfile_I_
#define _TAO_CDR_OP_PortableGroup_GroupIIOPProfile_I_

CORBA::Boolean TAO_PortableGroup_Export operator<< (
    TAO_OutputCDR &,
    const PortableGroup::GroupIIOPProfile &
  );
CORBA::Boolean TAO_PortableGroup_Export operator>> (
    TAO_InputCDR &,
    PortableGroup::GroupIIOPProfile &
  );

#endif /* _TAO_CDR_OP_PortableGroup_GroupIIOPProfile_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::Property &_tao_aggregate)
{
  if (
    (strm << _tao_aggregate.nam) &&
    (strm << _tao_aggregate.val)
  )
    return 1;
  else
    return 0;
  
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, PortableGroup::Property &_tao_aggregate)
{
  if (
    (strm >> _tao_aggregate.nam) &&
    (strm >> _tao_aggregate.val)
  )
    return 1;
  else
    return 0;
  
}


#if !defined _TAO_CDR_OP_PortableGroup_Properties_I_
#define _TAO_CDR_OP_PortableGroup_Properties_I_

CORBA::Boolean TAO_PortableGroup_Export operator<< (
    TAO_OutputCDR &,
    const PortableGroup::Properties &
  );
CORBA::Boolean TAO_PortableGroup_Export operator>> (
    TAO_InputCDR &,
    PortableGroup::Properties &
  );

#endif /* _TAO_CDR_OP_PortableGroup_Properties_I_ */


#if !defined _TAO_CDR_OP_PortableGroup_Locations_I_
#define _TAO_CDR_OP_PortableGroup_Locations_I_

CORBA::Boolean TAO_PortableGroup_Export operator<< (
    TAO_OutputCDR &,
    const PortableGroup::Locations &
  );
CORBA::Boolean TAO_PortableGroup_Export operator>> (
    TAO_InputCDR &,
    PortableGroup::Locations &
  );

#endif /* _TAO_CDR_OP_PortableGroup_Locations_I_ */

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::InterfaceNotFound &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,PortableGroup::InterfaceNotFound&)
{
  return 1;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::ObjectGroupNotFound &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,PortableGroup::ObjectGroupNotFound&)
{
  return 1;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::MemberNotFound &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,PortableGroup::MemberNotFound&)
{
  return 1;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::ObjectNotFound &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,PortableGroup::ObjectNotFound&)
{
  return 1;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::MemberAlreadyPresent &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,PortableGroup::MemberAlreadyPresent&)
{
  return 1;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::BadReplicationStyle &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,PortableGroup::BadReplicationStyle&)
{
  return 1;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::ObjectNotCreated &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,PortableGroup::ObjectNotCreated&)
{
  return 1;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::ObjectNotAdded &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &,PortableGroup::ObjectNotAdded&)
{
  return 1;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::UnsupportedProperty &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
  {
    // now marshal the members (if any)
    if (
      (strm << _tao_aggregate.nam)
    )
      return 1;
    else
      return 0;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,PortableGroup::UnsupportedProperty &_tao_aggregate)
{
  // now marshal the members
  if (
    (strm >> _tao_aggregate.nam)
  )
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::InvalidProperty &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
  {
    // now marshal the members (if any)
    if (
      (strm << _tao_aggregate.nam) &&
      (strm << _tao_aggregate.val)
    )
      return 1;
    else
      return 0;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,PortableGroup::InvalidProperty &_tao_aggregate)
{
  // now marshal the members
  if (
    (strm >> _tao_aggregate.nam) &&
    (strm >> _tao_aggregate.val)
  )
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::NoFactory &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
  {
    // now marshal the members (if any)
    if (
      (strm << _tao_aggregate.the_location) &&
      (strm << _tao_aggregate.type_id.in ())
    )
      return 1;
    else
      return 0;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,PortableGroup::NoFactory &_tao_aggregate)
{
  // now marshal the members
  if (
    (strm >> _tao_aggregate.the_location) &&
    (strm >> _tao_aggregate.type_id.out ())
  )
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::InvalidCriteria &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
  {
    // now marshal the members (if any)
    if (
      (strm << _tao_aggregate.invalid_criteria)
    )
      return 1;
    else
      return 0;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,PortableGroup::InvalidCriteria &_tao_aggregate)
{
  // now marshal the members
  if (
    (strm >> _tao_aggregate.invalid_criteria)
  )
    return 1;
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const PortableGroup::CannotMeetCriteria &_tao_aggregate)
{
  // first marshal the repository ID
  if (strm << _tao_aggregate._id ())
  {
    // now marshal the members (if any)
    if (
      (strm << _tao_aggregate.unmet_criteria)
    )
      return 1;
    else
      return 0;
  }
  else
    return 0;
}

ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,PortableGroup::CannotMeetCriteria &_tao_aggregate)
{
  // now marshal the members
  if (
    (strm >> _tao_aggregate.unmet_criteria)
  )
    return 1;
  else
    return 0;
}

