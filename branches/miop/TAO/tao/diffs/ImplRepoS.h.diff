--- orig/ImplRepoS.h	Mon Apr 30 20:24:45 2001
+++ ImplRepoS.h	Mon Apr 30 20:27:24 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -35,6 +35,8 @@
 #include "tao/PortableServer/Collocated_Object.h"
 #include "tao/PortableServer/ThruPOA_Object_Proxy_Impl.h"
 #include "tao/PortableServer/Direct_Object_Proxy_Impl.h"
+#include "tao/PortableServer/ServerRequestInfo.h"
+
 #if defined(_MSC_VER)
 #if (_MSC_VER >= 1200)
 #pragma warning(push)
@@ -146,6 +148,107 @@
       );
 
 
+#if (TAO_HAS_INTERCEPTORS == 1)
+    // Generation of interceptors related RequestInfo classes per operation.
+    // This needed to be able to store the arguments, exceptions, contexts
+    // and build the lists dynamically on demand so that unnecessary time overhead
+    // of building these lists when they arent used is avoided.
+    class TAO_ServerRequestInfo_ImplementationRepository_ServerObject_ping : public TAO_ServerRequestInfo
+    {
+    public:
+      friend class POA_ImplementationRepository::ServerObject;
+      TAO_ServerRequestInfo_ImplementationRepository_ServerObject_ping (
+        TAO_ServerRequest &_tao_server_request,
+        POA_ImplementationRepository::ServerObject *tao_impl,
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      );
+
+      virtual Dynamic::ParameterList * arguments (
+          CORBA::Environment &ACE_TRY_ENV =
+            TAO_default_environment ()
+        )
+        ACE_THROW_SPEC ((CORBA::SystemException));
+
+      virtual Dynamic::ExceptionList * exceptions (
+          CORBA::Environment &ACE_TRY_ENV =
+            TAO_default_environment ()
+        )
+        ACE_THROW_SPEC ((CORBA::SystemException));
+
+      virtual CORBA::Any * result (
+          CORBA::Environment &ACE_TRY_ENV =
+            TAO_default_environment ()
+        )
+        ACE_THROW_SPEC ((CORBA::SystemException));
+
+      virtual char * target_most_derived_interface (
+          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+        ACE_THROW_SPEC ((CORBA::SystemException));
+
+      virtual CORBA::Boolean target_is_a (
+          const char * id,
+          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+        ACE_THROW_SPEC ((CORBA::SystemException));
+
+    private:
+      TAO_ServerRequestInfo_ImplementationRepository_ServerObject_ping (const TAO_ServerRequestInfo_ImplementationRepository_ServerObject_ping &);
+      void operator= (const TAO_ServerRequestInfo_ImplementationRepository_ServerObject_ping &);
+
+    private:
+      POA_ImplementationRepository::ServerObject *_tao_impl;
+
+    };
+
+    class TAO_ServerRequestInfo_ImplementationRepository_ServerObject_shutdown : public TAO_ServerRequestInfo
+    {
+    public:
+      friend class POA_ImplementationRepository::ServerObject;
+      TAO_ServerRequestInfo_ImplementationRepository_ServerObject_shutdown (
+        TAO_ServerRequest &_tao_server_request,
+        POA_ImplementationRepository::ServerObject *tao_impl,
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      );
+
+      virtual Dynamic::ParameterList * arguments (
+          CORBA::Environment &ACE_TRY_ENV =
+            TAO_default_environment ()
+        )
+        ACE_THROW_SPEC ((CORBA::SystemException));
+
+      virtual Dynamic::ExceptionList * exceptions (
+          CORBA::Environment &ACE_TRY_ENV =
+            TAO_default_environment ()
+        )
+        ACE_THROW_SPEC ((CORBA::SystemException));
+
+      virtual CORBA::Any * result (
+          CORBA::Environment &ACE_TRY_ENV =
+            TAO_default_environment ()
+        )
+        ACE_THROW_SPEC ((CORBA::SystemException));
+
+      virtual char * target_most_derived_interface (
+          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+        ACE_THROW_SPEC ((CORBA::SystemException));
+
+      virtual CORBA::Boolean target_is_a (
+          const char * id,
+          CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+        ACE_THROW_SPEC ((CORBA::SystemException));
+
+    private:
+      TAO_ServerRequestInfo_ImplementationRepository_ServerObject_shutdown (const TAO_ServerRequestInfo_ImplementationRepository_ServerObject_shutdown &);
+      void operator= (const TAO_ServerRequestInfo_ImplementationRepository_ServerObject_shutdown &);
+
+    private:
+      POA_ImplementationRepository::ServerObject *_tao_impl;
+
+    };
+
+    #endif /* TAO_HAS_INTERCEPTORS */
+
   };
 
   
@@ -166,6 +269,7 @@
     );
   
   private:
+
     // Helper methods that takes care to create the proxy
     // as soon as their use is necessary.
     void create_proxy (
@@ -173,6 +277,8 @@
       CORBA::Environment &ACE_TRY_ENV
     );
     
+  private:
+
     // Caches the proxy implementations. The proxy implementation
     // are totally stateless, and those can be shared by all the
     // instances of a given IDL interface type.
@@ -223,9 +329,9 @@
         CORBA::SystemException
       ));
 
-
   };
   
+
   //
   //                ThruPOA  Proxy Impl. Declaration
   ///////////////////////////////////////////////////////////////////////
@@ -502,6 +608,466 @@
     );
 
 
+#if (TAO_HAS_INTERCEPTORS == 1)
+  // Generation of interceptors related RequestInfo classes per operation.
+  // This needed to be able to store the arguments, exceptions, contexts
+  // and build the lists dynamically on demand so that unnecessary time overhead
+  // of building these lists when they arent used is avoided.
+  class TAO_ServerRequestInfo_ImplementationRepository_Administration_activate_server : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::Administration;
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_activate_server (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::Administration *tao_impl,
+      const char * server,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_activate_server (const TAO_ServerRequestInfo_ImplementationRepository_Administration_activate_server &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_Administration_activate_server &);
+
+  private:
+    POA_ImplementationRepository::Administration *_tao_impl;
+    const char * server_;
+
+  };
+
+  class TAO_ServerRequestInfo_ImplementationRepository_Administration_register_server : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::Administration;
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_register_server (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::Administration *tao_impl,
+      const char * server,
+      const ImplementationRepository::StartupOptions & options,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_register_server (const TAO_ServerRequestInfo_ImplementationRepository_Administration_register_server &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_Administration_register_server &);
+
+  private:
+    POA_ImplementationRepository::Administration *_tao_impl;
+    const char * server_;
+    const ImplementationRepository::StartupOptions & options_;
+
+  };
+
+  class TAO_ServerRequestInfo_ImplementationRepository_Administration_reregister_server : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::Administration;
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_reregister_server (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::Administration *tao_impl,
+      const char * server,
+      const ImplementationRepository::StartupOptions & options,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_reregister_server (const TAO_ServerRequestInfo_ImplementationRepository_Administration_reregister_server &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_Administration_reregister_server &);
+
+  private:
+    POA_ImplementationRepository::Administration *_tao_impl;
+    const char * server_;
+    const ImplementationRepository::StartupOptions & options_;
+
+  };
+
+  class TAO_ServerRequestInfo_ImplementationRepository_Administration_remove_server : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::Administration;
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_remove_server (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::Administration *tao_impl,
+      const char * server,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_remove_server (const TAO_ServerRequestInfo_ImplementationRepository_Administration_remove_server &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_Administration_remove_server &);
+
+  private:
+    POA_ImplementationRepository::Administration *_tao_impl;
+    const char * server_;
+
+  };
+
+  class TAO_ServerRequestInfo_ImplementationRepository_Administration_shutdown_server : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::Administration;
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_shutdown_server (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::Administration *tao_impl,
+      const char * server,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_shutdown_server (const TAO_ServerRequestInfo_ImplementationRepository_Administration_shutdown_server &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_Administration_shutdown_server &);
+
+  private:
+    POA_ImplementationRepository::Administration *_tao_impl;
+    const char * server_;
+
+  };
+
+  class TAO_ServerRequestInfo_ImplementationRepository_Administration_server_is_running : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::Administration;
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_server_is_running (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::Administration *tao_impl,
+      const char * server,
+      const char * addr,
+      ImplementationRepository::ServerObject_ptr server_object,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_server_is_running (const TAO_ServerRequestInfo_ImplementationRepository_Administration_server_is_running &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_Administration_server_is_running &);
+
+  private:
+    POA_ImplementationRepository::Administration *_tao_impl;
+    const char * server_;
+    const char * addr_;
+    ImplementationRepository::ServerObject_ptr server_object_;
+    void result (char * result);
+    // update the result
+    char * _result;
+  };
+
+  class TAO_ServerRequestInfo_ImplementationRepository_Administration_server_is_shutting_down : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::Administration;
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_server_is_shutting_down (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::Administration *tao_impl,
+      const char * server,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_server_is_shutting_down (const TAO_ServerRequestInfo_ImplementationRepository_Administration_server_is_shutting_down &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_Administration_server_is_shutting_down &);
+
+  private:
+    POA_ImplementationRepository::Administration *_tao_impl;
+    const char * server_;
+
+  };
+
+  class TAO_ServerRequestInfo_ImplementationRepository_Administration_find : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::Administration;
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_find (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::Administration *tao_impl,
+      const char * server,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_find (const TAO_ServerRequestInfo_ImplementationRepository_Administration_find &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_Administration_find &);
+
+  private:
+    POA_ImplementationRepository::Administration *_tao_impl;
+    const char * server_;
+
+  };
+
+  class TAO_ServerRequestInfo_ImplementationRepository_Administration_list : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::Administration;
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_list (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::Administration *tao_impl,
+      const CORBA::ULong & how_many
+,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_Administration_list (const TAO_ServerRequestInfo_ImplementationRepository_Administration_list &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_Administration_list &);
+
+  private:
+    POA_ImplementationRepository::Administration *_tao_impl;
+    const CORBA::ULong & how_many_;
+
+
+  };
+
+  #endif /* TAO_HAS_INTERCEPTORS */
+
 };
 
 
@@ -522,6 +1088,7 @@
   );
 
 private:
+
   // Helper methods that takes care to create the proxy
   // as soon as their use is necessary.
   void create_proxy (
@@ -529,6 +1096,8 @@
     CORBA::Environment &ACE_TRY_ENV
   );
   
+private:
+
   // Caches the proxy implementations. The proxy implementation
   // are totally stateless, and those can be shared by all the
   // instances of a given IDL interface type.
@@ -659,9 +1228,9 @@
       CORBA::SystemException
     ));
 
-
 };
 
+
 //
 //                ThruPOA  Proxy Impl. Declaration
 ///////////////////////////////////////////////////////////////////////
@@ -884,6 +1453,111 @@
     );
 
 
+#if (TAO_HAS_INTERCEPTORS == 1)
+  // Generation of interceptors related RequestInfo classes per operation.
+  // This needed to be able to store the arguments, exceptions, contexts
+  // and build the lists dynamically on demand so that unnecessary time overhead
+  // of building these lists when they arent used is avoided.
+  class TAO_ServerRequestInfo_ImplementationRepository_ServerInformationIterator_next_n : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::ServerInformationIterator;
+    TAO_ServerRequestInfo_ImplementationRepository_ServerInformationIterator_next_n (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::ServerInformationIterator *tao_impl,
+      const CORBA::ULong & how_many,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_ServerInformationIterator_next_n (const TAO_ServerRequestInfo_ImplementationRepository_ServerInformationIterator_next_n &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_ServerInformationIterator_next_n &);
+
+  private:
+    POA_ImplementationRepository::ServerInformationIterator *_tao_impl;
+    const CORBA::ULong & how_many_;
+    void result (CORBA::Boolean result);
+    // update the result
+    CORBA::Boolean _result;
+  };
+
+  class TAO_ServerRequestInfo_ImplementationRepository_ServerInformationIterator_destroy : public TAO_ServerRequestInfo
+  {
+  public:
+    friend class POA_ImplementationRepository::ServerInformationIterator;
+    TAO_ServerRequestInfo_ImplementationRepository_ServerInformationIterator_destroy (
+      TAO_ServerRequest &_tao_server_request,
+      POA_ImplementationRepository::ServerInformationIterator *tao_impl,
+      CORBA::Environment &ACE_TRY_ENV =
+        TAO_default_environment ()
+    );
+
+    virtual Dynamic::ParameterList * arguments (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual Dynamic::ExceptionList * exceptions (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Any * result (
+        CORBA::Environment &ACE_TRY_ENV =
+          TAO_default_environment ()
+      )
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual char * target_most_derived_interface (
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+    virtual CORBA::Boolean target_is_a (
+        const char * id,
+        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
+      ACE_THROW_SPEC ((CORBA::SystemException));
+
+  private:
+    TAO_ServerRequestInfo_ImplementationRepository_ServerInformationIterator_destroy (const TAO_ServerRequestInfo_ImplementationRepository_ServerInformationIterator_destroy &);
+    void operator= (const TAO_ServerRequestInfo_ImplementationRepository_ServerInformationIterator_destroy &);
+
+  private:
+    POA_ImplementationRepository::ServerInformationIterator *_tao_impl;
+
+  };
+
+  #endif /* TAO_HAS_INTERCEPTORS */
+
 };
 
 
@@ -904,6 +1578,7 @@
   );
 
 private:
+
   // Helper methods that takes care to create the proxy
   // as soon as their use is necessary.
   void create_proxy (
@@ -911,6 +1586,8 @@
     CORBA::Environment &ACE_TRY_ENV
   );
   
+private:
+
   // Caches the proxy implementations. The proxy implementation
   // are totally stateless, and those can be shared by all the
   // instances of a given IDL interface type.
@@ -963,9 +1640,9 @@
       CORBA::SystemException
     ));
 
-
 };
 
+
 //
 //                ThruPOA  Proxy Impl. Declaration
 ///////////////////////////////////////////////////////////////////////
@@ -1011,7 +1688,7 @@
 
 
 }
-TAO_NAMESPACE_CLOSE // module ImplementationRepository
+TAO_NAMESPACE_CLOSE
 
 #include "ImplRepoS_T.h"
 
