Thu Sep 16 18:59:25 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/Sched/DynSched.cpp:
        * orbsvcs/orbsvcs/Sched/Config_Scheduler.cpp:
        * orbsvcs/orbsvcs/Sched/Reconfig_Sched_Utils_T.cpp:
        * orbsvcs/orbsvcs/Sched/Config_Scheduler.h:
        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.cpp:
        * orbsvcs/orbsvcs/Sched/Scheduler.cpp:
        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.h:
        * orbsvcs/orbsvcs/RTSched.mpc:
        * orbsvcs/orbsvcs/Runtime_Scheduler.cpp:
        * orbsvcs/orbsvcs/Event/EC_Timeout_Generator.cpp:
        * orbsvcs/orbsvcs/Event/EC_Default_ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Event/EC_Null_Scheduling.cpp:
        * orbsvcs/orbsvcs/Event/EC_Type_Filter.cpp:
        * orbsvcs/orbsvcs/Event/ECG_Reactive_ConsumerEC_Control.cpp:
        * orbsvcs/orbsvcs/Event/EC_Bitmask_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_Default_ProxyConsumer.cpp:
        * orbsvcs/orbsvcs/Event/EC_Sched_Filter_Builder.cpp:
        * orbsvcs/orbsvcs/Event/EC_Masked_Type_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_Gateway_IIOP.cpp:
        * orbsvcs/orbsvcs/Event/EC_Basic_Filter_Builder.cpp:
        * orbsvcs/orbsvcs/Event/EC_Event_Channel_Base.cpp:
        * orbsvcs/orbsvcs/Event/ECG_Reconnect_ConsumerEC_Control.cpp:
        * orbsvcs/orbsvcs/Event/EC_Dispatching_Task.inl:
        * orbsvcs/orbsvcs/Event/ECG_UDP_Receiver.cpp:
        * orbsvcs/orbsvcs/Event/EC_Conjunction_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_Prefix_Filter_Builder.cpp:
        * orbsvcs/orbsvcs/Event/EC_ObserverStrategy.cpp:
        * orbsvcs/orbsvcs/Event/ECG_Mcast_Gateway.cpp:
        * orbsvcs/orbsvcs/Event/EC_Priority_Scheduling.cpp:
        * orbsvcs/orbsvcs/Event/ECG_Mcast_EH.cpp:
        * orbsvcs/orbsvcs/Event/EC_Lifetime_Utils_T.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/Event/ECG_Mcast_Gateway.inl:
        * orbsvcs/orbsvcs/Event/EC_Per_Supplier_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/Event/ECG_UDP_Sender.cpp:
        * orbsvcs/orbsvcs/Scheduler_Factory.cpp:
        * orbsvcs/orbsvcs/Runtime_Scheduler.h:
        * orbsvcs/Event_Service/Event_Service.cpp:

          Changes to get the Event Service to build with the
          alternate mapping.

Wed Sep 15 19:26:33 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * orbsvcs/orbsvcs/RTEvent.mpc:
        * orbsvcs/orbsvcs/Event_Utilities.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ss.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_interface.cpp:
        * tao/CORBANAME_Parser.cpp:
        * tao/PolicyC.cpp:
        * tao/PolicyC.h:
        * tao/PortableServer/Basic_SArguments.h:
        * tao/Object_KeyC.h:
        * tao/Messaging.mpc:
        * tao/Object.h:
        * tao/Messaging/ExceptionHolder_i.cpp:
        * tao/Messaging/Asynch_Reply_Dispatcher.cpp:
        * tao/Messaging/ExceptionHolder_i.h:
        * tao/Messaging/AMH_Response_Handler.cpp:
        * tao/BiDir_GIOP/BiDir_Service_Context_Handler.cpp:
        * tao/PI/ORBInitInfo.cpp:
        * tao/PI/RequestInfo_Util.h:
        * tao/PI/Interceptor_List_T.cpp:
        * tao/PI/ORBInitInfo.h:
        * tao/PI/ClientRequestDetails.cpp:
        * tao/PI/RequestInfo_Util.cpp:
        * tao/PI/ClientRequestInfo.h:
        * tao/PI/Interceptor_List_T.h:
        * tao/PI/ClientRequestInfo.cpp:
        * tao/CodecFactory.mpc:
        * tao/Object_T.cpp:
        * tao/PI.mpc:
        * tao/Object.cpp:
        * tao/CodecFactory/CDR_Encaps_Codec.cpp:
        * tao/CodecFactory/CDR_Encaps_Codec.h:

          More changes to support the alternatie IDL->C++
          mapping. The changes above allow clean builds
          of the Portable Interceptor and Messaging libs.

Tue Sep  7 16:00:49 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Alt_Mapping/ub_long_seq.h:
        * tests/Alt_Mapping/ub_octet_seq.cpp:
        * tests/Alt_Mapping/ub_octet_seq.h:
        * tests/Alt_Mapping/ub_long_seq.cpp:

          New files, adding test coverage for
          sequences of longs and octets.

        * tests/Alt_Mapping/options.h:
        * tests/Alt_Mapping/ub_string.h:
        * tests/Alt_Mapping/alt_mapping_i.cpp:
        * tests/Alt_Mapping/tests.h:
        * tests/Alt_Mapping/alt_mapping_i.h:
        * tests/Alt_Mapping/ub_str_seq.h:
        * tests/Alt_Mapping/helper.cpp:
        * tests/Alt_Mapping/alt_mapping.idl:
        * tests/Alt_Mapping/helper.h:
        * tests/Alt_Mapping/ub_struct_seq.h:
        * tests/Alt_Mapping/alt_mapping.mpc:
        * tests/Alt_Mapping/options.cpp:
        * tests/Alt_Mapping/driver.cpp:
        * tests/Alt_Mapping/run_test.pl:

          Related and cosmetic changes.

Mon Sep  6 19:42:08 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Alt_Mapping/ub_str_seq.cpp:
        * tests/Alt_Mapping/ub_str_seq.h:

          New files, defining a test for unbounded
          sequence of string.

        * tests/Alt_Mapping/alt_mapping.mpc:

          Added new files to project, and refactored
          projects to separate client and server
          executables from stub and skeleton libraries.

        * tests/Alt_Mapping/options.h:
        * tests/Alt_Mapping/alt_mapping_i.cpp:
        * tests/Alt_Mapping/server.cpp:
        * tests/Alt_Mapping/tests.h:
        * tests/Alt_Mapping/alt_mapping_i.h:
        * tests/Alt_Mapping/client.cpp:
        * tests/Alt_Mapping/alt_mapping.idl:
        * tests/Alt_Mapping/ub_struct_seq.cpp:
        * tests/Alt_Mapping/ub_struct_seq.h:
        * tests/Alt_Mapping/options.cpp:
        * tests/Alt_Mapping/driver.cpp:
        * tests/Alt_Mapping/run_test.pl:

          Changes to cover the added string sequence test.

Mon Sep  6 15:24:49 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tests/Alt_Mapping/server.cpp:
        
          Updated code related to ObjectId to reflect ORB changes.
          
        * TAO_IDL/be/be_visitor_typedef/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/cdr_op_cs.cpp:
        
          Restored code generation for CDR operators for typedef of
          sequence that had been erroneously commented out.
          
        * tao/Object_KeyC.cpp:
        * tao/Object_KeyC.h:
        * tao/Object_Key.pidl:
        
          Redefined TAO::ObjectKey as a typedef of CORBA::OctetSeq,
          instead of a typedef of sequence<octet>.

Fri Sep  3 18:50:06 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/PortableServer/Root_POA.cpp:
        * tao/Profile.cpp:
        * tao/Service_Context.cpp:
        * tao/Tagged_Profile.cpp:
        * tao/operation_details.h:

          Changes to the new implementation of
          the object key (CORBA::OctetSeq) as
          a std::vector<CORBA::Octet>, made to
          debug the client/server connection
          process.

Thu Aug 26 14:46:25 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_typedef/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/cdr_op_cs.cpp:

          Disabled code generation of CDR and optional
          ostream operators for typedefs if the base
          type is a sequence. Since the sequence is now
          itself a typedef, we get 'already defined'
          link errors for these operators because the
          compiler doesn't see it as an overload.
          
        * tao/tao.mpc:

          Moved Object_Key.pidl out of the hand-crafted
          list and into the automatic list. It is now
          generated as a typedef of OctetSeq, and doing
          it this way eliminates 'already defined' link
          errors between TAO and PortableServer. The
          hand-crafted static methods that had been
          added to Object_Key are now in TAO_Profile.

        * tao/target_specification.h:
        * tao/PortableServer/POA_Current_Impl.h:
        * tao/PortableServer/Root_POA.cpp:
        * tao/Object_KeyC.cpp:
        * tao/Adapter.h:
        * tao/Object_KeyC.h:
        * tao/Leader_Follower_Flushing_Strategy.cpp:
        * tao/Adapter_Registry.h:
        * tao/ObjectKey_Table.h:
        * tao/Profile.cpp:
        * tao/Transport_Acceptor.h:
        * tao/DLL_Parser.cpp:
        * tao/Profile.h:
        * tao/Object.h:
        * tao/Stub.h:
        * tao/ORB_Core.h:
        * tao/Strategies/SHMIOP_Profile.cpp:
        * tao/Strategies/COIOP_Profile.cpp:
        * tao/Strategies/UIOP_Profile.cpp:
        * tao/Strategies/SCIOP_Profile.cpp:
        * tao/Strategies/DIOP_Profile.cpp:
        * tao/Acceptor_Filter.h:
        * tao/IIOP_Profile.cpp:
        * tao/LocalObject.h:

          Mods necessitated by the changes above.

Wed Aug 25 20:44:19 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/Tagged_Profile.inl:
        * tao/ObjectKey_Table.cpp:
        * tao/Tagged_Profile.cpp:
        
          A few more needed changes for the alternate mapping
          caught by the compiler when doing a clean build.

Wed Aug 25 19:55:18 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/buffer_type.cpp:
        * tao/ORB_Core.cpp:
        * tao/GIOP_Message_Base.cpp:
        * tao/PortableServer/ServantRetentionStrategyNonRetain.cpp:
        * tao/PortableServer/POA_Current.h:
        * tao/PortableServer/Key_Adapters.cpp:
        * tao/PortableServer/PortableServer_WFunctions.cpp:
        * tao/PortableServer/Default_Servant_Dispatcher.cpp:
        * tao/PortableServer/Servant_Upcall.inl:
        * tao/PortableServer/ServantRetentionStrategyRetain.cpp:
        * tao/PortableServer/POAManager.cpp:
        * tao/PortableServer/PortableServer_Functions.cpp:
        * tao/PortableServer/POA_Current_Impl.inl:
        * tao/PortableServer/Active_Object_Map.h:
        * tao/PortableServer/Active_Object_Map.inl:
        * tao/PortableServer/ServantRetentionStrategy.h:
        * tao/PortableServer/Object_Adapter.inl:
        * tao/PortableServer/Servant_Upcall.cpp:
        * tao/PortableServer/POAManagerFactory.cpp:
        * tao/PortableServer/ServantRetentionStrategyRetain.h:
        * tao/PortableServer/ORT_Adapter.h:
        * tao/PortableServer/Servant_Upcall.h:
        * tao/PortableServer/POAManagerFactory.h:
        * tao/PortableServer/PortableServer_Functions.h:
        * tao/PortableServer/POA_Current_Impl.cpp:
        * tao/PortableServer/Active_Object_Map.cpp:
        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/POA_Current_Impl.h:
        * tao/PortableServer/POA_Current.cpp:
        * tao/PortableServer/Root_POA.cpp:
        * tao/PortableServer/Root_POA.h:
        * tao/PortableServer/Servant_Dispatcher.h:
        * tao/PortableServer/Default_Servant_Dispatcher.h:
        * tao/PortableServer/POA_Policy_Set.cpp:
        * tao/PortableServer/ServantRetentionStrategyNonRetain.h:
        * tao/Object_KeyC.cpp:
        * tao/MProfile.inl:
        * tao/MProfile.h:
        * tao/Object_KeyC.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_i.h:
        * tao/ObjRefTemplate/ORT_Adapter_Impl.cpp:
        * tao/ObjRefTemplate/ObjectReferenceTemplate_i.cpp:
        * tao/ObjRefTemplate/ORT_Adapter_Impl.h:
        * tao/Profile.cpp:
        * tao/ORB.h:
        * tao/Profile.h:
        * tao/ORB_Core.h:
        * tao/IIOP_Profile.cpp:
        * tao/Object.cpp:
        * tao/LocalObject.cpp:
        * tao/LocalObject.h:
        * tao/MProfile.cpp:
        
          More changes to make the ORB and POA compatible with the
          alternate IDL to C++  mapping.

Tue Aug 24 18:13:42 UTC 2010  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/serializer_op_cs.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * tao/Tagged_Components.cpp:
        * tao/Synch_Reply_Dispatcher.h:
        * tao/ORB_Core.cpp:
        * tao/tao.mpc:
        * tao/GIOP_Message_Base.cpp:
        * tao/AnyTypeCode/Vector_AnyOp_T.h:
        * tao/AnyTypeCode/BasicTypeTraits.h:
        * tao/PortableServer.mpc:
        * tao/Policy_Set.cpp:
        * tao/PortableServer/RequestProcessingStrategyServantManager
        * tao/PortableServer/ServantRetentionStrategyNonRetain.cpp:
        * tao/PortableServer/RequestProcessingStrategyAOMOnly.h:
        * tao/PortableServer/POA_Policy_Set.h:
        * tao/PortableServer/ServantRetentionStrategyRetain.cpp:
        * tao/PortableServer/POAManager.cpp:
        * tao/PortableServer/POAManager.h:
        * tao/PortableServer/Active_Object_Map.h:
        * tao/PortableServer/Object_Adapter.h:
        * tao/PortableServer/Active_Object_Map.inl:
        * tao/PortableServer/ServantRetentionStrategy.h:
        * tao/PortableServer/RequestProcessingStrategy.h:
        * tao/PortableServer/RequestProcessingStrategyDefaultServant
        * tao/PortableServer/Root_POA.inl:
        * tao/PortableServer/POAManagerFactory.cpp:
        * tao/PortableServer/ServantRetentionStrategyRetain.h:
        * tao/PortableServer/RequestProcessingStrategyServantManager
        * tao/PortableServer/POAManagerFactory.h:
        * tao/PortableServer/RequestProcessingStrategyAOMOnly.cpp:
        * tao/PortableServer/RequestProcessingStrategyDefaultServant
        * tao/PortableServer/Active_Object_Map.cpp:
        * tao/PortableServer/Root_POA.cpp:
        * tao/PortableServer/Root_POA.h:
        * tao/PortableServer/LifespanStrategy.h:
        * tao/PortableServer/POA_Policy_Set.cpp:
        * tao/PortableServer/PS_ForwardC.h:
        * tao/PortableServer/ServantRetentionStrategyNonRetain.h:
        * tao/IIOP_Acceptor.cpp:
        * tao/Object_KeyC.cpp:
        * tao/Synch_Reply_Dispatcher.cpp:
        * tao/Stub.cpp:
        * tao/LocateRequest_Invocation_Adapter.cpp:
        * tao/MProfile.h:
        * tao/Object_KeyC.h:
        * tao/Profile_Transport_Resolver.inl:
        * tao/Profile_Transport_Resolver.h:
        * tao/operation_details.inl:
        * tao/IIOP_Transport.h:
        * tao/Profile.cpp:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/ClientRequestInterceptor_Adapter.h:
        * tao/Service_Context.cpp:
        * tao/Policy_Set.inl:
        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/Policy_Current.cpp:
        * tao/Profile.h:
        * tao/Object.h:
        * tao/Stub.h:
        * tao/Policy_Manager.h:
        * tao/Service_Callbacks.h:
        * tao/TAO_Server_Request.cpp:
        * tao/Principal.cpp:
        * tao/ORB_Core.h:
        * tao/Policy_Current.h:
        * tao/Policy_Set.h:
        * tao/IIOP_Profile.cpp:
        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/CONV_FRAME.pidl:
        * tao/TAO_Server_Request.h:
        * tao/Services.pidl:
        * tao/ServerRequestInterceptor_Adapter.h:
        * tao/AnyTypeCode.mpc:
        * tao/Service_Context.inl:
        * tao/Object.cpp:
        * tao/LocalObject.cpp:
        * tao/IIOP_Connection_Handler.h:
        * tao/LocateRequest_Invocation_Adapter.h:
        * tao/Policy_Forward.pidl:
        * tao/TAO_Server_Request.inl:
        * tao/LocalObject.h:
        * tao/IOP.pidl:
        * tao/Codeset/Codeset_Manager_i.cpp:
        * tao/IIOP_Transport.cpp:
        * tao/MProfile.cpp:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/Policy_Current_Impl.cpp:
        * tao/Policy_Manager.cpp:
        * tao/Profile_Transport_Resolver.cpp:
        * tao/ObjectIdList.pidl:
        * tao/Policy_Current_Impl.h:
        * tao/Service_Context_Handler_Registry.cpp:

          Regenerated all ORB and POA system IDL files
          with alternate mapping -Gstl option, and
          partially modified C++ files as necessary
          because of the string and sequence redefinition.
          Also fixed bugs in IDL compiler's generation
          of sequence types as typedefs of stl::vector<>.
