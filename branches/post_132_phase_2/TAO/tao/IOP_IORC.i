// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class IOP::TaggedProfile_var
// *************************************************************

ACE_INLINE
IOP::TaggedProfile_var::TaggedProfile_var (void)
  : ptr_ (0)
{}

ACE_INLINE
IOP::TaggedProfile_var::TaggedProfile_var (TaggedProfile *p)
  : ptr_ (p)
{}

ACE_INLINE
IOP::TaggedProfile_var::TaggedProfile_var (const ::IOP::TaggedProfile_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::IOP::TaggedProfile (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
IOP::TaggedProfile_var::~TaggedProfile_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
IOP::TaggedProfile_var &
IOP::TaggedProfile_var::operator= (TaggedProfile *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::IOP::TaggedProfile_var &
IOP::TaggedProfile_var::operator= (const ::IOP::TaggedProfile_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          TaggedProfile *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              TaggedProfile (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              TaggedProfile *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::IOP::TaggedProfile *
IOP::TaggedProfile_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::IOP::TaggedProfile *
IOP::TaggedProfile_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::TaggedProfile_var::operator const ::IOP::TaggedProfile &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
IOP::TaggedProfile_var::operator ::IOP::TaggedProfile &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
IOP::TaggedProfile_var::operator ::IOP::TaggedProfile &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
IOP::TaggedProfile_var::operator ::IOP::TaggedProfile *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::IOP::TaggedProfile &
IOP::TaggedProfile_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::IOP::TaggedProfile &
IOP::TaggedProfile_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::IOP::TaggedProfile *&
IOP::TaggedProfile_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::IOP::TaggedProfile *
IOP::TaggedProfile_var::_retn (void)
{
  ::IOP::TaggedProfile *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::IOP::TaggedProfile *
IOP::TaggedProfile_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class IOP::TaggedProfile_out
// *************************************************************

ACE_INLINE
IOP::TaggedProfile_out::TaggedProfile_out (::IOP::TaggedProfile *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
IOP::TaggedProfile_out::TaggedProfile_out (TaggedProfile_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
IOP::TaggedProfile_out::TaggedProfile_out (const ::IOP::TaggedProfile_out &p)
  : ptr_ (ACE_const_cast (TaggedProfile_out&, p).ptr_)
{}

ACE_INLINE
IOP::TaggedProfile_out &
IOP::TaggedProfile_out::operator= (const ::IOP::TaggedProfile_out &p)
{
  this->ptr_ = ACE_const_cast (TaggedProfile_out&, p).ptr_;
  return *this;
}

ACE_INLINE
IOP::TaggedProfile_out &
IOP::TaggedProfile_out::operator= (TaggedProfile *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
IOP::TaggedProfile_out::operator ::IOP::TaggedProfile *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::IOP::TaggedProfile *&
IOP::TaggedProfile_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::IOP::TaggedProfile *
IOP::TaggedProfile_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class IOP::IOR_var
// *************************************************************

ACE_INLINE
IOP::IOR_var::IOR_var (void)
  : ptr_ (0)
{}

ACE_INLINE
IOP::IOR_var::IOR_var (IOR *p)
  : ptr_ (p)
{}

ACE_INLINE
IOP::IOR_var::IOR_var (const ::IOP::IOR_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::IOP::IOR (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
IOP::IOR_var::~IOR_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
IOP::IOR_var &
IOP::IOR_var::operator= (IOR *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::IOP::IOR_var &
IOP::IOR_var::operator= (const ::IOP::IOR_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          IOR *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              IOR (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              IOR *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::IOP::IOR *
IOP::IOR_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::IOP::IOR *
IOP::IOR_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::IOR_var::operator const ::IOP::IOR &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
IOP::IOR_var::operator ::IOP::IOR &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
IOP::IOR_var::operator ::IOP::IOR &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
IOP::IOR_var::operator ::IOP::IOR *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::IOP::IOR &
IOP::IOR_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::IOP::IOR &
IOP::IOR_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::IOP::IOR *&
IOP::IOR_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::IOP::IOR *
IOP::IOR_var::_retn (void)
{
  ::IOP::IOR *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::IOP::IOR *
IOP::IOR_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class IOP::IOR_out
// *************************************************************

ACE_INLINE
IOP::IOR_out::IOR_out (::IOP::IOR *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
IOP::IOR_out::IOR_out (IOR_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
IOP::IOR_out::IOR_out (const ::IOP::IOR_out &p)
  : ptr_ (ACE_const_cast (IOR_out&, p).ptr_)
{}

ACE_INLINE
IOP::IOR_out &
IOP::IOR_out::operator= (const ::IOP::IOR_out &p)
{
  this->ptr_ = ACE_const_cast (IOR_out&, p).ptr_;
  return *this;
}

ACE_INLINE
IOP::IOR_out &
IOP::IOR_out::operator= (IOR *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
IOP::IOR_out::operator ::IOP::IOR *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::IOP::IOR *&
IOP::IOR_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::IOP::IOR *
IOP::IOR_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ci.cpp:99

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_IOP_IOR__TAO_SEQ_TAGGEDPROFILE_CI_

ACE_INLINE
IOP::TaggedProfile *
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::allocbuf (CORBA::ULong size)
{
  IOP::TaggedProfile *retval = 0;
  ACE_NEW_RETURN (retval, IOP::TaggedProfile[size], 0);
  return retval;
}

ACE_INLINE
void IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::freebuf (IOP::TaggedProfile *buffer)
{
  delete [] buffer;
}

ACE_INLINE
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile (void)
{
}

ACE_INLINE
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile (CORBA::ULong maximum) 
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::allocbuf (maximum))
{
}

ACE_INLINE
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile (
    CORBA::ULong maximum,
    CORBA::ULong length,
    IOP::TaggedProfile *data,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile (
    const _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      IOP::TaggedProfile *tmp1 =
        _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::allocbuf (this->maximum_);
      IOP::TaggedProfile * const tmp2 =
        ACE_reinterpret_cast (IOP::TaggedProfile * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp1[i] = tmp2[i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile &
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::operator= (
    const _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
        {
          // Free the old buffer.
          IOP::TaggedProfile *tmp =
            ACE_reinterpret_cast (IOP::TaggedProfile *, this->buffer_);
          
          _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::freebuf (tmp);
          
          this->buffer_ =
            _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  IOP::TaggedProfile *tmp1 =
    ACE_reinterpret_cast (IOP::TaggedProfile *, this->buffer_);
  IOP::TaggedProfile * const tmp2 =
    ACE_reinterpret_cast (IOP::TaggedProfile * ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp1[i] = tmp2[i];
    }
  
  return *this;
}

// = Accessors.
ACE_INLINE
IOP::TaggedProfile &
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::operator[] (CORBA::ULong i)
{
  ACE_ASSERT (i < this->maximum_);
  IOP::TaggedProfile* tmp =
    ACE_reinterpret_cast (IOP::TaggedProfile*, this->buffer_);
  return tmp[i];
}

ACE_INLINE
const IOP::TaggedProfile &
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::operator[] (CORBA::ULong i) const
{
  ACE_ASSERT (i < this->maximum_);
  IOP::TaggedProfile * const tmp =
    ACE_reinterpret_cast (IOP::TaggedProfile* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE
IOP::TaggedProfile *
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::get_buffer (CORBA::Boolean orphan)
{
  IOP::TaggedProfile *result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::allocbuf (this->length_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (IOP::TaggedProfile*, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(IOP::TaggedProfile*,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const IOP::TaggedProfile *
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::get_buffer (void) const
{
  return ACE_reinterpret_cast (const IOP::TaggedProfile * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE
void
IOP::IOR::_TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::replace (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedProfile *data,
    CORBA::Boolean release
  )
{
  this->maximum_ = max;
  this->length_ = length;
  
  if (this->buffer_ && this->release_ == 1)
    {
      IOP::TaggedProfile *tmp =
        ACE_reinterpret_cast (IOP::TaggedProfile*, this->buffer_);
      _TAO_Unbounded_Sequence_IOP_IOR__tao_seq_TaggedProfile::freebuf (tmp);
    }
  
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class IOP::TaggedComponent_var
// *************************************************************

ACE_INLINE
IOP::TaggedComponent_var::TaggedComponent_var (void)
  : ptr_ (0)
{}

ACE_INLINE
IOP::TaggedComponent_var::TaggedComponent_var (TaggedComponent *p)
  : ptr_ (p)
{}

ACE_INLINE
IOP::TaggedComponent_var::TaggedComponent_var (const ::IOP::TaggedComponent_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::IOP::TaggedComponent (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
IOP::TaggedComponent_var::~TaggedComponent_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
IOP::TaggedComponent_var &
IOP::TaggedComponent_var::operator= (TaggedComponent *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::IOP::TaggedComponent_var &
IOP::TaggedComponent_var::operator= (const ::IOP::TaggedComponent_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          TaggedComponent *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              TaggedComponent (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              TaggedComponent *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::IOP::TaggedComponent *
IOP::TaggedComponent_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::IOP::TaggedComponent *
IOP::TaggedComponent_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::TaggedComponent_var::operator const ::IOP::TaggedComponent &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
IOP::TaggedComponent_var::operator ::IOP::TaggedComponent &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
IOP::TaggedComponent_var::operator ::IOP::TaggedComponent &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
IOP::TaggedComponent_var::operator ::IOP::TaggedComponent *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::IOP::TaggedComponent &
IOP::TaggedComponent_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::IOP::TaggedComponent &
IOP::TaggedComponent_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::IOP::TaggedComponent *&
IOP::TaggedComponent_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::IOP::TaggedComponent *
IOP::TaggedComponent_var::_retn (void)
{
  ::IOP::TaggedComponent *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::IOP::TaggedComponent *
IOP::TaggedComponent_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class IOP::TaggedComponent_out
// *************************************************************

ACE_INLINE
IOP::TaggedComponent_out::TaggedComponent_out (::IOP::TaggedComponent *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
IOP::TaggedComponent_out::TaggedComponent_out (TaggedComponent_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
IOP::TaggedComponent_out::TaggedComponent_out (const ::IOP::TaggedComponent_out &p)
  : ptr_ (ACE_const_cast (TaggedComponent_out&, p).ptr_)
{}

ACE_INLINE
IOP::TaggedComponent_out &
IOP::TaggedComponent_out::operator= (const ::IOP::TaggedComponent_out &p)
{
  this->ptr_ = ACE_const_cast (TaggedComponent_out&, p).ptr_;
  return *this;
}

ACE_INLINE
IOP::TaggedComponent_out &
IOP::TaggedComponent_out::operator= (TaggedComponent *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
IOP::TaggedComponent_out::operator ::IOP::TaggedComponent *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::IOP::TaggedComponent *&
IOP::TaggedComponent_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::IOP::TaggedComponent *
IOP::TaggedComponent_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ci.cpp:99

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IOP_MULTIPLECOMPONENTPROFILE_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_IOP_MULTIPLECOMPONENTPROFILE_CI_

ACE_INLINE
IOP::TaggedComponent *
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::allocbuf (CORBA::ULong size)
{
  IOP::TaggedComponent *retval = 0;
  ACE_NEW_RETURN (retval, IOP::TaggedComponent[size], 0);
  return retval;
}

ACE_INLINE
void IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::freebuf (IOP::TaggedComponent *buffer)
{
  delete [] buffer;
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile (void)
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile (CORBA::ULong maximum) 
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::allocbuf (maximum))
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile (
    CORBA::ULong maximum,
    CORBA::ULong length,
    IOP::TaggedComponent *data,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile (
    const _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      IOP::TaggedComponent *tmp1 =
        _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::allocbuf (this->maximum_);
      IOP::TaggedComponent * const tmp2 =
        ACE_reinterpret_cast (IOP::TaggedComponent * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp1[i] = tmp2[i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile &
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::operator= (
    const _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
        {
          // Free the old buffer.
          IOP::TaggedComponent *tmp =
            ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
          
          _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::freebuf (tmp);
          
          this->buffer_ =
            _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  IOP::TaggedComponent *tmp1 =
    ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
  IOP::TaggedComponent * const tmp2 =
    ACE_reinterpret_cast (IOP::TaggedComponent * ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp1[i] = tmp2[i];
    }
  
  return *this;
}

// = Accessors.
ACE_INLINE
IOP::TaggedComponent &
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::operator[] (CORBA::ULong i)
{
  ACE_ASSERT (i < this->maximum_);
  IOP::TaggedComponent* tmp =
    ACE_reinterpret_cast (IOP::TaggedComponent*, this->buffer_);
  return tmp[i];
}

ACE_INLINE
const IOP::TaggedComponent &
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::operator[] (CORBA::ULong i) const
{
  ACE_ASSERT (i < this->maximum_);
  IOP::TaggedComponent * const tmp =
    ACE_reinterpret_cast (IOP::TaggedComponent* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE
IOP::TaggedComponent *
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::get_buffer (CORBA::Boolean orphan)
{
  IOP::TaggedComponent *result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::allocbuf (this->length_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (IOP::TaggedComponent*, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(IOP::TaggedComponent*,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const IOP::TaggedComponent *
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::get_buffer (void) const
{
  return ACE_reinterpret_cast (const IOP::TaggedComponent * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE
void
IOP::_TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::replace (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedComponent *data,
    CORBA::Boolean release
  )
{
  this->maximum_ = max;
  this->length_ = length;
  
  if (this->buffer_ && this->release_ == 1)
    {
      IOP::TaggedComponent *tmp =
        ACE_reinterpret_cast (IOP::TaggedComponent*, this->buffer_);
      _TAO_Unbounded_Sequence_IOP_MultipleComponentProfile::freebuf (tmp);
    }
  
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_IOP_MULTIPLECOMPONENTPROFILE_CI_)
#define _IOP_MULTIPLECOMPONENTPROFILE_CI_

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class IOP::MultipleComponentProfile_var
// *************************************************************

ACE_INLINE
IOP::MultipleComponentProfile_var::MultipleComponentProfile_var (void)
  : ptr_ (0)
{}

ACE_INLINE
IOP::MultipleComponentProfile_var::MultipleComponentProfile_var (MultipleComponentProfile *p)
  : ptr_ (p)
{}

ACE_INLINE
IOP::MultipleComponentProfile_var::MultipleComponentProfile_var (const ::IOP::MultipleComponentProfile_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::IOP::MultipleComponentProfile (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
IOP::MultipleComponentProfile_var::~MultipleComponentProfile_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
IOP::MultipleComponentProfile_var &
IOP::MultipleComponentProfile_var::operator= (MultipleComponentProfile *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::IOP::MultipleComponentProfile_var &
IOP::MultipleComponentProfile_var::operator= (const ::IOP::MultipleComponentProfile_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          MultipleComponentProfile *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              MultipleComponentProfile (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              MultipleComponentProfile *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::IOP::MultipleComponentProfile *
IOP::MultipleComponentProfile_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::IOP::MultipleComponentProfile *
IOP::MultipleComponentProfile_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::MultipleComponentProfile_var::operator const ::IOP::MultipleComponentProfile &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
IOP::MultipleComponentProfile_var::operator ::IOP::MultipleComponentProfile &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
IOP::MultipleComponentProfile_var::operator ::IOP::MultipleComponentProfile &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
IOP::MultipleComponentProfile_var::operator ::IOP::MultipleComponentProfile *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
IOP::TaggedComponent &
IOP::MultipleComponentProfile_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const IOP::TaggedComponent &
IOP::MultipleComponentProfile_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const IOP::TaggedComponent &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::IOP::MultipleComponentProfile &
IOP::MultipleComponentProfile_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::IOP::MultipleComponentProfile &
IOP::MultipleComponentProfile_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::IOP::MultipleComponentProfile *&
IOP::MultipleComponentProfile_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::IOP::MultipleComponentProfile *
IOP::MultipleComponentProfile_var::_retn (void)
{
  ::IOP::MultipleComponentProfile *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::IOP::MultipleComponentProfile *
IOP::MultipleComponentProfile_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class IOP::MultipleComponentProfile_out
// *************************************************************

ACE_INLINE
IOP::MultipleComponentProfile_out::MultipleComponentProfile_out (MultipleComponentProfile *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
IOP::MultipleComponentProfile_out::MultipleComponentProfile_out (MultipleComponentProfile_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
IOP::MultipleComponentProfile_out::MultipleComponentProfile_out (const ::IOP::MultipleComponentProfile_out &p)
  : ptr_ (ACE_const_cast (MultipleComponentProfile_out&, p).ptr_)
{}

ACE_INLINE
::IOP::MultipleComponentProfile_out &
IOP::MultipleComponentProfile_out::operator= (const ::IOP::MultipleComponentProfile_out &p)
{
  this->ptr_ = ACE_const_cast (MultipleComponentProfile_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::IOP::MultipleComponentProfile_out &
IOP::MultipleComponentProfile_out::operator= (MultipleComponentProfile *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
IOP::MultipleComponentProfile_out::operator ::IOP::MultipleComponentProfile *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::IOP::MultipleComponentProfile *&
IOP::MultipleComponentProfile_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::IOP::MultipleComponentProfile *
IOP::MultipleComponentProfile_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::TaggedComponent &
IOP::MultipleComponentProfile_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ci.cpp:99

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTLIST_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTLIST_CI_

ACE_INLINE
IOP::TaggedComponent *
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::allocbuf (CORBA::ULong size)
{
  IOP::TaggedComponent *retval = 0;
  ACE_NEW_RETURN (retval, IOP::TaggedComponent[size], 0);
  return retval;
}

ACE_INLINE
void IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::freebuf (IOP::TaggedComponent *buffer)
{
  delete [] buffer;
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::_TAO_Unbounded_Sequence_IOP_TaggedComponentList (void)
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::_TAO_Unbounded_Sequence_IOP_TaggedComponentList (CORBA::ULong maximum) 
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IOP_TaggedComponentList::allocbuf (maximum))
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::_TAO_Unbounded_Sequence_IOP_TaggedComponentList (
    CORBA::ULong maximum,
    CORBA::ULong length,
    IOP::TaggedComponent *data,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::_TAO_Unbounded_Sequence_IOP_TaggedComponentList (
    const _TAO_Unbounded_Sequence_IOP_TaggedComponentList &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      IOP::TaggedComponent *tmp1 =
        _TAO_Unbounded_Sequence_IOP_TaggedComponentList::allocbuf (this->maximum_);
      IOP::TaggedComponent * const tmp2 =
        ACE_reinterpret_cast (IOP::TaggedComponent * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp1[i] = tmp2[i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList &
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::operator= (
    const _TAO_Unbounded_Sequence_IOP_TaggedComponentList &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
        {
          // Free the old buffer.
          IOP::TaggedComponent *tmp =
            ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
          
          _TAO_Unbounded_Sequence_IOP_TaggedComponentList::freebuf (tmp);
          
          this->buffer_ =
            _TAO_Unbounded_Sequence_IOP_TaggedComponentList::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Sequence_IOP_TaggedComponentList::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  IOP::TaggedComponent *tmp1 =
    ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
  IOP::TaggedComponent * const tmp2 =
    ACE_reinterpret_cast (IOP::TaggedComponent * ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp1[i] = tmp2[i];
    }
  
  return *this;
}

// = Accessors.
ACE_INLINE
IOP::TaggedComponent &
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::operator[] (CORBA::ULong i)
{
  ACE_ASSERT (i < this->maximum_);
  IOP::TaggedComponent* tmp =
    ACE_reinterpret_cast (IOP::TaggedComponent*, this->buffer_);
  return tmp[i];
}

ACE_INLINE
const IOP::TaggedComponent &
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::operator[] (CORBA::ULong i) const
{
  ACE_ASSERT (i < this->maximum_);
  IOP::TaggedComponent * const tmp =
    ACE_reinterpret_cast (IOP::TaggedComponent* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE
IOP::TaggedComponent *
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::get_buffer (CORBA::Boolean orphan)
{
  IOP::TaggedComponent *result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Sequence_IOP_TaggedComponentList::allocbuf (this->length_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (IOP::TaggedComponent*, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(IOP::TaggedComponent*,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const IOP::TaggedComponent *
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::get_buffer (void) const
{
  return ACE_reinterpret_cast (const IOP::TaggedComponent * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE
void
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentList::replace (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedComponent *data,
    CORBA::Boolean release
  )
{
  this->maximum_ = max;
  this->length_ = length;
  
  if (this->buffer_ && this->release_ == 1)
    {
      IOP::TaggedComponent *tmp =
        ACE_reinterpret_cast (IOP::TaggedComponent*, this->buffer_);
      _TAO_Unbounded_Sequence_IOP_TaggedComponentList::freebuf (tmp);
    }
  
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_IOP_TAGGEDCOMPONENTLIST_CI_)
#define _IOP_TAGGEDCOMPONENTLIST_CI_

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class IOP::TaggedComponentList_var
// *************************************************************

ACE_INLINE
IOP::TaggedComponentList_var::TaggedComponentList_var (void)
  : ptr_ (0)
{}

ACE_INLINE
IOP::TaggedComponentList_var::TaggedComponentList_var (TaggedComponentList *p)
  : ptr_ (p)
{}

ACE_INLINE
IOP::TaggedComponentList_var::TaggedComponentList_var (const ::IOP::TaggedComponentList_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::IOP::TaggedComponentList (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
IOP::TaggedComponentList_var::~TaggedComponentList_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
IOP::TaggedComponentList_var &
IOP::TaggedComponentList_var::operator= (TaggedComponentList *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::IOP::TaggedComponentList_var &
IOP::TaggedComponentList_var::operator= (const ::IOP::TaggedComponentList_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          TaggedComponentList *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              TaggedComponentList (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              TaggedComponentList *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::IOP::TaggedComponentList *
IOP::TaggedComponentList_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentList *
IOP::TaggedComponentList_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::TaggedComponentList_var::operator const ::IOP::TaggedComponentList &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
IOP::TaggedComponentList_var::operator ::IOP::TaggedComponentList &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
IOP::TaggedComponentList_var::operator ::IOP::TaggedComponentList &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
IOP::TaggedComponentList_var::operator ::IOP::TaggedComponentList *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
IOP::TaggedComponent &
IOP::TaggedComponentList_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const IOP::TaggedComponent &
IOP::TaggedComponentList_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const IOP::TaggedComponent &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::IOP::TaggedComponentList &
IOP::TaggedComponentList_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentList &
IOP::TaggedComponentList_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentList *&
IOP::TaggedComponentList_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentList *
IOP::TaggedComponentList_var::_retn (void)
{
  ::IOP::TaggedComponentList *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::IOP::TaggedComponentList *
IOP::TaggedComponentList_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class IOP::TaggedComponentList_out
// *************************************************************

ACE_INLINE
IOP::TaggedComponentList_out::TaggedComponentList_out (TaggedComponentList *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
IOP::TaggedComponentList_out::TaggedComponentList_out (TaggedComponentList_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
IOP::TaggedComponentList_out::TaggedComponentList_out (const ::IOP::TaggedComponentList_out &p)
  : ptr_ (ACE_const_cast (TaggedComponentList_out&, p).ptr_)
{}

ACE_INLINE
::IOP::TaggedComponentList_out &
IOP::TaggedComponentList_out::operator= (const ::IOP::TaggedComponentList_out &p)
{
  this->ptr_ = ACE_const_cast (TaggedComponentList_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::IOP::TaggedComponentList_out &
IOP::TaggedComponentList_out::operator= (TaggedComponentList *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
IOP::TaggedComponentList_out::operator ::IOP::TaggedComponentList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentList *&
IOP::TaggedComponentList_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentList *
IOP::TaggedComponentList_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::TaggedComponent &
IOP::TaggedComponentList_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ci.cpp:99

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_IOP_TAGGEDCOMPONENTSEQ_CI_

ACE_INLINE
IOP::TaggedComponent *
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::allocbuf (CORBA::ULong size)
{
  IOP::TaggedComponent *retval = 0;
  ACE_NEW_RETURN (retval, IOP::TaggedComponent[size], 0);
  return retval;
}

ACE_INLINE
void IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::freebuf (IOP::TaggedComponent *buffer)
{
  delete [] buffer;
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq (void)
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq (CORBA::ULong maximum) 
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::allocbuf (maximum))
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq (
    CORBA::ULong maximum,
    CORBA::ULong length,
    IOP::TaggedComponent *data,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq (
    const _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      IOP::TaggedComponent *tmp1 =
        _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::allocbuf (this->maximum_);
      IOP::TaggedComponent * const tmp2 =
        ACE_reinterpret_cast (IOP::TaggedComponent * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp1[i] = tmp2[i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq &
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::operator= (
    const _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
        {
          // Free the old buffer.
          IOP::TaggedComponent *tmp =
            ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
          
          _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::freebuf (tmp);
          
          this->buffer_ =
            _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  IOP::TaggedComponent *tmp1 =
    ACE_reinterpret_cast (IOP::TaggedComponent *, this->buffer_);
  IOP::TaggedComponent * const tmp2 =
    ACE_reinterpret_cast (IOP::TaggedComponent * ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp1[i] = tmp2[i];
    }
  
  return *this;
}

// = Accessors.
ACE_INLINE
IOP::TaggedComponent &
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::operator[] (CORBA::ULong i)
{
  ACE_ASSERT (i < this->maximum_);
  IOP::TaggedComponent* tmp =
    ACE_reinterpret_cast (IOP::TaggedComponent*, this->buffer_);
  return tmp[i];
}

ACE_INLINE
const IOP::TaggedComponent &
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::operator[] (CORBA::ULong i) const
{
  ACE_ASSERT (i < this->maximum_);
  IOP::TaggedComponent * const tmp =
    ACE_reinterpret_cast (IOP::TaggedComponent* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE
IOP::TaggedComponent *
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::get_buffer (CORBA::Boolean orphan)
{
  IOP::TaggedComponent *result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::allocbuf (this->length_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (IOP::TaggedComponent*, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(IOP::TaggedComponent*,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const IOP::TaggedComponent *
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::get_buffer (void) const
{
  return ACE_reinterpret_cast (const IOP::TaggedComponent * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE
void
IOP::_TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::replace (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::TaggedComponent *data,
    CORBA::Boolean release
  )
{
  this->maximum_ = max;
  this->length_ = length;
  
  if (this->buffer_ && this->release_ == 1)
    {
      IOP::TaggedComponent *tmp =
        ACE_reinterpret_cast (IOP::TaggedComponent*, this->buffer_);
      _TAO_Unbounded_Sequence_IOP_TaggedComponentSeq::freebuf (tmp);
    }
  
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_IOP_TAGGEDCOMPONENTSEQ_CI_)
#define _IOP_TAGGEDCOMPONENTSEQ_CI_

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class IOP::TaggedComponentSeq_var
// *************************************************************

ACE_INLINE
IOP::TaggedComponentSeq_var::TaggedComponentSeq_var (void)
  : ptr_ (0)
{}

ACE_INLINE
IOP::TaggedComponentSeq_var::TaggedComponentSeq_var (TaggedComponentSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
IOP::TaggedComponentSeq_var::TaggedComponentSeq_var (const ::IOP::TaggedComponentSeq_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::IOP::TaggedComponentSeq (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
IOP::TaggedComponentSeq_var::~TaggedComponentSeq_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
IOP::TaggedComponentSeq_var &
IOP::TaggedComponentSeq_var::operator= (TaggedComponentSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::IOP::TaggedComponentSeq_var &
IOP::TaggedComponentSeq_var::operator= (const ::IOP::TaggedComponentSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          TaggedComponentSeq *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              TaggedComponentSeq (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              TaggedComponentSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::IOP::TaggedComponentSeq *
IOP::TaggedComponentSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentSeq *
IOP::TaggedComponentSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::TaggedComponentSeq_var::operator const ::IOP::TaggedComponentSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
IOP::TaggedComponentSeq_var::operator ::IOP::TaggedComponentSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
IOP::TaggedComponentSeq_var::operator ::IOP::TaggedComponentSeq &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
IOP::TaggedComponentSeq_var::operator ::IOP::TaggedComponentSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
IOP::TaggedComponent &
IOP::TaggedComponentSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const IOP::TaggedComponent &
IOP::TaggedComponentSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const IOP::TaggedComponent &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::IOP::TaggedComponentSeq &
IOP::TaggedComponentSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentSeq &
IOP::TaggedComponentSeq_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentSeq *&
IOP::TaggedComponentSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentSeq *
IOP::TaggedComponentSeq_var::_retn (void)
{
  ::IOP::TaggedComponentSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::IOP::TaggedComponentSeq *
IOP::TaggedComponentSeq_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class IOP::TaggedComponentSeq_out
// *************************************************************

ACE_INLINE
IOP::TaggedComponentSeq_out::TaggedComponentSeq_out (TaggedComponentSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
IOP::TaggedComponentSeq_out::TaggedComponentSeq_out (TaggedComponentSeq_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
IOP::TaggedComponentSeq_out::TaggedComponentSeq_out (const ::IOP::TaggedComponentSeq_out &p)
  : ptr_ (ACE_const_cast (TaggedComponentSeq_out&, p).ptr_)
{}

ACE_INLINE
::IOP::TaggedComponentSeq_out &
IOP::TaggedComponentSeq_out::operator= (const ::IOP::TaggedComponentSeq_out &p)
{
  this->ptr_ = ACE_const_cast (TaggedComponentSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::IOP::TaggedComponentSeq_out &
IOP::TaggedComponentSeq_out::operator= (TaggedComponentSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
IOP::TaggedComponentSeq_out::operator ::IOP::TaggedComponentSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentSeq *&
IOP::TaggedComponentSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::IOP::TaggedComponentSeq *
IOP::TaggedComponentSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::TaggedComponent &
IOP::TaggedComponentSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class IOP::ServiceContext_var
// *************************************************************

ACE_INLINE
IOP::ServiceContext_var::ServiceContext_var (void)
  : ptr_ (0)
{}

ACE_INLINE
IOP::ServiceContext_var::ServiceContext_var (ServiceContext *p)
  : ptr_ (p)
{}

ACE_INLINE
IOP::ServiceContext_var::ServiceContext_var (const ::IOP::ServiceContext_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::IOP::ServiceContext (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
IOP::ServiceContext_var::~ServiceContext_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
IOP::ServiceContext_var &
IOP::ServiceContext_var::operator= (ServiceContext *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::IOP::ServiceContext_var &
IOP::ServiceContext_var::operator= (const ::IOP::ServiceContext_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ServiceContext *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ServiceContext (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ServiceContext *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::IOP::ServiceContext *
IOP::ServiceContext_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::IOP::ServiceContext *
IOP::ServiceContext_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::ServiceContext_var::operator const ::IOP::ServiceContext &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
IOP::ServiceContext_var::operator ::IOP::ServiceContext &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
IOP::ServiceContext_var::operator ::IOP::ServiceContext &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
IOP::ServiceContext_var::operator ::IOP::ServiceContext *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::IOP::ServiceContext &
IOP::ServiceContext_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::IOP::ServiceContext &
IOP::ServiceContext_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::IOP::ServiceContext *&
IOP::ServiceContext_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::IOP::ServiceContext *
IOP::ServiceContext_var::_retn (void)
{
  ::IOP::ServiceContext *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::IOP::ServiceContext *
IOP::ServiceContext_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class IOP::ServiceContext_out
// *************************************************************

ACE_INLINE
IOP::ServiceContext_out::ServiceContext_out (::IOP::ServiceContext *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
IOP::ServiceContext_out::ServiceContext_out (ServiceContext_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
IOP::ServiceContext_out::ServiceContext_out (const ::IOP::ServiceContext_out &p)
  : ptr_ (ACE_const_cast (ServiceContext_out&, p).ptr_)
{}

ACE_INLINE
IOP::ServiceContext_out &
IOP::ServiceContext_out::operator= (const ::IOP::ServiceContext_out &p)
{
  this->ptr_ = ACE_const_cast (ServiceContext_out&, p).ptr_;
  return *this;
}

ACE_INLINE
IOP::ServiceContext_out &
IOP::ServiceContext_out::operator= (ServiceContext *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
IOP::ServiceContext_out::operator ::IOP::ServiceContext *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::IOP::ServiceContext *&
IOP::ServiceContext_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::IOP::ServiceContext *
IOP::ServiceContext_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ci.cpp:99

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_IOP_SERVICECONTEXTLIST_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_IOP_SERVICECONTEXTLIST_CI_

ACE_INLINE
IOP::ServiceContext *
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::allocbuf (CORBA::ULong size)
{
  IOP::ServiceContext *retval = 0;
  ACE_NEW_RETURN (retval, IOP::ServiceContext[size], 0);
  return retval;
}

ACE_INLINE
void IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::freebuf (IOP::ServiceContext *buffer)
{
  delete [] buffer;
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::_TAO_Unbounded_Sequence_IOP_ServiceContextList (void)
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::_TAO_Unbounded_Sequence_IOP_ServiceContextList (CORBA::ULong maximum) 
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_IOP_ServiceContextList::allocbuf (maximum))
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::_TAO_Unbounded_Sequence_IOP_ServiceContextList (
    CORBA::ULong maximum,
    CORBA::ULong length,
    IOP::ServiceContext *data,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::_TAO_Unbounded_Sequence_IOP_ServiceContextList (
    const _TAO_Unbounded_Sequence_IOP_ServiceContextList &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      IOP::ServiceContext *tmp1 =
        _TAO_Unbounded_Sequence_IOP_ServiceContextList::allocbuf (this->maximum_);
      IOP::ServiceContext * const tmp2 =
        ACE_reinterpret_cast (IOP::ServiceContext * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp1[i] = tmp2[i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList &
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::operator= (
    const _TAO_Unbounded_Sequence_IOP_ServiceContextList &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
        {
          // Free the old buffer.
          IOP::ServiceContext *tmp =
            ACE_reinterpret_cast (IOP::ServiceContext *, this->buffer_);
          
          _TAO_Unbounded_Sequence_IOP_ServiceContextList::freebuf (tmp);
          
          this->buffer_ =
            _TAO_Unbounded_Sequence_IOP_ServiceContextList::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Sequence_IOP_ServiceContextList::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  IOP::ServiceContext *tmp1 =
    ACE_reinterpret_cast (IOP::ServiceContext *, this->buffer_);
  IOP::ServiceContext * const tmp2 =
    ACE_reinterpret_cast (IOP::ServiceContext * ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp1[i] = tmp2[i];
    }
  
  return *this;
}

// = Accessors.
ACE_INLINE
IOP::ServiceContext &
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::operator[] (CORBA::ULong i)
{
  ACE_ASSERT (i < this->maximum_);
  IOP::ServiceContext* tmp =
    ACE_reinterpret_cast (IOP::ServiceContext*, this->buffer_);
  return tmp[i];
}

ACE_INLINE
const IOP::ServiceContext &
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::operator[] (CORBA::ULong i) const
{
  ACE_ASSERT (i < this->maximum_);
  IOP::ServiceContext * const tmp =
    ACE_reinterpret_cast (IOP::ServiceContext* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE
IOP::ServiceContext *
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::get_buffer (CORBA::Boolean orphan)
{
  IOP::ServiceContext *result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Sequence_IOP_ServiceContextList::allocbuf (this->length_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (IOP::ServiceContext*, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(IOP::ServiceContext*,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const IOP::ServiceContext *
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::get_buffer (void) const
{
  return ACE_reinterpret_cast (const IOP::ServiceContext * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE
void
IOP::_TAO_Unbounded_Sequence_IOP_ServiceContextList::replace (
    CORBA::ULong max,
    CORBA::ULong length,
    IOP::ServiceContext *data,
    CORBA::Boolean release
  )
{
  this->maximum_ = max;
  this->length_ = length;
  
  if (this->buffer_ && this->release_ == 1)
    {
      IOP::ServiceContext *tmp =
        ACE_reinterpret_cast (IOP::ServiceContext*, this->buffer_);
      _TAO_Unbounded_Sequence_IOP_ServiceContextList::freebuf (tmp);
    }
  
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_IOP_SERVICECONTEXTLIST_CI_)
#define _IOP_SERVICECONTEXTLIST_CI_

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class IOP::ServiceContextList_var
// *************************************************************

ACE_INLINE
IOP::ServiceContextList_var::ServiceContextList_var (void)
  : ptr_ (0)
{}

ACE_INLINE
IOP::ServiceContextList_var::ServiceContextList_var (ServiceContextList *p)
  : ptr_ (p)
{}

ACE_INLINE
IOP::ServiceContextList_var::ServiceContextList_var (const ::IOP::ServiceContextList_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::IOP::ServiceContextList (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
IOP::ServiceContextList_var::~ServiceContextList_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
IOP::ServiceContextList_var &
IOP::ServiceContextList_var::operator= (ServiceContextList *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::IOP::ServiceContextList_var &
IOP::ServiceContextList_var::operator= (const ::IOP::ServiceContextList_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ServiceContextList *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ServiceContextList (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ServiceContextList *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::IOP::ServiceContextList *
IOP::ServiceContextList_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::IOP::ServiceContextList *
IOP::ServiceContextList_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::ServiceContextList_var::operator const ::IOP::ServiceContextList &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
IOP::ServiceContextList_var::operator ::IOP::ServiceContextList &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
IOP::ServiceContextList_var::operator ::IOP::ServiceContextList &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
IOP::ServiceContextList_var::operator ::IOP::ServiceContextList *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
IOP::ServiceContext &
IOP::ServiceContextList_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const IOP::ServiceContext &
IOP::ServiceContextList_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const IOP::ServiceContext &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::IOP::ServiceContextList &
IOP::ServiceContextList_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::IOP::ServiceContextList &
IOP::ServiceContextList_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::IOP::ServiceContextList *&
IOP::ServiceContextList_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::IOP::ServiceContextList *
IOP::ServiceContextList_var::_retn (void)
{
  ::IOP::ServiceContextList *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::IOP::ServiceContextList *
IOP::ServiceContextList_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class IOP::ServiceContextList_out
// *************************************************************

ACE_INLINE
IOP::ServiceContextList_out::ServiceContextList_out (ServiceContextList *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
IOP::ServiceContextList_out::ServiceContextList_out (ServiceContextList_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
IOP::ServiceContextList_out::ServiceContextList_out (const ::IOP::ServiceContextList_out &p)
  : ptr_ (ACE_const_cast (ServiceContextList_out&, p).ptr_)
{}

ACE_INLINE
::IOP::ServiceContextList_out &
IOP::ServiceContextList_out::operator= (const ::IOP::ServiceContextList_out &p)
{
  this->ptr_ = ACE_const_cast (ServiceContextList_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::IOP::ServiceContextList_out &
IOP::ServiceContextList_out::operator= (ServiceContextList *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
IOP::ServiceContextList_out::operator ::IOP::ServiceContextList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::IOP::ServiceContextList *&
IOP::ServiceContextList_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::IOP::ServiceContextList *
IOP::ServiceContextList_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
IOP::ServiceContext &
IOP::ServiceContextList_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_IOP_TaggedProfile__tao_seq_Octet_I_
#define _TAO_CDR_OP_IOP_TaggedProfile__tao_seq_Octet_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const IOP::TaggedProfile::_tao_seq_Octet &
  );

CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    IOP::TaggedProfile::_tao_seq_Octet &
  );

#endif /* _TAO_CDR_OP_IOP_TaggedProfile__tao_seq_Octet_I_ */

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::TaggedProfile &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.tag) &&
    (strm << _tao_aggregate.profile_data)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::TaggedProfile &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.tag) &&
    (strm >> _tao_aggregate.profile_data)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_IOP_IOR__tao_seq_TaggedProfile_I_
#define _TAO_CDR_OP_IOP_IOR__tao_seq_TaggedProfile_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const IOP::IOR::_tao_seq_TaggedProfile &
  );

CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    IOP::IOR::_tao_seq_TaggedProfile &
  );

#endif /* _TAO_CDR_OP_IOP_IOR__tao_seq_TaggedProfile_I_ */

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::IOR &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.type_id.in ()) &&
    (strm << _tao_aggregate.profiles)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::IOR &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.type_id.out ()) &&
    (strm >> _tao_aggregate.profiles)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_IOP_TaggedComponent__tao_seq_Octet_I_
#define _TAO_CDR_OP_IOP_TaggedComponent__tao_seq_Octet_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const IOP::TaggedComponent::_tao_seq_Octet &
  );

CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    IOP::TaggedComponent::_tao_seq_Octet &
  );

#endif /* _TAO_CDR_OP_IOP_TaggedComponent__tao_seq_Octet_I_ */

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::TaggedComponent &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.tag) &&
    (strm << _tao_aggregate.component_data)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::TaggedComponent &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.tag) &&
    (strm >> _tao_aggregate.component_data)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_IOP_MultipleComponentProfile_I_
#define _TAO_CDR_OP_IOP_MultipleComponentProfile_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const IOP::MultipleComponentProfile &
  );

CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    IOP::MultipleComponentProfile &
  );

#endif /* _TAO_CDR_OP_IOP_MultipleComponentProfile_I_ */

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_IOP_TaggedComponentList_I_
#define _TAO_CDR_OP_IOP_TaggedComponentList_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const IOP::TaggedComponentList &
  );

CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    IOP::TaggedComponentList &
  );

#endif /* _TAO_CDR_OP_IOP_TaggedComponentList_I_ */

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_IOP_TaggedComponentSeq_I_
#define _TAO_CDR_OP_IOP_TaggedComponentSeq_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const IOP::TaggedComponentSeq &
  );

CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    IOP::TaggedComponentSeq &
  );

#endif /* _TAO_CDR_OP_IOP_TaggedComponentSeq_I_ */

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_IOP_ServiceContext__tao_seq_Octet_I_
#define _TAO_CDR_OP_IOP_ServiceContext__tao_seq_Octet_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const IOP::ServiceContext::_tao_seq_Octet &
  );

CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    IOP::ServiceContext::_tao_seq_Octet &
  );

#endif /* _TAO_CDR_OP_IOP_ServiceContext__tao_seq_Octet_I_ */

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IOP::ServiceContext &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.context_id) &&
    (strm << _tao_aggregate.context_data)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IOP::ServiceContext &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.context_id) &&
    (strm >> _tao_aggregate.context_data)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// C:\work\ACE+TAO\Branch\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_IOP_ServiceContextList_I_
#define _TAO_CDR_OP_IOP_ServiceContextList_I_

CORBA::Boolean TAO_Export operator<< (
    TAO_OutputCDR &,
    const IOP::ServiceContextList &
  );

CORBA::Boolean TAO_Export operator>> (
    TAO_InputCDR &,
    IOP::ServiceContextList &
  );

#endif /* _TAO_CDR_OP_IOP_ServiceContextList_I_ */

