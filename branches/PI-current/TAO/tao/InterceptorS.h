/* -*- C++ -*- $Id$ */

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef _TAO_IDL_INTERCEPTORS_H_
#define _TAO_IDL_INTERCEPTORS_H_

#include "InterceptorC.h"


#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#if defined(_MSC_VER)
#pragma warning(disable:4250)
#endif /* _MSC_VER */

TAO_NAMESPACE  POA_PortableInterceptor
{
  class Cookie;
  typedef Cookie *Cookie_ptr;
  class TAO_Export Cookie :  public virtual TAO_Local_ServantBase
  {
  protected:
    Cookie (void);

  public:
    virtual ~Cookie (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    PortableInterceptor::Cookie *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual char * myname (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;


  };


#if !defined (_PORTABLEINTERCEPTOR_COOKIE___DIRECT_COLLOCATED_SH_)
#define _PORTABLEINTERCEPTOR_COOKIE___DIRECT_COLLOCATED_SH_

  class TAO_Export _tao_direct_collocated_Cookie     : public virtual PortableInterceptor::Cookie
  {
  public:
    _tao_direct_collocated_Cookie (
        Cookie_ptr  servant,
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    Cookie_ptr _get_servant (void) const;

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual char * myname (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));


  private:
    Cookie_ptr servant_;
  };


#endif /* end #if !defined */


  class RequestInfo;
  typedef RequestInfo *RequestInfo_ptr;
  class TAO_Export RequestInfo :  public virtual TAO_Local_ServantBase
  {
  protected:
    RequestInfo (void);

  public:
    virtual ~RequestInfo (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    PortableInterceptor::RequestInfo *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::ULong get_request_id (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual CORBA::Boolean response_expected (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual IOP::ServiceContextList * get_service_contexts (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual CORBA::Boolean set_service_contexts (
        const IOP::ServiceContextList & sc
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual CORBA::Object_ptr get_object (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual char * get_operation (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual CORBA::NVList_ptr get_arguments (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual CORBA::Boolean set_arguments (
        CORBA::NVList_ptr args
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;


  };


#if !defined (_PORTABLEINTERCEPTOR_REQUESTINFO___DIRECT_COLLOCATED_SH_)
#define _PORTABLEINTERCEPTOR_REQUESTINFO___DIRECT_COLLOCATED_SH_

  class TAO_Export _tao_direct_collocated_RequestInfo     : public virtual PortableInterceptor::RequestInfo
  {
  public:
    _tao_direct_collocated_RequestInfo (
        RequestInfo_ptr  servant,
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    RequestInfo_ptr _get_servant (void) const;

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::ULong get_request_id (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean response_expected (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IOP::ServiceContextList * get_service_contexts (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean set_service_contexts (
        const IOP::ServiceContextList & sc
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Object_ptr get_object (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual char * get_operation (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::NVList_ptr get_arguments (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean set_arguments (
        CORBA::NVList_ptr args
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));


  private:
    RequestInfo_ptr servant_;
  };


#endif /* end #if !defined */


  class Interceptor;
  typedef Interceptor *Interceptor_ptr;
  class TAO_Export Interceptor :  public virtual TAO_Local_ServantBase
  {
  protected:
    Interceptor (void);

  public:
    virtual ~Interceptor (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    PortableInterceptor::Interceptor *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual char * name (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;


  };


#if !defined (_PORTABLEINTERCEPTOR_INTERCEPTOR___DIRECT_COLLOCATED_SH_)
#define _PORTABLEINTERCEPTOR_INTERCEPTOR___DIRECT_COLLOCATED_SH_

  class TAO_Export _tao_direct_collocated_Interceptor     : public virtual PortableInterceptor::Interceptor
  {
  public:
    _tao_direct_collocated_Interceptor (
        Interceptor_ptr  servant,
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    Interceptor_ptr _get_servant (void) const;

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual char * name (

      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));


  private:
    Interceptor_ptr servant_;
  };


#endif /* end #if !defined */


  class ServerRequestInterceptor;
  typedef ServerRequestInterceptor *ServerRequestInterceptor_ptr;
  class TAO_Export ServerRequestInterceptor : public virtual Interceptor
  {
  protected:
    ServerRequestInterceptor (void);

  public:
    virtual ~ServerRequestInterceptor (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    PortableInterceptor::ServerRequestInterceptor *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual void preinvoke (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual void postinvoke (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual void exception_occurred (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;


  };


#if !defined (_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR___DIRECT_COLLOCATED_SH_)
#define _PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR___DIRECT_COLLOCATED_SH_

  class TAO_Export _tao_direct_collocated_ServerRequestInterceptor     : public virtual PortableInterceptor::ServerRequestInterceptor,
      public virtual _tao_direct_collocated_Interceptor
  {
  public:
    _tao_direct_collocated_ServerRequestInterceptor (
        ServerRequestInterceptor_ptr  servant,
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    ServerRequestInterceptor_ptr _get_servant (void) const;

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual void preinvoke (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void postinvoke (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void exception_occurred (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));


  private:
    ServerRequestInterceptor_ptr servant_;
  };


#endif /* end #if !defined */


  class ClientRequestInterceptor;
  typedef ClientRequestInterceptor *ClientRequestInterceptor_ptr;
  class TAO_Export ClientRequestInterceptor : public virtual Interceptor
  {
  protected:
    ClientRequestInterceptor (void);

  public:
    virtual ~ClientRequestInterceptor (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    PortableInterceptor::ClientRequestInterceptor *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual void preinvoke (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual void postinvoke (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    virtual void exception_occurred (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;


  };


#if !defined (_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR___DIRECT_COLLOCATED_SH_)
#define _PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR___DIRECT_COLLOCATED_SH_

  class TAO_Export _tao_direct_collocated_ClientRequestInterceptor     : public virtual PortableInterceptor::ClientRequestInterceptor,
      public virtual _tao_direct_collocated_Interceptor
  {
  public:
    _tao_direct_collocated_ClientRequestInterceptor (
        ClientRequestInterceptor_ptr  servant,
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    ClientRequestInterceptor_ptr _get_servant (void) const;

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual void preinvoke (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void postinvoke (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void exception_occurred (
        PortableInterceptor::RequestInfo_ptr & ri,
        PortableInterceptor::Cookies & ck
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));


  private:
    ClientRequestInterceptor_ptr servant_;
  };


#endif /* end #if !defined */


}
TAO_NAMESPACE_CLOSE

#if defined(_MSC_VER)
#pragma warning(default:4250)
#endif /* _MSC_VER */

#endif /* ifndef */
