Fri Mar 21 21:13:32 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        Trying to be frugal and save space by packing the SR after a call
        to remove() causes problems with relocating dependent
        services. For the relocation to work, we cache the index where the
        next service will be inserted. If something, in the mean time
        removes a service (and packs the storage) it might prevent some
        services from relocation. In turn, it causes finalization problems
        because the non-relocated services may end up in prematurely
        unmapped memory. See TAO/tests/DLL_ORB for use case.

        * ace/Service_Repository.cpp:

        Changed remove() to eliminate the "packing" code and updated the
        few other methods, which assumed there are no "gaps" in the
        service storage.

Thu Mar 20 19:42:06 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        The legacy implementation of the SR ordered the services, based on
        the time of insertion. Later this was changed because the new DLL
        unloading functionality caused crashes as services dependent on a
        DLL were being unloaded prematurely. The change was based on
        Service_Type_Dynamic_Guard stack based instances, capturing the
        intended position of a DLL-based service. As the DLL service
        loaded, it was purposely inserted at the saved position.  Combined
        with a reversing the order of finalization, that _almost_ worked.

        Later, the concept was enhanced with a mechanism that relies on
        the DLL_Handle's reference counting to keep a DLL mapped in memory
        until any dependent services were finalized. This eliminated the
        need to artificially reorder the services, but the code to do that
        remained active.

        However, inserting the first DLL service before any dependents,
        caused its finalization to be performed last. This prevents the
        service itself from being able to refer to its own dependent
        services (if any). The problem was illustrated by Bug #3251. This
        change removes the artificial reordering of dependent services.

        * ace/Service_Gestalt.h:
        * ace/Service_Gestalt.cpp:

        Simplified Service_Type_Dynamic_Guard.

        * ace/Service_Repository.h:
        * ace/Service_Repository.cpp:

        Simplified relocate_i() and fixed an error that was causing it to
        choose incorrect ranges of service indexes to relocate.
        Eliminated the boolean static_only parameter as it was always
        being set to true.

Tue Mar 11 04:08:21 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/OS_NS_unistd.cpp:

        ACE_OS::argv_to_string is limited in its choice of what to quote
        when quoting is required. It must quote not only when the arg
        contains a space, but also if it is an empty string or some other
        common control characters.

Wed Mar  5 19:31:36 UTC 2008  Iliyan Jeliazkov  <fi326c@ociweb.com>

        * ace/ARGV.h:
        * ace/ARGV.cpp:

        Introducing a ctor that takes the number of parameters in argv
        thus eliminating the requirement to have argv 0-terminated.  This
        requirement can be a hard to satisfy in cases where the argv has
        been "manualy constructed", i.e. not provided by the OS
        environment.

        * ace/OS_NS_unistd.h:
        * ace/OS_NS_unistd.cpp:

        Introducing new argv_to_string which takes an explicit argc
        argument and relaxes the requirement on argv (to be 0-terminated).

Mon Mar  3 00:25:37 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Dynamic_Service.h:
        * ace/Dynamic_Service.cpp:
        * ace/Dynamic_Service_Base.h:
        * ace/Dynamic_Service_Base.cpp:
        * ace/Service_Config.h:
        * ace/Service_Config.inl:
        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.h:
        * ace/Service_Gestalt.inl:
        * ace/Service_Gestalt.cpp:

        Expanding the interface of process_directives() and parse_args_i()
        with a parameter used to return information whether the standard
        svc.conf file must be ignored, due to explicitely specified
        configuration file. The open_i() method now passes this piece of
        information to process_directives(). Reversing the "naked" pointer
        replacement as it causes unexpected reference counting issues with
        stack-allocated instances on SC.

Fri Feb 29 03:07:36 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Dynamic_Service.h:
        * ace/Dynamic_Service.cpp:
        * ace/Dynamic_Service_Base.h:
        * ace/Dynamic_Service_Base.cpp:
        * ace/Service_Config.h:
        * ace/Service_Config.inl:
        * ace/Service_Config.cpp:

        Replacing the "naked" ACE_Service_Gestalt* with the "smart"
        equivivalent.

        * ace/Service_Gestalt.h:
        * ace/Service_Gestalt.inl:
        * ace/Service_Gestalt.cpp:

        Expanding the interface of parse_args_i() with a parameter used to
        return information whether the standard svc.conf file must be
        ignored, due to explicitely specified configuration file. The
        open_i() method now passes this piece of information to
        process_directives().

Wed Feb 27 14:57:50 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/Bug_2980_Regression_Test.cpp:
        * tests/tests.mpc:

        Replaced the usage of ACE_WIN32 with the platform-specific WIN32
        since the driver is ACE-unaware application. Updated the test to
        compile cleanly on Windows.

Tue Feb 26 13:36:47 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/Bug_2980_Regression_Dll.cpp:
        * tests/Bug_2980_Regression_Test.cpp:
        * tests/tests.mpc:

        The driver is a non-ACE executable (by design) and it doesn't have
        the "standard" output stream of an ACE test. Therefore it is not
        producing a test log file, which the test framework interprets as
        an error. Changed the ACE-based DLL part to do the proper magic.

Tue Feb 26 02:42:23 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/Bug_2980_Regression_Test.cpp:

        Fixing a compile problem on Windows

Sun Feb 24 23:11:04 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Unbounded_Queue.cpp:

        Reverted the last change since no other member function could
        account for making head_ a 0. Interestingly, after removing the
        code explicitely settiong head_ to 0 from the dtor the problem
        "went away". Now, the test mentioned previosly works. WTF?

Sat Feb 23 03:34:30 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Unbounded_Queue.cpp:

        This one will be tough to explain easily. Adding a check for head
        != 0 before trying to dereference it. The background is that
        TAO/orbsvcs/tests/Notify/Ordering test is using a static instance
        of Routing_Slip_Queue (orbsvcs/Notify), which is being destroyed
        upon process termination. This is bad in itself because it causes
        indeterminism of the process behavior. The problem still lies with
        Unbounded_Queue though, because it was assumming the head_ member
        is _always_ != 0. This however doesn't hold true, for example
        perhaps by calling dequeue_head() enough times.

        * bin/diff-builds.py:

        Simplified argument passing and parsing.

Fri Feb 22 13:29:29 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * bin/diff-builds.py:

        Fixed a bug causing confusion with the datestamps available for
        comparison

        * tests/Bug_2980_Regression_Dll.cpp:
        * tests/Bug_2980_Regression_Test.cpp:
        * tests/run_test.lst:
        * tests/tests.mpc:

        Addded a test for bug 2980. Thanks to Lothar Werzinger <lothar at
        tradescape biz> for contributing the code.

Wed Feb 20 15:05:01 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/Intrusive_Auto_Ptr_Test.cpp:

        Fixed a compiler warning about unused parameter to main()

        * tests/Object_Manager_Flipping_Test.cpp:

        ACE::{init,fini} may or may not destroy the default service
        configuration context. The behavior is platform dependent, based
        on how ACE has been initialized. Windows main() is modified to
        automatically call ACE::{init,fini} while *nix (generally)
        isn't. In the first case, the test's (second) ACE::init is
        ignored. While in the latter case, the tests ACE::init and
        ACE::fini actually perform work and completely destroy the Object
        Manager.

Tue Feb 19 21:00:00 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Service_Config.h:

        Reinstated the Service_Gestalt #include to placate the VC8
        compiler on Windows, which apparently cannot typedef a template
        instantiation without being able to see the full definition of the
        participating types.

Tue Feb 19 02:38:02 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Base_Thread_Adapter.h:
        * ace/Base_Thread_Adapter.cpp:
        * ace/OS_Thread_Adapter.h:
        * ace/OS_Thread_Adapter.cpp:

        Moved the gestalt-setting code to the base thread adapter class
        to ensure all descendants behave uniformly.

        * bin/diff-builds.py:

        Added file caching and debugging.

Sun Feb 17 23:43:43 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/OS_Thread_Adapter.h:
        * ace/OS_Thread_Adapter.cpp:

        Added a pointer instance member, which the ctor intializes with
        the "current" service configuration context (gestalt). Current
        means the one active in the "parent" thread. The invoke() method,
        which runs in the new thread and uses the stored value to
        initialize its own configuration context. This scheme ensures any
        newly spawned thread would inherit the spawning thread's gestalt.

        * ace/Service_Config.h:
        * ace/Service_Config.cpp:

        Encapsulated thread-specific key operations within a new
        ACE_Threading_Helper class. It is designed to be used as an
        instance member in ACE_Service_Config.

        * ace/Service_Gestalt.cpp:

        Moved the functionality dealing with the default service
        configuration file from ACE_Service_Config::open_i() to
        ACE_Service_Gestalt::open_i() which fixes an issue with some
        application that inadverently ignored svc.conf's content (unless
        explicitely calling ACE_Service_Config::open())

        * ace/Parse_Node.h:
        * ace/Service_Config.inl:

        Updated the #include directive.

Fri Dec 28 22:17:18 UTC 2007  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Dynamic_Service.h:
        * ace/Dynamic_Service.cpp:
        * ace/Dynamic_Service_Base.h:
        * ace/Dynamic_Service_Base.cpp:
        * ace/Dynamic_Service_Dependency.cpp:
        * ace/Service_Config.h:
        * ace/Service_Config.inl:
        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.cpp:
        * ace/Thread_Adapter.cpp:

        Changed the Service Config interfaces back to using plain pointers
        instead of auto pointers for passing the Service Gestalt instances
        in and out. The lifecycle of SG's is determined by the lifecycle
        of SC instance. Anyone else willing to keep a reference should use
        the Intrusive_Auto_Ptr template to capitalize on and participate
        in the reference counting of SG's

Thu Dec 27 15:06:37 UTC 2007  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Intrusive_Auto_Ptr.inl:
        * ace/Service_Config.inl:
        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.cpp:

        Started refcount in SG at 0.

Tue Dec 25 14:04:22 UTC 2007  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Intrusive_Auto_Ptr.inl:
        * ace/Service_Config.inl:
        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.h:
        * ace/Service_Gestalt.cpp:

        Refining the reference count mechanism for SC

Mon Dec 17 16:03:22 UTC 2007  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * .:

        Started tracking the trunk with svnmerge.

        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.h:
        * ace/Service_Gestalt.cpp:
        * ace/String_Base.cpp:

        Working on the reference count mechanism

Sun Dec 16 20:48:39 UTC 2007  Iliyan Jeliazkov  <iliyan@ociweb.com>

        Changed the Service Config to use the PIMPL pattern instead of
        inheriting from Service Gestalt. This allowed the use of a
        reference counting to manage the lifetime of a Gestalt. This
        begins to solve the problem discussed in in bugzilla 2980, whereby
        the root service configuration context (gestalt) may end up being
        finalized either by the main thread, or by the thread specific
        storage cleanup.

        Added an intrusive auto pointer implementation. It is a reference
        counted auto pointer that can be used for types with explicit
        reference management implementations. Updated interfaces to use
        the new ref-counted gestalt.

        * ace/Dynamic_Service.h:
        * ace/Dynamic_Service.inl:
        * ace/Dynamic_Service.cpp:
        * ace/Dynamic_Service_Base.h:
        * ace/Dynamic_Service_Base.cpp:
        * ace/Dynamic_Service_Dependency.cpp:
        * ace/Intrusive_Auto_Ptr.h:
        * ace/Intrusive_Auto_Ptr.inl:
        * ace/Intrusive_Auto_Ptr.cpp:
        * ace/Refcounted_Auto_Ptr.h:
        * ace/Refcounted_Auto_Ptr.inl:
        * ace/Service_Config.h:
        * ace/Service_Config.inl:
        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.h:
        * ace/Service_Gestalt.cpp:
        * ace/Thread_Adapter.cpp:
        * ace/ace.mpc:

        * tests/Intrusive_Auto_Ptr_Test.cpp:

        Added a new test for the intrusive reference counted auto pointer.

        * tests/Object_Manager_Flipping_Test.cpp:
        * tests/tests.mpc:

        Updated to use the intrusive auto pointer


Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ"))
(set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
