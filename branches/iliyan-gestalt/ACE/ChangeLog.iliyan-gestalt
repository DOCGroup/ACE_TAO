Sun Feb 17 23:43:43 UTC 2008  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/OS_Thread_Adapter.h:
        * ace/OS_Thread_Adapter.cpp:

        Added a pointer instance member, which the ctor intializes with
        the "current" service configuration context (gestalt). Current
        means the one active in the "parent" thread. The invoke() method,
        which runs in the new thread and uses the stored value to
        initialize its own configuration context. This scheme ensures any
        newly spawned thread would inherit the spawning thread's gestalt.

        * ace/Service_Config.h:
        * ace/Service_Config.cpp:

        Encapsulated thread-specific key operations within a new
        ACE_Threading_Helper class. It is designed to be used as an
        instance member in ACE_Service_Config.

        * ace/Service_Gestalt.cpp:

        Moved the functionality dealing with the default service
        configuration file from ACE_Service_Config::open_i() to
        ACE_Service_Gestalt::open_i() which fixes an issue with some
        application that inadverently ignored svc.conf's content (unless
        explicitely calling ACE_Service_Config::open())

        * ace/Parse_Node.h:

        Updated the #include directive.

Fri Dec 28 22:17:18 UTC 2007  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Dynamic_Service.h:
        * ace/Dynamic_Service.cpp:
        * ace/Dynamic_Service_Base.h:
        * ace/Dynamic_Service_Base.cpp:
        * ace/Dynamic_Service_Dependency.cpp:
        * ace/Service_Config.h:
        * ace/Service_Config.inl:
        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.cpp:
        * ace/Thread_Adapter.cpp:

        Changed the Service Config interfaces back to using plain pointers
        instead of auto pointers for passing the Service Gestalt instances
        in and out. The lifecycle of SG's is determined by the lifecycle
        of SC instance. Anyone else willing to keep a reference should use
        the Intrusive_Auto_Ptr template to capitalize on and participate
        in the reference counting of SG's

Thu Dec 27 15:06:37 UTC 2007  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Intrusive_Auto_Ptr.inl:
        * ace/Service_Config.inl:
        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.cpp:

        Started refcount in SG at 0.

Tue Dec 25 14:04:22 UTC 2007  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * ace/Intrusive_Auto_Ptr.inl:
        * ace/Service_Config.inl:
        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.h:
        * ace/Service_Gestalt.cpp:

        Refining the reference count mechanism for SC

Mon Dec 17 16:03:22 UTC 2007  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * .:

        Started tracking the trunk with svnmerge.

        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.h:
        * ace/Service_Gestalt.cpp:
        * ace/String_Base.cpp:

        Working on the reference count mechanism

Sun Dec 16 20:48:39 UTC 2007  Iliyan Jeliazkov  <iliyan@ociweb.com>

        Changed the Service Config to use the PIMPL pattern instead of
        inheriting from Service Gestalt. This allowed the use of a
        reference counting to manage the lifetime of a Gestalt. This
        begins to solve the problem discussed in in bugzilla 2980, whereby
        the root service configuration context (gestalt) may end up being
        finalized either by the main thread, or by the thread specific
        storage cleanup.

        Added an intrusive auto pointer implementation. It is a reference
        counted auto pointer that can be used for types with explicit
        reference management implementations. Updated interfaces to use
        the new ref-counted gestalt.

        * ace/Dynamic_Service.h:
        * ace/Dynamic_Service.inl:
        * ace/Dynamic_Service.cpp:
        * ace/Dynamic_Service_Base.h:
        * ace/Dynamic_Service_Base.cpp:
        * ace/Dynamic_Service_Dependency.cpp:
        * ace/Intrusive_Auto_Ptr.h:
        * ace/Intrusive_Auto_Ptr.inl:
        * ace/Intrusive_Auto_Ptr.cpp:
        * ace/Refcounted_Auto_Ptr.h:
        * ace/Refcounted_Auto_Ptr.inl:
        * ace/Service_Config.h:
        * ace/Service_Config.inl:
        * ace/Service_Config.cpp:
        * ace/Service_Gestalt.h:
        * ace/Service_Gestalt.cpp:
        * ace/Thread_Adapter.cpp:
        * ace/ace.mpc:

        * tests/Intrusive_Auto_Ptr_Test.cpp:

        Added a new test for the intrusive reference counted auto pointer.

        * tests/Object_Manager_Flipping_Test.cpp:
        * tests/tests.mpc:

        Updated to use the intrusive auto pointer
