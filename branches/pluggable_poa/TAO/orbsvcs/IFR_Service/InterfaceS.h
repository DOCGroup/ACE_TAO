/* -*- C++ -*- */
// $Id$

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO and the TAO IDL Compiler have been developed by the Center for
// Distributed Object Computing at Washington University, St. Louis.
//
// Information about TAO is available at:
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

// Contains all skeleton header code generated from Interface.idl
// except that for CORBA::IRObject and CORBA::TypeCodeFactory, which
// is included in tao/POA_CORBA.h

#ifndef TAO_IDL_INTERFACES_H
#define TAO_IDL_INTERFACES_H
#include "ace/pre.h"

#include "tao/PortableSerer/POA_CORBA.h"
#include "tao/PortableServer/Operation_Table.h"
#include "tao/PortableServer/Object_Adapter.h"
#include "tao/Stub.h"
#include "tao/ORB_Core.h"
#include "tao/Server_Request.h"
#include "tao/NVList.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

TAO_NAMESPACE  POA_IR
{
  class Contained;
  typedef Contained *Contained_ptr;
  class Contained : public virtual POA_CORBA::IRObject
  {
  protected:
    Contained (void);

  public:
    Contained (const Contained& rhs);
    virtual ~Contained (void);

    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::Contained *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_id_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_id_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_name_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_name_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_version_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_version_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_defined_in_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void describe_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void move_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_CONTAINED___THRU_POA_COLLOCATED_SH_)
#define _IR_CONTAINED___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_Contained     : public virtual ::IR::Contained,
      public virtual POA_CORBA::_tao_thru_poa_collocated_IRObject
  {
  public:
    _tao_thru_poa_collocated_Contained (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class Contained_tie : public Contained
  {
  public:
    Contained_tie (T &t);
    // the T& ctor
    Contained_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    Contained_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    Contained_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~Contained_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    Contained_tie (const Contained_tie &);
    void operator= (const Contained_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class Container;
  typedef Container *Container_ptr;
  class Container : public virtual POA_CORBA::IRObject
  {
  protected:
    Container (void);

  public:
    Container (const Container& rhs);
    virtual ~Container (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::Container *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void lookup_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void contents_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void lookup_name_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void describe_contents_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_module_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_constant_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_struct_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_union_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_enum_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_alias_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_interface_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_value_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_value_box_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_exception_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_native_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_CONTAINER___THRU_POA_COLLOCATED_SH_)
#define _IR_CONTAINER___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_Container     : public virtual ::IR::Container,
      public virtual POA_CORBA::_tao_thru_poa_collocated_IRObject
  {
  public:
    _tao_thru_poa_collocated_Container (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class Container_tie : public Container
  {
  public:
    Container_tie (T &t);
    // the T& ctor
    Container_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    Container_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    Container_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~Container_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    Container_tie (const Container_tie &);
    void operator= (const Container_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class IDLType;
  typedef IDLType *IDLType_ptr;
  class IDLType : public virtual POA_CORBA::IRObject
  {
  protected:
    IDLType (void);

  public:
    IDLType (const IDLType& rhs);
    virtual ~IDLType (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::IDLType *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_type_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_IDLTYPE___THRU_POA_COLLOCATED_SH_)
#define _IR_IDLTYPE___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_IDLType     : public virtual ::IR::IDLType,
      public virtual POA_CORBA::_tao_thru_poa_collocated_IRObject
  {
  public:
    _tao_thru_poa_collocated_IDLType (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class IDLType_tie : public IDLType
  {
  public:
    IDLType_tie (T &t);
    // the T& ctor
    IDLType_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    IDLType_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    IDLType_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~IDLType_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    IDLType_tie (const IDLType_tie &);
    void operator= (const IDLType_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class Repository;
  typedef Repository *Repository_ptr;
  class Repository : public virtual Container
  {
  protected:
    Repository (void);

  public:
    Repository (const Repository& rhs);
    virtual ~Repository (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::Repository *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::Contained_ptr lookup_id (
        const char * search_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void lookup_id_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::TypeCode_ptr get_canonical_typecode (
        CORBA::TypeCode_ptr tc,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_canonical_typecode_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::PrimitiveDef_ptr get_primitive (
        IR::PrimitiveKind kind,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void get_primitive_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::StringDef_ptr create_string (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_string_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::WstringDef_ptr create_wstring (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_wstring_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::SequenceDef_ptr create_sequence (
        CORBA::ULong bound,
        IR::IDLType_ptr element_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_sequence_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ArrayDef_ptr create_array (
        CORBA::ULong length,
        IR::IDLType_ptr element_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_array_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::FixedDef_ptr create_fixed (
        CORBA::UShort digits,
        CORBA::Short scale,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_fixed_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void lookup_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_module_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_union_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_native_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_REPOSITORY___THRU_POA_COLLOCATED_SH_)
#define _IR_REPOSITORY___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_Repository     : public virtual ::IR::Repository,
      public virtual _tao_thru_poa_collocated_Container
  {
  public:
    _tao_thru_poa_collocated_Repository (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::Contained_ptr lookup_id (
        const char * search_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::TypeCode_ptr get_canonical_typecode (
        CORBA::TypeCode_ptr tc,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::PrimitiveDef_ptr get_primitive (
        IR::PrimitiveKind kind,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::StringDef_ptr create_string (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::WstringDef_ptr create_wstring (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::SequenceDef_ptr create_sequence (
        CORBA::ULong bound,
        IR::IDLType_ptr element_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ArrayDef_ptr create_array (
        CORBA::ULong length,
        IR::IDLType_ptr element_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::FixedDef_ptr create_fixed (
        CORBA::UShort digits,
        CORBA::Short scale,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class Repository_tie : public virtual Repository,
                         public virtual PortableServer::RefCountServantBase
  {
  public:
    Repository_tie (T &t);
    // the T& ctor
    Repository_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    Repository_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    Repository_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~Repository_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::Contained_ptr lookup_id (
        const char * search_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr get_canonical_typecode (
        CORBA::TypeCode_ptr tc,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::PrimitiveDef_ptr get_primitive (
        IR::PrimitiveKind kind,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StringDef_ptr create_string (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::WstringDef_ptr create_wstring (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::SequenceDef_ptr create_sequence (
        CORBA::ULong bound,
        IR::IDLType_ptr element_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ArrayDef_ptr create_array (
        CORBA::ULong length,
        IR::IDLType_ptr element_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::FixedDef_ptr create_fixed (
        CORBA::UShort digits,
        CORBA::Short scale,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    Repository_tie (const Repository_tie &);
    void operator= (const Repository_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ComponentRepository;
  typedef ComponentRepository *ComponentRepository_ptr;
  class ComponentRepository : public virtual Repository
  {
  protected:
    ComponentRepository (void);

  public:
    ComponentRepository (const ComponentRepository& rhs);
    virtual ~ComponentRepository (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ComponentRepository *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::ComponentDef_ptr create_component (
        const char * id,
        const char * name,
        const char * version,
        IR::ComponentDef_ptr base_component,
        const IR::InterfaceDefSeq & supports_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_component_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::HomeDef_ptr create_home (
        const char * id,
        const char * name,
        const char * version,
        IR::HomeDef_ptr base_home,
        IR::ComponentDef_ptr managed_component,
        IR::ValueDef_ptr primary_key,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_home_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void lookup_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void get_canonical_typecode_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void get_primitive_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_string_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_wstring_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_sequence_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_array_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_fixed_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_module_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_union_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_native_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_COMPONENTREPOSITORY___THRU_POA_COLLOCATED_SH_)
#define _IR_COMPONENTREPOSITORY___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ComponentRepository     : public virtual ::IR::ComponentRepository,
      public virtual _tao_thru_poa_collocated_Repository
  {
  public:
    _tao_thru_poa_collocated_ComponentRepository (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::ComponentDef_ptr create_component (
        const char * id,
        const char * name,
        const char * version,
        IR::ComponentDef_ptr base_component,
        const IR::InterfaceDefSeq & supports_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::HomeDef_ptr create_home (
        const char * id,
        const char * name,
        const char * version,
        IR::HomeDef_ptr base_home,
        IR::ComponentDef_ptr managed_component,
        IR::ValueDef_ptr primary_key,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ComponentRepository_tie
    : public virtual ComponentRepository,
      public virtual PortableServer::RefCountServantBase
  {
  public:
    ComponentRepository_tie (T &t);
    // the T& ctor
    ComponentRepository_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ComponentRepository_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ComponentRepository_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ComponentRepository_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::ComponentDef_ptr create_component (
        const char * id,
        const char * name,
        const char * version,
        IR::ComponentDef_ptr base_component,
        const IR::InterfaceDefSeq & supports_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::HomeDef_ptr create_home (
        const char * id,
        const char * name,
        const char * version,
        IR::HomeDef_ptr base_home,
        IR::ComponentDef_ptr managed_component,
        IR::ValueDef_ptr primary_key,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained_ptr lookup_id (
        const char * search_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr get_canonical_typecode (
        CORBA::TypeCode_ptr tc,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::PrimitiveDef_ptr get_primitive (
        IR::PrimitiveKind kind,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StringDef_ptr create_string (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::WstringDef_ptr create_wstring (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::SequenceDef_ptr create_sequence (
        CORBA::ULong bound,
        IR::IDLType_ptr element_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ArrayDef_ptr create_array (
        CORBA::ULong length,
        IR::IDLType_ptr element_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::FixedDef_ptr create_fixed (
        CORBA::UShort digits,
        CORBA::Short scale,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ComponentRepository_tie (const ComponentRepository_tie &);
    void operator= (const ComponentRepository_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ModuleDef;
  typedef ModuleDef *ModuleDef_ptr;
  class ModuleDef : public virtual Container, public virtual Contained
  {
  protected:
    ModuleDef (void);

  public:
    ModuleDef (const ModuleDef& rhs);
    virtual ~ModuleDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ModuleDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    static void lookup_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_module_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_union_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_native_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_MODULEDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_MODULEDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ModuleDef     : public virtual ::IR::ModuleDef,
      public virtual _tao_thru_poa_collocated_Container,
      public virtual _tao_thru_poa_collocated_Contained
  {
  public:
    _tao_thru_poa_collocated_ModuleDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

      };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ModuleDef_tie : public ModuleDef
  {
  public:
    ModuleDef_tie (T &t);
    // the T& ctor
    ModuleDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ModuleDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ModuleDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ModuleDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ModuleDef_tie (const ModuleDef_tie &);
    void operator= (const ModuleDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ConstantDef;
  typedef ConstantDef *ConstantDef_ptr;
  class ConstantDef : public virtual Contained
  {
  protected:
    ConstantDef (void);

  public:
    ConstantDef (const ConstantDef& rhs);
    virtual ~ConstantDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ConstantDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_type_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::IDLType_ptr type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void type_def (
        IR::IDLType_ptr type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Any * value (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_value_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void value (
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_value_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_CONSTANTDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_CONSTANTDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ConstantDef     : public virtual ::IR::ConstantDef,
      public virtual _tao_thru_poa_collocated_Contained
  {
  public:
    _tao_thru_poa_collocated_ConstantDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::IDLType_ptr type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void type_def (
        IR::IDLType_ptr type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Any * value (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void value (
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ConstantDef_tie : public ConstantDef
  {
  public:
    ConstantDef_tie (T &t);
    // the T& ctor
    ConstantDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ConstantDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ConstantDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ConstantDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::IDLType_ptr type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void type_def (
        IR::IDLType_ptr type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Any * value (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void value (
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ConstantDef_tie (const ConstantDef_tie &);
    void operator= (const ConstantDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class TypedefDef;
  typedef TypedefDef *TypedefDef_ptr;
  class TypedefDef : public virtual Contained, public virtual IDLType
  {
  protected:
    TypedefDef (void);

  public:
    TypedefDef (const TypedefDef& rhs);
    virtual ~TypedefDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::TypedefDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_TYPEDEFDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_TYPEDEFDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_TypedefDef     : public virtual ::IR::TypedefDef,
      public virtual _tao_thru_poa_collocated_Contained,
      public virtual _tao_thru_poa_collocated_IDLType
  {
  public:
    _tao_thru_poa_collocated_TypedefDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

      };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class TypedefDef_tie : public TypedefDef
  {
  public:
    TypedefDef_tie (T &t);
    // the T& ctor
    TypedefDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    TypedefDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    TypedefDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~TypedefDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    TypedefDef_tie (const TypedefDef_tie &);
    void operator= (const TypedefDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class StructDef;
  typedef StructDef *StructDef_ptr;
  class StructDef : public virtual TypedefDef, public virtual Container
  {
  protected:
    StructDef (void);

  public:
    StructDef (const StructDef& rhs);
    virtual ~StructDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::StructDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::StructMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_members_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void members (
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_members_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void lookup_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_module_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_union_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_native_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_STRUCTDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_STRUCTDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_StructDef     : public virtual ::IR::StructDef,
      public virtual _tao_thru_poa_collocated_TypedefDef,
      public virtual _tao_thru_poa_collocated_Container
  {
  public:
    _tao_thru_poa_collocated_StructDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::StructMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void members (
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class StructDef_tie : public StructDef
  {
  public:
    StructDef_tie (T &t);
    // the T& ctor
    StructDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    StructDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    StructDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~StructDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::StructMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void members (
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    StructDef_tie (const StructDef_tie &);
    void operator= (const StructDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class UnionDef;
  typedef UnionDef *UnionDef_ptr;
  class UnionDef : public virtual TypedefDef, public virtual Container
  {
  protected:
    UnionDef (void);

  public:
    UnionDef (const UnionDef& rhs);
    virtual ~UnionDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::UnionDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::TypeCode_ptr discriminator_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_discriminator_type_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::IDLType_ptr discriminator_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_discriminator_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void discriminator_type_def (
        IR::IDLType_ptr discriminator_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_discriminator_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::UnionMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_members_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void members (
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_members_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void lookup_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_module_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_union_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_native_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_UNIONDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_UNIONDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_UnionDef     : public virtual ::IR::UnionDef,
      public virtual _tao_thru_poa_collocated_TypedefDef,
      public virtual _tao_thru_poa_collocated_Container
  {
  public:
    _tao_thru_poa_collocated_UnionDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::TypeCode_ptr discriminator_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::IDLType_ptr discriminator_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void discriminator_type_def (
        IR::IDLType_ptr discriminator_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::UnionMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void members (
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class UnionDef_tie : public UnionDef
  {
  public:
    UnionDef_tie (T &t);
    // the T& ctor
    UnionDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    UnionDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    UnionDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~UnionDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::TypeCode_ptr discriminator_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::IDLType_ptr discriminator_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void discriminator_type_def (
        IR::IDLType_ptr discriminator_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void members (
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    UnionDef_tie (const UnionDef_tie &);
    void operator= (const UnionDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class EnumDef;
  typedef EnumDef *EnumDef_ptr;
  class EnumDef : public virtual TypedefDef
  {
  protected:
    EnumDef (void);

  public:
    EnumDef (const EnumDef& rhs);
    virtual ~EnumDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::EnumDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::EnumMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_members_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void members (
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_members_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_ENUMDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_ENUMDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_EnumDef     : public virtual ::IR::EnumDef,
      public virtual _tao_thru_poa_collocated_TypedefDef
  {
  public:
    _tao_thru_poa_collocated_EnumDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::EnumMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void members (
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class EnumDef_tie : public EnumDef
  {
  public:
    EnumDef_tie (T &t);
    // the T& ctor
    EnumDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    EnumDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    EnumDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~EnumDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::EnumMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void members (
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    EnumDef_tie (const EnumDef_tie &);
    void operator= (const EnumDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class AliasDef;
  typedef AliasDef *AliasDef_ptr;
  class AliasDef : public virtual TypedefDef
  {
  protected:
    AliasDef (void);

  public:
    AliasDef (const AliasDef& rhs);
    virtual ~AliasDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::AliasDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::IDLType_ptr original_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_original_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void original_type_def (
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_original_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_ALIASDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_ALIASDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_AliasDef     : public virtual ::IR::AliasDef,
      public virtual _tao_thru_poa_collocated_TypedefDef
  {
  public:
    _tao_thru_poa_collocated_AliasDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::IDLType_ptr original_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void original_type_def (
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class AliasDef_tie : public AliasDef
  {
  public:
    AliasDef_tie (T &t);
    // the T& ctor
    AliasDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    AliasDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    AliasDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~AliasDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::IDLType_ptr original_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void original_type_def (
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    AliasDef_tie (const AliasDef_tie &);
    void operator= (const AliasDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class NativeDef;
  typedef NativeDef *NativeDef_ptr;
  class NativeDef : public virtual TypedefDef
  {
  protected:
    NativeDef (void);

  public:
    NativeDef (const NativeDef& rhs);
    virtual ~NativeDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::NativeDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_NATIVEDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_NATIVEDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_NativeDef     : public virtual ::IR::NativeDef,
      public virtual _tao_thru_poa_collocated_TypedefDef
  {
  public:
    _tao_thru_poa_collocated_NativeDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

      };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class NativeDef_tie : public NativeDef
  {
  public:
    NativeDef_tie (T &t);
    // the T& ctor
    NativeDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    NativeDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    NativeDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~NativeDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    NativeDef_tie (const NativeDef_tie &);
    void operator= (const NativeDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class PrimitiveDef;
  typedef PrimitiveDef *PrimitiveDef_ptr;
  class PrimitiveDef : public virtual IDLType
  {
  protected:
    PrimitiveDef (void);

  public:
    PrimitiveDef (const PrimitiveDef& rhs);
    virtual ~PrimitiveDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::PrimitiveDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::PrimitiveKind kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_kind_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_PRIMITIVEDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_PRIMITIVEDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_PrimitiveDef     : public virtual ::IR::PrimitiveDef,
      public virtual _tao_thru_poa_collocated_IDLType
  {
  public:
    _tao_thru_poa_collocated_PrimitiveDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::PrimitiveKind kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class PrimitiveDef_tie : public PrimitiveDef
  {
  public:
    PrimitiveDef_tie (T &t);
    // the T& ctor
    PrimitiveDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    PrimitiveDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    PrimitiveDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~PrimitiveDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::PrimitiveKind kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    PrimitiveDef_tie (const PrimitiveDef_tie &);
    void operator= (const PrimitiveDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class StringDef;
  typedef StringDef *StringDef_ptr;
  class StringDef : public virtual IDLType
  {
  protected:
    StringDef (void);

  public:
    StringDef (const StringDef& rhs);
    virtual ~StringDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::StringDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::ULong bound (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_bound_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void bound (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_bound_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_STRINGDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_STRINGDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_StringDef     : public virtual ::IR::StringDef,
      public virtual _tao_thru_poa_collocated_IDLType
  {
  public:
    _tao_thru_poa_collocated_StringDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::ULong bound (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void bound (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class StringDef_tie : public StringDef
  {
  public:
    StringDef_tie (T &t);
    // the T& ctor
    StringDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    StringDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    StringDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~StringDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::ULong bound (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void bound (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    StringDef_tie (const StringDef_tie &);
    void operator= (const StringDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class WstringDef;
  typedef WstringDef *WstringDef_ptr;
  class WstringDef : public virtual IDLType
  {
  protected:
    WstringDef (void);

  public:
    WstringDef (const WstringDef& rhs);
    virtual ~WstringDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::WstringDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::ULong bound (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_bound_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void bound (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_bound_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_WSTRINGDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_WSTRINGDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_WstringDef     : public virtual ::IR::WstringDef,
      public virtual _tao_thru_poa_collocated_IDLType
  {
  public:
    _tao_thru_poa_collocated_WstringDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::ULong bound (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void bound (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class WstringDef_tie : public WstringDef
  {
  public:
    WstringDef_tie (T &t);
    // the T& ctor
    WstringDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    WstringDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    WstringDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~WstringDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::ULong bound (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void bound (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    WstringDef_tie (const WstringDef_tie &);
    void operator= (const WstringDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class FixedDef;
  typedef FixedDef *FixedDef_ptr;
  class FixedDef : public virtual IDLType
  {
  protected:
    FixedDef (void);

  public:
    FixedDef (const FixedDef& rhs);
    virtual ~FixedDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::FixedDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::UShort digits (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_digits_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void digits (
        CORBA::UShort digits,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_digits_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Short scale (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_scale_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void scale (
        CORBA::Short scale,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_scale_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_FIXEDDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_FIXEDDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_FixedDef     : public virtual ::IR::FixedDef,
      public virtual _tao_thru_poa_collocated_IDLType
  {
  public:
    _tao_thru_poa_collocated_FixedDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::UShort digits (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void digits (
        CORBA::UShort digits,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Short scale (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void scale (
        CORBA::Short scale,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class FixedDef_tie : public FixedDef
  {
  public:
    FixedDef_tie (T &t);
    // the T& ctor
    FixedDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    FixedDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    FixedDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~FixedDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::UShort digits (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void digits (
        CORBA::UShort digits,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Short scale (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void scale (
        CORBA::Short scale,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    FixedDef_tie (const FixedDef_tie &);
    void operator= (const FixedDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class SequenceDef;
  typedef SequenceDef *SequenceDef_ptr;
  class SequenceDef : public virtual IDLType
  {
  protected:
    SequenceDef (void);

  public:
    SequenceDef (const SequenceDef& rhs);
    virtual ~SequenceDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::SequenceDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::ULong bound (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_bound_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void bound (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_bound_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::TypeCode_ptr element_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_element_type_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::IDLType_ptr element_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_element_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void element_type_def (
        IR::IDLType_ptr element_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_element_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_SEQUENCEDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_SEQUENCEDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_SequenceDef     : public virtual ::IR::SequenceDef,
      public virtual _tao_thru_poa_collocated_IDLType
  {
  public:
    _tao_thru_poa_collocated_SequenceDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::ULong bound (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void bound (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::TypeCode_ptr element_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::IDLType_ptr element_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void element_type_def (
        IR::IDLType_ptr element_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class SequenceDef_tie : public SequenceDef
  {
  public:
    SequenceDef_tie (T &t);
    // the T& ctor
    SequenceDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    SequenceDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    SequenceDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~SequenceDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::ULong bound (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void bound (
        CORBA::ULong bound,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr element_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::IDLType_ptr element_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void element_type_def (
        IR::IDLType_ptr element_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    SequenceDef_tie (const SequenceDef_tie &);
    void operator= (const SequenceDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ArrayDef;
  typedef ArrayDef *ArrayDef_ptr;
  class ArrayDef : public virtual IDLType
  {
  protected:
    ArrayDef (void);

  public:
    ArrayDef (const ArrayDef& rhs);
    virtual ~ArrayDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ArrayDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::ULong length (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_length_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void length (
        CORBA::ULong length,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_length_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::TypeCode_ptr element_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_element_type_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::IDLType_ptr element_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_element_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void element_type_def (
        IR::IDLType_ptr element_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_element_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_ARRAYDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_ARRAYDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ArrayDef     : public virtual ::IR::ArrayDef,
      public virtual _tao_thru_poa_collocated_IDLType
  {
  public:
    _tao_thru_poa_collocated_ArrayDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::ULong length (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void length (
        CORBA::ULong length,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::TypeCode_ptr element_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::IDLType_ptr element_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void element_type_def (
        IR::IDLType_ptr element_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ArrayDef_tie : public ArrayDef
  {
  public:
    ArrayDef_tie (T &t);
    // the T& ctor
    ArrayDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ArrayDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ArrayDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ArrayDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::ULong length (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void length (
        CORBA::ULong length,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr element_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::IDLType_ptr element_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void element_type_def (
        IR::IDLType_ptr element_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ArrayDef_tie (const ArrayDef_tie &);
    void operator= (const ArrayDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ExceptionDef;
  typedef ExceptionDef *ExceptionDef_ptr;
  class ExceptionDef : public virtual Contained, public virtual Container
  {
  protected:
    ExceptionDef (void);

  public:
    ExceptionDef (const ExceptionDef& rhs);
    virtual ~ExceptionDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ExceptionDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_type_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::StructMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_members_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void members (
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_members_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_module_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_union_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_native_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_EXCEPTIONDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_EXCEPTIONDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ExceptionDef     : public virtual ::IR::ExceptionDef,
      public virtual _tao_thru_poa_collocated_Contained,
      public virtual _tao_thru_poa_collocated_Container
  {
  public:
    _tao_thru_poa_collocated_ExceptionDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::StructMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void members (
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ExceptionDef_tie : public ExceptionDef
  {
  public:
    ExceptionDef_tie (T &t);
    // the T& ctor
    ExceptionDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ExceptionDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ExceptionDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ExceptionDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructMemberSeq * members (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void members (
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ExceptionDef_tie (const ExceptionDef_tie &);
    void operator= (const ExceptionDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class AttributeDef;
  typedef AttributeDef *AttributeDef_ptr;
  class AttributeDef : public virtual Contained
  {
  protected:
    AttributeDef (void);

  public:
    AttributeDef (const AttributeDef& rhs);
    virtual ~AttributeDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::AttributeDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_type_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::IDLType_ptr type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void type_def (
        IR::IDLType_ptr type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::AttributeMode mode (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_mode_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void mode (
        IR::AttributeMode mode,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_mode_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_ATTRIBUTEDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_ATTRIBUTEDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_AttributeDef     : public virtual ::IR::AttributeDef,
      public virtual _tao_thru_poa_collocated_Contained
  {
  public:
    _tao_thru_poa_collocated_AttributeDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::IDLType_ptr type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void type_def (
        IR::IDLType_ptr type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::AttributeMode mode (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void mode (
        IR::AttributeMode mode,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class AttributeDef_tie : public AttributeDef
  {
  public:
    AttributeDef_tie (T &t);
    // the T& ctor
    AttributeDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    AttributeDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    AttributeDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~AttributeDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::IDLType_ptr type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void type_def (
        IR::IDLType_ptr type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AttributeMode mode (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void mode (
        IR::AttributeMode mode,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    AttributeDef_tie (const AttributeDef_tie &);
    void operator= (const AttributeDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class OperationDef;
  typedef OperationDef *OperationDef_ptr;
  class OperationDef : public virtual Contained
  {
  protected:
    OperationDef (void);

  public:
    OperationDef (const OperationDef& rhs);
    virtual ~OperationDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::OperationDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::TypeCode_ptr result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_result_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::IDLType_ptr result_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_result_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void result_def (
        IR::IDLType_ptr result_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_result_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ParDescriptionSeq * params (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_params_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void params (
        const IR::ParDescriptionSeq & params,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_params_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::OperationMode mode (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_mode_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void mode (
        IR::OperationMode mode,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_mode_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ContextIdSeq * contexts (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_contexts_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void contexts (
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_contexts_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ExceptionDefSeq * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_exceptions_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void exceptions (
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_exceptions_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_OPERATIONDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_OPERATIONDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_OperationDef     : public virtual ::IR::OperationDef,
      public virtual _tao_thru_poa_collocated_Contained
  {
  public:
    _tao_thru_poa_collocated_OperationDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::TypeCode_ptr result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::IDLType_ptr result_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void result_def (
        IR::IDLType_ptr result_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ParDescriptionSeq * params (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void params (
        const IR::ParDescriptionSeq & params,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::OperationMode mode (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void mode (
        IR::OperationMode mode,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ContextIdSeq * contexts (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void contexts (
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ExceptionDefSeq * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void exceptions (
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class OperationDef_tie : public OperationDef
  {
  public:
    OperationDef_tie (T &t);
    // the T& ctor
    OperationDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    OperationDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    OperationDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~OperationDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::TypeCode_ptr result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::IDLType_ptr result_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void result_def (
        IR::IDLType_ptr result_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ParDescriptionSeq * params (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void params (
        const IR::ParDescriptionSeq & params,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::OperationMode mode (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void mode (
        IR::OperationMode mode,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContextIdSeq * contexts (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void contexts (
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDefSeq * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void exceptions (
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    OperationDef_tie (const OperationDef_tie &);
    void operator= (const OperationDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class InterfaceDef;
  typedef InterfaceDef *InterfaceDef_ptr;
  class InterfaceDef : public virtual Container, public virtual Contained, public virtual IDLType
  {
  protected:
    InterfaceDef (void);

  public:
    InterfaceDef (const InterfaceDef& rhs);
    virtual ~InterfaceDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::InterfaceDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::InterfaceDefSeq * base_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_base_interfaces_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void base_interfaces (
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_base_interfaces_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Boolean is_abstract (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_is_abstract_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void is_abstract (
        CORBA::Boolean is_abstract,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_is_abstract_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Boolean is_local (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_is_local_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void is_local (
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_is_local_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Boolean is_a (
        const char * interface_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void is_a_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::AttributeDef_ptr create_attribute (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        IR::AttributeMode mode,
        const IR::ExceptionDefSeq & get_exceptions,
        const IR::ExceptionDefSeq & put_exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_attribute_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::OperationDef_ptr create_operation (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr result,
        IR::OperationMode mode,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_operation_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void lookup_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_module_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_union_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_native_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_INTERFACEDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_INTERFACEDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_InterfaceDef     : public virtual ::IR::InterfaceDef,
      public virtual _tao_thru_poa_collocated_Container,
      public virtual _tao_thru_poa_collocated_Contained,
      public virtual _tao_thru_poa_collocated_IDLType
  {
  public:
    _tao_thru_poa_collocated_InterfaceDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::InterfaceDefSeq * base_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void base_interfaces (
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean is_abstract (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void is_abstract (
        CORBA::Boolean is_abstract,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean is_local (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void is_local (
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean is_a (
        const char * interface_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::AttributeDef_ptr create_attribute (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        IR::AttributeMode mode,
        const IR::ExceptionDefSeq & get_exceptions,
        const IR::ExceptionDefSeq & put_exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::OperationDef_ptr create_operation (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr result,
        IR::OperationMode mode,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class InterfaceDef_tie : public InterfaceDef
  {
  public:
    InterfaceDef_tie (T &t);
    // the T& ctor
    InterfaceDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    InterfaceDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    InterfaceDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~InterfaceDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::InterfaceDefSeq * base_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void base_interfaces (
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_abstract (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void is_abstract (
        CORBA::Boolean is_abstract,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_local (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void is_local (
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_a (
        const char * interface_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AttributeDef_ptr create_attribute (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        IR::AttributeMode mode,
        const IR::ExceptionDefSeq & get_exceptions,
        const IR::ExceptionDefSeq & put_exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::OperationDef_ptr create_operation (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr result,
        IR::OperationMode mode,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    InterfaceDef_tie (const InterfaceDef_tie &);
    void operator= (const InterfaceDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ValueMemberDef;
  typedef ValueMemberDef *ValueMemberDef_ptr;
  class ValueMemberDef : public virtual Contained
  {
  protected:
    ValueMemberDef (void);

  public:
    ValueMemberDef (const ValueMemberDef& rhs);
    virtual ~ValueMemberDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ValueMemberDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_type_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::IDLType_ptr type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void type_def (
        IR::IDLType_ptr type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Visibility access (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_access_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void access (
        CORBA::Visibility access,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_access_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_VALUEMEMBERDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_VALUEMEMBERDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ValueMemberDef     : public virtual ::IR::ValueMemberDef,
      public virtual _tao_thru_poa_collocated_Contained
  {
  public:
    _tao_thru_poa_collocated_ValueMemberDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::IDLType_ptr type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void type_def (
        IR::IDLType_ptr type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Visibility access (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void access (
        CORBA::Visibility access,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ValueMemberDef_tie : public ValueMemberDef
  {
  public:
    ValueMemberDef_tie (T &t);
    // the T& ctor
    ValueMemberDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ValueMemberDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ValueMemberDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ValueMemberDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::IDLType_ptr type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void type_def (
        IR::IDLType_ptr type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Visibility access (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void access (
        CORBA::Visibility access,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ValueMemberDef_tie (const ValueMemberDef_tie &);
    void operator= (const ValueMemberDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ValueDef;
  typedef ValueDef *ValueDef_ptr;
  class ValueDef : public virtual Container, public virtual Contained, public virtual IDLType
  {
  protected:
    ValueDef (void);

  public:
    ValueDef (const ValueDef& rhs);
    virtual ~ValueDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ValueDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::InterfaceDefSeq * supported_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_supported_interfaces_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void supported_interfaces (
        const IR::InterfaceDefSeq & supported_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_supported_interfaces_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::InitializerSeq * initializers (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_initializers_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void initializers (
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_initializers_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ValueDef_ptr base_value (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_base_value_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void base_value (
        IR::ValueDef_ptr base_value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_base_value_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ValueDefSeq * abstract_base_values (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_abstract_base_values_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void abstract_base_values (
        const IR::ValueDefSeq & abstract_base_values,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_abstract_base_values_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Boolean is_abstract (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_is_abstract_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void is_abstract (
        CORBA::Boolean is_abstract,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_is_abstract_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Boolean is_custom (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_is_custom_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void is_custom (
        CORBA::Boolean is_custom,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_is_custom_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Boolean is_truncatable (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_is_truncatable_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void is_truncatable (
        CORBA::Boolean is_truncatable,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_is_truncatable_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Boolean is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void is_a_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ValueMemberDef_ptr create_value_member (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        CORBA::Visibility access,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_value_member_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::AttributeDef_ptr create_attribute (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        IR::AttributeMode mode,
        const IR::ExceptionDefSeq & get_exceptions,
        const IR::ExceptionDefSeq & put_exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_attribute_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::OperationDef_ptr create_operation (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr result,
        IR::OperationMode mode,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_operation_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void lookup_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_module_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_union_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_native_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_VALUEDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_VALUEDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ValueDef     : public virtual ::IR::ValueDef,
      public virtual _tao_thru_poa_collocated_Container,
      public virtual _tao_thru_poa_collocated_Contained,
      public virtual _tao_thru_poa_collocated_IDLType
  {
  public:
    _tao_thru_poa_collocated_ValueDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::InterfaceDefSeq * supported_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void supported_interfaces (
        const IR::InterfaceDefSeq & supported_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::InitializerSeq * initializers (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void initializers (
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ValueDef_ptr base_value (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void base_value (
        IR::ValueDef_ptr base_value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ValueDefSeq * abstract_base_values (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void abstract_base_values (
        const IR::ValueDefSeq & abstract_base_values,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean is_abstract (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void is_abstract (
        CORBA::Boolean is_abstract,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean is_custom (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void is_custom (
        CORBA::Boolean is_custom,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean is_truncatable (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void is_truncatable (
        CORBA::Boolean is_truncatable,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ValueMemberDef_ptr create_value_member (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        CORBA::Visibility access,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::AttributeDef_ptr create_attribute (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        IR::AttributeMode mode,
        const IR::ExceptionDefSeq & get_exceptions,
        const IR::ExceptionDefSeq & put_exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::OperationDef_ptr create_operation (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr result,
        IR::OperationMode mode,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ValueDef_tie : public ValueDef
  {
  public:
    ValueDef_tie (T &t);
    // the T& ctor
    ValueDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ValueDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ValueDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ValueDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::InterfaceDefSeq * supported_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void supported_interfaces (
        const IR::InterfaceDefSeq & supported_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InitializerSeq * initializers (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void initializers (
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr base_value (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void base_value (
        IR::ValueDef_ptr base_value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDefSeq * abstract_base_values (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void abstract_base_values (
        const IR::ValueDefSeq & abstract_base_values,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_abstract (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void is_abstract (
        CORBA::Boolean is_abstract,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_custom (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void is_custom (
        CORBA::Boolean is_custom,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_truncatable (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void is_truncatable (
        CORBA::Boolean is_truncatable,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueMemberDef_ptr create_value_member (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        CORBA::Visibility access,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AttributeDef_ptr create_attribute (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        IR::AttributeMode mode,
        const IR::ExceptionDefSeq & get_exceptions,
        const IR::ExceptionDefSeq & put_exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::OperationDef_ptr create_operation (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr result,
        IR::OperationMode mode,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ValueDef_tie (const ValueDef_tie &);
    void operator= (const ValueDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ValueBoxDef;
  typedef ValueBoxDef *ValueBoxDef_ptr;
  class ValueBoxDef : public virtual TypedefDef
  {
  protected:
    ValueBoxDef (void);

  public:
    ValueBoxDef (const ValueBoxDef& rhs);
    virtual ~ValueBoxDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ValueBoxDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::IDLType_ptr original_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_original_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void original_type_def (
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_original_type_def_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_VALUEBOXDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_VALUEBOXDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ValueBoxDef     : public virtual ::IR::ValueBoxDef,
      public virtual _tao_thru_poa_collocated_TypedefDef
  {
  public:
    _tao_thru_poa_collocated_ValueBoxDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::IDLType_ptr original_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void original_type_def (
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ValueBoxDef_tie : public ValueBoxDef
  {
  public:
    ValueBoxDef_tie (T &t);
    // the T& ctor
    ValueBoxDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ValueBoxDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ValueBoxDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ValueBoxDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::IDLType_ptr original_type_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void original_type_def (
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ValueBoxDef_tie (const ValueBoxDef_tie &);
    void operator= (const ValueBoxDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ProvidesDef;
  typedef ProvidesDef *ProvidesDef_ptr;
  class ProvidesDef : public virtual Contained
  {
  protected:
    ProvidesDef (void);

  public:
    ProvidesDef (const ProvidesDef& rhs);
    virtual ~ProvidesDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ProvidesDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::InterfaceDef_ptr interface_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_interface_type_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_PROVIDESDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_PROVIDESDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ProvidesDef     : public virtual ::IR::ProvidesDef,
      public virtual _tao_thru_poa_collocated_Contained
  {
  public:
    _tao_thru_poa_collocated_ProvidesDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::InterfaceDef_ptr interface_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ProvidesDef_tie : public ProvidesDef
  {
  public:
    ProvidesDef_tie (T &t);
    // the T& ctor
    ProvidesDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ProvidesDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ProvidesDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ProvidesDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::InterfaceDef_ptr interface_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ProvidesDef_tie (const ProvidesDef_tie &);
    void operator= (const ProvidesDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class UsesDef;
  typedef UsesDef *UsesDef_ptr;
  class UsesDef : public virtual Contained
  {
  protected:
    UsesDef (void);

  public:
    UsesDef (const UsesDef& rhs);
    virtual ~UsesDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::UsesDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::InterfaceDef_ptr interface_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_interface_type_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Boolean is_multiple (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_is_multiple_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_USESDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_USESDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_UsesDef     : public virtual ::IR::UsesDef,
      public virtual _tao_thru_poa_collocated_Contained
  {
  public:
    _tao_thru_poa_collocated_UsesDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::InterfaceDef_ptr interface_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean is_multiple (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class UsesDef_tie : public UsesDef
  {
  public:
    UsesDef_tie (T &t);
    // the T& ctor
    UsesDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    UsesDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    UsesDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~UsesDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::InterfaceDef_ptr interface_type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_multiple (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    UsesDef_tie (const UsesDef_tie &);
    void operator= (const UsesDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class EventDef;
  typedef EventDef *EventDef_ptr;
  class EventDef : public virtual Contained
  {
  protected:
    EventDef (void);

  public:
    EventDef (const EventDef& rhs);
    virtual ~EventDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::EventDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::Boolean is_a (
        const char * event_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void is_a_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ValueDef_ptr event (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_event_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_EVENTDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_EVENTDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_EventDef     : public virtual ::IR::EventDef,
      public virtual _tao_thru_poa_collocated_Contained
  {
  public:
    _tao_thru_poa_collocated_EventDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::Boolean is_a (
        const char * event_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ValueDef_ptr event (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class EventDef_tie : public EventDef
  {
  public:
    EventDef_tie (T &t);
    // the T& ctor
    EventDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    EventDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    EventDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~EventDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::Boolean is_a (
        const char * event_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr event (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    EventDef_tie (const EventDef_tie &);
    void operator= (const EventDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class EmitsDef;
  typedef EmitsDef *EmitsDef_ptr;
  class EmitsDef : public virtual EventDef
  {
  protected:
    EmitsDef (void);

  public:
    EmitsDef (const EmitsDef& rhs);
    virtual ~EmitsDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::EmitsDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    static void is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_event_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_EMITSDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_EMITSDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_EmitsDef     : public virtual ::IR::EmitsDef,
      public virtual _tao_thru_poa_collocated_EventDef
  {
  public:
    _tao_thru_poa_collocated_EmitsDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

      };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class EmitsDef_tie : public EmitsDef
  {
  public:
    EmitsDef_tie (T &t);
    // the T& ctor
    EmitsDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    EmitsDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    EmitsDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~EmitsDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::Boolean is_a (
        const char * event_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr event (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    EmitsDef_tie (const EmitsDef_tie &);
    void operator= (const EmitsDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class PublishesDef;
  typedef PublishesDef *PublishesDef_ptr;
  class PublishesDef : public virtual EventDef
  {
  protected:
    PublishesDef (void);

  public:
    PublishesDef (const PublishesDef& rhs);
    virtual ~PublishesDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::PublishesDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    static void is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_event_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_PUBLISHESDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_PUBLISHESDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_PublishesDef     : public virtual ::IR::PublishesDef,
      public virtual _tao_thru_poa_collocated_EventDef
  {
  public:
    _tao_thru_poa_collocated_PublishesDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

      };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class PublishesDef_tie : public PublishesDef
  {
  public:
    PublishesDef_tie (T &t);
    // the T& ctor
    PublishesDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    PublishesDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    PublishesDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~PublishesDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::Boolean is_a (
        const char * event_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr event (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    PublishesDef_tie (const PublishesDef_tie &);
    void operator= (const PublishesDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ConsumesDef;
  typedef ConsumesDef *ConsumesDef_ptr;
  class ConsumesDef : public virtual EventDef
  {
  protected:
    ConsumesDef (void);

  public:
    ConsumesDef (const ConsumesDef& rhs);
    virtual ~ConsumesDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ConsumesDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    static void is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_event_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_CONSUMESDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_CONSUMESDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ConsumesDef     : public virtual ::IR::ConsumesDef,
      public virtual _tao_thru_poa_collocated_EventDef
  {
  public:
    _tao_thru_poa_collocated_ConsumesDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

      };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ConsumesDef_tie : public ConsumesDef
  {
  public:
    ConsumesDef_tie (T &t);
    // the T& ctor
    ConsumesDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ConsumesDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ConsumesDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ConsumesDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::Boolean is_a (
        const char * event_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr event (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ConsumesDef_tie (const ConsumesDef_tie &);
    void operator= (const ConsumesDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class ComponentDef;
  typedef ComponentDef *ComponentDef_ptr;
  class ComponentDef : public virtual InterfaceDef
  {
  protected:
    ComponentDef (void);

  public:
    ComponentDef (const ComponentDef& rhs);
    virtual ~ComponentDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::ComponentDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::InterfaceDefSeq * supported_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_supported_interfaces_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void supported_interfaces (
        const IR::InterfaceDefSeq & supported_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _set_supported_interfaces_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ComponentDef_ptr base_component (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_base_component_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ProvidesDefSeq * provides_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_provides_interfaces_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::UsesDefSeq * uses_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_uses_interfaces_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::EmitsDefSeq * emits_events (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_emits_events_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::PublishesDefSeq * publishes_events (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_publishes_events_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ConsumesDefSeq * consumes_events (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_consumes_events_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Boolean is_basic (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_is_basic_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ProvidesDef_ptr create_provides (
        const char * id,
        const char * name,
        const char * version,
        IR::InterfaceDef_ptr interface_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_provides_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::UsesDef_ptr create_uses (
        const char * id,
        const char * name,
        const char * version,
        IR::InterfaceDef_ptr interface_type,
        CORBA::Boolean is_multiple,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_uses_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::EmitsDef_ptr create_emits (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_emits_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::PublishesDef_ptr create_publishes (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_publishes_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ConsumesDef_ptr create_consumes (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_consumes_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_base_interfaces_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_base_interfaces_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_is_abstract_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_is_abstract_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_is_local_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_is_local_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_attribute_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_operation_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_module_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_union_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_native_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_COMPONENTDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_COMPONENTDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_ComponentDef     : public virtual ::IR::ComponentDef,
      public virtual _tao_thru_poa_collocated_InterfaceDef
  {
  public:
    _tao_thru_poa_collocated_ComponentDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::InterfaceDefSeq * supported_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual void supported_interfaces (
        const IR::InterfaceDefSeq & supported_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ComponentDef_ptr base_component (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ProvidesDefSeq * provides_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::UsesDefSeq * uses_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::EmitsDefSeq * emits_events (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::PublishesDefSeq * publishes_events (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ConsumesDefSeq * consumes_events (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean is_basic (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ProvidesDef_ptr create_provides (
        const char * id,
        const char * name,
        const char * version,
        IR::InterfaceDef_ptr interface_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::UsesDef_ptr create_uses (
        const char * id,
        const char * name,
        const char * version,
        IR::InterfaceDef_ptr interface_type,
        CORBA::Boolean is_multiple,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::EmitsDef_ptr create_emits (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::PublishesDef_ptr create_publishes (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ConsumesDef_ptr create_consumes (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class ComponentDef_tie : public ComponentDef
  {
  public:
    ComponentDef_tie (T &t);
    // the T& ctor
    ComponentDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    ComponentDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    ComponentDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~ComponentDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::InterfaceDefSeq * supported_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void supported_interfaces (
        const IR::InterfaceDefSeq & supported_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ComponentDef_ptr base_component (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ProvidesDefSeq * provides_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UsesDefSeq * uses_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EmitsDefSeq * emits_events (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::PublishesDefSeq * publishes_events (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConsumesDefSeq * consumes_events (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_basic (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ProvidesDef_ptr create_provides (
        const char * id,
        const char * name,
        const char * version,
        IR::InterfaceDef_ptr interface_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UsesDef_ptr create_uses (
        const char * id,
        const char * name,
        const char * version,
        IR::InterfaceDef_ptr interface_type,
        CORBA::Boolean is_multiple,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EmitsDef_ptr create_emits (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::PublishesDef_ptr create_publishes (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConsumesDef_ptr create_consumes (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDefSeq * base_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void base_interfaces (
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_abstract (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void is_abstract (
        CORBA::Boolean is_abstract,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_local (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void is_local (
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_a (
        const char * interface_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AttributeDef_ptr create_attribute (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        IR::AttributeMode mode,
        const IR::ExceptionDefSeq & get_exceptions,
        const IR::ExceptionDefSeq & put_exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::OperationDef_ptr create_operation (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr result,
        IR::OperationMode mode,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ComponentDef_tie (const ComponentDef_tie &);
    void operator= (const ComponentDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class PrimaryKeyDef;
  typedef PrimaryKeyDef *PrimaryKeyDef_ptr;
  class PrimaryKeyDef : public virtual Contained
  {
  protected:
    PrimaryKeyDef (void);

  public:
    PrimaryKeyDef (const PrimaryKeyDef& rhs);
    virtual ~PrimaryKeyDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::PrimaryKeyDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual CORBA::Boolean is_a (
        const char * primary_key_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void is_a_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ValueDef_ptr primary_key (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_primary_key_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_PRIMARYKEYDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_PRIMARYKEYDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_PrimaryKeyDef     : public virtual ::IR::PrimaryKeyDef,
      public virtual _tao_thru_poa_collocated_Contained
  {
  public:
    _tao_thru_poa_collocated_PrimaryKeyDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual CORBA::Boolean is_a (
        const char * primary_key_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ValueDef_ptr primary_key (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class PrimaryKeyDef_tie : public PrimaryKeyDef
  {
  public:
    PrimaryKeyDef_tie (T &t);
    // the T& ctor
    PrimaryKeyDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    PrimaryKeyDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    PrimaryKeyDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~PrimaryKeyDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::Boolean is_a (
        const char * primary_key_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr primary_key (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    PrimaryKeyDef_tie (const PrimaryKeyDef_tie &);
    void operator= (const PrimaryKeyDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class FactoryDef;
  typedef FactoryDef *FactoryDef_ptr;
  class FactoryDef : public virtual OperationDef
  {
  protected:
    FactoryDef (void);

  public:
    FactoryDef (const FactoryDef& rhs);
    virtual ~FactoryDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::FactoryDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    static void _get_result_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_result_def_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_result_def_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_params_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_params_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_mode_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_mode_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_contexts_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_contexts_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_exceptions_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_exceptions_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_FACTORYDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_FACTORYDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_FactoryDef     : public virtual ::IR::FactoryDef,
      public virtual _tao_thru_poa_collocated_OperationDef
  {
  public:
    _tao_thru_poa_collocated_FactoryDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

      };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class FactoryDef_tie : public FactoryDef
  {
  public:
    FactoryDef_tie (T &t);
    // the T& ctor
    FactoryDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    FactoryDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    FactoryDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~FactoryDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::TypeCode_ptr result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::IDLType_ptr result_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void result_def (
        IR::IDLType_ptr result_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ParDescriptionSeq * params (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void params (
        const IR::ParDescriptionSeq & params,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::OperationMode mode (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void mode (
        IR::OperationMode mode,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContextIdSeq * contexts (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void contexts (
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDefSeq * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void exceptions (
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    FactoryDef_tie (const FactoryDef_tie &);
    void operator= (const FactoryDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class FinderDef;
  typedef FinderDef *FinderDef_ptr;
  class FinderDef : public virtual OperationDef
  {
  protected:
    FinderDef (void);

  public:
    FinderDef (const FinderDef& rhs);
    virtual ~FinderDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::FinderDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    static void _get_result_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_result_def_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_result_def_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_params_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_params_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_mode_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_mode_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_contexts_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_contexts_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_exceptions_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_exceptions_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_FINDERDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_FINDERDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_FinderDef     : public virtual ::IR::FinderDef,
      public virtual _tao_thru_poa_collocated_OperationDef
  {
  public:
    _tao_thru_poa_collocated_FinderDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

      };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class FinderDef_tie : public FinderDef
  {
  public:
    FinderDef_tie (T &t);
    // the T& ctor
    FinderDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    FinderDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    FinderDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~FinderDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    CORBA::TypeCode_ptr result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::IDLType_ptr result_def (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void result_def (
        IR::IDLType_ptr result_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ParDescriptionSeq * params (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void params (
        const IR::ParDescriptionSeq & params,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::OperationMode mode (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void mode (
        IR::OperationMode mode,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContextIdSeq * contexts (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void contexts (
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDefSeq * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void exceptions (
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    FinderDef_tie (const FinderDef_tie &);
    void operator= (const FinderDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

  class HomeDef;
  typedef HomeDef *HomeDef_ptr;
  class HomeDef : public virtual InterfaceDef
  {
  protected:
    HomeDef (void);

  public:
    HomeDef (const HomeDef& rhs);
    virtual ~HomeDef (void);


    virtual CORBA::Boolean _is_a (
        const char* logical_type_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void* _downcast (
        const char* logical_type_id
      );

    static void _is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _non_existent_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual void _dispatch (
        CORBA::ServerRequest &_tao_req,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    ::IR::HomeDef *_this (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual const char* _interface_repository_id (void) const;

    virtual IR::HomeDef_ptr base_home (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_base_home_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::ComponentDef_ptr managed_component (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_managed_component_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::PrimaryKeyDef_ptr primary_key (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_primary_key_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::FactoryDefSeq * factories (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_factories_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::FinderDefSeq * finders (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_finders_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual CORBA::Boolean is_basic (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void _get_is_basic_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::PrimaryKeyDef_ptr create_primary_key (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr primary_key,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_primary_key_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::FactoryDef_ptr create_factory (
        const char * id,
        const char * name,
        const char * version,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_factory_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    virtual IR::FinderDef_ptr create_finder (
        const char * id,
        const char * name,
        const char * version,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

    static void create_finder_skel (
        CORBA::ServerRequest &_tao_req,
        void *_tao_obj,
        void *_tao_context,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      );

    static void _get_base_interfaces_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_base_interfaces_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_is_abstract_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_is_abstract_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_is_local_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_is_local_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void is_a_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_attribute_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_operation_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void lookup_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_contents_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_module_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_constant_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_struct_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_union_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_enum_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_alias_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_interface_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_value_box_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_exception_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void create_native_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_id_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _set_version_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_defined_in_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_absolute_name_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_containing_repository_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void describe_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void move_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_type_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void _get_def_kind_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );

    static void destroy_skel (
        CORBA::ServerRequest &req,
        void *obj,
        void *context,
        CORBA::Environment &env =
          TAO_default_environment ()
      );


  };


#if !defined (_IR_HOMEDEF___THRU_POA_COLLOCATED_SH_)
#define _IR_HOMEDEF___THRU_POA_COLLOCATED_SH_

  class _tao_thru_poa_collocated_HomeDef     : public virtual ::IR::HomeDef,
      public virtual _tao_thru_poa_collocated_InterfaceDef
  {
  public:
    _tao_thru_poa_collocated_HomeDef (
        TAO_Stub *stub
      );
    virtual CORBA::Boolean _is_a(
        const CORBA::Char *logical_type_id,
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

    virtual CORBA::Boolean _non_existent(
        CORBA_Environment &ACE_TRY_ENV = TAO_default_environment ()
      );

        virtual IR::HomeDef_ptr base_home (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::ComponentDef_ptr managed_component (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::PrimaryKeyDef_ptr primary_key (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::FactoryDefSeq * factories (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::FinderDefSeq * finders (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual CORBA::Boolean is_basic (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::PrimaryKeyDef_ptr create_primary_key (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr primary_key,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::FactoryDef_ptr create_factory (
        const char * id,
        const char * name,
        const char * version,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    virtual IR::FinderDef_ptr create_finder (
        const char * id,
        const char * name,
        const char * version,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

  };


#endif /* end #if !defined */


#if defined (ACE_HAS_USING_KEYWORD)
  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class HomeDef_tie : public HomeDef
  {
  public:
    HomeDef_tie (T &t);
    // the T& ctor
    HomeDef_tie (T &t, PortableServer::POA_ptr poa);
    // ctor taking a POA
    HomeDef_tie (T *tp, CORBA::Boolean release=1);
    // ctor taking pointer and an ownership flag
    HomeDef_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release=1);
    // ctor with T*, ownership flag and a POA
    ~HomeDef_tie (void);
    // dtor

    // TIE specific functions
    T *_tied_object (void);
    // return the underlying object
    void _tied_object (T &obj);
    // set the underlying object
    void _tied_object (T *obj, CORBA::Boolean release=1);
    // set the underlying object and the ownership flag
    CORBA::Boolean _is_owner (void);
    // do we own it
    void _is_owner (CORBA::Boolean b);
    // set the ownership

    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (
        CORBA::Environment &env =
          TAO_default_environment ()
      );
    IR::HomeDef_ptr base_home (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ComponentDef_ptr managed_component (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::PrimaryKeyDef_ptr primary_key (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::FactoryDefSeq * factories (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::FinderDefSeq * finders (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_basic (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::PrimaryKeyDef_ptr create_primary_key (
        const char * id,
        const char * name,
        const char * version,
        IR::ValueDef_ptr primary_key,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::FactoryDef_ptr create_factory (
        const char * id,
        const char * name,
        const char * version,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::FinderDef_ptr create_finder (
        const char * id,
        const char * name,
        const char * version,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDefSeq * base_interfaces (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void base_interfaces (
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_abstract (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void is_abstract (
        CORBA::Boolean is_abstract,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_local (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void is_local (
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::Boolean is_a (
        const char * interface_id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AttributeDef_ptr create_attribute (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        IR::AttributeMode mode,
        const IR::ExceptionDefSeq & get_exceptions,
        const IR::ExceptionDefSeq & put_exceptions,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::OperationDef_ptr create_operation (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr result,
        IR::OperationMode mode,
        const IR::ParDescriptionSeq & params,
        const IR::ExceptionDefSeq & exceptions,
        const IR::ContextIdSeq & contexts,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained_ptr lookup (
        const char * search_name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ContainedSeq * lookup_name (
        const char * search_name,
        CORBA::Long levels_to_search,
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container::DescriptionSeq * describe_contents (
        IR::DefinitionKind limit_type,
        CORBA::Boolean exclude_inherited,
        CORBA::Long max_returned_objs,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ModuleDef_ptr create_module (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ConstantDef_ptr create_constant (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr type,
        const CORBA::Any & value,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::StructDef_ptr create_struct (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::UnionDef_ptr create_union (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr discriminator_type,
        const IR::UnionMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::EnumDef_ptr create_enum (
        const char * id,
        const char * name,
        const char * version,
        const IR::EnumMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::AliasDef_ptr create_alias (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::InterfaceDef_ptr create_interface (
        const char * id,
        const char * name,
        const char * version,
        const IR::InterfaceDefSeq & base_interfaces,
        CORBA::Boolean is_abstract,
        CORBA::Boolean is_local,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueDef_ptr create_value (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Boolean is_custom,
        CORBA::Boolean is_abstract,
        IR::ValueDef_ptr base_value,
        CORBA::Boolean is_truncatable,
        const IR::ValueDefSeq & abstract_base_values,
        const IR::InterfaceDefSeq & supported_interfaces,
        const IR::InitializerSeq & initializers,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ValueBoxDef_ptr create_value_box (
        const char * id,
        const char * name,
        const char * version,
        IR::IDLType_ptr original_type_def,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::ExceptionDef_ptr create_exception (
        const char * id,
        const char * name,
        const char * version,
        const IR::StructMemberSeq & members,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::NativeDef_ptr create_native (
        const char * id,
        const char * name,
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * id (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void id (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void name (
        const char * name,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * version (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void version (
        const char * version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Container_ptr defined_in (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    char * absolute_name (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Repository_ptr containing_repository (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::Contained::Description * describe (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void move (
        IR::Container_ptr new_container,
        const char * new_name,
        const char * new_version,
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    CORBA::TypeCode_ptr type (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    IR::DefinitionKind def_kind (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    void destroy (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

private:
    T *ptr_;
    PortableServer::POA_var poa_;
    CORBA::Boolean rel_;

    // copy and assignment are not allowed
    HomeDef_tie (const HomeDef_tie &);
    void operator= (const HomeDef_tie &);
  };

#endif /* ACE_HAS_USING_KEYWORD */

}
TAO_NAMESPACE_CLOSE

#include "InterfaceS_T.h"

#if defined (__ACE_INLINE__)
#include "InterfaceS.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#include "ace/post.h"
#endif /* ifndef TAO_IDL_INTERFACES_H */
