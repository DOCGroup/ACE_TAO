// $Id$

// ============================================================================
// This test covers the use of std::string as an alternate C++  mapping for
// CORBA strings, and the use of std::vector<T> as an alternate C++ mapping
// for sequences of type T. The current version of the test uses a struct
// containing several simple date types - more types of sequences will be
// added in the future.
// ============================================================================

This directory contains an application that tests all the parameter
passing conventions in CORBA for the supported OMG IDL data types.

Type "make" to make the application. The server executable is called
"server" and the client executable is called "client".

You should have the TAO IDL compiler and the TAO library installed
before using this application.

The -GA options has been added the IDL compiler command line for this
test. This option moves the generation of implementations for type
codes and Any insertion/extraction operators to a separate file with
the extension *A.cpp. Adding this option tests that it is handled
correctly for all the various IDL types used in this test.

To run the server, type

   server [arguments to ORB_init] [-d] [-o <ior_output_file>]

          arguments to ORB_init start with the letters -ORB. Please
          see TAO documentattion on all the supported arguments

          -d for debugging.
	  -o <ior_output_file> for outputting the servant IOR to a file.

To run the client, type

   client [arguments to ORB_init] [options for this application]

   Supported options are:

   [-d]                                 debugging
   [-n loopcount]                       number of times to run the test
   [-f servant-IOR-file]		            reads the servant-IOR from the
                                        specified file.
   [-k Param_Test-obj-ref-key]          object key of Param_Test object
   [-i invocation (sii/dii)]            default is static invocation
                                        interface. To use DII, type
                                        -i dii
   [-t data type]
       Data types supported in this version are:

       ubstring             for unbounded string
       ub_struct_seq        for sequences of structs


	There are 2 options of giving the IOR to the client:

	1. Using the -f option to read the IOR from a file.

	2. Using the -k option to read the IOR from the
	   command line.

run_test.pl:
-----------
	There is a perl script in this directory named run_test.pl to
        test all the types. It starts the server first and then runs
        the client with the different data type parameters. The
        arguments it takes are:

	      -n num              -- runs the client num times (default is 5)
        -d                  -- runs each in debug mode
        -onewin             -- keeps all tests in one window on NT
        -h                  -- prints this information
        -t type             -- runs only one type of param test
        -i (dii|sii)        -- Changes the type of invocation (default is sii)
                               (as of 5/3/10 DII is not yet supported)
