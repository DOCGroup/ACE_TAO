Mon Nov 12 18:19:10 UTC 2012  Byron Harris  <harrisb@ociweb.com>

        * orbsvcs/tests/ImplRepo/RestartServer:

          Renamed test ServerBounce to RestartServer to
          be better compare with ReconnectServer test.

        * orbsvcs/tests/ImplRepo/ServerBounce:
        * orbsvcs/tests/ImplRepo/ServerBounce/Messenger.idl:
        * orbsvcs/tests/ImplRepo/ServerBounce/MessengerClient.cpp:
        * orbsvcs/tests/ImplRepo/ServerBounce/MessengerServer.cpp:
        * orbsvcs/tests/ImplRepo/ServerBounce/Messenger_i.h:
        * orbsvcs/tests/ImplRepo/ServerBounce/Messenger_i.cpp:
        * orbsvcs/tests/ImplRepo/ServerBounce/README:
        * orbsvcs/tests/ImplRepo/ServerBounce/ServerBounce.mpc:
        * orbsvcs/tests/ImplRepo/ServerBounce/run_test.pl:

          Removed these files.

Mon Nov 12 15:25:06 UTC 2012  Byron Harris  <harrisb@ociweb.com>

        * orbsvcs/tests/ImplRepo/ReconnectServer/client.cpp:

          Removed unused POA variable.

        * orbsvcs/tests/ImplRepo/ServerBounce/Messenger.idl:
        * orbsvcs/tests/ImplRepo/ServerBounce/MessengerClient.cpp:
        * orbsvcs/tests/ImplRepo/ServerBounce/MessengerServer.cpp:
        * orbsvcs/tests/ImplRepo/ServerBounce/Messenger_i.h:
        * orbsvcs/tests/ImplRepo/ServerBounce/Messenger_i.cpp:
        * orbsvcs/tests/ImplRepo/ServerBounce/README:
        * orbsvcs/tests/ImplRepo/ServerBounce/ServerBounce.mpc:
        * orbsvcs/tests/ImplRepo/ServerBounce/run_test.pl:

          Test that shows client waiting for the ImR activator
          to re-launch the server using new options
          -ORBForwardOnCommFailureLimit and
          -ORBForwardOnTransientLimit.

        * tao/IIOP_Transport.cpp:
        * tao/Invocation_Adapter.cpp:
        * tao/Invocation_Retry_State.h:
        * tao/Invocation_Retry_State.cpp:
        * tao/Invocation_Utils.h:
        * tao/ORB_Core.cpp:
        * tao/Stub.h:
        * tao/Stub.inl:
        * tao/Stub.cpp:
        * tao/Synch_Invocation.cpp:
        * tao/Transport.h:
        * tao/Transport.cpp:
        * tao/params.h:
        * tao/params.inl:
        * tao/params.cpp:
        * tao/tao.mpc:

          Enhancements to TAO to support invocation retry during
          initial connection to server, during reply from server,
          and when the server reply contains exceptions.


        * tests/Multiple_Retry_Tests/Retry_On_Connection_Failure:
        * tests/Multiple_Retry_Tests/Retry_On_Connection_Failure/Hello.h:
        * tests/Multiple_Retry_Tests/Retry_On_Connection_Failure/Hello.cpp:
        * tests/Multiple_Retry_Tests/Retry_On_Connection_Failure/README:
        * tests/Multiple_Retry_Tests/Retry_On_Connection_Failure/Retry_On_Connection_Failure.mpc:
        * tests/Multiple_Retry_Tests/Retry_On_Connection_Failure/Test.idl:
        * tests/Multiple_Retry_Tests/Retry_On_Connection_Failure/client.cpp:
        * tests/Multiple_Retry_Tests/Retry_On_Connection_Failure/run_test.pl:
        * tests/Multiple_Retry_Tests/Retry_On_Connection_Failure/server.cpp:

          Test that shows client trying to connect to server
          rather than throw a TRANSIENT exception when -ORBForwardOnTransientLimit
          is used.

        * tests/Multiple_Retry_Tests/Retry_On_Reply_Failure/README:
        * tests/Multiple_Retry_Tests/Retry_On_Reply_Failure/Retry_On_Reply_Failure.mpc:
        * tests/Multiple_Retry_Tests/Retry_On_Reply_Failure/client.cpp:
        * tests/Multiple_Retry_Tests/Retry_On_Reply_Failure/run_test.pl:
        * tests/Multiple_Retry_Tests/Retry_On_Reply_Failure/server.cpp:
        * tests/Multiple_Retry_Tests/Retry_On_Reply_Failure/test.idl:
        * tests/Multiple_Retry_Tests/Retry_On_Reply_Failure/test_i.h:
        * tests/Multiple_Retry_Tests/Retry_On_Reply_Failure/test_i.cpp:

          Test that shows client trying invocation to server if
          server replies with exception.

Mon Nov 12 01:20:54 UTC 2012  "Kevin Stanley"  <stanleyk@ociweb.com>

        * utils/nsgroup/nsgroup_svc.cpp:
        * utils/nsgroup/run_test.pl:

          Modify bind_group command to use the -n option and format output
          of group_list command to be more readable.

Sun Nov 11 21:34:42 UTC 2012  "Kevin Stanley"  <stanleyk@ociweb.com>

        * orbsvcs/orbsvcs/FT_NamingManager.idl:

          Add operation for querying for all registered object groups.

        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Naming_Manager.h:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Naming_Manager.cpp:

          Implement operation for querying for all registered object groups.

        * orbsvcs/orbsvcs/PortableGroup/PG_Group_Factory.h:
        * orbsvcs/orbsvcs/PortableGroup/PG_Group_Factory.cpp:

          Add utility to implement query for all registered object groups.

        * utils/nsgroup/nsgroup_svc.h:
        * utils/nsgroup/nsgroup_svc.cpp:
        * utils/nsgroup/run_test.pl:

          Change signature for group_list to not use Location.  Update implementation
          to use the new operation defined in the NamingManager idl.

Sat Nov 10 20:45:07 UTC 2012  "Kevin Stanley"  <stanleyk@ociweb.com>

        * orbsvcs/orbsvcs/FT_NamingManager.idl:

          Add operations to create and destroy object groups as well
          as find object groups by name.

        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Naming_Manager.h:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Naming_Manager.cpp:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Naming_Server.cpp:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Persistent_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Persistent_Naming_Context.cpp:

          Provide implementations for the new operations defined in the FT_NamingManager.idl
          for object group creation, deletion and retrieval by name.

        * orbsvcs/orbsvcs/PortableGroup/PG_Group_Factory.h:
        * orbsvcs/orbsvcs/PortableGroup/PG_Group_Factory.cpp:

          Add an operation to find an object group with a matching property.
          Primarily used to lookup an object group with a TAO_FT_OBJECT_GROUP_NAME
          property set to the object group name.

        * utils/nsgroup/nsgroup_svc.cpp:

          Update to use the new create, delete and find operations by name.

        * utils/nsgroup/run_test.pl:

          Modifications to tests use naming manager instead of load manager.

Fri Nov  9 22:03:39 UTC 2012  "Kevin Stanley"  <stanleyk@ociweb.com>

        * orbsvcs/orbsvcs/Naming/Naming_Loader.cpp:

          Fix incorrect capitalization for included file.

        * tao/PortableServer/ServantRetentionStrategyNonRetain.cpp:

          Fixed missing include and deal with mismatch in size expectations for time_t.

Fri Nov  9 21:20:45 UTC 2012  "Kevin Stanley"  <stanleyk@ociweb.com>

        * orbsvcs/Naming_Service/FT_Naming_Main.cpp:
        * orbsvcs/Naming_Service/FT_Naming_Service.h:
        * orbsvcs/Naming_Service/FT_Naming_Service.cpp:

          Add main and server files to implement the FT_Naming_Service and provide
          refined implementation of the factory method in the FT_Naming_Service.

        * orbsvcs/orbsvcs/Naming/Naming_Context_Factory.h:
        * orbsvcs/orbsvcs/Naming/Naming_Context_Factory.cpp:
        * orbsvcs/orbsvcs/Naming/Persistent_Naming_Context_Factory.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Naming_Context_Factory.cpp:

          Add new files to support the abstract factory pattern in the naming service.
          Persistent_Naming_Context_Factory is the default used in the existing naming
          service.

Fri Nov  9 19:35:51 UTC 2012  "Kevin Stanley"  <stanleyk@ociweb.com>

        * MPC/config/ftnaming.mpb:

          Add new base project to support use of the FtNaming library components.

        * orbsvcs/Naming_Service/Naming_Service.h:
        * orbsvcs/Naming_Service/Naming_Service.cpp:

          Refactored to support the use of derived TAO_Naming_Service objects.
          Added factory method operation to allow the derived object to be
          constructed and used.

        * orbsvcs/Naming_Service/Naming_Service.mpc:

          Added FT_Naming_Service project.

        * orbsvcs/orbsvcs/FT_NamingManager.idl:

          Define IDL to be used in FT_Naming_Service to define an aggregated
          interface for PropertyManager, ObjectGroupManager, GenericFactory to
          support the management of ObjectGroups used in the naming service to
          provide a load balancing resolve operation

        * orbsvcs/orbsvcs/FtNaming.mpc:

          Provide a base library for the fault tolerant and load balancing
          features in the FT_Naming_Service.

        * orbsvcs/orbsvcs/Naming/FaultTolerant:

          Directory to hold the new FT_Naming_Service base component implementation
          source.

        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Naming_Manager.h:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Naming_Manager.cpp:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Naming_Server.h:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Naming_Server.cpp:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Persistent_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Persistent_Naming_Context.cpp:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Persistent_Naming_Context_Factory.h:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/FT_Persistent_Naming_Context_Factory.cpp:
        * orbsvcs/orbsvcs/Naming/FaultTolerant/ftnaming_export.h:

          Implements the FT_Naming_Service base classes. Specializes the
          Persistent_Naming_Context to implement the load balancing feature.
          The FT_Naming_Manager provides functionality to create and otherwise
          manage object groups.

        * orbsvcs/orbsvcs/Naming/Naming_Loader.h:
        * orbsvcs/orbsvcs/Naming/Naming_Loader.cpp:
        * orbsvcs/orbsvcs/Naming/Naming_Server.h:
        * orbsvcs/orbsvcs/Naming/Naming_Server.cpp:
        * orbsvcs/orbsvcs/Naming/Persistent_Context_Index.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Context_Index.cpp:
        * orbsvcs/orbsvcs/Naming/Persistent_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Naming_Context.cpp:

          Refactoring of the Naming service base components to allow specialization
          as required by the FT_Naming_Service.

        * orbsvcs/orbsvcs/cosnaming_serv_persistence.mpb:

          Added the Naming_Context_Factory as an abstract factory base class and
          the Persistent_Naming_Context_Factory as a concrete implementation of
          the abstract factory class.

Thu Nov  8 22:03:59 UTC 2012  Phil Mesnier  <mesnier_p@ociweb.com>

        * utils/logWalker/PeerProcess.h:
        * utils/logWalker/PeerProcess.cpp:

          Fix a warning not caught in the TAO 2.0a build.

Thu Nov  8 21:57:49 UTC 2012  Phil Mesnier  <mesnier_p@ociweb.com>

        * utils/logWalker/GIOP_Buffer.h:
        * utils/logWalker/GIOP_Buffer.cpp:

          Adding new files missed by the previous commit.

Thu Nov  8 21:51:42 UTC 2012  Phil Mesnier  <mesnier_p@ociweb.com>

        * utils/logWalker/HostProcess.h:
        * utils/logWalker/HostProcess.cpp:
        * utils/logWalker/Invocation.h:
        * utils/logWalker/Invocation.cpp:
        * utils/logWalker/Log.h:
        * utils/logWalker/Log.cpp:
        * utils/logWalker/PeerObject.cpp:
        * utils/logWalker/PeerProcess.h:
        * utils/logWalker/PeerProcess.cpp:
        * utils/logWalker/Session.h:
        * utils/logWalker/Session.cpp:
        * utils/logWalker/Thread.h:
        * utils/logWalker/Thread.cpp:
        * utils/logWalker/logWalker.cpp:

          Bringing over changes from OCI TAO 2.0a aimed at improving the
          ability to handle logs from heavily threaded processes and for
          inspecting some request contents for common service operations.

Wed Nov  7 18:04:55 UTC 2012  Brian Johnson  <johnsonb@ociweb.com>

        * tests/POA/Non_Retain_System_Id/Non_Retain_System_Id.mpc:

          Changed project name to avoid collision (and to make sense).

Mon Nov  5 22:58:02 UTC 2012  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/PortableServer/ServantRetentionStrategyNonRetain.h:
        * tao/PortableServer/ServantRetentionStrategyNonRetain.cpp:

          Force the POA to generate a unique object ID in the case where the ID
          assignment policy is SYSTEM_ID, and the servant retention policy is
          NONRETAIN. Historically this situation was ignored since the ID was only
          considered useful in resolving servants from the AOM or when UISER_ID
          assignment was set. However it is a valid usecase for a servant manager
          or default servant to be used with system generated IDs.

        * tests/POA/Non_Retain_System_Id:

          New test to verify the correctness of the above change.

Fri Nov  2 21:10:42 UTC 2012  Marc Neeley  <neeleym@ociweb.com>

        * tests/Dynamic_TP:
        * tests/Dynamic_TP/POA_Loader:
        * tests/Dynamic_TP/POA_Loader/POA_Loader.mpc:
        * tests/Dynamic_TP/POA_Loader/Test.cpp:
        * tests/Dynamic_TP/POA_Loader/svc.conf:

          Added first set of tests for POA loader.

Fri Nov  2 20:27:56 UTC 2012  Marc Neeley  <neeleym@ociweb.com>

        * tao/Dynamic_TP/Dynamic_TP_POA_Loader.h:
        * tao/Dynamic_TP/Dynamic_TP_POA_Loader.cpp:

          Implemented parsing of svc.conf files for mapping POA instances
          to Thread Pool configs.

Mon Oct 29 16:14:14 UTC 2012  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/Dynamic_TP/Config_Loader/Config_Loader.mpc:

          Fix the project name so it plays nice with other test projects.

Fri Oct 26 21:53:26 UTC 2012  Phil Mesnier  <mesnier_p@ociweb.com>

        * MPC/Config/dynamic_tp.mpb:

          A new base project used to simplify integration of the dynamic threadpool
          library into application code.

        * tao/Dynamic_TP/Dynamic_TP_Config.h:
        * tao/Dynamic_TP/Dynamic_TP_Config.cpp:

          Completed the implementation to comply with written definition.

        * tests/Dynamic_TP:
        * tests/Dynamic_TP/Config_Loader:
        * tests/Dynamic_TP/Config_Loader/Config_Loader.mpc:
        * tests/Dynamic_TP/Config_Loader/Test.cpp:
        * tests/Dynamic_TP/Config_Loader/svc.conf:

          A test to validate the config loader.

Thu Oct 25 22:31:31 UTC 2012  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Dynamic_TP/Dynamic_TP_Config.h:
        * tao/Dynamic_TP/Dynamic_TP_Config.cpp:
        * tao/Dynamic_TP/Dynamic_TP_ORBInitializer.h:
        * tao/Dynamic_TP/Dynamic_TP_ORBInitializer.cpp:
        * tao/Dynamic_TP/Dynamic_TP_ORB_Loader.cpp:
        * tao/Dynamic_TP/Dynamic_TP_POA_Loader.cpp:
        * tao/Dynamic_TP/Dynamic_TP_POA_Strategy.h:

          Fixed build dependencies, added parsing of configuration parameters.
          not complete, this is an intermediate commit.

        * tao/Dynamic_TP/Dynamic_TP_ORB_ORBInitializer.h:

          Removed this file.

Wed Oct 24 22:37:11 UTC 2012  Marc Neeley  <neeleym@ociweb.com>

        * tao/Dynamic_TP/Dynamic_TP_Config.h:
        * tao/Dynamic_TP/Dynamic_TP_Config.cpp:
        * tao/Dynamic_TP/Dynamic_TP_POA_Loader.cpp:
        * tao/Dynamic_TP/Dynamic_TP_POA_Strategy.h:
        * tao/Dynamic_TP/Dynamic_TP_POA_Strategy.inl:
        * tao/Dynamic_TP/Dynamic_TP_POA_Strategy.cpp:

                Added new class for managing Threadpool Configurations. Continued expanding new Dynamic Threadpool Strategy implementation.

Tue Oct 23 13:07:15 UTC 2012  Marc Neeley  <neeleym@ociweb.com>

        * tao/Dynamic_TP:

        * tao/Dynamic_TP/Dynamic_TP.mpc:
        * tao/Dynamic_TP/Dynamic_TP_POA_Loader.h:
        * tao/Dynamic_TP/Dynamic_TP_POA_Loader.cpp:

                Added csd_threadpool to the mpc file. Began initialization of POA threadpool service.

Mon Oct 22 14:40:47 UTC 2012  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Dynamic_TP:

        * tao/Dynamic_TP/Dynamic_TP.mpc:
        * tao/Dynamic_TP/Dynamic_TP_ORB_Loader.h:
        * tao/Dynamic_TP/Dynamic_TP_ORB_Loader.cpp:
        * tao/Dynamic_TP/Dynamic_TP_POA_Loader.h:
        * tao/Dynamic_TP/Dynamic_TP_POA_Loader.cpp:
        * tao/Dynamic_TP/dynamic_tp_export.h:

          New container library for Dynamic Thread Pools applied to either ORB or POA.

Fri Oct 19 17:24:49 UTC 2012  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Seq_Var_T.h:
        * tao/Seq_Var_T.inl:
        * tao/VarOut_T.h:
        * tao/VarOut_T.inl:

          Move explicit point dereference operation from variable length
          vars to base so it can be applied to vars for fixed length types
          as well. This is intended to improve portability away from ORBs
          that provided this operation. Caution should be exercised when
          using the returned pointer as the var still owns the reference and
          will clean it up when it goes out of scope.

        * tests/Var_Deref:

          Added a test for the above. The test will not compile unless
          the explicit cast operation is available for fixed types.

Mon Oct 15 18:26:57 UTC 2012  Phil Mesnier  <mesnier_p@ociweb.com>

        * OCI_RE_ChangeLog:
          Created change log for the OCI Reliability Enhancements branch

Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
