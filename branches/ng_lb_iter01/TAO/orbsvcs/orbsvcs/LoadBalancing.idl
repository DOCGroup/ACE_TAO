// -*- IDL -*-

//=============================================================================
/**
 *  @file    LoadBalancing.idl
 *
 *  $Id$
 *
 *  The "LoadBalancing" IDL module in this file is based heavily on
 *  the "FT" module defined in the OMG CORBA Fault Tolerance
 *  specification.
 *
 *  @author Ossama Othman <ossama@uci.edu>
 */
//=============================================================================


#ifndef TAO_LOADBALANCING_IDL
#define TAO_LOADBALANCING_IDL

#include "tao/PortableInterceptor.pidl"
#include "CosNaming.idl"
#include "orb.idl"

#pragma prefix "tao.lb"

/**
 * @class LoadBalancing
 *
 * @brief This module defines the interfaces and data types used in
 * TAO's Load Balancing service.
 * @par
 * TAO's Load Balancer manages distribution of requests to replicas of
 * a given Object in an effort to ensure that the  applications/hosts
 * pointed to by the Object reference are as equally loaded as
 * possible, i.e. load balanced.
 * @par
 * The definition of 'load' is application specific, for example, some
 * applications may choose to load balance access to multiple
 * dedicated lines, or separate network interfaces, as well as more
 * traditional load balancing metrics, such as CPU or power load.
 */
module LoadBalancing
{
  /// Types used for obtaining and/or reporting loads
  typedef unsigned long LoadId;
  struct Load {
    LoadId identifier;
    float value;
  };
  typedef sequence<Load> LoadList;

  /// Specification of Common Types and Exceptions for ReplicationManager
  interface GenericFactory;
  interface LoadNotifier;
  interface LoadMonitor;

  typedef unsigned short MonitoringStyle;
  const MonitoringStyle PULL = 0;
  const MonitoringStyle PUSH = 1;
  //  const MonitoringStyle NOT_MONITORED = 2;

  typedef unsigned short MonitoringGranularity;
  const MonitoringGranularity MEMB = 0;
  const MonitoringGranularity LOC = 1;
  const MonitoringGranularity LOC_AND_TYPE = 2;

  typedef unsigned short ClientBinding;
  const ClientBinding PER_SESSION = 0;
  const ClientBinding PER_REQUEST = 1;
  const ClientBinding ON_DEMAND = 2;

  typedef unsigned short BalancingPolicy;
  const BalancingPolicy NON_ADAPTIVE = 0;
  const BalancingPolicy ADAPTIVE = 1;

  exception MonitorAlreadyPresent {};
  exception LocationNotFound {};

  /// Specification of ReplicationManager Interface
  interface ReplicationManager :
    PortableGroup::PropertyManager,
    PortableGroup::ObjectGroupManager,
    PortableGroup::GenericFactory {

    void register_load_notifier (in LoadNotifier load_notifier);

    LoadNotifier get_load_notifier ()
      raises (InterfaceNotFound);

    void register_load_monitor (in LoadMonitor load_monitor,
                                in Location the_location)
      raises (MonitorAlreadyPresent);

    LoadMonitor get_load_monitor (in Location the_location)
      raises (LocationNotFound);

    void remove_load_monitor (in Location the_location)
      raises (LocationNotFound);
  };

  /// It's not clear this interface is needed for the Load Balancer.
  interface LoadNotifier
  {
  };

  /// Interface that all load monitors must implement.
  interface LoadMonitor
  {
    /// Return the current load at the location the load monitor
    /// resides.
    readonly attribute LoadList current_load;

    /// Force redirection of requests for targets with the given
    /// RepositoryId to the target pointed to by the given object
    /// reference.
    void register_redirect (in string type_id,
                            in Object redirect_to);

    /// Remove the redirect for targets of the given RepositoryId.
    void remove_redirect (in string type_id);
  };

};

#pragma prefix ""

#endif /* TAO_LOADBALANCING_IDL */
