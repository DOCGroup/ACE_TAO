// $Id$
#ifndef lint
char tao_yysccsid[] = "@(#)yaccpar	1.4 (Berkeley) 02/25/90 \n\
 Modified 5/2/90 by J. Roskind to support graphic debugging modes";
#endif
#include "utl_strlist.h"
#include "utl_namelist.h"
#include "fe_interface_header.h"
#include "utl_exprlist.h"
#include "utl_labellist.h"
#include "utl_decllist.h"
#include "ast_field.h"
#include "ast_expression.h"
#include "ast_argument.h"
#include "ast_operation.h"
#include "global_extern.h"
#include "utl_identifier.h"
#include "utl_err.h"
#include "ast_generator.h"
#include "ast_module.h"
#include "ast_interface.h"
#include "ast_interface_fwd.h"
#include "utl_string.h"
#include "ast_constant.h"
#include "fe_declarator.h"
#include "ast_union.h"
#include "ast_union_fwd.h"
#include "ast_structure_fwd.h"
#include "ast_extern.h"
#include "ast_enum.h"
#include "ast_root.h"
#include "ast_sequence.h"
#include "ast_string.h"
#include "ast_factory.h"
#include "ast_exception.h"
#include "ast_array.h"
#include "nr_extern.h"

#if (defined(apollo) || defined(hpux)) && defined(__cplusplus)
extern  "C" int tao_yywrap();
#endif  /* (defined(apollo) || defined(hpux)) && defined(__cplusplus)*/


void tao_yyerror (const char *);
int tao_yylex (void);
extern "C" int tao_yywrap (void);
extern char tao_yytext[];
extern int tao_yyleng;
#define TAO_YYDEBUG_LEXER_TEXT (tao_yytext[tao_yyleng] = '\0', tao_yytext)
/* Force the pretty debugging code to compile.*/
#define TAO_YYDEBUG 1
typedef union {
  AST_Decl                      *dcval;         /* Decl value           */
  UTL_StrList                   *slval;         /* String list          */
  UTL_NameList                  *nlval;         /* Name list            */
  UTL_ExprList                  *elval;         /* Expression list      */
  UTL_LabelList                 *llval;         /* Label list           */
  UTL_DeclList                  *dlval;         /* Declaration list     */
  FE_InterfaceHeader            *ihval;         /* Interface header     */
  FE_obv_header                 *vhval;         /* Valuetype header     */
  AST_Expression                *exval;         /* Expression value     */
  AST_UnionLabel                *ulval;         /* Union label          */
  AST_Field                     *ffval;         /* Field value          */
  AST_Field::Visibility         vival;          /* N/A, pub or priv     */
  AST_Expression::ExprType      etval;          /* Expression type      */
  AST_Argument::Direction       dival;          /* Argument direction   */
  AST_Operation::Flags          ofval;          /* Operation flags      */
  FE_Declarator                 *deval;         /* Declarator value     */
  idl_bool                      bval;           /* Boolean value        */
  long                          ival;           /* Long value           */
  unsigned long                 uival;          /* Unsigned long value  */
  double                        dval;           /* Double value         */
  float                         fval;           /* Float value          */
  char                          cval;           /* Char value           */
  ACE_CDR::WChar                wcval;          /* WChar value          */
  UTL_String                    *sval;          /* String value         */
  char                          *wsval;         /* WString value        */
  char                          *strval;        /* char * value         */
  Identifier                    *idval;         /* Identifier           */
  UTL_IdList                    *idlist;        /* Identifier list      */
} TAO_YYSTYPE;
#define IDENTIFIER 257
#define IDL_CONST 258
#define IDL_MODULE 259
#define IDL_INTERFACE 260
#define IDL_TYPEDEF 261
#define IDL_LONG 262
#define IDL_SHORT 263
#define IDL_UNSIGNED 264
#define IDL_DOUBLE 265
#define IDL_FLOAT 266
#define IDL_CHAR 267
#define IDL_WCHAR 268
#define IDL_OCTET 269
#define IDL_BOOLEAN 270
#define IDL_FIXED 271
#define IDL_ANY 272
#define IDL_STRUCT 273
#define IDL_UNION 274
#define IDL_SWITCH 275
#define IDL_ENUM 276
#define IDL_SEQUENCE 277
#define IDL_STRING 278
#define IDL_WSTRING 279
#define IDL_EXCEPTION 280
#define IDL_CASE 281
#define IDL_DEFAULT 282
#define IDL_READONLY 283
#define IDL_ATTRIBUTE 284
#define IDL_ONEWAY 285
#define IDL_IDEMPOTENT 286
#define IDL_VOID 287
#define IDL_IN 288
#define IDL_OUT 289
#define IDL_INOUT 290
#define IDL_RAISES 291
#define IDL_CONTEXT 292
#define IDL_NATIVE 293
#define IDL_LOCAL 294
#define IDL_ABSTRACT 295
#define IDL_CUSTOM 296
#define IDL_FACTORY 297
#define IDL_PRIVATE 298
#define IDL_PUBLIC 299
#define IDL_SUPPORTS 300
#define IDL_TRUNCATABLE 301
#define IDL_VALUETYPE 302
#define IDL_COMPONENT 303
#define IDL_CONSUMES 304
#define IDL_EMITS 305
#define IDL_EVENTTYPE 306
#define IDL_FINDER 307
#define IDL_GETRAISES 308
#define IDL_HOME 309
#define IDL_IMPORT 310
#define IDL_MULTIPLE 311
#define IDL_PRIMARYKEY 312
#define IDL_PROVIDES 313
#define IDL_PUBLISHES 314
#define IDL_SETRAISES 315
#define IDL_TYPEID 316
#define IDL_TYPEPREFIX 317
#define IDL_USES 318
#define IDL_MANAGES 319
#define IDL_INTEGER_LITERAL 320
#define IDL_UINTEGER_LITERAL 321
#define IDL_STRING_LITERAL 322
#define IDL_CHARACTER_LITERAL 323
#define IDL_FLOATING_PT_LITERAL 324
#define IDL_TRUETOK 325
#define IDL_FALSETOK 326
#define IDL_SCOPE_DELIMITOR 327
#define IDL_LEFT_SHIFT 328
#define IDL_RIGHT_SHIFT 329
#define IDL_WCHAR_LITERAL 330
#define IDL_WSTRING_LITERAL 331
#define TAO_YYERRCODE 256
short tao_yylhs[] = {                                        -1,
    0,   74,   74,   76,   75,   78,   75,   80,   75,   82,
   75,   84,   75,   86,   75,   88,   75,   90,   75,   91,
   75,   92,   93,   94,   95,   87,   85,   85,   98,  100,
  101,   96,  102,   68,   33,   33,   33,  103,   22,   22,
   89,   89,   89,   89,  104,  104,  109,  111,  112,  108,
  113,  114,  115,  105,   34,  116,   69,   67,   67,   24,
   24,  106,  106,  107,  110,  110,  117,  117,  117,  122,
  118,  123,  118,   99,   99,  124,  119,  125,  119,  126,
  119,  127,  119,  128,  119,  130,  119,  132,  119,  133,
  119,   20,  134,   21,   21,   16,  135,   16,  136,   16,
   72,   97,   97,   97,  137,  138,  139,  140,   81,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   35,   36,
   37,   37,   38,   38,   39,   39,   40,   40,   40,   41,
   41,   41,   42,   42,   42,   42,   43,   43,   43,   43,
   44,   44,   44,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   46,  142,   73,   73,   73,   73,   73,   73,
  144,  141,    1,    1,    2,    2,    2,   59,   59,   59,
   59,   59,   59,   59,    4,    4,    4,    3,    3,    3,
  143,  143,   29,  147,   30,   30,   63,   63,   31,  148,
   32,   32,   64,   65,   51,   51,   57,   57,   57,   58,
   58,   58,   54,   54,   54,   56,   52,   52,   60,   53,
   55,  149,   71,  150,  152,  153,    7,  151,  155,  155,
  156,  154,  157,  158,  121,  159,  121,  160,   70,  161,
  162,  163,  164,  166,  167,   10,    9,    9,    9,    9,
    9,    9,  165,  169,  169,  170,  171,  168,  172,  168,
   27,   28,   28,  173,   48,  174,  175,   48,  176,   49,
  145,  146,  177,  178,  180,  181,    8,  179,  184,  183,
  183,  182,  185,  186,    5,    5,  187,  188,   13,  190,
  191,    6,    6,  189,  193,  194,   14,   14,  192,  195,
   11,   25,   26,   26,  196,  197,   47,  198,  199,  129,
   66,   66,  200,  201,  202,  203,   83,  204,  206,  207,
  208,  131,   62,   62,   62,   12,   12,  209,  211,  120,
  212,  210,  214,  210,  213,  217,  216,  216,  218,  219,
  215,  220,  205,  222,  205,  221,  225,  224,  224,  226,
  227,  223,   15,   15,   15,   15,   61,   61,   61,  228,
  229,   23,   23,  230,  231,   17,   17,   18,  232,   19,
   19,   77,   79,
};
short tao_yylen[] = {                                         2,
    1,    2,    0,    0,    3,    0,    3,    0,    3,    0,
    3,    0,    3,    0,    3,    0,    3,    0,    3,    0,
    3,    0,    0,    0,    0,    9,    1,    1,    0,    0,
    0,    7,    0,    3,    2,    3,    3,    0,    3,    0,
    1,    1,    1,    1,    2,    1,    0,    0,    0,    7,
    0,    0,    0,    8,    4,    0,    3,    1,    0,    2,
    0,    2,    1,    2,    2,    0,    1,    1,    2,    0,
    3,    0,    3,    2,    0,    0,    3,    0,    3,    0,
    3,    0,    3,    0,    3,    0,    3,    0,    3,    0,
    3,    2,    0,    4,    0,    1,    0,    3,    0,    4,
    1,    1,    2,    2,    0,    0,    0,    0,    9,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    1,    3,    1,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    3,    1,    2,    2,    2,
    1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    3,    1,    1,    1,    2,    1,
    0,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    0,    4,    0,    1,    1,    2,    0,
    4,    0,    1,    1,    1,    1,    1,    2,    1,    2,
    3,    2,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    0,    3,    0,    0,    0,    7,    2,    2,    0,
    0,    2,    0,    0,    5,    0,    3,    0,    3,    0,
    0,    0,    0,    0,    0,   14,    1,    1,    1,    1,
    1,    1,    2,    2,    0,    0,    0,    5,    0,    3,
    2,    2,    0,    0,    3,    0,    0,    5,    0,    3,
    1,    1,    0,    0,    0,    0,    9,    2,    0,    4,
    0,    1,    0,    0,    6,    2,    0,    0,    5,    0,
    0,    6,    1,    1,    0,    0,    6,    1,    1,    0,
    3,    2,    2,    0,    0,    0,    5,    0,    0,    6,
    1,    0,    0,    0,    0,    0,    9,    0,    0,    0,
    0,   10,    1,    1,    0,    1,    1,    0,    0,    5,
    0,    3,    0,    4,    2,    0,    4,    0,    0,    0,
    5,    0,    3,    0,    4,    2,    0,    4,    0,    0,
    0,    5,    1,    1,    1,    1,    1,    1,    1,    0,
    0,    6,    0,    0,    0,    6,    0,    2,    0,    4,
    0,    3,    3,
};
short tao_yydefred[] = {                                      3,
    0,    0,   20,  105,   22,   33,  154,  212,  228,  263,
  303,    0,    0,    0,    0,   56,    0,    0,  156,  158,
  157,   29,   47,    0,    0,    0,    0,    4,    2,    6,
    8,   10,   12,   14,   16,   18,   27,   28,   41,   42,
   43,   44,   46,  160,  181,  182,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  101,  159,  193,    0,   51,
    0,    0,    0,   45,    0,   97,    0,   96,    0,    0,
    0,   38,   35,    0,  199,    0,  203,  204,  207,  208,
  209,  210,  206,  211,  277,  284,  289,   58,   64,  163,
  164,  166,  175,  176,  178,  180,  179,    0,  177,    0,
  168,  170,  171,  169,  174,  173,  195,  196,  165,  172,
    0,    0,  214,    0,    0,  230,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   21,  116,  117,    0,  106,
  110,  111,  113,  114,  115,  112,   23,   34,  161,  155,
  213,  229,  264,  304,   36,    0,   37,   57,    0,  362,
   99,  363,   30,   48,    0,  198,  205,    0,  202,    0,
  273,  276,    0,  280,  285,    0,  215,    5,    7,    9,
   11,   13,   15,   17,   19,    0,    0,    0,    0,    0,
   52,   98,    0,   75,   66,    0,   39,  201,  278,    0,
    0,   55,    0,    0,  231,  221,  107,   24,  194,  162,
  186,  187,  188,    0,  265,  305,   75,  100,    0,    0,
    0,    0,  144,  145,  146,  148,  150,  151,  152,  149,
  147,    0,    0,    0,    0,    0,  153,    0,    0,    0,
    0,    0,    0,  133,  137,  142,  274,    0,  281,  286,
    0,  216,  220,    0,    0,    3,    0,    0,    0,  220,
    0,   90,  301,  313,  314,    0,    0,   76,   78,   80,
   82,   84,    0,   74,   86,   88,  318,   72,   70,    0,
   65,   67,   68,    0,   93,  279,  138,  139,  140,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  241,  232,    0,  237,  238,  240,
  239,    0,    0,  226,  223,  222,  108,    0,  184,  295,
  291,  294,  272,  266,  271,    0,    0,    0,  317,  344,
  308,  345,  316,    0,  343,  298,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,    0,   50,   69,    0,
  143,    0,    0,    0,    0,    0,    0,    0,  134,  135,
  136,  275,  282,  287,    0,  217,  219,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,   91,    0,
    0,   77,   79,   81,   83,   85,   87,   89,  319,   73,
   71,    0,  233,  227,  224,  109,  119,   26,  185,  296,
  293,  267,  269,  307,  309,  299,    0,    0,    0,    0,
    0,    0,    0,    0,  320,  234,  225,  297,  270,    0,
  310,  300,  192,    0,    0,    0,    0,    0,    0,    0,
  322,  329,    0,  328,  249,  256,  254,  246,  253,  235,
  245,  333,  347,  348,  349,  340,    0,  339,  350,  311,
  190,    0,  324,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  335,    0,    0,    0,    0,  330,  326,  250,
  257,  255,  259,  247,  252,  236,  244,  341,  337,  351,
  354,  312,  191,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  331,  327,  258,  260,  248,  342,  338,    0,
  355,  352,    0,  361,    0,    0,  356,  359,    0,  360,
};
short tao_yydgoto[] = {                                       1,
  305,   90,   91,   92,   93,   94,   95,   96,  296,   97,
  199,  321,   98,   99,  323,  226,  472,  495,  496,  187,
  211,   73,  440,  192,  311,  364,  428,  449,  200,  247,
  412,  420,   22,   23,  386,  227,  228,  229,  230,  231,
  232,  233,  234,  235,  236,  237,  312,  429,  464,  130,
  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
  436,  256,  201,  202,  203,  257,  111,   24,   25,  112,
  113,   68,  258,    2,   29,  118,  259,  119,  260,  120,
  261,  121,  262,  122,   34,  123,   35,  124,   36,  125,
   47,   49,  177,  246,  361,   37,   38,   70,  209,  184,
  263,   50,  155,   39,   40,   41,   42,   43,   71,  210,
  185,  270,  146,  207,  317,   65,  271,  272,  264,  274,
  306,  337,  336,  327,  328,  329,  330,  331,  265,  333,
  266,  334,  318,  340,  149,  183,   48,  176,  245,  360,
  140,   51,   44,  178,   45,   46,  362,  457,   52,  117,
  242,  196,  302,  357,  303,  244,  359,  399,  358,   53,
  166,  241,  355,  398,  430,  416,  450,  431,  451,  448,
  478,  445,  447,  446,  476,  477,   54,  179,  314,  249,
  365,  315,  366,  401,  190,  291,  160,  212,  114,  193,
  292,  115,  194,  293,  248,  363,  400,  371,  403,   55,
  180,  250,  367,  370,  411,  402,  419,  456,  335,  405,
  397,  414,  423,  415,  424,  444,  475,  442,  474,  417,
  437,  418,  438,  454,  480,  452,  479,  455,  481,  482,
  493,  499,
};
short tao_yysindex[] = {                                      0,
    0,  603,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -203, -202, -196, -234,    0, -228, -228,    0,    0,
    0,    0,    0,   22,  428, -191,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   52,  566, -137, -203,
  446, -203, -203, -203, -203,    0,    0,    0,   22,    0,
   22, -175, -175,    0, -203,    0, -159,    0, -155,   56,
   65,    0,    0,  -76,    0, -109,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   68,    0, -180,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   22, -191,    0,  100,  131,    0,   78,  148,  158,  184,
  208,  211,  217,  226,  229,    0,    0,    0, -180,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  166,    0,    0, -203,    0,
    0,    0,    0,    0, -228,    0,    0,   28,    0,  232,
    0,    0,   -7,    0,    0,  255,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -203,  186, -203,  187,  188,
    0,    0, -203,    0,    0, -180,    0,    0,    0,  -24,
 -228,    0,  -24,  -24,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  675,  630,
  268,  497,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   37,   37,   37,  -24, -180,    0,  192,  234,  292,
 -118,  151,   -3,    0,    0,    0,    0, -180,    0,    0,
  584,    0,    0,  403,  270,    0,  289,  245,   81,    0,
  675,    0,    0,    0,    0,  515,   60,    0,    0,    0,
    0,    0,  210,    0,    0,    0,    0,    0,    0,  216,
    0,    0,    0,  286,    0,    0,    0,    0,    0,  305,
  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
  287,  293,  304,   86,    0,    0, -180,    0,    0,    0,
    0,  248,    0,    0,    0,    0,    0,  603,    0,    0,
    0,    0,    0,    0,    0,    0,  249,  312,    0,    0,
    0,    0,    0, -180,    0,    0,  316,  317,  318,  323,
  328,    0,  329,  335,   94,  403,  403,    0,    0, -228,
    0,  234,  292, -118,  151,  151,   -3,   -3,    0,    0,
    0,    0,    0,    0,  354,    0,    0,  337, -203,  -24,
  272, -203,  -24,  245,  276,  358,  278,    0,    0,  147,
  541,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -180,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  365,  283,  348,  321,
   81,  371, -203,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  374,  128, -124,  376,  -90,  127,  375,
    0,    0,  379,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  380,    0,    0,    0,
    0,  541,    0,  378,  364,  -24,  368,  446,  -59,  307,
 -124,  541,    0,  385,  390,  142, -203,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -203,  128,  377, -203,  382, -203,  -90,
 -228,  396,    0,    0,    0,    0,    0,    0,    0,  397,
    0,    0,  120,    0,  402,  400,    0,    0,  125,    0,
};
short tao_yyrindex[] = {                                      0,
    0,  448,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -22,   -9,  392,    1,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   64,    0,
   69,   32,  -23,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   77,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -91,    0,    0,   97,  121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  196,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    4,    0,    0,
    0,    0,  326,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -19,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  340,    0,    0,    0,    0,  258,  284,
  -26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   14,    0,  172,  517,  540,
  246,   57,   24,    0,    0,    0,    0,  333,    0,    0,
    0,    0,    0,    0,    0,    0,  393,    0,    0,    0,
  325,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  413,    0,    0,  416,    0,    0,    0,
    0,    0,  212,    0,    0,    0,    0,  334,    0,    0,
    0,    0,    0,    0,    0,  240,    0,    0,    0,    0,
    0,    0,    0,  201,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  565,  560,  331,  111,  144,   51,   84,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  195,    0,  336,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -18,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -13,    0,    0,    0,    0,    0,  -17,
    0,    0,    0,    0,    0,    0,    0,    0,  -29,  401,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  422,    0,    0,    0,    0,  469,    0,
  339,    0,    0,  429,    0,  412,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  451,    0,    0,    0,    0,
};
short tao_yygindex[] = {                                      0,
  -20,  275,    0,    0,    0,  -44,    9,    6,    0,   11,
    0,    0,    0,  -42, -268,  -15,    0,    0,    0,   13,
    0,   20,    0,    0,    0,    0,    0,    0,  134,    0,
    0,    0,    0,  481,    0, -198,    0,  218,  219,  215,
  -32,  -41,  -39,  -89,    0, -119,  136,   82,    0,    0,
   -1,   23,   39,  484,    0,  485,    0,    0, -210,   45,
    0,    0, -284,  -11,    0,    0,    0,  242,  244,   15,
   18,  -12,    5,  288,    0,    0,    7,    0,   10,    0,
   12,    0,   16,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  350,    0,
    0,    0,    0,    0,    0,    0,    0,  520,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  330,    0,
  -58,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  342,  294,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   92,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  159,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,    0,    0,    0,    0,    0,
    0,    0,   79,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
#define TAO_YYTABLESIZE 992
short tao_yytable[] = {                                      58,
   57,   67,   69,  127,   89,  128,   28,   20,   30,  100,
   19,   31,   21,   32,   92,  225,   26,   33,  222,   27,
  223,   95,   94,  332,   95,   94,  280,  321,   56,  353,
  139,   40,  129,  290,   59,  100,  102,  138,  288,  141,
  142,  143,  144,  289,  200,  325,  131,  200,   59,   63,
  141,  141,  148,   56,  141,  141,  141,    6,  141,  261,
  141,  130,  200,    6,  130,  200,  130,   16,  130,  197,
  132,  141,  141,  239,  240,  141,  225,  389,  145,   72,
  147,  130,  130,  116,  197,  130,  133,  197,  131,   59,
   62,  131,  136,  131,  127,  131,   92,  127,   66,   59,
   40,  224,  396,   95,   94,   16,  141,  141,  131,  131,
  126,  161,  131,   59,  127,  127,  130,  130,  127,  137,
  167,  132,  103,  214,  132,   88,  132,  104,  132,  162,
  163,  425,  277,  278,  279,  167,  182,  141,  167,  186,
  283,  132,  132,  131,  131,  132,  151,  130,  128,  127,
  127,  128,  158,  159,   59,  283,  426,  427,  283,  164,
  325,  387,  150,  197,  288,  204,  152,  151,  128,  128,
  208,  151,  128,  458,  131,  238,  132,  132,  153,  288,
  127,  129,  288,  468,  129,  156,   40,  154,  157,  483,
  165,   40,  486,  286,  488,  287,  100,  433,  434,  435,
  167,  129,  129,  128,  128,  129,  168,  132,   40,  284,
  285,  320,  120,  322,   20,   20,  169,   19,   19,   21,
   21,  426,  427,   26,   26,  297,   27,   27,  100,  120,
  120,  325,   56,  120,  128,  292,  129,  129,  292,  298,
  324,  325,  170,  390,  347,  348,  295,  461,  349,  350,
  351,  345,  346,  292,   59,   61,   20,   62,   63,   19,
  200,   21,  353,  299,  120,   26,  171,  129,   27,  172,
  334,  334,  334,   92,  323,  173,   59,  380,  381,  300,
   95,   94,  197,  125,  174,  301,  125,  175,  181,  188,
   59,  189,  191,   56,  195,  213,  214,  215,  216,  217,
  218,  219,   66,  125,  125,  220,  221,  125,  198,  205,
  206,  275,   28,   20,   30,  281,   19,   31,   21,   32,
  100,  100,   26,   33,  382,   27,  320,  282,  322,  283,
  307,   59,  309,  167,  332,  310,  218,  313,  125,  125,
  338,  141,  141,  326,  339,  341,  204,  156,  352,  204,
  379,  130,  130,  283,  353,  324,  213,  214,  215,  216,
  217,  218,  219,   66,  306,  354,  220,  221,  126,  125,
  369,  126,  356,  368,  372,  373,  374,  288,  131,  131,
  193,  375,   31,  193,  127,  127,  376,  377,  126,  126,
   58,  413,  126,  378,  383,  384,  388,  320,  193,  322,
  392,  393,  394,  395,  404,  406,  407,  320,   49,  322,
  410,  132,  132,  408,  421,  422,  432,  439,  441,  443,
  453,  459,  460,  126,  126,  462,  324,  463,  469,  470,
  290,  466,  100,  471,  485,  491,  324,  492,  128,  128,
  487,  494,  497,  498,   58,  473,  500,    1,   61,   53,
  262,  183,  118,  197,  126,   60,  242,  346,   25,  189,
  268,  204,  325,  243,  204,  186,  204,  221,  221,  336,
  357,  129,  129,  221,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  221,  221,  276,  221,  221,  221,
  221,  358,  385,  490,   60,  221,  221,  344,  342,  391,
  343,  221,  221,  221,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  315,  221,  221,  221,  221,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  465,  134,  135,  308,   64,  315,  315,  243,  221,  273,
  315,  302,  467,  316,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  251,  121,  489,  409,
    0,  315,  315,  484,    0,    0,  221,  302,    0,    0,
  315,    0,    0,    0,  121,  121,    0,    0,  121,    0,
  123,  315,    0,    0,  315,    0,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  123,  123,    0,
  124,  123,  315,  315,    0,  122,    0,    0,  302,  121,
  315,  315,    0,    0,    0,    0,    0,  124,  124,    0,
    0,  124,  122,  122,    0,    0,  122,    0,    0,    0,
    0,    0,  123,  123,    0,    0,    0,    0,    0,    0,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  315,  124,  124,    0,    0,    0,  122,  304,   56,
    0,    0,    0,  123,   74,   75,   76,   77,   78,   79,
   80,   81,   82,   83,   84,    8,    9,    0,   10,   85,
   86,   87,    0,  124,   56,    0,    0,    0,  122,   74,
   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
    8,    9,   56,   10,   85,   86,   87,   74,   75,   76,
   77,   78,   79,   80,   81,   82,   83,   84,    8,    9,
    0,   10,   85,   86,   87,  251,    0,    0,   88,   66,
  251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
  251,  251,  251,    0,  251,  251,  251,  251,    0,    0,
    0,    0,    0,   56,   66,    0,    0,    0,   74,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,    0,
    0,   56,   66,   85,   86,   87,   74,   75,   76,   77,
   78,   79,   80,   81,   82,   83,   84,    0,    0,    0,
    0,    0,   86,   87,    0,  251,    0,   56,    0,    0,
    0,  319,   74,   75,   76,   77,   78,   79,   80,   81,
   82,   83,   84,    0,    0,    0,    0,    0,   86,   87,
    0,    0,   56,   66,    0,    0,    0,   74,   75,   76,
   77,   78,   79,   80,   81,   82,   83,    0,    0,    0,
   56,   66,    0,   86,   87,  294,   75,   76,    0,    0,
   79,   80,   81,   82,    0,    0,    0,    0,    3,   10,
    4,    5,    6,    7,    0,    0,    0,   66,    0,    0,
    0,    0,    0,    0,    0,    8,    9,    0,   10,    0,
    0,    0,   11,    0,    0,  252,    0,    4,    0,    0,
    7,    0,   66,    0,    0,   12,   13,   14,   15,    0,
    0,    0,    8,    9,   16,   10,    0,    0,    0,   11,
   66,    0,  253,    0,  254,  255,    0,    0,   17,   18,
    0,    0,   12,    0,    0,    0,  267,  268,  269,    0,
  252,    0,    4,    0,    0,    7,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   17,   18,    8,    9,    0,
   10,    0,    0,    0,   11,    0,    0,  253,    0,  254,
  255,    0,    0,    0,    0,    0,    0,   12,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   17,   18,
};
short tao_yycheck[] = {                                      12,
   12,   17,   18,   48,   25,   48,    2,    2,    2,   25,
    2,    2,    2,    2,   41,   40,    2,    2,   43,    2,
   45,   41,   41,   41,   44,   44,  225,   41,  257,   59,
   51,  123,   48,   37,   58,   51,   59,   50,   42,   52,
   53,   54,   55,   47,   41,  256,   48,   44,   58,   59,
   37,   38,   65,  257,   41,   42,   43,  260,   45,   59,
   47,   38,   59,  260,   41,   62,   43,  302,   45,   44,
   48,   58,   59,  193,  194,   62,   40,  362,   59,   58,
   61,   58,   59,  275,   59,   62,   48,   62,   38,   58,
   59,   41,   48,   43,   38,   45,  123,   41,  327,  123,
  123,  126,  371,  123,  123,  302,   93,   94,   58,   59,
   59,   44,   62,  123,   58,   59,   93,   94,   62,  257,
   44,   38,   59,  123,   41,  301,   43,   59,   45,   62,
  111,  256,  222,  223,  224,   59,  149,  124,   62,  155,
   44,   58,   59,   93,   94,   62,  327,  124,   38,   93,
   94,   41,  262,  263,  123,   59,  281,  282,   62,   60,
  371,  360,  322,  176,   44,  178,  322,  327,   58,   59,
  183,  327,   62,  442,  124,  191,   93,   94,  123,   59,
  124,   38,   62,  452,   41,  262,  123,  123,  265,  474,
   60,  123,  477,   43,  479,   45,  212,  288,  289,  290,
  123,   58,   59,   93,   94,   62,   59,  124,  300,  328,
  329,  256,   41,  256,  209,  210,   59,  209,  210,  209,
  210,  281,  282,  209,  210,  241,  209,  210,  244,   58,
   59,  442,  257,   62,  124,   41,   93,   94,   44,  241,
  256,  452,   59,  363,  286,  287,  241,  446,  288,  289,
  290,  284,  285,   59,   13,   14,  251,   14,   15,  251,
  257,  251,  292,  241,   93,  251,   59,  124,  251,   59,
  288,  289,  290,  300,  288,   59,  300,  336,  337,  241,
  300,  300,  257,   38,   59,  241,   41,   59,  123,  262,
  300,   60,  300,  257,   40,  320,  321,  322,  323,  324,
  325,  326,  327,   58,   59,  330,  331,   62,  123,  123,
  123,   44,  308,  308,  308,  124,  308,  308,  308,  308,
  336,  337,  308,  308,  340,  308,  371,   94,  371,   38,
   61,  300,   44,  257,  125,   91,  125,  257,   93,   94,
  125,  328,  329,  284,   59,   41,  359,  262,   62,  362,
  257,  328,  329,  257,   62,  371,  320,  321,  322,  323,
  324,  325,  326,  327,  125,   62,  330,  331,   38,  124,
   59,   41,  125,  125,   59,   59,   59,  257,  328,  329,
   41,   59,  125,   44,  328,  329,   59,   59,   58,   59,
  403,  403,   62,   59,   41,   59,  125,  442,   59,  442,
  125,   44,  125,  257,   40,  123,   59,  452,  125,  452,
   40,  328,  329,   93,   41,  288,   41,  291,   44,   41,
   41,   44,   59,   93,   94,   58,  442,  448,   44,   40,
   91,  125,  448,  292,   58,   40,  452,   41,  328,  329,
   59,  322,   41,   44,  457,  457,  322,    0,  123,  125,
   59,   59,  257,   41,  124,  123,   41,  257,  125,   59,
  125,  474,   41,  125,  477,  481,  479,  256,  257,   41,
   59,  328,  329,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  212,  276,  277,  278,
  279,   41,  359,  481,   14,  256,  257,  283,  281,  364,
  282,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  257,  276,  277,  278,  279,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  449,   48,   48,  246,   15,  278,  279,  196,  327,  210,
  257,  284,  451,  250,  287,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  207,   41,  480,  401,
   -1,  278,  279,  475,   -1,   -1,  327,  284,   -1,   -1,
  287,   -1,   -1,   -1,   58,   59,   -1,   -1,   62,   -1,
   41,  257,   -1,   -1,  327,   -1,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,   58,   59,   -1,
   41,   62,  278,  279,   -1,   41,   -1,   -1,  284,   93,
  327,  287,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,
   -1,   62,   58,   59,   -1,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  327,   93,   94,   -1,   -1,   -1,   93,  256,  257,
   -1,   -1,   -1,  124,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,   -1,  276,  277,
  278,  279,   -1,  124,  257,   -1,   -1,   -1,  124,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  257,  276,  277,  278,  279,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
   -1,  276,  277,  278,  279,  257,   -1,   -1,  301,  327,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,   -1,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  257,  327,   -1,   -1,   -1,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,   -1,
   -1,  257,  327,  277,  278,  279,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,  279,   -1,  327,   -1,  257,   -1,   -1,
   -1,  287,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,  279,
   -1,   -1,  257,  327,   -1,   -1,   -1,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
  257,  327,   -1,  278,  279,  262,  263,  264,   -1,   -1,
  267,  268,  269,  270,   -1,   -1,   -1,   -1,  256,  276,
  258,  259,  260,  261,   -1,   -1,   -1,  327,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,
   -1,   -1,  280,   -1,   -1,  256,   -1,  258,   -1,   -1,
  261,   -1,  327,   -1,   -1,  293,  294,  295,  296,   -1,
   -1,   -1,  273,  274,  302,  276,   -1,   -1,   -1,  280,
  327,   -1,  283,   -1,  285,  286,   -1,   -1,  316,  317,
   -1,   -1,  293,   -1,   -1,   -1,  297,  298,  299,   -1,
  256,   -1,  258,   -1,   -1,  261,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,  317,  273,  274,   -1,
  276,   -1,   -1,   -1,  280,   -1,   -1,  283,   -1,  285,
  286,   -1,   -1,   -1,   -1,   -1,   -1,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,  317,
};
#define TAO_YYFINAL 1
#ifndef TAO_YYDEBUG
#define TAO_YYDEBUG 0
#endif
#define TAO_YYMAXTOKEN 331
#if TAO_YYDEBUG
const char *tao_yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'",0,"'/'",0,0,0,0,0,0,0,0,
0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENTIFIER","IDL_CONST",
"IDL_MODULE","IDL_INTERFACE","IDL_TYPEDEF","IDL_LONG","IDL_SHORT",
"IDL_UNSIGNED","IDL_DOUBLE","IDL_FLOAT","IDL_CHAR","IDL_WCHAR","IDL_OCTET",
"IDL_BOOLEAN","IDL_FIXED","IDL_ANY","IDL_STRUCT","IDL_UNION","IDL_SWITCH",
"IDL_ENUM","IDL_SEQUENCE","IDL_STRING","IDL_WSTRING","IDL_EXCEPTION","IDL_CASE",
"IDL_DEFAULT","IDL_READONLY","IDL_ATTRIBUTE","IDL_ONEWAY","IDL_IDEMPOTENT",
"IDL_VOID","IDL_IN","IDL_OUT","IDL_INOUT","IDL_RAISES","IDL_CONTEXT",
"IDL_NATIVE","IDL_LOCAL","IDL_ABSTRACT","IDL_CUSTOM","IDL_FACTORY",
"IDL_PRIVATE","IDL_PUBLIC","IDL_SUPPORTS","IDL_TRUNCATABLE","IDL_VALUETYPE",
"IDL_COMPONENT","IDL_CONSUMES","IDL_EMITS","IDL_EVENTTYPE","IDL_FINDER",
"IDL_GETRAISES","IDL_HOME","IDL_IMPORT","IDL_MULTIPLE","IDL_PRIMARYKEY",
"IDL_PROVIDES","IDL_PUBLISHES","IDL_SETRAISES","IDL_TYPEID","IDL_TYPEPREFIX",
"IDL_USES","IDL_MANAGES","IDL_INTEGER_LITERAL","IDL_UINTEGER_LITERAL",
"IDL_STRING_LITERAL","IDL_CHARACTER_LITERAL","IDL_FLOATING_PT_LITERAL",
"IDL_TRUETOK","IDL_FALSETOK","IDL_SCOPE_DELIMITOR","IDL_LEFT_SHIFT",
"IDL_RIGHT_SHIFT","IDL_WCHAR_LITERAL","IDL_WSTRING_LITERAL",
};
const char *tao_yyrule[] = {
"$accept : start",
"start : definitions",
"definitions : definitions definition",
"definitions :",
"$$1 :",
"definition : type_dcl $$1 ';'",
"$$2 :",
"definition : typeid_dcl $$2 ';'",
"$$3 :",
"definition : typeprefix_dcl $$3 ';'",
"$$4 :",
"definition : const_dcl $$4 ';'",
"$$5 :",
"definition : exception $$5 ';'",
"$$6 :",
"definition : interface_def $$6 ';'",
"$$7 :",
"definition : module $$7 ';'",
"$$8 :",
"definition : value_def $$8 ';'",
"$$9 :",
"definition : error $$9 ';'",
"$$10 :",
"$$11 :",
"$$12 :",
"$$13 :",
"module : IDL_MODULE $$10 IDENTIFIER $$11 '{' $$12 definitions $$13 '}'",
"interface_def : interface",
"interface_def : interface_forward",
"$$14 :",
"$$15 :",
"$$16 :",
"interface : interface_header $$14 '{' $$15 exports $$16 '}'",
"$$17 :",
"interface_decl : IDL_INTERFACE $$17 id",
"interface_header : interface_decl inheritance_spec",
"interface_header : IDL_LOCAL interface_decl inheritance_spec",
"interface_header : IDL_ABSTRACT interface_decl inheritance_spec",
"$$18 :",
"inheritance_spec : ':' $$18 at_least_one_scoped_name",
"inheritance_spec :",
"value_def : valuetype",
"value_def : value_abs_decl",
"value_def : value_forward_decl",
"value_def : value_box_decl",
"valuetype : IDL_CUSTOM value_concrete_decl",
"valuetype : value_concrete_decl",
"$$19 :",
"$$20 :",
"$$21 :",
"value_concrete_decl : value_header $$19 '{' $$20 value_elements $$21 '}'",
"$$22 :",
"$$23 :",
"$$24 :",
"value_abs_decl : IDL_ABSTRACT value_header $$22 '{' $$23 exports $$24 '}'",
"value_header : value_decl opt_truncatable inheritance_spec supports_spec",
"$$25 :",
"value_decl : IDL_VALUETYPE $$25 id",
"opt_truncatable : IDL_TRUNCATABLE",
"opt_truncatable :",
"supports_spec : IDL_SUPPORTS scoped_name",
"supports_spec :",
"value_forward_decl : IDL_ABSTRACT value_decl",
"value_forward_decl : value_decl",
"value_box_decl : value_decl type_spec",
"value_elements : value_elements value_element",
"value_elements :",
"value_element : state_member",
"value_element : export",
"value_element : init_decl ';'",
"$$26 :",
"state_member : IDL_PUBLIC $$26 member_i",
"$$27 :",
"state_member : IDL_PRIVATE $$27 member_i",
"exports : exports export",
"exports :",
"$$28 :",
"export : type_dcl $$28 ';'",
"$$29 :",
"export : typeid_dcl $$29 ';'",
"$$30 :",
"export : typeprefix_dcl $$30 ';'",
"$$31 :",
"export : const_dcl $$31 ';'",
"$$32 :",
"export : exception $$32 ';'",
"$$33 :",
"export : attribute $$33 ';'",
"$$34 :",
"export : operation $$34 ';'",
"$$35 :",
"export : error $$35 ';'",
"at_least_one_scoped_name : scoped_name scoped_names",
"$$36 :",
"scoped_names : scoped_names ',' $$36 scoped_name",
"scoped_names :",
"scoped_name : id",
"$$37 :",
"scoped_name : IDL_SCOPE_DELIMITOR $$37 id",
"$$38 :",
"scoped_name : scoped_name IDL_SCOPE_DELIMITOR $$38 id",
"id : IDENTIFIER",
"interface_forward : interface_decl",
"interface_forward : IDL_LOCAL interface_decl",
"interface_forward : IDL_ABSTRACT interface_decl",
"$$39 :",
"$$40 :",
"$$41 :",
"$$42 :",
"const_dcl : IDL_CONST $$39 const_type $$40 id $$41 '=' $$42 expression",
"const_type : integer_type",
"const_type : char_type",
"const_type : octet_type",
"const_type : boolean_type",
"const_type : floating_pt_type",
"const_type : fixed_type",
"const_type : string_type_spec",
"const_type : wstring_type_spec",
"const_type : scoped_name",
"expression : const_expr",
"const_expr : or_expr",
"or_expr : xor_expr",
"or_expr : or_expr '|' xor_expr",
"xor_expr : and_expr",
"xor_expr : xor_expr '^' and_expr",
"and_expr : shift_expr",
"and_expr : and_expr '&' shift_expr",
"shift_expr : add_expr",
"shift_expr : shift_expr IDL_LEFT_SHIFT add_expr",
"shift_expr : shift_expr IDL_RIGHT_SHIFT add_expr",
"add_expr : mult_expr",
"add_expr : add_expr '+' mult_expr",
"add_expr : add_expr '-' mult_expr",
"mult_expr : unary_expr",
"mult_expr : mult_expr '*' unary_expr",
"mult_expr : mult_expr '/' unary_expr",
"mult_expr : mult_expr '%' unary_expr",
"unary_expr : primary_expr",
"unary_expr : '+' primary_expr",
"unary_expr : '-' primary_expr",
"unary_expr : '~' primary_expr",
"primary_expr : scoped_name",
"primary_expr : literal",
"primary_expr : '(' const_expr ')'",
"literal : IDL_INTEGER_LITERAL",
"literal : IDL_UINTEGER_LITERAL",
"literal : IDL_STRING_LITERAL",
"literal : IDL_WSTRING_LITERAL",
"literal : IDL_CHARACTER_LITERAL",
"literal : IDL_WCHAR_LITERAL",
"literal : IDL_FLOATING_PT_LITERAL",
"literal : IDL_TRUETOK",
"literal : IDL_FALSETOK",
"positive_int_expr : const_expr",
"$$43 :",
"type_dcl : IDL_TYPEDEF $$43 type_declarator",
"type_dcl : struct_type",
"type_dcl : union_type",
"type_dcl : enum_type",
"type_dcl : IDL_NATIVE simple_declarator",
"type_dcl : constructed_forward_type_spec",
"$$44 :",
"type_declarator : type_spec $$44 at_least_one_declarator",
"type_spec : simple_type_spec",
"type_spec : constructed_type_spec",
"simple_type_spec : base_type_spec",
"simple_type_spec : template_type_spec",
"simple_type_spec : scoped_name",
"base_type_spec : integer_type",
"base_type_spec : floating_pt_type",
"base_type_spec : char_type",
"base_type_spec : boolean_type",
"base_type_spec : octet_type",
"base_type_spec : fixed_type",
"base_type_spec : any_type",
"template_type_spec : sequence_type_spec",
"template_type_spec : string_type_spec",
"template_type_spec : wstring_type_spec",
"constructed_type_spec : struct_type",
"constructed_type_spec : union_type",
"constructed_type_spec : enum_type",
"constructed_forward_type_spec : struct_forward_type",
"constructed_forward_type_spec : union_forward_type",
"at_least_one_declarator : declarator declarators",
"$$45 :",
"declarators : declarators ',' $$45 declarator",
"declarators :",
"declarator : simple_declarator",
"declarator : complex_declarator",
"at_least_one_simple_declarator : simple_declarator simple_declarators",
"$$46 :",
"simple_declarators : simple_declarators ',' $$46 simple_declarator",
"simple_declarators :",
"simple_declarator : id",
"complex_declarator : array_declarator",
"integer_type : signed_int",
"integer_type : unsigned_int",
"signed_int : IDL_LONG",
"signed_int : IDL_LONG IDL_LONG",
"signed_int : IDL_SHORT",
"unsigned_int : IDL_UNSIGNED IDL_LONG",
"unsigned_int : IDL_UNSIGNED IDL_LONG IDL_LONG",
"unsigned_int : IDL_UNSIGNED IDL_SHORT",
"floating_pt_type : IDL_DOUBLE",
"floating_pt_type : IDL_FLOAT",
"floating_pt_type : IDL_LONG IDL_DOUBLE",
"fixed_type : IDL_FIXED",
"char_type : IDL_CHAR",
"char_type : IDL_WCHAR",
"octet_type : IDL_OCTET",
"boolean_type : IDL_BOOLEAN",
"any_type : IDL_ANY",
"$$47 :",
"struct_decl : IDL_STRUCT $$47 id",
"$$48 :",
"$$49 :",
"$$50 :",
"struct_type : struct_decl $$48 '{' $$49 at_least_one_member $$50 '}'",
"at_least_one_member : member members",
"members : members member",
"members :",
"$$51 :",
"member : $$51 member_i",
"$$52 :",
"$$53 :",
"member_i : type_spec $$52 at_least_one_declarator $$53 ';'",
"$$54 :",
"member_i : error $$54 ';'",
"$$55 :",
"union_decl : IDL_UNION $$55 id",
"$$56 :",
"$$57 :",
"$$58 :",
"$$59 :",
"$$60 :",
"$$61 :",
"union_type : union_decl IDL_SWITCH $$56 '(' $$57 switch_type_spec $$58 ')' $$59 '{' $$60 at_least_one_case_branch $$61 '}'",
"switch_type_spec : integer_type",
"switch_type_spec : char_type",
"switch_type_spec : octet_type",
"switch_type_spec : boolean_type",
"switch_type_spec : enum_type",
"switch_type_spec : scoped_name",
"at_least_one_case_branch : case_branch case_branches",
"case_branches : case_branches case_branch",
"case_branches :",
"$$62 :",
"$$63 :",
"case_branch : at_least_one_case_label $$62 element_spec $$63 ';'",
"$$64 :",
"case_branch : error $$64 ';'",
"at_least_one_case_label : case_label case_labels",
"case_labels : case_labels case_label",
"case_labels :",
"$$65 :",
"case_label : IDL_DEFAULT $$65 ':'",
"$$66 :",
"$$67 :",
"case_label : IDL_CASE $$66 const_expr $$67 ':'",
"$$68 :",
"element_spec : type_spec $$68 declarator",
"struct_forward_type : struct_decl",
"union_forward_type : union_decl",
"$$69 :",
"$$70 :",
"$$71 :",
"$$72 :",
"enum_type : IDL_ENUM $$69 id $$70 '{' $$71 at_least_one_enumerator $$72 '}'",
"at_least_one_enumerator : enumerator enumerators",
"$$73 :",
"enumerators : enumerators ',' $$73 enumerator",
"enumerators :",
"enumerator : IDENTIFIER",
"$$74 :",
"$$75 :",
"sequence_type_spec : seq_head ',' $$74 positive_int_expr $$75 '>'",
"sequence_type_spec : seq_head '>'",
"$$76 :",
"$$77 :",
"seq_head : IDL_SEQUENCE $$76 '<' $$77 simple_type_spec",
"$$78 :",
"$$79 :",
"string_type_spec : string_head '<' $$78 positive_int_expr $$79 '>'",
"string_type_spec : string_head",
"string_head : IDL_STRING",
"$$80 :",
"$$81 :",
"wstring_type_spec : wstring_head '<' $$80 positive_int_expr $$81 '>'",
"wstring_type_spec : wstring_head",
"wstring_head : IDL_WSTRING",
"$$82 :",
"array_declarator : id $$82 at_least_one_array_dim",
"at_least_one_array_dim : array_dim array_dims",
"array_dims : array_dims array_dim",
"array_dims :",
"$$83 :",
"$$84 :",
"array_dim : '[' $$83 positive_int_expr $$84 ']'",
"$$85 :",
"$$86 :",
"attribute : opt_readonly IDL_ATTRIBUTE $$85 param_type_spec $$86 at_least_one_simple_declarator",
"opt_readonly : IDL_READONLY",
"opt_readonly :",
"$$87 :",
"$$88 :",
"$$89 :",
"$$90 :",
"exception : IDL_EXCEPTION $$87 id $$88 '{' $$89 members $$90 '}'",
"$$91 :",
"$$92 :",
"$$93 :",
"$$94 :",
"operation : opt_op_attribute op_type_spec $$91 IDENTIFIER $$92 parameter_list $$93 opt_raises $$94 opt_context",
"opt_op_attribute : IDL_ONEWAY",
"opt_op_attribute : IDL_IDEMPOTENT",
"opt_op_attribute :",
"op_type_spec : param_type_spec",
"op_type_spec : IDL_VOID",
"$$95 :",
"$$96 :",
"init_decl : IDL_FACTORY $$95 IDENTIFIER $$96 init_parameter_list",
"$$97 :",
"init_parameter_list : '(' $$97 ')'",
"$$98 :",
"init_parameter_list : '(' $$98 at_least_one_in_parameter ')'",
"at_least_one_in_parameter : in_parameter in_parameters",
"$$99 :",
"in_parameters : in_parameters ',' $$99 in_parameter",
"in_parameters :",
"$$100 :",
"$$101 :",
"in_parameter : IDL_IN $$100 param_type_spec $$101 declarator",
"$$102 :",
"parameter_list : '(' $$102 ')'",
"$$103 :",
"parameter_list : '(' $$103 at_least_one_parameter ')'",
"at_least_one_parameter : parameter parameters",
"$$104 :",
"parameters : parameters ',' $$104 parameter",
"parameters :",
"$$105 :",
"$$106 :",
"parameter : direction $$105 param_type_spec $$106 declarator",
"param_type_spec : base_type_spec",
"param_type_spec : string_type_spec",
"param_type_spec : wstring_type_spec",
"param_type_spec : scoped_name",
"direction : IDL_IN",
"direction : IDL_OUT",
"direction : IDL_INOUT",
"$$107 :",
"$$108 :",
"opt_raises : IDL_RAISES $$107 '(' $$108 at_least_one_scoped_name ')'",
"opt_raises :",
"$$109 :",
"$$110 :",
"opt_context : IDL_CONTEXT $$109 '(' $$110 at_least_one_string_literal ')'",
"opt_context :",
"at_least_one_string_literal : IDL_STRING_LITERAL string_literals",
"$$111 :",
"string_literals : string_literals ',' $$111 IDL_STRING_LITERAL",
"string_literals :",
"typeid_dcl : IDL_TYPEID scoped_name IDL_STRING_LITERAL",
"typeprefix_dcl : IDL_TYPEPREFIX scoped_name IDL_STRING_LITERAL",
};
#endif
#define tao_yyclearin (tao_yychar=(-1))
#define tao_yyerrok (tao_yyerrflag=0)
#ifndef TAO_YYSTACKSIZE
#ifdef TAO_YYMAXDEPTH
#define TAO_YYSTACKSIZE TAO_YYMAXDEPTH
#else
#define TAO_YYSTACKSIZE 10000
#endif
#endif
int tao_yydebug;
int tao_yynerrs;
int tao_yyerrflag;
int tao_yychar;
short *tao_yyssp;
TAO_YYSTYPE *tao_yyvsp;
TAO_YYSTYPE tao_yyval;
TAO_YYSTYPE tao_yylval;
#define tao_yystacksize TAO_YYSTACKSIZE
short tao_yyss[TAO_YYSTACKSIZE];
TAO_YYSTYPE tao_yyvs[TAO_YYSTACKSIZE];
/* programs */

/*
 * ???
 */
int
tao_yywrap (void)
{
  return 1;
}

/*
 * Report an error situation discovered in a production
 */
void
tao_yyerror (const char *msg)
{
  ACE_ERROR ((LM_ERROR,
              "%s\n",
              msg));
}
#define TAO_YYABORT goto tao_yyabort
#define TAO_YYACCEPT goto tao_yyaccept
#define TAO_YYERROR goto tao_yyerrlab
#ifdef TAO_YYDEBUG
#ifndef TAO_YYDEBUG_LEXER_TEXT /* pointer to the text isolated by the lexer*/
#define TAO_YYDEBUG_LEXER_TEXT "TAO_YYDEBUG_LEXER_TEXT not defined"
#endif
#ifndef TAO_YYDEBUG_INDENT_STRING
#define TAO_YYDEBUG_INDENT_STRING  "|       "
#endif
#ifndef TAO_YYDEBUG_REDUCE_STRING
#define TAO_YYDEBUG_REDUCE_STRING  "+-------"
#endif
#ifndef TAO_YYDEBUG_INDENT
#ifdef __cplusplus
void TAO_YYDEBUG_INDENT(int tao_yyindent)
#else
TAO_YYDEBUG_INDENT(tao_yyindent)
int tao_yyindent;
#endif
{
    while(tao_yyindent-- > 0)
        printf("%s", TAO_YYDEBUG_INDENT_STRING);
}
#endif /* TAO_YYDEBUG_INDENT */
#ifndef TAO_YYDEBUG_REDUCE
#ifdef __cplusplus
void TAO_YYDEBUG_REDUCE(int, int, const char *tao_yyrule_string, int tao_yynew_indent, int tao_yyrhs_count)
#else
TAO_YYDEBUG_REDUCE(tao_yynew_state, tao_yyrule_num, tao_yyrule_string, tao_yynew_indent, tao_yyrhs_count)
int tao_yynew_state;
int tao_yyrule_num;
char * tao_yyrule_string;
int tao_yynew_indent;
int tao_yyrhs_count;
#endif
{
    if (1 < tao_yyrhs_count)
    {  /* draw the graphics for the reduction */
        TAO_YYDEBUG_INDENT(tao_yynew_indent);
        while(1 < tao_yyrhs_count--)
            printf("%s", TAO_YYDEBUG_REDUCE_STRING);
        putchar('+'); /* left rotated L would look nice */
        putchar('\n');
        TAO_YYDEBUG_INDENT(tao_yynew_indent);
        putchar('|'); /* down arrow would look nice */
        putchar('\n');
    }
    TAO_YYDEBUG_INDENT(tao_yynew_indent);
    /* Only print the resulting token name */
    while (*tao_yyrule_string)
        putchar(*tao_yyrule_string++);
    putchar('\n');
}
#endif /* TAO_YYDEBUG_REDUCE */
#ifndef TAO_YYDEBUG_SHIFT_LEXEME
#ifdef __cplusplus
void TAO_YYDEBUG_SHIFT_LEXEME(int, int, const char *tao_yytoken_string, int tao_yynew_indent)
#else
TAO_YYDEBUG_SHIFT_LEXEME(tao_yyold_state, tao_yynew_state, tao_yytoken_string, tao_yynew_indent)
int tao_yyold_state;
int tao_yynew_state;
char * tao_yytoken_string;
int tao_yynew_indent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yynew_indent);
    printf("%s <-- `%s'\n", tao_yytoken_string, TAO_YYDEBUG_LEXER_TEXT);
}
#endif /*  TAO_YYDEBUG_SHIFT_LEXEME */
#ifndef TAO_YYDEBUG_LOOK_AHEAD
#ifdef __cplusplus
void TAO_YYDEBUG_LOOK_AHEAD(int, int tao_yytoken_num, const char *tao_yytoken_string, int tao_yyindent)
#else
TAO_YYDEBUG_LOOK_AHEAD(tao_yynew_state, tao_yytoken_num, tao_yytoken_string, tao_yyindent)
int tao_yynew_state;
int tao_yytoken_num;
char * tao_yytoken_string;
int tao_yyindent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yyindent);
    printf("          .... look ahead at %s   `%s'\n",
           tao_yytoken_string,
           (0 == tao_yytoken_num)? "\0": TAO_YYDEBUG_LEXER_TEXT);
}
#endif /* TAO_YYDEBUG_LOOK_AHEAD */
#ifndef TAO_YYDEBUG_DISCARD_STATE
#ifdef __cplusplus
void TAO_YYDEBUG_DISCARD_STATE(int, int tao_yyindent)
#else
TAO_YYDEBUG_DISCARD_STATE(tao_yynew_state, tao_yyindent)
int tao_yynew_state;
int tao_yyindent;
#endif
{
    if (0 < tao_yyindent)
    {  /* draw the graphics for the reduction */
        TAO_YYDEBUG_INDENT(tao_yyindent-1);
        printf("%s", TAO_YYDEBUG_REDUCE_STRING);
        putchar('+'); /* left rotated L would look nice */
        printf("  discarding state\n");
        TAO_YYDEBUG_INDENT(tao_yyindent-1);
        putchar('|'); /* down arrow would look nice */
        putchar('\n');
    }
    else
    {
        if (0 == tao_yyindent)
            printf("discarding state\n");
        else
            printf("no more states to discard: parser will abort\n");
    }
}
#endif /* TAO_YYDEBUG_DISCARD_STATE */
#ifndef TAO_YYDEBUG_DISCARD_TOKEN
#ifdef __cplusplus
void TAO_YYDEBUG_DISCARD_TOKEN(int, int, const char *tao_yytoken_string, int tao_yyindent)
#else
TAO_YYDEBUG_DISCARD_TOKEN(tao_yynew_state, tao_yytoken_num, tao_yytoken_string, tao_yyindent)
int tao_yynew_state;
int tao_yytoken_num;
char * tao_yytoken_string;
int tao_yyindent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yyindent);
    printf("discarding token %s\n", tao_yytoken_string);
}
#endif /* TAO_YYDEBUG_DISCARD_TOKEN */
#ifndef TAO_YYDEBUG_SHIFT_ERROR_LEXEME
#ifdef __cplusplus
void TAO_YYDEBUG_SHIFT_ERROR_LEXEME(int, int, int tao_yyindent)
#else
TAO_YYDEBUG_SHIFT_ERROR_LEXEME(tao_yyold_state, tao_yynew_state, tao_yyindent)
int tao_yyold_state;
int tao_yynew_state;
int tao_yyindent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yyindent);
    printf("error\n");
}
#endif /* TAO_YYDEBUG_SHIFT_ERROR_LEXEME */
#endif /* TAO_YYDEBUG */
#ifdef __cplusplus
extern "C" { extern char *ace_foo(const char *); }
#endif
int
tao_yyparse()
{
    register int tao_yym, tao_yyn, tao_yystate;
#if TAO_YYDEBUG
    register const char *tao_yys;
#ifndef __cplusplus
    extern char *ace_foo();
#endif

    if ((tao_yys = ACE_OS::getenv("TAO_YYDEBUG")))
    {
        tao_yyn = *tao_yys;
        if (tao_yyn >= '0' && tao_yyn <= '9')
            tao_yydebug = tao_yyn - '0';
    }
#endif

    tao_yynerrs = 0;
    tao_yyerrflag = 0;
    tao_yychar = (-1);

    tao_yyssp = tao_yyss;
    tao_yyvsp = tao_yyvs;
    *tao_yyssp = tao_yystate = 0;

tao_yyloop:
    if ((tao_yyn = tao_yydefred[tao_yystate])) goto tao_yyreduce;
    if (tao_yychar < 0)
    {
        if ((tao_yychar = tao_yylex()) < 0) tao_yychar = 0;
#if TAO_YYDEBUG
        if (tao_yydebug)
        {
            tao_yys = 0;
            if (tao_yychar <= TAO_YYMAXTOKEN) tao_yys = tao_yyname[tao_yychar];
            if (!tao_yys) tao_yys = "illegal-symbol";
            if (5 < tao_yydebug)
                printf("tao_yydebug: state %d, reading %d (%s)\n", tao_yystate,
                        tao_yychar, tao_yys);
            else
                TAO_YYDEBUG_LOOK_AHEAD(tao_yystate, tao_yychar, tao_yys, tao_yyssp-tao_yyss);
        }
#endif
    }
    if ((tao_yyn = tao_yysindex[tao_yystate]) && (tao_yyn += tao_yychar) >= 0 &&
            tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == tao_yychar)
    {
#if TAO_YYDEBUG
        if (tao_yydebug)
            if (5 < tao_yydebug)
                printf("tao_yydebug: state %d, shifting to state %d\n",
                        tao_yystate, tao_yytable[tao_yyn]);
            else
                TAO_YYDEBUG_SHIFT_LEXEME(tao_yystate, tao_yytable[tao_yyn], tao_yys, tao_yyssp-tao_yyss);
#endif
        if (tao_yyssp >= tao_yyss + tao_yystacksize - 1)
        {
            goto tao_yyoverflow;
        }
        *++tao_yyssp = tao_yystate = tao_yytable[tao_yyn];
        *++tao_yyvsp = tao_yylval;
        tao_yychar = (-1);
        if (tao_yyerrflag > 0)  --tao_yyerrflag;
        goto tao_yyloop;
    }
    if ((tao_yyn = tao_yyrindex[tao_yystate]) && (tao_yyn += tao_yychar) >= 0 &&
            tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == tao_yychar)
    {
        tao_yyn = tao_yytable[tao_yyn];
        goto tao_yyreduce;
    }
    if (tao_yyerrflag) goto tao_yyinrecovery;
#ifdef lint
    goto tao_yynewerror;
#endif

//    tao_yyerror("syntax error");
#ifdef lint
    goto tao_yyerrlab;
#endif
    ++tao_yynerrs;
tao_yyinrecovery:
    if (tao_yyerrflag < 3)
    {
        tao_yyerrflag = 3;
        for (;;)
        {
            if ((tao_yyn = tao_yysindex[*tao_yyssp]) && (tao_yyn += TAO_YYERRCODE) >= 0 &&
                    tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == TAO_YYERRCODE)
            {
#if TAO_YYDEBUG
                if (tao_yydebug)
                    if (5 < tao_yydebug)
                        printf("tao_yydebug: state %d, error recovery shifting\
 to state %d\n", *tao_yyssp, tao_yytable[tao_yyn]);
                    else
                        TAO_YYDEBUG_SHIFT_ERROR_LEXEME(*tao_yyssp, tao_yytable[tao_yyn], tao_yyssp-tao_yyss);
#endif
                if (tao_yyssp >= tao_yyss + tao_yystacksize - 1)
                {
                    goto tao_yyoverflow;
                }
                *++tao_yyssp = tao_yystate = tao_yytable[tao_yyn];
                *++tao_yyvsp = tao_yylval;
                goto tao_yyloop;
            }
            else
            {
#if TAO_YYDEBUG
                if (tao_yydebug)
                    if (5 < tao_yydebug)
                        printf("tao_yydebug: error recovery discarding state %d\
",
                            *tao_yyssp);
                    else
                        TAO_YYDEBUG_DISCARD_STATE(*tao_yyssp, tao_yyssp-tao_yyss-1);
#endif
                if (tao_yyssp <= tao_yyss) goto tao_yyabort;
                --tao_yyssp;
                --tao_yyvsp;
            }
        }
    }
    else
    {
        if (tao_yychar == 0) goto tao_yyabort;
#if TAO_YYDEBUG
        if (tao_yydebug)
        {
            tao_yys = 0;
            if (tao_yychar <= TAO_YYMAXTOKEN) tao_yys = tao_yyname[tao_yychar];
            if (!tao_yys) tao_yys = "illegal-symbol";
            if (5 < tao_yydebug)
                printf("tao_yydebug: state %d, error recovery discards token %d (%s)\n",
                    tao_yystate, tao_yychar, tao_yys);
            else 
                TAO_YYDEBUG_DISCARD_TOKEN(tao_yystate, tao_yychar, tao_yys, tao_yyssp-tao_yyss);
        }
#endif
        tao_yychar = (-1);
        goto tao_yyloop;
    }
tao_yyreduce:
    tao_yym = tao_yylen[tao_yyn];
    tao_yyval = tao_yyvsp[1-tao_yym];
#if TAO_YYDEBUG
    if (tao_yydebug)
        if (5 < tao_yydebug)
            printf("tao_yydebug: state %d, reducing by rule %d (%s)\n",
                    tao_yystate, tao_yyn, tao_yyrule[tao_yyn]);
        else
            TAO_YYDEBUG_REDUCE(tao_yystate, tao_yyn, tao_yyrule[tao_yyn], tao_yyssp-tao_yyss-tao_yym, tao_yym);
#endif
    switch (tao_yyn)
    {
case 4:
{
/* definition : type_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeDeclSeen);
        }
break;
case 5:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 6:
{
/*      | typeid_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeIdDeclSeen);
        }
break;
case 7:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 8:
{
/*      | typeprefix_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypePrefixDeclSeen);
        }
break;
case 9:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 10:
{
/*      | const_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstDeclSeen);
        }
break;
case 11:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 12:
{
/*      | exception*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptDeclSeen);
        }
break;
case 13:
{
/*      ';'*/
        idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 14:
{
/*      | interface_def*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceDeclSeen);
        }
break;
case 15:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 16:
{
/*      | module*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ModuleDeclSeen);
        }
break;
case 17:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 18:
{
/*      | value_def*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValuetypeDeclSeen);
        }
break;
case 19:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 20:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state());
        }
break;
case 21:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 22:
{
/* module  : IDL_MODULE*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleSeen);
          }
break;
case 23:
{
/*        IDENTIFIER*/
            Identifier id (tao_yyvsp[0].strval);
            UTL_ScopedName n (&id, 
                              0);
            AST_Module *m = 0;
            UTL_Scope *s = idl_global->scopes ().top_non_null ();

            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleIDSeen);
            /*
             * Make a new module and add it to the enclosing scope
             */
            if (s != 0) 
              {
                m = idl_global->gen ()->create_module (s, 
                                                       &n);
                (void) s->fe_add_module (m);
              }
            /*
             * Push it on the stack
             */
            idl_global->scopes ().push (m);
          }
break;
case 24:
{
/*        '{'*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleSqSeen);
          }
break;
case 25:
{
/*        definitions*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleBodySeen);
          }
break;
case 26:
{
/*        '}'*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleQsSeen);
            /*
             * Finished with this module - pop it from the scope stack.
             */
            idl_global->scopes ().pop ();
          }
break;
case 29:
{
/* interface : interface_header          */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Interface *i = 0;

          /*
           * Make a new interface node and add it to its enclosing scope
           */
          if (s != 0 && tao_yyvsp[0].ihval != 0) 
            {
              i = 
                idl_global->gen ()->create_interface (
                                        tao_yyvsp[0].ihval->interface_name (),
                                        tao_yyvsp[0].ihval->inherits (),
                                        tao_yyvsp[0].ihval->n_inherits (),
                                        tao_yyvsp[0].ihval->inherits_flat (),
                                        tao_yyvsp[0].ihval->n_inherits_flat (),
                                        tao_yyvsp[0].ihval->is_local (),
                                        tao_yyvsp[0].ihval->is_abstract ()
                                      );
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the interface to its definition scope.
               */
              (void) s->fe_add_interface (i);
            }

          /*
           * Push it on the scope stack.
           */
          idl_global->scopes ().push (i);

          /* This FE_InterfaceHeader class isn't destroyed with the AST.*/
          tao_yyvsp[0].ihval->interface_name ()->destroy ();
          delete tao_yyvsp[0].ihval;
          tao_yyvsp[0].ihval = 0;
        }
break;
case 30:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceSqSeen);
        }
break;
case 31:
{
/*      exports*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceBodySeen);
        }
break;
case 32:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceQsSeen);

          /*
           * Done with this interface - pop it off the scopes stack
           */
          idl_global->scopes ().pop ();
        }
break;
case 33:
{
/* interface_decl : IDL_INTERFACE*/
           idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceSeen);
         }
break;
case 34:
{
/*       id*/
           idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceIDSeen);
           tao_yyval.idval = tao_yyvsp[0].idval;
         }
break;
case 35:
{
/* interface_header : interface_decl inheritance_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);

          /*
           * Create an AST representation of the information in the header
           * part of an interface - this representation contains a computed
           * list of all interfaces which this interface inherits from,
           * recursively
           */
          UTL_ScopedName n (tao_yyvsp[-1].idval, 
                            0);
          ACE_NEW_RETURN (tao_yyval.ihval,
                          FE_InterfaceHeader (&n,
                                              tao_yyvsp[0].nlval),
                          1);
        }
break;
case 36:
{
/*      | IDL_LOCAL interface_decl inheritance_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);

          /*
           * Create an AST representation of the information in the header
           * part of an interface - this representation contains a computed
           * list of all interfaces which this interface inherits from,
           * recursively
           */
          UTL_ScopedName n (tao_yyvsp[-1].idval, 
                            0);
          ACE_NEW_RETURN (tao_yyval.ihval,
                          FE_InterfaceHeader (&n, 
                                              tao_yyvsp[0].nlval),
                          1);
        }
break;
case 37:
{
/*      | IDL_ABSTRACT interface_decl inheritance_spec*/
           ACE_DEBUG ((LM_DEBUG,
                       ACE_TEXT ("error in %s line %d\n"),
                       idl_global->filename ()->get_string (),
                       idl_global->lineno ()));
           ACE_DEBUG ((LM_DEBUG,
                       ACE_TEXT ("Sorry, I (TAO_IDL) can't handle abstract")
                       ACE_TEXT (" interfaces yet\n")));
        }
break;
case 38:
{
/* inheritance_spec : ':'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritColonSeen);
        }
break;
case 39:
{
/*      at_least_one_scoped_name*/
          tao_yyval.nlval = tao_yyvsp[0].nlval;
        }
break;
case 40:
{
/*      | /* EMPTY * /*/
          tao_yyval.nlval = 0;
        }
break;
case 45:
{
/* valuetype : IDL_CUSTOM value_concrete_decl*/
           ACE_DEBUG ((LM_DEBUG,
                       ACE_TEXT ("error in %s line %d\n"),
                       idl_global->filename ()->get_string (),
                       idl_global->lineno ()));
           ACE_DEBUG ((LM_DEBUG,
                       ACE_TEXT ("Sorry, I (TAO_IDL) can't handle")
                       ACE_TEXT (" custom yet\n")));
        }
break;
case 47:
{
/* value_concrete_decl : value_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Interface *i = 0;

          if (s != 0 && tao_yyvsp[0].vhval != 0) 
            {
              i = 
                idl_global->gen ()->create_valuetype (
                                        tao_yyvsp[0].vhval->interface_name (),
                                        tao_yyvsp[0].vhval->inherits (),
                                        tao_yyvsp[0].vhval->n_inherits ()
                                      );
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the valuetype to its definition scope
               */
              (void) s->fe_add_interface (i);
            }

          /*
           * Push it on the scope stack
           */
          idl_global->scopes ().push (i);
        }
break;
case 48:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceSqSeen);
        }
break;
case 49:
{
/*      value_elements*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceBodySeen);
        }
break;
case 50:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceQsSeen);

          /*
           * Done with this interface - pop it off the scopes stack
           */
          UTL_Scope* s = idl_global->scopes ().top ();
          AST_Interface* m = AST_Interface::narrow_from_scope (s);
          m->inherited_name_clash ();
          idl_global->scopes ().pop ();
        }
break;
case 51:
{
/* value_abs_decl : IDL_ABSTRACT value_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Interface *i = 0;

          if (s != 0 && tao_yyvsp[0].vhval != 0) 
            {
              if (tao_yyvsp[0].vhval->n_concrete() > 0) 
                {
                  idl_global->err ()->abstract_inheritance_error (
                                          tao_yyvsp[0].vhval->interface_name ()
                                        );
                }

              i = 
                idl_global->gen ()->create_valuetype (
                                        tao_yyvsp[0].vhval->interface_name (),
                                        tao_yyvsp[0].vhval->inherits (),
                                        tao_yyvsp[0].vhval->n_inherits ()
                                      );
              i->set_abstract_valuetype ();
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the valuetype to its definition scope
               */
              (void) s->fe_add_interface (i);
            }

          /*
           * Push it on the scope stack.
           */
          idl_global->scopes ().push (i);
        }
break;
case 52:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceSqSeen);
        }
break;
case 53:
{
/*      exports*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceBodySeen);
        }
break;
case 54:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceQsSeen);

          /*
           * Done with this interface - pop it off the scopes stack.
           */
          UTL_Scope* s = idl_global->scopes ().top ();
          AST_Interface* m = AST_Interface::narrow_from_scope (s);
          m->inherited_name_clash ();
          idl_global->scopes ().pop ();
        }
break;
case 55:
{
/* value_header : value_decl opt_truncatable inheritance_spec supports_spec*/
          UTL_ScopedName *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_ScopedName (tao_yyvsp[-3].idval, 
                                          0),
                          1);
          ACE_NEW_RETURN (tao_yyval.vhval,
                          FE_obv_header (sn,
                                         tao_yyvsp[-1].nlval,
                                         tao_yyvsp[0].nlval),
                          1);      
        }
break;
case 56:
{
/* value_decl : IDL_VALUETYPE*/
           idl_global->set_parse_state (IDL_GlobalData::PS_ValuetypeSeen);
        }
break;
case 57:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValuetypeIDSeen);
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 58:
{
/* opt_truncatable : IDL_TRUNCATABLE*/
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("warning in %s line %d\n"),
                      idl_global->filename ()->get_string (),
                      idl_global->lineno ()));
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("truncatable modifier not supported ")
                      ACE_TEXT ("and is ignored\n")));
          tao_yyval.bval = I_FALSE;
        }
break;
case 59:
{
/*      | /* EMPTY * /*/
          tao_yyval.bval = I_FALSE;
        }
break;
case 60:
{
/* supports_spec : IDL_SUPPORTS scoped_name*/
          ACE_NEW_RETURN (tao_yyval.nlval,
                          UTL_NameList (tao_yyvsp[0].idlist, 
                                        0),
                          1);
        }
break;
case 61:
{
/*      |   /* EMPTY * /*/
          tao_yyval.nlval = 0;
        }
break;
case 62:
{
/* value_forward_decl : IDL_ABSTRACT value_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * valuetype. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen()->create_valuetype_fwd (&n);
              f->set_abstract_valuetype ();
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 63:
{
/*      | value_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * valuetype. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_valuetype_fwd (&n);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 64:
{
/* value_box_decl : value_decl type_spec*/
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("error in %s line %d\n"),
                      idl_global->filename ()->get_string (),
                      idl_global->lineno ()));
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("Sorry, I (TAO_IDL) can't handle")
                      ACE_TEXT (" boxes yet\n")));
        }
break;
case 70:
{
/* state_member : IDL_PUBLIC*/
          /* is $0 to member_i */
          tao_yyval.vival = AST_Field::vis_PUBLIC;
        }
break;
case 72:
{
/*      IDL_PRIVATE*/
          /* is $0 to member_i */
          tao_yyval.vival = AST_Field::vis_PRIVATE;
        }
break;
case 76:
{
/* export : type_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeDeclSeen);
        }
break;
case 77:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 78:
{
/*      | typeid_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeIdDeclSeen);
        }
break;
case 79:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 80:
{
/*      | typeprefix_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypePrefixDeclSeen);
        }
break;
case 81:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 82:
{
/*      | const_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstDeclSeen);
        }
break;
case 83:
{
/*      ';'*/
          idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        }
break;
case 84:
{
/*      | exception*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptDeclSeen);
        }
break;
case 85:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 86:
{
/*      | attribute*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrDeclSeen);
        }
break;
case 87:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 88:
{
/*      | operation*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpDeclSeen);
        }
break;
case 89:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 90:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state());
        }
break;
case 91:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 92:
{
/* at_least_one_scoped_name : scoped_name scoped_names*/
          ACE_NEW_RETURN (tao_yyval.nlval,
                          UTL_NameList (tao_yyvsp[-1].idlist, 
                                        tao_yyvsp[0].nlval),
                          1);
        }
break;
case 93:
{
/* scoped_names : scoped_names ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SNListCommaSeen);
        }
break;
case 94:
{
/*      scoped_name*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ScopedNameSeen);

          if (tao_yyvsp[-3].nlval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.nlval,
                              UTL_NameList (tao_yyvsp[0].idlist, 
                                            0),
                              1);
            }
          else 
            {
              UTL_NameList *nl = 0;
              ACE_NEW_RETURN (nl,
                              UTL_NameList (tao_yyvsp[0].idlist, 
                                            0),
                              1);
              tao_yyvsp[-3].nlval->nconc (nl);
              tao_yyval.nlval = tao_yyvsp[-3].nlval;
            }
        }
break;
case 95:
{
/*      | /* EMPTY * /*/
          tao_yyval.nlval = 0;
        }
break;
case 96:
{
/* scoped_name : id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SN_IDSeen);

          ACE_NEW_RETURN (tao_yyval.idlist,
                          UTL_IdList (tao_yyvsp[0].idval,
                                      0),
                          1);
        }
break;
case 97:
{
/*      | IDL_SCOPE_DELIMITOR*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ScopeDelimSeen);
        }
break;
case 98:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SN_IDSeen);

          Identifier *id = 0;
          ACE_NEW_RETURN (id,
                          Identifier (tao_yyvsp[-2].strval),
                          1);
          UTL_IdList *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_IdList (tao_yyvsp[0].idval,
                                      0),
                          1);
          ACE_NEW_RETURN (tao_yyval.idlist,
                          UTL_IdList (id,
                                      sn),
                          1);
        }
break;
case 99:
{
/*      | scoped_name IDL_SCOPE_DELIMITOR*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ScopeDelimSeen);
        }
break;
case 100:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SN_IDSeen);

          UTL_IdList *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_IdList (tao_yyvsp[0].idval,
                                      0),
                          1);
          tao_yyvsp[-3].idlist->nconc (sn);
          tao_yyval.idlist = tao_yyvsp[-3].idlist;
        }
break;
case 101:
{
/* id: IDENTIFIER*/
          ACE_NEW_RETURN (tao_yyval.idval,
                          Identifier (tao_yyvsp[0].strval),
                          1);
          ACE_OS::free (tao_yyvsp[0].strval);
        }
break;
case 102:
{
/* interface_forward : interface_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * interface. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_interface_fwd (&n, 
                                                            0,
                                                            0);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 103:
{
/*      | IDL_LOCAL interface_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (
                          IDL_GlobalData::PS_InterfaceForwardSeen
                        );

          /*
           * Create a node representing a forward declaration of an
           * interface. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_interface_fwd (&n, 
                                                            1, 
                                                            0);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 104:
{
/*      | IDL_ABSTRACT interface_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (
                          IDL_GlobalData::PS_InterfaceForwardSeen
                        );

          /*
           * Create a node representing a forward declaration of an
           * interface. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_interface_fwd (&n, 
                                                            0, 
                                                            1);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 105:
{
/* const_dcl : IDL_CONST*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstSeen);
        }
break;
case 106:
{
/*      const_type*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstTypeSeen);
        }
break;
case 107:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstIDSeen);
        }
break;
case 108:
{
/*      '='*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstAssignSeen);
        }
break;
case 109:
{
/*      expression*/
          UTL_ScopedName n (tao_yyvsp[-4].idval, 
                            0);
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Constant *c = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstExprSeen);

          /*
           * Create a node representing a constant declaration. Store
           * it in the enclosing scope.
           */
          if (tao_yyvsp[0].exval != 0 && s != 0) 
            {
              AST_Expression::AST_ExprValue *result = 
                tao_yyvsp[0].exval->coerce (tao_yyvsp[-6].etval);

              if (result == 0)
                {
                  idl_global->err ()->coercion_error (tao_yyvsp[0].exval, 
                                                      tao_yyvsp[-6].etval);
                }
              else 
                {
                  c = 
                    idl_global->gen ()->create_constant (
                                            tao_yyvsp[-6].etval,
                                            tao_yyvsp[0].exval, 
                                            &n
                                          );
                  (void) s->fe_add_constant (c);
                  delete result;
                }
              
              tao_yyvsp[-4].idval->destroy ();
              delete tao_yyvsp[-4].idval;
              tao_yyvsp[-4].idval = 0;
            }
        }
break;
case 116:
{
/* const_type*/
/*      : integer_type*/
/*      | char_type*/
/*      | octet_type*/
/*      | boolean_type*/
/*      | floating_pt_type*/
/*      | fixed_type*/
/*      | string_type_spec*/
          tao_yyval.etval = AST_Expression::EV_string;
        }
break;
case 117:
{
/*      | wstring_type_spec*/
          tao_yyval.etval = AST_Expression::EV_wstring;
        }
break;
case 118:
{
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_PredefinedType *c = 0;
          AST_Typedef *t = 0;

          /*
           * If the constant's type is a scoped name, it must resolve
           * to a scalar constant type
           */
          AST_Decl *d = 
            s->lookup_by_name (tao_yyvsp[0].idlist, 
                               I_TRUE);

          if (s != 0  && d != 0) 
            {
              /*
               * Look through typedefs.
               */
              while (d->node_type () == AST_Decl::NT_typedef) 
                {
                  t = AST_Typedef::narrow_from_decl (d);

                  if (t == 0)
                    {
                      break;
                    }

                  d = t->base_type ();
                }

              if (d == 0)
                {
                  tao_yyval.etval = AST_Expression::EV_any;
                }
              else if (d->node_type () == AST_Decl::NT_pre_defined) 
                {
                  c = AST_PredefinedType::narrow_from_decl (d);

                  if (c != 0) 
                    {
                      tao_yyval.etval = idl_global->PredefinedTypeToExprType (c->pt ());
                    } 
                  else 
                    {
                      tao_yyval.etval = AST_Expression::EV_any;
                    }
                } 
              else if (d->node_type () == AST_Decl::NT_string) 
                {
                  tao_yyval.etval = AST_Expression::EV_string;
                } 
              else if (d->node_type () == AST_Decl::NT_wstring) 
                {
                  tao_yyval.etval = AST_Expression::EV_wstring;
                } 
              else
                {
                  tao_yyval.etval = AST_Expression::EV_any;
                }
            } 
          else
            {
              tao_yyval.etval = AST_Expression::EV_any;
            }
        }
break;
case 122:
{
/* or_expr : xor_expr*/
/*      | or_expr '|' xor_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_or, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 124:
{
/* xor_expr : and_expr*/
/*      | xor_expr '^' and_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_xor, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 126:
{
/* and_expr : shift_expr | and_expr '&' shift_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_and, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 128:
{
/* shift_expr : add_expr | shift_expr IDL_LEFT_SHIFT add_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_left, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 129:
{
/*      | shift_expr IDL_RIGHT_SHIFT add_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_right, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 131:
{
/* add_expr : mult_expr | add_expr '+' mult_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_add, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 132:
{
/*      | add_expr '-' mult_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_minus, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 134:
{
/* mult_expr : unary_expr | mult_expr '*' unary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_mul, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 135:
{
/*      | mult_expr '/' unary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_div, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 136:
{
/*      | mult_expr '%' unary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_mod, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 138:
{
/* unary_expr : primary_expr | '+' primary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_u_plus,
                                    tao_yyvsp[0].exval,
                                    0
                                  );
        }
break;
case 139:
{
/*      | '-' primary_expr*/
          tao_yyval.exval = 
            idl_global->gen()->create_expr (
                                   AST_Expression::EC_u_minus,
                                   tao_yyvsp[0].exval,
                                   0
                                 );
        }
break;
case 140:
{
/*      | '~' primary_expr*/
          tao_yyval.exval = 
            idl_global->gen()->create_expr (
                                   AST_Expression::EC_bit_neg,
                                   tao_yyvsp[0].exval,
                                   0
                                 );
        }
break;
case 141:
{
/* primary_expr : scoped_name*/
          /*
           * An expression which is a scoped name is not resolved now,
           * but only when it is evaluated (such as when it is assigned
           * as a constant value).
           */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[0].idlist,
                                            1);

          /*
           * If the scoped name is an IDL constant, it may be used in an
           * array dim, a string bound, or a sequence bound. If so, it 
           * must be unsigned and > 0. We assign the constant's value
           * and type to the expression created here so we can check 
           * them later.
           */
          if (d != 0 && d->node_type () == AST_Decl::NT_const)
            {
              AST_Constant *c = AST_Constant::narrow_from_decl (d);
              tao_yyval.exval = idl_global->gen ()->create_expr (c->constant_value (),
                                                    c->et ());
            }
          else
            {
              tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].idlist);
            }
        }
break;
case 143:
{
/*      | literal*/
/*      | '(' const_expr ')'*/
          tao_yyval.exval = tao_yyvsp[-1].exval;
        }
break;
case 144:
{
/* literal : IDL_INTEGER_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].ival);
        }
break;
case 145:
{
/*      | IDL_UINTEGER_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].uival);
        }
break;
case 146:
{
/*      | IDL_STRING_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].sval);
        }
break;
case 147:
{
/*      | IDL_WSTRING_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].wsval);
        }
break;
case 148:
{
/*      | IDL_CHARACTER_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].cval);
        }
break;
case 149:
{
/*      | IDL_WCHAR_LITERAL*/
          ACE_OutputCDR::from_wchar wc (tao_yyvsp[0].wcval);
          tao_yyval.exval = idl_global->gen ()->create_expr (wc);
        }
break;
case 150:
{
/*      | IDL_FLOATING_PT_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].dval);
        }
break;
case 151:
{
/*      | IDL_TRUETOK*/
          tao_yyval.exval = idl_global->gen ()->create_expr ((idl_bool) I_TRUE,
                                                AST_Expression::EV_bool);
        }
break;
case 152:
{
/*      | IDL_FALSETOK*/
          tao_yyval.exval = idl_global->gen ()->create_expr ((idl_bool) I_FALSE,
                                                AST_Expression::EV_bool);
        }
break;
case 153:
{
/* positive_int_expr : const_expr*/
          int good_expression = 1;
          tao_yyvsp[0].exval->evaluate (AST_Expression::EK_positive_int);
          AST_Expression::AST_ExprValue *ev = tao_yyvsp[0].exval->ev ();

          /*
           * If const_expr is an enum value (AST_EnumVal inherits from
           * AST_Constant), the AST_ExprValue will probably not be set,
           * but there's no need to check anyway
           */
          if (ev != 0)
            {
              switch (ev->et)
              {
                case AST_Expression::EV_ushort:
                  if (ev->u.usval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_ulong:
                  if (ev->u.ulval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_ulonglong:
                  if (ev->u.ullval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_octet:
                  if (ev->u.oval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_bool:
                  if (ev->u.bval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                default:
                  good_expression = 0;
                  break;
              }
            }

          if (good_expression)
            {
              tao_yyval.exval = 
                idl_global->gen()->create_expr (tao_yyvsp[0].exval, 
                                                AST_Expression::EV_ulong);
            }
          else
            {
              idl_global->err ()->syntax_error (idl_global->parse_state ());
            }
        }
break;
case 154:
{
/* type_dcl : IDL_TYPEDEF*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypedefSeen);
        }
break;
case 155:
{ 
/*      type_declarator */
          tao_yyval.ival = 0; 
        }
break;
case 156:
{ 
/*      | struct_type */
          tao_yyval.ival = 0;
        }
break;
case 157:
{ 
/*      | union_type */
          tao_yyval.ival = 0;
        }
break;
case 158:
{ 
/*      | enum_type */
          tao_yyval.ival = 0;
        }
break;
case 159:
{
/*      | IDL_NATIVE simple_declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Native *node = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_NativeSeen);

          /*
           * Create a node representing a Native and add it to its
           * enclosing scope
           */
          if (s != 0) 
            {
              node = 
                idl_global->gen ()->create_native (
                                        tao_yyvsp[0].deval->name ()
                                      );
              /*
               * Add it to its defining scope
               */
              (void) s->fe_add_native (node);
            }
        }
break;
case 160:
{
/*      | constructed_forward_type_spec*/
          tao_yyval.ival = 0;
        }
break;
case 161:
{
/* type_declarator : type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeSpecSeen);
        }
break;
case 162:
{
/*      at_least_one_declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          FE_Declarator *d = 0;
          AST_Typedef *t = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclaratorsSeen);

          /*
           * Create a list of type renamings. Add them to the
           * enclosing scope
           */
          if (s != 0 && tao_yyvsp[-2].dcval != 0 && tao_yyvsp[0].dlval != 0) 
            {
              for (UTL_DecllistActiveIterator l (tao_yyvsp[0].dlval); 
                   !l.is_done (); 
                   l.next ()) 
                {
                  d = l.item ();

                  if (d == 0)
                    {
                        continue;
                    }

                  AST_Type * tp = d->compose (tao_yyvsp[-2].dcval);

                  if (tp == 0)
                    {
                      continue;
                    }

                  t = idl_global->gen ()->create_typedef (tp, 
                                                          d->name (),
                                                          s->is_local (),
                                                          s->is_abstract ());
                  (void) s->fe_add_typedef (t);
                }

              /* This FE_Declarator class isn't destroyed with the AST.*/
              tao_yyvsp[0].dlval->destroy ();
              delete tao_yyvsp[0].dlval;
              tao_yyvsp[0].dlval = 0;
            }
        }
break;
case 165:
{
/* simple_type_spec : base_type_spec*/
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 167:
{
/*      | template_type_spec*/
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = 0;

          if (s != 0)
            {
              d = s->lookup_by_name (tao_yyvsp[0].idlist, 
                                     I_TRUE);
            }

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[0].idlist);
            }

          tao_yyval.dcval = d;
        }
break;
case 183:
{
/* at_least_one_declarator : declarator declarators*/
          ACE_NEW_RETURN (tao_yyval.dlval,
                          UTL_DeclList (tao_yyvsp[-1].deval,
                                        tao_yyvsp[0].dlval),
                          1);
        }
break;
case 184:
{
/* declarators : declarators ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsCommaSeen);
        }
break;
case 185:
{
/*      declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsDeclSeen);

          if (tao_yyvsp[-3].dlval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.dlval,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);               
            }
          else 
            {
              UTL_DeclList *dl = 0;
              ACE_NEW_RETURN (dl,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);
              tao_yyvsp[-3].dlval->nconc (dl);
              tao_yyval.dlval = tao_yyvsp[-3].dlval;
            }
        }
break;
case 186:
{
/*      | /* EMPTY * /*/
          tao_yyval.dlval = 0;
        }
break;
case 189:
{
/* at_least_one_simple_declarator : simple_declarator simple_declarators*/
          ACE_NEW_RETURN (tao_yyval.dlval,
                          UTL_DeclList (tao_yyvsp[-1].deval,
                                        tao_yyvsp[0].dlval),
                          1);
        }
break;
case 190:
{
/* simple_declarators : simple_declarators ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsCommaSeen);
        }
break;
case 191:
{
/*      simple_declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsDeclSeen);

          if (tao_yyvsp[-3].dlval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.dlval,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);
            }
          else 
            {
              UTL_DeclList *dl = 0;
              ACE_NEW_RETURN (dl,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);
              tao_yyvsp[-3].dlval->nconc (dl);
              tao_yyval.dlval = tao_yyvsp[-3].dlval;
            }
        }
break;
case 192:
{
/*      | /* EMPTY * /*/
          tao_yyval.dlval = 0;
        }
break;
case 193:
{
/* simple_declarator : id*/
          UTL_ScopedName *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_ScopedName (tao_yyvsp[0].idval,
                                          0),
                          1);
          ACE_NEW_RETURN (tao_yyval.deval,
                          FE_Declarator (sn,
                                         FE_Declarator::FD_simple,
                                         0),
                          1);
        }
break;
case 194:
{
/* complex_declarator : array_declarator*/
          UTL_ScopedName *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_ScopedName (
                              tao_yyvsp[0].dcval->local_name ()->copy (),
                              0
                            ),
                          1);
          ACE_NEW_RETURN (tao_yyval.deval,
                          FE_Declarator (sn,
                                         FE_Declarator::FD_complex,
                                         tao_yyvsp[0].dcval),
                          1);
        }
break;
case 197:
{
/* signed_int : IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_long;
        }
break;
case 198:
{
/*      | IDL_LONG IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_longlong;
        }
break;
case 199:
{
/*      | IDL_SHORT*/
          tao_yyval.etval = AST_Expression::EV_short;
        }
break;
case 200:
{
/* unsigned_int : IDL_UNSIGNED IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_ulong;
        }
break;
case 201:
{
/*      | IDL_UNSIGNED IDL_LONG IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_ulonglong;
        }
break;
case 202:
{
/*      | IDL_UNSIGNED IDL_SHORT*/
          tao_yyval.etval = AST_Expression::EV_ushort;
        }
break;
case 203:
{
/* floating_pt_type : IDL_DOUBLE*/
          tao_yyval.etval = AST_Expression::EV_double;
        }
break;
case 204:
{
/*      | IDL_FLOAT*/
          tao_yyval.etval = AST_Expression::EV_float;
        }
break;
case 205:
{
/*      | IDL_LONG IDL_DOUBLE*/
          tao_yyval.etval = AST_Expression::EV_longdouble;
        }
break;
case 206:
{
/* fixed_type : IDL_FIXED*/
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("error in %s line %d\n"),
                      idl_global->filename ()->get_string (),
                      idl_global->lineno ()));
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("Sorry, I (TAO_IDL) can't handle")
                      ACE_TEXT (" fixed types yet\n")));
        }
break;
case 207:
{
/* char_type : IDL_CHAR*/
          tao_yyval.etval = AST_Expression::EV_char;
        }
break;
case 208:
{
/*      | IDL_WCHAR*/
          tao_yyval.etval = AST_Expression::EV_wchar;
        }
break;
case 209:
{
/* octet_type : IDL_OCTET*/
          tao_yyval.etval = AST_Expression::EV_octet;
        }
break;
case 210:
{
/* boolean_type : IDL_BOOLEAN*/
          tao_yyval.etval = AST_Expression::EV_bool;
        }
break;
case 211:
{
/* any_type : IDL_ANY*/
          tao_yyval.etval = AST_Expression::EV_any;
        }
break;
case 212:
{
/* struct_decl : IDL_STRUCT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructSeen);
        }
break;
case 213:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructIDSeen);
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 214:
{
/* struct_type : struct_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_Structure *d = 0;

          /*
           * Create a node representing a struct declaration. Add it
           * to the enclosing scope
           */
          if (s != 0) 
            {
              d = 
                idl_global->gen ()->create_structure (
                                        &n,
                                        s->is_local (),
                                        s->is_abstract ()
                                      );
              (void) s->fe_add_structure (d);
            }

          /*
           * Push the scope of the struct on the scopes stack.
           */
          idl_global->scopes ().push (d);
        }
break;
case 215:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructSqSeen);
        }
break;
case 216:
{
/*      at_least_one_member*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructBodySeen);
        }
break;
case 217:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructQsSeen);

          /*
           * Done with this struct. Pop its scope off the scopes stack.
           */
          tao_yyval.dcval = AST_Structure::narrow_from_scope (
                   idl_global->scopes ().top_non_null ()
                 );
          idl_global->scopes ().pop ();
        }
break;
case 221:
{
/* member  :*/
          /* is $0 to member_i */
          tao_yyval.vival = AST_Field::vis_NA;
        }
break;
case 223:
{
/* member_i : type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_MemberTypeSeen);
        }
break;
case 224:
{
/*      at_least_one_declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_MemberDeclsSeen);
        }
break;
case 225:
{
/*      ';'*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          FE_Declarator *d = 0;
          AST_Field *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_MemberDeclsCompleted);

          /*
           * Check for illegal recursive use of type.
           */
          if (tao_yyvsp[-4].dcval != 0 
              && AST_illegal_recursive_type (tao_yyvsp[-4].dcval))
            {
              idl_global->err ()->error1 (UTL_Error::EIDL_RECURSIVE_TYPE, 
                                          tao_yyvsp[-4].dcval);
            }
          /*
           * Create a node representing a struct or exception member
           * Add it to the enclosing scope.
           */
          else if (s != 0 
                   && tao_yyvsp[-4].dcval != 0 
                   && tao_yyvsp[-2].dlval != 0) 
            {
              for (UTL_DecllistActiveIterator l (tao_yyvsp[-2].dlval); 
                   !l.is_done (); 
                   l.next ()) 
                {
                  d = l.item ();

                  if (d == 0)
                    {
                      continue;
                    }

                  AST_Type *tp = d->compose (tao_yyvsp[-4].dcval);

                  if (tp == 0)
                    {
                      continue;
                    }

                  /* $0 denotes Visibility, must be on yacc reduction stack. */
                  f = 
                    idl_global->gen ()->create_field (
                                            tp, 
                                            d->name (), 
                                            tao_yyvsp[-5].vival
                                          );
                  (void) s->fe_add_field (f);
                }
            }
        }
break;
case 226:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state ());
        }
break;
case 227:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 228:
{
/* union_decl : IDL_UNION*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionSeen);
        }
break;
case 229:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionIDSeen);
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 230:
{
/* union_type : union_decl IDL_SWITCH*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchSeen);
        }
break;
case 231:
{
/*      '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchOpenParSeen);
        }
break;
case 232:
{
/*      switch_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchTypeSeen);
        }
break;
case 233:
{
/*      ')'*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[-7].idval, 
                            0);
          AST_Union *u = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchCloseParSeen);

          /*
           * Create a node representing a union. Add it to its enclosing
           * scope.
           */
          if (tao_yyvsp[-2].dcval != 0 
              && s != 0) 
            {
              AST_ConcreteType *tp = 
                AST_ConcreteType::narrow_from_decl (tao_yyvsp[-2].dcval);

              if (tp == 0) 
                {
                  idl_global->err ()->not_a_type (tao_yyvsp[-2].dcval);
                } 
              else 
                {
                  u = idl_global->gen ()->create_union (tp,
                                                        &n,
                                                        s->is_local (),
                                                        s->is_abstract ());
                }

                (void) s->fe_add_union (u);
            }

          /*
           * Push the scope of the union on the scopes stack
           */
          idl_global->scopes ().push (u);
        }
break;
case 234:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionSqSeen);
        }
break;
case 235:
{
/*      at_least_one_case_branch*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionBodySeen);
        }
break;
case 236:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionQsSeen);

          /*
           * Done with this union. Pop its scope from the scopes stack.
           */
          tao_yyval.dcval = AST_Union::narrow_from_scope (
                   idl_global->scopes ().top_non_null ()
                 );

          if (tao_yyval.dcval != 0)
            {
              idl_global->scopes ().pop ();
            }
        }
break;
case 237:
{
/* switch_type_spec : integer_type*/
          tao_yyval.dcval = idl_global->scopes ().bottom ()->lookup_primitive_type (tao_yyvsp[0].etval);
        }
break;
case 238:
{
/*      | char_type*/
          /* wchars are not allowed. */
          if (tao_yyvsp[0].etval == AST_Expression::EV_wchar)
            {
              idl_global->err ()->error0 (UTL_Error::EIDL_DISC_TYPE);
            }

          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 239:
{
/*      | octet_type*/
          /* octets are not allowed. */
          idl_global->err ()->error0 (UTL_Error::EIDL_DISC_TYPE);
          tao_yyval.dcval = idl_global->scopes ().bottom ()->lookup_primitive_type (tao_yyvsp[0].etval);
        }
break;
case 240:
{
/*      | boolean_type*/
          tao_yyval.dcval = idl_global->scopes ().bottom ()->lookup_primitive_type (tao_yyvsp[0].etval);
        }
break;
case 242:
{
/*      | enum_type*/
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = 0;
          AST_PredefinedType *p = 0;
          AST_Typedef *t = 0;
          idl_bool found = I_FALSE;

          /*
           * The discriminator is a scoped name. Try to resolve to
           * one of the scalar types or to an enum. Thread through
           * typedef's to arrive at the base type at the end of the
           * chain.
           */
          d = s->lookup_by_name (tao_yyvsp[0].idlist, 
                                 I_TRUE);

          if (s != 0 && d != 0) 
            {
              while (!found) 
                {
                  switch (d->node_type ()) 
                  {
                    case AST_Decl::NT_enum:
                      tao_yyval.dcval = d;
                      found = I_TRUE;
                      break;
                    case AST_Decl::NT_pre_defined:
                      p = AST_PredefinedType::narrow_from_decl (d);

                      if (p != 0) 
                        {
                          switch (p->pt ()) 
                          {
                            case AST_PredefinedType::PT_long:
                            case AST_PredefinedType::PT_ulong:
                            case AST_PredefinedType::PT_longlong:
                            case AST_PredefinedType::PT_ulonglong:
                            case AST_PredefinedType::PT_short:
                            case AST_PredefinedType::PT_ushort:
                            case AST_PredefinedType::PT_char:
                            case AST_PredefinedType::PT_boolean:
                              tao_yyval.dcval = p;
                              found = I_TRUE;
                              break;
                            case AST_PredefinedType::PT_wchar:
                            case AST_PredefinedType::PT_octet:
                              /* octets and wchars are not allowed */
                              idl_global->err ()->error0 (
                                  UTL_Error::EIDL_DISC_TYPE
                                );
                              tao_yyval.dcval = 0;
                              found = I_TRUE;
                              break;
                            default:
                              tao_yyval.dcval = 0;
                              found = I_TRUE;
                              break;
                          }
                        } 
                      else
                        {
                          tao_yyval.dcval = 0;
                          found = I_TRUE;
                        }

                      break;
                    case AST_Decl::NT_typedef:
                      t = AST_Typedef::narrow_from_decl (d);

                      if (t != 0) 
                        {
                          d = t->base_type ();
                        }

                      break;
                    default:
                      tao_yyval.dcval = 0;
                      found = I_TRUE;
                      break;
                  }
                }
            } 
          else
            {
              tao_yyval.dcval = 0;
            }

          if (tao_yyval.dcval == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[0].idlist);
            }
        }
break;
case 246:
{
/* case_branch : at_least_one_case_label*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionLabelSeen);
        }
break;
case 247:
{
/*      element_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemSeen);
        }
break;
case 248:
{
/*      ';'*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_UnionBranch *b = 0;
          AST_Field *f = tao_yyvsp[-2].ffval;
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemCompleted);

          /*
           * Create several nodes representing branches of a union.
           * Add them to the enclosing scope (the union scope)
           */
          if (s != 0 
              &&  tao_yyvsp[-4].llval != 0 
              && tao_yyvsp[-2].ffval != 0) 
            {
              b = 
                idl_global->gen ()->create_union_branch (
                                        tao_yyvsp[-4].llval,
                                        f->field_type (),
                                        f->name ()
                                      );
              (void) s->fe_add_union_branch (b);
            }
        }
break;
case 249:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state());
        }
break;
case 250:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 251:
{
/* at_least_one_case_label : case_label case_labels*/
          ACE_NEW_RETURN (tao_yyval.llval,
                          UTL_LabelList (tao_yyvsp[-1].ulval, 
                                         tao_yyvsp[0].llval),
                          1);
        }
break;
case 252:
{
/* case_labels : case_labels case_label*/
          if (tao_yyvsp[-1].llval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.llval,
                              UTL_LabelList (tao_yyvsp[0].ulval,
                                             0),
                              1);
            }
          else 
            {
              UTL_LabelList *ll = 0;
              ACE_NEW_RETURN (ll,
                              UTL_LabelList (tao_yyvsp[0].ulval,
                                             0),
                              1);
              tao_yyvsp[-1].llval->nconc (ll);
              tao_yyval.llval = tao_yyvsp[-1].llval;
            }
        }
break;
case 253:
{
/*      | /* EMPTY * /*/
          tao_yyval.llval = 0;
        }
break;
case 254:
{
/* case_label : IDL_DEFAULT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DefaultSeen);
        }
break;
case 255:
{
/*      ':'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_LabelColonSeen);

          tao_yyval.ulval = idl_global->gen ()->create_union_label (
                                       AST_UnionLabel::UL_default,
                                       0
                                     );
        }
break;
case 256:
{
/*      | IDL_CASE*/
          idl_global->set_parse_state (IDL_GlobalData::PS_CaseSeen);
        }
break;
case 257:
{
          idl_global->set_parse_state (IDL_GlobalData::PS_LabelExprSeen);
        }
break;
case 258:
{
/*      const_expr*/
          idl_global->set_parse_state (IDL_GlobalData::PS_LabelColonSeen);

          tao_yyval.ulval = idl_global->gen()->create_union_label (
                                      AST_UnionLabel::UL_label,
                                      tao_yyvsp[-2].exval
                                    );
        }
break;
case 259:
{
/* element_spec : type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemTypeSeen);
        }
break;
case 260:
{
/*      declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemDeclSeen);

          /*
           * Check for illegal recursive use of type
           */
          if (tao_yyvsp[-2].dcval != 0 
              && AST_illegal_recursive_type (tao_yyvsp[-2].dcval))
            {
            idl_global->err()->error1 (UTL_Error::EIDL_RECURSIVE_TYPE, 
                                       tao_yyvsp[-2].dcval);
            }
          /*
           * Create a field in a union branch
           */
          else if (tao_yyvsp[-2].dcval == 0 
                   || tao_yyvsp[0].deval == 0)
            {
              tao_yyval.ffval = 0;
            }
          else 
            {
              AST_Type *tp = tao_yyvsp[0].deval->compose (tao_yyvsp[-2].dcval);

              if (tp == 0)
                {
                  tao_yyval.ffval = 0;
                }
              else
                {
                  tao_yyval.ffval = idl_global->gen ()->create_field (
                                               tp,
                                               tao_yyvsp[0].deval->name ()
                                             );
                }
            }
        }
break;
case 261:
{
/* struct_forward_type : struct_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_StructureFwd *d = 0;

          /*
           * Create a node representing a forward declaration of a struct.
           */
          if (s != 0) 
            {
              d = idl_global->gen ()->create_structure_fwd (&n);
              (void) s->fe_add_structure_fwd (d);
            }
        }
break;
case 262:
{
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_UnionFwd *u = 0;

          /*
           * Create a node representing a forward declaration of a union.
           */
          if (s != 0) 
            {
              u = idl_global->gen ()->create_union_fwd (&n);
              (void) s->fe_add_union_fwd (u);
            }
        }
break;
case 263:
{
/* enum_type : IDL_ENUM*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumSeen);
        }
break;
case 264:
{
/*      id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                             0);
          AST_Enum *e = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumIDSeen);

          /*
           * Create a node representing an enum and add it to its
           * enclosing scope.
           */
          if (s != 0) 
            {
              e = idl_global->gen ()->create_enum (&n,
                                                   s->is_local (),
                                                   s->is_abstract ());
              /*
               * Add it to its defining scope
               */
              (void) s->fe_add_enum (e);
            }

          /*
           * Push the enum scope on the scopes stack.
           */
          idl_global->scopes ().push (e);
        }
break;
case 265:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumSqSeen);
        }
break;
case 266:
{
/*      at_least_one_enumerator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumBodySeen);
        }
break;
case 267:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumQsSeen);

          /*
           * Done with this enum. Pop its scope from the scopes stack.
           */
          if (idl_global->scopes ().top () == 0)
            {
              tao_yyval.dcval = 0;
            }
          else 
            {
              tao_yyval.dcval = AST_Enum::narrow_from_scope (
                       idl_global->scopes ().top_non_null ()
                     );
              idl_global->scopes ().pop ();
            }
        }
break;
case 269:
{
/* enumerators : enumerators ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumCommaSeen);
        }
break;
case 272:
{
/* enumerator : IDENTIFIER*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          Identifier id (tao_yyvsp[0].strval);
          UTL_ScopedName n (&id, 
                            0);
          AST_EnumVal *e = 0;
          AST_Enum *c = 0;

          /*
           * Create a node representing one enumerator in an enum
           * Add it to the enclosing scope (the enum scope)
           */
          if (s != 0 
              && s->scope_node_type () == AST_Decl::NT_enum) 
            {
              c = AST_Enum::narrow_from_scope (s);

              if (c != 0)
                {
                  e = idl_global->gen ()->create_enum_val (
                                              c->next_enum_val (), 
                                              &n
                                            );
                }

              (void) s->fe_add_enum_val (e);
            }
        }
break;
case 273:
{
/* sequence_type_spec : seq_head ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceCommaSeen);
        }
break;
case 274:
{
/*      positive_int_expr*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceExprSeen);
        }
break;
case 275:
{
/*      '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceQsSeen);

          /*
           * Remove sequence marker from scopes stack.
           */
          if (idl_global->scopes ().top() == 0)
            {
              idl_global->scopes ().pop ();
            }

          UTL_Scope *s = idl_global->scopes ().top_non_null ();

          /*
           * Create a node representing a sequence
           */
          if (tao_yyvsp[-2].exval == 0 || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.dcval = 0;
            } 
          else if (tao_yyvsp[-5].dcval == 0) 
            {
              tao_yyval.dcval = 0;
            } 
          else 
            {
              AST_Type *tp = AST_Type::narrow_from_decl (tao_yyvsp[-5].dcval);

              if (tp == 0)
                {
                  ; /* Error will be caught in FE_Declarator.*/
                }
              else 
                {
                  Identifier id ("sequence");
                  UTL_ScopedName sn (&id,
                                     0);

                  tao_yyval.dcval = 
                    idl_global->gen ()->create_sequence (
                                            tao_yyvsp[-2].exval,
                                            tp,
                                            &sn,
                                            s->is_local (),
                                            s->is_abstract ()
                                          );
                }
            }
        }
break;
case 276:
{
/*      | seq_head '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceQsSeen);

          /*
           * Remove sequence marker from scopes stack.
           */
          if (idl_global->scopes ().top () == 0)
            {
             idl_global->scopes ().pop ();
            }

          UTL_Scope *s = idl_global->scopes ().top_non_null ();

          /*
           * Create a node representing a sequence.
           */
          if (tao_yyvsp[-1].dcval == 0)
            {
              tao_yyval.dcval = 0;
            }
          else 
            {
              AST_Type *tp = AST_Type::narrow_from_decl (tao_yyvsp[-1].dcval);
                
              if (tp == 0)
                {
                  ; /* Error will be caught in FE_Declarator.*/
                }
              else 
                {
                  Identifier id ("sequence");
                  UTL_ScopedName sn (&id,
                                     0);

                  tao_yyval.dcval =
                    idl_global->gen ()->create_sequence (
                        idl_global->gen ()->create_expr ((unsigned long) 0),
                        tp,
                        &sn,
                        s->is_local (),
                        s->is_abstract ()
                      );
                }
            }
        }
break;
case 277:
{
/* seq_head : IDL_SEQUENCE*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceSeen);

          /*
           * Push a sequence marker on scopes stack.
           */
          idl_global->scopes ().push (0);
        }
break;
case 278:
{
/*      '<'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceSqSeen);
        }
break;
case 279:
{
/*      simple_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceTypeSeen);
          tao_yyval.dcval = tao_yyvsp[0].dcval;
        }
break;
case 280:
{
/* string_type_spec : string_head '<'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSqSeen);
        }
break;
case 281:
{
/*      positive_int_expr*/
           idl_global->set_parse_state (IDL_GlobalData::PS_StringExprSeen);
        }
break;
case 282:
{
/*      '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringQsSeen);

          /*
           * Create a node representing a string.
           */
          if (tao_yyvsp[-2].exval == 0 
              || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.dcval = 0;
            } 
          else 
            {
              tao_yyval.dcval = idl_global->gen ()->create_string (tao_yyvsp[-2].exval);
              /*
               * Add this AST_String to the types defined in the global scope.
               */
              (void) idl_global->root ()->fe_add_string (
                                              AST_String::narrow_from_decl (
                                                  tao_yyval.dcval
                                                )
                                            );
            }
        }
break;
case 283:
{
/*      | string_head*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringCompleted);
          /*
           * Create a node representing a string.
           */
          tao_yyval.dcval =
            idl_global->gen ()->create_string (
                idl_global->gen ()->create_expr ((unsigned long) 0)
              );
          /*
           * Add this AST_String to the types defined in the global scope.
           */
          (void) idl_global->root ()->fe_add_string (
                                          AST_String::narrow_from_decl (
                                              tao_yyval.dcval
                                            )
                                        );
        }
break;
case 284:
{
/* string_head : IDL_STRING*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSeen);
        }
break;
case 285:
{
/* wstring_type_spec : wstring_head '<'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSqSeen);
        }
break;
case 286:
{
/*      positive_int_expr*/
           idl_global->set_parse_state (IDL_GlobalData::PS_StringExprSeen);
        }
break;
case 287:
{
/*      '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringQsSeen);

          /*
           * Create a node representing a string.
           */
          if (tao_yyvsp[-2].exval == 0 
              || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.dcval = 0;
            } 
          else 
            {
              tao_yyval.dcval = idl_global->gen ()->create_wstring (tao_yyvsp[-2].exval);
              /*
               * Add this AST_String to the types defined in the global scope.
               */
              (void) idl_global->root ()->fe_add_string (
                                              AST_String::narrow_from_decl (tao_yyval.dcval)
                                            );
            }
        }
break;
case 288:
{
/*      | wstring_head*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringCompleted);

          /*
           * Create a node representing a wstring.
           */
          tao_yyval.dcval =
            idl_global->gen ()->create_wstring (
                idl_global->gen ()->create_expr ((unsigned long) 0)
              );
          /*
           * Add this AST_String to the types defined in the global scope.
           */
          (void) idl_global->root ()->fe_add_string (
                                          AST_String::narrow_from_decl (tao_yyval.dcval)
                                        );
        }
break;
case 289:
{
/* wstring_head : IDL_WSTRING*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSeen);
        }
break;
case 290:
{
/* array_declarator : id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ArrayIDSeen);
        }
break;
case 291:
{
/*      at_least_one_array_dim*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ArrayCompleted);

          /*
           * Create a node representing an array.
           */
          if (tao_yyvsp[0].elval != 0) 
            {
              UTL_ScopedName sn (tao_yyvsp[-2].idval,
                                 0);
              tao_yyval.dcval = 
                idl_global->gen ()->create_array (
                                        &sn,
                                        tao_yyvsp[0].elval->length (), 
                                        tao_yyvsp[0].elval, 
                                        0, 
                                        0
                                      );
            }
        }
break;
case 292:
{
/* at_least_one_array_dim : array_dim array_dims*/
          ACE_NEW_RETURN (tao_yyval.elval,
                          UTL_ExprList (tao_yyvsp[-1].exval,
                                        tao_yyvsp[0].elval),
                          1);
        }
break;
case 293:
{
/* array_dims : array_dims array_dim*/
          if (tao_yyvsp[-1].elval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.elval,
                              UTL_ExprList (tao_yyvsp[0].exval,
                                            0),
                              1);
            }
          else 
            {
              UTL_ExprList *el = 0;
              ACE_NEW_RETURN (el,
                              UTL_ExprList (tao_yyvsp[0].exval,
                                            0),
                              1);
              tao_yyvsp[-1].elval->nconc (el);
              tao_yyval.elval = tao_yyvsp[-1].elval;
            }
        }
break;
case 294:
{
/*      | /* EMPTY * /*/
          tao_yyval.elval = 0;
        }
break;
case 295:
{
/* array_dim : '['*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DimSqSeen);
        }
break;
case 296:
{
/*      positive_int_expr*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DimExprSeen);
        }
break;
case 297:
{
/*      ']'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DimQsSeen);

          /*
           * Array dimensions are expressions which must be coerced to
           * positive integers.
           */
          if (tao_yyvsp[-2].exval == 0 
              || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.exval = 0;
            } 
          else
            {
              tao_yyval.exval = tao_yyvsp[-2].exval;
            }
        }
break;
case 298:
{
/* attribute : opt_readonly IDL_ATTRIBUTE*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrSeen);
        }
break;
case 299:
{
/*      param_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrTypeSeen);
        }
break;
case 300:
{
/*      at_least_one_simple_declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Attribute *a = 0;
          FE_Declarator *d = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrCompleted);

          /*
           * Create nodes representing attributes and add them to the
           * enclosing scope.
           */
          if (s != 0 
              && tao_yyvsp[-2].dcval != 0 
              && tao_yyvsp[0].dlval != 0) 
            {
              for (UTL_DecllistActiveIterator l (tao_yyvsp[0].dlval); 
                   !l.is_done (); 
                   l.next ()) 
                {
                  d = l.item ();

                  if (d == 0)
                    {
                      continue;
                    }

                  AST_Type *tp = d->compose (tao_yyvsp[-2].dcval);

                  if (tp == 0)
                    {
                      continue;
                    }

                  a = 
                    idl_global->gen ()->create_attribute (
                                            tao_yyvsp[-5].bval,
                                            tp,
                                            (UTL_IdList *) d->name ()->copy (),
                                            s->is_local (),
                                            s->is_abstract ()
                                          );
                  /*
                   * Add one attribute to the enclosing scope.
                   */
                  (void) s->fe_add_attribute (a);
                }
            }
        }
break;
case 301:
{
/* opt_readonly : IDL_READONLY*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrROSeen);
          tao_yyval.bval = I_TRUE;
        }
break;
case 302:
{
/*      | /* EMPTY * /*/
          tao_yyval.bval = I_FALSE;
        }
break;
case 303:
{
/* exception : IDL_EXCEPTION*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptSeen);
        }
break;
case 304:
{
/*      id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_Exception *e = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptIDSeen);

          /*
           * Create a node representing an exception and add it to
           * the enclosing scope.
           */
          if (s != 0) 
            {
              e = idl_global->gen ()->create_exception (&n,
                                                        s->is_local (),
                                                        s->is_abstract ());
              (void) s->fe_add_exception (e);
            }

          /*
           * Push the exception scope on the scope stack.
           */
          idl_global->scopes ().push (e);
        }
break;
case 305:
{
/*       '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptSqSeen);
        }
break;
case 306:
{
/*      members*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptBodySeen);
        }
break;
case 307:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptQsSeen);
          /*
           * Done with this exception. Pop its scope from the scope stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 308:
{
/* operation : opt_op_attribute op_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpTypeSeen);
        }
break;
case 309:
{
/*      IDENTIFIER*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          Identifier id (tao_yyvsp[0].strval);
          UTL_ScopedName n (&id, 0);
          AST_Operation *o = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpIDSeen);

          /*
           * Create a node representing an operation on an interface
           * and add it to its enclosing scope.
           */
          if (s != 0 && tao_yyvsp[-2].dcval != 0) 
            {
              AST_Type *tp = 
                AST_Type::narrow_from_decl (tao_yyvsp[-2].dcval);

              if (tp == 0) 
                {
                  idl_global->err ()->not_a_type (tao_yyvsp[-2].dcval);
                } 
              else if (tp->node_type () == AST_Decl::NT_except) 
                {
                  idl_global->err ()->not_a_type (tao_yyvsp[-2].dcval);
                } 
              else 
                {
                  o = 
                    idl_global->gen ()->create_operation (tp,
                                                          tao_yyvsp[-3].ofval,
                                                          &n,
                                                          s->is_local (),
                                                          s->is_abstract ());
                  (void) s->fe_add_operation (o);
                }
            }

           ACE_OS::free (tao_yyvsp[0].strval);
           tao_yyvsp[0].strval = 0;

          /*
           * Push the operation scope onto the scopes stack.
           */
          idl_global->scopes ().push (o);
        }
break;
case 310:
{
/*      parameter_list*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParsCompleted);
        }
break;
case 311:
{
/*      opt_raises*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseCompleted);
        }
break;
case 312:
{
/*      opt_context*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Operation *o = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpCompleted);

          /*
           * Add exceptions and context to the operation.
           */
          if (s != 0 && s->scope_node_type () == AST_Decl::NT_op) 
            {
              o = AST_Operation::narrow_from_scope (s);

              if (tao_yyvsp[-2].nlval != 0 && o != 0)
                {
                  (void) o->fe_add_exceptions (tao_yyvsp[-2].nlval);
                }

              if (tao_yyvsp[0].slval != 0)
                {
                  (void) o->fe_add_context (tao_yyvsp[0].slval);
                }
            }

          /*
           * Done with this operation. Pop its scope from the scopes stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 313:
{
/* opt_op_attribute : IDL_ONEWAY*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpAttrSeen);
          tao_yyval.ofval = AST_Operation::OP_oneway;
        }
break;
case 314:
{
/*      | IDL_IDEMPOTENT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpAttrSeen);
          tao_yyval.ofval = AST_Operation::OP_idempotent;
        }
break;
case 315:
{
/*      | /* EMPTY * /*/
          tao_yyval.ofval = AST_Operation::OP_noflags;
        }
break;
case 317:
{
/* op_type_spec : param_type_spec | IDL_VOID*/
          tao_yyval.dcval =
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                  AST_Expression::EV_void
                                                );
        }
break;
case 318:
{
/* init_decl : IDL_FACTORY */
          /*@@ PS_FactorySeen?*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpTypeSeen);
        }
break;
case 319:
{
/*      IDENTIFIER */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();

          if (s->is_abstract ())
            {
              /*@@ Fire error*/
              ACE_ERROR ((LM_ERROR,
                          ACE_TEXT ("error in %s line %d:\n")
                          ACE_TEXT ("Abstract valuetype can't have a ")
                          ACE_TEXT ("factory construct.\n"),
                          idl_global->filename ()->get_string (),
                          idl_global->lineno ()));
            }   
            
          Identifier id (tao_yyvsp[0].strval);  
          UTL_ScopedName n (&id, 
                            0);
          AST_Factory *factory = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpIDSeen);

          /*
           * Create a node representing an factory construct
           * and add it to its enclosing scope
           */
          if (s != 0)
            {
              factory = idl_global->gen ()->create_factory (&n);
              (void) s->fe_add_factory (factory);
            }

          /*
           * Push the operation scope onto the scopes stack.
           */
          idl_global->scopes ().push (factory);
        }
break;
case 320:
{
/*      init_parameter_list*/
        /* TODO: replace parameter_list with rule that accepts only IN args */

          idl_global->set_parse_state (IDL_GlobalData::PS_OpParsCompleted);
          idl_global->scopes ().pop ();
        }
break;
case 321:
{
/* init_parameter_list : '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 322:
{
/*      ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 323:
{
/*      | '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 324:
{
/*      at_least_one_in_parameter ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 326:
{
/* in_parameters : in_parameters ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParCommaSeen);
        }
break;
case 329:
{
/* in_parameter : IDL_IN*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDirSeen);
        }
break;
case 330:
{
/*      param_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParTypeSeen);
        }
break;
case 331:
{
/*      declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Argument *a = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDeclSeen);

          /*
           * Create a node representing an argument to an operation
           * Add it to the enclosing scope (the operation scope).
           */
          if (tao_yyvsp[-2].dcval != 0 
              && tao_yyvsp[0].deval != 0 && 
              s != 0) 
            {
              AST_Type *tp = tao_yyvsp[0].deval->compose (tao_yyvsp[-2].dcval);

              if (tp != 0) 
                {
                  a = idl_global->gen ()->create_argument (
                          AST_Argument::dir_IN, 
                          tp, 
                          (UTL_IdList *) tao_yyvsp[0].deval->name ()->copy ()
                        );

                  (void) s->fe_add_argument (a);
                }
            }
        }
break;
case 332:
{
/* parameter_list : '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 333:
{
/*      ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 334:
{
/*      | '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 335:
{
/*      at_least_one_parameter ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 337:
{
/* parameters : parameters ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParCommaSeen);
        }
break;
case 340:
{
/* parameter : direction*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDirSeen);
        }
break;
case 341:
{
/*      param_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParTypeSeen);
        }
break;
case 342:
{
/*      declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Argument *a = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDeclSeen);

          /*
           * Create a node representing an argument to an operation
           * Add it to the enclosing scope (the operation scope).
           */
          if (tao_yyvsp[-2].dcval != 0 
              && tao_yyvsp[0].deval != 0 
              && s != 0) 
            {
              AST_Type *tp = tao_yyvsp[0].deval->compose (tao_yyvsp[-2].dcval);

              if (tp != 0) 
                {
                  if (!s->is_local () && tp->is_local ())
                    {
                      ACE_DEBUG ((LM_DEBUG,
                                  ACE_TEXT ("error in %s line %d\n"),
                                  idl_global->filename ()->get_string (),
                                  idl_global->lineno ()));
                      ACE_DEBUG ((LM_DEBUG,
                                  ACE_TEXT ("Cannot use a local type as an ")
                                  ACE_TEXT ("argument of a remote ")
                                  ACE_TEXT ("operation\n")));
                    }
                  else
                    {
                      a = 
                        idl_global->gen ()->create_argument (
                            tao_yyvsp[-4].dival, 
                            tp, 
                            (UTL_IdList *) tao_yyvsp[0].deval->name ()->copy ()
                          );
                      (void) s->fe_add_argument (a);
                    }
                }
            }
        }
break;
case 343:
{
/* param_type_spec : base_type_spec*/
          tao_yyval.dcval = idl_global->scopes ().bottom ()->lookup_primitive_type (tao_yyvsp[0].etval);
        }
break;
case 346:
{
/*      | string_type_spec*/
/*      | wstring_type_spec*/
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = 0;

          if (s != 0)
            {
              d = s->lookup_by_name (tao_yyvsp[0].idlist, 
                                     I_TRUE);
            }

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[0].idlist);
            }
          else
            {
              AST_Decl::NodeType nt = d->node_type ();

              if (nt == AST_Decl::NT_struct_fwd 
                  || nt == AST_Decl::NT_union_fwd)
                {
                  idl_global->err ()->error1 (UTL_Error::EIDL_ILLEGAL_ADD,
                                              d);

                  // If we don't return here, we'll crash later.
                  return 1;
                }
            }

          tao_yyval.dcval = d;
        }
break;
case 347:
{
/* direction : IDL_IN*/
          tao_yyval.dival = AST_Argument::dir_IN;
        }
break;
case 348:
{
/*      | IDL_OUT*/
          tao_yyval.dival = AST_Argument::dir_OUT;
        }
break;
case 349:
{
/*      | IDL_INOUT*/
          tao_yyval.dival = AST_Argument::dir_INOUT;
        }
break;
case 350:
{
/* opt_raises : IDL_RAISES*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseSeen);
        }
break;
case 351:
{
/*      '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseSqSeen);
        }
break;
case 352:
{
/*      at_least_one_scoped_name ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseQsSeen);
          tao_yyval.nlval = tao_yyvsp[-1].nlval;
        }
break;
case 353:
{
          tao_yyval.nlval = 0;
/*      | /* EMPTY * /*/
        }
break;
case 354:
{
/* opt_context : IDL_CONTEXT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextSeen);
        }
break;
case 355:
{
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextSqSeen);
/*      '('*/
        }
break;
case 356:
{
/*      at_least_one_string_literal ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextQsSeen);
          tao_yyval.slval = tao_yyvsp[-1].slval;
        }
break;
case 357:
{
/*      | /* EMPTY * /*/
          tao_yyval.slval = 0;
        }
break;
case 358:
{
/* at_least_one_string_literal : IDL_STRING_LITERAL string_literals*/
          ACE_NEW_RETURN (tao_yyval.slval,
                         UTL_StrList (tao_yyvsp[-1].sval,
                                      tao_yyvsp[0].slval),
                         1);
        }
break;
case 359:
{
/* string_literals : string_literals ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextCommaSeen);
        }
break;
case 360:
{
/*      IDL_STRING_LITERAL*/
          if (tao_yyvsp[-3].slval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.slval,
                              UTL_StrList (tao_yyvsp[0].sval,
                                           0),
                              1);
            }
          else 
            {
              UTL_StrList *sl = 0;
              ACE_NEW_RETURN (sl,
                              UTL_StrList (tao_yyvsp[0].sval,
                                           0),
                              1);
              tao_yyvsp[-3].slval->nconc (sl);
              tao_yyval.slval = tao_yyvsp[-3].slval;
            }
        }
break;
case 361:
{
/*      | /* EMPTY * /*/
          tao_yyval.slval = 0;
        }
break;
case 362:
{
/* typeid_dcl : IDL_TYPEID scoped_name IDL_STRING_LITERAL*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist, 
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
            }
          else
            {
              d->set_id_with_typeid (
                     tao_yyvsp[0].sval->get_string ()
                   );
            }
        }
break;
case 363:
{
/* typeprefix_dcl : IDL_TYPEPREFIX scoped_name IDL_STRING_LITERAL*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist, 
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
            }
          else
            {
              d->set_prefix_with_typeprefix (
                     tao_yyvsp[0].sval->get_string ()
                   );
            }
        }
break;
    }
    tao_yyssp -= tao_yym;
    tao_yystate = *tao_yyssp;
    tao_yyvsp -= tao_yym;
    tao_yym = tao_yylhs[tao_yyn];
    if (tao_yystate == 0 && tao_yym == 0)
    {
#ifdef TAO_YYDEBUG
        if (5 < tao_yydebug)
            printf("tao_yydebug: after reduction, shifting from state 0 to\
 state %d\n", TAO_YYFINAL);
#endif
        tao_yystate = TAO_YYFINAL;
        *++tao_yyssp = TAO_YYFINAL;
        *++tao_yyvsp = tao_yyval;
        if (tao_yychar < 0)
        {
            if ((tao_yychar = tao_yylex()) < 0) tao_yychar = 0;
#if TAO_YYDEBUG
            if (tao_yydebug)
            {
                tao_yys = 0;
                if (tao_yychar <= TAO_YYMAXTOKEN) tao_yys = tao_yyname[tao_yychar];
                if (!tao_yys) tao_yys = "illegal-symbol";
                if (5 < tao_yydebug)
                    printf("tao_yydebug: state %d, reading %d (%s)\n",
                        TAO_YYFINAL, tao_yychar, tao_yys);
                else
                    TAO_YYDEBUG_LOOK_AHEAD(TAO_YYFINAL, tao_yychar, tao_yys, tao_yyssp-tao_yyss);
            }
#endif
        }
        if (tao_yychar == 0) goto tao_yyaccept;
        goto tao_yyloop;
    }
    if ((tao_yyn = tao_yygindex[tao_yym]) && (tao_yyn += tao_yystate) >= 0 &&
            tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == tao_yystate)
        tao_yystate = tao_yytable[tao_yyn];
    else
        tao_yystate = tao_yydgoto[tao_yym];
#ifdef TAO_YYDEBUG
    if (5 < tao_yydebug)
        printf("tao_yydebug: after reduction, shifting from state %d \
to state %d\n", *tao_yyssp, tao_yystate);
#endif
    if (tao_yyssp >= tao_yyss + tao_yystacksize - 1)
    {
        goto tao_yyoverflow;
    }
    *++tao_yyssp = tao_yystate;
    *++tao_yyvsp = tao_yyval;
    goto tao_yyloop;
tao_yyoverflow:
    tao_yyerror("yacc stack overflow");
tao_yyabort:
    return (1);
tao_yyaccept:
    return (0);
}
