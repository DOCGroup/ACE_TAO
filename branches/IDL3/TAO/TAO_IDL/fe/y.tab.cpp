// $Id$
#ifndef lint
char tao_yysccsid[] = "@(#)yaccpar	1.4 (Berkeley) 02/25/90 \n\
 Modified 5/2/90 by J. Roskind to support graphic debugging modes";
#endif
#include "utl_strlist.h"
#include "utl_namelist.h"
#include "fe_interface_header.h"
#include "utl_exprlist.h"
#include "utl_labellist.h"
#include "utl_decllist.h"
#include "ast_field.h"
#include "ast_expression.h"
#include "ast_argument.h"
#include "ast_operation.h"
#include "global_extern.h"
#include "utl_identifier.h"
#include "utl_err.h"
#include "ast_generator.h"
#include "ast_module.h"
#include "ast_interface.h"
#include "ast_interface_fwd.h"
#include "utl_string.h"
#include "ast_constant.h"
#include "fe_declarator.h"
#include "ast_union.h"
#include "ast_union_fwd.h"
#include "ast_structure_fwd.h"
#include "ast_extern.h"
#include "ast_enum.h"
#include "ast_root.h"
#include "ast_sequence.h"
#include "ast_string.h"
#include "ast_factory.h"
#include "ast_exception.h"
#include "ast_array.h"
#include "nr_extern.h"

#if (defined(apollo) || defined(hpux)) && defined(__cplusplus)
extern  "C" int tao_yywrap();
#endif  /* (defined(apollo) || defined(hpux)) && defined(__cplusplus)*/


void tao_yyerror (const char *);
int tao_yylex (void);
extern "C" int tao_yywrap (void);
extern char tao_yytext[];
extern int tao_yyleng;
#define TAO_YYDEBUG_LEXER_TEXT (tao_yytext[tao_yyleng] = '\0', tao_yytext)
/* Force the pretty debugging code to compile.*/
#define TAO_YYDEBUG 1
typedef union {
  AST_Decl                      *dcval;         /* Decl value           */
  UTL_StrList                   *slval;         /* String list          */
  UTL_NameList                  *nlval;         /* Name list            */
  UTL_ExprList                  *elval;         /* Expression list      */
  UTL_LabelList                 *llval;         /* Label list           */
  UTL_DeclList                  *dlval;         /* Declaration list     */
  FE_InterfaceHeader            *ihval;         /* Interface header     */
  FE_obv_header                 *vhval;         /* Valuetype header     */
  AST_Expression                *exval;         /* Expression value     */
  AST_UnionLabel                *ulval;         /* Union label          */
  AST_Field                     *ffval;         /* Field value          */
  AST_Field::Visibility         vival;          /* N/A, pub or priv     */
  AST_Expression::ExprType      etval;          /* Expression type      */
  AST_Argument::Direction       dival;          /* Argument direction   */
  AST_Operation::Flags          ofval;          /* Operation flags      */
  FE_Declarator                 *deval;         /* Declarator value     */
  idl_bool                      bval;           /* Boolean value        */
  long                          ival;           /* Long value           */
  unsigned long                 uival;          /* Unsigned long value  */
  double                        dval;           /* Double value         */
  float                         fval;           /* Float value          */
  char                          cval;           /* Char value           */
  ACE_CDR::WChar                wcval;          /* WChar value          */
  UTL_String                    *sval;          /* String value         */
  char                          *wsval;         /* WString value        */
  char                          *strval;        /* char * value         */
  Identifier                    *idval;         /* Identifier           */
  UTL_IdList                    *idlist;        /* Identifier list      */
} TAO_YYSTYPE;
#define IDENTIFIER 257
#define IDL_CONST 258
#define IDL_MODULE 259
#define IDL_INTERFACE 260
#define IDL_TYPEDEF 261
#define IDL_LONG 262
#define IDL_SHORT 263
#define IDL_UNSIGNED 264
#define IDL_DOUBLE 265
#define IDL_FLOAT 266
#define IDL_CHAR 267
#define IDL_WCHAR 268
#define IDL_OCTET 269
#define IDL_BOOLEAN 270
#define IDL_FIXED 271
#define IDL_ANY 272
#define IDL_OBJECT 273
#define IDL_STRUCT 274
#define IDL_UNION 275
#define IDL_SWITCH 276
#define IDL_ENUM 277
#define IDL_SEQUENCE 278
#define IDL_STRING 279
#define IDL_WSTRING 280
#define IDL_EXCEPTION 281
#define IDL_CASE 282
#define IDL_DEFAULT 283
#define IDL_READONLY 284
#define IDL_ATTRIBUTE 285
#define IDL_ONEWAY 286
#define IDL_IDEMPOTENT 287
#define IDL_VOID 288
#define IDL_IN 289
#define IDL_OUT 290
#define IDL_INOUT 291
#define IDL_RAISES 292
#define IDL_CONTEXT 293
#define IDL_NATIVE 294
#define IDL_LOCAL 295
#define IDL_ABSTRACT 296
#define IDL_CUSTOM 297
#define IDL_FACTORY 298
#define IDL_PRIVATE 299
#define IDL_PUBLIC 300
#define IDL_SUPPORTS 301
#define IDL_TRUNCATABLE 302
#define IDL_VALUETYPE 303
#define IDL_COMPONENT 304
#define IDL_CONSUMES 305
#define IDL_EMITS 306
#define IDL_EVENTTYPE 307
#define IDL_FINDER 308
#define IDL_GETRAISES 309
#define IDL_HOME 310
#define IDL_IMPORT 311
#define IDL_MULTIPLE 312
#define IDL_PRIMARYKEY 313
#define IDL_PROVIDES 314
#define IDL_PUBLISHES 315
#define IDL_SETRAISES 316
#define IDL_TYPEID 317
#define IDL_TYPEPREFIX 318
#define IDL_USES 319
#define IDL_MANAGES 320
#define IDL_INTEGER_LITERAL 321
#define IDL_UINTEGER_LITERAL 322
#define IDL_STRING_LITERAL 323
#define IDL_CHARACTER_LITERAL 324
#define IDL_FLOATING_PT_LITERAL 325
#define IDL_TRUETOK 326
#define IDL_FALSETOK 327
#define IDL_SCOPE_DELIMITOR 328
#define IDL_LEFT_SHIFT 329
#define IDL_RIGHT_SHIFT 330
#define IDL_WCHAR_LITERAL 331
#define IDL_WSTRING_LITERAL 332
#define TAO_YYERRCODE 256
short tao_yylhs[] = {                                        -1,
    0,   75,   75,   77,   76,   79,   76,   81,   76,   83,
   76,   85,   76,   87,   76,   89,   76,   91,   76,   92,
   76,   93,   94,   95,   96,   88,   86,   86,   99,  101,
  102,   97,  103,   69,   33,   33,   33,  104,   22,   22,
   90,   90,   90,   90,  105,  105,  110,  112,  113,  109,
  114,  115,  116,  106,   34,  117,   70,   68,   68,   24,
   24,  107,  107,  108,  111,  111,  118,  118,  118,  123,
  119,  124,  119,  100,  100,  125,  120,  126,  120,  127,
  120,  128,  120,  129,  120,  131,  120,  133,  120,  134,
  120,   20,  135,   21,   21,   16,  136,   16,  137,   16,
   73,   98,   98,   98,  138,  139,  140,  141,   82,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   35,   36,
   37,   37,   38,   38,   39,   39,   40,   40,   40,   41,
   41,   41,   42,   42,   42,   42,   43,   43,   43,   43,
   44,   44,   44,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   46,  143,   74,   74,   74,   74,   74,   74,
  145,  142,    1,    1,    2,    2,    2,   59,   59,   59,
   59,   59,   59,   59,   59,    4,    4,    4,    3,    3,
    3,  144,  144,   29,  148,   30,   30,   64,   64,   31,
  149,   32,   32,   65,   66,   51,   51,   57,   57,   57,
   58,   58,   58,   54,   54,   54,   55,   52,   52,   60,
   53,   56,   61,  150,   72,  151,  153,  154,    7,  152,
  156,  156,  157,  155,  158,  159,  122,  160,  122,  161,
   71,  162,  163,  164,  165,  167,  168,   10,    9,    9,
    9,    9,    9,    9,  166,  170,  170,  171,  172,  169,
  173,  169,   27,   28,   28,  174,   48,  175,  176,   48,
  177,   49,  146,  147,  178,  179,  181,  182,    8,  180,
  185,  184,  184,  183,  186,  187,    5,    5,  188,  189,
   13,  191,  192,    6,    6,  190,  194,  195,   14,   14,
  193,  196,   11,   25,   26,   26,  197,  198,   47,  199,
  200,  130,   67,   67,  201,  202,  203,  204,   84,  205,
  207,  208,  209,  132,   63,   63,   63,   12,   12,  210,
  212,  121,  213,  211,  215,  211,  214,  218,  217,  217,
  219,  220,  216,  221,  206,  223,  206,  222,  226,  225,
  225,  227,  228,  224,   15,   15,   15,   15,   62,   62,
   62,  229,  230,   23,   23,  231,  232,   17,   17,   18,
  233,   19,   19,   78,   80,
};
short tao_yylen[] = {                                         2,
    1,    2,    0,    0,    3,    0,    3,    0,    3,    0,
    3,    0,    3,    0,    3,    0,    3,    0,    3,    0,
    3,    0,    0,    0,    0,    9,    1,    1,    0,    0,
    0,    7,    0,    3,    2,    3,    3,    0,    3,    0,
    1,    1,    1,    1,    2,    1,    0,    0,    0,    7,
    0,    0,    0,    8,    4,    0,    3,    1,    0,    2,
    0,    2,    1,    2,    2,    0,    1,    1,    2,    0,
    3,    0,    3,    2,    0,    0,    3,    0,    3,    0,
    3,    0,    3,    0,    3,    0,    3,    0,    3,    0,
    3,    2,    0,    4,    0,    1,    0,    3,    0,    4,
    1,    1,    2,    2,    0,    0,    0,    0,    9,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    1,    3,    1,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    3,    1,    2,    2,    2,
    1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    3,    1,    1,    1,    2,    1,
    0,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    0,    4,    0,    1,    1,    2,
    0,    4,    0,    1,    1,    1,    1,    1,    2,    1,
    2,    3,    2,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    0,    3,    0,    0,    0,    7,    2,
    2,    0,    0,    2,    0,    0,    5,    0,    3,    0,
    3,    0,    0,    0,    0,    0,    0,   14,    1,    1,
    1,    1,    1,    1,    2,    2,    0,    0,    0,    5,
    0,    3,    2,    2,    0,    0,    3,    0,    0,    5,
    0,    3,    1,    1,    0,    0,    0,    0,    9,    2,
    0,    4,    0,    1,    0,    0,    6,    2,    0,    0,
    5,    0,    0,    6,    1,    1,    0,    0,    6,    1,
    1,    0,    3,    2,    2,    0,    0,    0,    5,    0,
    0,    6,    1,    0,    0,    0,    0,    0,    9,    0,
    0,    0,    0,   10,    1,    1,    0,    1,    1,    0,
    0,    5,    0,    3,    0,    4,    2,    0,    4,    0,
    0,    0,    5,    0,    3,    0,    4,    2,    0,    4,
    0,    0,    0,    5,    1,    1,    1,    1,    1,    1,
    1,    0,    0,    6,    0,    0,    0,    6,    0,    2,
    0,    4,    0,    3,    3,
};
short tao_yydefred[] = {                                      3,
    0,    0,   20,  105,   22,   33,  154,  214,  230,  265,
  305,    0,    0,    0,    0,   56,    0,    0,  156,  158,
  157,   29,   47,    0,    0,    0,    0,    4,    2,    6,
    8,   10,   12,   14,   16,   18,   27,   28,   41,   42,
   43,   44,   46,  160,  182,  183,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  101,  159,  194,    0,   51,
    0,    0,    0,   45,    0,   97,    0,   96,    0,    0,
    0,   38,   35,    0,  200,    0,  204,  205,  208,  209,
  210,  211,  207,  212,  213,  279,  286,  291,   58,   64,
  163,  164,  166,  176,  177,  179,  181,  180,    0,  178,
    0,  168,  170,  171,  169,  173,  174,  196,  197,  165,
  172,  175,    0,    0,  216,    0,    0,  232,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   21,  116,  117,
    0,  106,  110,  111,  113,  114,  115,  112,   23,   34,
  161,  155,  215,  231,  266,  306,   36,    0,   37,   57,
    0,  364,   99,  365,   30,   48,    0,  199,  206,    0,
  203,    0,  275,  278,    0,  282,  287,    0,  217,    5,
    7,    9,   11,   13,   15,   17,   19,    0,    0,    0,
    0,    0,   52,   98,    0,   75,   66,    0,   39,  202,
  280,    0,    0,   55,    0,    0,  233,  223,  107,   24,
  195,  162,  187,  188,  189,    0,  267,  307,   75,  100,
    0,    0,    0,    0,  144,  145,  146,  148,  150,  151,
  152,  149,  147,    0,    0,    0,    0,    0,  153,    0,
    0,    0,    0,    0,    0,  133,  137,  142,  276,    0,
  283,  288,    0,  218,  222,    0,    0,    3,    0,    0,
    0,  222,    0,   90,  303,  315,  316,    0,    0,   76,
   78,   80,   82,   84,    0,   74,   86,   88,  320,   72,
   70,    0,   65,   67,   68,    0,   93,  281,  138,  139,
  140,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  243,  234,    0,  239,
  240,  242,  241,    0,    0,  228,  225,  224,  108,    0,
  185,  297,  293,  296,  274,  268,  273,    0,    0,    0,
  319,  346,  310,  347,  318,    0,  345,  300,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,    0,   50,
   69,    0,  143,    0,    0,    0,    0,    0,    0,    0,
  134,  135,  136,  277,  284,  289,    0,  219,  221,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
   91,    0,    0,   77,   79,   81,   83,   85,   87,   89,
  321,   73,   71,    0,  235,  229,  226,  109,  119,   26,
  186,  298,  295,  269,  271,  309,  311,  301,    0,    0,
    0,    0,    0,    0,    0,    0,  322,  236,  227,  299,
  272,    0,  312,  302,  193,    0,    0,    0,    0,    0,
    0,    0,  324,  331,    0,  330,  251,  258,  256,  248,
  255,  237,  247,  335,  349,  350,  351,  342,    0,  341,
  352,  313,  191,    0,  326,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  337,    0,    0,    0,    0,  332,
  328,  252,  259,  257,  261,  249,  254,  238,  246,  343,
  339,  353,  356,  314,  192,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  333,  329,  260,  262,  250,  344,
  340,    0,  357,  354,    0,  363,    0,    0,  358,  361,
    0,  362,
};
short tao_yydgoto[] = {                                       1,
  307,   91,   92,   93,   94,   95,   96,   97,  298,   98,
  201,  323,   99,  100,  325,  228,  474,  497,  498,  189,
  213,   73,  442,  194,  313,  366,  430,  451,  202,  249,
  414,  422,   22,   23,  388,  229,  230,  231,  232,  233,
  234,  235,  236,  237,  238,  239,  314,  431,  466,  132,
  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
  112,  438,  258,  203,  204,  205,  259,  113,   24,   25,
  114,  115,   68,  260,    2,   29,  120,  261,  121,  262,
  122,  263,  123,  264,  124,   34,  125,   35,  126,   36,
  127,   47,   49,  179,  248,  363,   37,   38,   70,  211,
  186,  265,   50,  157,   39,   40,   41,   42,   43,   71,
  212,  187,  272,  148,  209,  319,   65,  273,  274,  266,
  276,  308,  339,  338,  329,  330,  331,  332,  333,  267,
  335,  268,  336,  320,  342,  151,  185,   48,  178,  247,
  362,  142,   51,   44,  180,   45,   46,  364,  459,   52,
  119,  244,  198,  304,  359,  305,  246,  361,  401,  360,
   53,  168,  243,  357,  400,  432,  418,  452,  433,  453,
  450,  480,  447,  449,  448,  478,  479,   54,  181,  316,
  251,  367,  317,  368,  403,  192,  293,  162,  214,  116,
  195,  294,  117,  196,  295,  250,  365,  402,  373,  405,
   55,  182,  252,  369,  372,  413,  404,  421,  458,  337,
  407,  399,  416,  425,  417,  426,  446,  477,  444,  476,
  419,  439,  420,  440,  456,  482,  454,  481,  457,  483,
  484,  495,  501,
};
short tao_yysindex[] = {                                      0,
    0,  675,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -192, -186, -203, -226,    0, -194, -194,    0,    0,
    0,    0,    0,   68,  464, -143,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   76,  636, -110, -192,
  483, -192, -192, -192, -192,    0,    0,    0,   68,    0,
   68, -145, -145,    0, -192,    0, -204,    0, -201,   37,
   41,    0,    0, -189,    0, -152,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  126,    0,
 -161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   68, -143,    0,  111,  127,    0,   75,  146,
  154,  160,  173,  178,  191,  199,  202,    0,    0,    0,
 -161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  163,    0,    0,
 -192,    0,    0,    0,    0,    0, -194,    0,    0,   27,
    0,  209,    0,    0,  -14,    0,    0,  254,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -192,  169, -192,
  189,  190,    0,    0, -192,    0,    0, -161,    0,    0,
    0,  -24, -194,    0,  -24,  -24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  748,  721,  274,  515,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   38,   38,   38,  -24, -161,    0,  172,
  236,  295, -199,   -8,  144,    0,    0,    0,    0, -161,
    0,    0,  655,    0,    0,  445,  273,    0,  291,  245,
   80,    0,  748,    0,    0,    0,    0,  582,   53,    0,
    0,    0,    0,    0,  214,    0,    0,    0,    0,    0,
    0,  216,    0,    0,    0,  288,    0,    0,    0,    0,
    0,  307,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
  -24,  -24,  293,  294,  305,   95,    0,    0, -161,    0,
    0,    0,    0,  243,    0,    0,    0,    0,    0,  675,
    0,    0,    0,    0,    0,    0,    0,    0,  248,  313,
    0,    0,    0,    0,    0, -161,    0,    0,  316,  318,
  319,  322,  323,    0,  325,  326,  129,  445,  445,    0,
    0, -194,    0,  236,  295, -199,   -8,   -8,  144,  144,
    0,    0,    0,    0,    0,    0,  342,    0,    0,  330,
 -192,  -24,  267, -192,  -24,  245,  271,  347,  272,    0,
    0,  141,  617,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -161,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  359,  278,
  344,  311,   80,  365, -192,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  366,  119, -120,  368,  -43,
  114,  367,    0,    0,  372,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  373,    0,
    0,    0,    0,  617,    0,  371,  357,  -24,  360,  483,
  -80,  292, -120,  617,    0,  375,  383,  132, -192,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -192,  119,  369, -192,  374,
 -192,  -43, -194,  384,    0,    0,    0,    0,    0,    0,
    0,  385,    0,    0,  105,    0,  390,  388,    0,    0,
  113,    0,
};
short tao_yyrindex[] = {                                      0,
    0,  434,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -25,  -10,  378,    2,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   23,    0,
   25,   31,  -31,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    8,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -91,    0,    0,  117,  133,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  181,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
    0,    0,    0,    0,  317,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -19,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  153,    0,    0,    0,    0,
  270,  297,  -26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   13,    0,  247,
  576,  569,  252,   91,   21,    0,    0,    0,    0,  320,
    0,    0,    0,    0,    0,    0,    0,    0,  382,    0,
    0,    0,  324,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  401,    0,    0,  403,    0,
    0,    0,    0,    0,  219,    0,    0,    0,    0,  321,
    0,    0,    0,    0,    0,    0,    0,  246,    0,    0,
    0,    0,    0,    0,    0,  188,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  581,  574,  561,  131,  142,   50,   58,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  201,    0,  327,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -18,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -13,    0,    0,    0,    0,
    0,  -17,    0,    0,    0,    0,    0,    0,    0,    0,
  -30,  391,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  410,    0,    0,    0,    0,
  550,    0,  328,    0,    0,  413,    0,  396,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  415,    0,    0,
    0,    0,
};
short tao_yygindex[] = {                                      0,
  -20,  244,    0,    0,    0,  -44,    9,    6,    0,   11,
    0,    0,    0,  -42, -326,  -15,    0,    0,    0,  -21,
    0,   62,    0,    0,    0,    0,    0,    0,   98,    0,
    0,    0,    0,  443,    0, -197,    0,  180,  182,  185,
  -79,  -32, -205,   28,    0, -127,   99,   22,    0,    0,
   -9,   -4,   -3,  426,  429,    0,    0,    0, -177,   -2,
    0,    0,    0, -270,  -11,    0,    0,    0,  265,  266,
   15,   18,  -12,    5,  230,    0,    0,    7,    0,   10,
    0,   12,    0,   16,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  286,
    0,    0,    0,    0,    0,    0,    0,    0,  465,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  289,
    0,  -54,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  281,  253,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   47,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  101,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   29,    0,    0,    0,    0,
    0,    0,    0,   40,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
};
#define TAO_YYTABLESIZE 1066
short tao_yytable[] = {                                      58,
   57,   67,   69,  129,   90,  130,   28,   20,   30,  101,
   19,   31,   21,   32,   92,  227,   26,   33,  224,   27,
  225,   95,   94,  334,   95,   94,   59,  323,  355,  282,
  141,   40,  131,  102,  288,  101,  289,  140,  133,  143,
  144,  145,  146,  134,  135,  138,  398,   59,   63,  141,
  141,  198,  150,  141,  141,  141,    6,  141,  130,  141,
  263,  130,   56,  130,   56,  130,  198,  241,  242,  198,
  141,  141,  158,    6,  141,  159,   16,  227,  130,  130,
  327,  103,  130,  104,  351,  352,  353,  131,   59,   62,
  131,   59,  131,  391,  131,  132,   92,   40,  132,   16,
  132,  226,  132,   95,   94,  141,  141,  131,  131,  160,
  161,  131,   59,  130,  130,  132,  132,  460,  152,  132,
  147,  154,  149,  153,  216,   72,  153,  470,  127,  286,
  287,  127,  118,   66,  128,  427,  141,  201,  184,  167,
  201,  188,  131,  131,  130,   40,  139,   40,  127,  127,
  132,  132,  127,   59,  167,  201,   89,  167,  201,  155,
  285,  428,  429,  156,  389,  199,  153,  206,  128,  163,
  166,  128,  210,  131,  165,  285,  290,  240,  285,  129,
  292,  132,  129,  127,  127,  290,  167,  164,  128,  128,
  291,  290,  128,  194,  290,  327,  194,  169,  101,  129,
  129,  428,  429,  129,  170,  485,  347,  348,  488,   40,
  490,  194,  171,  322,  127,  324,   20,   20,  172,   19,
   19,   21,   21,  128,  128,   26,   26,  299,   27,   27,
  101,  173,   56,  300,  129,  129,  174,  392,  301,  302,
  303,  294,  326,  292,  294,  435,  436,  437,  297,  175,
  463,  279,  280,  281,  128,  349,  350,  176,   20,  294,
  177,   19,  355,   21,  198,  129,  327,   26,  191,   59,
   27,  336,  336,  336,   92,  325,  327,   59,   61,   62,
   63,   95,   94,  382,  383,  183,  193,  120,  190,  125,
   59,  200,  125,  197,   56,  283,  215,  216,  217,  218,
  219,  220,  221,   66,  120,  120,  222,  223,  120,  125,
  125,  207,  208,  125,   28,   20,   30,  277,   19,   31,
   21,   32,  101,  101,   26,   33,  384,   27,  322,  284,
  324,   59,  285,  309,  311,  312,  315,  328,  334,  120,
  340,  141,  141,  220,  125,  125,  341,  343,  206,  130,
  130,  206,  167,  201,  354,  355,  158,  326,  215,  216,
  217,  218,  219,  220,  221,   66,  356,  358,  222,  223,
  308,  371,  370,  285,  374,  125,  375,  376,  131,  131,
  377,  378,  385,  379,  380,  381,  132,  132,  386,  290,
  395,  390,   58,  415,   31,  394,  396,  397,  406,  322,
  408,  324,  409,  410,  412,  441,  423,  424,  434,  322,
  443,  324,  445,  455,  461,  462,  468,  464,  471,  127,
  127,   49,  472,  493,  473,  494,  487,  496,  326,  465,
  499,  500,  489,    1,  101,  502,  264,  118,  326,   61,
  184,  198,   60,  244,  348,   25,   58,  475,   53,  190,
  327,  270,  245,  338,  359,  360,   60,  278,  387,  128,
  128,  492,  344,  206,  393,  345,  206,  188,  206,  346,
  129,  129,  467,  136,  223,  223,  137,  310,  245,   64,
  223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
  223,  223,  223,  223,  253,  223,  223,  223,  223,  469,
  275,  223,  223,  411,  318,  486,    0,  223,  223,  223,
  223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
  223,  491,  223,  223,  223,  223,  317,    0,    0,    0,
    0,  317,  317,  317,  317,  317,  317,  317,  317,  317,
  317,  317,  317,    0,    0,    0,  223,    0,  317,  317,
    0,    0,    0,  317,  304,    0,    0,  317,  317,  317,
  317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
    0,    0,    0,  223,    0,  317,  317,    0,    0,    0,
  317,  304,    0,    0,  317,  317,  317,  317,  317,  317,
  317,  317,  317,  317,  317,  317,  317,  317,  126,    0,
    0,  126,  317,  317,    0,    0,    0,    0,  304,  123,
    0,  317,    0,    0,  124,    0,  121,    0,  126,  126,
    0,  122,  126,    0,  317,    0,  123,  123,    0,    0,
  123,  124,  124,  121,  121,  124,    0,  121,  122,  122,
    0,    0,  122,    0,    0,    0,    0,    0,    0,    0,
    0,  317,    0,  126,  126,    0,    0,    0,    0,    0,
    0,  123,  123,    0,    0,    0,  124,  124,  121,    0,
    0,    0,    0,  122,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  126,    0,    0,    0,    0,    0,
    0,    0,  123,    0,    0,    0,    0,  124,    0,  121,
  306,   56,    0,    0,  122,    0,   74,   75,   76,   77,
   78,   79,   80,   81,   82,   83,   84,   85,    8,    9,
   56,   10,   86,   87,   88,   74,   75,   76,   77,   78,
   79,   80,   81,   82,   83,   84,   85,    8,    9,   56,
   10,   86,   87,   88,   74,   75,   76,   77,   78,   79,
   80,   81,   82,   83,   84,   85,    8,    9,    0,   10,
   86,   87,   88,    0,    0,   89,    0,    0,    0,    0,
    0,   56,   66,    0,    0,    0,   74,   75,   76,   77,
   78,   79,   80,   81,   82,   83,   84,   85,    0,    0,
    0,   66,   86,   87,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  253,    0,    0,    0,
   66,  253,  253,  253,  253,  253,  253,  253,  253,  253,
  253,  253,  253,  253,  253,    0,  253,  253,  253,  253,
    0,    0,    0,    0,    0,    0,    0,    0,   56,    0,
    0,    0,   66,   74,   75,   76,   77,   78,   79,   80,
   81,   82,   83,   84,   85,    0,    0,    0,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,  321,
    0,    0,    0,   56,    0,    0,    0,  253,   74,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
    0,    0,   56,    0,    0,   87,   88,   74,   75,   76,
   77,   78,   79,   80,   81,   82,   83,    0,    0,   66,
    0,   56,    0,    0,   87,   88,  296,   75,   76,    0,
    0,   79,   80,   81,   82,    0,    0,    0,    0,    0,
    3,   10,    4,    5,    6,    7,    0,    0,    0,    0,
    0,    0,    0,    0,   66,    0,    0,    0,    8,    9,
    0,   10,    0,    0,    0,   11,    0,    0,    0,    0,
    0,    0,    0,   66,    0,    0,    0,    0,   12,   13,
   14,   15,    0,    0,    0,    0,  254,   16,    4,    0,
    0,    7,   66,    0,    0,    0,    0,    0,    0,    0,
    0,   17,   18,    0,    8,    9,    0,   10,    0,    0,
    0,   11,    0,  254,  255,    4,  256,  257,    7,    0,
    0,    0,    0,    0,   12,    0,    0,    0,  269,  270,
  271,    8,    9,    0,   10,    0,    0,    0,   11,    0,
    0,  255,    0,  256,  257,    0,    0,   17,   18,    0,
    0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   17,   18,
};
short tao_yycheck[] = {                                      12,
   12,   17,   18,   48,   25,   48,    2,    2,    2,   25,
    2,    2,    2,    2,   41,   40,    2,    2,   43,    2,
   45,   41,   41,   41,   44,   44,   58,   41,   59,  227,
   51,  123,   48,   59,   43,   51,   45,   50,   48,   52,
   53,   54,   55,   48,   48,   48,  373,   58,   59,   37,
   38,   44,   65,   41,   42,   43,  260,   45,   38,   47,
   59,   41,  257,   43,  257,   45,   59,  195,  196,   62,
   58,   59,  262,  260,   62,  265,  303,   40,   58,   59,
  258,   59,   62,   59,  290,  291,  292,   38,   58,   59,
   41,  123,   43,  364,   45,   38,  123,  123,   41,  303,
   43,  126,   45,  123,  123,   93,   94,   58,   59,  262,
  263,   62,  123,   93,   94,   58,   59,  444,  323,   62,
   59,  323,   61,  328,  123,   58,  328,  454,   38,  329,
  330,   41,  276,  328,   59,  256,  124,   41,  151,   44,
   44,  157,   93,   94,  124,  123,  257,  123,   58,   59,
   93,   94,   62,  123,   59,   59,  302,   62,   62,  123,
   44,  282,  283,  123,  362,  178,  328,  180,   38,   44,
   60,   41,  185,  124,  113,   59,   44,  193,   62,   38,
   37,  124,   41,   93,   94,   42,   60,   62,   58,   59,
   47,   59,   62,   41,   62,  373,   44,  123,  214,   58,
   59,  282,  283,   62,   59,  476,  286,  287,  479,  301,
  481,   59,   59,  258,  124,  258,  211,  212,   59,  211,
  212,  211,  212,   93,   94,  211,  212,  243,  211,  212,
  246,   59,  257,  243,   93,   94,   59,  365,  243,  243,
  243,   41,  258,   91,   44,  289,  290,  291,  243,   59,
  448,  224,  225,  226,  124,  288,  289,   59,  253,   59,
   59,  253,  293,  253,  257,  124,  444,  253,   60,  301,
  253,  289,  290,  291,  301,  289,  454,   13,   14,   14,
   15,  301,  301,  338,  339,  123,  301,   41,  262,   38,
  301,  123,   41,   40,  257,  124,  321,  322,  323,  324,
  325,  326,  327,  328,   58,   59,  331,  332,   62,   58,
   59,  123,  123,   62,  310,  310,  310,   44,  310,  310,
  310,  310,  338,  339,  310,  310,  342,  310,  373,   94,
  373,  301,   38,   61,   44,   91,  257,  285,  125,   93,
  125,  329,  330,  125,   93,   94,   59,   41,  361,  329,
  330,  364,  257,  257,   62,   62,  262,  373,  321,  322,
  323,  324,  325,  326,  327,  328,   62,  125,  331,  332,
  125,   59,  125,  257,   59,  124,   59,   59,  329,  330,
   59,   59,   41,   59,   59,  257,  329,  330,   59,  257,
   44,  125,  405,  405,  125,  125,  125,  257,   40,  444,
  123,  444,   59,   93,   40,  292,   41,  289,   41,  454,
   44,  454,   41,   41,   44,   59,  125,   58,   44,  329,
  330,  125,   40,   40,  293,   41,   58,  323,  444,  450,
   41,   44,   59,    0,  450,  323,   59,  257,  454,  123,
   59,   41,  123,   41,  257,  125,  459,  459,  125,   59,
   41,  125,  125,   41,   59,   41,   14,  214,  361,  329,
  330,  483,  283,  476,  366,  284,  479,  483,  481,  285,
  329,  330,  451,   48,  256,  257,   48,  248,  198,   15,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  209,  277,  278,  279,  280,  453,
  212,  256,  257,  403,  252,  477,   -1,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  482,  277,  278,  279,  280,  257,   -1,   -1,   -1,
   -1,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,   -1,   -1,   -1,  328,   -1,  279,  280,
   -1,   -1,   -1,  257,  285,   -1,   -1,  288,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
   -1,   -1,   -1,  328,   -1,  279,  280,   -1,   -1,   -1,
  257,  285,   -1,   -1,  288,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  328,   38,   -1,
   -1,   41,  279,  280,   -1,   -1,   -1,   -1,  285,   41,
   -1,  288,   -1,   -1,   41,   -1,   41,   -1,   58,   59,
   -1,   41,   62,   -1,  328,   -1,   58,   59,   -1,   -1,
   62,   58,   59,   58,   59,   62,   -1,   62,   58,   59,
   -1,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  328,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   94,   -1,   -1,   -1,   93,   94,   93,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   -1,   -1,   -1,  124,   -1,  124,
  256,  257,   -1,   -1,  124,   -1,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  257,  277,  278,  279,  280,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  257,
  277,  278,  279,  280,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,   -1,  277,
  278,  279,  280,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,  257,  328,   -1,   -1,   -1,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,   -1,   -1,
   -1,  328,  278,  279,  280,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
  328,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,   -1,  277,  278,  279,  280,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,  328,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,   -1,   -1,   -1,   -1,   -1,
  279,  280,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,  257,   -1,   -1,   -1,  328,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
   -1,   -1,  257,   -1,   -1,  279,  280,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,  328,
   -1,  257,   -1,   -1,  279,  280,  262,  263,  264,   -1,
   -1,  267,  268,  269,  270,   -1,   -1,   -1,   -1,   -1,
  256,  277,  258,  259,  260,  261,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  328,   -1,   -1,   -1,  274,  275,
   -1,  277,   -1,   -1,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  328,   -1,   -1,   -1,   -1,  294,  295,
  296,  297,   -1,   -1,   -1,   -1,  256,  303,  258,   -1,
   -1,  261,  328,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  317,  318,   -1,  274,  275,   -1,  277,   -1,   -1,
   -1,  281,   -1,  256,  284,  258,  286,  287,  261,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,  298,  299,
  300,  274,  275,   -1,  277,   -1,   -1,   -1,  281,   -1,
   -1,  284,   -1,  286,  287,   -1,   -1,  317,  318,   -1,
   -1,  294,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,  318,
};
#define TAO_YYFINAL 1
#ifndef TAO_YYDEBUG
#define TAO_YYDEBUG 0
#endif
#define TAO_YYMAXTOKEN 332
#if TAO_YYDEBUG
const char *tao_yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'",0,"'/'",0,0,0,0,0,0,0,0,
0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENTIFIER","IDL_CONST",
"IDL_MODULE","IDL_INTERFACE","IDL_TYPEDEF","IDL_LONG","IDL_SHORT",
"IDL_UNSIGNED","IDL_DOUBLE","IDL_FLOAT","IDL_CHAR","IDL_WCHAR","IDL_OCTET",
"IDL_BOOLEAN","IDL_FIXED","IDL_ANY","IDL_OBJECT","IDL_STRUCT","IDL_UNION",
"IDL_SWITCH","IDL_ENUM","IDL_SEQUENCE","IDL_STRING","IDL_WSTRING",
"IDL_EXCEPTION","IDL_CASE","IDL_DEFAULT","IDL_READONLY","IDL_ATTRIBUTE",
"IDL_ONEWAY","IDL_IDEMPOTENT","IDL_VOID","IDL_IN","IDL_OUT","IDL_INOUT",
"IDL_RAISES","IDL_CONTEXT","IDL_NATIVE","IDL_LOCAL","IDL_ABSTRACT","IDL_CUSTOM",
"IDL_FACTORY","IDL_PRIVATE","IDL_PUBLIC","IDL_SUPPORTS","IDL_TRUNCATABLE",
"IDL_VALUETYPE","IDL_COMPONENT","IDL_CONSUMES","IDL_EMITS","IDL_EVENTTYPE",
"IDL_FINDER","IDL_GETRAISES","IDL_HOME","IDL_IMPORT","IDL_MULTIPLE",
"IDL_PRIMARYKEY","IDL_PROVIDES","IDL_PUBLISHES","IDL_SETRAISES","IDL_TYPEID",
"IDL_TYPEPREFIX","IDL_USES","IDL_MANAGES","IDL_INTEGER_LITERAL",
"IDL_UINTEGER_LITERAL","IDL_STRING_LITERAL","IDL_CHARACTER_LITERAL",
"IDL_FLOATING_PT_LITERAL","IDL_TRUETOK","IDL_FALSETOK","IDL_SCOPE_DELIMITOR",
"IDL_LEFT_SHIFT","IDL_RIGHT_SHIFT","IDL_WCHAR_LITERAL","IDL_WSTRING_LITERAL",
};
const char *tao_yyrule[] = {
"$accept : start",
"start : definitions",
"definitions : definitions definition",
"definitions :",
"$$1 :",
"definition : type_dcl $$1 ';'",
"$$2 :",
"definition : typeid_dcl $$2 ';'",
"$$3 :",
"definition : typeprefix_dcl $$3 ';'",
"$$4 :",
"definition : const_dcl $$4 ';'",
"$$5 :",
"definition : exception $$5 ';'",
"$$6 :",
"definition : interface_def $$6 ';'",
"$$7 :",
"definition : module $$7 ';'",
"$$8 :",
"definition : value_def $$8 ';'",
"$$9 :",
"definition : error $$9 ';'",
"$$10 :",
"$$11 :",
"$$12 :",
"$$13 :",
"module : IDL_MODULE $$10 IDENTIFIER $$11 '{' $$12 definitions $$13 '}'",
"interface_def : interface",
"interface_def : interface_forward",
"$$14 :",
"$$15 :",
"$$16 :",
"interface : interface_header $$14 '{' $$15 exports $$16 '}'",
"$$17 :",
"interface_decl : IDL_INTERFACE $$17 id",
"interface_header : interface_decl inheritance_spec",
"interface_header : IDL_LOCAL interface_decl inheritance_spec",
"interface_header : IDL_ABSTRACT interface_decl inheritance_spec",
"$$18 :",
"inheritance_spec : ':' $$18 at_least_one_scoped_name",
"inheritance_spec :",
"value_def : valuetype",
"value_def : value_abs_decl",
"value_def : value_forward_decl",
"value_def : value_box_decl",
"valuetype : IDL_CUSTOM value_concrete_decl",
"valuetype : value_concrete_decl",
"$$19 :",
"$$20 :",
"$$21 :",
"value_concrete_decl : value_header $$19 '{' $$20 value_elements $$21 '}'",
"$$22 :",
"$$23 :",
"$$24 :",
"value_abs_decl : IDL_ABSTRACT value_header $$22 '{' $$23 exports $$24 '}'",
"value_header : value_decl opt_truncatable inheritance_spec supports_spec",
"$$25 :",
"value_decl : IDL_VALUETYPE $$25 id",
"opt_truncatable : IDL_TRUNCATABLE",
"opt_truncatable :",
"supports_spec : IDL_SUPPORTS scoped_name",
"supports_spec :",
"value_forward_decl : IDL_ABSTRACT value_decl",
"value_forward_decl : value_decl",
"value_box_decl : value_decl type_spec",
"value_elements : value_elements value_element",
"value_elements :",
"value_element : state_member",
"value_element : export",
"value_element : init_decl ';'",
"$$26 :",
"state_member : IDL_PUBLIC $$26 member_i",
"$$27 :",
"state_member : IDL_PRIVATE $$27 member_i",
"exports : exports export",
"exports :",
"$$28 :",
"export : type_dcl $$28 ';'",
"$$29 :",
"export : typeid_dcl $$29 ';'",
"$$30 :",
"export : typeprefix_dcl $$30 ';'",
"$$31 :",
"export : const_dcl $$31 ';'",
"$$32 :",
"export : exception $$32 ';'",
"$$33 :",
"export : attribute $$33 ';'",
"$$34 :",
"export : operation $$34 ';'",
"$$35 :",
"export : error $$35 ';'",
"at_least_one_scoped_name : scoped_name scoped_names",
"$$36 :",
"scoped_names : scoped_names ',' $$36 scoped_name",
"scoped_names :",
"scoped_name : id",
"$$37 :",
"scoped_name : IDL_SCOPE_DELIMITOR $$37 id",
"$$38 :",
"scoped_name : scoped_name IDL_SCOPE_DELIMITOR $$38 id",
"id : IDENTIFIER",
"interface_forward : interface_decl",
"interface_forward : IDL_LOCAL interface_decl",
"interface_forward : IDL_ABSTRACT interface_decl",
"$$39 :",
"$$40 :",
"$$41 :",
"$$42 :",
"const_dcl : IDL_CONST $$39 const_type $$40 id $$41 '=' $$42 expression",
"const_type : integer_type",
"const_type : char_type",
"const_type : octet_type",
"const_type : boolean_type",
"const_type : floating_pt_type",
"const_type : fixed_type",
"const_type : string_type_spec",
"const_type : wstring_type_spec",
"const_type : scoped_name",
"expression : const_expr",
"const_expr : or_expr",
"or_expr : xor_expr",
"or_expr : or_expr '|' xor_expr",
"xor_expr : and_expr",
"xor_expr : xor_expr '^' and_expr",
"and_expr : shift_expr",
"and_expr : and_expr '&' shift_expr",
"shift_expr : add_expr",
"shift_expr : shift_expr IDL_LEFT_SHIFT add_expr",
"shift_expr : shift_expr IDL_RIGHT_SHIFT add_expr",
"add_expr : mult_expr",
"add_expr : add_expr '+' mult_expr",
"add_expr : add_expr '-' mult_expr",
"mult_expr : unary_expr",
"mult_expr : mult_expr '*' unary_expr",
"mult_expr : mult_expr '/' unary_expr",
"mult_expr : mult_expr '%' unary_expr",
"unary_expr : primary_expr",
"unary_expr : '+' primary_expr",
"unary_expr : '-' primary_expr",
"unary_expr : '~' primary_expr",
"primary_expr : scoped_name",
"primary_expr : literal",
"primary_expr : '(' const_expr ')'",
"literal : IDL_INTEGER_LITERAL",
"literal : IDL_UINTEGER_LITERAL",
"literal : IDL_STRING_LITERAL",
"literal : IDL_WSTRING_LITERAL",
"literal : IDL_CHARACTER_LITERAL",
"literal : IDL_WCHAR_LITERAL",
"literal : IDL_FLOATING_PT_LITERAL",
"literal : IDL_TRUETOK",
"literal : IDL_FALSETOK",
"positive_int_expr : const_expr",
"$$43 :",
"type_dcl : IDL_TYPEDEF $$43 type_declarator",
"type_dcl : struct_type",
"type_dcl : union_type",
"type_dcl : enum_type",
"type_dcl : IDL_NATIVE simple_declarator",
"type_dcl : constructed_forward_type_spec",
"$$44 :",
"type_declarator : type_spec $$44 at_least_one_declarator",
"type_spec : simple_type_spec",
"type_spec : constructed_type_spec",
"simple_type_spec : base_type_spec",
"simple_type_spec : template_type_spec",
"simple_type_spec : scoped_name",
"base_type_spec : integer_type",
"base_type_spec : floating_pt_type",
"base_type_spec : char_type",
"base_type_spec : boolean_type",
"base_type_spec : octet_type",
"base_type_spec : fixed_type",
"base_type_spec : any_type",
"base_type_spec : object_type",
"template_type_spec : sequence_type_spec",
"template_type_spec : string_type_spec",
"template_type_spec : wstring_type_spec",
"constructed_type_spec : struct_type",
"constructed_type_spec : union_type",
"constructed_type_spec : enum_type",
"constructed_forward_type_spec : struct_forward_type",
"constructed_forward_type_spec : union_forward_type",
"at_least_one_declarator : declarator declarators",
"$$45 :",
"declarators : declarators ',' $$45 declarator",
"declarators :",
"declarator : simple_declarator",
"declarator : complex_declarator",
"at_least_one_simple_declarator : simple_declarator simple_declarators",
"$$46 :",
"simple_declarators : simple_declarators ',' $$46 simple_declarator",
"simple_declarators :",
"simple_declarator : id",
"complex_declarator : array_declarator",
"integer_type : signed_int",
"integer_type : unsigned_int",
"signed_int : IDL_LONG",
"signed_int : IDL_LONG IDL_LONG",
"signed_int : IDL_SHORT",
"unsigned_int : IDL_UNSIGNED IDL_LONG",
"unsigned_int : IDL_UNSIGNED IDL_LONG IDL_LONG",
"unsigned_int : IDL_UNSIGNED IDL_SHORT",
"floating_pt_type : IDL_DOUBLE",
"floating_pt_type : IDL_FLOAT",
"floating_pt_type : IDL_LONG IDL_DOUBLE",
"fixed_type : IDL_FIXED",
"char_type : IDL_CHAR",
"char_type : IDL_WCHAR",
"octet_type : IDL_OCTET",
"boolean_type : IDL_BOOLEAN",
"any_type : IDL_ANY",
"object_type : IDL_OBJECT",
"$$47 :",
"struct_decl : IDL_STRUCT $$47 id",
"$$48 :",
"$$49 :",
"$$50 :",
"struct_type : struct_decl $$48 '{' $$49 at_least_one_member $$50 '}'",
"at_least_one_member : member members",
"members : members member",
"members :",
"$$51 :",
"member : $$51 member_i",
"$$52 :",
"$$53 :",
"member_i : type_spec $$52 at_least_one_declarator $$53 ';'",
"$$54 :",
"member_i : error $$54 ';'",
"$$55 :",
"union_decl : IDL_UNION $$55 id",
"$$56 :",
"$$57 :",
"$$58 :",
"$$59 :",
"$$60 :",
"$$61 :",
"union_type : union_decl IDL_SWITCH $$56 '(' $$57 switch_type_spec $$58 ')' $$59 '{' $$60 at_least_one_case_branch $$61 '}'",
"switch_type_spec : integer_type",
"switch_type_spec : char_type",
"switch_type_spec : octet_type",
"switch_type_spec : boolean_type",
"switch_type_spec : enum_type",
"switch_type_spec : scoped_name",
"at_least_one_case_branch : case_branch case_branches",
"case_branches : case_branches case_branch",
"case_branches :",
"$$62 :",
"$$63 :",
"case_branch : at_least_one_case_label $$62 element_spec $$63 ';'",
"$$64 :",
"case_branch : error $$64 ';'",
"at_least_one_case_label : case_label case_labels",
"case_labels : case_labels case_label",
"case_labels :",
"$$65 :",
"case_label : IDL_DEFAULT $$65 ':'",
"$$66 :",
"$$67 :",
"case_label : IDL_CASE $$66 const_expr $$67 ':'",
"$$68 :",
"element_spec : type_spec $$68 declarator",
"struct_forward_type : struct_decl",
"union_forward_type : union_decl",
"$$69 :",
"$$70 :",
"$$71 :",
"$$72 :",
"enum_type : IDL_ENUM $$69 id $$70 '{' $$71 at_least_one_enumerator $$72 '}'",
"at_least_one_enumerator : enumerator enumerators",
"$$73 :",
"enumerators : enumerators ',' $$73 enumerator",
"enumerators :",
"enumerator : IDENTIFIER",
"$$74 :",
"$$75 :",
"sequence_type_spec : seq_head ',' $$74 positive_int_expr $$75 '>'",
"sequence_type_spec : seq_head '>'",
"$$76 :",
"$$77 :",
"seq_head : IDL_SEQUENCE $$76 '<' $$77 simple_type_spec",
"$$78 :",
"$$79 :",
"string_type_spec : string_head '<' $$78 positive_int_expr $$79 '>'",
"string_type_spec : string_head",
"string_head : IDL_STRING",
"$$80 :",
"$$81 :",
"wstring_type_spec : wstring_head '<' $$80 positive_int_expr $$81 '>'",
"wstring_type_spec : wstring_head",
"wstring_head : IDL_WSTRING",
"$$82 :",
"array_declarator : id $$82 at_least_one_array_dim",
"at_least_one_array_dim : array_dim array_dims",
"array_dims : array_dims array_dim",
"array_dims :",
"$$83 :",
"$$84 :",
"array_dim : '[' $$83 positive_int_expr $$84 ']'",
"$$85 :",
"$$86 :",
"attribute : opt_readonly IDL_ATTRIBUTE $$85 param_type_spec $$86 at_least_one_simple_declarator",
"opt_readonly : IDL_READONLY",
"opt_readonly :",
"$$87 :",
"$$88 :",
"$$89 :",
"$$90 :",
"exception : IDL_EXCEPTION $$87 id $$88 '{' $$89 members $$90 '}'",
"$$91 :",
"$$92 :",
"$$93 :",
"$$94 :",
"operation : opt_op_attribute op_type_spec $$91 IDENTIFIER $$92 parameter_list $$93 opt_raises $$94 opt_context",
"opt_op_attribute : IDL_ONEWAY",
"opt_op_attribute : IDL_IDEMPOTENT",
"opt_op_attribute :",
"op_type_spec : param_type_spec",
"op_type_spec : IDL_VOID",
"$$95 :",
"$$96 :",
"init_decl : IDL_FACTORY $$95 IDENTIFIER $$96 init_parameter_list",
"$$97 :",
"init_parameter_list : '(' $$97 ')'",
"$$98 :",
"init_parameter_list : '(' $$98 at_least_one_in_parameter ')'",
"at_least_one_in_parameter : in_parameter in_parameters",
"$$99 :",
"in_parameters : in_parameters ',' $$99 in_parameter",
"in_parameters :",
"$$100 :",
"$$101 :",
"in_parameter : IDL_IN $$100 param_type_spec $$101 declarator",
"$$102 :",
"parameter_list : '(' $$102 ')'",
"$$103 :",
"parameter_list : '(' $$103 at_least_one_parameter ')'",
"at_least_one_parameter : parameter parameters",
"$$104 :",
"parameters : parameters ',' $$104 parameter",
"parameters :",
"$$105 :",
"$$106 :",
"parameter : direction $$105 param_type_spec $$106 declarator",
"param_type_spec : base_type_spec",
"param_type_spec : string_type_spec",
"param_type_spec : wstring_type_spec",
"param_type_spec : scoped_name",
"direction : IDL_IN",
"direction : IDL_OUT",
"direction : IDL_INOUT",
"$$107 :",
"$$108 :",
"opt_raises : IDL_RAISES $$107 '(' $$108 at_least_one_scoped_name ')'",
"opt_raises :",
"$$109 :",
"$$110 :",
"opt_context : IDL_CONTEXT $$109 '(' $$110 at_least_one_string_literal ')'",
"opt_context :",
"at_least_one_string_literal : IDL_STRING_LITERAL string_literals",
"$$111 :",
"string_literals : string_literals ',' $$111 IDL_STRING_LITERAL",
"string_literals :",
"typeid_dcl : IDL_TYPEID scoped_name IDL_STRING_LITERAL",
"typeprefix_dcl : IDL_TYPEPREFIX scoped_name IDL_STRING_LITERAL",
};
#endif
#define tao_yyclearin (tao_yychar=(-1))
#define tao_yyerrok (tao_yyerrflag=0)
#ifndef TAO_YYSTACKSIZE
#ifdef TAO_YYMAXDEPTH
#define TAO_YYSTACKSIZE TAO_YYMAXDEPTH
#else
#define TAO_YYSTACKSIZE 10000
#endif
#endif
int tao_yydebug;
int tao_yynerrs;
int tao_yyerrflag;
int tao_yychar;
short *tao_yyssp;
TAO_YYSTYPE *tao_yyvsp;
TAO_YYSTYPE tao_yyval;
TAO_YYSTYPE tao_yylval;
#define tao_yystacksize TAO_YYSTACKSIZE
short tao_yyss[TAO_YYSTACKSIZE];
TAO_YYSTYPE tao_yyvs[TAO_YYSTACKSIZE];
/* programs */

/*
 * ???
 */
int
tao_yywrap (void)
{
  return 1;
}

/*
 * Report an error situation discovered in a production
 */
void
tao_yyerror (const char *msg)
{
  ACE_ERROR ((LM_ERROR,
              "%s\n",
              msg));
}
#define TAO_YYABORT goto tao_yyabort
#define TAO_YYACCEPT goto tao_yyaccept
#define TAO_YYERROR goto tao_yyerrlab
#ifdef TAO_YYDEBUG
#ifndef TAO_YYDEBUG_LEXER_TEXT /* pointer to the text isolated by the lexer*/
#define TAO_YYDEBUG_LEXER_TEXT "TAO_YYDEBUG_LEXER_TEXT not defined"
#endif
#ifndef TAO_YYDEBUG_INDENT_STRING
#define TAO_YYDEBUG_INDENT_STRING  "|       "
#endif
#ifndef TAO_YYDEBUG_REDUCE_STRING
#define TAO_YYDEBUG_REDUCE_STRING  "+-------"
#endif
#ifndef TAO_YYDEBUG_INDENT
#ifdef __cplusplus
void TAO_YYDEBUG_INDENT(int tao_yyindent)
#else
TAO_YYDEBUG_INDENT(tao_yyindent)
int tao_yyindent;
#endif
{
    while(tao_yyindent-- > 0)
        printf("%s", TAO_YYDEBUG_INDENT_STRING);
}
#endif /* TAO_YYDEBUG_INDENT */
#ifndef TAO_YYDEBUG_REDUCE
#ifdef __cplusplus
void TAO_YYDEBUG_REDUCE(int, int, const char *tao_yyrule_string, int tao_yynew_indent, int tao_yyrhs_count)
#else
TAO_YYDEBUG_REDUCE(tao_yynew_state, tao_yyrule_num, tao_yyrule_string, tao_yynew_indent, tao_yyrhs_count)
int tao_yynew_state;
int tao_yyrule_num;
char * tao_yyrule_string;
int tao_yynew_indent;
int tao_yyrhs_count;
#endif
{
    if (1 < tao_yyrhs_count)
    {  /* draw the graphics for the reduction */
        TAO_YYDEBUG_INDENT(tao_yynew_indent);
        while(1 < tao_yyrhs_count--)
            printf("%s", TAO_YYDEBUG_REDUCE_STRING);
        putchar('+'); /* left rotated L would look nice */
        putchar('\n');
        TAO_YYDEBUG_INDENT(tao_yynew_indent);
        putchar('|'); /* down arrow would look nice */
        putchar('\n');
    }
    TAO_YYDEBUG_INDENT(tao_yynew_indent);
    /* Only print the resulting token name */
    while (*tao_yyrule_string)
        putchar(*tao_yyrule_string++);
    putchar('\n');
}
#endif /* TAO_YYDEBUG_REDUCE */
#ifndef TAO_YYDEBUG_SHIFT_LEXEME
#ifdef __cplusplus
void TAO_YYDEBUG_SHIFT_LEXEME(int, int, const char *tao_yytoken_string, int tao_yynew_indent)
#else
TAO_YYDEBUG_SHIFT_LEXEME(tao_yyold_state, tao_yynew_state, tao_yytoken_string, tao_yynew_indent)
int tao_yyold_state;
int tao_yynew_state;
char * tao_yytoken_string;
int tao_yynew_indent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yynew_indent);
    printf("%s <-- `%s'\n", tao_yytoken_string, TAO_YYDEBUG_LEXER_TEXT);
}
#endif /*  TAO_YYDEBUG_SHIFT_LEXEME */
#ifndef TAO_YYDEBUG_LOOK_AHEAD
#ifdef __cplusplus
void TAO_YYDEBUG_LOOK_AHEAD(int, int tao_yytoken_num, const char *tao_yytoken_string, int tao_yyindent)
#else
TAO_YYDEBUG_LOOK_AHEAD(tao_yynew_state, tao_yytoken_num, tao_yytoken_string, tao_yyindent)
int tao_yynew_state;
int tao_yytoken_num;
char * tao_yytoken_string;
int tao_yyindent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yyindent);
    printf("          .... look ahead at %s   `%s'\n",
           tao_yytoken_string,
           (0 == tao_yytoken_num)? "\0": TAO_YYDEBUG_LEXER_TEXT);
}
#endif /* TAO_YYDEBUG_LOOK_AHEAD */
#ifndef TAO_YYDEBUG_DISCARD_STATE
#ifdef __cplusplus
void TAO_YYDEBUG_DISCARD_STATE(int, int tao_yyindent)
#else
TAO_YYDEBUG_DISCARD_STATE(tao_yynew_state, tao_yyindent)
int tao_yynew_state;
int tao_yyindent;
#endif
{
    if (0 < tao_yyindent)
    {  /* draw the graphics for the reduction */
        TAO_YYDEBUG_INDENT(tao_yyindent-1);
        printf("%s", TAO_YYDEBUG_REDUCE_STRING);
        putchar('+'); /* left rotated L would look nice */
        printf("  discarding state\n");
        TAO_YYDEBUG_INDENT(tao_yyindent-1);
        putchar('|'); /* down arrow would look nice */
        putchar('\n');
    }
    else
    {
        if (0 == tao_yyindent)
            printf("discarding state\n");
        else
            printf("no more states to discard: parser will abort\n");
    }
}
#endif /* TAO_YYDEBUG_DISCARD_STATE */
#ifndef TAO_YYDEBUG_DISCARD_TOKEN
#ifdef __cplusplus
void TAO_YYDEBUG_DISCARD_TOKEN(int, int, const char *tao_yytoken_string, int tao_yyindent)
#else
TAO_YYDEBUG_DISCARD_TOKEN(tao_yynew_state, tao_yytoken_num, tao_yytoken_string, tao_yyindent)
int tao_yynew_state;
int tao_yytoken_num;
char * tao_yytoken_string;
int tao_yyindent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yyindent);
    printf("discarding token %s\n", tao_yytoken_string);
}
#endif /* TAO_YYDEBUG_DISCARD_TOKEN */
#ifndef TAO_YYDEBUG_SHIFT_ERROR_LEXEME
#ifdef __cplusplus
void TAO_YYDEBUG_SHIFT_ERROR_LEXEME(int, int, int tao_yyindent)
#else
TAO_YYDEBUG_SHIFT_ERROR_LEXEME(tao_yyold_state, tao_yynew_state, tao_yyindent)
int tao_yyold_state;
int tao_yynew_state;
int tao_yyindent;
#endif
{
    TAO_YYDEBUG_INDENT(tao_yyindent);
    printf("error\n");
}
#endif /* TAO_YYDEBUG_SHIFT_ERROR_LEXEME */
#endif /* TAO_YYDEBUG */
#ifdef __cplusplus
extern "C" { extern char *ace_foo(const char *); }
#endif
int
tao_yyparse()
{
    register int tao_yym, tao_yyn, tao_yystate;
#if TAO_YYDEBUG
    register const char *tao_yys;
#ifndef __cplusplus
    extern char *ace_foo();
#endif

    if ((tao_yys = ACE_OS::getenv("TAO_YYDEBUG")))
    {
        tao_yyn = *tao_yys;
        if (tao_yyn >= '0' && tao_yyn <= '9')
            tao_yydebug = tao_yyn - '0';
    }
#endif

    tao_yynerrs = 0;
    tao_yyerrflag = 0;
    tao_yychar = (-1);

    tao_yyssp = tao_yyss;
    tao_yyvsp = tao_yyvs;
    *tao_yyssp = tao_yystate = 0;

tao_yyloop:
    if ((tao_yyn = tao_yydefred[tao_yystate])) goto tao_yyreduce;
    if (tao_yychar < 0)
    {
        if ((tao_yychar = tao_yylex()) < 0) tao_yychar = 0;
#if TAO_YYDEBUG
        if (tao_yydebug)
        {
            tao_yys = 0;
            if (tao_yychar <= TAO_YYMAXTOKEN) tao_yys = tao_yyname[tao_yychar];
            if (!tao_yys) tao_yys = "illegal-symbol";
            if (5 < tao_yydebug)
                printf("tao_yydebug: state %d, reading %d (%s)\n", tao_yystate,
                        tao_yychar, tao_yys);
            else
                TAO_YYDEBUG_LOOK_AHEAD(tao_yystate, tao_yychar, tao_yys, tao_yyssp-tao_yyss);
        }
#endif
    }
    if ((tao_yyn = tao_yysindex[tao_yystate]) && (tao_yyn += tao_yychar) >= 0 &&
            tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == tao_yychar)
    {
#if TAO_YYDEBUG
        if (tao_yydebug)
            if (5 < tao_yydebug)
                printf("tao_yydebug: state %d, shifting to state %d\n",
                        tao_yystate, tao_yytable[tao_yyn]);
            else
                TAO_YYDEBUG_SHIFT_LEXEME(tao_yystate, tao_yytable[tao_yyn], tao_yys, tao_yyssp-tao_yyss);
#endif
        if (tao_yyssp >= tao_yyss + tao_yystacksize - 1)
        {
            goto tao_yyoverflow;
        }
        *++tao_yyssp = tao_yystate = tao_yytable[tao_yyn];
        *++tao_yyvsp = tao_yylval;
        tao_yychar = (-1);
        if (tao_yyerrflag > 0)  --tao_yyerrflag;
        goto tao_yyloop;
    }
    if ((tao_yyn = tao_yyrindex[tao_yystate]) && (tao_yyn += tao_yychar) >= 0 &&
            tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == tao_yychar)
    {
        tao_yyn = tao_yytable[tao_yyn];
        goto tao_yyreduce;
    }
    if (tao_yyerrflag) goto tao_yyinrecovery;
#ifdef lint
    goto tao_yynewerror;
#endif

//    tao_yyerror("syntax error");
#ifdef lint
    goto tao_yyerrlab;
#endif
    ++tao_yynerrs;
tao_yyinrecovery:
    if (tao_yyerrflag < 3)
    {
        tao_yyerrflag = 3;
        for (;;)
        {
            if ((tao_yyn = tao_yysindex[*tao_yyssp]) && (tao_yyn += TAO_YYERRCODE) >= 0 &&
                    tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == TAO_YYERRCODE)
            {
#if TAO_YYDEBUG
                if (tao_yydebug)
                    if (5 < tao_yydebug)
                        printf("tao_yydebug: state %d, error recovery shifting\
 to state %d\n", *tao_yyssp, tao_yytable[tao_yyn]);
                    else
                        TAO_YYDEBUG_SHIFT_ERROR_LEXEME(*tao_yyssp, tao_yytable[tao_yyn], tao_yyssp-tao_yyss);
#endif
                if (tao_yyssp >= tao_yyss + tao_yystacksize - 1)
                {
                    goto tao_yyoverflow;
                }
                *++tao_yyssp = tao_yystate = tao_yytable[tao_yyn];
                *++tao_yyvsp = tao_yylval;
                goto tao_yyloop;
            }
            else
            {
#if TAO_YYDEBUG
                if (tao_yydebug)
                    if (5 < tao_yydebug)
                        printf("tao_yydebug: error recovery discarding state %d\
",
                            *tao_yyssp);
                    else
                        TAO_YYDEBUG_DISCARD_STATE(*tao_yyssp, tao_yyssp-tao_yyss-1);
#endif
                if (tao_yyssp <= tao_yyss) goto tao_yyabort;
                --tao_yyssp;
                --tao_yyvsp;
            }
        }
    }
    else
    {
        if (tao_yychar == 0) goto tao_yyabort;
#if TAO_YYDEBUG
        if (tao_yydebug)
        {
            tao_yys = 0;
            if (tao_yychar <= TAO_YYMAXTOKEN) tao_yys = tao_yyname[tao_yychar];
            if (!tao_yys) tao_yys = "illegal-symbol";
            if (5 < tao_yydebug)
                printf("tao_yydebug: state %d, error recovery discards token %d (%s)\n",
                    tao_yystate, tao_yychar, tao_yys);
            else 
                TAO_YYDEBUG_DISCARD_TOKEN(tao_yystate, tao_yychar, tao_yys, tao_yyssp-tao_yyss);
        }
#endif
        tao_yychar = (-1);
        goto tao_yyloop;
    }
tao_yyreduce:
    tao_yym = tao_yylen[tao_yyn];
    tao_yyval = tao_yyvsp[1-tao_yym];
#if TAO_YYDEBUG
    if (tao_yydebug)
        if (5 < tao_yydebug)
            printf("tao_yydebug: state %d, reducing by rule %d (%s)\n",
                    tao_yystate, tao_yyn, tao_yyrule[tao_yyn]);
        else
            TAO_YYDEBUG_REDUCE(tao_yystate, tao_yyn, tao_yyrule[tao_yyn], tao_yyssp-tao_yyss-tao_yym, tao_yym);
#endif
    switch (tao_yyn)
    {
case 4:
{
/* definition : type_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeDeclSeen);
        }
break;
case 5:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 6:
{
/*      | typeid_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeIdDeclSeen);
        }
break;
case 7:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 8:
{
/*      | typeprefix_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypePrefixDeclSeen);
        }
break;
case 9:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 10:
{
/*      | const_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstDeclSeen);
        }
break;
case 11:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 12:
{
/*      | exception*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptDeclSeen);
        }
break;
case 13:
{
/*      ';'*/
        idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 14:
{
/*      | interface_def*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceDeclSeen);
        }
break;
case 15:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 16:
{
/*      | module*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ModuleDeclSeen);
        }
break;
case 17:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 18:
{
/*      | value_def*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValuetypeDeclSeen);
        }
break;
case 19:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 20:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state());
        }
break;
case 21:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 22:
{
/* module  : IDL_MODULE*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleSeen);
          }
break;
case 23:
{
/*        IDENTIFIER*/
            Identifier id (tao_yyvsp[0].strval);
            UTL_ScopedName n (&id, 
                              0);
            AST_Module *m = 0;
            UTL_Scope *s = idl_global->scopes ().top_non_null ();

            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleIDSeen);
            /*
             * Make a new module and add it to the enclosing scope
             */
            if (s != 0) 
              {
                m = idl_global->gen ()->create_module (s, 
                                                       &n);
                (void) s->fe_add_module (m);
              }
            /*
             * Push it on the stack
             */
            idl_global->scopes ().push (m);
          }
break;
case 24:
{
/*        '{'*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleSqSeen);
          }
break;
case 25:
{
/*        definitions*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleBodySeen);
          }
break;
case 26:
{
/*        '}'*/
            idl_global->set_parse_state (IDL_GlobalData::PS_ModuleQsSeen);
            /*
             * Finished with this module - pop it from the scope stack.
             */
            idl_global->scopes ().pop ();
          }
break;
case 29:
{
/* interface : interface_header          */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Interface *i = 0;

          /*
           * Make a new interface node and add it to its enclosing scope
           */
          if (s != 0 && tao_yyvsp[0].ihval != 0) 
            {
              i = 
                idl_global->gen ()->create_interface (
                                        tao_yyvsp[0].ihval->interface_name (),
                                        tao_yyvsp[0].ihval->inherits (),
                                        tao_yyvsp[0].ihval->n_inherits (),
                                        tao_yyvsp[0].ihval->inherits_flat (),
                                        tao_yyvsp[0].ihval->n_inherits_flat (),
                                        tao_yyvsp[0].ihval->is_local (),
                                        tao_yyvsp[0].ihval->is_abstract ()
                                      );
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the interface to its definition scope.
               */
              (void) s->fe_add_interface (i);
            }

          /*
           * Push it on the scope stack.
           */
          idl_global->scopes ().push (i);

          /* This FE_InterfaceHeader class isn't destroyed with the AST.*/
          tao_yyvsp[0].ihval->interface_name ()->destroy ();
          delete tao_yyvsp[0].ihval;
          tao_yyvsp[0].ihval = 0;
        }
break;
case 30:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceSqSeen);
        }
break;
case 31:
{
/*      exports*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceBodySeen);
        }
break;
case 32:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceQsSeen);

          /*
           * Done with this interface - pop it off the scopes stack
           */
          idl_global->scopes ().pop ();
        }
break;
case 33:
{
/* interface_decl : IDL_INTERFACE*/
           idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceSeen);
         }
break;
case 34:
{
/*       id*/
           idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceIDSeen);
           tao_yyval.idval = tao_yyvsp[0].idval;
         }
break;
case 35:
{
/* interface_header : interface_decl inheritance_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);

          /*
           * Create an AST representation of the information in the header
           * part of an interface - this representation contains a computed
           * list of all interfaces which this interface inherits from,
           * recursively
           */
          UTL_ScopedName n (tao_yyvsp[-1].idval, 
                            0);
          ACE_NEW_RETURN (tao_yyval.ihval,
                          FE_InterfaceHeader (&n,
                                              tao_yyvsp[0].nlval),
                          1);
        }
break;
case 36:
{
/*      | IDL_LOCAL interface_decl inheritance_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritSpecSeen);

          /*
           * Create an AST representation of the information in the header
           * part of an interface - this representation contains a computed
           * list of all interfaces which this interface inherits from,
           * recursively
           */
          UTL_ScopedName n (tao_yyvsp[-1].idval, 
                            0);
          ACE_NEW_RETURN (tao_yyval.ihval,
                          FE_InterfaceHeader (&n, 
                                              tao_yyvsp[0].nlval),
                          1);
        }
break;
case 37:
{
/*      | IDL_ABSTRACT interface_decl inheritance_spec*/
           ACE_DEBUG ((LM_DEBUG,
                       ACE_TEXT ("error in %s line %d\n"),
                       idl_global->filename ()->get_string (),
                       idl_global->lineno ()));
           ACE_DEBUG ((LM_DEBUG,
                       ACE_TEXT ("Sorry, I (TAO_IDL) can't handle abstract")
                       ACE_TEXT (" interfaces yet\n")));
        }
break;
case 38:
{
/* inheritance_spec : ':'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InheritColonSeen);
        }
break;
case 39:
{
/*      at_least_one_scoped_name*/
          tao_yyval.nlval = tao_yyvsp[0].nlval;
        }
break;
case 40:
{
/*      | /* EMPTY * /*/
          tao_yyval.nlval = 0;
        }
break;
case 45:
{
/* valuetype : IDL_CUSTOM value_concrete_decl*/
           ACE_DEBUG ((LM_DEBUG,
                       ACE_TEXT ("error in %s line %d\n"),
                       idl_global->filename ()->get_string (),
                       idl_global->lineno ()));
           ACE_DEBUG ((LM_DEBUG,
                       ACE_TEXT ("Sorry, I (TAO_IDL) can't handle")
                       ACE_TEXT (" custom yet\n")));
        }
break;
case 47:
{
/* value_concrete_decl : value_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Interface *i = 0;

          if (s != 0 && tao_yyvsp[0].vhval != 0) 
            {
              i = 
                idl_global->gen ()->create_valuetype (
                                        tao_yyvsp[0].vhval->interface_name (),
                                        tao_yyvsp[0].vhval->inherits (),
                                        tao_yyvsp[0].vhval->n_inherits ()
                                      );
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the valuetype to its definition scope
               */
              (void) s->fe_add_interface (i);
            }

          /*
           * Push it on the scope stack
           */
          idl_global->scopes ().push (i);
        }
break;
case 48:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceSqSeen);
        }
break;
case 49:
{
/*      value_elements*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceBodySeen);
        }
break;
case 50:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceQsSeen);

          /*
           * Done with this interface - pop it off the scopes stack
           */
          UTL_Scope* s = idl_global->scopes ().top ();
          AST_Interface* m = AST_Interface::narrow_from_scope (s);
          m->inherited_name_clash ();
          idl_global->scopes ().pop ();
        }
break;
case 51:
{
/* value_abs_decl : IDL_ABSTRACT value_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Interface *i = 0;

          if (s != 0 && tao_yyvsp[0].vhval != 0) 
            {
              if (tao_yyvsp[0].vhval->n_concrete() > 0) 
                {
                  idl_global->err ()->abstract_inheritance_error (
                                          tao_yyvsp[0].vhval->interface_name ()
                                        );
                }

              i = 
                idl_global->gen ()->create_valuetype (
                                        tao_yyvsp[0].vhval->interface_name (),
                                        tao_yyvsp[0].vhval->inherits (),
                                        tao_yyvsp[0].vhval->n_inherits ()
                                      );
              i->set_abstract_valuetype ();
              AST_Interface::fwd_redefinition_helper (i, 
                                                      s);
              /*
               * Add the valuetype to its definition scope
               */
              (void) s->fe_add_interface (i);
            }

          /*
           * Push it on the scope stack.
           */
          idl_global->scopes ().push (i);
        }
break;
case 52:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceSqSeen);
        }
break;
case 53:
{
/*      exports*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceBodySeen);
        }
break;
case 54:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceQsSeen);

          /*
           * Done with this interface - pop it off the scopes stack.
           */
          UTL_Scope* s = idl_global->scopes ().top ();
          AST_Interface* m = AST_Interface::narrow_from_scope (s);
          m->inherited_name_clash ();
          idl_global->scopes ().pop ();
        }
break;
case 55:
{
/* value_header : value_decl opt_truncatable inheritance_spec supports_spec*/
          UTL_ScopedName *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_ScopedName (tao_yyvsp[-3].idval, 
                                          0),
                          1);
          ACE_NEW_RETURN (tao_yyval.vhval,
                          FE_obv_header (sn,
                                         tao_yyvsp[-1].nlval,
                                         tao_yyvsp[0].nlval),
                          1);      
        }
break;
case 56:
{
/* value_decl : IDL_VALUETYPE*/
           idl_global->set_parse_state (IDL_GlobalData::PS_ValuetypeSeen);
        }
break;
case 57:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ValuetypeIDSeen);
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 58:
{
/* opt_truncatable : IDL_TRUNCATABLE*/
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("warning in %s line %d\n"),
                      idl_global->filename ()->get_string (),
                      idl_global->lineno ()));
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("truncatable modifier not supported ")
                      ACE_TEXT ("and is ignored\n")));
          tao_yyval.bval = I_FALSE;
        }
break;
case 59:
{
/*      | /* EMPTY * /*/
          tao_yyval.bval = I_FALSE;
        }
break;
case 60:
{
/* supports_spec : IDL_SUPPORTS scoped_name*/
          ACE_NEW_RETURN (tao_yyval.nlval,
                          UTL_NameList (tao_yyvsp[0].idlist, 
                                        0),
                          1);
        }
break;
case 61:
{
/*      |   /* EMPTY * /*/
          tao_yyval.nlval = 0;
        }
break;
case 62:
{
/* value_forward_decl : IDL_ABSTRACT value_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * valuetype. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen()->create_valuetype_fwd (&n);
              f->set_abstract_valuetype ();
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 63:
{
/*      | value_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * valuetype. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_valuetype_fwd (&n);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 64:
{
/* value_box_decl : value_decl type_spec*/
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("error in %s line %d\n"),
                      idl_global->filename ()->get_string (),
                      idl_global->lineno ()));
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("Sorry, I (TAO_IDL) can't handle")
                      ACE_TEXT (" boxes yet\n")));
        }
break;
case 70:
{
/* state_member : IDL_PUBLIC*/
          /* is $0 to member_i */
          tao_yyval.vival = AST_Field::vis_PUBLIC;
        }
break;
case 72:
{
/*      IDL_PRIVATE*/
          /* is $0 to member_i */
          tao_yyval.vival = AST_Field::vis_PRIVATE;
        }
break;
case 76:
{
/* export : type_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeDeclSeen);
        }
break;
case 77:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 78:
{
/*      | typeid_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeIdDeclSeen);
        }
break;
case 79:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 80:
{
/*      | typeprefix_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypePrefixDeclSeen);
        }
break;
case 81:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 82:
{
/*      | const_dcl*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstDeclSeen);
        }
break;
case 83:
{
/*      ';'*/
          idl_global->set_parse_state(IDL_GlobalData::PS_NoState);
        }
break;
case 84:
{
/*      | exception*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptDeclSeen);
        }
break;
case 85:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 86:
{
/*      | attribute*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrDeclSeen);
        }
break;
case 87:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 88:
{
/*      | operation*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpDeclSeen);
        }
break;
case 89:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
        }
break;
case 90:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state());
        }
break;
case 91:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 92:
{
/* at_least_one_scoped_name : scoped_name scoped_names*/
          ACE_NEW_RETURN (tao_yyval.nlval,
                          UTL_NameList (tao_yyvsp[-1].idlist, 
                                        tao_yyvsp[0].nlval),
                          1);
        }
break;
case 93:
{
/* scoped_names : scoped_names ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SNListCommaSeen);
        }
break;
case 94:
{
/*      scoped_name*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ScopedNameSeen);

          if (tao_yyvsp[-3].nlval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.nlval,
                              UTL_NameList (tao_yyvsp[0].idlist, 
                                            0),
                              1);
            }
          else 
            {
              UTL_NameList *nl = 0;
              ACE_NEW_RETURN (nl,
                              UTL_NameList (tao_yyvsp[0].idlist, 
                                            0),
                              1);
              tao_yyvsp[-3].nlval->nconc (nl);
              tao_yyval.nlval = tao_yyvsp[-3].nlval;
            }
        }
break;
case 95:
{
/*      | /* EMPTY * /*/
          tao_yyval.nlval = 0;
        }
break;
case 96:
{
/* scoped_name : id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SN_IDSeen);

          ACE_NEW_RETURN (tao_yyval.idlist,
                          UTL_IdList (tao_yyvsp[0].idval,
                                      0),
                          1);
        }
break;
case 97:
{
/*      | IDL_SCOPE_DELIMITOR*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ScopeDelimSeen);
        }
break;
case 98:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SN_IDSeen);

          Identifier *id = 0;
          ACE_NEW_RETURN (id,
                          Identifier (tao_yyvsp[-2].strval),
                          1);
          UTL_IdList *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_IdList (tao_yyvsp[0].idval,
                                      0),
                          1);
          ACE_NEW_RETURN (tao_yyval.idlist,
                          UTL_IdList (id,
                                      sn),
                          1);
        }
break;
case 99:
{
/*      | scoped_name IDL_SCOPE_DELIMITOR*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ScopeDelimSeen);
        }
break;
case 100:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SN_IDSeen);

          UTL_IdList *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_IdList (tao_yyvsp[0].idval,
                                      0),
                          1);
          tao_yyvsp[-3].idlist->nconc (sn);
          tao_yyval.idlist = tao_yyvsp[-3].idlist;
        }
break;
case 101:
{
/* id: IDENTIFIER*/
          ACE_NEW_RETURN (tao_yyval.idval,
                          Identifier (tao_yyvsp[0].strval),
                          1);
          ACE_OS::free (tao_yyvsp[0].strval);
        }
break;
case 102:
{
/* interface_forward : interface_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_InterfaceForwardSeen);

          /*
           * Create a node representing a forward declaration of an
           * interface. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_interface_fwd (&n, 
                                                            0,
                                                            0);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 103:
{
/*      | IDL_LOCAL interface_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (
                          IDL_GlobalData::PS_InterfaceForwardSeen
                        );

          /*
           * Create a node representing a forward declaration of an
           * interface. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_interface_fwd (&n, 
                                                            1, 
                                                            0);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 104:
{
/*      | IDL_ABSTRACT interface_decl*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_InterfaceFwd *f = 0;
          idl_global->set_parse_state (
                          IDL_GlobalData::PS_InterfaceForwardSeen
                        );

          /*
           * Create a node representing a forward declaration of an
           * interface. Store it in the enclosing scope
           */
          if (s != 0) 
            {
              f = idl_global->gen ()->create_interface_fwd (&n, 
                                                            0, 
                                                            1);
              (void) s->fe_add_interface_fwd (f);
            }
        }
break;
case 105:
{
/* const_dcl : IDL_CONST*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstSeen);
        }
break;
case 106:
{
/*      const_type*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstTypeSeen);
        }
break;
case 107:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstIDSeen);
        }
break;
case 108:
{
/*      '='*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstAssignSeen);
        }
break;
case 109:
{
/*      expression*/
          UTL_ScopedName n (tao_yyvsp[-4].idval, 
                            0);
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Constant *c = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_ConstExprSeen);

          /*
           * Create a node representing a constant declaration. Store
           * it in the enclosing scope.
           */
          if (tao_yyvsp[0].exval != 0 && s != 0) 
            {
              AST_Expression::AST_ExprValue *result = 
                tao_yyvsp[0].exval->coerce (tao_yyvsp[-6].etval);

              if (result == 0)
                {
                  idl_global->err ()->coercion_error (tao_yyvsp[0].exval, 
                                                      tao_yyvsp[-6].etval);
                }
              else 
                {
                  c = 
                    idl_global->gen ()->create_constant (
                                            tao_yyvsp[-6].etval,
                                            tao_yyvsp[0].exval, 
                                            &n
                                          );
                  (void) s->fe_add_constant (c);
                  delete result;
                }
              
              tao_yyvsp[-4].idval->destroy ();
              delete tao_yyvsp[-4].idval;
              tao_yyvsp[-4].idval = 0;
            }
        }
break;
case 116:
{
/* const_type*/
/*      : integer_type*/
/*      | char_type*/
/*      | octet_type*/
/*      | boolean_type*/
/*      | floating_pt_type*/
/*      | fixed_type*/
/*      | string_type_spec*/
          tao_yyval.etval = AST_Expression::EV_string;
        }
break;
case 117:
{
/*      | wstring_type_spec*/
          tao_yyval.etval = AST_Expression::EV_wstring;
        }
break;
case 118:
{
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_PredefinedType *c = 0;
          AST_Typedef *t = 0;

          /*
           * If the constant's type is a scoped name, it must resolve
           * to a scalar constant type
           */
          AST_Decl *d = 
            s->lookup_by_name (tao_yyvsp[0].idlist, 
                               I_TRUE);

          if (s != 0  && d != 0) 
            {
              /*
               * Look through typedefs.
               */
              while (d->node_type () == AST_Decl::NT_typedef) 
                {
                  t = AST_Typedef::narrow_from_decl (d);

                  if (t == 0)
                    {
                      break;
                    }

                  d = t->base_type ();
                }

              if (d == 0)
                {
                  tao_yyval.etval = AST_Expression::EV_enum;
                }
              else if (d->node_type () == AST_Decl::NT_pre_defined) 
                {
                  c = AST_PredefinedType::narrow_from_decl (d);

                  if (c != 0) 
                    {
                      tao_yyval.etval = idl_global->PredefinedTypeToExprType (c->pt ());
                    } 
                  else 
                    {
                      tao_yyval.etval = AST_Expression::EV_enum;
                    }
                } 
              else if (d->node_type () == AST_Decl::NT_string) 
                {
                  tao_yyval.etval = AST_Expression::EV_string;
                } 
              else if (d->node_type () == AST_Decl::NT_wstring) 
                {
                  tao_yyval.etval = AST_Expression::EV_wstring;
                } 
              else
                {
                  tao_yyval.etval = AST_Expression::EV_enum;
                }
            } 
          else
            {
              tao_yyval.etval = AST_Expression::EV_enum;
            }
        }
break;
case 122:
{
/* or_expr : xor_expr*/
/*      | or_expr '|' xor_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_or, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 124:
{
/* xor_expr : and_expr*/
/*      | xor_expr '^' and_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_xor, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 126:
{
/* and_expr : shift_expr | and_expr '&' shift_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_and, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 128:
{
/* shift_expr : add_expr | shift_expr IDL_LEFT_SHIFT add_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_left, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 129:
{
/*      | shift_expr IDL_RIGHT_SHIFT add_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_right, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 131:
{
/* add_expr : mult_expr | add_expr '+' mult_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_add, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 132:
{
/*      | add_expr '-' mult_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_minus, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 134:
{
/* mult_expr : unary_expr | mult_expr '*' unary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_mul, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 135:
{
/*      | mult_expr '/' unary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_div, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 136:
{
/*      | mult_expr '%' unary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_mod, 
                                    tao_yyvsp[-2].exval, 
                                    tao_yyvsp[0].exval
                                  );
        }
break;
case 138:
{
/* unary_expr : primary_expr | '+' primary_expr*/
          tao_yyval.exval = 
            idl_global->gen ()->create_expr (
                                    AST_Expression::EC_u_plus,
                                    tao_yyvsp[0].exval,
                                    0
                                  );
        }
break;
case 139:
{
/*      | '-' primary_expr*/
          tao_yyval.exval = 
            idl_global->gen()->create_expr (
                                   AST_Expression::EC_u_minus,
                                   tao_yyvsp[0].exval,
                                   0
                                 );
        }
break;
case 140:
{
/*      | '~' primary_expr*/
          tao_yyval.exval = 
            idl_global->gen()->create_expr (
                                   AST_Expression::EC_bit_neg,
                                   tao_yyvsp[0].exval,
                                   0
                                 );
        }
break;
case 141:
{
/* primary_expr : scoped_name*/
          /*
           * An expression which is a scoped name is not resolved now,
           * but only when it is evaluated (such as when it is assigned
           * as a constant value).
           */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[0].idlist,
                                            1);

          /*
           * If the scoped name is an IDL constant, it may be used in an
           * array dim, a string bound, or a sequence bound. If so, it 
           * must be unsigned and > 0. We assign the constant's value
           * and type to the expression created here so we can check 
           * them later.
           */
          if (d != 0 && d->node_type () == AST_Decl::NT_const)
            {
              AST_Constant *c = AST_Constant::narrow_from_decl (d);
              tao_yyval.exval = idl_global->gen ()->create_expr (c->constant_value (),
                                                    c->et ());
            }
          else
            {
              tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].idlist);
            }
        }
break;
case 143:
{
/*      | literal*/
/*      | '(' const_expr ')'*/
          tao_yyval.exval = tao_yyvsp[-1].exval;
        }
break;
case 144:
{
/* literal : IDL_INTEGER_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].ival);
        }
break;
case 145:
{
/*      | IDL_UINTEGER_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].uival);
        }
break;
case 146:
{
/*      | IDL_STRING_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].sval);
        }
break;
case 147:
{
/*      | IDL_WSTRING_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].wsval);
        }
break;
case 148:
{
/*      | IDL_CHARACTER_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].cval);
        }
break;
case 149:
{
/*      | IDL_WCHAR_LITERAL*/
          ACE_OutputCDR::from_wchar wc (tao_yyvsp[0].wcval);
          tao_yyval.exval = idl_global->gen ()->create_expr (wc);
        }
break;
case 150:
{
/*      | IDL_FLOATING_PT_LITERAL*/
          tao_yyval.exval = idl_global->gen ()->create_expr (tao_yyvsp[0].dval);
        }
break;
case 151:
{
/*      | IDL_TRUETOK*/
          tao_yyval.exval = idl_global->gen ()->create_expr ((idl_bool) I_TRUE,
                                                AST_Expression::EV_bool);
        }
break;
case 152:
{
/*      | IDL_FALSETOK*/
          tao_yyval.exval = idl_global->gen ()->create_expr ((idl_bool) I_FALSE,
                                                AST_Expression::EV_bool);
        }
break;
case 153:
{
/* positive_int_expr : const_expr*/
          int good_expression = 1;
          tao_yyvsp[0].exval->evaluate (AST_Expression::EK_positive_int);
          AST_Expression::AST_ExprValue *ev = tao_yyvsp[0].exval->ev ();

          /*
           * If const_expr is an enum value (AST_EnumVal inherits from
           * AST_Constant), the AST_ExprValue will probably not be set,
           * but there's no need to check anyway
           */
          if (ev != 0)
            {
              switch (ev->et)
              {
                case AST_Expression::EV_ushort:
                  if (ev->u.usval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_ulong:
                  if (ev->u.ulval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_ulonglong:
                  if (ev->u.ullval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_octet:
                  if (ev->u.oval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                case AST_Expression::EV_bool:
                  if (ev->u.bval == 0)
                    {
                      good_expression = 0;
                    }

                  break;
                default:
                  good_expression = 0;
                  break;
              }
            }

          if (good_expression)
            {
              tao_yyval.exval = 
                idl_global->gen()->create_expr (tao_yyvsp[0].exval, 
                                                AST_Expression::EV_ulong);
            }
          else
            {
              idl_global->err ()->syntax_error (idl_global->parse_state ());
            }
        }
break;
case 154:
{
/* type_dcl : IDL_TYPEDEF*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypedefSeen);
        }
break;
case 155:
{ 
/*      type_declarator */
          tao_yyval.ival = 0; 
        }
break;
case 156:
{ 
/*      | struct_type */
          tao_yyval.ival = 0;
        }
break;
case 157:
{ 
/*      | union_type */
          tao_yyval.ival = 0;
        }
break;
case 158:
{ 
/*      | enum_type */
          tao_yyval.ival = 0;
        }
break;
case 159:
{
/*      | IDL_NATIVE simple_declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Native *node = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_NativeSeen);

          /*
           * Create a node representing a Native and add it to its
           * enclosing scope
           */
          if (s != 0) 
            {
              node = 
                idl_global->gen ()->create_native (
                                        tao_yyvsp[0].deval->name ()
                                      );
              /*
               * Add it to its defining scope
               */
              (void) s->fe_add_native (node);
            }
        }
break;
case 160:
{
/*      | constructed_forward_type_spec*/
          tao_yyval.ival = 0;
        }
break;
case 161:
{
/* type_declarator : type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_TypeSpecSeen);
        }
break;
case 162:
{
/*      at_least_one_declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          FE_Declarator *d = 0;
          AST_Typedef *t = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclaratorsSeen);

          /*
           * Create a list of type renamings. Add them to the
           * enclosing scope
           */
          if (s != 0 && tao_yyvsp[-2].dcval != 0 && tao_yyvsp[0].dlval != 0) 
            {
              for (UTL_DecllistActiveIterator l (tao_yyvsp[0].dlval); 
                   !l.is_done (); 
                   l.next ()) 
                {
                  d = l.item ();

                  if (d == 0)
                    {
                        continue;
                    }

                  AST_Type * tp = d->compose (tao_yyvsp[-2].dcval);

                  if (tp == 0)
                    {
                      continue;
                    }

                  t = idl_global->gen ()->create_typedef (tp, 
                                                          d->name (),
                                                          s->is_local (),
                                                          s->is_abstract ());
                  (void) s->fe_add_typedef (t);
                }

              /* This FE_Declarator class isn't destroyed with the AST.*/
              tao_yyvsp[0].dlval->destroy ();
              delete tao_yyvsp[0].dlval;
              tao_yyvsp[0].dlval = 0;
            }
        }
break;
case 165:
{
/* simple_type_spec : base_type_spec*/
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 167:
{
/*      | template_type_spec*/
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = 0;

          if (s != 0)
            {
              d = s->lookup_by_name (tao_yyvsp[0].idlist, 
                                     I_TRUE);
            }

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[0].idlist);
            }

          tao_yyval.dcval = d;
        }
break;
case 184:
{
/* at_least_one_declarator : declarator declarators*/
          ACE_NEW_RETURN (tao_yyval.dlval,
                          UTL_DeclList (tao_yyvsp[-1].deval,
                                        tao_yyvsp[0].dlval),
                          1);
        }
break;
case 185:
{
/* declarators : declarators ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsCommaSeen);
        }
break;
case 186:
{
/*      declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsDeclSeen);

          if (tao_yyvsp[-3].dlval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.dlval,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);               
            }
          else 
            {
              UTL_DeclList *dl = 0;
              ACE_NEW_RETURN (dl,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);
              tao_yyvsp[-3].dlval->nconc (dl);
              tao_yyval.dlval = tao_yyvsp[-3].dlval;
            }
        }
break;
case 187:
{
/*      | /* EMPTY * /*/
          tao_yyval.dlval = 0;
        }
break;
case 190:
{
/* at_least_one_simple_declarator : simple_declarator simple_declarators*/
          ACE_NEW_RETURN (tao_yyval.dlval,
                          UTL_DeclList (tao_yyvsp[-1].deval,
                                        tao_yyvsp[0].dlval),
                          1);
        }
break;
case 191:
{
/* simple_declarators : simple_declarators ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsCommaSeen);
        }
break;
case 192:
{
/*      simple_declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DeclsDeclSeen);

          if (tao_yyvsp[-3].dlval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.dlval,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);
            }
          else 
            {
              UTL_DeclList *dl = 0;
              ACE_NEW_RETURN (dl,
                              UTL_DeclList (tao_yyvsp[0].deval,
                                            0),
                              1);
              tao_yyvsp[-3].dlval->nconc (dl);
              tao_yyval.dlval = tao_yyvsp[-3].dlval;
            }
        }
break;
case 193:
{
/*      | /* EMPTY * /*/
          tao_yyval.dlval = 0;
        }
break;
case 194:
{
/* simple_declarator : id*/
          UTL_ScopedName *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_ScopedName (tao_yyvsp[0].idval,
                                          0),
                          1);
          ACE_NEW_RETURN (tao_yyval.deval,
                          FE_Declarator (sn,
                                         FE_Declarator::FD_simple,
                                         0),
                          1);
        }
break;
case 195:
{
/* complex_declarator : array_declarator*/
          UTL_ScopedName *sn = 0;
          ACE_NEW_RETURN (sn,
                          UTL_ScopedName (
                              tao_yyvsp[0].dcval->local_name ()->copy (),
                              0
                            ),
                          1);
          ACE_NEW_RETURN (tao_yyval.deval,
                          FE_Declarator (sn,
                                         FE_Declarator::FD_complex,
                                         tao_yyvsp[0].dcval),
                          1);
        }
break;
case 198:
{
/* signed_int : IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_long;
        }
break;
case 199:
{
/*      | IDL_LONG IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_longlong;
        }
break;
case 200:
{
/*      | IDL_SHORT*/
          tao_yyval.etval = AST_Expression::EV_short;
        }
break;
case 201:
{
/* unsigned_int : IDL_UNSIGNED IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_ulong;
        }
break;
case 202:
{
/*      | IDL_UNSIGNED IDL_LONG IDL_LONG*/
          tao_yyval.etval = AST_Expression::EV_ulonglong;
        }
break;
case 203:
{
/*      | IDL_UNSIGNED IDL_SHORT*/
          tao_yyval.etval = AST_Expression::EV_ushort;
        }
break;
case 204:
{
/* floating_pt_type : IDL_DOUBLE*/
          tao_yyval.etval = AST_Expression::EV_double;
        }
break;
case 205:
{
/*      | IDL_FLOAT*/
          tao_yyval.etval = AST_Expression::EV_float;
        }
break;
case 206:
{
/*      | IDL_LONG IDL_DOUBLE*/
          tao_yyval.etval = AST_Expression::EV_longdouble;
        }
break;
case 207:
{
/* fixed_type : IDL_FIXED*/
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("error in %s line %d\n"),
                      idl_global->filename ()->get_string (),
                      idl_global->lineno ()));
          ACE_DEBUG ((LM_DEBUG,
                      ACE_TEXT ("Sorry, I (TAO_IDL) can't handle")
                      ACE_TEXT (" fixed types yet\n")));
        }
break;
case 208:
{
/* char_type : IDL_CHAR*/
          tao_yyval.etval = AST_Expression::EV_char;
        }
break;
case 209:
{
/*      | IDL_WCHAR*/
          tao_yyval.etval = AST_Expression::EV_wchar;
        }
break;
case 210:
{
/* octet_type : IDL_OCTET*/
          tao_yyval.etval = AST_Expression::EV_octet;
        }
break;
case 211:
{
/* boolean_type : IDL_BOOLEAN*/
          tao_yyval.etval = AST_Expression::EV_bool;
        }
break;
case 212:
{
/* any_type : IDL_ANY*/
          tao_yyval.etval = AST_Expression::EV_any;
        }
break;
case 213:
{
/* object_type : IDL_OBJECT*/
          tao_yyval.etval = AST_Expression::EV_object;
        }
break;
case 214:
{
/* struct_decl : IDL_STRUCT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructSeen);
        }
break;
case 215:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructIDSeen);
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 216:
{
/* struct_type : struct_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_Structure *d = 0;

          /*
           * Create a node representing a struct declaration. Add it
           * to the enclosing scope
           */
          if (s != 0) 
            {
              d = 
                idl_global->gen ()->create_structure (
                                        &n,
                                        s->is_local (),
                                        s->is_abstract ()
                                      );
              (void) s->fe_add_structure (d);
            }

          /*
           * Push the scope of the struct on the scopes stack.
           */
          idl_global->scopes ().push (d);
        }
break;
case 217:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructSqSeen);
        }
break;
case 218:
{
/*      at_least_one_member*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructBodySeen);
        }
break;
case 219:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StructQsSeen);

          /*
           * Done with this struct. Pop its scope off the scopes stack.
           */
          tao_yyval.dcval = AST_Structure::narrow_from_scope (
                   idl_global->scopes ().top_non_null ()
                 );
          idl_global->scopes ().pop ();
        }
break;
case 223:
{
/* member  :*/
          /* is $0 to member_i */
          tao_yyval.vival = AST_Field::vis_NA;
        }
break;
case 225:
{
/* member_i : type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_MemberTypeSeen);
        }
break;
case 226:
{
/*      at_least_one_declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_MemberDeclsSeen);
        }
break;
case 227:
{
/*      ';'*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          FE_Declarator *d = 0;
          AST_Field *f = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_MemberDeclsCompleted);

          /*
           * Check for illegal recursive use of type.
           */
          if (tao_yyvsp[-4].dcval != 0 
              && AST_illegal_recursive_type (tao_yyvsp[-4].dcval))
            {
              idl_global->err ()->error1 (UTL_Error::EIDL_RECURSIVE_TYPE, 
                                          tao_yyvsp[-4].dcval);
            }
          /*
           * Create a node representing a struct or exception member
           * Add it to the enclosing scope.
           */
          else if (s != 0 
                   && tao_yyvsp[-4].dcval != 0 
                   && tao_yyvsp[-2].dlval != 0) 
            {
              for (UTL_DecllistActiveIterator l (tao_yyvsp[-2].dlval); 
                   !l.is_done (); 
                   l.next ()) 
                {
                  d = l.item ();

                  if (d == 0)
                    {
                      continue;
                    }

                  AST_Type *tp = d->compose (tao_yyvsp[-4].dcval);

                  if (tp == 0)
                    {
                      continue;
                    }

                  /* $0 denotes Visibility, must be on yacc reduction stack. */
                  f = 
                    idl_global->gen ()->create_field (
                                            tp, 
                                            d->name (), 
                                            tao_yyvsp[-5].vival
                                          );
                  (void) s->fe_add_field (f);
                }
            }
        }
break;
case 228:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state ());
        }
break;
case 229:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 230:
{
/* union_decl : IDL_UNION*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionSeen);
        }
break;
case 231:
{
/*      id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionIDSeen);
          tao_yyval.idval = tao_yyvsp[0].idval;
        }
break;
case 232:
{
/* union_type : union_decl IDL_SWITCH*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchSeen);
        }
break;
case 233:
{
/*      '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchOpenParSeen);
        }
break;
case 234:
{
/*      switch_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchTypeSeen);
        }
break;
case 235:
{
/*      ')'*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[-7].idval, 
                            0);
          AST_Union *u = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_SwitchCloseParSeen);

          /*
           * Create a node representing a union. Add it to its enclosing
           * scope.
           */
          if (tao_yyvsp[-2].dcval != 0 
              && s != 0) 
            {
              AST_ConcreteType *tp = 
                AST_ConcreteType::narrow_from_decl (tao_yyvsp[-2].dcval);

              if (tp == 0) 
                {
                  idl_global->err ()->not_a_type (tao_yyvsp[-2].dcval);
                } 
              else 
                {
                  u = idl_global->gen ()->create_union (tp,
                                                        &n,
                                                        s->is_local (),
                                                        s->is_abstract ());
                }

                (void) s->fe_add_union (u);
            }

          /*
           * Push the scope of the union on the scopes stack
           */
          idl_global->scopes ().push (u);
        }
break;
case 236:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionSqSeen);
        }
break;
case 237:
{
/*      at_least_one_case_branch*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionBodySeen);
        }
break;
case 238:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionQsSeen);

          /*
           * Done with this union. Pop its scope from the scopes stack.
           */
          tao_yyval.dcval = AST_Union::narrow_from_scope (
                   idl_global->scopes ().top_non_null ()
                 );

          if (tao_yyval.dcval != 0)
            {
              idl_global->scopes ().pop ();
            }
        }
break;
case 239:
{
/* switch_type_spec : integer_type*/
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 240:
{
/*      | char_type*/
          /* wchars are not allowed. */
          if (tao_yyvsp[0].etval == AST_Expression::EV_wchar)
            {
              idl_global->err ()->error0 (UTL_Error::EIDL_DISC_TYPE);
            }

          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 241:
{
/*      | octet_type*/
          /* octets are not allowed. */
          idl_global->err ()->error0 (UTL_Error::EIDL_DISC_TYPE);
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 242:
{
/*      | boolean_type*/
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 244:
{
/*      | enum_type*/
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = 0;
          AST_PredefinedType *p = 0;
          AST_Typedef *t = 0;
          idl_bool found = I_FALSE;

          /*
           * The discriminator is a scoped name. Try to resolve to
           * one of the scalar types or to an enum. Thread through
           * typedef's to arrive at the base type at the end of the
           * chain.
           */
          d = s->lookup_by_name (tao_yyvsp[0].idlist, 
                                 I_TRUE);

          if (s != 0 && d != 0) 
            {
              while (!found) 
                {
                  switch (d->node_type ()) 
                  {
                    case AST_Decl::NT_enum:
                      tao_yyval.dcval = d;
                      found = I_TRUE;
                      break;
                    case AST_Decl::NT_pre_defined:
                      p = AST_PredefinedType::narrow_from_decl (d);

                      if (p != 0) 
                        {
                          switch (p->pt ()) 
                          {
                            case AST_PredefinedType::PT_long:
                            case AST_PredefinedType::PT_ulong:
                            case AST_PredefinedType::PT_longlong:
                            case AST_PredefinedType::PT_ulonglong:
                            case AST_PredefinedType::PT_short:
                            case AST_PredefinedType::PT_ushort:
                            case AST_PredefinedType::PT_char:
                            case AST_PredefinedType::PT_boolean:
                              tao_yyval.dcval = p;
                              found = I_TRUE;
                              break;
                            case AST_PredefinedType::PT_wchar:
                            case AST_PredefinedType::PT_octet:
                              /* octets and wchars are not allowed */
                              idl_global->err ()->error0 (
                                  UTL_Error::EIDL_DISC_TYPE
                                );
                              tao_yyval.dcval = 0;
                              found = I_TRUE;
                              break;
                            default:
                              tao_yyval.dcval = 0;
                              found = I_TRUE;
                              break;
                          }
                        } 
                      else
                        {
                          tao_yyval.dcval = 0;
                          found = I_TRUE;
                        }

                      break;
                    case AST_Decl::NT_typedef:
                      t = AST_Typedef::narrow_from_decl (d);

                      if (t != 0) 
                        {
                          d = t->base_type ();
                        }

                      break;
                    default:
                      tao_yyval.dcval = 0;
                      found = I_TRUE;
                      break;
                  }
                }
            } 
          else
            {
              tao_yyval.dcval = 0;
            }

          if (tao_yyval.dcval == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[0].idlist);
            }
        }
break;
case 248:
{
/* case_branch : at_least_one_case_label*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionLabelSeen);
        }
break;
case 249:
{
/*      element_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemSeen);
        }
break;
case 250:
{
/*      ';'*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_UnionBranch *b = 0;
          AST_Field *f = tao_yyvsp[-2].ffval;
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemCompleted);

          /*
           * Create several nodes representing branches of a union.
           * Add them to the enclosing scope (the union scope)
           */
          if (s != 0 
              &&  tao_yyvsp[-4].llval != 0 
              && tao_yyvsp[-2].ffval != 0) 
            {
              b = 
                idl_global->gen ()->create_union_branch (
                                        tao_yyvsp[-4].llval,
                                        f->field_type (),
                                        f->name ()
                                      );
              (void) s->fe_add_union_branch (b);
            }
        }
break;
case 251:
{
/*      | error*/
          idl_global->err()->syntax_error (idl_global->parse_state());
        }
break;
case 252:
{
/*      ';'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_NoState);
          tao_yyerrok;
        }
break;
case 253:
{
/* at_least_one_case_label : case_label case_labels*/
          ACE_NEW_RETURN (tao_yyval.llval,
                          UTL_LabelList (tao_yyvsp[-1].ulval, 
                                         tao_yyvsp[0].llval),
                          1);
        }
break;
case 254:
{
/* case_labels : case_labels case_label*/
          if (tao_yyvsp[-1].llval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.llval,
                              UTL_LabelList (tao_yyvsp[0].ulval,
                                             0),
                              1);
            }
          else 
            {
              UTL_LabelList *ll = 0;
              ACE_NEW_RETURN (ll,
                              UTL_LabelList (tao_yyvsp[0].ulval,
                                             0),
                              1);
              tao_yyvsp[-1].llval->nconc (ll);
              tao_yyval.llval = tao_yyvsp[-1].llval;
            }
        }
break;
case 255:
{
/*      | /* EMPTY * /*/
          tao_yyval.llval = 0;
        }
break;
case 256:
{
/* case_label : IDL_DEFAULT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DefaultSeen);
        }
break;
case 257:
{
/*      ':'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_LabelColonSeen);

          tao_yyval.ulval = idl_global->gen ()->create_union_label (
                                       AST_UnionLabel::UL_default,
                                       0
                                     );
        }
break;
case 258:
{
/*      | IDL_CASE*/
          idl_global->set_parse_state (IDL_GlobalData::PS_CaseSeen);
        }
break;
case 259:
{
          idl_global->set_parse_state (IDL_GlobalData::PS_LabelExprSeen);
        }
break;
case 260:
{
/*      const_expr*/
          idl_global->set_parse_state (IDL_GlobalData::PS_LabelColonSeen);

          tao_yyval.ulval = idl_global->gen()->create_union_label (
                                      AST_UnionLabel::UL_label,
                                      tao_yyvsp[-2].exval
                                    );
        }
break;
case 261:
{
/* element_spec : type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemTypeSeen);
        }
break;
case 262:
{
/*      declarator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_UnionElemDeclSeen);

          /*
           * Check for illegal recursive use of type
           */
          if (tao_yyvsp[-2].dcval != 0 
              && AST_illegal_recursive_type (tao_yyvsp[-2].dcval))
            {
            idl_global->err()->error1 (UTL_Error::EIDL_RECURSIVE_TYPE, 
                                       tao_yyvsp[-2].dcval);
            }
          /*
           * Create a field in a union branch
           */
          else if (tao_yyvsp[-2].dcval == 0 
                   || tao_yyvsp[0].deval == 0)
            {
              tao_yyval.ffval = 0;
            }
          else 
            {
              AST_Type *tp = tao_yyvsp[0].deval->compose (tao_yyvsp[-2].dcval);

              if (tp == 0)
                {
                  tao_yyval.ffval = 0;
                }
              else
                {
                  tao_yyval.ffval = idl_global->gen ()->create_field (
                                               tp,
                                               tao_yyvsp[0].deval->name ()
                                             );
                }
            }
        }
break;
case 263:
{
/* struct_forward_type : struct_header*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_StructureFwd *d = 0;

          /*
           * Create a node representing a forward declaration of a struct.
           */
          if (s != 0) 
            {
              d = idl_global->gen ()->create_structure_fwd (&n);
              (void) s->fe_add_structure_fwd (d);
            }
        }
break;
case 264:
{
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_UnionFwd *u = 0;

          /*
           * Create a node representing a forward declaration of a union.
           */
          if (s != 0) 
            {
              u = idl_global->gen ()->create_union_fwd (&n);
              (void) s->fe_add_union_fwd (u);
            }
        }
break;
case 265:
{
/* enum_type : IDL_ENUM*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumSeen);
        }
break;
case 266:
{
/*      id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                             0);
          AST_Enum *e = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumIDSeen);

          /*
           * Create a node representing an enum and add it to its
           * enclosing scope.
           */
          if (s != 0) 
            {
              e = idl_global->gen ()->create_enum (&n,
                                                   s->is_local (),
                                                   s->is_abstract ());
              /*
               * Add it to its defining scope
               */
              (void) s->fe_add_enum (e);
            }

          /*
           * Push the enum scope on the scopes stack.
           */
          idl_global->scopes ().push (e);
        }
break;
case 267:
{
/*      '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumSqSeen);
        }
break;
case 268:
{
/*      at_least_one_enumerator*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumBodySeen);
        }
break;
case 269:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumQsSeen);

          /*
           * Done with this enum. Pop its scope from the scopes stack.
           */
          if (idl_global->scopes ().top () == 0)
            {
              tao_yyval.dcval = 0;
            }
          else 
            {
              tao_yyval.dcval = AST_Enum::narrow_from_scope (
                       idl_global->scopes ().top_non_null ()
                     );
              idl_global->scopes ().pop ();
            }
        }
break;
case 271:
{
/* enumerators : enumerators ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_EnumCommaSeen);
        }
break;
case 274:
{
/* enumerator : IDENTIFIER*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          Identifier id (tao_yyvsp[0].strval);
          UTL_ScopedName n (&id, 
                            0);
          AST_EnumVal *e = 0;
          AST_Enum *c = 0;

          /*
           * Create a node representing one enumerator in an enum
           * Add it to the enclosing scope (the enum scope)
           */
          if (s != 0 
              && s->scope_node_type () == AST_Decl::NT_enum) 
            {
              c = AST_Enum::narrow_from_scope (s);

              if (c != 0)
                {
                  e = idl_global->gen ()->create_enum_val (
                                              c->next_enum_val (), 
                                              &n
                                            );
                }

              (void) s->fe_add_enum_val (e);
            }
        }
break;
case 275:
{
/* sequence_type_spec : seq_head ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceCommaSeen);
        }
break;
case 276:
{
/*      positive_int_expr*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceExprSeen);
        }
break;
case 277:
{
/*      '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceQsSeen);

          /*
           * Remove sequence marker from scopes stack.
           */
          if (idl_global->scopes ().top() == 0)
            {
              idl_global->scopes ().pop ();
            }

          UTL_Scope *s = idl_global->scopes ().top_non_null ();

          /*
           * Create a node representing a sequence
           */
          if (tao_yyvsp[-2].exval == 0 || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.dcval = 0;
            } 
          else if (tao_yyvsp[-5].dcval == 0) 
            {
              tao_yyval.dcval = 0;
            } 
          else 
            {
              AST_Type *tp = AST_Type::narrow_from_decl (tao_yyvsp[-5].dcval);

              if (tp == 0)
                {
                  ; /* Error will be caught in FE_Declarator.*/
                }
              else 
                {
                  Identifier id ("sequence");
                  UTL_ScopedName sn (&id,
                                     0);

                  tao_yyval.dcval = 
                    idl_global->gen ()->create_sequence (
                                            tao_yyvsp[-2].exval,
                                            tp,
                                            &sn,
                                            s->is_local (),
                                            s->is_abstract ()
                                          );
                }
            }
        }
break;
case 278:
{
/*      | seq_head '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceQsSeen);

          /*
           * Remove sequence marker from scopes stack.
           */
          if (idl_global->scopes ().top () == 0)
            {
             idl_global->scopes ().pop ();
            }

          UTL_Scope *s = idl_global->scopes ().top_non_null ();

          /*
           * Create a node representing a sequence.
           */
          if (tao_yyvsp[-1].dcval == 0)
            {
              tao_yyval.dcval = 0;
            }
          else 
            {
              AST_Type *tp = AST_Type::narrow_from_decl (tao_yyvsp[-1].dcval);
                
              if (tp == 0)
                {
                  ; /* Error will be caught in FE_Declarator.*/
                }
              else 
                {
                  Identifier id ("sequence");
                  UTL_ScopedName sn (&id,
                                     0);

                  tao_yyval.dcval =
                    idl_global->gen ()->create_sequence (
                        idl_global->gen ()->create_expr ((unsigned long) 0),
                        tp,
                        &sn,
                        s->is_local (),
                        s->is_abstract ()
                      );
                }
            }
        }
break;
case 279:
{
/* seq_head : IDL_SEQUENCE*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceSeen);

          /*
           * Push a sequence marker on scopes stack.
           */
          idl_global->scopes ().push (0);
        }
break;
case 280:
{
/*      '<'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceSqSeen);
        }
break;
case 281:
{
/*      simple_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_SequenceTypeSeen);
          tao_yyval.dcval = tao_yyvsp[0].dcval;
        }
break;
case 282:
{
/* string_type_spec : string_head '<'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSqSeen);
        }
break;
case 283:
{
/*      positive_int_expr*/
           idl_global->set_parse_state (IDL_GlobalData::PS_StringExprSeen);
        }
break;
case 284:
{
/*      '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringQsSeen);

          /*
           * Create a node representing a string.
           */
          if (tao_yyvsp[-2].exval == 0 
              || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.dcval = 0;
            } 
          else 
            {
              tao_yyval.dcval = idl_global->gen ()->create_string (tao_yyvsp[-2].exval);
              /*
               * Add this AST_String to the types defined in the global scope.
               */
              (void) idl_global->root ()->fe_add_string (
                                              AST_String::narrow_from_decl (
                                                  tao_yyval.dcval
                                                )
                                            );
            }
        }
break;
case 285:
{
/*      | string_head*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringCompleted);
          /*
           * Create a node representing a string.
           */
          tao_yyval.dcval =
            idl_global->gen ()->create_string (
                idl_global->gen ()->create_expr ((unsigned long) 0)
              );
          /*
           * Add this AST_String to the types defined in the global scope.
           */
          (void) idl_global->root ()->fe_add_string (
                                          AST_String::narrow_from_decl (
                                              tao_yyval.dcval
                                            )
                                        );
        }
break;
case 286:
{
/* string_head : IDL_STRING*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSeen);
        }
break;
case 287:
{
/* wstring_type_spec : wstring_head '<'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSqSeen);
        }
break;
case 288:
{
/*      positive_int_expr*/
           idl_global->set_parse_state (IDL_GlobalData::PS_StringExprSeen);
        }
break;
case 289:
{
/*      '>'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringQsSeen);

          /*
           * Create a node representing a string.
           */
          if (tao_yyvsp[-2].exval == 0 
              || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.dcval = 0;
            } 
          else 
            {
              tao_yyval.dcval = idl_global->gen ()->create_wstring (tao_yyvsp[-2].exval);
              /*
               * Add this AST_String to the types defined in the global scope.
               */
              (void) idl_global->root ()->fe_add_string (
                                              AST_String::narrow_from_decl (tao_yyval.dcval)
                                            );
            }
        }
break;
case 290:
{
/*      | wstring_head*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringCompleted);

          /*
           * Create a node representing a wstring.
           */
          tao_yyval.dcval =
            idl_global->gen ()->create_wstring (
                idl_global->gen ()->create_expr ((unsigned long) 0)
              );
          /*
           * Add this AST_String to the types defined in the global scope.
           */
          (void) idl_global->root ()->fe_add_string (
                                          AST_String::narrow_from_decl (tao_yyval.dcval)
                                        );
        }
break;
case 291:
{
/* wstring_head : IDL_WSTRING*/
          idl_global->set_parse_state (IDL_GlobalData::PS_StringSeen);
        }
break;
case 292:
{
/* array_declarator : id*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ArrayIDSeen);
        }
break;
case 293:
{
/*      at_least_one_array_dim*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ArrayCompleted);

          /*
           * Create a node representing an array.
           */
          if (tao_yyvsp[0].elval != 0) 
            {
              UTL_ScopedName sn (tao_yyvsp[-2].idval,
                                 0);
              tao_yyval.dcval = 
                idl_global->gen ()->create_array (
                                        &sn,
                                        tao_yyvsp[0].elval->length (), 
                                        tao_yyvsp[0].elval, 
                                        0, 
                                        0
                                      );
            }
        }
break;
case 294:
{
/* at_least_one_array_dim : array_dim array_dims*/
          ACE_NEW_RETURN (tao_yyval.elval,
                          UTL_ExprList (tao_yyvsp[-1].exval,
                                        tao_yyvsp[0].elval),
                          1);
        }
break;
case 295:
{
/* array_dims : array_dims array_dim*/
          if (tao_yyvsp[-1].elval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.elval,
                              UTL_ExprList (tao_yyvsp[0].exval,
                                            0),
                              1);
            }
          else 
            {
              UTL_ExprList *el = 0;
              ACE_NEW_RETURN (el,
                              UTL_ExprList (tao_yyvsp[0].exval,
                                            0),
                              1);
              tao_yyvsp[-1].elval->nconc (el);
              tao_yyval.elval = tao_yyvsp[-1].elval;
            }
        }
break;
case 296:
{
/*      | /* EMPTY * /*/
          tao_yyval.elval = 0;
        }
break;
case 297:
{
/* array_dim : '['*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DimSqSeen);
        }
break;
case 298:
{
/*      positive_int_expr*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DimExprSeen);
        }
break;
case 299:
{
/*      ']'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_DimQsSeen);

          /*
           * Array dimensions are expressions which must be coerced to
           * positive integers.
           */
          if (tao_yyvsp[-2].exval == 0 
              || tao_yyvsp[-2].exval->coerce (AST_Expression::EV_ulong) == 0) 
            {
              idl_global->err ()->coercion_error (tao_yyvsp[-2].exval, 
                                                  AST_Expression::EV_ulong);
              tao_yyval.exval = 0;
            } 
          else
            {
              tao_yyval.exval = tao_yyvsp[-2].exval;
            }
        }
break;
case 300:
{
/* attribute : opt_readonly IDL_ATTRIBUTE*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrSeen);
        }
break;
case 301:
{
/*      param_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrTypeSeen);
        }
break;
case 302:
{
/*      at_least_one_simple_declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Attribute *a = 0;
          FE_Declarator *d = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrCompleted);

          /*
           * Create nodes representing attributes and add them to the
           * enclosing scope.
           */
          if (s != 0 
              && tao_yyvsp[-2].dcval != 0 
              && tao_yyvsp[0].dlval != 0) 
            {
              for (UTL_DecllistActiveIterator l (tao_yyvsp[0].dlval); 
                   !l.is_done (); 
                   l.next ()) 
                {
                  d = l.item ();

                  if (d == 0)
                    {
                      continue;
                    }

                  AST_Type *tp = d->compose (tao_yyvsp[-2].dcval);

                  if (tp == 0)
                    {
                      continue;
                    }

                  a = 
                    idl_global->gen ()->create_attribute (
                                            tao_yyvsp[-5].bval,
                                            tp,
                                            (UTL_IdList *) d->name ()->copy (),
                                            s->is_local (),
                                            s->is_abstract ()
                                          );
                  /*
                   * Add one attribute to the enclosing scope.
                   */
                  (void) s->fe_add_attribute (a);
                }
            }
        }
break;
case 303:
{
/* opt_readonly : IDL_READONLY*/
          idl_global->set_parse_state (IDL_GlobalData::PS_AttrROSeen);
          tao_yyval.bval = I_TRUE;
        }
break;
case 304:
{
/*      | /* EMPTY * /*/
          tao_yyval.bval = I_FALSE;
        }
break;
case 305:
{
/* exception : IDL_EXCEPTION*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptSeen);
        }
break;
case 306:
{
/*      id*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          UTL_ScopedName n (tao_yyvsp[0].idval, 
                            0);
          AST_Exception *e = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptIDSeen);

          /*
           * Create a node representing an exception and add it to
           * the enclosing scope.
           */
          if (s != 0) 
            {
              e = idl_global->gen ()->create_exception (&n,
                                                        s->is_local (),
                                                        s->is_abstract ());
              (void) s->fe_add_exception (e);
            }

          /*
           * Push the exception scope on the scope stack.
           */
          idl_global->scopes ().push (e);
        }
break;
case 307:
{
/*       '{'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptSqSeen);
        }
break;
case 308:
{
/*      members*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptBodySeen);
        }
break;
case 309:
{
/*      '}'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_ExceptQsSeen);
          /*
           * Done with this exception. Pop its scope from the scope stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 310:
{
/* operation : opt_op_attribute op_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpTypeSeen);
        }
break;
case 311:
{
/*      IDENTIFIER*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          Identifier id (tao_yyvsp[0].strval);
          UTL_ScopedName n (&id, 0);
          AST_Operation *o = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpIDSeen);

          /*
           * Create a node representing an operation on an interface
           * and add it to its enclosing scope.
           */
          if (s != 0 && tao_yyvsp[-2].dcval != 0) 
            {
              AST_Type *tp = 
                AST_Type::narrow_from_decl (tao_yyvsp[-2].dcval);

              if (tp == 0) 
                {
                  idl_global->err ()->not_a_type (tao_yyvsp[-2].dcval);
                } 
              else if (tp->node_type () == AST_Decl::NT_except) 
                {
                  idl_global->err ()->not_a_type (tao_yyvsp[-2].dcval);
                } 
              else 
                {
                  o = 
                    idl_global->gen ()->create_operation (tp,
                                                          tao_yyvsp[-3].ofval,
                                                          &n,
                                                          s->is_local (),
                                                          s->is_abstract ());
                  (void) s->fe_add_operation (o);
                }
            }

           ACE_OS::free (tao_yyvsp[0].strval);
           tao_yyvsp[0].strval = 0;

          /*
           * Push the operation scope onto the scopes stack.
           */
          idl_global->scopes ().push (o);
        }
break;
case 312:
{
/*      parameter_list*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParsCompleted);
        }
break;
case 313:
{
/*      opt_raises*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseCompleted);
        }
break;
case 314:
{
/*      opt_context*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Operation *o = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpCompleted);

          /*
           * Add exceptions and context to the operation.
           */
          if (s != 0 && s->scope_node_type () == AST_Decl::NT_op) 
            {
              o = AST_Operation::narrow_from_scope (s);

              if (tao_yyvsp[-2].nlval != 0 && o != 0)
                {
                  (void) o->fe_add_exceptions (tao_yyvsp[-2].nlval);
                }

              if (tao_yyvsp[0].slval != 0)
                {
                  (void) o->fe_add_context (tao_yyvsp[0].slval);
                }
            }

          /*
           * Done with this operation. Pop its scope from the scopes stack.
           */
          idl_global->scopes ().pop ();
        }
break;
case 315:
{
/* opt_op_attribute : IDL_ONEWAY*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpAttrSeen);
          tao_yyval.ofval = AST_Operation::OP_oneway;
        }
break;
case 316:
{
/*      | IDL_IDEMPOTENT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpAttrSeen);
          tao_yyval.ofval = AST_Operation::OP_idempotent;
        }
break;
case 317:
{
/*      | /* EMPTY * /*/
          tao_yyval.ofval = AST_Operation::OP_noflags;
        }
break;
case 319:
{
/* op_type_spec : param_type_spec | IDL_VOID*/
          tao_yyval.dcval =
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                  AST_Expression::EV_void
                                                );
        }
break;
case 320:
{
/* init_decl : IDL_FACTORY */
          /*@@ PS_FactorySeen?*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpTypeSeen);
        }
break;
case 321:
{
/*      IDENTIFIER */
          UTL_Scope *s = idl_global->scopes ().top_non_null ();

          if (s->is_abstract ())
            {
              /*@@ Fire error*/
              ACE_ERROR ((LM_ERROR,
                          ACE_TEXT ("error in %s line %d:\n")
                          ACE_TEXT ("Abstract valuetype can't have a ")
                          ACE_TEXT ("factory construct.\n"),
                          idl_global->filename ()->get_string (),
                          idl_global->lineno ()));
            }   
            
          Identifier id (tao_yyvsp[0].strval);  
          UTL_ScopedName n (&id, 
                            0);
          AST_Factory *factory = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpIDSeen);

          /*
           * Create a node representing an factory construct
           * and add it to its enclosing scope
           */
          if (s != 0)
            {
              factory = idl_global->gen ()->create_factory (&n);
              (void) s->fe_add_factory (factory);
            }

          /*
           * Push the operation scope onto the scopes stack.
           */
          idl_global->scopes ().push (factory);
        }
break;
case 322:
{
/*      init_parameter_list*/
        /* TODO: replace parameter_list with rule that accepts only IN args */

          idl_global->set_parse_state (IDL_GlobalData::PS_OpParsCompleted);
          idl_global->scopes ().pop ();
        }
break;
case 323:
{
/* init_parameter_list : '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 324:
{
/*      ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 325:
{
/*      | '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 326:
{
/*      at_least_one_in_parameter ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 328:
{
/* in_parameters : in_parameters ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParCommaSeen);
        }
break;
case 331:
{
/* in_parameter : IDL_IN*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDirSeen);
        }
break;
case 332:
{
/*      param_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParTypeSeen);
        }
break;
case 333:
{
/*      declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Argument *a = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDeclSeen);

          /*
           * Create a node representing an argument to an operation
           * Add it to the enclosing scope (the operation scope).
           */
          if (tao_yyvsp[-2].dcval != 0 
              && tao_yyvsp[0].deval != 0 && 
              s != 0) 
            {
              AST_Type *tp = tao_yyvsp[0].deval->compose (tao_yyvsp[-2].dcval);

              if (tp != 0) 
                {
                  a = idl_global->gen ()->create_argument (
                          AST_Argument::dir_IN, 
                          tp, 
                          (UTL_IdList *) tao_yyvsp[0].deval->name ()->copy ()
                        );

                  (void) s->fe_add_argument (a);
                }
            }
        }
break;
case 334:
{
/* parameter_list : '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 335:
{
/*      ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 336:
{
/*      | '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpSqSeen);
        }
break;
case 337:
{
/*      at_least_one_parameter ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpQsSeen);
        }
break;
case 339:
{
/* parameters : parameters ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParCommaSeen);
        }
break;
case 342:
{
/* parameter : direction*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDirSeen);
        }
break;
case 343:
{
/*      param_type_spec*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParTypeSeen);
        }
break;
case 344:
{
/*      declarator*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Argument *a = 0;
          idl_global->set_parse_state (IDL_GlobalData::PS_OpParDeclSeen);

          /*
           * Create a node representing an argument to an operation
           * Add it to the enclosing scope (the operation scope).
           */
          if (tao_yyvsp[-2].dcval != 0 
              && tao_yyvsp[0].deval != 0 
              && s != 0) 
            {
              AST_Type *tp = tao_yyvsp[0].deval->compose (tao_yyvsp[-2].dcval);

              if (tp != 0) 
                {
                  if (!s->is_local () && tp->is_local ())
                    {
                      ACE_DEBUG ((LM_DEBUG,
                                  ACE_TEXT ("error in %s line %d\n"),
                                  idl_global->filename ()->get_string (),
                                  idl_global->lineno ()));
                      ACE_DEBUG ((LM_DEBUG,
                                  ACE_TEXT ("Cannot use a local type as an ")
                                  ACE_TEXT ("argument of a remote ")
                                  ACE_TEXT ("operation\n")));
                    }
                  else
                    {
                      a = 
                        idl_global->gen ()->create_argument (
                            tao_yyvsp[-4].dival, 
                            tp, 
                            (UTL_IdList *) tao_yyvsp[0].deval->name ()->copy ()
                          );
                      (void) s->fe_add_argument (a);
                    }
                }
            }
        }
break;
case 345:
{
/* param_type_spec : base_type_spec*/
          tao_yyval.dcval = 
            idl_global->scopes ().bottom ()->lookup_primitive_type (
                                                 tao_yyvsp[0].etval
                                               );
        }
break;
case 348:
{
/*      | string_type_spec*/
/*      | wstring_type_spec*/
/*      | scoped_name*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = 0;

          if (s != 0)
            {
              d = s->lookup_by_name (tao_yyvsp[0].idlist, 
                                     I_TRUE);
            }

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[0].idlist);
            }
          else
            {
              AST_Decl::NodeType nt = d->node_type ();

              if (nt == AST_Decl::NT_struct_fwd 
                  || nt == AST_Decl::NT_union_fwd)
                {
                  idl_global->err ()->error1 (UTL_Error::EIDL_ILLEGAL_ADD,
                                              d);

                  /* If we don't return here, we'll crash later.*/
                  return 1;
                }
            }


          tao_yyval.dcval = d;
        }
break;
case 349:
{
/* direction : IDL_IN*/
          tao_yyval.dival = AST_Argument::dir_IN;
        }
break;
case 350:
{
/*      | IDL_OUT*/
          tao_yyval.dival = AST_Argument::dir_OUT;
        }
break;
case 351:
{
/*      | IDL_INOUT*/
          tao_yyval.dival = AST_Argument::dir_INOUT;
        }
break;
case 352:
{
/* opt_raises : IDL_RAISES*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseSeen);
        }
break;
case 353:
{
/*      '('*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseSqSeen);
        }
break;
case 354:
{
/*      at_least_one_scoped_name ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpRaiseQsSeen);
          tao_yyval.nlval = tao_yyvsp[-1].nlval;
        }
break;
case 355:
{
          tao_yyval.nlval = 0;
/*      | /* EMPTY * /*/
        }
break;
case 356:
{
/* opt_context : IDL_CONTEXT*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextSeen);
        }
break;
case 357:
{
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextSqSeen);
/*      '('*/
        }
break;
case 358:
{
/*      at_least_one_string_literal ')'*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextQsSeen);
          tao_yyval.slval = tao_yyvsp[-1].slval;
        }
break;
case 359:
{
/*      | /* EMPTY * /*/
          tao_yyval.slval = 0;
        }
break;
case 360:
{
/* at_least_one_string_literal : IDL_STRING_LITERAL string_literals*/
          ACE_NEW_RETURN (tao_yyval.slval,
                         UTL_StrList (tao_yyvsp[-1].sval,
                                      tao_yyvsp[0].slval),
                         1);
        }
break;
case 361:
{
/* string_literals : string_literals ','*/
          idl_global->set_parse_state (IDL_GlobalData::PS_OpContextCommaSeen);
        }
break;
case 362:
{
/*      IDL_STRING_LITERAL*/
          if (tao_yyvsp[-3].slval == 0)
            {
              ACE_NEW_RETURN (tao_yyval.slval,
                              UTL_StrList (tao_yyvsp[0].sval,
                                           0),
                              1);
            }
          else 
            {
              UTL_StrList *sl = 0;
              ACE_NEW_RETURN (sl,
                              UTL_StrList (tao_yyvsp[0].sval,
                                           0),
                              1);
              tao_yyvsp[-3].slval->nconc (sl);
              tao_yyval.slval = tao_yyvsp[-3].slval;
            }
        }
break;
case 363:
{
/*      | /* EMPTY * /*/
          tao_yyval.slval = 0;
        }
break;
case 364:
{
/* typeid_dcl : IDL_TYPEID scoped_name IDL_STRING_LITERAL*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist, 
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
            }
          else
            {
              d->set_id_with_typeid (
                     tao_yyvsp[0].sval->get_string ()
                   );
            }
        }
break;
case 365:
{
/* typeprefix_dcl : IDL_TYPEPREFIX scoped_name IDL_STRING_LITERAL*/
          UTL_Scope *s = idl_global->scopes ().top_non_null ();
          AST_Decl *d = s->lookup_by_name (tao_yyvsp[-1].idlist, 
                                           I_TRUE);

          if (d == 0)
            {
              idl_global->err ()->lookup_error (tao_yyvsp[-1].idlist);
            }
          else
            {
              d->set_prefix_with_typeprefix (
                     tao_yyvsp[0].sval->get_string ()
                   );
            }
        }
break;
    }
    tao_yyssp -= tao_yym;
    tao_yystate = *tao_yyssp;
    tao_yyvsp -= tao_yym;
    tao_yym = tao_yylhs[tao_yyn];
    if (tao_yystate == 0 && tao_yym == 0)
    {
#ifdef TAO_YYDEBUG
        if (5 < tao_yydebug)
            printf("tao_yydebug: after reduction, shifting from state 0 to\
 state %d\n", TAO_YYFINAL);
#endif
        tao_yystate = TAO_YYFINAL;
        *++tao_yyssp = TAO_YYFINAL;
        *++tao_yyvsp = tao_yyval;
        if (tao_yychar < 0)
        {
            if ((tao_yychar = tao_yylex()) < 0) tao_yychar = 0;
#if TAO_YYDEBUG
            if (tao_yydebug)
            {
                tao_yys = 0;
                if (tao_yychar <= TAO_YYMAXTOKEN) tao_yys = tao_yyname[tao_yychar];
                if (!tao_yys) tao_yys = "illegal-symbol";
                if (5 < tao_yydebug)
                    printf("tao_yydebug: state %d, reading %d (%s)\n",
                        TAO_YYFINAL, tao_yychar, tao_yys);
                else
                    TAO_YYDEBUG_LOOK_AHEAD(TAO_YYFINAL, tao_yychar, tao_yys, tao_yyssp-tao_yyss);
            }
#endif
        }
        if (tao_yychar == 0) goto tao_yyaccept;
        goto tao_yyloop;
    }
    if ((tao_yyn = tao_yygindex[tao_yym]) && (tao_yyn += tao_yystate) >= 0 &&
            tao_yyn <= TAO_YYTABLESIZE && tao_yycheck[tao_yyn] == tao_yystate)
        tao_yystate = tao_yytable[tao_yyn];
    else
        tao_yystate = tao_yydgoto[tao_yym];
#ifdef TAO_YYDEBUG
    if (5 < tao_yydebug)
        printf("tao_yydebug: after reduction, shifting from state %d \
to state %d\n", *tao_yyssp, tao_yystate);
#endif
    if (tao_yyssp >= tao_yyss + tao_yystacksize - 1)
    {
        goto tao_yyoverflow;
    }
    *++tao_yyssp = tao_yystate;
    *++tao_yyvsp = tao_yyval;
    goto tao_yyloop;
tao_yyoverflow:
    tao_yyerror("yacc stack overflow");
tao_yyabort:
    return (1);
tao_yyaccept:
    return (0);
}
