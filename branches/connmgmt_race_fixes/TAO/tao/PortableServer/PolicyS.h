/* -*- C++ -*- */
// $Id$

// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO ORB and the TAO IDL Compiler have been developed by Washington
// University Computer Science's Distributed Object Computing Group.
//
// Information on TAO is available at
//                 http://www.cs.wustl.edu/~schmidt/TAO.html
//
//
// Modified by Jeff Parsons.
//
// ============================================================================

#ifndef TAO_IDL_POLICYS_H
#define TAO_IDL_POLICYS_H
#include "ace/pre.h"

#include "tao/corbafwd.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "Servant_Base.h"
#include "ThruPOA_Object_Proxy_Impl.h"
#include "Direct_Object_Proxy_Impl.h"
#include "tao/ORB_Core.h"
#include "tao/PolicyC.h"
#include "tao/DomainC.h"

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

class POA_CORBA_Policy;
typedef POA_CORBA_Policy *POA_CORBA_Policy_ptr;
class TAO_PortableServer_Export POA_CORBA_Policy 
  :  public virtual PortableServer::ServantBase
{
protected:
  POA_CORBA_Policy (void);

public:
  POA_CORBA_Policy (const POA_CORBA_Policy& rhs);
  virtual ~POA_CORBA_Policy (void);


  virtual CORBA::Boolean _is_a (const char *logical_type_id,
                                CORBA::Environment &ACE_TRY_ENV =
                                  TAO_default_environment ());

  virtual void *_downcast (const char *logical_type_id);

  static void _is_a_skel (TAO_ServerRequest &req,
                          void *obj,
                          void *context,
                          CORBA::Environment &ACE_TRY_ENV =
                            TAO_default_environment ());

  static void _non_existent_skel (TAO_ServerRequest &req,
                                  void *obj,
                                  void *context,
                                  CORBA::Environment &ACE_TRY_ENV =
                                    TAO_default_environment ());

  virtual void _dispatch (TAO_ServerRequest &_tao_req,
                          void *_tao_context,
                          CORBA::Environment &ACE_TRY_ENV =
                            TAO_default_environment ());

  CORBA_Policy *_this (CORBA::Environment &ACE_TRY_ENV =
                         TAO_default_environment ());

  virtual const char *_interface_repository_id (void) const;

  virtual CORBA::PolicyType policy_type (CORBA::Environment &ACE_TRY_ENV =
                                           TAO_default_environment ())
    ACE_THROW_SPEC ((CORBA::SystemException)) = 0;

  static void _get_policy_type_skel (TAO_ServerRequest &_tao_req,
                                     void *_tao_obj,
                                     void *_tao_context,
                                     CORBA::Environment &ACE_TRY_ENV =
                                       TAO_default_environment ());

  virtual CORBA_Policy_ptr copy (CORBA::Environment &ACE_TRY_ENV =
                                   TAO_default_environment ())
    ACE_THROW_SPEC ((CORBA::SystemException)) = 0;

  static void copy_skel (TAO_ServerRequest &_tao_req,
                         void *_tao_obj,
                         void *_tao_context,
                         CORBA::Environment &ACE_TRY_ENV =
                           TAO_default_environment ());

  virtual void destroy (CORBA::Environment &ACE_TRY_ENV =
                          TAO_default_environment ())
    ACE_THROW_SPEC ((CORBA::SystemException)) = 0;

  static void destroy_skel (TAO_ServerRequest &_tao_req,
                            void *_tao_obj,
                            void *_tao_context,
                            CORBA::Environment &ACE_TRY_ENV =
                              TAO_default_environment ());
};


class TAO_PortableServer_Export _tao_thru_poa_collocated_Policy
  : public virtual CORBA_Policy
{
public:
  _tao_thru_poa_collocated_Policy (TAO_Stub *stub);

  virtual CORBA::Boolean _is_a (const CORBA::Char *logical_type_id,
                                CORBA_Environment &ACE_TRY_ENV = 
                                  TAO_default_environment ());

  virtual CORBA::Boolean _non_existent (CORBA_Environment &ACE_TRY_ENV = 
                                          TAO_default_environment ());

  virtual CORBA::PolicyType policy_type (CORBA::Environment &ACE_TRY_ENV =
                                           TAO_default_environment ())
    ACE_THROW_SPEC ((CORBA::SystemException ));

  virtual CORBA_Policy_ptr copy (CORBA::Environment &ACE_TRY_ENV =
                                   TAO_default_environment ())
    ACE_THROW_SPEC ((CORBA::SystemException));

  virtual void destroy (CORBA::Environment &ACE_TRY_ENV =
                          TAO_default_environment ())
    ACE_THROW_SPEC ((CORBA::SystemException));
};

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#include "ace/post.h"
#endif /* TAO_IDL_POLICYS_H */
