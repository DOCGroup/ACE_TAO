// -*- C++ -*-
// $Id$

// ============================================================================
//
// = LIBRARY
//    TAO_LoadBalancing
//
// = FILENAME
//    LoadBalancing.idl
//
// = AUTHOR
//    Ossama Othman <ossama@uci.edu>
//
// ============================================================================

#ifndef TAO_LOADBALANCING_IDL
#define TAO_LOADBALANCING_IDL

#include "CosNaming.idl"
#include "orb.idl"

module TAO_LoadBalancing
{
  // = TITLE
  //   This module defines the interfaces and data types used in TAO's
  //   Load Balancing service.

  // = DESCRIPTION
  //     TAO's Load Balancer manages distribution of requests to
  //     replicas of a given Object in an effort to ensure that the
  //     applications/hosts pointed to by the Object reference are as
  //     equally loaded as possible, i.e. load balanced.
  //     The definition of 'load' is application specific, for
  //     example, some applications may choose to load balance access
  //     to multiple dedicated lines, or separate network interfaces,
  //     as well as more traditional load balancing metrics, such as
  //     CPU or power load.

  // Specification of Common Types and Exceptions for ReplicationManager
  interface GenericFactory;
  interface LoadNotifier;

  typedef unsigned long long ObjectGroupId;
  typedef unsigned long ObjectGroupRefVersion;

  typedef CORBA::RepositoryId TypeId;
  typedef Object ObjectGroup;
  typedef CosNaming::Name Name;
  typedef any Value;

  struct Property {
    Name nam;
    Value val;
  };
  typedef sequence<Property> Properties;

  typedef Name Location;
  typedef sequence<Location> Locations;

  typedef Properties Criteria;

  struct FactoryInfo {
    GenericFactory factory;
    Location the_location;
    Criteria the_criteria;
  };
  typedef sequence<FactoryInfo> FactoryInfos;

  exception InterfaceNotFound {};
  exception ObjectGroupNotFound {};
  exception MemberNotFound {};
  exception ObjectNotFound {};
  exception MemberAlreadyPresent {};
  exception BadReplicationStyle {};
  exception ObjectNotCreated {};
  exception ObjectNotAdded {};
  exception PrimaryNotSet {};
  exception UnsupportedProperty {
    Name nam;
  };
  exception InvalidProperty {
    Name nam;
    Value val;
  };
  exception NoFactory {
    Location the_location;
    TypeId type_id;
  };
  exception InvalidCriteria {
    Criteria invalid_criteria;
  };
  exception CannotMeetCriteria {
    Criteria unmet_criteria;
  };

  // Specification of PropertyManager Interface
  // which ReplicationManager Inherits
  interface PropertyManager {
    void set_default_properties (in Properties props)
      raises (InvalidProperty,
              UnsupportedProperty);

    Properties get_default_properties ();

    void remove_default_properties (in Properties props)
      raises (InvalidProperty,
              UnsupportedProperty);

    void set_type_properties (in TypeId type_id,
                              in Properties overrides)
      raises (InvalidProperty,
              UnsupportedProperty);

    Properties get_type_properties (in TypeId type_id);

    void remove_type_properties (in TypeId type_id,
                                 in Properties props)
      raises (InvalidProperty,
              UnsupportedProperty);

    void set_properties_dynamically (in ObjectGroup object_group,
                                     in Properties overrides)
      raises (ObjectGroupNotFound,
              InvalidProperty,
              UnsupportedProperty);

    Properties get_properties (in ObjectGroup object_group)
      raises (ObjectGroupNotFound);
  };

  // Specification of ObjectGroupManager Interface
  // which ReplicationManager Inherits
  interface ObjectGroupManager {
    ObjectGroup create_member (in ObjectGroup object_group,
                               in Location the_location,
                               in TypeId type_id,
                               in Criteria the_criteria)
      raises (ObjectGroupNotFound,
              MemberAlreadyPresent,
              NoFactory,
              ObjectNotCreated,
              InvalidCriteria,
              CannotMeetCriteria);

    ObjectGroup add_member (in ObjectGroup object_group,
                            in Location the_location,
                            in Object member)
      raises (ObjectGroupNotFound,
              // CORBA::INV_OBJREF,  // @@ Missing declaration
              MemberAlreadyPresent,
              ObjectNotAdded);

    ObjectGroup remove_member (in ObjectGroup object_group,
                               in Location the_location)
      raises (ObjectGroupNotFound,
              MemberNotFound);

    ObjectGroup set_primary_member (in ObjectGroup object_group,
                                    in Location the_location)
      raises (ObjectGroupNotFound,
              MemberNotFound,
              PrimaryNotSet,
              BadReplicationStyle);

    Locations locations_of_members (in ObjectGroup object_group)
      raises (ObjectGroupNotFound);

    ObjectGroupId get_object_group_id (in ObjectGroup object_group)
      raises (ObjectGroupNotFound);

    ObjectGroup get_object_group_ref (in ObjectGroup object_group)
      raises (ObjectGroupNotFound);

    Object get_member_ref (in ObjectGroup object_group,
                           in Location loc)
      raises (ObjectGroupNotFound,
              MemberNotFound);
  };

  // Specification of GenericFactory Interface
  // which ReplicationManager Inherits and Application Objects Implement
  interface GenericFactory {
    typedef any FactoryCreationId;

    Object create_object (in TypeId type_id,
                          in Criteria the_criteria,
                          out FactoryCreationId factory_creation_id)
      raises (NoFactory,
              ObjectNotCreated,
              InvalidCriteria,
              InvalidProperty,
              CannotMeetCriteria);

    void delete_object (in FactoryCreationId factory_creation_id)
      raises (ObjectNotFound);
  };

  // Specification of ReplicationManager Interface
  interface ReplicationManager : PropertyManager, ObjectGroupManager,
    GenericFactory {
    void register_load_notifier (in LoadNotifier load_notifier);

    LoadNotifier get_load_notifier ()
      raises (InterfaceNotFound);
  };
};

#endif /* TAO_LOADBALANCER_IDL */
