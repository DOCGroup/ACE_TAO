Tue Jul 27 18:12:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Connection_Handler.{h,cpp}:
          Added virtual close_handler() method, this will be called the the
          Transport_Connector and derived classes if they want to close the
          connection_handler, the default implementation changes the LF state
          to closed and removes a reference from the transport

        * tao/IIOP_Connection_Handler.cpp (close):
          Instead of modifing the LF state and removing a reference from the
          transport, just call this->close_handler(), this calls the
          Connection_Handler::close_handler().

          With this we can close handlers in a generic way from the
          Transport_Connectors.

          When we would move a template class between
          the ACE_Svc_Handler template and the derived connection handlers,
          this extra template could implement the close method in a generic
          way, this would reduce the footprint a little.

        * tao/IIO_Connector.cpp:
          Moved docu to the correct place

Tue Jul 27 17:26:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IIOP_Connection_Handler.cpp:
          Instead of modifying the transport in several steps, just call
          set_connected which will do all work.

        * tao/Transport.{h,cpp,inl}:
          Removed the is_connected accessor, made a set_connected, which will
          set the id, set the connected_ bool and will schedule an output
          when the queue is not empty

Tue Jul 27 12:28:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.{h,cpp}:
        * tao/Synch_Invocation.cpp:
          Renamed queue_message to format_queue_message

Tue Jul 27 12:22:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.{h,cpp}:
          Added out_stream() which returns the out_stream from the
          messaging_object, this way the invocation classes don't need to use
          messaging_object anymore, just get the stream from the transport

        * tao/Synch_Invocation.cpp:
        * tao/Messaging/Asynch_Invocation.cpp:
        * tao/LocateRequest_Invocation.cpp:
          Instead of getting the out_stream from the messaging_object which is
          retrieved from the transport, get it from the transport. This way we
          don't have to include tao/Pluggable_Messaging.h

Tue Jul 27 08:37:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport_Connector.{h,cpp}:
          Factered out the registration of the transport into
          register_transport()

Tue Jul 27 07:31:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Sync_Invocation.cpp:
        * tao/Transport.{h,cpp}:
          Changed queue_message so that transport does the formatting

Tue Jul 27 02:47:18 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

 	* tao/Synch_Invocation.cpp:

	  Left some comments for Johnny.

Mon Jul 26 13:48:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Synch_Invocation.cpp (remote_oneway):
          When queueing the message, stream it first else we just queue no
          message contents. The only question is how to handle the failure
          of the streaming

Mon Jul 26 13:09:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.{h,cpp}:
          Moved cleaning up the queue out of destruction and
          send_connection_closed_notifications_i annd into the new method
          cleanup_queue_i which is called from these places

        * tao/IIOP_Connection_Handler.cpp:
          Marked the transport as connected after we changed the state to
          success

        * tao/IIOP_Connector.cpp:
          We have to handle the timeout of wait, made an implementation, but
          with a remark to Bala to check this, not sure if this is the correct
          way todo.

Mon Jul 26 11:38:41 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Transport.cpp (TAO_Transport):

	  Left a comment for Johnny.

Mon Jul 26 11:04:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Invocation_Adapter.cpp:
          Check for blocked or not blocked connection was wrong

        * tao/Transport_Connector.cpp:
          Corrected debug statement

Mon Jul 26 09:24:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.cpp:
          In case we destruct a not connected transport it can happen that
          we have queued messages, zap these then from memory, we just can't
          deliver them.

Sat Jul 24 18:08:13 2004  Balachandran Natarajan  <bala@dre.vanderbilt.edu>

	* tao/Connect_Strategy.h:

	  Added a new wait () method which takes in a transport.

 	* tao/Blocked_Connect_Strategy.cpp:
	* tao/Blocked_Connect_Strategy.h:

	  Provided a default implementation for the new wait () method.

	* tao/LF_Connect_Strategy.cpp:
	* tao/LF_Connect_Strategy.h:
	* tao/Reactive_Connect_Strategy.cpp:
	* tao/Reactive_Connect_Strategy.h:

	  Provided an implementation of the new wait () method.

	* tao/Invocation_Adapter.h:

	  Changed the setup_operation_details_i () to set_syncscope_policy
	  () since that is what it does.

	* tao/Invocation_Adapter.cpp:

	  Changed the operation name in the implementation of the above
	  method. Did a bunch of cosmetic changes to keep the line lengths
	  smaller.

	* tao/Profile_Transport_Resolver.h:
	* tao/Profile_Transport_Resolver.inl:

	  Changed the name of the connected () method as blocked
	  (). Improved const correctness so that the blocked_ data member
	  is const.

	* tao/Invocation_Endpoint_Selectors.cpp:

	  Use TAO::ProfileTransportResolver::blocked () instead of
	  TAO::ProfileTransportResolver::connected ().

	* tao/Transport_Connector.cpp:
	* tao/IIOP_Connector.cpp:

	  Made a bunch of changes to improve readability of the code. Left
	  a couple of questions for Johnny. There are a few more things
	  that need to be addressed here.

Fri Jul 22 09:54:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IIOP_Connector.cpp (make_connection):
          Call the check_connection_closure only when we want to have a
          connected transport, for the non-blocking case we have to do
          something else because the return value of -1 doesn't mean there
          always the we have a problem just establishing this connection.

        * tao/IIOP_Connector.{h,cpp} (check_connection_closure):
          Changed method signature to have a return value

Fri Jul 22 09:20:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport_Connector.cpp (connect):
          When getting a transport out of the cache, print out whether it is
          connected or not

Thu Jul 21 15:03:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IIOP_Connector.cpp (make_connection):
          Use timeout to change the sync_options, this way we don't change
          the bitmask

Thu Jul 21 14:34:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ORB_Core.h:
          Removed the transport_cache accessor method, it was just declared
          and not implemented, the ORB_Core know nothing about this

Thu Jul 21 13:35:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport_Connector.cpp:
          In case we have a not connected transport we should look if we need
          to deliver a connected transport or not and behave accordingly to it

Wed Jul 20 15:25:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/TAO_Server_Request.cpp:
          Updated all ACE_DEBUG and ACE_ERROR macros so that the formatting of
          messages is the same as in the rest of TAO. This makes reading the
          logfiles much easier.

Wed Jul 20 14:42:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IIOP_Connector.cpp (make_connection):
          Removed commented out code and only check for registration errors
          when we are calling the register_handler().

Wed Jul 20 11:12:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport_Connector.cpp:
          Changed some remarks, some are not valid, some need some more
          clarification

        * tao/IIOP_Connector.{h,cpp}:
          Moved the handling of connection closure to a new separate method
          check_connection_closure(). This contains code original in
          make_connection(). This code is dependent on the type of tranport
          used, so it can't move into the base class.

Thu Jul  8 14:50:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IIOP_Connection_Handler.cpp (open):
          Set the transport to connected here. We should refactor the last
          lines of this method, these lines are copied in each different type
          of connection_handler.

        * tao/IIOP_Connector.cpp:
          Removed not needed code, just us is_connected() on the transport.
          Made a remark with the registration of the wait_strategy, do we need
          to do this here?

        * tao/Transport_Connector.cpp:
          Use the transport->is_connected() instead of the wait of the result.

          Thanks to Bala for getting me on the right track.

Thu Jul  8 13:18:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IIOP_Connector.cpp:
        * tao/Transport_Connector.cpp:
          Some changes to handle the wait, but things are still not correct

        * tao/Transport.cpp:
          Initialize is_connected+ to false

Thu Jul  8 11:58:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IIOP_Connector.cpp:
          Added some test code for how the handle the wait result value

        * tao/Transport_Connector.cpp:
          Added more logic what to do when a not connected transport is
          retrieved

Mon Jul  5 12:37:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.{h,cpp}:
          Removed commented out method in the header file and give purge_entry
          a return value, so that we can check for failure.

Mon Jul  5 12:02:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IIOP_Connector.cpp:
        * tao/Transport_Connector.cpp:
        * tao/Profile_Transport_Resolver.cpp:
          Added some documentation and added some question to some code parts
          to be sure that we check this

Fri Jul  2 11:32:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Invocation_Adapter.{h,cpp}:
          Added setup_operation_details_i() which will setup the operation
          details and determine whether we want to block until a connection
          is ready or not, this removes duplicated code and we ony determine
          the settings once in the invocation path.

Thu Jul  1 12:52:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport_Connector.{h,cpp}:
          Removed the block argument from the make_connection and connect
          method again, if we should get a connected transport or not can be
          retrieved from the ProfileTransportResolver

        * tao/Transport_Connector.cpp:
          In case we get a transport from the cache that is not connected,
          call wait with zero time. We have to add more functionality here
          to handle the closing of that transport, and check the
          implementation what we do when we can't register the wait strategy
          with the reactor

        * tao/IIOP_Connector.{h,cpp}:
          Added better handling of blocking or non-blocking connects.

Thu Jul  1 10:02:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.{h,inl}:
          Added connection_handler accessor function and made
          connetion_handler_i protected again

        * tao/Transport_Connector.cpp:
          Use Transport::connection_handler instead of the _i version.

Wed Jun 30 14:26:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Profile_Transport_Resolver.{h,cpp,i}:
          Instead of passed with each operation whether the connect should
          block or not, we now pass a boolean with the constructor if this
          tranport must deliver a connected transport or whether it is also
          allowed to deliver a not connected transport. Added an accessor for
          this member.

        * tao/Invocation_Adapter.cpp:
        * tao/Invocation_Endpoint_Selectors.{h,cpp}:
        * tao/LocateRequest_Invocation_Adapter.cpp:
          Instead of passing the block boolean with each operation, pass it
          with the constructor or the Profile_Transport_Resolver.

Wed Jun 30 10:19:12 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Synch_Invocation (remote_oneway):
          At the top of the method we check for sync with server or sync with
          target. In case of this we do a twoway. I don't see any reason why
          lower in the method we check another time for sync with server, so
          removed that check. Changed the calling of
          Synch_Twoway_Invocation::remote_twoway(), so that we check for
          exceptions in case of emulated exception macros. Add transport local
          variable, so that we don't need to get it several times in one
          method call.

        * tao/Transport.cpp (send_message_shared_i):
          Removed queueing, it should be here, added some comments that the
          code checking for twoways or replies should go out of here. This
          class also got the new methods queue_message and queue_message_i
          when it was created as branch.

Tue Jun 20 10:10:10 UTC 2004  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.{h,cpp}:
          Added queue_message and queue_message_i to be able to queue a
          message from the outside, use this method also internally.
          Added connected_ member and accessors to indicate whether this
          transport is connected or not

        * tao/LocateRequest_Invocation_Adapter.cpp:
          We use the Profile_Transport_Resolver here, assume that we always
          need to get a connected transport

