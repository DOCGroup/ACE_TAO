// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef _TAO_IDL__________ORBSVCS_IFR_SERVICE_ORIG_IFR_BASICS_H_
#define _TAO_IDL__________ORBSVCS_IFR_SERVICE_ORIG_IFR_BASICS_H_

#include "ace/pre.h"
#include "IFR_BaseS.h"
#include "tao/IFR_Client/IFR_BasicC.h"


#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"
#include "tao/PortableServer/Collocated_Object.h"
#include "tao/PortableServer/ThruPOA_Object_Proxy_Impl.h"
#include "tao/PortableServer/Direct_Object_Proxy_Impl.h"
#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

class POA_CORBA_Repository;
typedef POA_CORBA_Repository *POA_CORBA_Repository_ptr;
// Forward Classes Declaration
class _TAO_CORBA_Repository_ThruPOA_Proxy_Impl;
class _TAO_CORBA_Repository_Strategized_Proxy_Broker;

class  POA_CORBA_Repository : public virtual POA_CORBA_Container
{
protected:
  POA_CORBA_Repository (void);

public:
  POA_CORBA_Repository (const POA_CORBA_Repository& rhs);
  virtual ~POA_CORBA_Repository (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_Repository *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA_Contained_ptr lookup_id (
      const char * search_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void lookup_id_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA::TypeCode_ptr get_canonical_typecode (
      CORBA::TypeCode_ptr tc
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void get_canonical_typecode_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_PrimitiveDef_ptr get_primitive (
      CORBA::PrimitiveKind kind
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void get_primitive_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_StringDef_ptr create_string (
      CORBA::ULong bound
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void create_string_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_WstringDef_ptr create_wstring (
      CORBA::ULong bound
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void create_wstring_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_SequenceDef_ptr create_sequence (
      CORBA::ULong bound,
      CORBA_IDLType_ptr element_type
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void create_sequence_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_ArrayDef_ptr create_array (
      CORBA::ULong length,
      CORBA_IDLType_ptr element_type
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void create_array_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_FixedDef_ptr create_fixed (
      CORBA::UShort digits,
      CORBA::Short scale
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void create_fixed_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void lookup_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_module_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_constant_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_struct_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_union_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_enum_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_alias_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_box_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_exception_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_native_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_abstract_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_local_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_Repository_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_Repository_Proxy_Broker
{
public:
  _TAO_CORBA_Repository_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_Repository_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_Repository_Proxy_Impl &select_proxy (
    ::CORBA_Repository *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_Repository_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_Repository_Strategized_Proxy_Broker *the_TAO_CORBA_Repository_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_Repository_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_Repository_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_Container_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_Repository_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_Repository_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA_Contained_ptr lookup_id (
      CORBA_Object *_collocated_tao_target_,
      const char * search_id
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::TypeCode_ptr get_canonical_typecode (
      CORBA_Object *_collocated_tao_target_,
      CORBA::TypeCode_ptr tc
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_PrimitiveDef_ptr get_primitive (
      CORBA_Object *_collocated_tao_target_,
      CORBA::PrimitiveKind kind
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_StringDef_ptr create_string (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_WstringDef_ptr create_wstring (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_SequenceDef_ptr create_sequence (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound,
      CORBA_IDLType_ptr element_type
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_ArrayDef_ptr create_array (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong length,
      CORBA_IDLType_ptr element_type
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_FixedDef_ptr create_fixed (
      CORBA_Object *_collocated_tao_target_,
      CORBA::UShort digits,
      CORBA::Short scale
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_ModuleDef;
typedef POA_CORBA_ModuleDef *POA_CORBA_ModuleDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_ModuleDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_ModuleDef_Strategized_Proxy_Broker;

class  POA_CORBA_ModuleDef : public virtual POA_CORBA_Container, public virtual POA_CORBA_Contained
{
protected:
  POA_CORBA_ModuleDef (void);

public:
  POA_CORBA_ModuleDef (const POA_CORBA_ModuleDef& rhs);
  virtual ~POA_CORBA_ModuleDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_ModuleDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  static void lookup_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_module_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_constant_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_struct_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_union_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_enum_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_alias_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_box_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_exception_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_native_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_abstract_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_local_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_ModuleDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_ModuleDef_Proxy_Broker
{
public:
  _TAO_CORBA_ModuleDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_ModuleDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_ModuleDef_Proxy_Impl &select_proxy (
    ::CORBA_ModuleDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_ModuleDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_ModuleDef_Strategized_Proxy_Broker *the_TAO_CORBA_ModuleDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_ModuleDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_ModuleDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_Container_ThruPOA_Proxy_Impl,
  public virtual ::_TAO_CORBA_Contained_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_ModuleDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_ModuleDef_ThruPOA_Proxy_Impl (void) { }

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////

class POA_CORBA_ConstantDef;
typedef POA_CORBA_ConstantDef *POA_CORBA_ConstantDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_ConstantDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_ConstantDef_Strategized_Proxy_Broker;

class  POA_CORBA_ConstantDef : public virtual POA_CORBA_Contained
{
protected:
  POA_CORBA_ConstantDef (void);

public:
  POA_CORBA_ConstantDef (const POA_CORBA_ConstantDef& rhs);
  virtual ~POA_CORBA_ConstantDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_ConstantDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr type (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_type_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_IDLType_ptr type_def (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void type_def (
      CORBA_IDLType_ptr type_def
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA::Any * value (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_value_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void value (
      const CORBA::Any & value
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_value_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_ConstantDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_ConstantDef_Proxy_Broker
{
public:
  _TAO_CORBA_ConstantDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_ConstantDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_ConstantDef_Proxy_Impl &select_proxy (
    ::CORBA_ConstantDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_ConstantDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_ConstantDef_Strategized_Proxy_Broker *the_TAO_CORBA_ConstantDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_ConstantDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_ConstantDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_Contained_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_ConstantDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_ConstantDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA::TypeCode_ptr type (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_IDLType_ptr type_def (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA_IDLType_ptr type_def
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Any * value (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void value (
      CORBA_Object *_collocated_tao_target_,
      const CORBA::Any & value
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_StructDef;
typedef POA_CORBA_StructDef *POA_CORBA_StructDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_StructDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_StructDef_Strategized_Proxy_Broker;

class  POA_CORBA_StructDef : public virtual POA_CORBA_TypedefDef, public virtual POA_CORBA_Container
{
protected:
  POA_CORBA_StructDef (void);

public:
  POA_CORBA_StructDef (const POA_CORBA_StructDef& rhs);
  virtual ~POA_CORBA_StructDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_StructDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA_StructMemberSeq * members (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_members_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void members (
      const CORBA_StructMemberSeq & members
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_members_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void lookup_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_module_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_constant_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_struct_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_union_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_enum_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_alias_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_box_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_exception_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_native_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_abstract_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_local_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_StructDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_StructDef_Proxy_Broker
{
public:
  _TAO_CORBA_StructDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_StructDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_StructDef_Proxy_Impl &select_proxy (
    ::CORBA_StructDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_StructDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_StructDef_Strategized_Proxy_Broker *the_TAO_CORBA_StructDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_StructDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_StructDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_TypedefDef_ThruPOA_Proxy_Impl,
  public virtual ::_TAO_CORBA_Container_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_StructDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_StructDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA_StructMemberSeq * members (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void members (
      CORBA_Object *_collocated_tao_target_,
      const CORBA_StructMemberSeq & members
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_UnionDef;
typedef POA_CORBA_UnionDef *POA_CORBA_UnionDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_UnionDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_UnionDef_Strategized_Proxy_Broker;

class  POA_CORBA_UnionDef : public virtual POA_CORBA_TypedefDef, public virtual POA_CORBA_Container
{
protected:
  POA_CORBA_UnionDef (void);

public:
  POA_CORBA_UnionDef (const POA_CORBA_UnionDef& rhs);
  virtual ~POA_CORBA_UnionDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_UnionDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr discriminator_type (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_discriminator_type_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_IDLType_ptr discriminator_type_def (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_discriminator_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void discriminator_type_def (
      CORBA_IDLType_ptr discriminator_type_def
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_discriminator_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_UnionMemberSeq * members (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_members_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void members (
      const CORBA_UnionMemberSeq & members
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_members_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void lookup_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_module_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_constant_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_struct_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_union_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_enum_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_alias_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_box_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_exception_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_native_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_abstract_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_local_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_UnionDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_UnionDef_Proxy_Broker
{
public:
  _TAO_CORBA_UnionDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_UnionDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_UnionDef_Proxy_Impl &select_proxy (
    ::CORBA_UnionDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_UnionDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_UnionDef_Strategized_Proxy_Broker *the_TAO_CORBA_UnionDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_UnionDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_UnionDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_TypedefDef_ThruPOA_Proxy_Impl,
  public virtual ::_TAO_CORBA_Container_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_UnionDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_UnionDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA::TypeCode_ptr discriminator_type (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_IDLType_ptr discriminator_type_def (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void discriminator_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA_IDLType_ptr discriminator_type_def
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_UnionMemberSeq * members (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void members (
      CORBA_Object *_collocated_tao_target_,
      const CORBA_UnionMemberSeq & members
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_EnumDef;
typedef POA_CORBA_EnumDef *POA_CORBA_EnumDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_EnumDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_EnumDef_Strategized_Proxy_Broker;

class  POA_CORBA_EnumDef : public virtual POA_CORBA_TypedefDef
{
protected:
  POA_CORBA_EnumDef (void);

public:
  POA_CORBA_EnumDef (const POA_CORBA_EnumDef& rhs);
  virtual ~POA_CORBA_EnumDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_EnumDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA_EnumMemberSeq * members (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_members_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void members (
      const CORBA_EnumMemberSeq & members
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_members_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_EnumDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_EnumDef_Proxy_Broker
{
public:
  _TAO_CORBA_EnumDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_EnumDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_EnumDef_Proxy_Impl &select_proxy (
    ::CORBA_EnumDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_EnumDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_EnumDef_Strategized_Proxy_Broker *the_TAO_CORBA_EnumDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_EnumDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_EnumDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_TypedefDef_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_EnumDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_EnumDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA_EnumMemberSeq * members (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void members (
      CORBA_Object *_collocated_tao_target_,
      const CORBA_EnumMemberSeq & members
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_AliasDef;
typedef POA_CORBA_AliasDef *POA_CORBA_AliasDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_AliasDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_AliasDef_Strategized_Proxy_Broker;

class  POA_CORBA_AliasDef : public virtual POA_CORBA_TypedefDef
{
protected:
  POA_CORBA_AliasDef (void);

public:
  POA_CORBA_AliasDef (const POA_CORBA_AliasDef& rhs);
  virtual ~POA_CORBA_AliasDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_AliasDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA_IDLType_ptr original_type_def (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_original_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void original_type_def (
      CORBA_IDLType_ptr original_type_def
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_original_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_AliasDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_AliasDef_Proxy_Broker
{
public:
  _TAO_CORBA_AliasDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_AliasDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_AliasDef_Proxy_Impl &select_proxy (
    ::CORBA_AliasDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_AliasDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_AliasDef_Strategized_Proxy_Broker *the_TAO_CORBA_AliasDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_AliasDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_AliasDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_TypedefDef_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_AliasDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_AliasDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA_IDLType_ptr original_type_def (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void original_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA_IDLType_ptr original_type_def
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_NativeDef;
typedef POA_CORBA_NativeDef *POA_CORBA_NativeDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_NativeDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_NativeDef_Strategized_Proxy_Broker;

class  POA_CORBA_NativeDef : public virtual POA_CORBA_TypedefDef
{
protected:
  POA_CORBA_NativeDef (void);

public:
  POA_CORBA_NativeDef (const POA_CORBA_NativeDef& rhs);
  virtual ~POA_CORBA_NativeDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_NativeDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_NativeDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_NativeDef_Proxy_Broker
{
public:
  _TAO_CORBA_NativeDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_NativeDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_NativeDef_Proxy_Impl &select_proxy (
    ::CORBA_NativeDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_NativeDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_NativeDef_Strategized_Proxy_Broker *the_TAO_CORBA_NativeDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_NativeDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_NativeDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_TypedefDef_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_NativeDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_NativeDef_ThruPOA_Proxy_Impl (void) { }

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////

class POA_CORBA_PrimitiveDef;
typedef POA_CORBA_PrimitiveDef *POA_CORBA_PrimitiveDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_PrimitiveDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_PrimitiveDef_Strategized_Proxy_Broker;

class  POA_CORBA_PrimitiveDef : public virtual POA_CORBA_IDLType
{
protected:
  POA_CORBA_PrimitiveDef (void);

public:
  POA_CORBA_PrimitiveDef (const POA_CORBA_PrimitiveDef& rhs);
  virtual ~POA_CORBA_PrimitiveDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_PrimitiveDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::PrimitiveKind kind (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_kind_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_PrimitiveDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_PrimitiveDef_Proxy_Broker
{
public:
  _TAO_CORBA_PrimitiveDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_PrimitiveDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_PrimitiveDef_Proxy_Impl &select_proxy (
    ::CORBA_PrimitiveDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_PrimitiveDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_PrimitiveDef_Strategized_Proxy_Broker *the_TAO_CORBA_PrimitiveDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_PrimitiveDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_PrimitiveDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_IDLType_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_PrimitiveDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_PrimitiveDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA::PrimitiveKind kind (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_StringDef;
typedef POA_CORBA_StringDef *POA_CORBA_StringDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_StringDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_StringDef_Strategized_Proxy_Broker;

class  POA_CORBA_StringDef : public virtual POA_CORBA_IDLType
{
protected:
  POA_CORBA_StringDef (void);

public:
  POA_CORBA_StringDef (const POA_CORBA_StringDef& rhs);
  virtual ~POA_CORBA_StringDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_StringDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::ULong bound (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_bound_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void bound (
      CORBA::ULong bound
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_bound_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_StringDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_StringDef_Proxy_Broker
{
public:
  _TAO_CORBA_StringDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_StringDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_StringDef_Proxy_Impl &select_proxy (
    ::CORBA_StringDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_StringDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_StringDef_Strategized_Proxy_Broker *the_TAO_CORBA_StringDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_StringDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_StringDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_IDLType_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_StringDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_StringDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA::ULong bound (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void bound (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_WstringDef;
typedef POA_CORBA_WstringDef *POA_CORBA_WstringDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_WstringDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_WstringDef_Strategized_Proxy_Broker;

class  POA_CORBA_WstringDef : public virtual POA_CORBA_IDLType
{
protected:
  POA_CORBA_WstringDef (void);

public:
  POA_CORBA_WstringDef (const POA_CORBA_WstringDef& rhs);
  virtual ~POA_CORBA_WstringDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_WstringDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::ULong bound (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_bound_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void bound (
      CORBA::ULong bound
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_bound_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_WstringDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_WstringDef_Proxy_Broker
{
public:
  _TAO_CORBA_WstringDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_WstringDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_WstringDef_Proxy_Impl &select_proxy (
    ::CORBA_WstringDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_WstringDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_WstringDef_Strategized_Proxy_Broker *the_TAO_CORBA_WstringDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_WstringDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_WstringDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_IDLType_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_WstringDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_WstringDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA::ULong bound (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void bound (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_SequenceDef;
typedef POA_CORBA_SequenceDef *POA_CORBA_SequenceDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_SequenceDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_SequenceDef_Strategized_Proxy_Broker;

class  POA_CORBA_SequenceDef : public virtual POA_CORBA_IDLType
{
protected:
  POA_CORBA_SequenceDef (void);

public:
  POA_CORBA_SequenceDef (const POA_CORBA_SequenceDef& rhs);
  virtual ~POA_CORBA_SequenceDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_SequenceDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::ULong bound (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_bound_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void bound (
      CORBA::ULong bound
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_bound_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA::TypeCode_ptr element_type (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_element_type_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_IDLType_ptr element_type_def (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_element_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void element_type_def (
      CORBA_IDLType_ptr element_type_def
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_element_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_SequenceDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_SequenceDef_Proxy_Broker
{
public:
  _TAO_CORBA_SequenceDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_SequenceDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_SequenceDef_Proxy_Impl &select_proxy (
    ::CORBA_SequenceDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_SequenceDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_SequenceDef_Strategized_Proxy_Broker *the_TAO_CORBA_SequenceDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_SequenceDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_SequenceDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_IDLType_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_SequenceDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_SequenceDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA::ULong bound (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void bound (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong bound
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::TypeCode_ptr element_type (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_IDLType_ptr element_type_def (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void element_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA_IDLType_ptr element_type_def
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_ArrayDef;
typedef POA_CORBA_ArrayDef *POA_CORBA_ArrayDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_ArrayDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_ArrayDef_Strategized_Proxy_Broker;

class  POA_CORBA_ArrayDef : public virtual POA_CORBA_IDLType
{
protected:
  POA_CORBA_ArrayDef (void);

public:
  POA_CORBA_ArrayDef (const POA_CORBA_ArrayDef& rhs);
  virtual ~POA_CORBA_ArrayDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_ArrayDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::ULong length (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_length_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void length (
      CORBA::ULong length
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_length_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA::TypeCode_ptr element_type (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_element_type_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_IDLType_ptr element_type_def (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_element_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void element_type_def (
      CORBA_IDLType_ptr element_type_def
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_element_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_ArrayDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_ArrayDef_Proxy_Broker
{
public:
  _TAO_CORBA_ArrayDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_ArrayDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_ArrayDef_Proxy_Impl &select_proxy (
    ::CORBA_ArrayDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_ArrayDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_ArrayDef_Strategized_Proxy_Broker *the_TAO_CORBA_ArrayDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_ArrayDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_ArrayDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_IDLType_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_ArrayDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_ArrayDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA::ULong length (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void length (
      CORBA_Object *_collocated_tao_target_,
      CORBA::ULong length
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::TypeCode_ptr element_type (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_IDLType_ptr element_type_def (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void element_type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA_IDLType_ptr element_type_def
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_ExceptionDef;
typedef POA_CORBA_ExceptionDef *POA_CORBA_ExceptionDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_ExceptionDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_ExceptionDef_Strategized_Proxy_Broker;

class  POA_CORBA_ExceptionDef : public virtual POA_CORBA_Contained, public virtual POA_CORBA_Container
{
protected:
  POA_CORBA_ExceptionDef (void);

public:
  POA_CORBA_ExceptionDef (const POA_CORBA_ExceptionDef& rhs);
  virtual ~POA_CORBA_ExceptionDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_ExceptionDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr type (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_type_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_StructMemberSeq * members (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_members_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void members (
      const CORBA_StructMemberSeq & members
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_members_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_module_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_constant_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_struct_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_union_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_enum_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_alias_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_box_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_exception_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_native_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_abstract_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_local_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_ExceptionDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_ExceptionDef_Proxy_Broker
{
public:
  _TAO_CORBA_ExceptionDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_ExceptionDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_ExceptionDef_Proxy_Impl &select_proxy (
    ::CORBA_ExceptionDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_ExceptionDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_ExceptionDef_Strategized_Proxy_Broker *the_TAO_CORBA_ExceptionDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_ExceptionDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_ExceptionDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_Contained_ThruPOA_Proxy_Impl,
  public virtual ::_TAO_CORBA_Container_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_ExceptionDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_ExceptionDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA::TypeCode_ptr type (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_StructMemberSeq * members (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void members (
      CORBA_Object *_collocated_tao_target_,
      const CORBA_StructMemberSeq & members
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_AttributeDef;
typedef POA_CORBA_AttributeDef *POA_CORBA_AttributeDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_AttributeDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_AttributeDef_Strategized_Proxy_Broker;

class  POA_CORBA_AttributeDef : public virtual POA_CORBA_Contained
{
protected:
  POA_CORBA_AttributeDef (void);

public:
  POA_CORBA_AttributeDef (const POA_CORBA_AttributeDef& rhs);
  virtual ~POA_CORBA_AttributeDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_AttributeDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr type (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_type_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_IDLType_ptr type_def (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void type_def (
      CORBA_IDLType_ptr type_def
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_type_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA::AttributeMode mode (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_mode_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void mode (
      CORBA::AttributeMode mode
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_mode_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_AttributeDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_AttributeDef_Proxy_Broker
{
public:
  _TAO_CORBA_AttributeDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_AttributeDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_AttributeDef_Proxy_Impl &select_proxy (
    ::CORBA_AttributeDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_AttributeDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_AttributeDef_Strategized_Proxy_Broker *the_TAO_CORBA_AttributeDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_AttributeDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_AttributeDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_Contained_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_AttributeDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_AttributeDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA::TypeCode_ptr type (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_IDLType_ptr type_def (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void type_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA_IDLType_ptr type_def
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::AttributeMode mode (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void mode (
      CORBA_Object *_collocated_tao_target_,
      CORBA::AttributeMode mode
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_OperationDef;
typedef POA_CORBA_OperationDef *POA_CORBA_OperationDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_OperationDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_OperationDef_Strategized_Proxy_Broker;

class  POA_CORBA_OperationDef : public virtual POA_CORBA_Contained
{
protected:
  POA_CORBA_OperationDef (void);

public:
  POA_CORBA_OperationDef (const POA_CORBA_OperationDef& rhs);
  virtual ~POA_CORBA_OperationDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_OperationDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA::TypeCode_ptr result (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_result_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_IDLType_ptr result_def (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_result_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void result_def (
      CORBA_IDLType_ptr result_def
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_result_def_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_ParDescriptionSeq * params (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_params_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void params (
      const CORBA_ParDescriptionSeq & params
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_params_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA::OperationMode mode (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_mode_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void mode (
      CORBA::OperationMode mode
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_mode_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_ContextIdSeq * contexts (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_contexts_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void contexts (
      const CORBA_ContextIdSeq & contexts
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_contexts_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_ExceptionDefSeq * exceptions (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_exceptions_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void exceptions (
      const CORBA_ExceptionDefSeq & exceptions
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_exceptions_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_OperationDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_OperationDef_Proxy_Broker
{
public:
  _TAO_CORBA_OperationDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_OperationDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_OperationDef_Proxy_Impl &select_proxy (
    ::CORBA_OperationDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_OperationDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_OperationDef_Strategized_Proxy_Broker *the_TAO_CORBA_OperationDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_OperationDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_OperationDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_Contained_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_OperationDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_OperationDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA::TypeCode_ptr result (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_IDLType_ptr result_def (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void result_def (
      CORBA_Object *_collocated_tao_target_,
      CORBA_IDLType_ptr result_def
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_ParDescriptionSeq * params (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void params (
      CORBA_Object *_collocated_tao_target_,
      const CORBA_ParDescriptionSeq & params
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::OperationMode mode (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void mode (
      CORBA_Object *_collocated_tao_target_,
      CORBA::OperationMode mode
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_ContextIdSeq * contexts (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void contexts (
      CORBA_Object *_collocated_tao_target_,
      const CORBA_ContextIdSeq & contexts
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_ExceptionDefSeq * exceptions (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void exceptions (
      CORBA_Object *_collocated_tao_target_,
      const CORBA_ExceptionDefSeq & exceptions
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_InterfaceDef;
typedef POA_CORBA_InterfaceDef *POA_CORBA_InterfaceDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_InterfaceDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_InterfaceDef_Strategized_Proxy_Broker;

class  POA_CORBA_InterfaceDef : public virtual POA_CORBA_Container, public virtual POA_CORBA_Contained, public virtual POA_CORBA_IDLType
{
protected:
  POA_CORBA_InterfaceDef (void);

public:
  POA_CORBA_InterfaceDef (const POA_CORBA_InterfaceDef& rhs);
  virtual ~POA_CORBA_InterfaceDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_InterfaceDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  virtual CORBA_InterfaceDefSeq * base_interfaces (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _get_base_interfaces_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void base_interfaces (
      const CORBA_InterfaceDefSeq & base_interfaces
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void _set_base_interfaces_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA::Boolean is_a (
      const char * interface_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void is_a_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_InterfaceDef::FullInterfaceDescription * describe_interface (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void describe_interface_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_AttributeDef_ptr create_attribute (
      const char * id,
      const char * name,
      const char * version,
      CORBA_IDLType_ptr type,
      CORBA::AttributeMode mode
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void create_attribute_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual CORBA_OperationDef_ptr create_operation (
      const char * id,
      const char * name,
      const char * version,
      CORBA_IDLType_ptr result,
      CORBA::OperationMode mode,
      const CORBA_ParDescriptionSeq & params,
      const CORBA_ExceptionDefSeq & exceptions,
      const CORBA_ContextIdSeq & contexts
      TAO_ENV_ARG_DECL_WITH_DEFAULTS)

    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

    static void create_operation_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_obj,
      void *_tao_servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void lookup_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_module_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_constant_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_struct_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_union_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_enum_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_alias_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_box_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_exception_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_native_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_abstract_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_local_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_InterfaceDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_InterfaceDef_Proxy_Broker
{
public:
  _TAO_CORBA_InterfaceDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_InterfaceDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_InterfaceDef_Proxy_Impl &select_proxy (
    ::CORBA_InterfaceDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_InterfaceDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_InterfaceDef_Strategized_Proxy_Broker *the_TAO_CORBA_InterfaceDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_InterfaceDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_InterfaceDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_Container_ThruPOA_Proxy_Impl,
  public virtual ::_TAO_CORBA_Contained_ThruPOA_Proxy_Impl,
  public virtual ::_TAO_CORBA_IDLType_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_InterfaceDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_InterfaceDef_ThruPOA_Proxy_Impl (void) { }

  virtual CORBA_InterfaceDefSeq * base_interfaces (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual void base_interfaces (
      CORBA_Object *_collocated_tao_target_,
      const CORBA_InterfaceDefSeq & base_interfaces
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA::Boolean is_a (
      CORBA_Object *_collocated_tao_target_,
      const char * interface_id
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_InterfaceDef::FullInterfaceDescription * describe_interface (
      CORBA_Object *_collocated_tao_target_
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_AttributeDef_ptr create_attribute (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA_IDLType_ptr type,
      CORBA::AttributeMode mode
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));

  virtual CORBA_OperationDef_ptr create_operation (
      CORBA_Object *_collocated_tao_target_,
      const char * id,
      const char * name,
      const char * version,
      CORBA_IDLType_ptr result,
      CORBA::OperationMode mode,
      const CORBA_ParDescriptionSeq & params,
      const CORBA_ExceptionDefSeq & exceptions,
      const CORBA_ContextIdSeq & contexts
      TAO_ENV_ARG_DECL
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));


};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


class POA_CORBA_AbstractInterfaceDef;
typedef POA_CORBA_AbstractInterfaceDef *POA_CORBA_AbstractInterfaceDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_AbstractInterfaceDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_AbstractInterfaceDef_Strategized_Proxy_Broker;

class  POA_CORBA_AbstractInterfaceDef : public virtual POA_CORBA_InterfaceDef
{
protected:
  POA_CORBA_AbstractInterfaceDef (void);

public:
  POA_CORBA_AbstractInterfaceDef (const POA_CORBA_AbstractInterfaceDef& rhs);
  virtual ~POA_CORBA_AbstractInterfaceDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_AbstractInterfaceDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  static void _get_base_interfaces_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_base_interfaces_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_attribute_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_operation_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_module_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_constant_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_struct_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_union_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_enum_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_alias_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_box_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_exception_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_native_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_abstract_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_local_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_AbstractInterfaceDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_AbstractInterfaceDef_Proxy_Broker
{
public:
  _TAO_CORBA_AbstractInterfaceDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_AbstractInterfaceDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_AbstractInterfaceDef_Proxy_Impl &select_proxy (
    ::CORBA_AbstractInterfaceDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_AbstractInterfaceDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_AbstractInterfaceDef_Strategized_Proxy_Broker *the_TAO_CORBA_AbstractInterfaceDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_AbstractInterfaceDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_AbstractInterfaceDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_InterfaceDef_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_AbstractInterfaceDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_AbstractInterfaceDef_ThruPOA_Proxy_Impl (void) { }

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////

class POA_CORBA_LocalInterfaceDef;
typedef POA_CORBA_LocalInterfaceDef *POA_CORBA_LocalInterfaceDef_ptr;
// Forward Classes Declaration
class _TAO_CORBA_LocalInterfaceDef_ThruPOA_Proxy_Impl;
class _TAO_CORBA_LocalInterfaceDef_Strategized_Proxy_Broker;

class  POA_CORBA_LocalInterfaceDef : public virtual POA_CORBA_InterfaceDef
{
protected:
  POA_CORBA_LocalInterfaceDef (void);

public:
  POA_CORBA_LocalInterfaceDef (const POA_CORBA_LocalInterfaceDef& rhs);
  virtual ~POA_CORBA_LocalInterfaceDef (void);


  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  virtual void* _downcast (
      const char* logical_type_id
    );

  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  static void _interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      TAO_ENV_ARG_DECL
    );

  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      TAO_ENV_ARG_DECL
    );

  ::CORBA_LocalInterfaceDef *_this (
      TAO_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS);


  virtual const char* _interface_repository_id (void) const;

  static void _get_base_interfaces_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_base_interfaces_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void is_a_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_attribute_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_operation_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void lookup_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_contents_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_module_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_constant_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_struct_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_union_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_enum_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_alias_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_value_box_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_exception_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_native_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_abstract_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void create_local_interface_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_id_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _set_version_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_defined_in_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_absolute_name_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_containing_repository_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void describe_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void move_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_type_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void _get_def_kind_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);


  static void destroy_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *context
      TAO_ENV_ARG_DECL_WITH_DEFAULTS);



};


///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration
//

class  _TAO_CORBA_LocalInterfaceDef_Strategized_Proxy_Broker : public virtual ::_TAO_CORBA_LocalInterfaceDef_Proxy_Broker
{
public:
  _TAO_CORBA_LocalInterfaceDef_Strategized_Proxy_Broker (void);

  virtual ~_TAO_CORBA_LocalInterfaceDef_Strategized_Proxy_Broker (void);

  virtual ::_TAO_CORBA_LocalInterfaceDef_Proxy_Impl &select_proxy (
    ::CORBA_LocalInterfaceDef *object
    TAO_ENV_ARG_DECL
  );

private:

  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    TAO_ENV_ARG_DECL
  );

private:

  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_CORBA_LocalInterfaceDef_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];

  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_CORBA_LocalInterfaceDef_Strategized_Proxy_Broker *the_TAO_CORBA_LocalInterfaceDef_Strategized_Proxy_Broker (void);
};


//
//            End Strategized Proxy Broker Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

class  _TAO_CORBA_LocalInterfaceDef_ThruPOA_Proxy_Impl :
  public virtual ::_TAO_CORBA_LocalInterfaceDef_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl,
  public virtual ::_TAO_CORBA_InterfaceDef_ThruPOA_Proxy_Impl

{
public:
  _TAO_CORBA_LocalInterfaceDef_ThruPOA_Proxy_Impl (void);

  virtual ~_TAO_CORBA_LocalInterfaceDef_ThruPOA_Proxy_Impl (void) { }

};


//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////

#include "IFR_BasicS_T.h"

#if defined (__ACE_INLINE__)
#include "IFR_BasicS.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include "ace/post.h"
#endif /* ifndef */
