// -*- MPC -*-
// $Id$

project(*idl): taoidldefaults {
  idlflags    += -Wb,export_macro=TAO_LWFT_Export -Wb,export_include=lwft_export.h

  IDL_Files {
    LWFT.idl
    monitor.idl
  }
  
  IDL_Files {
    idlflags += -SS
    ObjectReferenceFactory.idl
  }
  
  custom_only = 1
}

project(*Common) : rtportableserver, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro, pi_server, interceptors, iorinterceptor {
  after += *idl
  sharedname = LWFT_Common
  dynamicflags = TAO_LWFT_BUILD_DLL
  
  IDL_Files {
  }
  
  Source_Files {
    AppOptions.cpp
    ArgPair.cpp
    AppSideMonitor_Thread.cpp
    AppSideMonitor_Handler.cpp
    AppSideReg.cpp
    Hello.cpp
    IOR_Interceptor.cpp
    LWFTC.cpp
    LWFTS.cpp
    monitorC.cpp
    monitorS.cpp
    ObjectReferenceFactory.cpp
    ObjectReferenceFactoryC.cpp
    ServerORBInitializer.cpp
    Timer.cpp
  }
}

project(*server2): rt_server, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro, pi_server, interceptors, iorinterceptor {
  after += *Common
  libs += LWFT_Common
  exename = server-2  
  
  IDL_Files {
  }
  
  Source_Files {
    server-2.cpp
  }
  
  Header_Files {
  }
}

project(*server1): rt_server, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro, pi_server, interceptors, iorinterceptor {
  after += *Common
  libs += LWFT_Common
  exename = server-1
  
  IDL_Files {
  }
  
  Source_Files {
    server-1.cpp
  }
  
  Header_Files {
  }
}

project(*client): rt_client, avoids_minimum_corba, avoids_corba_e_compact, avoids_corba_e_micro, pi_server, interceptors {
  after += *Common
  libs += LWFT_Common
  exename = client
  
  IDL_Files {
  }
  
  Source_Files {
    Agent.cpp
    client.cpp
    Client_ORBInitializer.cpp
    Client_Request_Interceptor.cpp
  }
}


project(*HostMonitor): taoserver, naming {
  after += *Common
  libs += LWFT_Common
  exename = host_monitor
  
  IDL_Files {
  }
  
  Source_Files {
    Failure_Handler.cpp
    HMOptions.cpp
    host_monitor.cpp
    HostMonitorImpl.cpp
    LinuxCPULoadCalculator.cpp
    Monitor_Thread.cpp
    RM_Proxy.cpp
    Utilization_Monitor.cpp
  }
}

project(*ReplicationManager): taoserver, naming {
  after += *Common
  libs += LWFT_Common
  exename = ReplicationManager
  
  IDL_Files {
  }
  
  Source_Files {
    ReplicationManager.cpp
    ReplicationManager_process.cpp
    RMOptions.cpp
  }
}
