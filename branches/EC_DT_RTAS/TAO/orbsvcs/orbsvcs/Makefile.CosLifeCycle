#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file Makefile.CosLifeCycle
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = Makefile.CosLifeCycle
DEPENDENCY_FILE  = .depend.Makefile.CosLifeCycle

## LIB may be set to empty later on in this file
LIB_UNCHECKED    = libTAO_CosLifeCycle.a
LIB              = $(LIB_UNCHECKED)

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = libTAO_CosLifeCycle.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

ifndef TAO_ROOT
  TAO_ROOT = $(ACE_ROOT)/TAO
endif
ifndef CIAO_ROOT
  CIAO_ROOT = $(TAO_ROOT)/CIAO
endif

TAO_IDL = ../../../bin/tao_idl
IDL_FILES = CosLifeCycle LifeCycleService
IDL_SRC = $(foreach ext, C.cpp S.cpp, $(foreach file, $(IDL_FILES), $(file)$(ext)))

LifeCycle = \
  CosLifeCycleC \
  CosLifeCycleS \
  LifeCycleServiceC \
  LifeCycleServiceS

FILES += \
         $(LifeCycle)

RESOURCES += \
  CosLifeCycle.rc

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -ldsui -lTAO_CosNaming -lTAO_Svc_Utils -lTAO_Messaging -lTAO_PortableServer -lTAO_IORInterceptor -lTAO_ObjRefTemplate -lTAO_Valuetype -lTAO_IORTable -lTAO -lACE
include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =
include $(TAO_ROOT)/rules.tao.GNU

# To build multiple executables in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/CosLifeCycle

all: $(TEMPINCDIR)

endif
OUTPUT_DIRECTORY = ../../../lib
all: $(OUTPUT_DIRECTORY)

$(OUTPUT_DIRECTORY):
	-@mkdir -p "$(OUTPUT_DIRECTORY)"

LIBCHECK = $(shell for lib in dsui TAO_CosNaming TAO_Svc_Utils TAO_Messaging TAO_PortableServer TAO_IORInterceptor TAO_ObjRefTemplate TAO_Valuetype TAO_IORTable TAO ACE; do for libpath in ../../../lib $(DATASTREAM_ROOT)/lib; do full="`echo $$libpath/lib$$lib.* $$libpath/$$lib.lib | tr ' ' '\012' | grep -v \* | head -1`"; if [ -r "$$full" ]; then break; else full=; fi; done; if [ -z "$$full" ]; then echo $$lib; exit; fi; done; echo 1)
ifneq ($(LIBCHECK), 1)
  LIB   =
  SHLIB =
  all: lib_warning
endif

ifeq (,$(TAO_ORBSVCS))
else
  ifeq (Naming, $(findstring Naming, $(TAO_ORBSVCS)))
  ifeq (LifeCycle, $(findstring LifeCycle, $(TAO_ORBSVCS)))
  else
    LIB   =
    SHLIB =
  endif
  else
    LIB   =
    SHLIB =
  endif
endif
ifneq (,$(RC))
  FILES += $(RESOURCES)
endif

LSRC   = $(addsuffix .cpp, $(FILES))

ifneq ($(SHLIB),)
all: idl_stubs

# This rule forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = CosLifeCycleC.cpp CosLifeCycleS.cpp LifeCycleServiceC.cpp LifeCycleServiceS.cpp
endif

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

INSTALL_CHECK = ../../../lib
ifeq ($(INSTALL_CHECK),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSLIB = $(PWD)
else
  INSLIB  = $(INSTALL_CHECK)
endif

include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
include $(TAO_ROOT)/taoconfig.mk

CPPFLAGS     += -I../../.. -I../.. -I../../tao -I../../orbsvcs -I$(DATASTREAM_ROOT)/include
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_LIFECYCLE_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  ifneq ($(LIB),)
    CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
  endif
endif


LDFLAGS      += -L../../../lib -L$(DATASTREAM_ROOT)/lib

TAO_IDLFLAGS += -Ge 1 -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h  -I../.. -I../../tao -I../../orbsvcs -Gv -Wb,export_macro=TAO_LifeCycle_Export -Wb,export_include=LifeCycle/lifecycle_export.h
#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo This project will not be built due to the following missing library:
	@echo $(LIBCHECK)


# IDL File Directory: .
# IDL File Directory: .

ifneq ($(ADDITIONAL_IDL_TARGETS),)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)
endif

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

.PRECIOUS: $(foreach ext, $(IDL_EXT), $(foreach file, $(IDL_FILES), $(file)$(ext)))

realclean: clean
	-$(RM) $(foreach ext, $(IDL_EXT), $(foreach file, $(IDL_FILES), $(file)$(ext)))
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

