#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file Makefile.PortableGroup
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = Makefile.PortableGroup
DEPENDENCY_FILE  = .depend.Makefile.PortableGroup

## LIB may be set to empty later on in this file
LIB_UNCHECKED    = libTAO_PortableGroup.a
LIB              = $(LIB_UNCHECKED)

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = libTAO_PortableGroup.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

ifndef TAO_ROOT
  TAO_ROOT = $(ACE_ROOT)/TAO
endif
ifndef CIAO_ROOT
  CIAO_ROOT = $(TAO_ROOT)/CIAO
endif

TAO_IDL = ../../../bin/tao_idl
IDL_FILES = miop PortableGroup
IDL_SRC = $(foreach ext, C.cpp S.cpp, $(foreach file, $(IDL_FILES), $(file)$(ext)))

PortableGroup = \
  miopC \
  miopS \
  PortableGroupC \
  PortableGroupS \
  PortableGroup_Simple_DSC \
  PortableGroup/PG_Default_Property_Validator \
  PortableGroup/PG_FactoryRegistry \
  PortableGroup/PG_Factory_Map \
  PortableGroup/PG_Factory_Set \
  PortableGroup/PG_GenericFactory \
  PortableGroup/PG_Group_Factory \
  PortableGroup/PG_Group_Guard \
  PortableGroup/PG_Location_Equal_To \
  PortableGroup/PG_Location_Hash \
  PortableGroup/PG_Location_Map \
  PortableGroup/PG_MemberInfo \
  PortableGroup/PG_Null_Property_Validator \
  PortableGroup/PG_ObjectGroupManager \
  PortableGroup/PG_ObjectGroup_Map \
  PortableGroup/PG_Object_Group \
  PortableGroup/PG_Object_Group_Manipulator \
  PortableGroup/PG_Operators \
  PortableGroup/PG_Properties_Encoder \
  PortableGroup/PG_Properties_Support \
  PortableGroup/PG_PropertyManager \
  PortableGroup/PG_Property_Set \
  PortableGroup/PG_Property_Utils \
  PortableGroup/PG_Utils \
  PortableGroup/POA_Hooks \
  PortableGroup/PortableGroup_Acceptor_Registry \
  PortableGroup/PortableGroup_Loader \
  PortableGroup/PortableGroup_ORBInitializer \
  PortableGroup/PortableGroup_Request_Dispatcher \
  PortableGroup/Portable_Group_Map \
  PortableGroup/UIPMC_Acceptor \
  PortableGroup/UIPMC_Connection_Handler \
  PortableGroup/UIPMC_Connector \
  PortableGroup/UIPMC_Endpoint \
  PortableGroup/UIPMC_Factory \
  PortableGroup/UIPMC_Message_Block_Data_Iterator \
  PortableGroup/UIPMC_Profile \
  PortableGroup/UIPMC_Transport \
  PortableGroup/UIPMC_Wait_Never

FILES += \
         $(PortableGroup)

RESOURCES += \
  PortableGroup.rc

VPATH = .:PortableGroup

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -ldsui -lTAO_IORManip -lTAO_CosNaming -lTAO_Svc_Utils -lTAO_Messaging -lTAO_PortableServer -lTAO_IORInterceptor -lTAO_ObjRefTemplate -lTAO_Valuetype -lTAO_IORTable -lTAO -lACE
include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =
include $(TAO_ROOT)/rules.tao.GNU

# To build multiple executables in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/PortableGroup

all: $(TEMPINCDIR)

endif
OUTPUT_DIRECTORY = ../../../lib
all: $(OUTPUT_DIRECTORY)

$(OUTPUT_DIRECTORY):
	-@mkdir -p "$(OUTPUT_DIRECTORY)"

LIBCHECK = $(shell for lib in dsui TAO_IORManip TAO_CosNaming TAO_Svc_Utils TAO_Messaging TAO_PortableServer TAO_IORInterceptor TAO_ObjRefTemplate TAO_Valuetype TAO_IORTable TAO ACE; do for libpath in ../../../lib $(DATASTREAM_ROOT)/lib; do full="`echo $$libpath/lib$$lib.* $$libpath/$$lib.lib | tr ' ' '\012' | grep -v \* | head -1`"; if [ -r "$$full" ]; then break; else full=; fi; done; if [ -z "$$full" ]; then echo $$lib; exit; fi; done; echo 1)
ifneq ($(minimum_corba),1)
ifneq ($(LIBCHECK), 1)
  LIB   =
  SHLIB =
  all: lib_warning
endif
else
  LIB   =
  SHLIB =
  all: avoid_warning
endif

ifeq (,$(TAO_ORBSVCS))
ifneq ($(minimum_corba),1)
else
  LIB   =
  SHLIB =
  all: avoid_warning
endif
else
ifneq ($(minimum_corba),1)
  ifeq (Naming, $(findstring Naming, $(TAO_ORBSVCS)))
  ifeq (PortableGroup, $(findstring PortableGroup, $(TAO_ORBSVCS)))
  else
    LIB   =
    SHLIB =
  endif
  else
    LIB   =
    SHLIB =
  endif
else
  LIB   =
  SHLIB =
  all: avoid_warning
endif
endif
ifneq (,$(RC))
  FILES += $(RESOURCES)
endif

LSRC   = $(addsuffix .cpp, $(FILES))

ifneq ($(SHLIB),)
all: idl_stubs

# This rule forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = miopC.cpp miopS.cpp PortableGroupC.cpp PortableGroupS.cpp PortableGroup_Simple_DSC.cpp PortableGroup/PG_Default_Property_Validator.cpp PortableGroup/PG_FactoryRegistry.cpp PortableGroup/PG_Factory_Map.cpp PortableGroup/PG_Factory_Set.cpp PortableGroup/PG_GenericFactory.cpp PortableGroup/PG_Group_Factory.cpp PortableGroup/PG_Group_Guard.cpp PortableGroup/PG_Location_Equal_To.cpp PortableGroup/PG_Location_Hash.cpp PortableGroup/PG_Location_Map.cpp PortableGroup/PG_MemberInfo.cpp PortableGroup/PG_Null_Property_Validator.cpp PortableGroup/PG_ObjectGroupManager.cpp PortableGroup/PG_ObjectGroup_Map.cpp PortableGroup/PG_Object_Group.cpp PortableGroup/PG_Object_Group_Manipulator.cpp PortableGroup/PG_Operators.cpp PortableGroup/PG_Properties_Encoder.cpp PortableGroup/PG_Properties_Support.cpp PortableGroup/PG_PropertyManager.cpp PortableGroup/PG_Property_Set.cpp PortableGroup/PG_Property_Utils.cpp PortableGroup/PG_Utils.cpp PortableGroup/POA_Hooks.cpp PortableGroup/PortableGroup_Acceptor_Registry.cpp PortableGroup/PortableGroup_Loader.cpp PortableGroup/PortableGroup_ORBInitializer.cpp PortableGroup/PortableGroup_Request_Dispatcher.cpp PortableGroup/Portable_Group_Map.cpp PortableGroup/UIPMC_Acceptor.cpp PortableGroup/UIPMC_Connection_Handler.cpp PortableGroup/UIPMC_Connector.cpp PortableGroup/UIPMC_Endpoint.cpp PortableGroup/UIPMC_Factory.cpp PortableGroup/UIPMC_Message_Block_Data_Iterator.cpp PortableGroup/UIPMC_Profile.cpp PortableGroup/UIPMC_Transport.cpp PortableGroup/UIPMC_Wait_Never.cpp
endif

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

INSTALL_CHECK = ../../../lib
ifeq ($(INSTALL_CHECK),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSLIB = $(PWD)
else
  INSLIB  = $(INSTALL_CHECK)
endif

include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
include $(TAO_ROOT)/taoconfig.mk

CPPFLAGS     += -I../../.. -I../.. -I../../tao -I../../orbsvcs -I$(DATASTREAM_ROOT)/include
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_PORTABLEGROUP_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  ifneq ($(LIB),)
    CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
  endif
endif


LDFLAGS      += -L../../../lib -L$(DATASTREAM_ROOT)/lib

TAO_IDLFLAGS += -Ge 1 -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h  -I../.. -I../../tao -I../../orbsvcs -Gv -Wb,export_macro=TAO_PortableGroup_Export -Wb,export_include=PortableGroup/portablegroup_export.h
#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo This project will not be built due to the following missing library:
	@echo $(LIBCHECK)

avoid_warning:
	@echo This project will not be built due to one of the following enabled features:
	@echo minimum_corba


# IDL File Directory: .
# IDL File Directory: .

ifneq ($(ADDITIONAL_IDL_TARGETS),)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)
endif

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

.PRECIOUS: $(foreach ext, $(IDL_EXT), $(foreach file, $(IDL_FILES), $(file)$(ext)))

realclean: clean
	-$(RM) $(foreach ext, $(IDL_EXT), $(foreach file, $(IDL_FILES), $(file)$(ext)))
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

