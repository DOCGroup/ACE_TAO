#----------------------------------------------------------------------------
#       GNU ACE Workspace
#
# @file Makefile
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------


MAKE_OPTIONS=$(shell echo $(MAKEFLAGS) | sed 's/--unix *//; s/ .*//')
ifeq ($(findstring k,$(MAKE_OPTIONS)),k)
  KEEP_GOING = 1
else
  KEEP_GOING = 0
endif


all: all.Svc_Utils all.Security all.ETCL all.CosNotification all.RT_Notification all.CosNaming \
     all.RTSched all.RTEvent all.RTSchedEvent all.RTOLDEvent all.RTKokyuEvent all.DsLogAdmin \
     all.CosTrading all.RTEventLogAdmin all.RTCosScheduling all.RTCORBAEvent all.FTORB_Utils all.PortableGroup \
     all.IFRService all.FtRtEvent all.FTRT_ClientORB all.FT_ServerORB all.FTRT_EventChannel all.FT_ClientORB \
     all.FaultTolerance all.CosEvent all.DsEventLogAdmin all.DsNotifyLogAdmin all.CosTime all.CosProperty \
     all.CosLoadBalancing all.CosLifeCycle all.CosConcurrency all.AV

debug: debug.Svc_Utils debug.Security debug.ETCL debug.CosNotification debug.RT_Notification \
       debug.CosNaming debug.RTSched debug.RTEvent debug.RTSchedEvent debug.RTOLDEvent \
       debug.RTKokyuEvent debug.DsLogAdmin debug.CosTrading debug.RTEventLogAdmin debug.RTCosScheduling \
       debug.RTCORBAEvent debug.FTORB_Utils debug.PortableGroup debug.IFRService debug.FtRtEvent \
       debug.FTRT_ClientORB debug.FT_ServerORB debug.FTRT_EventChannel debug.FT_ClientORB debug.FaultTolerance \
       debug.CosEvent debug.DsEventLogAdmin debug.DsNotifyLogAdmin debug.CosTime debug.CosProperty \
       debug.CosLoadBalancing debug.CosLifeCycle debug.CosConcurrency debug.AV

profile: profile.Svc_Utils profile.Security profile.ETCL profile.CosNotification \
         profile.RT_Notification profile.CosNaming profile.RTSched profile.RTEvent \
         profile.RTSchedEvent profile.RTOLDEvent profile.RTKokyuEvent profile.DsLogAdmin \
         profile.CosTrading profile.RTEventLogAdmin profile.RTCosScheduling profile.RTCORBAEvent \
         profile.FTORB_Utils profile.PortableGroup profile.IFRService profile.FtRtEvent \
         profile.FTRT_ClientORB profile.FT_ServerORB profile.FTRT_EventChannel profile.FT_ClientORB \
         profile.FaultTolerance profile.CosEvent profile.DsEventLogAdmin profile.DsNotifyLogAdmin \
         profile.CosTime profile.CosProperty profile.CosLoadBalancing profile.CosLifeCycle \
         profile.CosConcurrency profile.AV

optimize: optimize.Svc_Utils optimize.Security optimize.ETCL optimize.CosNotification \
          optimize.RT_Notification optimize.CosNaming optimize.RTSched optimize.RTEvent \
          optimize.RTSchedEvent optimize.RTOLDEvent optimize.RTKokyuEvent optimize.DsLogAdmin \
          optimize.CosTrading optimize.RTEventLogAdmin optimize.RTCosScheduling optimize.RTCORBAEvent \
          optimize.FTORB_Utils optimize.PortableGroup optimize.IFRService optimize.FtRtEvent \
          optimize.FTRT_ClientORB optimize.FT_ServerORB optimize.FTRT_EventChannel optimize.FT_ClientORB \
          optimize.FaultTolerance optimize.CosEvent optimize.DsEventLogAdmin optimize.DsNotifyLogAdmin \
          optimize.CosTime optimize.CosProperty optimize.CosLoadBalancing optimize.CosLifeCycle \
          optimize.CosConcurrency optimize.AV

install: install.Svc_Utils install.Security install.ETCL install.CosNotification \
         install.RT_Notification install.CosNaming install.RTSched install.RTEvent \
         install.RTSchedEvent install.RTOLDEvent install.RTKokyuEvent install.DsLogAdmin \
         install.CosTrading install.RTEventLogAdmin install.RTCosScheduling install.RTCORBAEvent \
         install.FTORB_Utils install.PortableGroup install.IFRService install.FtRtEvent \
         install.FTRT_ClientORB install.FT_ServerORB install.FTRT_EventChannel install.FT_ClientORB \
         install.FaultTolerance install.CosEvent install.DsEventLogAdmin install.DsNotifyLogAdmin \
         install.CosTime install.CosProperty install.CosLoadBalancing install.CosLifeCycle \
         install.CosConcurrency install.AV

deinstall: deinstall.Svc_Utils deinstall.Security deinstall.ETCL deinstall.CosNotification \
           deinstall.RT_Notification deinstall.CosNaming deinstall.RTSched deinstall.RTEvent \
           deinstall.RTSchedEvent deinstall.RTOLDEvent deinstall.RTKokyuEvent deinstall.DsLogAdmin \
           deinstall.CosTrading deinstall.RTEventLogAdmin deinstall.RTCosScheduling deinstall.RTCORBAEvent \
           deinstall.FTORB_Utils deinstall.PortableGroup deinstall.IFRService deinstall.FtRtEvent \
           deinstall.FTRT_ClientORB deinstall.FT_ServerORB deinstall.FTRT_EventChannel deinstall.FT_ClientORB \
           deinstall.FaultTolerance deinstall.CosEvent deinstall.DsEventLogAdmin deinstall.DsNotifyLogAdmin \
           deinstall.CosTime deinstall.CosProperty deinstall.CosLoadBalancing deinstall.CosLifeCycle \
           deinstall.CosConcurrency deinstall.AV

clean: clean.Svc_Utils clean.Security clean.ETCL clean.CosNotification clean.RT_Notification \
       clean.CosNaming clean.RTSched clean.RTEvent clean.RTSchedEvent clean.RTOLDEvent \
       clean.RTKokyuEvent clean.DsLogAdmin clean.CosTrading clean.RTEventLogAdmin clean.RTCosScheduling \
       clean.RTCORBAEvent clean.FTORB_Utils clean.PortableGroup clean.IFRService clean.FtRtEvent \
       clean.FTRT_ClientORB clean.FT_ServerORB clean.FTRT_EventChannel clean.FT_ClientORB clean.FaultTolerance \
       clean.CosEvent clean.DsEventLogAdmin clean.DsNotifyLogAdmin clean.CosTime clean.CosProperty \
       clean.CosLoadBalancing clean.CosLifeCycle clean.CosConcurrency clean.AV

realclean: realclean.Svc_Utils realclean.Security realclean.ETCL realclean.CosNotification \
           realclean.RT_Notification realclean.CosNaming realclean.RTSched realclean.RTEvent \
           realclean.RTSchedEvent realclean.RTOLDEvent realclean.RTKokyuEvent realclean.DsLogAdmin \
           realclean.CosTrading realclean.RTEventLogAdmin realclean.RTCosScheduling realclean.RTCORBAEvent \
           realclean.FTORB_Utils realclean.PortableGroup realclean.IFRService realclean.FtRtEvent \
           realclean.FTRT_ClientORB realclean.FT_ServerORB realclean.FTRT_EventChannel realclean.FT_ClientORB \
           realclean.FaultTolerance realclean.CosEvent realclean.DsEventLogAdmin realclean.DsNotifyLogAdmin \
           realclean.CosTime realclean.CosProperty realclean.CosLoadBalancing realclean.CosLifeCycle \
           realclean.CosConcurrency realclean.AV

clobber: clobber.Svc_Utils clobber.Security clobber.ETCL clobber.CosNotification \
         clobber.RT_Notification clobber.CosNaming clobber.RTSched clobber.RTEvent \
         clobber.RTSchedEvent clobber.RTOLDEvent clobber.RTKokyuEvent clobber.DsLogAdmin \
         clobber.CosTrading clobber.RTEventLogAdmin clobber.RTCosScheduling clobber.RTCORBAEvent \
         clobber.FTORB_Utils clobber.PortableGroup clobber.IFRService clobber.FtRtEvent \
         clobber.FTRT_ClientORB clobber.FT_ServerORB clobber.FTRT_EventChannel clobber.FT_ClientORB \
         clobber.FaultTolerance clobber.CosEvent clobber.DsEventLogAdmin clobber.DsNotifyLogAdmin \
         clobber.CosTime clobber.CosProperty clobber.CosLoadBalancing clobber.CosLifeCycle \
         clobber.CosConcurrency clobber.AV

depend: depend.Svc_Utils depend.Security depend.ETCL depend.CosNotification depend.RT_Notification \
        depend.CosNaming depend.RTSched depend.RTEvent depend.RTSchedEvent depend.RTOLDEvent \
        depend.RTKokyuEvent depend.DsLogAdmin depend.CosTrading depend.RTEventLogAdmin depend.RTCosScheduling \
        depend.RTCORBAEvent depend.FTORB_Utils depend.PortableGroup depend.IFRService depend.FtRtEvent \
        depend.FTRT_ClientORB depend.FT_ServerORB depend.FTRT_EventChannel depend.FT_ClientORB depend.FaultTolerance \
        depend.CosEvent depend.DsEventLogAdmin depend.DsNotifyLogAdmin depend.CosTime depend.CosProperty \
        depend.CosLoadBalancing depend.CosLifeCycle depend.CosConcurrency depend.AV

rcs_info: rcs_info.Svc_Utils rcs_info.Security rcs_info.ETCL rcs_info.CosNotification \
          rcs_info.RT_Notification rcs_info.CosNaming rcs_info.RTSched rcs_info.RTEvent \
          rcs_info.RTSchedEvent rcs_info.RTOLDEvent rcs_info.RTKokyuEvent rcs_info.DsLogAdmin \
          rcs_info.CosTrading rcs_info.RTEventLogAdmin rcs_info.RTCosScheduling rcs_info.RTCORBAEvent \
          rcs_info.FTORB_Utils rcs_info.PortableGroup rcs_info.IFRService rcs_info.FtRtEvent \
          rcs_info.FTRT_ClientORB rcs_info.FT_ServerORB rcs_info.FTRT_EventChannel rcs_info.FT_ClientORB \
          rcs_info.FaultTolerance rcs_info.CosEvent rcs_info.DsEventLogAdmin rcs_info.DsNotifyLogAdmin \
          rcs_info.CosTime rcs_info.CosProperty rcs_info.CosLoadBalancing rcs_info.CosLifeCycle \
          rcs_info.CosConcurrency rcs_info.AV

idl_stubs: idl_stubs.Svc_Utils idl_stubs.Security idl_stubs.ETCL idl_stubs.CosNotification \
           idl_stubs.RT_Notification idl_stubs.CosNaming idl_stubs.RTSched idl_stubs.RTEvent \
           idl_stubs.RTSchedEvent idl_stubs.RTOLDEvent idl_stubs.RTKokyuEvent idl_stubs.DsLogAdmin \
           idl_stubs.CosTrading idl_stubs.RTEventLogAdmin idl_stubs.RTCosScheduling idl_stubs.RTCORBAEvent \
           idl_stubs.FTORB_Utils idl_stubs.PortableGroup idl_stubs.IFRService idl_stubs.FtRtEvent \
           idl_stubs.FTRT_ClientORB idl_stubs.FT_ServerORB idl_stubs.FTRT_EventChannel idl_stubs.FT_ClientORB \
           idl_stubs.FaultTolerance idl_stubs.CosEvent idl_stubs.DsEventLogAdmin idl_stubs.DsNotifyLogAdmin \
           idl_stubs.CosTime idl_stubs.CosProperty idl_stubs.CosLoadBalancing idl_stubs.CosLifeCycle \
           idl_stubs.CosConcurrency idl_stubs.AV

Svc_Utils: all.Svc_Utils
.PHONY: Svc_Utils

%.Svc_Utils:
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.Svc_Utils -C . $(*);
else
	@$(MAKE) -f Makefile.Svc_Utils -C . $(*);
endif

Security: all.Security
.PHONY: Security

%.Security:
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.Security -C . $(*);
else
	@$(MAKE) -f Makefile.Security -C . $(*);
endif

ETCL: all.ETCL
.PHONY: ETCL

%.ETCL:
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.ETCL -C . $(*);
else
	@$(MAKE) -f Makefile.ETCL -C . $(*);
endif

CosNotification: all.CosNotification
.PHONY: CosNotification

%.CosNotification: %.Svc_Utils %.ETCL
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.CosNotification -C . $(*);
else
	@$(MAKE) -f Makefile.CosNotification -C . $(*);
endif

RT_Notification: all.RT_Notification
.PHONY: RT_Notification

%.RT_Notification: %.Svc_Utils %.ETCL %.CosNotification
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.RT_Notification -C . $(*);
else
	@$(MAKE) -f Makefile.RT_Notification -C . $(*);
endif

CosNaming: all.CosNaming
.PHONY: CosNaming

%.CosNaming: %.Svc_Utils
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.CosNaming -C . $(*);
else
	@$(MAKE) -f Makefile.CosNaming -C . $(*);
endif

RTSched: all.RTSched
.PHONY: RTSched

%.RTSched: %.Svc_Utils %.CosNaming
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.RTSched -C . $(*);
else
	@$(MAKE) -f Makefile.RTSched -C . $(*);
endif

RTEvent: all.RTEvent
.PHONY: RTEvent

%.RTEvent: %.Svc_Utils
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.RTEvent -C . $(*);
else
	@$(MAKE) -f Makefile.RTEvent -C . $(*);
endif

RTSchedEvent: all.RTSchedEvent
.PHONY: RTSchedEvent

%.RTSchedEvent: %.Svc_Utils %.CosNaming %.RTSched %.RTEvent
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.RTSchedEvent -C . $(*);
else
	@$(MAKE) -f Makefile.RTSchedEvent -C . $(*);
endif

RTOLDEvent: all.RTOLDEvent
.PHONY: RTOLDEvent

%.RTOLDEvent: %.Svc_Utils %.CosNaming %.RTSched %.RTEvent
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.RTOLDEvent -C . $(*);
else
	@$(MAKE) -f Makefile.RTOLDEvent -C . $(*);
endif

RTKokyuEvent: all.RTKokyuEvent
.PHONY: RTKokyuEvent

%.RTKokyuEvent: %.Svc_Utils %.CosNaming %.RTSched %.RTEvent
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.RTKokyuEvent -C . $(*);
else
	@$(MAKE) -f Makefile.RTKokyuEvent -C . $(*);
endif

DsLogAdmin: all.DsLogAdmin
.PHONY: DsLogAdmin

%.DsLogAdmin: %.Svc_Utils %.ETCL %.CosNaming
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.DsLogAdmin -C . $(*);
else
	@$(MAKE) -f Makefile.DsLogAdmin -C . $(*);
endif

CosTrading: all.CosTrading
.PHONY: CosTrading

%.CosTrading: %.Svc_Utils
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.CosTrading -C . $(*);
else
	@$(MAKE) -f Makefile.CosTrading -C . $(*);
endif

RTEventLogAdmin: all.RTEventLogAdmin
.PHONY: RTEventLogAdmin

%.RTEventLogAdmin: %.Svc_Utils %.ETCL %.CosNaming %.RTSched %.RTEvent %.DsLogAdmin %.CosTrading
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.RTEventLogAdmin -C . $(*);
else
	@$(MAKE) -f Makefile.RTEventLogAdmin -C . $(*);
endif

RTCosScheduling: all.RTCosScheduling
.PHONY: RTCosScheduling

%.RTCosScheduling:
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.RTCosScheduling -C . $(*);
else
	@$(MAKE) -f Makefile.RTCosScheduling -C . $(*);
endif

RTCORBAEvent: all.RTCORBAEvent
.PHONY: RTCORBAEvent

%.RTCORBAEvent: %.Svc_Utils %.CosNaming %.RTEvent
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.RTCORBAEvent -C . $(*);
else
	@$(MAKE) -f Makefile.RTCORBAEvent -C . $(*);
endif

FTORB_Utils: all.FTORB_Utils
.PHONY: FTORB_Utils

%.FTORB_Utils:
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.FTORB_Utils -C . $(*);
else
	@$(MAKE) -f Makefile.FTORB_Utils -C . $(*);
endif

PortableGroup: all.PortableGroup
.PHONY: PortableGroup

%.PortableGroup: %.Svc_Utils %.CosNaming %.FTORB_Utils
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.PortableGroup -C . $(*);
else
	@$(MAKE) -f Makefile.PortableGroup -C . $(*);
endif

IFRService: all.IFRService
.PHONY: IFRService

%.IFRService: %.Svc_Utils
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.IFRService -C . $(*);
else
	@$(MAKE) -f Makefile.IFRService -C . $(*);
endif

FtRtEvent: all.FtRtEvent
.PHONY: FtRtEvent

%.FtRtEvent: %.Svc_Utils %.CosNaming %.RTEvent %.FTORB_Utils
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.FtRtEvent -C . $(*);
else
	@$(MAKE) -f Makefile.FtRtEvent -C . $(*);
endif

FTRT_ClientORB: all.FTRT_ClientORB
.PHONY: FTRT_ClientORB

%.FTRT_ClientORB:
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.FTRT_ClientORB -C . $(*);
else
	@$(MAKE) -f Makefile.FTRT_ClientORB -C . $(*);
endif

FT_ServerORB: all.FT_ServerORB
.PHONY: FT_ServerORB

%.FT_ServerORB: %.Svc_Utils %.CosNaming %.FTORB_Utils %.PortableGroup
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.FT_ServerORB -C . $(*);
else
	@$(MAKE) -f Makefile.FT_ServerORB -C . $(*);
endif

FTRT_EventChannel: all.FTRT_EventChannel
.PHONY: FTRT_EventChannel

%.FTRT_EventChannel: %.Svc_Utils %.CosNaming %.RTEvent %.FTORB_Utils %.FtRtEvent %.FT_ServerORB
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.FTRT_EventChannel -C . $(*);
else
	@$(MAKE) -f Makefile.FTRT_EventChannel -C . $(*);
endif

FT_ClientORB: all.FT_ClientORB
.PHONY: FT_ClientORB

%.FT_ClientORB: %.Svc_Utils %.CosNaming %.FTORB_Utils %.PortableGroup %.FT_ServerORB
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.FT_ClientORB -C . $(*);
else
	@$(MAKE) -f Makefile.FT_ClientORB -C . $(*);
endif

FaultTolerance: all.FaultTolerance
.PHONY: FaultTolerance

%.FaultTolerance: %.Svc_Utils %.ETCL %.CosNotification %.CosNaming %.FTORB_Utils %.PortableGroup %.FT_ServerORB %.FT_ClientORB
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.FaultTolerance -C . $(*);
else
	@$(MAKE) -f Makefile.FaultTolerance -C . $(*);
endif

CosEvent: all.CosEvent
.PHONY: CosEvent

%.CosEvent: %.Svc_Utils %.CosNotification %.CosNaming
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.CosEvent -C . $(*);
else
	@$(MAKE) -f Makefile.CosEvent -C . $(*);
endif

DsEventLogAdmin: all.DsEventLogAdmin
.PHONY: DsEventLogAdmin

%.DsEventLogAdmin: %.Svc_Utils %.ETCL %.CosNaming %.DsLogAdmin %.CosEvent
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.DsEventLogAdmin -C . $(*);
else
	@$(MAKE) -f Makefile.DsEventLogAdmin -C . $(*);
endif

DsNotifyLogAdmin: all.DsNotifyLogAdmin
.PHONY: DsNotifyLogAdmin

%.DsNotifyLogAdmin: %.Svc_Utils %.ETCL %.CosNotification %.CosNaming %.DsLogAdmin %.CosEvent %.DsEventLogAdmin
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.DsNotifyLogAdmin -C . $(*);
else
	@$(MAKE) -f Makefile.DsNotifyLogAdmin -C . $(*);
endif

CosTime: all.CosTime
.PHONY: CosTime

%.CosTime: %.Svc_Utils %.CosNaming
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.CosTime -C . $(*);
else
	@$(MAKE) -f Makefile.CosTime -C . $(*);
endif

CosProperty: all.CosProperty
.PHONY: CosProperty

%.CosProperty:
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.CosProperty -C . $(*);
else
	@$(MAKE) -f Makefile.CosProperty -C . $(*);
endif

CosLoadBalancing: all.CosLoadBalancing
.PHONY: CosLoadBalancing

%.CosLoadBalancing: %.Svc_Utils %.CosNaming %.PortableGroup
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.CosLoadBalancing -C . $(*);
else
	@$(MAKE) -f Makefile.CosLoadBalancing -C . $(*);
endif

CosLifeCycle: all.CosLifeCycle
.PHONY: CosLifeCycle

%.CosLifeCycle: %.Svc_Utils %.CosNaming
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.CosLifeCycle -C . $(*);
else
	@$(MAKE) -f Makefile.CosLifeCycle -C . $(*);
endif

CosConcurrency: all.CosConcurrency
.PHONY: CosConcurrency

%.CosConcurrency:
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.CosConcurrency -C . $(*);
else
	@$(MAKE) -f Makefile.CosConcurrency -C . $(*);
endif

AV: all.AV
.PHONY: AV

%.AV: %.Svc_Utils %.CosNaming %.CosProperty
ifeq ($(KEEP_GOING),1)
	-@$(MAKE) -f Makefile.AV -C . $(*);
else
	@$(MAKE) -f Makefile.AV -C . $(*);
endif


reverseclean: realclean.AV realclean.CosConcurrency realclean.CosLifeCycle realclean.CosLoadBalancing \
              realclean.CosProperty realclean.CosTime realclean.DsNotifyLogAdmin realclean.DsEventLogAdmin \
              realclean.CosEvent realclean.FaultTolerance realclean.FT_ClientORB realclean.FTRT_EventChannel \
              realclean.FT_ServerORB realclean.FTRT_ClientORB realclean.FtRtEvent realclean.IFRService \
              realclean.PortableGroup realclean.FTORB_Utils realclean.RTCORBAEvent realclean.RTCosScheduling \
              realclean.RTEventLogAdmin realclean.CosTrading realclean.DsLogAdmin realclean.RTKokyuEvent \
              realclean.RTOLDEvent realclean.RTSchedEvent realclean.RTEvent realclean.RTSched \
              realclean.CosNaming realclean.RT_Notification realclean.CosNotification realclean.ETCL \
              realclean.Security realclean.Svc_Utils

project_name_list:
	@echo Svc_Utils
	@echo Security
	@echo ETCL
	@echo CosNotification
	@echo RT_Notification
	@echo CosNaming
	@echo RTSched
	@echo RTEvent
	@echo RTSchedEvent
	@echo RTOLDEvent
	@echo RTKokyuEvent
	@echo DsLogAdmin
	@echo CosTrading
	@echo RTEventLogAdmin
	@echo RTCosScheduling
	@echo RTCORBAEvent
	@echo FTORB_Utils
	@echo PortableGroup
	@echo IFRService
	@echo FtRtEvent
	@echo FTRT_ClientORB
	@echo FT_ServerORB
	@echo FTRT_EventChannel
	@echo FT_ClientORB
	@echo FaultTolerance
	@echo CosEvent
	@echo DsEventLogAdmin
	@echo DsNotifyLogAdmin
	@echo CosTime
	@echo CosProperty
	@echo CosLoadBalancing
	@echo CosLifeCycle
	@echo CosConcurrency
	@echo AV
