#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file Makefile.CosNotification
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = Makefile.CosNotification
DEPENDENCY_FILE  = .depend.Makefile.CosNotification

## LIB may be set to empty later on in this file
LIB_UNCHECKED    = libTAO_CosNotification.a
LIB              = $(LIB_UNCHECKED)

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = libTAO_CosNotification.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

ifndef TAO_ROOT
  TAO_ROOT = $(ACE_ROOT)/TAO
endif
ifndef CIAO_ROOT
  CIAO_ROOT = $(TAO_ROOT)/CIAO
endif

TAO_IDL = ../../../bin/tao_idl
IDL_FILES = CosEventComm CosEventChannelAdmin CosNotification CosNotifyComm CosNotifyFilter CosNotifyChannelAdmin NotifyExt Event_Forwarder
IDL_SRC = $(foreach ext, C.cpp S.cpp, $(foreach file, $(IDL_FILES), $(file)$(ext)))

Notify = \
  CosEventCommC \
  CosEventCommS \
  CosEventChannelAdminC \
  CosEventChannelAdminS \
  CosNotificationC \
  CosNotificationS \
  CosNotifyCommC \
  CosNotifyCommS \
  CosNotifyFilterC \
  CosNotifyFilterS \
  CosNotifyChannelAdminC \
  CosNotifyChannelAdminS \
  NotifyExtC \
  NotifyExtS \
  Event_ForwarderC \
  Event_ForwarderS \
  Notify/Admin \
  Notify/AdminProperties \
  Notify/Buffering_Strategy \
  Notify/Builder \
  Notify/Consumer \
  Notify/ConsumerAdmin \
  Notify/CosNotify_Initializer \
  Notify/CosNotify_Service \
  Notify/Default_Factory \
  Notify/ETCL_Filter \
  Notify/ETCL_FilterFactory \
  Notify/Event \
  Notify/EventChannel \
  Notify/EventChannelFactory \
  Notify/EventType \
  Notify/EventTypeSeq \
  Notify/Event_Manager \
  Notify/FilterAdmin \
  Notify/ID_Factory \
  Notify/Method_Request \
  Notify/Method_Request_Dispatch \
  Notify/Method_Request_Event \
  Notify/Method_Request_Lookup \
  Notify/Method_Request_Shutdown \
  Notify/Method_Request_Updates \
  Notify/Notify_Constraint_Interpreter \
  Notify/Notify_Constraint_Visitors \
  Notify/Notify_Default_Collection_Factory \
  Notify/Notify_Default_CO_Factory \
  Notify/Notify_Default_EMO_Factory \
  Notify/Notify_Default_POA_Factory \
  Notify/Notify_EventChannelFactory_i \
  Notify/Notify_Extensions \
  Notify/Object \
  Notify/Peer \
  Notify/POA_Helper \
  Notify/Properties \
  Notify/PropertySeq \
  Notify/Property_Boolean \
  Notify/Proxy \
  Notify/ProxyConsumer \
  Notify/ProxySupplier \
  Notify/QoSProperties \
  Notify/Reactive_Task \
  Notify/Refcountable \
  Notify/Subscription_Change_Worker \
  Notify/Supplier \
  Notify/SupplierAdmin \
  Notify/ThreadPool_Task \
  Notify/Timer_Queue \
  Notify/Timer_Reactor \
  Notify/Worker_Task \
  Notify/Any/AnyEvent \
  Notify/Any/CosEC_ProxyPushConsumer \
  Notify/Any/CosEC_ProxyPushSupplier \
  Notify/Any/ProxyPushConsumer \
  Notify/Any/ProxyPushSupplier \
  Notify/Any/PushConsumer \
  Notify/Any/PushSupplier \
  Notify/Sequence/Batch_Buffering_Strategy \
  Notify/Sequence/SequenceProxyPushConsumer \
  Notify/Sequence/SequenceProxyPushSupplier \
  Notify/Sequence/SequencePushConsumer \
  Notify/Sequence/SequencePushSupplier \
  Notify/Structured/StructuredEvent \
  Notify/Structured/StructuredProxyPushConsumer \
  Notify/Structured/StructuredProxyPushSupplier \
  Notify/Structured/StructuredPushConsumer \
  Notify/Structured/StructuredPushSupplier

FILES += \
         $(Notify)

RESOURCES += \
  CosNotification.rc

VPATH = .:Notify:Notify/Any:Notify/Sequence:Notify/Structured

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -ldsui -lTAO_DynamicAny -lTAO_ETCL -lTAO_Svc_Utils -lTAO_PortableServer -lTAO_IORInterceptor -lTAO_ObjRefTemplate -lTAO_Valuetype -lTAO -lACE
include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =
include $(TAO_ROOT)/rules.tao.GNU

# To build multiple executables in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/CosNotification

all: $(TEMPINCDIR)

endif
OUTPUT_DIRECTORY = ../../../lib
all: $(OUTPUT_DIRECTORY)

$(OUTPUT_DIRECTORY):
	-@mkdir -p "$(OUTPUT_DIRECTORY)"

LIBCHECK = $(shell for lib in dsui TAO_DynamicAny TAO_ETCL TAO_Svc_Utils TAO_PortableServer TAO_IORInterceptor TAO_ObjRefTemplate TAO_Valuetype TAO ACE; do for libpath in ../../../lib $(DATASTREAM_ROOT)/lib; do full="`echo $$libpath/lib$$lib.* $$libpath/$$lib.lib | tr ' ' '\012' | grep -v \* | head -1`"; if [ -r "$$full" ]; then break; else full=; fi; done; if [ -z "$$full" ]; then echo $$lib; exit; fi; done; echo 1)
ifneq ($(LIBCHECK), 1)
  LIB   =
  SHLIB =
  all: lib_warning
endif

ifeq (,$(TAO_ORBSVCS))
else
  ifeq (Notify, $(findstring Notify, $(TAO_ORBSVCS)))
  else
    LIB   =
    SHLIB =
  endif
endif
ifneq (,$(RC))
  FILES += $(RESOURCES)
endif

LSRC   = $(addsuffix .cpp, $(FILES))

ifneq ($(SHLIB),)
all: idl_stubs

# This rule forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = CosEventCommC.cpp CosEventCommS.cpp CosEventChannelAdminC.cpp CosEventChannelAdminS.cpp CosNotificationC.cpp CosNotificationS.cpp CosNotifyCommC.cpp CosNotifyCommS.cpp CosNotifyFilterC.cpp CosNotifyFilterS.cpp CosNotifyChannelAdminC.cpp CosNotifyChannelAdminS.cpp NotifyExtC.cpp NotifyExtS.cpp Event_ForwarderC.cpp Event_ForwarderS.cpp Notify/Admin.cpp Notify/AdminProperties.cpp Notify/Buffering_Strategy.cpp Notify/Builder.cpp Notify/Consumer.cpp Notify/ConsumerAdmin.cpp Notify/CosNotify_Initializer.cpp Notify/CosNotify_Service.cpp Notify/Default_Factory.cpp Notify/ETCL_Filter.cpp Notify/ETCL_FilterFactory.cpp Notify/Event.cpp Notify/EventChannel.cpp Notify/EventChannelFactory.cpp Notify/EventType.cpp Notify/EventTypeSeq.cpp Notify/Event_Manager.cpp Notify/FilterAdmin.cpp Notify/ID_Factory.cpp Notify/Method_Request.cpp Notify/Method_Request_Dispatch.cpp Notify/Method_Request_Event.cpp Notify/Method_Request_Lookup.cpp Notify/Method_Request_Shutdown.cpp Notify/Method_Request_Updates.cpp Notify/Notify_Constraint_Interpreter.cpp Notify/Notify_Constraint_Visitors.cpp Notify/Notify_Default_Collection_Factory.cpp Notify/Notify_Default_CO_Factory.cpp Notify/Notify_Default_EMO_Factory.cpp Notify/Notify_Default_POA_Factory.cpp Notify/Notify_EventChannelFactory_i.cpp Notify/Notify_Extensions.cpp Notify/Object.cpp Notify/Peer.cpp Notify/POA_Helper.cpp Notify/Properties.cpp Notify/PropertySeq.cpp Notify/Property_Boolean.cpp Notify/Proxy.cpp Notify/ProxyConsumer.cpp Notify/ProxySupplier.cpp Notify/QoSProperties.cpp Notify/Reactive_Task.cpp Notify/Refcountable.cpp Notify/Subscription_Change_Worker.cpp Notify/Supplier.cpp Notify/SupplierAdmin.cpp Notify/ThreadPool_Task.cpp Notify/Timer_Queue.cpp Notify/Timer_Reactor.cpp Notify/Worker_Task.cpp Notify/Any/AnyEvent.cpp Notify/Any/CosEC_ProxyPushConsumer.cpp Notify/Any/CosEC_ProxyPushSupplier.cpp Notify/Any/ProxyPushConsumer.cpp Notify/Any/ProxyPushSupplier.cpp Notify/Any/PushConsumer.cpp Notify/Any/PushSupplier.cpp Notify/Sequence/Batch_Buffering_Strategy.cpp Notify/Sequence/SequenceProxyPushConsumer.cpp Notify/Sequence/SequenceProxyPushSupplier.cpp Notify/Sequence/SequencePushConsumer.cpp Notify/Sequence/SequencePushSupplier.cpp Notify/Structured/StructuredEvent.cpp Notify/Structured/StructuredProxyPushConsumer.cpp Notify/Structured/StructuredProxyPushSupplier.cpp Notify/Structured/StructuredPushConsumer.cpp Notify/Structured/StructuredPushSupplier.cpp
endif

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

INSTALL_CHECK = ../../../lib
ifeq ($(INSTALL_CHECK),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSLIB = $(PWD)
else
  INSLIB  = $(INSTALL_CHECK)
endif

include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
include $(TAO_ROOT)/taoconfig.mk

CPPFLAGS     += -I../../.. -I../.. -I../../tao -I../../orbsvcs -I../../orbsvcs/orbsvcs -I$(DATASTREAM_ROOT)/include
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_NOTIFY_BUILD_DLL -DTAO_EVENT_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  ifneq ($(LIB),)
    CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
  endif
endif


LDFLAGS      += -L../../../lib -L$(DATASTREAM_ROOT)/lib

TAO_IDLFLAGS += -Ge 1 -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h  -I../.. -I../../tao -I../../orbsvcs -Gv -Wb,export_macro=TAO_Event_Export -Wb,export_include=CosEvent/event_export.h
#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo This project will not be built due to the following missing library:
	@echo $(LIBCHECK)


# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .

ifneq ($(ADDITIONAL_IDL_TARGETS),)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)
endif

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

.PRECIOUS: $(foreach ext, $(IDL_EXT), $(foreach file, $(IDL_FILES), $(file)$(ext)))

realclean: clean
	-$(RM) $(foreach ext, $(IDL_EXT), $(foreach file, $(IDL_FILES), $(file)$(ext)))
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

