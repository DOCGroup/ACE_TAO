#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file Makefile.IFRService
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = Makefile.IFRService
DEPENDENCY_FILE  = .depend.Makefile.IFRService

## LIB may be set to empty later on in this file
LIB_UNCHECKED    = libTAO_IFRService.a
LIB              = $(LIB_UNCHECKED)

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = libTAO_IFRService.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

ifndef TAO_ROOT
  TAO_ROOT = $(ACE_ROOT)/TAO
endif
ifndef CIAO_ROOT
  CIAO_ROOT = $(TAO_ROOT)/CIAO
endif

IFRService = \
  IFRService/AbstractInterfaceDef_i \
  IFRService/AliasDef_i \
  IFRService/ArrayDef_i \
  IFRService/AttributeDef_i \
  IFRService/ComponentContainer_i \
  IFRService/ComponentDef_i \
  IFRService/ComponentModuleDef_i \
  IFRService/ComponentRepository_i \
  IFRService/ConstantDef_i \
  IFRService/ConsumesDef_i \
  IFRService/Contained_i \
  IFRService/Container_i \
  IFRService/EmitsDef_i \
  IFRService/EnumDef_i \
  IFRService/EventDef_i \
  IFRService/EventPortDef_i \
  IFRService/ExceptionDef_i \
  IFRService/ExtAbstractInterfaceDef_i \
  IFRService/ExtAttributeDef_i \
  IFRService/ExtInterfaceDef_i \
  IFRService/ExtLocalInterfaceDef_i \
  IFRService/ExtValueDef_i \
  IFRService/FactoryDef_i \
  IFRService/FinderDef_i \
  IFRService/FixedDef_i \
  IFRService/HomeDef_i \
  IFRService/IDLType_i \
  IFRService/IFR_BaseS \
  IFRService/IFR_BasicS \
  IFRService/IFR_ComponentsS \
  IFRService/IFR_ExtendedS \
  IFRService/IFR_Service_Loader \
  IFRService/IFR_Service_Utils \
  IFRService/IRObject_i \
  IFRService/InterfaceAttrExtension_i \
  IFRService/InterfaceDef_i \
  IFRService/LocalInterfaceDef_i \
  IFRService/ModuleDef_i \
  IFRService/NativeDef_i \
  IFRService/OperationDef_i \
  IFRService/Options \
  IFRService/PrimitiveDef_i \
  IFRService/ProvidesDef_i \
  IFRService/PublishesDef_i \
  IFRService/Repository_i \
  IFRService/SequenceDef_i \
  IFRService/StringDef_i \
  IFRService/StructDef_i \
  IFRService/TypedefDef_i \
  IFRService/UnionDef_i \
  IFRService/UsesDef_i \
  IFRService/ValueBoxDef_i \
  IFRService/ValueDef_i \
  IFRService/ValueMemberDef_i \
  IFRService/WstringDef_i \
  IFRService/tmplinst

FILES += \
         $(IFRService)

RESOURCES += \
  IFRService.rc

VPATH = .:IFRService

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -ldsui -lTAO_IORTable -lTAO_Svc_Utils -lTAO_PortableServer -lTAO_IORInterceptor -lTAO_ObjRefTemplate -lTAO_Valuetype -lTAO_TypeCodeFactory -lTAO_IFR_Client -lTAO -lACE
include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =
include $(TAO_ROOT)/rules.tao.GNU

# To build multiple executables in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/IFRService

all: $(TEMPINCDIR)

endif
OUTPUT_DIRECTORY = ../../../lib
all: $(OUTPUT_DIRECTORY)

$(OUTPUT_DIRECTORY):
	-@mkdir -p "$(OUTPUT_DIRECTORY)"

LIBCHECK = $(shell for lib in dsui TAO_IORTable TAO_Svc_Utils TAO_PortableServer TAO_IORInterceptor TAO_ObjRefTemplate TAO_Valuetype TAO_TypeCodeFactory TAO_IFR_Client TAO ACE; do for libpath in ../../../lib $(DATASTREAM_ROOT)/lib; do full="`echo $$libpath/lib$$lib.* $$libpath/$$lib.lib | tr ' ' '\012' | grep -v \* | head -1`"; if [ -r "$$full" ]; then break; else full=; fi; done; if [ -z "$$full" ]; then echo $$lib; exit; fi; done; echo 1)
ifneq ($(minimum_corba),1)
ifneq ($(LIBCHECK), 1)
  LIB   =
  SHLIB =
  all: lib_warning
endif
else
  LIB   =
  SHLIB =
  all: avoid_warning
endif

ifeq (,$(TAO_ORBSVCS))
ifneq ($(minimum_corba),1)
else
  LIB   =
  SHLIB =
  all: avoid_warning
endif
else
ifneq ($(minimum_corba),1)
  ifeq (IFRService, $(findstring IFRService, $(TAO_ORBSVCS)))
  else
    LIB   =
    SHLIB =
  endif
else
  LIB   =
  SHLIB =
  all: avoid_warning
endif
endif
ifneq (,$(RC))
  FILES += $(RESOURCES)
endif

LSRC   = $(addsuffix .cpp, $(FILES))

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

INSTALL_CHECK = ../../../lib
ifeq ($(INSTALL_CHECK),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSLIB = $(PWD)
else
  INSLIB  = $(INSTALL_CHECK)
endif

include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
include $(TAO_ROOT)/taoconfig.mk

CPPFLAGS     += -I../../.. -I../.. -I../../tao -I../../orbsvcs -I$(DATASTREAM_ROOT)/include
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_IFRSERVICE_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  ifneq ($(LIB),)
    CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
  endif
endif


LDFLAGS      += -L../../../lib -L$(DATASTREAM_ROOT)/lib

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo This project will not be built due to the following missing library:
	@echo $(LIBCHECK)

avoid_warning:
	@echo This project will not be built due to one of the following enabled features:
	@echo minimum_corba


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

