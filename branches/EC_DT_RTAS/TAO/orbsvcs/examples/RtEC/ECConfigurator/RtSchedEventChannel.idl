// $Id$

#ifndef RTSCHEDEVENTCHANNEL_IDL
#define RTSCHEDEVENTCHANNEL_IDL

#include "orbsvcs/RtecScheduler.idl"
#include "orbsvcs/RtecEventComm.idl"
#include "orbsvcs/RtecEventChannelAdmin.idl"

#pragma prefix ""

module RtEventChannelAdmin
{
  typedef RtecScheduler::handle_t handle_t;

  typedef RtecScheduler::Criticality_t Criticality_t;
  typedef RtecScheduler::Time Time;
  typedef RtecScheduler::Period_t Period_t;
  typedef RtecScheduler::Importance_t Importance_t;
  typedef RtecScheduler::Quantum_t Quantum_t;
  typedef RtecScheduler::Threads_t Threads_t;
  typedef RtecScheduler::Info_Type_t Info_Type_t;
  typedef long Phase_t; // 100 of nanoseconds
  typedef RtecEventComm::_EventType Event_Type;
  typedef RtecEventComm::EventSourceID EventSourceID;

  struct SchedInfo {
    Criticality_t criticality;
    Time wc_time;
    Time typical_time;
    Time cached_time;
    Period_t period;
    Phase_t phase;
    Importance_t importance;
    Quantum_t quantum;
    Threads_t threads;
    Info_Type_t info_type;

    Event_Type type;
  };

  interface RtSchedEventChannel
  {
    void start()
      raises (RtecScheduler::UNKNOWN_TASK,
              RtecScheduler::INTERNAL,
              RtecScheduler::SYNCHRONIZATION_FAILURE);

    void notify_gateway_connection();

    void set_start_time(in Time start_time);

    RtecEventChannelAdmin::EventChannel event_channel();
    RtecScheduler::Scheduler scheduler();
  };
};

#endif
