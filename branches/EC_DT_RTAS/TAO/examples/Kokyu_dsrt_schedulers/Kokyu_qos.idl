
/**
 * @file Kokyu_qos.pidl
 *
 * $Id$
 *
 * @brief Pre-compiled IDL source to help with the service context
 *        propagation of dynamic scheduling parameters using Kokyu
 *
 *   This file was used to generate the code in Kokyu_qosC.{h,i,cpp}.
 *   The steps to regenerate the code are as follows:
 *
 *   1. Run the tao_idl compiler on the pidl file.  The command used for
 *   this is:
 *
 *     tao_idl -I $TAO_ROOT -Ge 1 Kokyu_qos.pidl
 *
 *   2. Then apply the patches in Kokyu_qosC.h.diff to the generated code.
 *   The patch will replace the inclusion of RTCORBAC.h and RTSchedulerC.h 
 *   with RTCORBA.h and RTScheduler.h respectively.
 *
 * Apply patches using the following command:
 *
 *   patch < Kokyu_qosC.h.diff
 *
 * Note: The diff was generated in the following way:
 *
 *   Run the idl compiler as in step 1.
 *   cp Kokyu_qosC.h Kokyu_qosC.h.orig
 *   Modify Kokyu_qosC.h with changes described in step 2.
 *   diff -wBbu Kokyu_qosC.h.orig Kokyu_qosC.h > Kokyu_qosC.h.diff
 *
 */

#ifndef _KOKYU_DSRT_QOS_PIDL_
#define _KOKYU_DSRT_QOS_PIDL_

#include <TimeBase.pidl>
#include <tao/RTCORBA/RTCORBA.pidl>

#pragma prefix "omg.org"

module Kokyu
{
  typedef sequence<octet> GuidType;

  struct Svc_Ctxt_DSRT_QoS
  {
    GuidType guid;
    long importance;
    long criticality;
    RTCORBA::Priority desired_priority;
    TimeBase::TimeT deadline;
    TimeBase::TimeT estimated_initial_execution_time;
    TimeBase::TimeT period;
    long task_id;
    long id;
    long pid;
    long long tid;
//    And deadline info in QoS is a subdeadline for a subtask or a task deadline.
  };
};

#endif /* KOKYU_DSRT_QOS_PIDL */
