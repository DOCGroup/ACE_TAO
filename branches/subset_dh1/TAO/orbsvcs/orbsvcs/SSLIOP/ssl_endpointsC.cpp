// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:291


#include "ssl_endpointsC.h"
#include "tao/CDR.h"
#include "tao/Null_RefCount_Policy.h"
#include "tao/TypeCode_Constants.h"
#include "tao/Alias_TypeCode_Static.h"
#include "tao/Sequence_TypeCode_Static.h"
#include "tao/String_TypeCode_Static.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from
// be\be_visitor_arg_traits.cpp:69

// Arg traits specializations.
namespace TAO
{
}


// TAO_IDL - Generated from 
// be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_TAO_SSLENDPOINTSEQUENCE_CS_)
#define _TAO_SSLENDPOINTSEQUENCE_CS_

TAO_SSLEndpointSequence::TAO_SSLEndpointSequence (void)
{}

TAO_SSLEndpointSequence::TAO_SSLEndpointSequence (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        SSLIOP::SSL
      >
    (max)
{}

TAO_SSLEndpointSequence::TAO_SSLEndpointSequence (
    CORBA::ULong max,
    CORBA::ULong length,
    SSLIOP::SSL * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        SSLIOP::SSL
      >
    (max, length, buffer, release)
{}

TAO_SSLEndpointSequence::TAO_SSLEndpointSequence (
    const TAO_SSLEndpointSequence &seq
  )
  : TAO_Unbounded_Sequence<
        SSLIOP::SSL
      >
    (seq)
{}

TAO_SSLEndpointSequence::~TAO_SSLEndpointSequence (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be\be_visitor_typecode/alias_typecode.cpp:31



// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:925


#ifndef _TAO_TYPECODE_TAO_SSLEndpointSequence_GUARD
#define _TAO_TYPECODE_TAO_SSLEndpointSequence_GUARD
namespace TAO
{
  namespace TypeCode
  {
    TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
      TAO_SSLEndpointSequence_0 (
        CORBA::tk_sequence,
        &SSLIOP::_tc_SSL,
        0U);
      
    ::CORBA::TypeCode_ptr const tc_TAO_SSLEndpointSequence_0 =
      &TAO_SSLEndpointSequence_0;
    
  }
}


#endif /* _TAO_TYPECODE_TAO_SSLEndpointSequence_GUARD */
static TAO::TypeCode::Alias<char const *,
                            CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TAO_SSLEndpointSequence (
    CORBA::tk_alias,
    "IDL:TAO_SSLEndpointSequence:1.0",
    "TAO_SSLEndpointSequence",
    &TAO::TypeCode::tc_TAO_SSLEndpointSequence_0);
  
::CORBA::TypeCode_ptr const _tc_TAO_SSLEndpointSequence =
  &_tao_tc_TAO_SSLEndpointSequence;

// TAO_IDL - Generated from
// be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_TAO_SSLEndpointSequence_CPP_
#define _TAO_CDR_OP_TAO_SSLEndpointSequence_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TAO_SSLEndpointSequence &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TAO_SSLEndpointSequence &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      CORBA::Boolean _tao_marshal_flag = true;
      
      for (CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_TAO_SSLEndpointSequence_CPP_ */
