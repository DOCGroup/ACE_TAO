#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file Makefile.test_driver_lib
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = Makefile.test_driver_lib
DEPENDENCY_FILE  = .depend.Makefile.test_driver_lib
LIB              = libTest_Driver.a
SHLIB            = libTest_Driver.$(SOEXT)

ifndef TAO_ROOT
  TAO_ROOT = $(ACE_ROOT)/TAO
endif
ifndef CIAO_ROOT
  CIAO_ROOT = $(TAO_ROOT)/CIAO
endif

FILES = \
  Consumer \
  Supplier \
  TimeoutConsumer \
  TestConfig \
  Test_Handler \
  Config_Factory \
  Timer_Event_Handler \
  cpuload \
  ECConfig_Gateway

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lACEXML_Parser -lACEXML -lTAO_RTKokyuEvent -lKokyu -ldsui -lTAO_RTSched -lTAO_CosNaming -lTAO_IORTable -lTAO_RTEvent -lTAO_Svc_Utils -lTAO_Messaging -lTAO_PortableServer -lTAO_IORInterceptor -lTAO_ObjRefTemplate -lTAO_Valuetype -lTAO -lACE
include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =
include $(TAO_ROOT)/rules.tao.GNU

# To build multiple executables in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/test_driver_lib

all: $(TEMPINCDIR)

$(TEMPINCDIR):
	@-test -d $(TEMPINCDIR) || mkdir -p $(TEMPINCDIR) $(ACE_NUL_STDERR)

endif
OUTPUT_DIRECTORY = ../../../../../lib
all: $(OUTPUT_DIRECTORY)

$(OUTPUT_DIRECTORY):
	-@mkdir -p "$(OUTPUT_DIRECTORY)"

CURRENT_COMPONENTS := $(shell sh $(ACE_ROOT)/bin/ace_components --orbsvcs)
ifeq (Sched, $(findstring Sched, $(CURRENT_COMPONENTS)))
ifeq (Naming, $(findstring Naming, $(CURRENT_COMPONENTS)))
ifeq (RTEvent, $(findstring RTEvent, $(CURRENT_COMPONENTS)))
else
  LIB   =
  SHLIB =
  all: comp_warning
endif
else
  LIB   =
  SHLIB =
  all: comp_warning
endif
else
  LIB   =
  SHLIB =
  all: comp_warning
endif

ifeq (,$(TAO_ORBSVCS))
else
  ifeq (Sched, $(findstring Sched, $(TAO_ORBSVCS)))
  ifeq (Naming, $(findstring Naming, $(TAO_ORBSVCS)))
  ifeq (RTEvent, $(findstring RTEvent, $(TAO_ORBSVCS)))
  else
    LIB   =
    SHLIB =
  endif
  else
    LIB   =
    SHLIB =
  endif
  else
    LIB   =
    SHLIB =
  endif
endif

ifneq (,$(RC))
  FILES += $(RESOURCES)
endif

LSRC   = $(addsuffix .cpp, $(FILES))

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

INSTALL_CHECK = ../../../../../lib
ifeq ($(INSTALL_CHECK),.)
  INSLIB = $(PWD)
else
  INSLIB  = $(INSTALL_CHECK)
endif

include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
include $(TAO_ROOT)/taoconfig.mk

CPPFLAGS     += -I../../../../../ACEXML/common -I../../../../../Kokyu -I$(DATASTREAM_ROOT)/include -I../../../../orbsvcs -I../../../.. -I../../../../tao -I../../../../..
ifeq ($(static_libs),1)
  ifneq ($(LIB),)
    CPPFLAGS += -DTAO_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS -DACE_AS_STATIC_LIBS
  endif
endif


LDFLAGS      += -L$(DATASTREAM_ROOT)/lib -L../../../../../lib

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
comp_warning:
	@echo This project will not be built due to one of the following missing components:
	@echo Sched Naming RTEvent


realclean: clean 
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

