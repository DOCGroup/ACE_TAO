#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file Makefile.Kokyu_DSRT_Schedulers
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = Makefile.Kokyu_DSRT_Schedulers
DEPENDENCY_FILE  = .depend.Makefile.Kokyu_DSRT_Schedulers
LIB              = libKokyu_DSRT_Schedulers.a
SHLIB            = libKokyu_DSRT_Schedulers.$(SOEXT)

ifndef TAO_ROOT
  TAO_ROOT = $(ACE_ROOT)/TAO
endif
ifndef CIAO_ROOT
  CIAO_ROOT = $(TAO_ROOT)/CIAO
endif

FILES = \
  FP_Scheduler \
  MUF_Scheduler \
  EDF_Scheduler \
  MIF_Scheduler \
  Task_Stats \
  utils \
  Kokyu_qosC \
  FP_SchedulingC \
  MUF_SchedulingC \
  EDF_SchedulingC \
  MIF_SchedulingC

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lTAO_RTScheduler -lTAO_RTCORBA -lwrappers -lKokyu -ldsui -lTAO -lACE
include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =
include $(TAO_ROOT)/rules.tao.GNU

# To build multiple executables in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/Kokyu_DSRT_Schedulers

all: $(TEMPINCDIR)

$(TEMPINCDIR):
	@-test -d $(TEMPINCDIR) || mkdir -p $(TEMPINCDIR) $(ACE_NUL_STDERR)

endif
OUTPUT_DIRECTORY = ../../../lib
all: $(OUTPUT_DIRECTORY)

$(OUTPUT_DIRECTORY):
	-@mkdir -p "$(OUTPUT_DIRECTORY)"

CURRENT_COMPONENTS := $(shell sh $(ACE_ROOT)/bin/ace_components --orbsvcs)
ifeq ($(rt_corba),1)
else
  LIB   =
  SHLIB =
  all: require_warning
endif

ifeq (,$(TAO_ORBSVCS))
ifeq ($(rt_corba),1)
else
  LIB   =
  SHLIB =
  all: require_warning
endif
else
ifeq ($(rt_corba),1)
else
  LIB   =
  SHLIB =
  all: require_warning
endif
endif

ifneq (,$(RC))
  FILES += $(RESOURCES)
endif

LSRC   = $(addsuffix .cpp, $(FILES))
ifeq (,$(TAO_ORBSVCS))
else
endif

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

INSTALL_CHECK = ../../../lib
ifeq ($(INSTALL_CHECK),.)
  INSLIB = $(PWD)
else
  INSLIB  = $(INSTALL_CHECK)
endif

include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
include $(TAO_ROOT)/taoconfig.mk

CPPFLAGS     += -I../../../Kokyu -I../../orbsvcs -I../.. -I../../tao -I../../..

ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DKOKYU_DSRT_SCHEDULERS_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  ifneq ($(LIB),)
    CPPFLAGS += -DTAO_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS -DACE_AS_STATIC_LIBS
  endif
endif

# CPPFLAGS += -DKOKYU_DSRT_LOGGING
CPPFLAGS += -I$(DATASTREAM_ROOT)/include
LDFLAGS	+= -L../../../lib -L$(DATASTREAM_ROOT)/lib

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
require_warning:
	@echo This project will not be built due to one of the following missing features:
	@echo rt_corba

EDF_SCHEDULE_DSUI = edf_sched_dsui_families.h edf_sched_dsui_info.h edf_sched_dsui_table.h
DSUI_PARSE=$(DATASTREAM_ROOT)/bin/dsui-parse
edf_sched_dsui_families.h: EDF_Scheduler.dsui
	$(DSUI_PARSE) -n EDF_Scheduler.dsui -t edf_sched

realclean: clean
	-$(RM) $(EDF_SCHEDULE_DSUI)
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif


