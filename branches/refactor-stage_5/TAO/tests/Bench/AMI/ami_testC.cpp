// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:301


#include "ami_testC.h"
#include "tao/Stub.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Messaging/Messaging.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "ami_testC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:63

A::DidTheRightThing::DidTheRightThing (void)
  : CORBA::UserException (
        "IDL:A/DidTheRightThing:1.0",
        "DidTheRightThing"
      )
{
}

A::DidTheRightThing::~DidTheRightThing (void)
{
}

A::DidTheRightThing::DidTheRightThing (const ::A::DidTheRightThing &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->id = _tao_excp.id;
  this->whatDidTheRightThing = CORBA::string_dup (_tao_excp.whatDidTheRightThing.in ());
}

A::DidTheRightThing&
A::DidTheRightThing::operator= (const ::A::DidTheRightThing &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  this->id = _tao_excp.id;
  this->whatDidTheRightThing = CORBA::string_dup (_tao_excp.whatDidTheRightThing.in ());
  return *this;
}

void A::DidTheRightThing::_tao_any_destructor (void *_tao_void_pointer)
{
  DidTheRightThing *_tao_tmp_pointer = ACE_static_cast (DidTheRightThing*, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

A::DidTheRightThing *
A::DidTheRightThing::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:A/DidTheRightThing:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (DidTheRightThing *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *A::DidTheRightThing::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::A::DidTheRightThing, 0);
  return retval;
}

CORBA::Exception *
A::DidTheRightThing::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::A::DidTheRightThing (*this),
      0
    );
  return result;
}

void A::DidTheRightThing::_raise (void)
{
  TAO_RAISE (*this);
}

void A::DidTheRightThing::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}

void A::DidTheRightThing::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }

  ACE_THROW (CORBA::MARSHAL ());
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:66

A::DidTheRightThing::DidTheRightThing (
    CORBA::Long _tao_id,
    const char * _tao_whatDidTheRightThing
  )  : CORBA::UserException (
        "IDL:A/DidTheRightThing:1.0",
        "DidTheRightThing"
      )
{
  this->id = _tao_id;
  this->whatDidTheRightThing = CORBA::string_dup (_tao_whatDidTheRightThing);
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr A::DidTheRightThing::_type (void) const
{
  return ::A::_tc_DidTheRightThing;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_A_DidTheRightThing[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  27,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x412f4469),
  ACE_NTOHL (0x64546865),
  ACE_NTOHL (0x52696768),
  ACE_NTOHL (0x74546869),
  ACE_NTOHL (0x6e673a31),
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:A/DidTheRightThing:1.0
    17,
  ACE_NTOHL (0x44696454),
  ACE_NTOHL (0x68655269),
  ACE_NTOHL (0x67687454),
  ACE_NTOHL (0x68696e67),
  ACE_NTOHL (0x0),  // name = DidTheRightThing
  2, // member count
    3,
  ACE_NTOHL (0x69640000),  // name = id
    CORBA::tk_long,

  21,
  ACE_NTOHL (0x77686174),
  ACE_NTOHL (0x44696454),
  ACE_NTOHL (0x68655269),
  ACE_NTOHL (0x67687454),
  ACE_NTOHL (0x68696e67),
  ACE_NTOHL (0x0),  // name = whatDidTheRightThing
    CORBA::tk_string,
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_A_DidTheRightThing (
    CORBA::tk_except,
    sizeof (_oc_A_DidTheRightThing),
    (char *) &_oc_A_DidTheRightThing,
    0,
    sizeof (A::DidTheRightThing)
  );

namespace A
{
  ::CORBA::TypeCode_ptr _tc_DidTheRightThing =
    &_tc_TAO_tc_A_DidTheRightThing;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for A::AMI_Test.

A::AMI_Test_ptr
TAO::Objref_Traits<A::AMI_Test>::tao_duplicate (
    A::AMI_Test_ptr p
  )
{
  return A::AMI_Test::_duplicate (p);
}

void
TAO::Objref_Traits<A::AMI_Test>::tao_release (
    A::AMI_Test_ptr p
  )
{
  CORBA::release (p);
}

A::AMI_Test_ptr
TAO::Objref_Traits<A::AMI_Test>::tao_nil (void)
{
  return A::AMI_Test::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<A::AMI_Test>::tao_marshal (
    A::AMI_Test_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

int A::AMI_Test::_tao_class_id = 0;

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker *
(*A__TAO_AMI_Test_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:80

CORBA::Long A::AMI_Test::foo (
    CORBA::Long_out out_l,
    CORBA::Long in_l,
    const char * in_str
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
    , A::DidTheRightThing
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_Test_Proxy_Broker_ == 0)
    {
      A_AMI_Test_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<CORBA::Long>::stub_ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Long>::out_arg_val _tao_out_l (out_l);
  TAO::Arg_Traits<CORBA::Long>::in_arg_val _tao_in_l (in_l);
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_in_str (in_str);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_out_l,
      &_tao_in_l,
      &_tao_in_str
    };

  static TAO_Exception_Data
  _tao_A_AMI_Test_foo_exceptiondata [] =
    {
      {
        "IDL:A/DidTheRightThing:1.0",
        A::DidTheRightThing::_alloc,
        A::_tc_DidTheRightThing
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      4,
      "foo",
      3,
      this->the_TAO_AMI_Test_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_A_AMI_Test_foo_exceptiondata,
      1
      ACE_ENV_ARG_PARAMETER
    );
  ACE_CHECK_RETURN (_tao_retval.excp ());

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/ami_cs.cpp:72

void
A::AMI_Test::sendc_foo (
    AMI_AMI_TestHandler_ptr ami_handler,
    CORBA::Long in_l,
    const char * in_str
    ACE_ENV_ARG_DECL
  )
// @@Jeff, this is always a system exception
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_Test_Proxy_Broker_ == 0)
    {
      A_AMI_Test_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<CORBA::Long>::in_arg_val _tao_in_l (in_l);
  TAO::Arg_Traits<CORBA::Char *>::in_arg_val _tao_in_str (in_str);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_in_l,
      &_tao_in_str
    };

  // @@ Jeff, we don't need to generate exception data as we do for
  // synchronous calls.
  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "foo",
      3,
      this->the_TAO_AMI_Test_Proxy_Broker_);

  // @@ Jeff, note the use of ACE_CHECK;
  _tao_call.invoke (ami_handler,
                    &A::AMI_AMI_TestHandler::foo_reply_stub
                    ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;

  return;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:80

CORBA::Long A::AMI_Test::yadda (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_Test_Proxy_Broker_ == 0)
    {
      A_AMI_Test_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<CORBA::Long>::stub_ret_val _tao_retval;

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_yadda",
      10,
      this->the_TAO_AMI_Test_Proxy_Broker_);

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/ami_cs.cpp:72

void
A::AMI_Test::sendc_get_yadda (
    AMI_AMI_TestHandler_ptr ami_handler
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{

    if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_Test_Proxy_Broker_ == 0)
    {
      A_AMI_Test_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<CORBA::Long>::stub_ret_val _tao_retval;

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "_get_yadda",
      10,
      this->the_TAO_AMI_Test_Proxy_Broker_);

  _tao_call.invoke (ami_handler,
                    &A::AMI_AMI_TestHandler::get_yadda_reply_stub
                    ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;

  return;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:80

void A::AMI_Test::yadda (
    CORBA::Long yadda
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_Test_Proxy_Broker_ == 0)
    {
      A_AMI_Test_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::stub_ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Long>::in_arg_val _tao_yadda (yadda);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_yadda
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_yadda",
      10,
      this->the_TAO_AMI_Test_Proxy_Broker_
    );

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/ami_cs.cpp:72

void
A::AMI_Test::sendc_set_yadda (
    AMI_AMI_TestHandler_ptr ami_handler,
    CORBA::Long yadda
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_Test_Proxy_Broker_ == 0)
    {
      A_AMI_Test_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::stub_ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Long>::in_arg_val _tao_yadda (yadda);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_yadda
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "_set_yadda",
      10,
      this->the_TAO_AMI_Test_Proxy_Broker_);


  _tao_call.invoke (ami_handler,
                    &A::AMI_AMI_TestHandler::set_yadda_reply_stub
                    ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;

  return;

}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:80

void A::AMI_Test::shutdown (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_Test_Proxy_Broker_ == 0)
    {
      A_AMI_Test_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::stub_ret_val _tao_retval;

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "shutdown",
      8,
      this->the_TAO_AMI_Test_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

A::AMI_Test::AMI_Test (int collocated)
 : the_TAO_AMI_Test_Proxy_Broker_ (0)
{
  this->A_AMI_Test_setup_collocation (collocated);
}

void
A::AMI_Test::A_AMI_Test_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_AMI_Test_Proxy_Broker_ =
      ::A__TAO_AMI_Test_Proxy_Broker_Factory_function_pointer (this);
}

A::AMI_Test::~AMI_Test (void)
{}

void
A::AMI_Test::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_Test *_tao_tmp_pointer = ACE_static_cast (AMI_Test *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

A::AMI_Test_ptr
A::AMI_Test::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return ACE_NESTED_CLASS (A, AMI_Test)::_nil ();
    }

  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:A/AMI_Test:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (ACE_NESTED_CLASS (A, AMI_Test)::_nil ());

      if (is_a == 0)
        {
          return ACE_NESTED_CLASS (A, AMI_Test)::_nil ();
        }
    }

  return ACE_NESTED_CLASS (A, AMI_Test)::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

A::AMI_Test_ptr
A::AMI_Test::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return AMI_Test::_nil ();
    }

  AMI_Test_ptr default_proxy = AMI_Test::_nil ();

  // Code for lazily evaluated IOR's
  if (!obj->is_evaluated ())
    {
      ACE_NEW_RETURN (
          default_proxy,
          ::A::AMI_Test (
              obj->steal_ior (),
              obj->orb_core ()
            ),
          AMI_Test::_nil ()
        );

      return default_proxy;
    }

  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();

      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }

      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          A__TAO_AMI_Test_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::A::AMI_Test (
                  stub,
                  1,
                  obj->_servant ()
                ),
              AMI_Test::_nil ()
            );
        }

      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::A::AMI_Test (
                  stub,
                  0,
                  obj->_servant ()
                ),
              AMI_Test::_nil ()
            );
        }

      return default_proxy;
    }
  else
    return
      ACE_reinterpret_cast (
          AMI_Test_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &AMI_Test::_tao_class_id
                )
            )
        );
}

A::AMI_Test_ptr
A::AMI_Test::_duplicate (AMI_Test_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

CORBA::Boolean
A::AMI_Test::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:A/AMI_Test:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *A::AMI_Test::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::A, AMI_Test)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* A::AMI_Test::_interface_repository_id (void) const
{
  return "IDL:A/AMI_Test:1.0";
}

CORBA::Boolean
A::AMI_Test::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_A_AMI_Test[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  19,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x412f414d),
  ACE_NTOHL (0x495f5465),
  ACE_NTOHL (0x73743a31),
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:A/AMI_Test:1.0
    9,
  ACE_NTOHL (0x414d495f),
  ACE_NTOHL (0x54657374),
  ACE_NTOHL (0x0),  // name = AMI_Test
  };

static CORBA::TypeCode _tc_TAO_tc_A_AMI_Test (
    CORBA::tk_objref,
    sizeof (_oc_A_AMI_Test),
    (char *) &_oc_A_AMI_Test,
    0,
    sizeof (A::AMI_Test)
  );

namespace A
{
  ::CORBA::TypeCode_ptr _tc_AMI_Test =
    &_tc_TAO_tc_A_AMI_Test;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_A_AMI_AMI_TestExceptionHolder[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  38,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x412f414d),
  ACE_NTOHL (0x495f414d),
  ACE_NTOHL (0x495f5465),
  ACE_NTOHL (0x73744578),
  ACE_NTOHL (0x63657074),
  ACE_NTOHL (0x696f6e48),
  ACE_NTOHL (0x6f6c6465),
  ACE_NTOHL (0x723a312e),
  ACE_NTOHL (0x30000000),  // repository ID = IDL:A/AMI_AMI_TestExceptionHolder:1.0
    28,
  ACE_NTOHL (0x414d495f),
  ACE_NTOHL (0x414d495f),
  ACE_NTOHL (0x54657374),
  ACE_NTOHL (0x45786365),
  ACE_NTOHL (0x7074696f),
  ACE_NTOHL (0x6e486f6c),
  ACE_NTOHL (0x64657200),  // name = AMI_AMI_TestExceptionHolder
    0, // value modifier
  CORBA::tk_value, // typecode kind
  76, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    34,
    ACE_NTOHL (0x49444c3a),
    ACE_NTOHL (0x4d657373),
    ACE_NTOHL (0x6167696e),
    ACE_NTOHL (0x672f4578),
    ACE_NTOHL (0x63657074),
    ACE_NTOHL (0x696f6e48),
    ACE_NTOHL (0x6f6c6465),
    ACE_NTOHL (0x723a312e),
    ACE_NTOHL (0x30000000),  // repository ID = IDL:Messaging/ExceptionHolder:1.0
        16,
    ACE_NTOHL (0x45786365),
    ACE_NTOHL (0x7074696f),
    ACE_NTOHL (0x6e486f6c),
    ACE_NTOHL (0x64657200),  // name = ExceptionHolder
        0, // value modifier
    CORBA::tk_null, // no stateful base valuetype

0, // member count

0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_A_AMI_AMI_TestExceptionHolder (
    CORBA::tk_value,
    sizeof (_oc_A_AMI_AMI_TestExceptionHolder),
    (char *) &_oc_A_AMI_AMI_TestExceptionHolder,
    0,
    sizeof (A::AMI_AMI_TestExceptionHolder)
  );

namespace A
{
  ::CORBA::TypeCode_ptr _tc_AMI_AMI_TestExceptionHolder =
    &_tc_TAO_tc_A_AMI_AMI_TestExceptionHolder;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_cs.cpp:94

void
TAO::Value_Traits<A::AMI_AMI_TestExceptionHolder>::tao_add_ref (
    A::AMI_AMI_TestExceptionHolder * p
  )
{
  CORBA::add_ref (p);
}

void
TAO::Value_Traits<A::AMI_AMI_TestExceptionHolder>::tao_remove_ref (
    A::AMI_AMI_TestExceptionHolder * p
  )
{
  CORBA::remove_ref (p);
}

A::AMI_AMI_TestExceptionHolder *
A::AMI_AMI_TestExceptionHolder::_downcast (CORBA::ValueBase *v)
{
  if (v == 0)
    {
      return 0;
    }

  return (AMI_AMI_TestExceptionHolder *) v->_tao_obv_narrow ((ptrdiff_t) &_downcast);
}

const char *
A::AMI_AMI_TestExceptionHolder::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void *
#if defined (_MSC_VER)
A::AMI_AMI_TestExceptionHolder::A_AMI_AMI_TestExceptionHolder_tao_obv_narrow (ptrdiff_t type_id)
#else
A::AMI_AMI_TestExceptionHolder::_tao_obv_narrow (ptrdiff_t type_id)
#endif /* _MSC_VER */
{
  if (type_id == (ptrdiff_t) &_downcast)
    {
      return this;
    }

  void *rval = 0;

  if (rval == 0)
    {
#if defined (_MSC_VER)
      rval = this->Messaging_ExceptionHolder_tao_obv_narrow (type_id);
#else
      rval = this->Messaging::ExceptionHolder::_tao_obv_narrow (type_id);
#endif /* _MSC_VER */
    }

  return rval;
}

#if defined (_MSC_VER)
void *
A::AMI_AMI_TestExceptionHolder::_tao_obv_narrow (ptrdiff_t type_id)
{
  return this->A_AMI_AMI_TestExceptionHolder_tao_obv_narrow (type_id);
}
#endif /* _MSC_VER */

void
A::AMI_AMI_TestExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_AMI_TestExceptionHolder *_tao_tmp_pointer =
    ACE_static_cast (
        AMI_AMI_TestExceptionHolder *,
        _tao_void_pointer
      );
  CORBA::remove_ref (_tao_tmp_pointer);
}

CORBA::Boolean A::AMI_AMI_TestExceptionHolder::_tao_marshal_v (TAO_OutputCDR & strm)
{
  return this->_tao_marshal__A_AMI_AMI_TestExceptionHolder (strm);
}

CORBA::Boolean A::AMI_AMI_TestExceptionHolder::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  return this->_tao_unmarshal__A_AMI_AMI_TestExceptionHolder (strm);
}

CORBA::Boolean A::AMI_AMI_TestExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMI_AMI_TestExceptionHolder *&new_object
  )
{
  CORBA::ValueBase *base = 0;
  CORBA::ValueFactory_var factory;
  CORBA::Boolean retval =
    CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        factory.out (),
        base,
        AMI_AMI_TestExceptionHolder::_tao_obv_static_repository_id ()
      );

  if (retval == 0)
    {
      return 0;
    }

  if (factory.in () != 0)
    {
      base = factory->create_for_unmarshal ();

      if (base == 0)
        {
          return 0;  // %! except.?
        }

      retval = base->_tao_unmarshal_v (strm);

      if (retval == 0)
        {
          return 0;
        }
    }

  // Now base must be null or point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMI_AMI_TestExceptionHolder::_downcast (base);
  return retval;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for A::AMI_AMI_TestHandler.

A::AMI_AMI_TestHandler_ptr
TAO::Objref_Traits<A::AMI_AMI_TestHandler>::tao_duplicate (
    A::AMI_AMI_TestHandler_ptr p
  )
{
  return A::AMI_AMI_TestHandler::_duplicate (p);
}

void
TAO::Objref_Traits<A::AMI_AMI_TestHandler>::tao_release (
    A::AMI_AMI_TestHandler_ptr p
  )
{
  CORBA::release (p);
}

A::AMI_AMI_TestHandler_ptr
TAO::Objref_Traits<A::AMI_AMI_TestHandler>::tao_nil (void)
{
  return A::AMI_AMI_TestHandler::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<A::AMI_AMI_TestHandler>::tao_marshal (
    A::AMI_AMI_TestHandler_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

int A::AMI_AMI_TestHandler::_tao_class_id = 0;

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker *
(*A__TAO_AMI_AMI_TestHandler_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:80

void A::AMI_AMI_TestHandler::foo (
    CORBA::Long ami_return_val,
    CORBA::Long out_l
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_ == 0)
    {
      A_AMI_AMI_TestHandler_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::stub_ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Long>::in_arg_val _tao_ami_return_val (ami_return_val);
  TAO::Arg_Traits<CORBA::Long>::in_arg_val _tao_out_l (out_l);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_ami_return_val,
      &_tao_out_l
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      3,
      "foo",
      3,
      this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_
    );

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}
void
A::AMI_AMI_TestHandler::foo_reply_stub (
  TAO_InputCDR &_tao_in,
  Messaging::ReplyHandler_ptr _tao_reply_handler,
  CORBA::ULong reply_status
  ACE_ENV_ARG_DECL)
{
  // Retrieve Reply Handler object.
  A::AMI_AMI_TestHandler_var _tao_reply_handler_object =
    A::AMI_AMI_TestHandler::_narrow(_tao_reply_handler ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      CORBA::Long ami_return_val;
      CORBA::Long out_l;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val) &&
            (_tao_in >> out_l)
         ))
        ACE_THROW (CORBA::MARSHAL ());

      // Invoke the call back method.
      _tao_reply_handler_object->foo (

          ami_return_val,

          out_l
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();

      AMI_AMI_TestExceptionHolder_var exception_holder_var;
      ACE_NEW (
          exception_holder_var,
          OBV_A::_tao_AMI_AMI_TestExceptionHolder ()
        );

      CORBA::OctetSeq _tao_marshaled_exception (
          cdr->length (),
          cdr->length (),
          (unsigned char*) cdr->rd_ptr (),
          0
        );
      exception_holder_var->marshaled_exception (_tao_marshaled_exception);

      if (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION)
        exception_holder_var->is_system_exception (1);
      else
        exception_holder_var->is_system_exception (0);

      exception_holder_var->byte_order (_tao_in.byte_order ());

      _tao_reply_handler_object->foo_excep (
          exception_holder_var ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:80

void A::AMI_AMI_TestHandler::foo_excep (
    A::AMI_AMI_TestExceptionHolder * excep_holder
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_ == 0)
    {
      A_AMI_AMI_TestHandler_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::stub_ret_val _tao_retval;
  TAO::Arg_Traits<A::AMI_AMI_TestExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "foo_excep",
      9,
      this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_);

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:80

void A::AMI_AMI_TestHandler::get_yadda (
    CORBA::Long ami_return_val
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_ == 0)
    {
      A_AMI_AMI_TestHandler_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::stub_ret_val _tao_retval;
  TAO::Arg_Traits<CORBA::Long>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_ami_return_val
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "get_yadda",
      9,
      this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_
    );

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}
void
A::AMI_AMI_TestHandler::get_yadda_reply_stub (
  TAO_InputCDR &_tao_in,
  Messaging::ReplyHandler_ptr _tao_reply_handler,
  CORBA::ULong reply_status
  ACE_ENV_ARG_DECL)
{
  // Retrieve Reply Handler object.
  A::AMI_AMI_TestHandler_var _tao_reply_handler_object =
    A::AMI_AMI_TestHandler::_narrow(_tao_reply_handler ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      CORBA::Long ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        ACE_THROW (CORBA::MARSHAL ());

      // Invoke the call back method.
      _tao_reply_handler_object->get_yadda (

          ami_return_val
          ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();

      AMI_AMI_TestExceptionHolder_var exception_holder_var;
      ACE_NEW (
          exception_holder_var,
          OBV_A::_tao_AMI_AMI_TestExceptionHolder ()
        );

      CORBA::OctetSeq _tao_marshaled_exception (
          cdr->length (),
          cdr->length (),
          (unsigned char*) cdr->rd_ptr (),
          0
        );
      exception_holder_var->marshaled_exception (_tao_marshaled_exception);

      if (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION)
        exception_holder_var->is_system_exception (1);
      else
        exception_holder_var->is_system_exception (0);

      exception_holder_var->byte_order (_tao_in.byte_order ());

      _tao_reply_handler_object->get_yadda_excep (
          exception_holder_var ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:80

void A::AMI_AMI_TestHandler::get_yadda_excep (
    A::AMI_AMI_TestExceptionHolder * excep_holder
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_ == 0)
    {
      A_AMI_AMI_TestHandler_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::stub_ret_val _tao_retval;
  TAO::Arg_Traits<A::AMI_AMI_TestExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "get_yadda_excep",
      15,
      this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_
    );

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:80

void A::AMI_AMI_TestHandler::set_yadda (
    ACE_ENV_SINGLE_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_ == 0)
    {
      A_AMI_AMI_TestHandler_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::stub_ret_val _tao_retval;

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      1,
      "set_yadda",
      9,
      this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_
    );

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}
void
A::AMI_AMI_TestHandler::set_yadda_reply_stub (
  TAO_InputCDR &_tao_in,
  Messaging::ReplyHandler_ptr _tao_reply_handler,
  CORBA::ULong reply_status
  ACE_ENV_ARG_DECL)
{
  // Retrieve Reply Handler object.
  A::AMI_AMI_TestHandler_var _tao_reply_handler_object =
    A::AMI_AMI_TestHandler::_narrow(_tao_reply_handler ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->set_yadda (

          ACE_ENV_SINGLE_ARG_PARAMETER
        );
      ACE_CHECK;
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();

      AMI_AMI_TestExceptionHolder_var exception_holder_var;
      ACE_NEW (
          exception_holder_var,
          OBV_A::_tao_AMI_AMI_TestExceptionHolder ()
        );

      CORBA::OctetSeq _tao_marshaled_exception (
          cdr->length (),
          cdr->length (),
          (unsigned char*) cdr->rd_ptr (),
          0
        );
      exception_holder_var->marshaled_exception (_tao_marshaled_exception);

      if (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION)
        exception_holder_var->is_system_exception (1);
      else
        exception_holder_var->is_system_exception (0);

      exception_holder_var->byte_order (_tao_in.byte_order ());

      _tao_reply_handler_object->set_yadda_excep (
          exception_holder_var ACE_ENV_ARG_PARAMETER
        );
      ACE_CHECK;
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:80

void A::AMI_AMI_TestHandler::set_yadda_excep (
    A::AMI_AMI_TestExceptionHolder * excep_holder
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }

  if (this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_ == 0)
    {
      A_AMI_AMI_TestHandler_setup_collocation (
          this->ACE_NESTED_CLASS (CORBA, Object)::_is_collocated ()
        );
    }

  TAO::Arg_Traits<void>::stub_ret_val _tao_retval;
  TAO::Arg_Traits<A::AMI_AMI_TestExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_tao_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _tao_signature,
      2,
      "set_yadda_excep",
      15,
      this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_
    );

  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

A::AMI_AMI_TestHandler::AMI_AMI_TestHandler (int collocated)
 : the_TAO_AMI_AMI_TestHandler_Proxy_Broker_ (0)
{
  this->A_AMI_AMI_TestHandler_setup_collocation (collocated);
}

void
A::AMI_AMI_TestHandler::A_AMI_AMI_TestHandler_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_AMI_AMI_TestHandler_Proxy_Broker_ =
      ::A__TAO_AMI_AMI_TestHandler_Proxy_Broker_Factory_function_pointer (this);

  this->Messaging_ReplyHandler_setup_collocation (collocated);
}

A::AMI_AMI_TestHandler::~AMI_AMI_TestHandler (void)
{}

void
A::AMI_AMI_TestHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_AMI_TestHandler *_tao_tmp_pointer = ACE_static_cast (AMI_AMI_TestHandler *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

A::AMI_AMI_TestHandler_ptr
A::AMI_AMI_TestHandler::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  if (CORBA::is_nil (obj))
    {
      return ACE_NESTED_CLASS (A, AMI_AMI_TestHandler)::_nil ();
    }

  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a =
        obj->_is_a (
            "IDL:A/AMI_AMI_TestHandler:1.0"
            ACE_ENV_ARG_PARAMETER
          );
      ACE_CHECK_RETURN (ACE_NESTED_CLASS (A, AMI_AMI_TestHandler)::_nil ());

      if (is_a == 0)
        {
          return ACE_NESTED_CLASS (A, AMI_AMI_TestHandler)::_nil ();
        }
    }

  return ACE_NESTED_CLASS (A, AMI_AMI_TestHandler)::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

A::AMI_AMI_TestHandler_ptr
A::AMI_AMI_TestHandler::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return AMI_AMI_TestHandler::_nil ();
    }

  AMI_AMI_TestHandler_ptr default_proxy = AMI_AMI_TestHandler::_nil ();

  // Code for lazily evaluated IOR's
  if (!obj->is_evaluated ())
    {
      ACE_NEW_RETURN (
          default_proxy,
          ::A::AMI_AMI_TestHandler (
              obj->steal_ior (),
              obj->orb_core ()
            ),
          AMI_AMI_TestHandler::_nil ()
        );

      return default_proxy;
    }

  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();

      if (stub != 0)
        {
          stub->_incr_refcnt ();
        }

      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          A__TAO_AMI_AMI_TestHandler_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::A::AMI_AMI_TestHandler (
                  stub,
                  1,
                  obj->_servant ()
                ),
              AMI_AMI_TestHandler::_nil ()
            );
        }

      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::A::AMI_AMI_TestHandler (
                  stub,
                  0,
                  obj->_servant ()
                ),
              AMI_AMI_TestHandler::_nil ()
            );
        }

      return default_proxy;
    }
  else
    return
      ACE_reinterpret_cast (
          AMI_AMI_TestHandler_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptrdiff_t,
                  &AMI_AMI_TestHandler::_tao_class_id
                )
            )
        );
}

A::AMI_AMI_TestHandler_ptr
A::AMI_AMI_TestHandler::_duplicate (AMI_AMI_TestHandler_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }

  return obj;
}

CORBA::Boolean
A::AMI_AMI_TestHandler::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:Messaging/ReplyHandler:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:A/AMI_AMI_TestHandler:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

void *A::AMI_AMI_TestHandler::_tao_QueryInterface (ptrdiff_t type)
{
  void *retv = 0;

  if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &::Messaging::ReplyHandler::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                Messaging::ReplyHandler_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
              ptrdiff_t,
              &ACE_NESTED_CLASS (::A, AMI_AMI_TestHandler)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
               ptrdiff_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }

  if (retv != 0)
    {
      this->_add_ref ();
    }

  return retv;
}

const char* A::AMI_AMI_TestHandler::_interface_repository_id (void) const
{
  return "IDL:A/AMI_AMI_TestHandler:1.0";
}

CORBA::Boolean
A::AMI_AMI_TestHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_A_AMI_AMI_TestHandler[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a),
  ACE_NTOHL (0x412f414d),
  ACE_NTOHL (0x495f414d),
  ACE_NTOHL (0x495f5465),
  ACE_NTOHL (0x73744861),
  ACE_NTOHL (0x6e646c65),
  ACE_NTOHL (0x723a312e),
  ACE_NTOHL (0x30000000),  // repository ID = IDL:A/AMI_AMI_TestHandler:1.0
    20,
  ACE_NTOHL (0x414d495f),
  ACE_NTOHL (0x414d495f),
  ACE_NTOHL (0x54657374),
  ACE_NTOHL (0x48616e64),
  ACE_NTOHL (0x6c657200),  // name = AMI_AMI_TestHandler
  };

static CORBA::TypeCode _tc_TAO_tc_A_AMI_AMI_TestHandler (
    CORBA::tk_objref,
    sizeof (_oc_A_AMI_AMI_TestHandler),
    (char *) &_oc_A_AMI_AMI_TestHandler,
    0,
    sizeof (A::AMI_AMI_TestHandler)
  );

namespace A
{
  ::CORBA::TypeCode_ptr _tc_AMI_AMI_TestHandler =
    &_tc_TAO_tc_A_AMI_AMI_TestHandler;
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/valuetype_obv_cs.cpp:58

OBV_A::AMI_AMI_TestExceptionHolder::AMI_AMI_TestExceptionHolder (void)
{}

OBV_A::AMI_AMI_TestExceptionHolder::~AMI_AMI_TestExceptionHolder (void)
{}

CORBA::Boolean
OBV_A::AMI_AMI_TestExceptionHolder::_tao_marshal__A_AMI_AMI_TestExceptionHolder (TAO_OutputCDR &strm)
{
  return _tao_marshal_state (strm);
}

CORBA::Boolean
OBV_A::AMI_AMI_TestExceptionHolder::_tao_unmarshal__A_AMI_AMI_TestExceptionHolder (TAO_InputCDR &strm)
{
  return _tao_unmarshal_state (strm);
}OBV_A::_tao_AMI_AMI_TestExceptionHolder::_tao_AMI_AMI_TestExceptionHolder () { }

OBV_A::_tao_AMI_AMI_TestExceptionHolder::~_tao_AMI_AMI_TestExceptionHolder () { }

void
OBV_A::_tao_AMI_AMI_TestExceptionHolder::raise_foo(ACE_ENV_SINGLE_ARG_DECL)
{

  static TAO_Exception_Data exceptions_data [] =
  {
    {
      "IDL:A/DidTheRightThing:1.0",
      A::DidTheRightThing::_alloc,
      A::_tc_DidTheRightThing
    }
  };

  CORBA::ULong exceptions_count = 1;

  TAO_Messaging_Helper::exception_holder_raise (
    exceptions_data,
    exceptions_count,
    this->marshaled_exception ().get_buffer (),
    this->marshaled_exception ().length (),
    this->byte_order (),
    this->is_system_exception ()
    ACE_ENV_ARG_PARAMETER);
}

void
OBV_A::_tao_AMI_AMI_TestExceptionHolder::raise_get_yadda(ACE_ENV_SINGLE_ARG_DECL)
{

  TAO_Messaging_Helper::exception_holder_raise (
    0,
    0,
    this->marshaled_exception ().get_buffer (),
    this->marshaled_exception ().length (),
    this->byte_order (),
    this->is_system_exception ()
    ACE_ENV_ARG_PARAMETER);
}

void
OBV_A::_tao_AMI_AMI_TestExceptionHolder::raise_set_yadda(ACE_ENV_SINGLE_ARG_DECL)
{

  TAO_Messaging_Helper::exception_holder_raise (
    0,
    0,
    this->marshaled_exception ().get_buffer (),
    this->marshaled_exception ().length (),
    this->byte_order (),
    this->is_system_exception ()
    ACE_ENV_ARG_PARAMETER);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<A::DidTheRightThing>::demarshal_value (
    TAO_InputCDR & cdr
  )
{
  CORBA::String_var id;

  if ((cdr >> id.out ()) == 0)
    {
      return 0;
    }

  ACE_TRY_NEW_ENV
    {
      this->value_->_tao_decode (cdr ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      return 0;
    }
  ACE_ENDTRY;

  return 1;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const A::DidTheRightThing &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<A::DidTheRightThing>::insert_copy (
      _tao_any,
      A::DidTheRightThing::_tao_any_destructor,
      A::_tc_DidTheRightThing,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    A::DidTheRightThing *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<A::DidTheRightThing>::insert (
      _tao_any,
      A::DidTheRightThing::_tao_any_destructor,
      A::_tc_DidTheRightThing,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    A::DidTheRightThing *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const A::DidTheRightThing *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const A::DidTheRightThing *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<A::DidTheRightThing>::extract (
        _tao_any,
        A::DidTheRightThing::_tao_any_destructor,
        A::_tc_DidTheRightThing,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO::Any_Dual_Impl_T<A::DidTheRightThing>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO::Any_Dual_Impl_T<A::DidTheRightThing \>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    A::AMI_Test_ptr _tao_elem
  )
{
  A::AMI_Test_ptr _tao_objptr =
    A::AMI_Test::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    A::AMI_Test_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<A::AMI_Test>::insert (
      _tao_any,
      A::AMI_Test::_tao_any_destructor,
      A::_tc_AMI_Test,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    A::AMI_Test_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<A::AMI_Test>::extract (
        _tao_any,
        A::AMI_Test::_tao_any_destructor,
        A::_tc_AMI_Test,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_cs.cpp:57

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    A::AMI_AMI_TestExceptionHolder *_tao_elem
  )
{
  CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    A::AMI_AMI_TestExceptionHolder **_tao_elem
  )
{
  TAO::Any_Impl_T<A::AMI_AMI_TestExceptionHolder>::insert (
      _tao_any,
      A::AMI_AMI_TestExceptionHolder::_tao_any_destructor,
      A::_tc_AMI_AMI_TestExceptionHolder,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    A::AMI_AMI_TestExceptionHolder *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<A::AMI_AMI_TestExceptionHolder>::extract (
        _tao_any,
        A::AMI_AMI_TestExceptionHolder::_tao_any_destructor,
        A::_tc_AMI_AMI_TestExceptionHolder,
        _tao_elem
      );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    A::AMI_AMI_TestHandler_ptr _tao_elem
  )
{
  A::AMI_AMI_TestHandler_ptr _tao_objptr =
    A::AMI_AMI_TestHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    A::AMI_AMI_TestHandler_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<A::AMI_AMI_TestHandler>::insert (
      _tao_any,
      A::AMI_AMI_TestHandler::_tao_any_destructor,
      A::_tc_AMI_AMI_TestHandler,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    A::AMI_AMI_TestHandler_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<A::AMI_AMI_TestHandler>::extract (
        _tao_any,
        A::AMI_AMI_TestHandler::_tao_any_destructor,
        A::_tc_AMI_AMI_TestHandler,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const A::AMI_Test_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    A::AMI_Test_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;

    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }

    // Narrow to the right type.
    _tao_objref =
      A::AMI_Test::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

// TAO_IDL - Generated from
// be/be_valuetype.cpp:263

namespace CORBA
{
  void add_ref (A::AMI_AMI_TestExceptionHolder * vt)
  {
    if (vt != 0)
      {
        vt->_add_ref ();
      }
  }

  void
  remove_ref (A::AMI_AMI_TestExceptionHolder * vt)
  {
    if (vt != 0)
      {
        vt->_remove_ref ();
      }
  }
}
// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_cs.cpp:73

CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const A::AMI_AMI_TestExceptionHolder *_tao_valuetype
  )
{
  return
    CORBA::ValueBase::_tao_marshal (
        strm,
        ACE_const_cast (
            A::AMI_AMI_TestExceptionHolder *,
            _tao_valuetype
          ),
        (ptrdiff_t) &A::AMI_AMI_TestExceptionHolder::_downcast
      );
}

CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    A::AMI_AMI_TestExceptionHolder *&_tao_valuetype
  )
{
  return A::AMI_AMI_TestExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}

// TAO_IDL - Generated from
// be/be_visitor_valuetype/marshal_cs.cpp:44

CORBA::Boolean
OBV_A::AMI_AMI_TestExceptionHolder::_tao_marshal_state (TAO_OutputCDR &strm)
{
  if (! this->_tao_marshal__Messaging_ExceptionHolder (strm))
    {
      return 0;
    }

  if (
    1
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

CORBA::Boolean
OBV_A::AMI_AMI_TestExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &strm)
{
  if (! this->_tao_unmarshal__Messaging_ExceptionHolder (strm))
    {
      return 0;
    }

  if (
    1
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const A::AMI_AMI_TestHandler_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    A::AMI_AMI_TestHandler_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;

    if ((strm >> obj.inout ()) == 0)
      {
        return 0;
      }

    // Narrow to the right type.
    _tao_objref =
      A::AMI_AMI_TestHandler::_unchecked_narrow (
          obj.in ()
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}
