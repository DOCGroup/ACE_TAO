// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:151

#ifndef _TAO_IDL_AMI_TESTC_H_
#define _TAO_IDL_AMI_TESTC_H_

#include "tao/corba.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:63

namespace TAO
{
  class Collocation_Proxy_Broker;
}

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:48

namespace A
{

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:51

#if !defined (_A_DIDTHERIGHTTHING_CH_)
#define _A_DIDTHERIGHTTHING_CH_

  class  DidTheRightThing : public CORBA::UserException
  {
  public:

    CORBA::Long id;
    TAO_String_Manager whatDidTheRightThing;
    DidTheRightThing (void);
    DidTheRightThing (const DidTheRightThing &);
    ~DidTheRightThing (void);

    DidTheRightThing &operator= (const DidTheRightThing &);

    static void _tao_any_destructor (void *);

    static DidTheRightThing *_downcast (CORBA::Exception *);
    static CORBA::Exception *_alloc (void);

    virtual CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void);

    virtual void _tao_encode (
        TAO_OutputCDR &
        ACE_ENV_ARG_DECL
      ) const;

    virtual void _tao_decode (
        TAO_InputCDR &
        ACE_ENV_ARG_DECL
      );

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ctor.cpp:66

    DidTheRightThing (
        CORBA::Long _tao_id,
        const char * _tao_whatDidTheRightThing
      );

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ch.cpp:125

    virtual CORBA::TypeCode_ptr _type (void) const;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_DidTheRightThing;

#endif /* end #if !defined */

#if !defined (_A_AMI_AMI_TESTHANDLER___PTR_CH_)
#define _A_AMI_AMI_TESTHANDLER___PTR_CH_

  class AMI_AMI_TestHandler;
  typedef AMI_AMI_TestHandler *AMI_AMI_TestHandler_ptr;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_interface.cpp:601

#if !defined (_A_AMI_TEST__VAR_OUT_CH_)
#define _A_AMI_TEST__VAR_OUT_CH_

  class AMI_Test;
  typedef AMI_Test *AMI_Test_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_Test
      >
    AMI_Test_var;

  typedef
    TAO_Objref_Out_T<
        AMI_Test
      >
    AMI_Test_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:53

#if !defined (_A_AMI_TEST_CH_)
#define _A_AMI_TEST_CH_

  class  AMI_Test
    : public virtual CORBA::Object
  {
  public:
    typedef AMI_Test_ptr _ptr_type;
    typedef AMI_Test_var _var_type;
    static int _tao_class_id;

    // The static operations.
    static AMI_Test_ptr _duplicate (AMI_Test_ptr obj);

    static AMI_Test_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static AMI_Test_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static AMI_Test_ptr _nil (void)
      {
        return (AMI_Test_ptr)0;
      }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46

    virtual CORBA::Long foo (
        CORBA::Long_out out_l,
        CORBA::Long in_l,
        const char * in_str
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , A::DidTheRightThing
      ));

    // TAO_IDL - Generated from
    // be/be_visitor_operation/ami_ch.cpp:55

    virtual void sendc_foo (
        AMI_AMI_TestHandler_ptr ami_handler,
        CORBA::Long in_l,
        const char * in_str
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46

    virtual CORBA::Long yadda (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    // TAO_IDL - Generated from
    // be/be_visitor_operation/ami_ch.cpp:55

    virtual void sendc_get_yadda (
        AMI_AMI_TestHandler_ptr ami_handler
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46

    virtual void yadda (
        CORBA::Long yadda
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    // TAO_IDL - Generated from
    // be/be_visitor_operation/ami_ch.cpp:55

    virtual void sendc_set_yadda (
        AMI_AMI_TestHandler_ptr ami_handler,
        CORBA::Long yadda
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46

    virtual void shutdown (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:200

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void *_tao_QueryInterface (ptrdiff_t type);

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_Test_Proxy_Broker_;

  protected:
    AMI_Test (int collocated = 0);

    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void A_AMI_Test_setup_collocation (int collocated);

    AMI_Test (IOP::IOR *ior,
      TAO_ORB_Core *orb_core = 0);

    AMI_Test (
        TAO_Stub *objref,
        CORBA::Boolean _tao_collocated = 0,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0
      );
    virtual ~AMI_Test (void);

  private:
    AMI_Test (const AMI_Test &);
    void operator= (const AMI_Test &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_AMI_Test;

  // TAO_IDL - Generated from
  // be/be_valuetype.cpp:300



#if !defined (_A_AMI_AMI_TESTEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _A_AMI_AMI_TESTEXCEPTIONHOLDER__VAR_OUT_CH_

  class AMI_AMI_TestExceptionHolder;
  typedef
    TAO_Value_Var_T<
        AMI_AMI_TestExceptionHolder
      >
    AMI_AMI_TestExceptionHolder_var;

  typedef
    TAO_Value_Out_T<
        AMI_AMI_TestExceptionHolder
      >
    AMI_AMI_TestExceptionHolder_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_ch.cpp:56

#if !defined (_A_AMI_AMI_TESTEXCEPTIONHOLDER_CH_)
#define _A_AMI_AMI_TESTEXCEPTIONHOLDER_CH_

  class  AMI_AMI_TestExceptionHolder
    : public virtual Messaging::ExceptionHolder
  {
  public:
    typedef AMI_AMI_TestExceptionHolder_var _var_type;
    static AMI_AMI_TestExceptionHolder* _downcast (CORBA::ValueBase* );
    // The address of static _downcast is implicit used as type id

    // (TAO extensions or internals)
    static CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &,
        AMI_AMI_TestExceptionHolder *&
      );
    virtual const char* _tao_obv_repository_id (void) const;
    static const char* _tao_obv_static_repository_id (void);

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:430

  public:
    virtual void raise_foo (
         ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      ) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:430

  public:
    virtual void raise_get_yadda (
         ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      ) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:430

  public:
    virtual void raise_set_yadda (
         ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      ) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_valuetype/valuetype_ch.cpp:275

  protected:
    AMI_AMI_TestExceptionHolder (void);
    virtual ~AMI_AMI_TestExceptionHolder (void);

    virtual void *_tao_obv_narrow (ptrdiff_t);
#if defined (_MSC_VER)
    virtual void *A_AMI_AMI_TestExceptionHolder_tao_obv_narrow (ptrdiff_t);
#endif /* _MSC_VER */
    virtual CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &);
    virtual CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);

  private:
    AMI_AMI_TestExceptionHolder (const AMI_AMI_TestExceptionHolder &);
    void operator= (const AMI_AMI_TestExceptionHolder &);

  protected:
    virtual CORBA::Boolean _tao_marshal__A_AMI_AMI_TestExceptionHolder (TAO_OutputCDR &) = 0;
    virtual CORBA::Boolean _tao_unmarshal__A_AMI_AMI_TestExceptionHolder (TAO_InputCDR &) = 0;
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_AMI_AMI_TestExceptionHolder;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:601

#if !defined (_A_AMI_AMI_TESTHANDLER__VAR_OUT_CH_)
#define _A_AMI_AMI_TESTHANDLER__VAR_OUT_CH_

  class AMI_AMI_TestHandler;
  typedef AMI_AMI_TestHandler *AMI_AMI_TestHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_AMI_TestHandler
      >
    AMI_AMI_TestHandler_var;

  typedef
    TAO_Objref_Out_T<
        AMI_AMI_TestHandler
      >
    AMI_AMI_TestHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:53

#if !defined (_A_AMI_AMI_TESTHANDLER_CH_)
#define _A_AMI_AMI_TESTHANDLER_CH_

  class  AMI_AMI_TestHandler
    : public virtual Messaging::ReplyHandler
  {
  public:
    typedef AMI_AMI_TestHandler_ptr _ptr_type;
    typedef AMI_AMI_TestHandler_var _var_type;
    static int _tao_class_id;

    // The static operations.
    static AMI_AMI_TestHandler_ptr _duplicate (AMI_AMI_TestHandler_ptr obj);

    static AMI_AMI_TestHandler_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static AMI_AMI_TestHandler_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    static AMI_AMI_TestHandler_ptr _nil (void)
      {
        return (AMI_AMI_TestHandler_ptr)0;
      }

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46

    virtual void foo (
        CORBA::Long ami_return_val,
        CORBA::Long out_l
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    static void foo_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        Messaging::ReplyHandler_ptr _tao_reply_handler,
        CORBA::ULong reply_status
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46

    virtual void foo_excep (
        A::AMI_AMI_TestExceptionHolder * excep_holder
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46

    virtual void get_yadda (
        CORBA::Long ami_return_val
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    static void get_yadda_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        Messaging::ReplyHandler_ptr _tao_reply_handler,
        CORBA::ULong reply_status
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46

    virtual void get_yadda_excep (
        A::AMI_AMI_TestExceptionHolder * excep_holder
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46

    virtual void set_yadda (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    static void set_yadda_reply_stub (
        TAO_InputCDR &_tao_reply_cdr,
        Messaging::ReplyHandler_ptr _tao_reply_handler,
        CORBA::ULong reply_status
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46

    virtual void set_yadda_excep (
        A::AMI_AMI_TestExceptionHolder * excep_holder
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:200

    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );

    virtual void *_tao_QueryInterface (ptrdiff_t type);

    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_AMI_TestHandler_Proxy_Broker_;

  protected:
    AMI_AMI_TestHandler (int collocated = 0);

    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void A_AMI_AMI_TestHandler_setup_collocation (int collocated);

    AMI_AMI_TestHandler (IOP::IOR *ior,
      TAO_ORB_Core *orb_core = 0);

    AMI_AMI_TestHandler (
        TAO_Stub *objref,
        CORBA::Boolean _tao_collocated = 0,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0
      );
    virtual ~AMI_AMI_TestHandler (void);

  private:
    AMI_AMI_TestHandler (const AMI_AMI_TestHandler &);
    void operator= (const AMI_AMI_TestHandler &);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:44

  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_AMI_AMI_TestHandler;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:66

} // module A

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// be/be_visitor_root/root.cpp:76

extern
TAO::Collocation_Proxy_Broker *
(*A__TAO_AMI_Test_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern
TAO::Collocation_Proxy_Broker *
(*A__TAO_AMI_AMI_TestHandler_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// be/be_visitor_valuetype/obv_module.cpp:55

namespace OBV_A
{

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/valuetype_obv_ch.cpp:58

#if !defined (_A_AMI_AMI_TESTEXCEPTIONHOLDER___OBV_CH_)
#define _A_AMI_AMI_TESTEXCEPTIONHOLDER___OBV_CH_

  // OBV_ class
  class  AMI_AMI_TestExceptionHolder
    : public virtual A::AMI_AMI_TestExceptionHolder,
      public virtual OBV_Messaging::ExceptionHolder
  {
  public:

  protected:
    AMI_AMI_TestExceptionHolder (void);
    virtual ~AMI_AMI_TestExceptionHolder (void);

  protected:
    virtual CORBA::Boolean _tao_marshal__A_AMI_AMI_TestExceptionHolder (TAO_OutputCDR &);
    virtual CORBA::Boolean _tao_unmarshal__A_AMI_AMI_TestExceptionHolder (TAO_InputCDR &);
    CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &);
    CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &);

  private:
  };

#endif /* end #if !defined */

  class _tao_AMI_AMI_TestExceptionHolder
    : public AMI_AMI_TestExceptionHolder,
      public virtual OBV_Messaging::ExceptionHolder,
      public virtual CORBA::DefaultValueRefCountBase
  {
  public:
    _tao_AMI_AMI_TestExceptionHolder ();

    ~_tao_AMI_AMI_TestExceptionHolder ();// TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ih.cpp:43

    virtual void raise_foo (
        ACE_ENV_SINGLE_ARG_DECL
      );// TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ih.cpp:43

    virtual void raise_get_yadda (
        ACE_ENV_SINGLE_ARG_DECL
      );// TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ih.cpp:43

    virtual void raise_set_yadda (
        ACE_ENV_SINGLE_ARG_DECL
      );
  };

  // TAO_IDL - Generated from
  // be/be_visitor_valuetype/obv_module.cpp:85

}

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:53

// Traits specializations.
namespace TAO
{
};

// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const A::DidTheRightThing &); // copying version
 void operator<<= (CORBA::Any &, A::DidTheRightThing*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, A::DidTheRightThing *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const A::DidTheRightThing *&);

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, A::AMI_Test_ptr); // copying
 void operator<<= (CORBA::Any &, A::AMI_Test_ptr *); // non-copying
 CORBA::Boolean operator>>= (const CORBA::Any &, A::AMI_Test_ptr &);

// TAO_IDL - Generated from
// be/be_visitor_valuetype/any_op_ch.cpp:54

 void operator<<= (CORBA::Any &, A::AMI_AMI_TestExceptionHolder *); // copying
 void operator<<= (CORBA::Any &, A::AMI_AMI_TestExceptionHolder **); // non-copying
 CORBA::Boolean operator>>= (const CORBA::Any &, A::AMI_AMI_TestExceptionHolder *&);

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, A::AMI_AMI_TestHandler_ptr); // copying
 void operator<<= (CORBA::Any &, A::AMI_AMI_TestHandler_ptr *); // non-copying
 CORBA::Boolean operator>>= (const CORBA::Any &, A::AMI_AMI_TestHandler_ptr &);

namespace TAO
{
  template<>
  class Arg_Traits<A::AMI_AMI_TestExceptionHolder>
    : public Object_Arg_Traits_T<A::AMI_AMI_TestExceptionHolder *,
                                 A::AMI_AMI_TestExceptionHolder_var,
                                 A::AMI_AMI_TestExceptionHolder_out,
                                 TAO::Value_Traits<A::AMI_AMI_TestExceptionHolder> >
  {
  };
};
// TAO_IDL - Generated from
// be/be_visitor_root/cdr_op.cpp:48

#ifndef __ACE_INLINE__

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:52

 CORBA::Boolean operator<< (TAO_OutputCDR &, const A::DidTheRightThing &);
 CORBA::Boolean operator>> (TAO_InputCDR &, A::DidTheRightThing &);

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

 CORBA::Boolean operator<< (TAO_OutputCDR &, const A::AMI_Test_ptr );
 CORBA::Boolean operator>> (TAO_InputCDR &, A::AMI_Test_ptr &);

// TAO_IDL - Generated from
// be/be_valuetype.cpp:207

namespace CORBA
{
  TAO_NAMESPACE_STORAGE_CLASS void add_ref (A::AMI_AMI_TestExceptionHolder *);
  TAO_NAMESPACE_STORAGE_CLASS void remove_ref (A::AMI_AMI_TestExceptionHolder *);
}


// TAO_IDL - Generated from
// be/be_visitor_valuetype/cdr_op_ch.cpp:61

 CORBA::Boolean operator<< (TAO_OutputCDR &, const A::AMI_AMI_TestExceptionHolder *);
 CORBA::Boolean operator>> (TAO_InputCDR &, A::AMI_AMI_TestExceptionHolder *&);

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

 CORBA::Boolean operator<< (TAO_OutputCDR &, const A::AMI_AMI_TestHandler_ptr );
 CORBA::Boolean operator>> (TAO_InputCDR &, A::AMI_AMI_TestHandler_ptr &);

// TAO_IDL - Generated from
// be/be_visitor_root/cdr_op.cpp:64

#endif /* __ACE_INLINE__ */

// TAO_IDL - Generated from
// be/be_codegen.cpp:963

#if defined (__ACE_INLINE__)
#include "ami_testC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#endif /* ifndef */
