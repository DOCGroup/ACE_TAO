// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:301


#include "PortableInterceptorC.h"
#include "tao/Stub.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"
#include "tao/Any_Basic_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "PortableInterceptorC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:59

// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_CORBA_OCTET___ARG_TRAITS_CS_)
#define __TAO_SEQ_CORBA_OCTET___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<CORBA::OctetSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::OctetSeq,
            CORBA::OctetSeq_var,
            CORBA::OctetSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_CORBA_STRING___ARG_TRAITS_CS_)
#define __TAO_SEQ_CORBA_STRING___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<CORBA::StringSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::StringSeq,
            CORBA::StringSeq_var,
            CORBA::StringSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_CORBA_STRING___ARG_TRAITS_CS_)
#define __TAO_SEQ_CORBA_STRING___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<PortableInterceptor::AdapterName>
    : public
        Var_Size_Arg_Traits_T<
            PortableInterceptor::AdapterName,
            PortableInterceptor::AdapterName_var,
            PortableInterceptor::AdapterName_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_CORBA_OCTET___ARG_TRAITS_CS_)
#define __TAO_SEQ_CORBA_OCTET___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<PortableInterceptor::ObjectId>
    : public
        Var_Size_Arg_Traits_T<
            PortableInterceptor::ObjectId,
            PortableInterceptor::ObjectId_var,
            PortableInterceptor::ObjectId_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_POLICY__ARG_TRAITS_CS_)
#define _CORBA_POLICY__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<CORBA::Policy>
    : public
        Object_Arg_Traits_T<
            CORBA::Policy_ptr,
            CORBA::Policy_var,
            CORBA::Policy_out,
            TAO::Objref_Traits<CORBA::Policy>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_CORBA_POLICY__ARG_TRAITS_CS_)
#define _CORBA_POLICY__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<CORBA::Policy>
    : public
        Object_Arg_Traits_T<
            CORBA::Policy_ptr,
            CORBA::Policy_var,
            CORBA::Policy_out,
            TAO::Objref_Traits<CORBA::Policy>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_DYNAMIC_PARAMETER___ARG_TRAITS_CS_)
#define __TAO_SEQ_DYNAMIC_PARAMETER___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<Dynamic::ParameterList>
    : public
        Var_Size_Arg_Traits_T<
            Dynamic::ParameterList,
            Dynamic::ParameterList_var,
            Dynamic::ParameterList_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_CORBA_STRING___ARG_TRAITS_CS_)
#define __TAO_SEQ_CORBA_STRING___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<Dynamic::ContextList>
    : public
        Var_Size_Arg_Traits_T<
            Dynamic::ContextList,
            Dynamic::ContextList_var,
            Dynamic::ContextList_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_DYNAMIC_TYPECODE___ARG_TRAITS_CS_)
#define __TAO_SEQ_DYNAMIC_TYPECODE___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<Dynamic::ExceptionList>
    : public
        Var_Size_Arg_Traits_T<
            Dynamic::ExceptionList,
            Dynamic::ExceptionList_var,
            Dynamic::ExceptionList_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_CORBA_STRING___ARG_TRAITS_CS_)
#define __TAO_SEQ_CORBA_STRING___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<Dynamic::RequestContext>
    : public
        Var_Size_Arg_Traits_T<
            Dynamic::RequestContext,
            Dynamic::RequestContext_var,
            Dynamic::RequestContext_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:428

#if !defined (_IOP_TAGGEDPROFILE__ARG_TRAITS_CS_)
#define _IOP_TAGGEDPROFILE__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<IOP::TaggedProfile>
    : public
        Var_Size_Arg_Traits_T<
            IOP::TaggedProfile,
            IOP::TaggedProfile_var,
            IOP::TaggedProfile_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_CORBA_OCTET___ARG_TRAITS_CS_)
#define __TAO_SEQ_CORBA_OCTET___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<CORBA::OctetSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::OctetSeq,
            CORBA::OctetSeq_var,
            CORBA::OctetSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:428

#if !defined (_IOP_TAGGEDCOMPONENT__ARG_TRAITS_CS_)
#define _IOP_TAGGEDCOMPONENT__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<IOP::TaggedComponent>
    : public
        Var_Size_Arg_Traits_T<
            IOP::TaggedComponent,
            IOP::TaggedComponent_var,
            IOP::TaggedComponent_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_CORBA_OCTET___ARG_TRAITS_CS_)
#define __TAO_SEQ_CORBA_OCTET___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<CORBA::OctetSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::OctetSeq,
            CORBA::OctetSeq_var,
            CORBA::OctetSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:262

#if !defined (__TAO_SEQ_IOP_TAGGEDCOMPONENT___ARG_TRAITS_CS_)
#define __TAO_SEQ_IOP_TAGGEDCOMPONENT___ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<IOP::TaggedComponentSeq>
    : public
        Var_Size_Arg_Traits_T<
            IOP::TaggedComponentSeq,
            IOP::TaggedComponentSeq_var,
            IOP::TaggedComponentSeq_out
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_arg_traits.cpp:428

#if !defined (_IOP_SERVICECONTEXT__ARG_TRAITS_CS_)
#define _IOP_SERVICECONTEXT__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<IOP::ServiceContext>
    : public
        Var_Size_Arg_Traits_T<
            IOP::ServiceContext,
            IOP::ServiceContext_var,
            IOP::ServiceContext_out
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_IOP_CODECFACTORY__ARG_TRAITS_CS_)
#define _IOP_CODECFACTORY__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<IOP::CodecFactory>
    : public
        Object_Arg_Traits_T<
            IOP::CodecFactory_ptr,
            IOP::CodecFactory_var,
            IOP::CodecFactory_out,
            TAO::Objref_Traits<IOP::CodecFactory>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO__ARG_TRAITS_CS_)
#define _PORTABLEINTERCEPTOR_CLIENTREQUESTINFO__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<PortableInterceptor::ClientRequestInfo>
    : public
        Object_Arg_Traits_T<
            PortableInterceptor::ClientRequestInfo_ptr,
            PortableInterceptor::ClientRequestInfo_var,
            PortableInterceptor::ClientRequestInfo_out,
            TAO::Objref_Traits<PortableInterceptor::ClientRequestInfo>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEINTERCEPTOR_SERVERREQUESTINFO__ARG_TRAITS_CS_)
#define _PORTABLEINTERCEPTOR_SERVERREQUESTINFO__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<PortableInterceptor::ServerRequestInfo>
    : public
        Object_Arg_Traits_T<
            PortableInterceptor::ServerRequestInfo_ptr,
            PortableInterceptor::ServerRequestInfo_var,
            PortableInterceptor::ServerRequestInfo_out,
            TAO::Objref_Traits<PortableInterceptor::ServerRequestInfo>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR__ARG_TRAITS_CS_)
#define _PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<PortableInterceptor::ClientRequestInterceptor>
    : public
        Object_Arg_Traits_T<
            PortableInterceptor::ClientRequestInterceptor_ptr,
            PortableInterceptor::ClientRequestInterceptor_var,
            PortableInterceptor::ClientRequestInterceptor_out,
            TAO::Objref_Traits<PortableInterceptor::ClientRequestInterceptor>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR__ARG_TRAITS_CS_)
#define _PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<PortableInterceptor::ServerRequestInterceptor>
    : public
        Object_Arg_Traits_T<
            PortableInterceptor::ServerRequestInterceptor_ptr,
            PortableInterceptor::ServerRequestInterceptor_var,
            PortableInterceptor::ServerRequestInterceptor_out,
            TAO::Objref_Traits<PortableInterceptor::ServerRequestInterceptor>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEINTERCEPTOR_POLICYFACTORY__ARG_TRAITS_CS_)
#define _PORTABLEINTERCEPTOR_POLICYFACTORY__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<PortableInterceptor::PolicyFactory>
    : public
        Object_Arg_Traits_T<
            PortableInterceptor::PolicyFactory_ptr,
            PortableInterceptor::PolicyFactory_var,
            PortableInterceptor::PolicyFactory_out,
            TAO::Objref_Traits<PortableInterceptor::PolicyFactory>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEINTERCEPTOR_IORINTERCEPTOR__ARG_TRAITS_CS_)
#define _PORTABLEINTERCEPTOR_IORINTERCEPTOR__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<PortableInterceptor::IORInterceptor>
    : public
        Object_Arg_Traits_T<
            PortableInterceptor::IORInterceptor_ptr,
            PortableInterceptor::IORInterceptor_var,
            PortableInterceptor::IORInterceptor_out,
            TAO::Objref_Traits<PortableInterceptor::IORInterceptor>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEINTERCEPTOR_ORBINITINFO__ARG_TRAITS_CS_)
#define _PORTABLEINTERCEPTOR_ORBINITINFO__ARG_TRAITS_CS_
  
  ACE_TEMPLATE_SPECIALIZATION
  class TAO_Export Arg_Traits<PortableInterceptor::ORBInitInfo>
    : public
        Object_Arg_Traits_T<
            PortableInterceptor::ORBInitInfo_ptr,
            PortableInterceptor::ORBInitInfo_var,
            PortableInterceptor::ORBInitInfo_out,
            TAO::Objref_Traits<PortableInterceptor::ORBInitInfo>
          >
  {
  };

#endif /* end #if !defined */
};

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PortableInterceptor::Interceptor.

PortableInterceptor::Interceptor_ptr
TAO::Objref_Traits<PortableInterceptor::Interceptor>::tao_duplicate (
    PortableInterceptor::Interceptor_ptr p
  )
{
  return PortableInterceptor::Interceptor::_duplicate (p);
}

void
TAO::Objref_Traits<PortableInterceptor::Interceptor>::tao_release (
    PortableInterceptor::Interceptor_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::Interceptor_ptr
TAO::Objref_Traits<PortableInterceptor::Interceptor>::tao_nil (void)
{
  return PortableInterceptor::Interceptor::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<PortableInterceptor::Interceptor>::tao_marshal (
    PortableInterceptor::Interceptor_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*PortableInterceptor__TAO_Interceptor_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

PortableInterceptor::Interceptor::Interceptor (void)
{}

PortableInterceptor::Interceptor::~Interceptor (void)
{}

void 
PortableInterceptor::Interceptor::_tao_any_destructor (void *_tao_void_pointer)
{
  Interceptor *_tao_tmp_pointer =
    ACE_static_cast (Interceptor *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return Interceptor::_nil ();
    }
  
  Interceptor_ptr proxy =
    dynamic_cast<Interceptor_ptr> (_tao_objref);

  return Interceptor::_duplicate (proxy);
}

PortableInterceptor::Interceptor_ptr
PortableInterceptor::Interceptor::_duplicate (Interceptor_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
PortableInterceptor::Interceptor::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/Interceptor:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* PortableInterceptor::Interceptor::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/Interceptor:1.0";
}

CORBA::Boolean
PortableInterceptor::Interceptor::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_Interceptor[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f723a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/Interceptor:1.0
    12,
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f7200),  // name = Interceptor
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_Interceptor (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_Interceptor),
    (char *) &_oc_PortableInterceptor_Interceptor,
    0,
    sizeof (PortableInterceptor::Interceptor)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_Interceptor =
    &_tc_TAO_tc_PortableInterceptor_Interceptor;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

PortableInterceptor::ForwardRequest::ForwardRequest (void)
  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/ForwardRequest:1.0",
        "ForwardRequest"
      )
{
}

PortableInterceptor::ForwardRequest::~ForwardRequest (void)
{
}

PortableInterceptor::ForwardRequest::ForwardRequest (const ::PortableInterceptor::ForwardRequest &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->forward = CORBA::Object::_duplicate (_tao_excp.forward.in ());
  this->permanent = _tao_excp.permanent;
}

PortableInterceptor::ForwardRequest&
PortableInterceptor::ForwardRequest::operator= (const ::PortableInterceptor::ForwardRequest &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  this->forward = CORBA::Object::_duplicate (_tao_excp.forward.in ());
  this->permanent = _tao_excp.permanent;
  return *this;
}

void PortableInterceptor::ForwardRequest::_tao_any_destructor (void *_tao_void_pointer)
{
  ForwardRequest *_tao_tmp_pointer =
    ACE_static_cast (ForwardRequest*, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableInterceptor::ForwardRequest *
PortableInterceptor::ForwardRequest::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/PortableInterceptor/ForwardRequest:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (ForwardRequest *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *PortableInterceptor::ForwardRequest::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::ForwardRequest, 0);
  return retval;
}

CORBA::Exception *
PortableInterceptor::ForwardRequest::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::PortableInterceptor::ForwardRequest (*this),
      0
    );
  return result;
}

void PortableInterceptor::ForwardRequest::_raise (void)
{
  TAO_RAISE (*this);
}

void PortableInterceptor::ForwardRequest::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::ForwardRequest::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_ctor.cpp:66

PortableInterceptor::ForwardRequest::ForwardRequest (
    const CORBA::Object_ptr  _tao_forward,
    CORBA::Boolean _tao_permanent
  )
  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/ForwardRequest:1.0",
        "ForwardRequest"
      )
{
  this->forward = CORBA::Object::_duplicate (_tao_forward);
  this->permanent = _tao_permanent;
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr PortableInterceptor::ForwardRequest::_type (void) const
{
  return ::PortableInterceptor::_tc_ForwardRequest;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ForwardRequest[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  51,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x466f7277), 
  ACE_NTOHL (0x61726452), 
  ACE_NTOHL (0x65717565), 
  ACE_NTOHL (0x73743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/PortableInterceptor/ForwardRequest:1.0
    15,
  ACE_NTOHL (0x466f7277), 
  ACE_NTOHL (0x61726452), 
  ACE_NTOHL (0x65717565), 
  ACE_NTOHL (0x73740000),  // name = ForwardRequest
  2, // member count
    8,
  ACE_NTOHL (0x666f7277), 
  ACE_NTOHL (0x61726400),  // name = forward
    CORBA::tk_objref,
  52, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    29,
    ACE_NTOHL (0x49444c3a), 
    ACE_NTOHL (0x6f6d672e), 
    ACE_NTOHL (0x6f72672f), 
    ACE_NTOHL (0x434f5242), 
    ACE_NTOHL (0x412f4f62), 
    ACE_NTOHL (0x6a656374), 
    ACE_NTOHL (0x3a312e30), 
    ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/Object:1.0
        7,
    ACE_NTOHL (0x4f626a65), 
    ACE_NTOHL (0x63740000),  // name = Object
    
  10,
  ACE_NTOHL (0x7065726d), 
  ACE_NTOHL (0x616e656e), 
  ACE_NTOHL (0x74000000),  // name = permanent
    CORBA::tk_boolean,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ForwardRequest (
    CORBA::tk_except,
    sizeof (_oc_PortableInterceptor_ForwardRequest),
    (char *) &_oc_PortableInterceptor_ForwardRequest,
    0,
    sizeof (PortableInterceptor::ForwardRequest)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_ForwardRequest =
    &_tc_TAO_tc_PortableInterceptor_ForwardRequest;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ReplyStatus[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x5265706c), 
  ACE_NTOHL (0x79537461), 
  ACE_NTOHL (0x7475733a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/ReplyStatus:1.0
    12,
  ACE_NTOHL (0x5265706c), 
  ACE_NTOHL (0x79537461), 
  ACE_NTOHL (0x74757300),  // name = ReplyStatus
    CORBA::tk_short,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ReplyStatus (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_ReplyStatus),
    (char *) &_oc_PortableInterceptor_ReplyStatus,
    0,
    sizeof (PortableInterceptor::ReplyStatus)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_ReplyStatus =
    &_tc_TAO_tc_PortableInterceptor_ReplyStatus;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_SlotId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  43,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x536c6f74), 
  ACE_NTOHL (0x49643a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/PortableInterceptor/SlotId:1.0
    7,
  ACE_NTOHL (0x536c6f74), 
  ACE_NTOHL (0x49640000),  // name = SlotId
    CORBA::tk_ulong,

};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_SlotId (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_SlotId),
    (char *) &_oc_PortableInterceptor_SlotId,
    0,
    sizeof (PortableInterceptor::SlotId)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_SlotId =
    &_tc_TAO_tc_PortableInterceptor_SlotId;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

PortableInterceptor::InvalidSlot::InvalidSlot (void)
  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/InvalidSlot:1.0",
        "InvalidSlot"
      )
{
}

PortableInterceptor::InvalidSlot::~InvalidSlot (void)
{
}

PortableInterceptor::InvalidSlot::InvalidSlot (const ::PortableInterceptor::InvalidSlot &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableInterceptor::InvalidSlot&
PortableInterceptor::InvalidSlot::operator= (const ::PortableInterceptor::InvalidSlot &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void PortableInterceptor::InvalidSlot::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidSlot *_tao_tmp_pointer =
    ACE_static_cast (InvalidSlot*, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableInterceptor::InvalidSlot *
PortableInterceptor::InvalidSlot::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/PortableInterceptor/InvalidSlot:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (InvalidSlot *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *PortableInterceptor::InvalidSlot::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::InvalidSlot, 0);
  return retval;
}

CORBA::Exception *
PortableInterceptor::InvalidSlot::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::PortableInterceptor::InvalidSlot (*this),
      0
    );
  return result;
}

void PortableInterceptor::InvalidSlot::_raise (void)
{
  TAO_RAISE (*this);
}

void PortableInterceptor::InvalidSlot::_tao_encode (
    TAO_OutputCDR &cdr
    ACE_ENV_ARG_DECL
  ) const
{
  if (cdr << *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::InvalidSlot::_tao_decode (
    TAO_InputCDR &cdr
    ACE_ENV_ARG_DECL
  )
{
  if (cdr >> *this)
    {
      return;
    }
  
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr PortableInterceptor::InvalidSlot::_type (void) const
{
  return ::PortableInterceptor::_tc_InvalidSlot;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_InvalidSlot[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x496e7661), 
  ACE_NTOHL (0x6c696453), 
  ACE_NTOHL (0x6c6f743a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/InvalidSlot:1.0
    12,
  ACE_NTOHL (0x496e7661), 
  ACE_NTOHL (0x6c696453), 
  ACE_NTOHL (0x6c6f7400),  // name = InvalidSlot
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_InvalidSlot (
    CORBA::tk_except,
    sizeof (_oc_PortableInterceptor_InvalidSlot),
    (char *) &_oc_PortableInterceptor_InvalidSlot,
    0,
    sizeof (PortableInterceptor::InvalidSlot)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_InvalidSlot =
    &_tc_TAO_tc_PortableInterceptor_InvalidSlot;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PortableInterceptor::Current.

PortableInterceptor::Current_ptr
TAO::Objref_Traits<PortableInterceptor::Current>::tao_duplicate (
    PortableInterceptor::Current_ptr p
  )
{
  return PortableInterceptor::Current::_duplicate (p);
}

void
TAO::Objref_Traits<PortableInterceptor::Current>::tao_release (
    PortableInterceptor::Current_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::Current_ptr
TAO::Objref_Traits<PortableInterceptor::Current>::tao_nil (void)
{
  return PortableInterceptor::Current::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<PortableInterceptor::Current>::tao_marshal (
    PortableInterceptor::Current_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*PortableInterceptor__TAO_Current_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

PortableInterceptor::Current::Current (void)
{}

PortableInterceptor::Current::~Current (void)
{}

void 
PortableInterceptor::Current::_tao_any_destructor (void *_tao_void_pointer)
{
  Current *_tao_tmp_pointer =
    ACE_static_cast (Current *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

PortableInterceptor::Current_ptr
PortableInterceptor::Current::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return Current::_nil ();
    }
  
  Current_ptr proxy =
    dynamic_cast<Current_ptr> (_tao_objref);
;
  return Current::_duplicate (proxy);
}

PortableInterceptor::Current_ptr
PortableInterceptor::Current::_duplicate (Current_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
PortableInterceptor::Current::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Current:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/Current:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* PortableInterceptor::Current::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/Current:1.0";
}

CORBA::Boolean
PortableInterceptor::Current::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_Current[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  44,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x43757272), 
  ACE_NTOHL (0x656e743a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/Current:1.0
    8,
  ACE_NTOHL (0x43757272), 
  ACE_NTOHL (0x656e7400),  // name = Current
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_Current (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_Current),
    (char *) &_oc_PortableInterceptor_Current,
    0,
    sizeof (PortableInterceptor::Current)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_Current =
    &_tc_TAO_tc_PortableInterceptor_Current;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PortableInterceptor::RequestInfo.

PortableInterceptor::RequestInfo_ptr
TAO::Objref_Traits<PortableInterceptor::RequestInfo>::tao_duplicate (
    PortableInterceptor::RequestInfo_ptr p
  )
{
  return PortableInterceptor::RequestInfo::_duplicate (p);
}

void
TAO::Objref_Traits<PortableInterceptor::RequestInfo>::tao_release (
    PortableInterceptor::RequestInfo_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::RequestInfo_ptr
TAO::Objref_Traits<PortableInterceptor::RequestInfo>::tao_nil (void)
{
  return PortableInterceptor::RequestInfo::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<PortableInterceptor::RequestInfo>::tao_marshal (
    PortableInterceptor::RequestInfo_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*PortableInterceptor__TAO_RequestInfo_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

PortableInterceptor::RequestInfo::RequestInfo (void)
{}

PortableInterceptor::RequestInfo::~RequestInfo (void)
{}

void 
PortableInterceptor::RequestInfo::_tao_any_destructor (void *_tao_void_pointer)
{
  RequestInfo *_tao_tmp_pointer =
    ACE_static_cast (RequestInfo *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return RequestInfo::_nil ();
    }
  
  RequestInfo_ptr proxy =
    dynamic_cast<RequestInfo_ptr> (_tao_objref);

  return RequestInfo::_duplicate (proxy);
}

PortableInterceptor::RequestInfo_ptr
PortableInterceptor::RequestInfo::_duplicate (RequestInfo_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
PortableInterceptor::RequestInfo::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/RequestInfo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* PortableInterceptor::RequestInfo::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/RequestInfo:1.0";
}

CORBA::Boolean
PortableInterceptor::RequestInfo::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_RequestInfo[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x52657175), 
  ACE_NTOHL (0x65737449), 
  ACE_NTOHL (0x6e666f3a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/RequestInfo:1.0
    12,
  ACE_NTOHL (0x52657175), 
  ACE_NTOHL (0x65737449), 
  ACE_NTOHL (0x6e666f00),  // name = RequestInfo
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_RequestInfo (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_RequestInfo),
    (char *) &_oc_PortableInterceptor_RequestInfo,
    0,
    sizeof (PortableInterceptor::RequestInfo)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_RequestInfo =
    &_tc_TAO_tc_PortableInterceptor_RequestInfo;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PortableInterceptor::ClientRequestInfo.

PortableInterceptor::ClientRequestInfo_ptr
TAO::Objref_Traits<PortableInterceptor::ClientRequestInfo>::tao_duplicate (
    PortableInterceptor::ClientRequestInfo_ptr p
  )
{
  return PortableInterceptor::ClientRequestInfo::_duplicate (p);
}

void
TAO::Objref_Traits<PortableInterceptor::ClientRequestInfo>::tao_release (
    PortableInterceptor::ClientRequestInfo_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ClientRequestInfo_ptr
TAO::Objref_Traits<PortableInterceptor::ClientRequestInfo>::tao_nil (void)
{
  return PortableInterceptor::ClientRequestInfo::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<PortableInterceptor::ClientRequestInfo>::tao_marshal (
    PortableInterceptor::ClientRequestInfo_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*PortableInterceptor__TAO_ClientRequestInfo_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

PortableInterceptor::ClientRequestInfo::ClientRequestInfo (void)
{}

PortableInterceptor::ClientRequestInfo::~ClientRequestInfo (void)
{}

void 
PortableInterceptor::ClientRequestInfo::_tao_any_destructor (void *_tao_void_pointer)
{
  ClientRequestInfo *_tao_tmp_pointer =
    ACE_static_cast (ClientRequestInfo *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ClientRequestInfo::_nil ();
    }
  
  ClientRequestInfo_ptr proxy =
    dynamic_cast<ClientRequestInfo_ptr> (_tao_objref);

  return ClientRequestInfo::_duplicate (proxy);
}

PortableInterceptor::ClientRequestInfo_ptr
PortableInterceptor::ClientRequestInfo::_duplicate (ClientRequestInfo_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
PortableInterceptor::ClientRequestInfo::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/RequestInfo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/ClientRequestInfo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* PortableInterceptor::ClientRequestInfo::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ClientRequestInfo:1.0";
}

CORBA::Boolean
PortableInterceptor::ClientRequestInfo::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ClientRequestInfo[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  54,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x436c6965), 
  ACE_NTOHL (0x6e745265), 
  ACE_NTOHL (0x71756573), 
  ACE_NTOHL (0x74496e66), 
  ACE_NTOHL (0x6f3a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/PortableInterceptor/ClientRequestInfo:1.0
    18,
  ACE_NTOHL (0x436c6965), 
  ACE_NTOHL (0x6e745265), 
  ACE_NTOHL (0x71756573), 
  ACE_NTOHL (0x74496e66), 
  ACE_NTOHL (0x6f000000),  // name = ClientRequestInfo
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ClientRequestInfo (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ClientRequestInfo),
    (char *) &_oc_PortableInterceptor_ClientRequestInfo,
    0,
    sizeof (PortableInterceptor::ClientRequestInfo)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_ClientRequestInfo =
    &_tc_TAO_tc_PortableInterceptor_ClientRequestInfo;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PortableInterceptor::ServerRequestInfo.

PortableInterceptor::ServerRequestInfo_ptr
TAO::Objref_Traits<PortableInterceptor::ServerRequestInfo>::tao_duplicate (
    PortableInterceptor::ServerRequestInfo_ptr p
  )
{
  return PortableInterceptor::ServerRequestInfo::_duplicate (p);
}

void
TAO::Objref_Traits<PortableInterceptor::ServerRequestInfo>::tao_release (
    PortableInterceptor::ServerRequestInfo_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ServerRequestInfo_ptr
TAO::Objref_Traits<PortableInterceptor::ServerRequestInfo>::tao_nil (void)
{
  return PortableInterceptor::ServerRequestInfo::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<PortableInterceptor::ServerRequestInfo>::tao_marshal (
    PortableInterceptor::ServerRequestInfo_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*PortableInterceptor__TAO_ServerRequestInfo_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

PortableInterceptor::ServerRequestInfo::ServerRequestInfo (void)
{}

PortableInterceptor::ServerRequestInfo::~ServerRequestInfo (void)
{}

void 
PortableInterceptor::ServerRequestInfo::_tao_any_destructor (void *_tao_void_pointer)
{
  ServerRequestInfo *_tao_tmp_pointer =
    ACE_static_cast (ServerRequestInfo *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ServerRequestInfo::_nil ();
    }
  
  ServerRequestInfo_ptr proxy =
    dynamic_cast<ServerRequestInfo_ptr> (_tao_objref);

  return ServerRequestInfo::_duplicate (proxy);
}

PortableInterceptor::ServerRequestInfo_ptr
PortableInterceptor::ServerRequestInfo::_duplicate (ServerRequestInfo_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
PortableInterceptor::ServerRequestInfo::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/RequestInfo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/ServerRequestInfo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* PortableInterceptor::ServerRequestInfo::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ServerRequestInfo:1.0";
}

CORBA::Boolean
PortableInterceptor::ServerRequestInfo::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ServerRequestInfo[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  54,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65725265), 
  ACE_NTOHL (0x71756573), 
  ACE_NTOHL (0x74496e66), 
  ACE_NTOHL (0x6f3a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/PortableInterceptor/ServerRequestInfo:1.0
    18,
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65725265), 
  ACE_NTOHL (0x71756573), 
  ACE_NTOHL (0x74496e66), 
  ACE_NTOHL (0x6f000000),  // name = ServerRequestInfo
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ServerRequestInfo (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ServerRequestInfo),
    (char *) &_oc_PortableInterceptor_ServerRequestInfo,
    0,
    sizeof (PortableInterceptor::ServerRequestInfo)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_ServerRequestInfo =
    &_tc_TAO_tc_PortableInterceptor_ServerRequestInfo;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PortableInterceptor::ClientRequestInterceptor.

PortableInterceptor::ClientRequestInterceptor_ptr
TAO::Objref_Traits<PortableInterceptor::ClientRequestInterceptor>::tao_duplicate (
    PortableInterceptor::ClientRequestInterceptor_ptr p
  )
{
  return PortableInterceptor::ClientRequestInterceptor::_duplicate (p);
}

void
TAO::Objref_Traits<PortableInterceptor::ClientRequestInterceptor>::tao_release (
    PortableInterceptor::ClientRequestInterceptor_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ClientRequestInterceptor_ptr
TAO::Objref_Traits<PortableInterceptor::ClientRequestInterceptor>::tao_nil (void)
{
  return PortableInterceptor::ClientRequestInterceptor::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<PortableInterceptor::ClientRequestInterceptor>::tao_marshal (
    PortableInterceptor::ClientRequestInterceptor_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*PortableInterceptor__TAO_ClientRequestInterceptor_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

PortableInterceptor::ClientRequestInterceptor::ClientRequestInterceptor (void)
{}

PortableInterceptor::ClientRequestInterceptor::~ClientRequestInterceptor (void)
{}

void 
PortableInterceptor::ClientRequestInterceptor::_tao_any_destructor (void *_tao_void_pointer)
{
  ClientRequestInterceptor *_tao_tmp_pointer =
    ACE_static_cast (ClientRequestInterceptor *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ClientRequestInterceptor::_nil ();
    }
  
  ClientRequestInterceptor_ptr proxy =
    dynamic_cast<ClientRequestInterceptor_ptr> (_tao_objref);

;
  return ClientRequestInterceptor::_duplicate (proxy);
}

PortableInterceptor::ClientRequestInterceptor_ptr
PortableInterceptor::ClientRequestInterceptor::_duplicate (ClientRequestInterceptor_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
PortableInterceptor::ClientRequestInterceptor::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/Interceptor:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/ClientRequestInterceptor:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* PortableInterceptor::ClientRequestInterceptor::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ClientRequestInterceptor:1.0";
}

CORBA::Boolean
PortableInterceptor::ClientRequestInterceptor::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ClientRequestInterceptor[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  61,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x436c6965), 
  ACE_NTOHL (0x6e745265), 
  ACE_NTOHL (0x71756573), 
  ACE_NTOHL (0x74496e74), 
  ACE_NTOHL (0x65726365), 
  ACE_NTOHL (0x70746f72), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/PortableInterceptor/ClientRequestInterceptor:1.0
    25,
  ACE_NTOHL (0x436c6965), 
  ACE_NTOHL (0x6e745265), 
  ACE_NTOHL (0x71756573), 
  ACE_NTOHL (0x74496e74), 
  ACE_NTOHL (0x65726365), 
  ACE_NTOHL (0x70746f72), 
  ACE_NTOHL (0x0),  // name = ClientRequestInterceptor
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ClientRequestInterceptor (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ClientRequestInterceptor),
    (char *) &_oc_PortableInterceptor_ClientRequestInterceptor,
    0,
    sizeof (PortableInterceptor::ClientRequestInterceptor)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_ClientRequestInterceptor =
    &_tc_TAO_tc_PortableInterceptor_ClientRequestInterceptor;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PortableInterceptor::ServerRequestInterceptor.

PortableInterceptor::ServerRequestInterceptor_ptr
TAO::Objref_Traits<PortableInterceptor::ServerRequestInterceptor>::tao_duplicate (
    PortableInterceptor::ServerRequestInterceptor_ptr p
  )
{
  return PortableInterceptor::ServerRequestInterceptor::_duplicate (p);
}

void
TAO::Objref_Traits<PortableInterceptor::ServerRequestInterceptor>::tao_release (
    PortableInterceptor::ServerRequestInterceptor_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ServerRequestInterceptor_ptr
TAO::Objref_Traits<PortableInterceptor::ServerRequestInterceptor>::tao_nil (void)
{
  return PortableInterceptor::ServerRequestInterceptor::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<PortableInterceptor::ServerRequestInterceptor>::tao_marshal (
    PortableInterceptor::ServerRequestInterceptor_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*PortableInterceptor__TAO_ServerRequestInterceptor_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

PortableInterceptor::ServerRequestInterceptor::ServerRequestInterceptor (void)
{}

PortableInterceptor::ServerRequestInterceptor::~ServerRequestInterceptor (void)
{}

void 
PortableInterceptor::ServerRequestInterceptor::_tao_any_destructor (void *_tao_void_pointer)
{
  ServerRequestInterceptor *_tao_tmp_pointer =
    ACE_static_cast (ServerRequestInterceptor *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ServerRequestInterceptor::_nil ();
    }
  
  ServerRequestInterceptor_ptr proxy =
    dynamic_cast<ServerRequestInterceptor_ptr> (_tao_objref);

  return ServerRequestInterceptor::_duplicate (proxy);
}

PortableInterceptor::ServerRequestInterceptor_ptr
PortableInterceptor::ServerRequestInterceptor::_duplicate (ServerRequestInterceptor_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
PortableInterceptor::ServerRequestInterceptor::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/Interceptor:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/ServerRequestInterceptor:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* PortableInterceptor::ServerRequestInterceptor::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ServerRequestInterceptor:1.0";
}

CORBA::Boolean
PortableInterceptor::ServerRequestInterceptor::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ServerRequestInterceptor[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  61,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65725265), 
  ACE_NTOHL (0x71756573), 
  ACE_NTOHL (0x74496e74), 
  ACE_NTOHL (0x65726365), 
  ACE_NTOHL (0x70746f72), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/PortableInterceptor/ServerRequestInterceptor:1.0
    25,
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65725265), 
  ACE_NTOHL (0x71756573), 
  ACE_NTOHL (0x74496e74), 
  ACE_NTOHL (0x65726365), 
  ACE_NTOHL (0x70746f72), 
  ACE_NTOHL (0x0),  // name = ServerRequestInterceptor
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ServerRequestInterceptor (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ServerRequestInterceptor),
    (char *) &_oc_PortableInterceptor_ServerRequestInterceptor,
    0,
    sizeof (PortableInterceptor::ServerRequestInterceptor)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_ServerRequestInterceptor =
    &_tc_TAO_tc_PortableInterceptor_ServerRequestInterceptor;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PortableInterceptor::PolicyFactory.

PortableInterceptor::PolicyFactory_ptr
TAO::Objref_Traits<PortableInterceptor::PolicyFactory>::tao_duplicate (
    PortableInterceptor::PolicyFactory_ptr p
  )
{
  return PortableInterceptor::PolicyFactory::_duplicate (p);
}

void
TAO::Objref_Traits<PortableInterceptor::PolicyFactory>::tao_release (
    PortableInterceptor::PolicyFactory_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::PolicyFactory_ptr
TAO::Objref_Traits<PortableInterceptor::PolicyFactory>::tao_nil (void)
{
  return PortableInterceptor::PolicyFactory::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<PortableInterceptor::PolicyFactory>::tao_marshal (
    PortableInterceptor::PolicyFactory_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*PortableInterceptor__TAO_PolicyFactory_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

PortableInterceptor::PolicyFactory::PolicyFactory (void)
{}

PortableInterceptor::PolicyFactory::~PolicyFactory (void)
{}

void 
PortableInterceptor::PolicyFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  PolicyFactory *_tao_tmp_pointer =
    ACE_static_cast (PolicyFactory *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return PolicyFactory::_nil ();
    }
  
  PolicyFactory_ptr proxy =
    dynamic_cast<PolicyFactory_ptr> (_tao_objref);

  return PolicyFactory::_duplicate (proxy);
}

PortableInterceptor::PolicyFactory_ptr
PortableInterceptor::PolicyFactory::_duplicate (PolicyFactory_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

// Hand-crafted.

::CORBA::Policy_ptr
PortableInterceptor::PolicyFactory::_create_policy (CORBA::PolicyType
                                                    ACE_ENV_ARG_DECL)
  ACE_THROW_SPEC ((CORBA::SystemException,
                   CORBA::PolicyError))
{
  ACE_THROW_RETURN (CORBA::PolicyError (CORBA::BAD_POLICY_TYPE),
                    CORBA::Policy::_nil ());
}

CORBA::Boolean
PortableInterceptor::PolicyFactory::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/PolicyFactory:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* PortableInterceptor::PolicyFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/PolicyFactory:1.0";
}

CORBA::Boolean
PortableInterceptor::PolicyFactory::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_PolicyFactory[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  50,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x506f6c69), 
  ACE_NTOHL (0x63794661), 
  ACE_NTOHL (0x63746f72), 
  ACE_NTOHL (0x793a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/PortableInterceptor/PolicyFactory:1.0
    14,
  ACE_NTOHL (0x506f6c69), 
  ACE_NTOHL (0x63794661), 
  ACE_NTOHL (0x63746f72), 
  ACE_NTOHL (0x79000000),  // name = PolicyFactory
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_PolicyFactory (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_PolicyFactory),
    (char *) &_oc_PortableInterceptor_PolicyFactory,
    0,
    sizeof (PortableInterceptor::PolicyFactory)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_PolicyFactory =
    &_tc_TAO_tc_PortableInterceptor_PolicyFactory;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PortableInterceptor::ORBInitInfo.

PortableInterceptor::ORBInitInfo_ptr
TAO::Objref_Traits<PortableInterceptor::ORBInitInfo>::tao_duplicate (
    PortableInterceptor::ORBInitInfo_ptr p
  )
{
  return PortableInterceptor::ORBInitInfo::_duplicate (p);
}

void
TAO::Objref_Traits<PortableInterceptor::ORBInitInfo>::tao_release (
    PortableInterceptor::ORBInitInfo_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ORBInitInfo_ptr
TAO::Objref_Traits<PortableInterceptor::ORBInitInfo>::tao_nil (void)
{
  return PortableInterceptor::ORBInitInfo::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<PortableInterceptor::ORBInitInfo>::tao_marshal (
    PortableInterceptor::ORBInitInfo_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*PortableInterceptor__TAO_ORBInitInfo_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ORBInitInfo_ObjectId[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  57,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x4f524249), 
  ACE_NTOHL (0x6e697449), 
  ACE_NTOHL (0x6e666f2f), 
  ACE_NTOHL (0x4f626a65), 
  ACE_NTOHL (0x63744964), 
  ACE_NTOHL (0x3a312e30), 
  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/PortableInterceptor/ORBInitInfo/ObjectId:1.0
    9,
  ACE_NTOHL (0x4f626a65), 
  ACE_NTOHL (0x63744964), 
  ACE_NTOHL (0x0),  // name = ObjectId
    CORBA::tk_string, 
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBInitInfo_ObjectId (
    CORBA::tk_alias,
    sizeof (_oc_PortableInterceptor_ORBInitInfo_ObjectId),
    (char *) &_oc_PortableInterceptor_ORBInitInfo_ObjectId,
    0,
    sizeof (PortableInterceptor::ORBInitInfo::ObjectId)
  );

::CORBA::TypeCode_ptr PortableInterceptor::ORBInitInfo::_tc_ObjectId =
  &_tc_TAO_tc_PortableInterceptor_ORBInitInfo_ObjectId;

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

PortableInterceptor::ORBInitInfo::DuplicateName::DuplicateName (void)
  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0",
        "DuplicateName"
      )
{
}

PortableInterceptor::ORBInitInfo::DuplicateName::~DuplicateName (void)
{
}

PortableInterceptor::ORBInitInfo::DuplicateName::DuplicateName (const ::PortableInterceptor::ORBInitInfo::DuplicateName &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->name = CORBA::string_dup (_tao_excp.name.in ());
}

PortableInterceptor::ORBInitInfo::DuplicateName&
PortableInterceptor::ORBInitInfo::DuplicateName::operator= (const ::PortableInterceptor::ORBInitInfo::DuplicateName &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  this->name = CORBA::string_dup (_tao_excp.name.in ());
  return *this;
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_tao_any_destructor (void *_tao_void_pointer)
{
  DuplicateName *_tao_tmp_pointer =
    ACE_static_cast (DuplicateName*, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableInterceptor::ORBInitInfo::DuplicateName *
PortableInterceptor::ORBInitInfo::DuplicateName::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (DuplicateName *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *PortableInterceptor::ORBInitInfo::DuplicateName::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::ORBInitInfo::DuplicateName, 0);
  return retval;
}

CORBA::Exception *
PortableInterceptor::ORBInitInfo::DuplicateName::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::PortableInterceptor::ORBInitInfo::DuplicateName (*this),
      0
    );
  return result;
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_raise (void)
{
  TAO_RAISE (*this);
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::ORBInitInfo::DuplicateName::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}



// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_ctor.cpp:66

PortableInterceptor::ORBInitInfo::DuplicateName::DuplicateName (
    const char * _tao_name
  )
  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0",
        "DuplicateName"
      )
{
  this->name = CORBA::string_dup (_tao_name);
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr PortableInterceptor::ORBInitInfo::DuplicateName::_type (void) const
{
  return ::PortableInterceptor::ORBInitInfo::_tc_DuplicateName;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ORBInitInfo_DuplicateName[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  62,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x4f524249), 
  ACE_NTOHL (0x6e697449), 
  ACE_NTOHL (0x6e666f2f), 
  ACE_NTOHL (0x4475706c), 
  ACE_NTOHL (0x69636174), 
  ACE_NTOHL (0x654e616d), 
  ACE_NTOHL (0x653a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0
    14,
  ACE_NTOHL (0x4475706c), 
  ACE_NTOHL (0x69636174), 
  ACE_NTOHL (0x654e616d), 
  ACE_NTOHL (0x65000000),  // name = DuplicateName
  1, // member count
    5,
  ACE_NTOHL (0x6e616d65), 
  ACE_NTOHL (0x0),  // name = name
    CORBA::tk_string, 
  0U, // string length
};

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBInitInfo_DuplicateName (
    CORBA::tk_except,
    sizeof (_oc_PortableInterceptor_ORBInitInfo_DuplicateName),
    (char *) &_oc_PortableInterceptor_ORBInitInfo_DuplicateName,
    0,
    sizeof (PortableInterceptor::ORBInitInfo::DuplicateName)
  );

::CORBA::TypeCode_ptr PortableInterceptor::ORBInitInfo::_tc_DuplicateName =
  &_tc_TAO_tc_PortableInterceptor_ORBInitInfo_DuplicateName;

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_cs.cpp:63

PortableInterceptor::ORBInitInfo::InvalidName::InvalidName (void)
  : CORBA::UserException (
        "IDL:omg.org/PortableInterceptor/ORBInitInfo/InvalidName:1.0",
        "InvalidName"
      )
{
}

PortableInterceptor::ORBInitInfo::InvalidName::~InvalidName (void)
{
}

PortableInterceptor::ORBInitInfo::InvalidName::InvalidName (const ::PortableInterceptor::ORBInitInfo::InvalidName &_tao_excp)
  : CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableInterceptor::ORBInitInfo::InvalidName&
PortableInterceptor::ORBInitInfo::InvalidName::operator= (const ::PortableInterceptor::ORBInitInfo::InvalidName &_tao_excp)
{
  this->ACE_NESTED_CLASS (CORBA, UserException)::operator= (_tao_excp);
  return *this;
}

void PortableInterceptor::ORBInitInfo::InvalidName::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidName *_tao_tmp_pointer =
    ACE_static_cast (InvalidName*, _tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableInterceptor::ORBInitInfo::InvalidName *
PortableInterceptor::ORBInitInfo::InvalidName::_downcast (CORBA::Exception *_tao_excp)
{
  if (!ACE_OS::strcmp ("IDL:omg.org/PortableInterceptor/ORBInitInfo/InvalidName:1.0", _tao_excp->_rep_id ()))
    {
      return ACE_dynamic_cast (InvalidName *, _tao_excp);
    }
  else
    {
      return 0;
    }
}

CORBA::Exception *PortableInterceptor::ORBInitInfo::InvalidName::_alloc (void)
{
  CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableInterceptor::ORBInitInfo::InvalidName, 0);
  return retval;
}

CORBA::Exception *
PortableInterceptor::ORBInitInfo::InvalidName::_tao_duplicate (void) const
{
  CORBA::Exception *result;
  ACE_NEW_RETURN (
      result,
      ::PortableInterceptor::ORBInitInfo::InvalidName (*this),
      0
    );
  return result;
}

void PortableInterceptor::ORBInitInfo::InvalidName::_raise (void)
{
  TAO_RAISE (*this);
}

void PortableInterceptor::ORBInitInfo::InvalidName::_tao_encode (
    TAO_OutputCDR &
    ACE_ENV_ARG_DECL
  ) const
{
  ACE_THROW (CORBA::MARSHAL ());
}

void PortableInterceptor::ORBInitInfo::InvalidName::_tao_decode (
    TAO_InputCDR &
    ACE_ENV_ARG_DECL
  )
{
  ACE_THROW (CORBA::MARSHAL ());
}

// TAO extension - the virtual _type method.
CORBA::TypeCode_ptr PortableInterceptor::ORBInitInfo::InvalidName::_type (void) const
{
  return ::PortableInterceptor::ORBInitInfo::_tc_InvalidName;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ORBInitInfo_InvalidName[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  60,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x4f524249), 
  ACE_NTOHL (0x6e697449), 
  ACE_NTOHL (0x6e666f2f), 
  ACE_NTOHL (0x496e7661), 
  ACE_NTOHL (0x6c69644e), 
  ACE_NTOHL (0x616d653a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/ORBInitInfo/InvalidName:1.0
    12,
  ACE_NTOHL (0x496e7661), 
  ACE_NTOHL (0x6c69644e), 
  ACE_NTOHL (0x616d6500),  // name = InvalidName
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBInitInfo_InvalidName (
    CORBA::tk_except,
    sizeof (_oc_PortableInterceptor_ORBInitInfo_InvalidName),
    (char *) &_oc_PortableInterceptor_ORBInitInfo_InvalidName,
    0,
    sizeof (PortableInterceptor::ORBInitInfo::InvalidName)
  );

::CORBA::TypeCode_ptr PortableInterceptor::ORBInitInfo::_tc_InvalidName =
  &_tc_TAO_tc_PortableInterceptor_ORBInitInfo_InvalidName;

PortableInterceptor::ORBInitInfo::ORBInitInfo (void)
{}

PortableInterceptor::ORBInitInfo::~ORBInitInfo (void)
{}

void 
PortableInterceptor::ORBInitInfo::_tao_any_destructor (void *_tao_void_pointer)
{
  ORBInitInfo *_tao_tmp_pointer =
    ACE_static_cast (ORBInitInfo *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ORBInitInfo::_nil ();
    }
  
  ORBInitInfo_ptr proxy =
    dynamic_cast<ORBInitInfo_ptr> (_tao_objref);

  return ORBInitInfo::_duplicate (proxy);
}

PortableInterceptor::ORBInitInfo_ptr
PortableInterceptor::ORBInitInfo::_duplicate (ORBInitInfo_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
PortableInterceptor::ORBInitInfo::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/ORBInitInfo:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* PortableInterceptor::ORBInitInfo::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ORBInitInfo:1.0";
}

CORBA::Boolean
PortableInterceptor::ORBInitInfo::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ORBInitInfo[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  48,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x4f524249), 
  ACE_NTOHL (0x6e697449), 
  ACE_NTOHL (0x6e666f3a), 
  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/PortableInterceptor/ORBInitInfo:1.0
    12,
  ACE_NTOHL (0x4f524249), 
  ACE_NTOHL (0x6e697449), 
  ACE_NTOHL (0x6e666f00),  // name = ORBInitInfo
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBInitInfo (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ORBInitInfo),
    (char *) &_oc_PortableInterceptor_ORBInitInfo,
    0,
    sizeof (PortableInterceptor::ORBInitInfo)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_ORBInitInfo =
    &_tc_TAO_tc_PortableInterceptor_ORBInitInfo;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PortableInterceptor::ORBInitializer.

PortableInterceptor::ORBInitializer_ptr
TAO::Objref_Traits<PortableInterceptor::ORBInitializer>::tao_duplicate (
    PortableInterceptor::ORBInitializer_ptr p
  )
{
  return PortableInterceptor::ORBInitializer::_duplicate (p);
}

void
TAO::Objref_Traits<PortableInterceptor::ORBInitializer>::tao_release (
    PortableInterceptor::ORBInitializer_ptr p
  )
{
  CORBA::release (p);
}

PortableInterceptor::ORBInitializer_ptr
TAO::Objref_Traits<PortableInterceptor::ORBInitializer>::tao_nil (void)
{
  return PortableInterceptor::ORBInitializer::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<PortableInterceptor::ORBInitializer>::tao_marshal (
    PortableInterceptor::ORBInitializer_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return p->marshal (cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*PortableInterceptor__TAO_ORBInitializer_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

PortableInterceptor::ORBInitializer::ORBInitializer (void)
{}

PortableInterceptor::ORBInitializer::~ORBInitializer (void)
{}

void 
PortableInterceptor::ORBInitializer::_tao_any_destructor (void *_tao_void_pointer)
{
  ORBInitializer *_tao_tmp_pointer =
    ACE_static_cast (ORBInitializer *, _tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (_tao_objref))
    {
      return ORBInitializer::_nil ();
    }
  
  ORBInitializer_ptr proxy =
    dynamic_cast<ORBInitializer_ptr> (_tao_objref);

  return ORBInitializer::_duplicate (proxy);
}

PortableInterceptor::ORBInitializer_ptr
PortableInterceptor::ORBInitializer::_duplicate (ORBInitializer_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

CORBA::Boolean
PortableInterceptor::ORBInitializer::_is_a (
    const char *value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/PortableInterceptor/ORBInitializer:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          (char *)value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
     )
    {
      return 1; // success using local knowledge
    }
  else
    {
      return 0;
    }
}

const char* PortableInterceptor::ORBInitializer::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableInterceptor/ORBInitializer:1.0";
}

CORBA::Boolean
PortableInterceptor::ORBInitializer::marshal (TAO_OutputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_PortableInterceptor_ORBInitializer[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  51,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x496e7465), 
  ACE_NTOHL (0x72636570), 
  ACE_NTOHL (0x746f722f), 
  ACE_NTOHL (0x4f524249), 
  ACE_NTOHL (0x6e697469), 
  ACE_NTOHL (0x616c697a), 
  ACE_NTOHL (0x65723a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/PortableInterceptor/ORBInitializer:1.0
    15,
  ACE_NTOHL (0x4f524249), 
  ACE_NTOHL (0x6e697469), 
  ACE_NTOHL (0x616c697a), 
  ACE_NTOHL (0x65720000),  // name = ORBInitializer
  };

static CORBA::TypeCode _tc_TAO_tc_PortableInterceptor_ORBInitializer (
    CORBA::tk_objref,
    sizeof (_oc_PortableInterceptor_ORBInitializer),
    (char *) &_oc_PortableInterceptor_ORBInitializer,
    0,
    sizeof (PortableInterceptor::ORBInitializer)
  );

namespace PortableInterceptor
{
  ::CORBA::TypeCode_ptr _tc_ORBInitializer =
    &_tc_TAO_tc_PortableInterceptor_ORBInitializer;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::Interceptor_ptr _tao_elem
  )
{
  PortableInterceptor::Interceptor_ptr _tao_objptr =
    PortableInterceptor::Interceptor::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::Interceptor_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::Interceptor>::insert (
      _tao_any,
      PortableInterceptor::Interceptor::_tao_any_destructor,
      PortableInterceptor::_tc_Interceptor,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::Interceptor_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::Interceptor>::extract (
        _tao_any,
        PortableInterceptor::Interceptor::_tao_any_destructor,
        PortableInterceptor::_tc_Interceptor,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::Interceptor>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::Interceptor>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::Interceptor>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableInterceptor::ForwardRequest>::demarshal_value (
    TAO_InputCDR & cdr
  )
{
  CORBA::String_var id;
  
  if ((cdr >> id.out ()) == 0)
    {
      return 0;
    }
  
  ACE_TRY_NEW_ENV
    {
      this->value_->_tao_decode (cdr ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      return 0;
    }
  ACE_ENDTRY;
  
  return 1;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableInterceptor::ForwardRequest &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableInterceptor::ForwardRequest>::insert_copy (
      _tao_any,
      PortableInterceptor::ForwardRequest::_tao_any_destructor,
      PortableInterceptor::_tc_ForwardRequest,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ForwardRequest *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableInterceptor::ForwardRequest>::insert (
      _tao_any,
      PortableInterceptor::ForwardRequest::_tao_any_destructor,
      PortableInterceptor::_tc_ForwardRequest,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ForwardRequest *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const PortableInterceptor::ForwardRequest *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableInterceptor::ForwardRequest *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableInterceptor::ForwardRequest>::extract (
        _tao_any,
        PortableInterceptor::ForwardRequest::_tao_any_destructor,
        PortableInterceptor::_tc_ForwardRequest,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableInterceptor::InvalidSlot>::demarshal_value (
    TAO_InputCDR & cdr
  )
{
  CORBA::String_var id;
  
  if ((cdr >> id.out ()) == 0)
    {
      return 0;
    }
  
  ACE_TRY_NEW_ENV
    {
      this->value_->_tao_decode (cdr ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      return 0;
    }
  ACE_ENDTRY;
  
  return 1;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableInterceptor::InvalidSlot &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableInterceptor::InvalidSlot>::insert_copy (
      _tao_any,
      PortableInterceptor::InvalidSlot::_tao_any_destructor,
      PortableInterceptor::_tc_InvalidSlot,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::InvalidSlot *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableInterceptor::InvalidSlot>::insert (
      _tao_any,
      PortableInterceptor::InvalidSlot::_tao_any_destructor,
      PortableInterceptor::_tc_InvalidSlot,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::InvalidSlot *&_tao_elem
  )
{
  return _tao_any >>= ACE_const_cast (
      const PortableInterceptor::InvalidSlot *&,
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableInterceptor::InvalidSlot *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableInterceptor::InvalidSlot>::extract (
        _tao_any,
        PortableInterceptor::InvalidSlot::_tao_any_destructor,
        PortableInterceptor::_tc_InvalidSlot,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::Current_ptr _tao_elem
  )
{
  PortableInterceptor::Current_ptr _tao_objptr =
    PortableInterceptor::Current::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::Current_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::Current>::insert (
      _tao_any,
      PortableInterceptor::Current::_tao_any_destructor,
      PortableInterceptor::_tc_Current,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::Current_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::Current>::extract (
        _tao_any,
        PortableInterceptor::Current::_tao_any_destructor,
        PortableInterceptor::_tc_Current,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::Current>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::Current>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::Current>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::RequestInfo_ptr _tao_elem
  )
{
  PortableInterceptor::RequestInfo_ptr _tao_objptr =
    PortableInterceptor::RequestInfo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::RequestInfo_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::RequestInfo>::insert (
      _tao_any,
      PortableInterceptor::RequestInfo::_tao_any_destructor,
      PortableInterceptor::_tc_RequestInfo,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::RequestInfo_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::RequestInfo>::extract (
        _tao_any,
        PortableInterceptor::RequestInfo::_tao_any_destructor,
        PortableInterceptor::_tc_RequestInfo,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::RequestInfo>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::RequestInfo>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::RequestInfo>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInfo_ptr _tao_elem
  )
{
  PortableInterceptor::ClientRequestInfo_ptr _tao_objptr =
    PortableInterceptor::ClientRequestInfo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInfo_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ClientRequestInfo>::insert (
      _tao_any,
      PortableInterceptor::ClientRequestInfo::_tao_any_destructor,
      PortableInterceptor::_tc_ClientRequestInfo,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInfo_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ClientRequestInfo>::extract (
        _tao_any,
        PortableInterceptor::ClientRequestInfo::_tao_any_destructor,
        PortableInterceptor::_tc_ClientRequestInfo,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ClientRequestInfo>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ClientRequestInfo>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ClientRequestInfo>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInfo_ptr _tao_elem
  )
{
  PortableInterceptor::ServerRequestInfo_ptr _tao_objptr =
    PortableInterceptor::ServerRequestInfo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInfo_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ServerRequestInfo>::insert (
      _tao_any,
      PortableInterceptor::ServerRequestInfo::_tao_any_destructor,
      PortableInterceptor::_tc_ServerRequestInfo,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInfo_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ServerRequestInfo>::extract (
        _tao_any,
        PortableInterceptor::ServerRequestInfo::_tao_any_destructor,
        PortableInterceptor::_tc_ServerRequestInfo,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ServerRequestInfo>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ServerRequestInfo>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ServerRequestInfo>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInterceptor_ptr _tao_elem
  )
{
  PortableInterceptor::ClientRequestInterceptor_ptr _tao_objptr =
    PortableInterceptor::ClientRequestInterceptor::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInterceptor_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ClientRequestInterceptor>::insert (
      _tao_any,
      PortableInterceptor::ClientRequestInterceptor::_tao_any_destructor,
      PortableInterceptor::_tc_ClientRequestInterceptor,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ClientRequestInterceptor_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ClientRequestInterceptor>::extract (
        _tao_any,
        PortableInterceptor::ClientRequestInterceptor::_tao_any_destructor,
        PortableInterceptor::_tc_ClientRequestInterceptor,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ClientRequestInterceptor>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ClientRequestInterceptor>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ClientRequestInterceptor>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInterceptor_ptr _tao_elem
  )
{
  PortableInterceptor::ServerRequestInterceptor_ptr _tao_objptr =
    PortableInterceptor::ServerRequestInterceptor::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInterceptor_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ServerRequestInterceptor>::insert (
      _tao_any,
      PortableInterceptor::ServerRequestInterceptor::_tao_any_destructor,
      PortableInterceptor::_tc_ServerRequestInterceptor,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ServerRequestInterceptor_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ServerRequestInterceptor>::extract (
        _tao_any,
        PortableInterceptor::ServerRequestInterceptor::_tao_any_destructor,
        PortableInterceptor::_tc_ServerRequestInterceptor,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ServerRequestInterceptor>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ServerRequestInterceptor>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ServerRequestInterceptor>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::PolicyFactory_ptr _tao_elem
  )
{
  PortableInterceptor::PolicyFactory_ptr _tao_objptr =
    PortableInterceptor::PolicyFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::PolicyFactory_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::PolicyFactory>::insert (
      _tao_any,
      PortableInterceptor::PolicyFactory::_tao_any_destructor,
      PortableInterceptor::_tc_PolicyFactory,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::PolicyFactory_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::PolicyFactory>::extract (
        _tao_any,
        PortableInterceptor::PolicyFactory::_tao_any_destructor,
        PortableInterceptor::_tc_PolicyFactory,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::PolicyFactory>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::PolicyFactory>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::PolicyFactory>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitInfo_ptr _tao_elem
  )
{
  PortableInterceptor::ORBInitInfo_ptr _tao_objptr =
    PortableInterceptor::ORBInitInfo::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitInfo_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ORBInitInfo>::insert (
      _tao_any,
      PortableInterceptor::ORBInitInfo::_tao_any_destructor,
      PortableInterceptor::_tc_ORBInitInfo,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitInfo_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ORBInitInfo>::extract (
        _tao_any,
        PortableInterceptor::ORBInitInfo::_tao_any_destructor,
        PortableInterceptor::_tc_ORBInitInfo,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ORBInitInfo>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ORBInitInfo>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ORBInitInfo>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:50

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitializer_ptr _tao_elem
  )
{
  PortableInterceptor::ORBInitializer_ptr _tao_objptr =
    PortableInterceptor::ORBInitializer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitializer_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableInterceptor::ORBInitializer>::insert (
      _tao_any,
      PortableInterceptor::ORBInitializer::_tao_any_destructor,
      PortableInterceptor::_tc_ORBInitializer,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableInterceptor::ORBInitializer_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableInterceptor::ORBInitializer>::extract (
        _tao_any,
        PortableInterceptor::ORBInitializer::_tao_any_destructor,
        PortableInterceptor::_tc_ORBInitializer,
        _tao_elem
      );
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ORBInitializer>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ORBInitializer>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableInterceptor::ORBInitializer>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/root.cpp:1703

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::OctetSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::OctetSeq,
        CORBA::OctetSeq_var,
        CORBA::OctetSeq_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::StringSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        CORBA::StringSeq,
        CORBA::StringSeq_var,
        CORBA::StringSeq_out
      >;

#endif /* end #if !defined */

#if !defined (_CORBA_POLICY__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_POLICY__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<CORBA::Policy>;

  template class
    TAO::Object_Arg_Traits_T<
        CORBA::Policy_ptr,
        CORBA::Policy_var,
        CORBA::Policy_out
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Basic_Impl_T<
        CORBA::SetOverrideType
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::PolicyError
      >;

  template class
    TAO::Any_Dual_Impl_T<
        CORBA::InvalidPolicies
      >;

  template class
    TAO::Any_Basic_Impl_T<
        CORBA::TCKind
      >;

  template class
    TAO::Any_Basic_Impl_T<
        CORBA::exception_type
      >;

  template class
    TAO::Any_Basic_Impl_T<
        CORBA::ParameterMode
      >;

#if !defined (_DYNAMIC_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _DYNAMIC_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<Dynamic::ParameterList>;

  template class
    TAO::Var_Size_Arg_Traits<
        Dynamic::ParameterList,
        Dynamic::ParameterList_var,
        Dynamic::ParameterList_out
      >;

#endif /* end #if !defined */

#if !defined (_DYNAMIC_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _DYNAMIC_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<Dynamic::ExceptionList>;

  template class
    TAO::Var_Size_Arg_Traits<
        Dynamic::ExceptionList,
        Dynamic::ExceptionList_var,
        Dynamic::ExceptionList_out
      >;

#endif /* end #if !defined */

#if !defined (_IOP_TAGGEDPROFILE__ARG_TRAITS_TMPLINST_CS_)
#define _IOP_TAGGEDPROFILE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<IOP::TaggedProfile>;

  template class
    TAO::Var_Size_Arg_Traits<
        IOP::TaggedProfile,
        IOP::TaggedProfile_var,
        IOP::TaggedProfile_out
      >;

#endif /* end #if !defined */

#if !defined (_IOP_TAGGEDCOMPONENT__ARG_TRAITS_TMPLINST_CS_)
#define _IOP_TAGGEDCOMPONENT__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<IOP::TaggedComponent>;

  template class
    TAO::Var_Size_Arg_Traits<
        IOP::TaggedComponent,
        IOP::TaggedComponent_var,
        IOP::TaggedComponent_out
      >;

#endif /* end #if !defined */

#if !defined (_IOP_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _IOP_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<IOP::TaggedComponentSeq>;

  template class
    TAO::Var_Size_Arg_Traits<
        IOP::TaggedComponentSeq,
        IOP::TaggedComponentSeq_var,
        IOP::TaggedComponentSeq_out
      >;

#endif /* end #if !defined */

#if !defined (_IOP_SERVICECONTEXT__ARG_TRAITS_TMPLINST_CS_)
#define _IOP_SERVICECONTEXT__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<IOP::ServiceContext>;

  template class
    TAO::Var_Size_Arg_Traits<
        IOP::ServiceContext,
        IOP::ServiceContext_var,
        IOP::ServiceContext_out
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        IOP::Codec::InvalidTypeForEncoding
      >;

  template class
    TAO::Any_Dual_Impl_T<
        IOP::Codec::FormatMismatch
      >;

  template class
    TAO::Any_Dual_Impl_T<
        IOP::Codec::TypeMismatch
      >;

#if !defined (_IOP_CODECFACTORY__ARG_TRAITS_TMPLINST_CS_)
#define _IOP_CODECFACTORY__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<IOP::CodecFactory>;

  template class
    TAO::Object_Arg_Traits_T<
        IOP::CodecFactory_ptr,
        IOP::CodecFactory_var,
        IOP::CodecFactory_out
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        IOP::CodecFactory::UnknownEncoding
      >;

  template class
    TAO_Objref_Var_T<
        PortableInterceptor::Interceptor,
        TAO::Objref_Traits<PortableInterceptor::Interceptor>
      >;
  
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::Interceptor,
        TAO::Objref_Traits<PortableInterceptor::Interceptor>
      >;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::Interceptor
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableInterceptor::ForwardRequest
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableInterceptor::InvalidSlot
      >;

  template class
    TAO_Objref_Var_T<
        PortableInterceptor::Current,
        TAO::Objref_Traits<PortableInterceptor::Current>
      >;
  
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::Current,
        TAO::Objref_Traits<PortableInterceptor::Current>
      >;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::Current
      >;

  template class
    TAO::Ret_Var_Size_Argument_T<
        IOP::ServiceContext,
        IOP::ServiceContext_var
      >;

  template class
    TAO_Objref_Var_T<
        PortableInterceptor::RequestInfo,
        TAO::Objref_Traits<PortableInterceptor::RequestInfo>
      >;
  
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::RequestInfo,
        TAO::Objref_Traits<PortableInterceptor::RequestInfo>
      >;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::RequestInfo
      >;

#if !defined (_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_CLIENTREQUESTINFO__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<PortableInterceptor::ClientRequestInfo>;

  template class
    TAO::Object_Arg_Traits_T<
        PortableInterceptor::ClientRequestInfo_ptr,
        PortableInterceptor::ClientRequestInfo_var,
        PortableInterceptor::ClientRequestInfo_out
      >;

#endif /* end #if !defined */

  template class
    TAO::Ret_Var_Size_Argument_T<
        IOP::TaggedComponent,
        IOP::TaggedComponent_var
      >;

  template class
    TAO::Ret_Var_Size_Argument_T<
        IOP::sequence,
        IOP::sequence_var
      >;

  template class
    TAO::Ret_Object_Argument_T<
        CORBA::Policy_ptr,
        CORBA::Policy_var
      >;

  template class
    TAO::In_Var_Size_Argument_T<
        IOP::ServiceContext
      >;

  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ClientRequestInfo,
        TAO::Objref_Traits<PortableInterceptor::ClientRequestInfo>
      >;
  
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ClientRequestInfo,
        TAO::Objref_Traits<PortableInterceptor::ClientRequestInfo>
      >;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::ClientRequestInfo
      >;

#if !defined (_PORTABLEINTERCEPTOR_SERVERREQUESTINFO__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_SERVERREQUESTINFO__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<PortableInterceptor::ServerRequestInfo>;

  template class
    TAO::Object_Arg_Traits_T<
        PortableInterceptor::ServerRequestInfo_ptr,
        PortableInterceptor::ServerRequestInfo_var,
        PortableInterceptor::ServerRequestInfo_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ServerRequestInfo,
        TAO::Objref_Traits<PortableInterceptor::ServerRequestInfo>
      >;
  
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ServerRequestInfo,
        TAO::Objref_Traits<PortableInterceptor::ServerRequestInfo>
      >;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::ServerRequestInfo
      >;

#if !defined (_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<PortableInterceptor::ClientRequestInterceptor>;

  template class
    TAO::Object_Arg_Traits_T<
        PortableInterceptor::ClientRequestInterceptor_ptr,
        PortableInterceptor::ClientRequestInterceptor_var,
        PortableInterceptor::ClientRequestInterceptor_out
      >;

#endif /* end #if !defined */

  template class
    TAO::In_Object_Argument_T<
        PortableInterceptor::ClientRequestInfo_ptr
      >;

  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ClientRequestInterceptor,
        TAO::Objref_Traits<PortableInterceptor::ClientRequestInterceptor>
      >;
  
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ClientRequestInterceptor,
        TAO::Objref_Traits<PortableInterceptor::ClientRequestInterceptor>
      >;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::ClientRequestInterceptor
      >;

#if !defined (_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<PortableInterceptor::ServerRequestInterceptor>;

  template class
    TAO::Object_Arg_Traits_T<
        PortableInterceptor::ServerRequestInterceptor_ptr,
        PortableInterceptor::ServerRequestInterceptor_var,
        PortableInterceptor::ServerRequestInterceptor_out
      >;

#endif /* end #if !defined */

  template class
    TAO::In_Object_Argument_T<
        PortableInterceptor::ServerRequestInfo_ptr
      >;

  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ServerRequestInterceptor,
        TAO::Objref_Traits<PortableInterceptor::ServerRequestInterceptor>
      >;
  
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ServerRequestInterceptor,
        TAO::Objref_Traits<PortableInterceptor::ServerRequestInterceptor>
      >;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::ServerRequestInterceptor
      >;

#if !defined (_PORTABLEINTERCEPTOR_POLICYFACTORY__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_POLICYFACTORY__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<PortableInterceptor::PolicyFactory>;

  template class
    TAO::Object_Arg_Traits_T<
        PortableInterceptor::PolicyFactory_ptr,
        PortableInterceptor::PolicyFactory_var,
        PortableInterceptor::PolicyFactory_out
      >;

#endif /* end #if !defined */

  template class
    TAO_Objref_Var_T<
        PortableInterceptor::PolicyFactory,
        TAO::Objref_Traits<PortableInterceptor::PolicyFactory>
      >;
  
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::PolicyFactory,
        TAO::Objref_Traits<PortableInterceptor::PolicyFactory>
      >;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::PolicyFactory
      >;

#if !defined (_PORTABLEINTERCEPTOR_IORINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_IORINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<PortableInterceptor::IORInterceptor>;

  template class
    TAO::Object_Arg_Traits_T<
        PortableInterceptor::IORInterceptor_ptr,
        PortableInterceptor::IORInterceptor_var,
        PortableInterceptor::IORInterceptor_out
      >;

#endif /* end #if !defined */

  template class TAO::Objref_Traits<PortableInterceptor::IORInterceptor>;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::IORInterceptor
      >;

#if !defined (_PORTABLEINTERCEPTOR_ORBINITINFO__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_ORBINITINFO__ARG_TRAITS_TMPLINST_CS_

  template class TAO::Arg_Traits<PortableInterceptor::ORBInitInfo>;

  template class
    TAO::Object_Arg_Traits_T<
        PortableInterceptor::ORBInitInfo_ptr,
        PortableInterceptor::ORBInitInfo_var,
        PortableInterceptor::ORBInitInfo_out
      >;

#endif /* end #if !defined */

  template class
    TAO::Any_Dual_Impl_T<
        PortableInterceptor::ORBInitInfo::DuplicateName
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableInterceptor::ORBInitInfo::InvalidName
      >;

  template class
    TAO::In_Object_Argument_T<
        PortableInterceptor::ClientRequestInterceptor_ptr
      >;

  template class
    TAO::In_Object_Argument_T<
        PortableInterceptor::ServerRequestInterceptor_ptr
      >;

  template class
    TAO::In_Object_Argument_T<
        PortableInterceptor::IORInterceptor_ptr
      >;

  template class
    TAO::In_Object_Argument_T<
        PortableInterceptor::PolicyFactory_ptr
      >;

  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ORBInitInfo,
        TAO::Objref_Traits<PortableInterceptor::ORBInitInfo>
      >;
  
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ORBInitInfo,
        TAO::Objref_Traits<PortableInterceptor::ORBInitInfo>
      >;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::ORBInitInfo
      >;

  template class
    TAO::In_Object_Argument_T<
        PortableInterceptor::ORBInitInfo_ptr
      >;

  template class
    TAO_Objref_Var_T<
        PortableInterceptor::ORBInitializer,
        TAO::Objref_Traits<PortableInterceptor::ORBInitializer>
      >;
  
  template class
    TAO_Objref_Out_T<
        PortableInterceptor::ORBInitializer,
        TAO::Objref_Traits<PortableInterceptor::ORBInitializer>
      >;

  template class
    TAO::Any_Impl_T<
        PortableInterceptor::ORBInitializer
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::OctetSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::OctetSeq, \
        CORBA::OctetSeq_var, \
        CORBA::OctetSeq_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::StringSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        CORBA::StringSeq, \
        CORBA::StringSeq_var, \
        CORBA::StringSeq_out \
      >

#endif /* end #if !defined */

#if !defined (_CORBA_POLICY__ARG_TRAITS_TMPLINST_CS_)
#define _CORBA_POLICY__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<CORBA::Policy>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        CORBA::Policy_ptr, \
        CORBA::Policy_var, \
        CORBA::Policy_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Basic_Impl_T< \
        CORBA::SetOverrideType \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::PolicyError \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        CORBA::InvalidPolicies \
      >

# pragma instantiate \
    TAO::Any_Basic_Impl_T< \
        CORBA::TCKind \
      >

# pragma instantiate \
    TAO::Any_Basic_Impl_T< \
        CORBA::exception_type \
      >

# pragma instantiate \
    TAO::Any_Basic_Impl_T< \
        CORBA::ParameterMode \
      >

#if !defined (_DYNAMIC_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _DYNAMIC_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<Dynamic::ParameterList>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        Dynamic::ParameterList, \
        Dynamic::ParameterList_var, \
        Dynamic::ParameterList_out \
      >

#endif /* end #if !defined */

#if !defined (_DYNAMIC_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _DYNAMIC_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<Dynamic::ExceptionList>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        Dynamic::ExceptionList, \
        Dynamic::ExceptionList_var, \
        Dynamic::ExceptionList_out \
      >

#endif /* end #if !defined */

#if !defined (_IOP_TAGGEDPROFILE__ARG_TRAITS_TMPLINST_CS_)
#define _IOP_TAGGEDPROFILE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<IOP::TaggedProfile>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        IOP::TaggedProfile, \
        IOP::TaggedProfile_var, \
        IOP::TaggedProfile_out \
      >

#endif /* end #if !defined */

#if !defined (_IOP_TAGGEDCOMPONENT__ARG_TRAITS_TMPLINST_CS_)
#define _IOP_TAGGEDCOMPONENT__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<IOP::TaggedComponent>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        IOP::TaggedComponent, \
        IOP::TaggedComponent_var, \
        IOP::TaggedComponent_out \
      >

#endif /* end #if !defined */

#if !defined (_IOP_SEQUENCE__ARG_TRAITS_TMPLINST_CS_)
#define _IOP_SEQUENCE__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<IOP::TaggedComponentSeq>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        IOP::TaggedComponentSeq, \
        IOP::TaggedComponentSeq_var, \
        IOP::TaggedComponentSeq_out \
      >

#endif /* end #if !defined */

#if !defined (_IOP_SERVICECONTEXT__ARG_TRAITS_TMPLINST_CS_)
#define _IOP_SERVICECONTEXT__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<IOP::ServiceContext>

# pragma instantiate \
    TAO::Var_Size_Arg_Traits< \
        IOP::ServiceContext, \
        IOP::ServiceContext_var, \
        IOP::ServiceContext_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        IOP::Codec::InvalidTypeForEncoding \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        IOP::Codec::FormatMismatch \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        IOP::Codec::TypeMismatch \
      >

#if !defined (_IOP_CODECFACTORY__ARG_TRAITS_TMPLINST_CS_)
#define _IOP_CODECFACTORY__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<IOP::CodecFactory>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        IOP::CodecFactory_ptr, \
        IOP::CodecFactory_var, \
        IOP::CodecFactory_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        IOP::CodecFactory::UnknownEncoding \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::Interceptor, \
        TAO::Objref_Traits<PortableInterceptor::Interceptor> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::Interceptor, \
        TAO::Objref_Traits<PortableInterceptor::Interceptor> \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::Interceptor \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableInterceptor::ForwardRequest \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableInterceptor::InvalidSlot \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::Current, \
        TAO::Objref_Traits<PortableInterceptor::Current> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::Current, \
        TAO::Objref_Traits<PortableInterceptor::Current> \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::Current \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::RequestInfo, \
        TAO::Objref_Traits<PortableInterceptor::RequestInfo> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::RequestInfo, \
        TAO::Objref_Traits<PortableInterceptor::RequestInfo> \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::RequestInfo \
      >

#if !defined (_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_CLIENTREQUESTINFO__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<PortableInterceptor::ClientRequestInfo>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        PortableInterceptor::ClientRequestInfo_ptr, \
        PortableInterceptor::ClientRequestInfo_var, \
        PortableInterceptor::ClientRequestInfo_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::In_Var_Size_Argument_T< \
        IOP::ServiceContext \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ClientRequestInfo, \
        TAO::Objref_Traits<PortableInterceptor::ClientRequestInfo> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ClientRequestInfo, \
        TAO::Objref_Traits<PortableInterceptor::ClientRequestInfo> \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::ClientRequestInfo \
      >

#if !defined (_PORTABLEINTERCEPTOR_SERVERREQUESTINFO__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_SERVERREQUESTINFO__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<PortableInterceptor::ServerRequestInfo>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        PortableInterceptor::ServerRequestInfo_ptr, \
        PortableInterceptor::ServerRequestInfo_var, \
        PortableInterceptor::ServerRequestInfo_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ServerRequestInfo, \
        TAO::Objref_Traits<PortableInterceptor::ServerRequestInfo> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ServerRequestInfo, \
        TAO::Objref_Traits<PortableInterceptor::ServerRequestInfo> \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::ServerRequestInfo \
      >

#if !defined (_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<PortableInterceptor::ClientRequestInterceptor>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        PortableInterceptor::ClientRequestInterceptor_ptr, \
        PortableInterceptor::ClientRequestInterceptor_var, \
        PortableInterceptor::ClientRequestInterceptor_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        PortableInterceptor::ClientRequestInfo_ptr \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ClientRequestInterceptor, \
        TAO::Objref_Traits<PortableInterceptor::ClientRequestInterceptor> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ClientRequestInterceptor, \
        TAO::Objref_Traits<PortableInterceptor::ClientRequestInterceptor> \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::ClientRequestInterceptor \
      >

#if !defined (_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<PortableInterceptor::ServerRequestInterceptor>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        PortableInterceptor::ServerRequestInterceptor_ptr, \
        PortableInterceptor::ServerRequestInterceptor_var, \
        PortableInterceptor::ServerRequestInterceptor_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        PortableInterceptor::ServerRequestInfo_ptr \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ServerRequestInterceptor, \
        TAO::Objref_Traits<PortableInterceptor::ServerRequestInterceptor> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ServerRequestInterceptor, \
        TAO::Objref_Traits<PortableInterceptor::ServerRequestInterceptor> \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::ServerRequestInterceptor \
      >

#if !defined (_PORTABLEINTERCEPTOR_POLICYFACTORY__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_POLICYFACTORY__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<PortableInterceptor::PolicyFactory>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        PortableInterceptor::PolicyFactory_ptr, \
        PortableInterceptor::PolicyFactory_var, \
        PortableInterceptor::PolicyFactory_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::PolicyFactory, \
        TAO::Objref_Traits<PortableInterceptor::PolicyFactory> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::PolicyFactory, \
        TAO::Objref_Traits<PortableInterceptor::PolicyFactory> \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::PolicyFactory \
      >

#if !defined (_PORTABLEINTERCEPTOR_IORINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_IORINTERCEPTOR__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<PortableInterceptor::IORInterceptor>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        PortableInterceptor::IORInterceptor_ptr, \
        PortableInterceptor::IORInterceptor_var, \
        PortableInterceptor::IORInterceptor_out \
      >

#endif /* end #if !defined */

# pragma instantiate TAO::Objref_Traits<PortableInterceptor::IORInterceptor>

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::IORInterceptor \
      >

#if !defined (_PORTABLEINTERCEPTOR_ORBINITINFO__ARG_TRAITS_TMPLINST_CS_)
#define _PORTABLEINTERCEPTOR_ORBINITINFO__ARG_TRAITS_TMPLINST_CS_

# pragma instantiate TAO::Arg_Traits<PortableInterceptor::ORBInitInfo>

# pragma instantiate \
    TAO::Object_Arg_Traits_T< \
        PortableInterceptor::ORBInitInfo_ptr, \
        PortableInterceptor::ORBInitInfo_var, \
        PortableInterceptor::ORBInitInfo_out \
      >

#endif /* end #if !defined */

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableInterceptor::ORBInitInfo::DuplicateName \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableInterceptor::ORBInitInfo::InvalidName \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        PortableInterceptor::ClientRequestInterceptor_ptr \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        PortableInterceptor::ServerRequestInterceptor_ptr \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        PortableInterceptor::IORInterceptor_ptr \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        PortableInterceptor::PolicyFactory_ptr \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ORBInitInfo, \
        TAO::Objref_Traits<PortableInterceptor::ORBInitInfo> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ORBInitInfo, \
        TAO::Objref_Traits<PortableInterceptor::ORBInitInfo> \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::ORBInitInfo \
      >

# pragma instantiate \
    TAO::In_Object_Argument_T< \
        PortableInterceptor::ORBInitInfo_ptr \
      >

# pragma instantiate \
    TAO_Objref_Var_T< \
        PortableInterceptor::ORBInitializer, \
        TAO::Objref_Traits<PortableInterceptor::ORBInitializer> \
      >
  
# pragma instantiate \
    TAO_Objref_Out_T< \
        PortableInterceptor::ORBInitializer, \
        TAO::Objref_Traits<PortableInterceptor::ORBInitializer> \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableInterceptor::ORBInitializer \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 

