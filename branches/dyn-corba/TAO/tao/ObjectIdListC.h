// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:151

#ifndef _TAO_IDL_ORIG_OBJECTIDLISTC_H_
#define _TAO_IDL_ORIG_OBJECTIDLISTC_H_

#include "ace/pre.h"
#include "tao/corbafwd.h"
#include "tao/Sequence.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Export

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO TAO_Export
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typedef/typedef_ch.cpp:368

typedef char * CORBA_ORB_ObjectId;

#if !defined (_CORBA_ORB_OBJECTIDLIST_CH_)
#define _CORBA_ORB_OBJECTIDLIST_CH_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:371

class CORBA_ORB_ObjectIdList;
class CORBA_ORB_ObjectIdList_var;

// *************************************************************
// CORBA_ORB_ObjectIdList
// *************************************************************

class TAO_Export CORBA_ORB_ObjectIdList : public 

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_String_Sequence
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_String_Sequence

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  CORBA_ORB_ObjectIdList (void);
  CORBA_ORB_ObjectIdList (CORBA::ULong max);
  CORBA_ORB_ObjectIdList (
      CORBA::ULong max, 
      CORBA::ULong length, 
      char * *buffer, 
      CORBA::Boolean release = 0
    );
  CORBA_ORB_ObjectIdList (const CORBA_ORB_ObjectIdList &);
  ~CORBA_ORB_ObjectIdList (void);
  
  typedef CORBA_ORB_ObjectIdList_var _var_type;
};

#endif /* end #if !defined */

#if !defined (_CORBA_ORB_OBJECTIDLIST___VAR_CH_)
#define _CORBA_ORB_OBJECTIDLIST___VAR_CH_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:549

// *************************************************************
// class CORBA_ORB_ObjectIdList_var
// *************************************************************

class TAO_Export CORBA_ORB_ObjectIdList_var
{
public:
  CORBA_ORB_ObjectIdList_var (void);
  CORBA_ORB_ObjectIdList_var (CORBA_ORB_ObjectIdList *);
  CORBA_ORB_ObjectIdList_var (const CORBA_ORB_ObjectIdList_var &);
  ~CORBA_ORB_ObjectIdList_var (void);
  
  CORBA_ORB_ObjectIdList_var &operator= (CORBA_ORB_ObjectIdList *);
  CORBA_ORB_ObjectIdList_var &operator= (const CORBA_ORB_ObjectIdList_var &);
  CORBA_ORB_ObjectIdList *operator-> (void);
  const CORBA_ORB_ObjectIdList *operator-> (void) const;
  
  operator const CORBA_ORB_ObjectIdList &() const;
  operator CORBA_ORB_ObjectIdList &();
  operator CORBA_ORB_ObjectIdList &() const;
  
  // Variable-size base types only.
  operator CORBA_ORB_ObjectIdList *&();
  
  TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);
  
  // in, inout, out, _retn 
  const CORBA_ORB_ObjectIdList &in (void) const;
  CORBA_ORB_ObjectIdList &inout (void);
  CORBA_ORB_ObjectIdList *&out (void);
  CORBA_ORB_ObjectIdList *_retn (void);
  CORBA_ORB_ObjectIdList *ptr (void) const;

private:
  CORBA_ORB_ObjectIdList *ptr_;
};

#endif /* end #if !defined */

#if !defined (_CORBA_ORB_OBJECTIDLIST___OUT_CH_)
#define _CORBA_ORB_OBJECTIDLIST___OUT_CH_

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:753

class TAO_Export CORBA_ORB_ObjectIdList_out
{
public:
  CORBA_ORB_ObjectIdList_out (CORBA_ORB_ObjectIdList *&);
  CORBA_ORB_ObjectIdList_out (CORBA_ORB_ObjectIdList_var &);
  CORBA_ORB_ObjectIdList_out (const CORBA_ORB_ObjectIdList_out &);
  CORBA_ORB_ObjectIdList_out &operator= (const CORBA_ORB_ObjectIdList_out &);
  CORBA_ORB_ObjectIdList_out &operator= (CORBA_ORB_ObjectIdList *);
  operator CORBA_ORB_ObjectIdList *&();
  CORBA_ORB_ObjectIdList *&ptr (void);
  CORBA_ORB_ObjectIdList *operator-> (void);
  TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);

private:
  CORBA_ORB_ObjectIdList *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const CORBA_ORB_ObjectIdList_var &);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/cdr_op.cpp:48

#ifndef __ACE_INLINE__

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_CORBA_ORB_ObjectIdList_H_
#define _TAO_CDR_OP_CORBA_ORB_ObjectIdList_H_

TAO_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA_ORB_ObjectIdList &
  );
TAO_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA_ORB_ObjectIdList &
  );

#endif /* _TAO_CDR_OP_CORBA_ORB_ObjectIdList_H_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/cdr_op.cpp:64

#endif /* __ACE_INLINE__ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:1009

#if defined (__ACE_INLINE__)
#include "ObjectIdListC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include "ace/post.h"
#endif /* ifndef */

