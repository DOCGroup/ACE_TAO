// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:151

#ifndef _TAO_IDL_ORIG_IFR_COMPONENTSC_H_
#define _TAO_IDL_ORIG_IFR_COMPONENTSC_H_

#include "ace/pre.h"

#include "tao/corba.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "ifr_client_export.h"

#include "IFR_ExtendedC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_IFR_Client_Export

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO TAO_IFR_Client_Export
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:48

TAO_NAMESPACE  CORBA
{
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:48
  
  TAO_NAMESPACE  ComponentIR
  {
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/interface_fwd_ch.cpp:53
    
    class ComponentDef;

#if !defined (_CORBA_COMPONENTIR_COMPONENTDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_COMPONENTDEF___PTR_CH_
    
    typedef ComponentDef *ComponentDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_COMPONENTDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_COMPONENTDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export ComponentDef_var : public TAO_Base_var
    {
    public:
      ComponentDef_var (void); // default constructor
      ComponentDef_var (ComponentDef_ptr p) : ptr_ (p) {} 
      ComponentDef_var (const ComponentDef_var &); // copy constructor
      ~ComponentDef_var (void); // destructor
      
      ComponentDef_var &operator= (ComponentDef_ptr);
      ComponentDef_var &operator= (const ComponentDef_var &);
      ComponentDef_ptr operator-> (void) const;
      
      operator const ComponentDef_ptr &() const;
      operator ComponentDef_ptr &();
      // in, inout, out, _retn 
      ComponentDef_ptr in (void) const;
      ComponentDef_ptr &inout (void);
      ComponentDef_ptr &out (void);
      ComponentDef_ptr _retn (void);
      ComponentDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static ComponentDef_ptr tao_duplicate (ComponentDef_ptr);
      static void tao_release (ComponentDef_ptr);
      static ComponentDef_ptr tao_nil (void);
      static ComponentDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      ComponentDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      ComponentDef_var (const TAO_Base_var &rhs);
      ComponentDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_COMPONENTDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_COMPONENTDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export ComponentDef_out
    {
    public:
      ComponentDef_out (ComponentDef_ptr &);
      ComponentDef_out (ComponentDef_var &);
      ComponentDef_out (const ComponentDef_out &);
      ComponentDef_out &operator= (const ComponentDef_out &);
      ComponentDef_out &operator= (const ComponentDef_var &);
      ComponentDef_out &operator= (ComponentDef_ptr);
      operator ComponentDef_ptr &();
      ComponentDef_ptr &ptr (void);
      ComponentDef_ptr operator-> (void);
    
    private:
      ComponentDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/interface_fwd_ch.cpp:53
    
    class HomeDef;

#if !defined (_CORBA_COMPONENTIR_HOMEDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_HOMEDEF___PTR_CH_
    
    typedef HomeDef *HomeDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_HOMEDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_HOMEDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export HomeDef_var : public TAO_Base_var
    {
    public:
      HomeDef_var (void); // default constructor
      HomeDef_var (HomeDef_ptr p) : ptr_ (p) {} 
      HomeDef_var (const HomeDef_var &); // copy constructor
      ~HomeDef_var (void); // destructor
      
      HomeDef_var &operator= (HomeDef_ptr);
      HomeDef_var &operator= (const HomeDef_var &);
      HomeDef_ptr operator-> (void) const;
      
      operator const HomeDef_ptr &() const;
      operator HomeDef_ptr &();
      // in, inout, out, _retn 
      HomeDef_ptr in (void) const;
      HomeDef_ptr &inout (void);
      HomeDef_ptr &out (void);
      HomeDef_ptr _retn (void);
      HomeDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static HomeDef_ptr tao_duplicate (HomeDef_ptr);
      static void tao_release (HomeDef_ptr);
      static HomeDef_ptr tao_nil (void);
      static HomeDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      HomeDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      HomeDef_var (const TAO_Base_var &rhs);
      HomeDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_HOMEDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_HOMEDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export HomeDef_out
    {
    public:
      HomeDef_out (HomeDef_ptr &);
      HomeDef_out (HomeDef_var &);
      HomeDef_out (const HomeDef_out &);
      HomeDef_out &operator= (const HomeDef_out &);
      HomeDef_out &operator= (const HomeDef_var &);
      HomeDef_out &operator= (HomeDef_ptr);
      operator HomeDef_ptr &();
      HomeDef_ptr &ptr (void);
      HomeDef_ptr operator-> (void);
    
    private:
      HomeDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_EVENTDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_EVENTDEF___PTR_CH_
    
    class EventDef;
    typedef EventDef *EventDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_EVENTDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_EVENTDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export EventDef_var : public TAO_Base_var
    {
    public:
      EventDef_var (void); // default constructor
      EventDef_var (EventDef_ptr p) : ptr_ (p) {} 
      EventDef_var (const EventDef_var &); // copy constructor
      ~EventDef_var (void); // destructor
      
      EventDef_var &operator= (EventDef_ptr);
      EventDef_var &operator= (const EventDef_var &);
      EventDef_ptr operator-> (void) const;
      
      operator const EventDef_ptr &() const;
      operator EventDef_ptr &();
      // in, inout, out, _retn 
      EventDef_ptr in (void) const;
      EventDef_ptr &inout (void);
      EventDef_ptr &out (void);
      EventDef_ptr _retn (void);
      EventDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static EventDef_ptr tao_duplicate (EventDef_ptr);
      static void tao_release (EventDef_ptr);
      static EventDef_ptr tao_nil (void);
      static EventDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      EventDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      EventDef_var (const TAO_Base_var &rhs);
      EventDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_EVENTDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_EVENTDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export EventDef_out
    {
    public:
      EventDef_out (EventDef_ptr &);
      EventDef_out (EventDef_var &);
      EventDef_out (const EventDef_out &);
      EventDef_out &operator= (const EventDef_out &);
      EventDef_out &operator= (const EventDef_var &);
      EventDef_out &operator= (EventDef_ptr);
      operator EventDef_ptr &();
      EventDef_ptr &ptr (void);
      EventDef_ptr operator-> (void);
    
    private:
      EventDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_EVENTDEF_CH_)
#define _CORBA_COMPONENTIR_EVENTDEF_CH_
    
    class _TAO_EventDef_Proxy_Impl;
    class _TAO_EventDef_Remote_Proxy_Impl;
    class _TAO_EventDef_Proxy_Broker;
    class _TAO_EventDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export EventDef
      : public virtual CORBA::ExtValueDef
    {
    public:
      typedef EventDef_ptr _ptr_type;
      typedef EventDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static EventDef_ptr _duplicate (EventDef_ptr obj);
      
      static EventDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static EventDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static EventDef_ptr _nil (void)
        {
          return (EventDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_EventDef_Proxy_Broker *the_TAO_EventDef_Proxy_Broker_;
    
    protected:
      EventDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_EventDef_setup_collocation (int collocated);
      
      EventDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~EventDef (void);
      
      friend class _TAO_EventDef_Remote_Proxy_Impl;
      friend class _TAO_EventDef_ThruPOA_Proxy_Impl;
      friend class _TAO_EventDef_Direct_Proxy_Impl;
    
    private:
      EventDef (const EventDef &);
      void operator= (const EventDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_EventDef_Proxy_Impl
      : public virtual CORBA::_TAO_ExtValueDef_Proxy_Impl
    {
    public:
      virtual ~_TAO_EventDef_Proxy_Impl (void) {}
    
    protected:
      _TAO_EventDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_EventDef_Remote_Proxy_Impl
      : public virtual _TAO_EventDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::_TAO_ExtValueDef_Remote_Proxy_Impl
    {
    public:
      _TAO_EventDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_EventDef_Remote_Proxy_Impl (void) {}
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_EventDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_EventDef_Proxy_Broker (void);
      virtual _TAO_EventDef_Proxy_Impl &select_proxy (
          EventDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_EventDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_EventDef_Remote_Proxy_Broker
      : public virtual _TAO_EventDef_Proxy_Broker
    {
    public: 
      _TAO_EventDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_EventDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_EventDef_Proxy_Impl &select_proxy (
          EventDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_EventDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_EventDef_Remote_Proxy_Broker *the_TAO_EventDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_EventDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_CONTAINER___PTR_CH_)
#define _CORBA_COMPONENTIR_CONTAINER___PTR_CH_
    
    class Container;
    typedef Container *Container_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_CONTAINER___VAR_CH_)
#define _CORBA_COMPONENTIR_CONTAINER___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export Container_var : public TAO_Base_var
    {
    public:
      Container_var (void); // default constructor
      Container_var (Container_ptr p) : ptr_ (p) {} 
      Container_var (const Container_var &); // copy constructor
      ~Container_var (void); // destructor
      
      Container_var &operator= (Container_ptr);
      Container_var &operator= (const Container_var &);
      Container_ptr operator-> (void) const;
      
      operator const Container_ptr &() const;
      operator Container_ptr &();
      // in, inout, out, _retn 
      Container_ptr in (void) const;
      Container_ptr &inout (void);
      Container_ptr &out (void);
      Container_ptr _retn (void);
      Container_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static Container_ptr tao_duplicate (Container_ptr);
      static void tao_release (Container_ptr);
      static Container_ptr tao_nil (void);
      static Container_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      Container_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      Container_var (const TAO_Base_var &rhs);
      Container_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_CONTAINER___OUT_CH_)
#define _CORBA_COMPONENTIR_CONTAINER___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export Container_out
    {
    public:
      Container_out (Container_ptr &);
      Container_out (Container_var &);
      Container_out (const Container_out &);
      Container_out &operator= (const Container_out &);
      Container_out &operator= (const Container_var &);
      Container_out &operator= (Container_ptr);
      operator Container_ptr &();
      Container_ptr &ptr (void);
      Container_ptr operator-> (void);
    
    private:
      Container_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_CONTAINER_CH_)
#define _CORBA_COMPONENTIR_CONTAINER_CH_
    
    class _TAO_Container_Proxy_Impl;
    class _TAO_Container_Remote_Proxy_Impl;
    class _TAO_Container_Proxy_Broker;
    class _TAO_Container_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export Container
      : public virtual CORBA::Object
    {
    public:
      typedef Container_ptr _ptr_type;
      typedef Container_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static Container_ptr _duplicate (Container_ptr obj);
      
      static Container_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static Container_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static Container_ptr _nil (void)
        {
          return (Container_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::ComponentDef_ptr create_component (
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::ComponentDef_ptr base_component,
          const CORBA::InterfaceDefSeq & supports_interfaces
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::HomeDef_ptr create_home (
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::HomeDef_ptr base_home,
          CORBA::ComponentIR::ComponentDef_ptr managed_component,
          const CORBA::InterfaceDefSeq & supports_interfaces,
          CORBA::ValueDef_ptr primary_key
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::EventDef_ptr create_event (
          const char * id,
          const char * name,
          const char * version,
          CORBA::Boolean is_custom,
          CORBA::Boolean is_abstract,
          CORBA::ValueDef_ptr base_value,
          CORBA::Boolean is_truncatable,
          const CORBA::ValueDefSeq & abstract_base_values,
          const CORBA::InterfaceDefSeq & supported_interfaces,
          const CORBA::ExtInitializerSeq & initializers
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_Container_Proxy_Broker *the_TAO_Container_Proxy_Broker_;
    
    protected:
      Container (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_Container_setup_collocation (int collocated);
      
      Container (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~Container (void);
      
      friend class _TAO_Container_Remote_Proxy_Impl;
      friend class _TAO_Container_ThruPOA_Proxy_Impl;
      friend class _TAO_Container_Direct_Proxy_Impl;
    
    private:
      Container (const Container &);
      void operator= (const Container &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_Container_Proxy_Impl
      : public virtual TAO_Object_Proxy_Impl
    {
    public:
      virtual ~_TAO_Container_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::ComponentDef_ptr create_component (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::ComponentDef_ptr base_component,
          const CORBA::InterfaceDefSeq & supports_interfaces
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::HomeDef_ptr create_home (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::HomeDef_ptr base_home,
          CORBA::ComponentIR::ComponentDef_ptr managed_component,
          const CORBA::InterfaceDefSeq & supports_interfaces,
          CORBA::ValueDef_ptr primary_key
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::EventDef_ptr create_event (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::Boolean is_custom,
          CORBA::Boolean is_abstract,
          CORBA::ValueDef_ptr base_value,
          CORBA::Boolean is_truncatable,
          const CORBA::ValueDefSeq & abstract_base_values,
          const CORBA::InterfaceDefSeq & supported_interfaces,
          const CORBA::ExtInitializerSeq & initializers
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
    
    protected:
      _TAO_Container_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_Container_Remote_Proxy_Impl
      : public virtual _TAO_Container_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl
    {
    public:
      _TAO_Container_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_Container_Remote_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::ComponentDef_ptr create_component (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::ComponentDef_ptr base_component,
          const CORBA::InterfaceDefSeq & supports_interfaces
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::HomeDef_ptr create_home (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::HomeDef_ptr base_home,
          CORBA::ComponentIR::ComponentDef_ptr managed_component,
          const CORBA::InterfaceDefSeq & supports_interfaces,
          CORBA::ValueDef_ptr primary_key
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::EventDef_ptr create_event (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::Boolean is_custom,
          CORBA::Boolean is_abstract,
          CORBA::ValueDef_ptr base_value,
          CORBA::Boolean is_truncatable,
          const CORBA::ValueDefSeq & abstract_base_values,
          const CORBA::InterfaceDefSeq & supported_interfaces,
          const CORBA::ExtInitializerSeq & initializers
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_Container_Proxy_Broker
    {
    public:
      virtual ~_TAO_Container_Proxy_Broker (void);
      virtual _TAO_Container_Proxy_Impl &select_proxy (
          Container *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_Container_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_Container_Remote_Proxy_Broker
      : public virtual _TAO_Container_Proxy_Broker
    {
    public: 
      _TAO_Container_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_Container_Remote_Proxy_Broker (void);
      
      virtual _TAO_Container_Proxy_Impl &select_proxy (
          Container *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_Container_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_Container_Remote_Proxy_Broker *the_TAO_Container_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Container;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_MODULEDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_MODULEDEF___PTR_CH_
    
    class ModuleDef;
    typedef ModuleDef *ModuleDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_MODULEDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_MODULEDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export ModuleDef_var : public TAO_Base_var
    {
    public:
      ModuleDef_var (void); // default constructor
      ModuleDef_var (ModuleDef_ptr p) : ptr_ (p) {} 
      ModuleDef_var (const ModuleDef_var &); // copy constructor
      ~ModuleDef_var (void); // destructor
      
      ModuleDef_var &operator= (ModuleDef_ptr);
      ModuleDef_var &operator= (const ModuleDef_var &);
      ModuleDef_ptr operator-> (void) const;
      
      operator const ModuleDef_ptr &() const;
      operator ModuleDef_ptr &();
      // in, inout, out, _retn 
      ModuleDef_ptr in (void) const;
      ModuleDef_ptr &inout (void);
      ModuleDef_ptr &out (void);
      ModuleDef_ptr _retn (void);
      ModuleDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static ModuleDef_ptr tao_duplicate (ModuleDef_ptr);
      static void tao_release (ModuleDef_ptr);
      static ModuleDef_ptr tao_nil (void);
      static ModuleDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      ModuleDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      ModuleDef_var (const TAO_Base_var &rhs);
      ModuleDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_MODULEDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_MODULEDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export ModuleDef_out
    {
    public:
      ModuleDef_out (ModuleDef_ptr &);
      ModuleDef_out (ModuleDef_var &);
      ModuleDef_out (const ModuleDef_out &);
      ModuleDef_out &operator= (const ModuleDef_out &);
      ModuleDef_out &operator= (const ModuleDef_var &);
      ModuleDef_out &operator= (ModuleDef_ptr);
      operator ModuleDef_ptr &();
      ModuleDef_ptr &ptr (void);
      ModuleDef_ptr operator-> (void);
    
    private:
      ModuleDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_MODULEDEF_CH_)
#define _CORBA_COMPONENTIR_MODULEDEF_CH_
    
    class _TAO_ModuleDef_Proxy_Impl;
    class _TAO_ModuleDef_Remote_Proxy_Impl;
    class _TAO_ModuleDef_Proxy_Broker;
    class _TAO_ModuleDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export ModuleDef
      : public virtual CORBA::ModuleDef,
        public virtual CORBA::ComponentIR::Container
    {
    public:
      typedef ModuleDef_ptr _ptr_type;
      typedef ModuleDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static ModuleDef_ptr _duplicate (ModuleDef_ptr obj);
      
      static ModuleDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static ModuleDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static ModuleDef_ptr _nil (void)
        {
          return (ModuleDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_ModuleDef_Proxy_Broker *the_TAO_ModuleDef_Proxy_Broker_;
    
    protected:
      ModuleDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_ModuleDef_setup_collocation (int collocated);
      
      ModuleDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~ModuleDef (void);
      
      friend class _TAO_ModuleDef_Remote_Proxy_Impl;
      friend class _TAO_ModuleDef_ThruPOA_Proxy_Impl;
      friend class _TAO_ModuleDef_Direct_Proxy_Impl;
    
    private:
      ModuleDef (const ModuleDef &);
      void operator= (const ModuleDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_ModuleDef_Proxy_Impl
      : public virtual CORBA::_TAO_ModuleDef_Proxy_Impl, 
        public virtual CORBA::ComponentIR::_TAO_Container_Proxy_Impl
    {
    public:
      virtual ~_TAO_ModuleDef_Proxy_Impl (void) {}
    
    protected:
      _TAO_ModuleDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_ModuleDef_Remote_Proxy_Impl
      : public virtual _TAO_ModuleDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::_TAO_ModuleDef_Remote_Proxy_Impl,
        public virtual CORBA::ComponentIR::_TAO_Container_Remote_Proxy_Impl
    {
    public:
      _TAO_ModuleDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_ModuleDef_Remote_Proxy_Impl (void) {}
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_ModuleDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_ModuleDef_Proxy_Broker (void);
      virtual _TAO_ModuleDef_Proxy_Impl &select_proxy (
          ModuleDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_ModuleDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_ModuleDef_Remote_Proxy_Broker
      : public virtual _TAO_ModuleDef_Proxy_Broker
    {
    public: 
      _TAO_ModuleDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_ModuleDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_ModuleDef_Proxy_Impl &select_proxy (
          ModuleDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_ModuleDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_ModuleDef_Remote_Proxy_Broker *the_TAO_ModuleDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ModuleDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_REPOSITORY___PTR_CH_)
#define _CORBA_COMPONENTIR_REPOSITORY___PTR_CH_
    
    class Repository;
    typedef Repository *Repository_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_REPOSITORY___VAR_CH_)
#define _CORBA_COMPONENTIR_REPOSITORY___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export Repository_var : public TAO_Base_var
    {
    public:
      Repository_var (void); // default constructor
      Repository_var (Repository_ptr p) : ptr_ (p) {} 
      Repository_var (const Repository_var &); // copy constructor
      ~Repository_var (void); // destructor
      
      Repository_var &operator= (Repository_ptr);
      Repository_var &operator= (const Repository_var &);
      Repository_ptr operator-> (void) const;
      
      operator const Repository_ptr &() const;
      operator Repository_ptr &();
      // in, inout, out, _retn 
      Repository_ptr in (void) const;
      Repository_ptr &inout (void);
      Repository_ptr &out (void);
      Repository_ptr _retn (void);
      Repository_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static Repository_ptr tao_duplicate (Repository_ptr);
      static void tao_release (Repository_ptr);
      static Repository_ptr tao_nil (void);
      static Repository_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      Repository_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      Repository_var (const TAO_Base_var &rhs);
      Repository_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_REPOSITORY___OUT_CH_)
#define _CORBA_COMPONENTIR_REPOSITORY___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export Repository_out
    {
    public:
      Repository_out (Repository_ptr &);
      Repository_out (Repository_var &);
      Repository_out (const Repository_out &);
      Repository_out &operator= (const Repository_out &);
      Repository_out &operator= (const Repository_var &);
      Repository_out &operator= (Repository_ptr);
      operator Repository_ptr &();
      Repository_ptr &ptr (void);
      Repository_ptr operator-> (void);
    
    private:
      Repository_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_REPOSITORY_CH_)
#define _CORBA_COMPONENTIR_REPOSITORY_CH_
    
    class _TAO_Repository_Proxy_Impl;
    class _TAO_Repository_Remote_Proxy_Impl;
    class _TAO_Repository_Proxy_Broker;
    class _TAO_Repository_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export Repository
      : public virtual CORBA::Repository,
        public virtual CORBA::ComponentIR::Container
    {
    public:
      typedef Repository_ptr _ptr_type;
      typedef Repository_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static Repository_ptr _duplicate (Repository_ptr obj);
      
      static Repository_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static Repository_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static Repository_ptr _nil (void)
        {
          return (Repository_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_Repository_Proxy_Broker *the_TAO_Repository_Proxy_Broker_;
    
    protected:
      Repository (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_Repository_setup_collocation (int collocated);
      
      Repository (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~Repository (void);
      
      friend class _TAO_Repository_Remote_Proxy_Impl;
      friend class _TAO_Repository_ThruPOA_Proxy_Impl;
      friend class _TAO_Repository_Direct_Proxy_Impl;
    
    private:
      Repository (const Repository &);
      void operator= (const Repository &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_Repository_Proxy_Impl
      : public virtual CORBA::_TAO_Repository_Proxy_Impl, 
        public virtual CORBA::ComponentIR::_TAO_Container_Proxy_Impl
    {
    public:
      virtual ~_TAO_Repository_Proxy_Impl (void) {}
    
    protected:
      _TAO_Repository_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_Repository_Remote_Proxy_Impl
      : public virtual _TAO_Repository_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::_TAO_Repository_Remote_Proxy_Impl,
        public virtual CORBA::ComponentIR::_TAO_Container_Remote_Proxy_Impl
    {
    public:
      _TAO_Repository_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_Repository_Remote_Proxy_Impl (void) {}
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_Repository_Proxy_Broker
    {
    public:
      virtual ~_TAO_Repository_Proxy_Broker (void);
      virtual _TAO_Repository_Proxy_Impl &select_proxy (
          Repository *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_Repository_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_Repository_Remote_Proxy_Broker
      : public virtual _TAO_Repository_Proxy_Broker
    {
    public: 
      _TAO_Repository_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_Repository_Remote_Proxy_Broker (void);
      
      virtual _TAO_Repository_Proxy_Impl &select_proxy (
          Repository *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_Repository_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_Repository_Remote_Proxy_Broker *the_TAO_Repository_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Repository;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_PROVIDESDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_PROVIDESDEF___PTR_CH_
    
    class ProvidesDef;
    typedef ProvidesDef *ProvidesDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_PROVIDESDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_PROVIDESDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export ProvidesDef_var : public TAO_Base_var
    {
    public:
      ProvidesDef_var (void); // default constructor
      ProvidesDef_var (ProvidesDef_ptr p) : ptr_ (p) {} 
      ProvidesDef_var (const ProvidesDef_var &); // copy constructor
      ~ProvidesDef_var (void); // destructor
      
      ProvidesDef_var &operator= (ProvidesDef_ptr);
      ProvidesDef_var &operator= (const ProvidesDef_var &);
      ProvidesDef_ptr operator-> (void) const;
      
      operator const ProvidesDef_ptr &() const;
      operator ProvidesDef_ptr &();
      // in, inout, out, _retn 
      ProvidesDef_ptr in (void) const;
      ProvidesDef_ptr &inout (void);
      ProvidesDef_ptr &out (void);
      ProvidesDef_ptr _retn (void);
      ProvidesDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static ProvidesDef_ptr tao_duplicate (ProvidesDef_ptr);
      static void tao_release (ProvidesDef_ptr);
      static ProvidesDef_ptr tao_nil (void);
      static ProvidesDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      ProvidesDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      ProvidesDef_var (const TAO_Base_var &rhs);
      ProvidesDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_PROVIDESDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_PROVIDESDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export ProvidesDef_out
    {
    public:
      ProvidesDef_out (ProvidesDef_ptr &);
      ProvidesDef_out (ProvidesDef_var &);
      ProvidesDef_out (const ProvidesDef_out &);
      ProvidesDef_out &operator= (const ProvidesDef_out &);
      ProvidesDef_out &operator= (const ProvidesDef_var &);
      ProvidesDef_out &operator= (ProvidesDef_ptr);
      operator ProvidesDef_ptr &();
      ProvidesDef_ptr &ptr (void);
      ProvidesDef_ptr operator-> (void);
    
    private:
      ProvidesDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_PROVIDESDEF_CH_)
#define _CORBA_COMPONENTIR_PROVIDESDEF_CH_
    
    class _TAO_ProvidesDef_Proxy_Impl;
    class _TAO_ProvidesDef_Remote_Proxy_Impl;
    class _TAO_ProvidesDef_Proxy_Broker;
    class _TAO_ProvidesDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export ProvidesDef
      : public virtual CORBA::Contained
    {
    public:
      typedef ProvidesDef_ptr _ptr_type;
      typedef ProvidesDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static ProvidesDef_ptr _duplicate (ProvidesDef_ptr obj);
      
      static ProvidesDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static ProvidesDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static ProvidesDef_ptr _nil (void)
        {
          return (ProvidesDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::InterfaceDef_ptr interface_type (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual void interface_type (
          CORBA::InterfaceDef_ptr interface_type
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_ProvidesDef_Proxy_Broker *the_TAO_ProvidesDef_Proxy_Broker_;
    
    protected:
      ProvidesDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_ProvidesDef_setup_collocation (int collocated);
      
      ProvidesDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~ProvidesDef (void);
      
      friend class _TAO_ProvidesDef_Remote_Proxy_Impl;
      friend class _TAO_ProvidesDef_ThruPOA_Proxy_Impl;
      friend class _TAO_ProvidesDef_Direct_Proxy_Impl;
    
    private:
      ProvidesDef (const ProvidesDef &);
      void operator= (const ProvidesDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_ProvidesDef_Proxy_Impl
      : public virtual CORBA::_TAO_Contained_Proxy_Impl
    {
    public:
      virtual ~_TAO_ProvidesDef_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::InterfaceDef_ptr interface_type (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual void interface_type (
          CORBA_Object *_collocated_tao_target_,
          CORBA::InterfaceDef_ptr interface_type
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
    
    protected:
      _TAO_ProvidesDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_ProvidesDef_Remote_Proxy_Impl
      : public virtual _TAO_ProvidesDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::_TAO_Contained_Remote_Proxy_Impl
    {
    public:
      _TAO_ProvidesDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_ProvidesDef_Remote_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::InterfaceDef_ptr interface_type (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual void interface_type (
          CORBA_Object *_collocated_tao_target_,
          CORBA::InterfaceDef_ptr interface_type
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_ProvidesDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_ProvidesDef_Proxy_Broker (void);
      virtual _TAO_ProvidesDef_Proxy_Impl &select_proxy (
          ProvidesDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_ProvidesDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_ProvidesDef_Remote_Proxy_Broker
      : public virtual _TAO_ProvidesDef_Proxy_Broker
    {
    public: 
      _TAO_ProvidesDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_ProvidesDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_ProvidesDef_Proxy_Impl &select_proxy (
          ProvidesDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_ProvidesDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_ProvidesDef_Remote_Proxy_Broker *the_TAO_ProvidesDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ProvidesDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_ch.cpp:49
    
    class ProvidesDescription_var;
    
    struct TAO_IFR_Client_Export ProvidesDescription
    {
      typedef ProvidesDescription_var _var_type;
      
      static void _tao_any_destructor (void *);
      TAO_String_Manager name;
      TAO_String_Manager id;
      TAO_String_Manager defined_in;
      TAO_String_Manager version;
      TAO_String_Manager interface_type;
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:71
    
    class TAO_IFR_Client_Export ProvidesDescription_var
    {
    public:
      ProvidesDescription_var (void);
      ProvidesDescription_var (ProvidesDescription *);
      ProvidesDescription_var (const ProvidesDescription_var &);
      ~ProvidesDescription_var (void);
      
      ProvidesDescription_var &operator= (ProvidesDescription *);
      ProvidesDescription_var &operator= (const ProvidesDescription_var &);
      ProvidesDescription *operator-> (void);
      const ProvidesDescription *operator-> (void) const;
      
      operator const ProvidesDescription &() const;
      operator ProvidesDescription &();
      operator ProvidesDescription &() const;
      
      // Variable-size types only.
      operator ProvidesDescription *&();
      
      // in, inout, out, _retn 
      const ProvidesDescription &in (void) const;
      ProvidesDescription &inout (void);
      ProvidesDescription *&out (void);
      ProvidesDescription *_retn (void);
      ProvidesDescription *ptr (void) const;
    
    private:
      ProvidesDescription *ptr_;
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:445
    
    class TAO_IFR_Client_Export ProvidesDescription_out
    {
    public:
      ProvidesDescription_out (ProvidesDescription *&);
      ProvidesDescription_out (ProvidesDescription_var &);
      ProvidesDescription_out (const ProvidesDescription_out &);
      ProvidesDescription_out &operator= (const ProvidesDescription_out &);
      ProvidesDescription_out &operator= (ProvidesDescription *);
      operator ProvidesDescription *&();
      ProvidesDescription *&ptr (void);
      ProvidesDescription *operator-> (void);
      
    private:
      ProvidesDescription *&ptr_;
      // Assignment from T_var not allowed.
      void operator= (const ProvidesDescription_var &);
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ProvidesDescription;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_USESDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_USESDEF___PTR_CH_
    
    class UsesDef;
    typedef UsesDef *UsesDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_USESDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_USESDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export UsesDef_var : public TAO_Base_var
    {
    public:
      UsesDef_var (void); // default constructor
      UsesDef_var (UsesDef_ptr p) : ptr_ (p) {} 
      UsesDef_var (const UsesDef_var &); // copy constructor
      ~UsesDef_var (void); // destructor
      
      UsesDef_var &operator= (UsesDef_ptr);
      UsesDef_var &operator= (const UsesDef_var &);
      UsesDef_ptr operator-> (void) const;
      
      operator const UsesDef_ptr &() const;
      operator UsesDef_ptr &();
      // in, inout, out, _retn 
      UsesDef_ptr in (void) const;
      UsesDef_ptr &inout (void);
      UsesDef_ptr &out (void);
      UsesDef_ptr _retn (void);
      UsesDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static UsesDef_ptr tao_duplicate (UsesDef_ptr);
      static void tao_release (UsesDef_ptr);
      static UsesDef_ptr tao_nil (void);
      static UsesDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      UsesDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      UsesDef_var (const TAO_Base_var &rhs);
      UsesDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_USESDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_USESDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export UsesDef_out
    {
    public:
      UsesDef_out (UsesDef_ptr &);
      UsesDef_out (UsesDef_var &);
      UsesDef_out (const UsesDef_out &);
      UsesDef_out &operator= (const UsesDef_out &);
      UsesDef_out &operator= (const UsesDef_var &);
      UsesDef_out &operator= (UsesDef_ptr);
      operator UsesDef_ptr &();
      UsesDef_ptr &ptr (void);
      UsesDef_ptr operator-> (void);
    
    private:
      UsesDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_USESDEF_CH_)
#define _CORBA_COMPONENTIR_USESDEF_CH_
    
    class _TAO_UsesDef_Proxy_Impl;
    class _TAO_UsesDef_Remote_Proxy_Impl;
    class _TAO_UsesDef_Proxy_Broker;
    class _TAO_UsesDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export UsesDef
      : public virtual CORBA::Contained
    {
    public:
      typedef UsesDef_ptr _ptr_type;
      typedef UsesDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static UsesDef_ptr _duplicate (UsesDef_ptr obj);
      
      static UsesDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static UsesDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static UsesDef_ptr _nil (void)
        {
          return (UsesDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::InterfaceDef_ptr interface_type (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual void interface_type (
          CORBA::InterfaceDef_ptr interface_type
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual CORBA::Boolean is_multiple (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual void is_multiple (
          CORBA::Boolean is_multiple
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_UsesDef_Proxy_Broker *the_TAO_UsesDef_Proxy_Broker_;
    
    protected:
      UsesDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_UsesDef_setup_collocation (int collocated);
      
      UsesDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~UsesDef (void);
      
      friend class _TAO_UsesDef_Remote_Proxy_Impl;
      friend class _TAO_UsesDef_ThruPOA_Proxy_Impl;
      friend class _TAO_UsesDef_Direct_Proxy_Impl;
    
    private:
      UsesDef (const UsesDef &);
      void operator= (const UsesDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_UsesDef_Proxy_Impl
      : public virtual CORBA::_TAO_Contained_Proxy_Impl
    {
    public:
      virtual ~_TAO_UsesDef_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::InterfaceDef_ptr interface_type (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual void interface_type (
          CORBA_Object *_collocated_tao_target_,
          CORBA::InterfaceDef_ptr interface_type
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual CORBA::Boolean is_multiple (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual void is_multiple (
          CORBA_Object *_collocated_tao_target_,
          CORBA::Boolean is_multiple
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
    
    protected:
      _TAO_UsesDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_UsesDef_Remote_Proxy_Impl
      : public virtual _TAO_UsesDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::_TAO_Contained_Remote_Proxy_Impl
    {
    public:
      _TAO_UsesDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_UsesDef_Remote_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::InterfaceDef_ptr interface_type (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual void interface_type (
          CORBA_Object *_collocated_tao_target_,
          CORBA::InterfaceDef_ptr interface_type
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual CORBA::Boolean is_multiple (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual void is_multiple (
          CORBA_Object *_collocated_tao_target_,
          CORBA::Boolean is_multiple
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_UsesDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_UsesDef_Proxy_Broker (void);
      virtual _TAO_UsesDef_Proxy_Impl &select_proxy (
          UsesDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_UsesDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_UsesDef_Remote_Proxy_Broker
      : public virtual _TAO_UsesDef_Proxy_Broker
    {
    public: 
      _TAO_UsesDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_UsesDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_UsesDef_Proxy_Impl &select_proxy (
          UsesDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_UsesDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_UsesDef_Remote_Proxy_Broker *the_TAO_UsesDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_UsesDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_ch.cpp:49
    
    class UsesDescription_var;
    
    struct TAO_IFR_Client_Export UsesDescription
    {
      typedef UsesDescription_var _var_type;
      
      static void _tao_any_destructor (void *);
      TAO_String_Manager name;
      TAO_String_Manager id;
      TAO_String_Manager defined_in;
      TAO_String_Manager version;
      TAO_String_Manager interface_type;
      CORBA::Boolean is_multiple;
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:71
    
    class TAO_IFR_Client_Export UsesDescription_var
    {
    public:
      UsesDescription_var (void);
      UsesDescription_var (UsesDescription *);
      UsesDescription_var (const UsesDescription_var &);
      ~UsesDescription_var (void);
      
      UsesDescription_var &operator= (UsesDescription *);
      UsesDescription_var &operator= (const UsesDescription_var &);
      UsesDescription *operator-> (void);
      const UsesDescription *operator-> (void) const;
      
      operator const UsesDescription &() const;
      operator UsesDescription &();
      operator UsesDescription &() const;
      
      // Variable-size types only.
      operator UsesDescription *&();
      
      // in, inout, out, _retn 
      const UsesDescription &in (void) const;
      UsesDescription &inout (void);
      UsesDescription *&out (void);
      UsesDescription *_retn (void);
      UsesDescription *ptr (void) const;
    
    private:
      UsesDescription *ptr_;
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:445
    
    class TAO_IFR_Client_Export UsesDescription_out
    {
    public:
      UsesDescription_out (UsesDescription *&);
      UsesDescription_out (UsesDescription_var &);
      UsesDescription_out (const UsesDescription_out &);
      UsesDescription_out &operator= (const UsesDescription_out &);
      UsesDescription_out &operator= (UsesDescription *);
      operator UsesDescription *&();
      UsesDescription *&ptr (void);
      UsesDescription *operator-> (void);
      
    private:
      UsesDescription *&ptr_;
      // Assignment from T_var not allowed.
      void operator= (const UsesDescription_var &);
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_UsesDescription;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_EVENTPORTDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_EVENTPORTDEF___PTR_CH_
    
    class EventPortDef;
    typedef EventPortDef *EventPortDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_EVENTPORTDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_EVENTPORTDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export EventPortDef_var : public TAO_Base_var
    {
    public:
      EventPortDef_var (void); // default constructor
      EventPortDef_var (EventPortDef_ptr p) : ptr_ (p) {} 
      EventPortDef_var (const EventPortDef_var &); // copy constructor
      ~EventPortDef_var (void); // destructor
      
      EventPortDef_var &operator= (EventPortDef_ptr);
      EventPortDef_var &operator= (const EventPortDef_var &);
      EventPortDef_ptr operator-> (void) const;
      
      operator const EventPortDef_ptr &() const;
      operator EventPortDef_ptr &();
      // in, inout, out, _retn 
      EventPortDef_ptr in (void) const;
      EventPortDef_ptr &inout (void);
      EventPortDef_ptr &out (void);
      EventPortDef_ptr _retn (void);
      EventPortDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static EventPortDef_ptr tao_duplicate (EventPortDef_ptr);
      static void tao_release (EventPortDef_ptr);
      static EventPortDef_ptr tao_nil (void);
      static EventPortDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      EventPortDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      EventPortDef_var (const TAO_Base_var &rhs);
      EventPortDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_EVENTPORTDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_EVENTPORTDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export EventPortDef_out
    {
    public:
      EventPortDef_out (EventPortDef_ptr &);
      EventPortDef_out (EventPortDef_var &);
      EventPortDef_out (const EventPortDef_out &);
      EventPortDef_out &operator= (const EventPortDef_out &);
      EventPortDef_out &operator= (const EventPortDef_var &);
      EventPortDef_out &operator= (EventPortDef_ptr);
      operator EventPortDef_ptr &();
      EventPortDef_ptr &ptr (void);
      EventPortDef_ptr operator-> (void);
    
    private:
      EventPortDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_EVENTPORTDEF_CH_)
#define _CORBA_COMPONENTIR_EVENTPORTDEF_CH_
    
    class _TAO_EventPortDef_Proxy_Impl;
    class _TAO_EventPortDef_Remote_Proxy_Impl;
    class _TAO_EventPortDef_Proxy_Broker;
    class _TAO_EventPortDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export EventPortDef
      : public virtual CORBA::Contained
    {
    public:
      typedef EventPortDef_ptr _ptr_type;
      typedef EventPortDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static EventPortDef_ptr _duplicate (EventPortDef_ptr obj);
      
      static EventPortDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static EventPortDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static EventPortDef_ptr _nil (void)
        {
          return (EventPortDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::EventDef_ptr event (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual void event (
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual CORBA::Boolean is_a (
          const char * event_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_EventPortDef_Proxy_Broker *the_TAO_EventPortDef_Proxy_Broker_;
    
    protected:
      EventPortDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_EventPortDef_setup_collocation (int collocated);
      
      EventPortDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~EventPortDef (void);
      
      friend class _TAO_EventPortDef_Remote_Proxy_Impl;
      friend class _TAO_EventPortDef_ThruPOA_Proxy_Impl;
      friend class _TAO_EventPortDef_Direct_Proxy_Impl;
    
    private:
      EventPortDef (const EventPortDef &);
      void operator= (const EventPortDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_EventPortDef_Proxy_Impl
      : public virtual CORBA::_TAO_Contained_Proxy_Impl
    {
    public:
      virtual ~_TAO_EventPortDef_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::EventDef_ptr event (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual void event (
          CORBA_Object *_collocated_tao_target_,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual CORBA::Boolean is_a (
          CORBA_Object *_collocated_tao_target_,
          const char * event_id
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
    
    protected:
      _TAO_EventPortDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_EventPortDef_Remote_Proxy_Impl
      : public virtual _TAO_EventPortDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::_TAO_Contained_Remote_Proxy_Impl
    {
    public:
      _TAO_EventPortDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_EventPortDef_Remote_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::EventDef_ptr event (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual void event (
          CORBA_Object *_collocated_tao_target_,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual CORBA::Boolean is_a (
          CORBA_Object *_collocated_tao_target_,
          const char * event_id
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_EventPortDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_EventPortDef_Proxy_Broker (void);
      virtual _TAO_EventPortDef_Proxy_Impl &select_proxy (
          EventPortDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_EventPortDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_EventPortDef_Remote_Proxy_Broker
      : public virtual _TAO_EventPortDef_Proxy_Broker
    {
    public: 
      _TAO_EventPortDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_EventPortDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_EventPortDef_Proxy_Impl &select_proxy (
          EventPortDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_EventPortDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_EventPortDef_Remote_Proxy_Broker *the_TAO_EventPortDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_EventPortDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_ch.cpp:49
    
    class EventPortDescription_var;
    
    struct TAO_IFR_Client_Export EventPortDescription
    {
      typedef EventPortDescription_var _var_type;
      
      static void _tao_any_destructor (void *);
      TAO_String_Manager name;
      TAO_String_Manager id;
      TAO_String_Manager defined_in;
      TAO_String_Manager version;
      TAO_String_Manager event;
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:71
    
    class TAO_IFR_Client_Export EventPortDescription_var
    {
    public:
      EventPortDescription_var (void);
      EventPortDescription_var (EventPortDescription *);
      EventPortDescription_var (const EventPortDescription_var &);
      ~EventPortDescription_var (void);
      
      EventPortDescription_var &operator= (EventPortDescription *);
      EventPortDescription_var &operator= (const EventPortDescription_var &);
      EventPortDescription *operator-> (void);
      const EventPortDescription *operator-> (void) const;
      
      operator const EventPortDescription &() const;
      operator EventPortDescription &();
      operator EventPortDescription &() const;
      
      // Variable-size types only.
      operator EventPortDescription *&();
      
      // in, inout, out, _retn 
      const EventPortDescription &in (void) const;
      EventPortDescription &inout (void);
      EventPortDescription *&out (void);
      EventPortDescription *_retn (void);
      EventPortDescription *ptr (void) const;
    
    private:
      EventPortDescription *ptr_;
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:445
    
    class TAO_IFR_Client_Export EventPortDescription_out
    {
    public:
      EventPortDescription_out (EventPortDescription *&);
      EventPortDescription_out (EventPortDescription_var &);
      EventPortDescription_out (const EventPortDescription_out &);
      EventPortDescription_out &operator= (const EventPortDescription_out &);
      EventPortDescription_out &operator= (EventPortDescription *);
      operator EventPortDescription *&();
      EventPortDescription *&ptr (void);
      EventPortDescription *operator-> (void);
      
    private:
      EventPortDescription *&ptr_;
      // Assignment from T_var not allowed.
      void operator= (const EventPortDescription_var &);
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_EventPortDescription;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_EMITSDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_EMITSDEF___PTR_CH_
    
    class EmitsDef;
    typedef EmitsDef *EmitsDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_EMITSDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_EMITSDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export EmitsDef_var : public TAO_Base_var
    {
    public:
      EmitsDef_var (void); // default constructor
      EmitsDef_var (EmitsDef_ptr p) : ptr_ (p) {} 
      EmitsDef_var (const EmitsDef_var &); // copy constructor
      ~EmitsDef_var (void); // destructor
      
      EmitsDef_var &operator= (EmitsDef_ptr);
      EmitsDef_var &operator= (const EmitsDef_var &);
      EmitsDef_ptr operator-> (void) const;
      
      operator const EmitsDef_ptr &() const;
      operator EmitsDef_ptr &();
      // in, inout, out, _retn 
      EmitsDef_ptr in (void) const;
      EmitsDef_ptr &inout (void);
      EmitsDef_ptr &out (void);
      EmitsDef_ptr _retn (void);
      EmitsDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static EmitsDef_ptr tao_duplicate (EmitsDef_ptr);
      static void tao_release (EmitsDef_ptr);
      static EmitsDef_ptr tao_nil (void);
      static EmitsDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      EmitsDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      EmitsDef_var (const TAO_Base_var &rhs);
      EmitsDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_EMITSDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_EMITSDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export EmitsDef_out
    {
    public:
      EmitsDef_out (EmitsDef_ptr &);
      EmitsDef_out (EmitsDef_var &);
      EmitsDef_out (const EmitsDef_out &);
      EmitsDef_out &operator= (const EmitsDef_out &);
      EmitsDef_out &operator= (const EmitsDef_var &);
      EmitsDef_out &operator= (EmitsDef_ptr);
      operator EmitsDef_ptr &();
      EmitsDef_ptr &ptr (void);
      EmitsDef_ptr operator-> (void);
    
    private:
      EmitsDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_EMITSDEF_CH_)
#define _CORBA_COMPONENTIR_EMITSDEF_CH_
    
    class _TAO_EmitsDef_Proxy_Impl;
    class _TAO_EmitsDef_Remote_Proxy_Impl;
    class _TAO_EmitsDef_Proxy_Broker;
    class _TAO_EmitsDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export EmitsDef
      : public virtual CORBA::ComponentIR::EventPortDef
    {
    public:
      typedef EmitsDef_ptr _ptr_type;
      typedef EmitsDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static EmitsDef_ptr _duplicate (EmitsDef_ptr obj);
      
      static EmitsDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static EmitsDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static EmitsDef_ptr _nil (void)
        {
          return (EmitsDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_EmitsDef_Proxy_Broker *the_TAO_EmitsDef_Proxy_Broker_;
    
    protected:
      EmitsDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_EmitsDef_setup_collocation (int collocated);
      
      EmitsDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~EmitsDef (void);
      
      friend class _TAO_EmitsDef_Remote_Proxy_Impl;
      friend class _TAO_EmitsDef_ThruPOA_Proxy_Impl;
      friend class _TAO_EmitsDef_Direct_Proxy_Impl;
    
    private:
      EmitsDef (const EmitsDef &);
      void operator= (const EmitsDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_EmitsDef_Proxy_Impl
      : public virtual CORBA::ComponentIR::_TAO_EventPortDef_Proxy_Impl
    {
    public:
      virtual ~_TAO_EmitsDef_Proxy_Impl (void) {}
    
    protected:
      _TAO_EmitsDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_EmitsDef_Remote_Proxy_Impl
      : public virtual _TAO_EmitsDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::ComponentIR::_TAO_EventPortDef_Remote_Proxy_Impl
    {
    public:
      _TAO_EmitsDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_EmitsDef_Remote_Proxy_Impl (void) {}
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_EmitsDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_EmitsDef_Proxy_Broker (void);
      virtual _TAO_EmitsDef_Proxy_Impl &select_proxy (
          EmitsDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_EmitsDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_EmitsDef_Remote_Proxy_Broker
      : public virtual _TAO_EmitsDef_Proxy_Broker
    {
    public: 
      _TAO_EmitsDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_EmitsDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_EmitsDef_Proxy_Impl &select_proxy (
          EmitsDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_EmitsDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_EmitsDef_Remote_Proxy_Broker *the_TAO_EmitsDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_EmitsDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_PUBLISHESDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_PUBLISHESDEF___PTR_CH_
    
    class PublishesDef;
    typedef PublishesDef *PublishesDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_PUBLISHESDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_PUBLISHESDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export PublishesDef_var : public TAO_Base_var
    {
    public:
      PublishesDef_var (void); // default constructor
      PublishesDef_var (PublishesDef_ptr p) : ptr_ (p) {} 
      PublishesDef_var (const PublishesDef_var &); // copy constructor
      ~PublishesDef_var (void); // destructor
      
      PublishesDef_var &operator= (PublishesDef_ptr);
      PublishesDef_var &operator= (const PublishesDef_var &);
      PublishesDef_ptr operator-> (void) const;
      
      operator const PublishesDef_ptr &() const;
      operator PublishesDef_ptr &();
      // in, inout, out, _retn 
      PublishesDef_ptr in (void) const;
      PublishesDef_ptr &inout (void);
      PublishesDef_ptr &out (void);
      PublishesDef_ptr _retn (void);
      PublishesDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static PublishesDef_ptr tao_duplicate (PublishesDef_ptr);
      static void tao_release (PublishesDef_ptr);
      static PublishesDef_ptr tao_nil (void);
      static PublishesDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      PublishesDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      PublishesDef_var (const TAO_Base_var &rhs);
      PublishesDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_PUBLISHESDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_PUBLISHESDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export PublishesDef_out
    {
    public:
      PublishesDef_out (PublishesDef_ptr &);
      PublishesDef_out (PublishesDef_var &);
      PublishesDef_out (const PublishesDef_out &);
      PublishesDef_out &operator= (const PublishesDef_out &);
      PublishesDef_out &operator= (const PublishesDef_var &);
      PublishesDef_out &operator= (PublishesDef_ptr);
      operator PublishesDef_ptr &();
      PublishesDef_ptr &ptr (void);
      PublishesDef_ptr operator-> (void);
    
    private:
      PublishesDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_PUBLISHESDEF_CH_)
#define _CORBA_COMPONENTIR_PUBLISHESDEF_CH_
    
    class _TAO_PublishesDef_Proxy_Impl;
    class _TAO_PublishesDef_Remote_Proxy_Impl;
    class _TAO_PublishesDef_Proxy_Broker;
    class _TAO_PublishesDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export PublishesDef
      : public virtual CORBA::ComponentIR::EventPortDef
    {
    public:
      typedef PublishesDef_ptr _ptr_type;
      typedef PublishesDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static PublishesDef_ptr _duplicate (PublishesDef_ptr obj);
      
      static PublishesDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static PublishesDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static PublishesDef_ptr _nil (void)
        {
          return (PublishesDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_PublishesDef_Proxy_Broker *the_TAO_PublishesDef_Proxy_Broker_;
    
    protected:
      PublishesDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_PublishesDef_setup_collocation (int collocated);
      
      PublishesDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~PublishesDef (void);
      
      friend class _TAO_PublishesDef_Remote_Proxy_Impl;
      friend class _TAO_PublishesDef_ThruPOA_Proxy_Impl;
      friend class _TAO_PublishesDef_Direct_Proxy_Impl;
    
    private:
      PublishesDef (const PublishesDef &);
      void operator= (const PublishesDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_PublishesDef_Proxy_Impl
      : public virtual CORBA::ComponentIR::_TAO_EventPortDef_Proxy_Impl
    {
    public:
      virtual ~_TAO_PublishesDef_Proxy_Impl (void) {}
    
    protected:
      _TAO_PublishesDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_PublishesDef_Remote_Proxy_Impl
      : public virtual _TAO_PublishesDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::ComponentIR::_TAO_EventPortDef_Remote_Proxy_Impl
    {
    public:
      _TAO_PublishesDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_PublishesDef_Remote_Proxy_Impl (void) {}
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_PublishesDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_PublishesDef_Proxy_Broker (void);
      virtual _TAO_PublishesDef_Proxy_Impl &select_proxy (
          PublishesDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_PublishesDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_PublishesDef_Remote_Proxy_Broker
      : public virtual _TAO_PublishesDef_Proxy_Broker
    {
    public: 
      _TAO_PublishesDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_PublishesDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_PublishesDef_Proxy_Impl &select_proxy (
          PublishesDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_PublishesDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_PublishesDef_Remote_Proxy_Broker *the_TAO_PublishesDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_PublishesDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_CONSUMESDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_CONSUMESDEF___PTR_CH_
    
    class ConsumesDef;
    typedef ConsumesDef *ConsumesDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_CONSUMESDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_CONSUMESDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export ConsumesDef_var : public TAO_Base_var
    {
    public:
      ConsumesDef_var (void); // default constructor
      ConsumesDef_var (ConsumesDef_ptr p) : ptr_ (p) {} 
      ConsumesDef_var (const ConsumesDef_var &); // copy constructor
      ~ConsumesDef_var (void); // destructor
      
      ConsumesDef_var &operator= (ConsumesDef_ptr);
      ConsumesDef_var &operator= (const ConsumesDef_var &);
      ConsumesDef_ptr operator-> (void) const;
      
      operator const ConsumesDef_ptr &() const;
      operator ConsumesDef_ptr &();
      // in, inout, out, _retn 
      ConsumesDef_ptr in (void) const;
      ConsumesDef_ptr &inout (void);
      ConsumesDef_ptr &out (void);
      ConsumesDef_ptr _retn (void);
      ConsumesDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static ConsumesDef_ptr tao_duplicate (ConsumesDef_ptr);
      static void tao_release (ConsumesDef_ptr);
      static ConsumesDef_ptr tao_nil (void);
      static ConsumesDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      ConsumesDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      ConsumesDef_var (const TAO_Base_var &rhs);
      ConsumesDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_CONSUMESDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_CONSUMESDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export ConsumesDef_out
    {
    public:
      ConsumesDef_out (ConsumesDef_ptr &);
      ConsumesDef_out (ConsumesDef_var &);
      ConsumesDef_out (const ConsumesDef_out &);
      ConsumesDef_out &operator= (const ConsumesDef_out &);
      ConsumesDef_out &operator= (const ConsumesDef_var &);
      ConsumesDef_out &operator= (ConsumesDef_ptr);
      operator ConsumesDef_ptr &();
      ConsumesDef_ptr &ptr (void);
      ConsumesDef_ptr operator-> (void);
    
    private:
      ConsumesDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_CONSUMESDEF_CH_)
#define _CORBA_COMPONENTIR_CONSUMESDEF_CH_
    
    class _TAO_ConsumesDef_Proxy_Impl;
    class _TAO_ConsumesDef_Remote_Proxy_Impl;
    class _TAO_ConsumesDef_Proxy_Broker;
    class _TAO_ConsumesDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export ConsumesDef
      : public virtual CORBA::ComponentIR::EventPortDef
    {
    public:
      typedef ConsumesDef_ptr _ptr_type;
      typedef ConsumesDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static ConsumesDef_ptr _duplicate (ConsumesDef_ptr obj);
      
      static ConsumesDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static ConsumesDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static ConsumesDef_ptr _nil (void)
        {
          return (ConsumesDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_ConsumesDef_Proxy_Broker *the_TAO_ConsumesDef_Proxy_Broker_;
    
    protected:
      ConsumesDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_ConsumesDef_setup_collocation (int collocated);
      
      ConsumesDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~ConsumesDef (void);
      
      friend class _TAO_ConsumesDef_Remote_Proxy_Impl;
      friend class _TAO_ConsumesDef_ThruPOA_Proxy_Impl;
      friend class _TAO_ConsumesDef_Direct_Proxy_Impl;
    
    private:
      ConsumesDef (const ConsumesDef &);
      void operator= (const ConsumesDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_ConsumesDef_Proxy_Impl
      : public virtual CORBA::ComponentIR::_TAO_EventPortDef_Proxy_Impl
    {
    public:
      virtual ~_TAO_ConsumesDef_Proxy_Impl (void) {}
    
    protected:
      _TAO_ConsumesDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_ConsumesDef_Remote_Proxy_Impl
      : public virtual _TAO_ConsumesDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::ComponentIR::_TAO_EventPortDef_Remote_Proxy_Impl
    {
    public:
      _TAO_ConsumesDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_ConsumesDef_Remote_Proxy_Impl (void) {}
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_ConsumesDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_ConsumesDef_Proxy_Broker (void);
      virtual _TAO_ConsumesDef_Proxy_Impl &select_proxy (
          ConsumesDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_ConsumesDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_ConsumesDef_Remote_Proxy_Broker
      : public virtual _TAO_ConsumesDef_Proxy_Broker
    {
    public: 
      _TAO_ConsumesDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_ConsumesDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_ConsumesDef_Proxy_Impl &select_proxy (
          ConsumesDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_ConsumesDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_ConsumesDef_Remote_Proxy_Broker *the_TAO_ConsumesDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ConsumesDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_COMPONENTDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_COMPONENTDEF___PTR_CH_
    
    class ComponentDef;
    typedef ComponentDef *ComponentDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_COMPONENTDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_COMPONENTDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export ComponentDef_var : public TAO_Base_var
    {
    public:
      ComponentDef_var (void); // default constructor
      ComponentDef_var (ComponentDef_ptr p) : ptr_ (p) {} 
      ComponentDef_var (const ComponentDef_var &); // copy constructor
      ~ComponentDef_var (void); // destructor
      
      ComponentDef_var &operator= (ComponentDef_ptr);
      ComponentDef_var &operator= (const ComponentDef_var &);
      ComponentDef_ptr operator-> (void) const;
      
      operator const ComponentDef_ptr &() const;
      operator ComponentDef_ptr &();
      // in, inout, out, _retn 
      ComponentDef_ptr in (void) const;
      ComponentDef_ptr &inout (void);
      ComponentDef_ptr &out (void);
      ComponentDef_ptr _retn (void);
      ComponentDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static ComponentDef_ptr tao_duplicate (ComponentDef_ptr);
      static void tao_release (ComponentDef_ptr);
      static ComponentDef_ptr tao_nil (void);
      static ComponentDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      ComponentDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      ComponentDef_var (const TAO_Base_var &rhs);
      ComponentDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_COMPONENTDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_COMPONENTDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export ComponentDef_out
    {
    public:
      ComponentDef_out (ComponentDef_ptr &);
      ComponentDef_out (ComponentDef_var &);
      ComponentDef_out (const ComponentDef_out &);
      ComponentDef_out &operator= (const ComponentDef_out &);
      ComponentDef_out &operator= (const ComponentDef_var &);
      ComponentDef_out &operator= (ComponentDef_ptr);
      operator ComponentDef_ptr &();
      ComponentDef_ptr &ptr (void);
      ComponentDef_ptr operator-> (void);
    
    private:
      ComponentDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_COMPONENTDEF_CH_)
#define _CORBA_COMPONENTIR_COMPONENTDEF_CH_
    
    class _TAO_ComponentDef_Proxy_Impl;
    class _TAO_ComponentDef_Remote_Proxy_Impl;
    class _TAO_ComponentDef_Proxy_Broker;
    class _TAO_ComponentDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export ComponentDef
      : public virtual CORBA::ExtInterfaceDef
    {
    public:
      typedef ComponentDef_ptr _ptr_type;
      typedef ComponentDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static ComponentDef_ptr _duplicate (ComponentDef_ptr obj);
      
      static ComponentDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static ComponentDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static ComponentDef_ptr _nil (void)
        {
          return (ComponentDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::ComponentDef_ptr base_component (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual void base_component (
          CORBA::ComponentIR::ComponentDef_ptr base_component
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::InterfaceDefSeq * supported_interfaces (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual void supported_interfaces (
          const CORBA::InterfaceDefSeq & supported_interfaces
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::ProvidesDef_ptr create_provides (
          const char * id,
          const char * name,
          const char * version,
          CORBA::InterfaceDef_ptr interface_type
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::UsesDef_ptr create_uses (
          const char * id,
          const char * name,
          const char * version,
          CORBA::InterfaceDef_ptr interface_type,
          CORBA::Boolean is_multiple
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::EmitsDef_ptr create_emits (
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::PublishesDef_ptr create_publishes (
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::ConsumesDef_ptr create_consumes (
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_ComponentDef_Proxy_Broker *the_TAO_ComponentDef_Proxy_Broker_;
    
    protected:
      ComponentDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_ComponentDef_setup_collocation (int collocated);
      
      ComponentDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~ComponentDef (void);
      
      friend class _TAO_ComponentDef_Remote_Proxy_Impl;
      friend class _TAO_ComponentDef_ThruPOA_Proxy_Impl;
      friend class _TAO_ComponentDef_Direct_Proxy_Impl;
    
    private:
      ComponentDef (const ComponentDef &);
      void operator= (const ComponentDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_ComponentDef_Proxy_Impl
      : public virtual CORBA::_TAO_ExtInterfaceDef_Proxy_Impl
    {
    public:
      virtual ~_TAO_ComponentDef_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::ComponentDef_ptr base_component (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual void base_component (
          CORBA_Object *_collocated_tao_target_,
          CORBA::ComponentIR::ComponentDef_ptr base_component
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::InterfaceDefSeq * supported_interfaces (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual void supported_interfaces (
          CORBA_Object *_collocated_tao_target_,
          const CORBA::InterfaceDefSeq & supported_interfaces
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::ProvidesDef_ptr create_provides (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::InterfaceDef_ptr interface_type
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::UsesDef_ptr create_uses (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::InterfaceDef_ptr interface_type,
          CORBA::Boolean is_multiple
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::EmitsDef_ptr create_emits (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::PublishesDef_ptr create_publishes (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::ConsumesDef_ptr create_consumes (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
    
    protected:
      _TAO_ComponentDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_ComponentDef_Remote_Proxy_Impl
      : public virtual _TAO_ComponentDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::_TAO_ExtInterfaceDef_Remote_Proxy_Impl
    {
    public:
      _TAO_ComponentDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_ComponentDef_Remote_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::ComponentDef_ptr base_component (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual void base_component (
          CORBA_Object *_collocated_tao_target_,
          CORBA::ComponentIR::ComponentDef_ptr base_component
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::InterfaceDefSeq * supported_interfaces (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual void supported_interfaces (
          CORBA_Object *_collocated_tao_target_,
          const CORBA::InterfaceDefSeq & supported_interfaces
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::ProvidesDef_ptr create_provides (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::InterfaceDef_ptr interface_type
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::UsesDef_ptr create_uses (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::InterfaceDef_ptr interface_type,
          CORBA::Boolean is_multiple
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::EmitsDef_ptr create_emits (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::PublishesDef_ptr create_publishes (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::ConsumesDef_ptr create_consumes (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          CORBA::ComponentIR::EventDef_ptr event
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_ComponentDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_ComponentDef_Proxy_Broker (void);
      virtual _TAO_ComponentDef_Proxy_Impl &select_proxy (
          ComponentDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_ComponentDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_ComponentDef_Remote_Proxy_Broker
      : public virtual _TAO_ComponentDef_Proxy_Broker
    {
    public: 
      _TAO_ComponentDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_ComponentDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_ComponentDef_Proxy_Impl &select_proxy (
          ComponentDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_ComponentDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_ComponentDef_Remote_Proxy_Broker *the_TAO_ComponentDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ComponentDef;
    
    // TAO_IDL - Generated from 
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_COMPONENTIR_PROVIDESDESCRIPTIONSEQ_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_COMPONENTIR_PROVIDESDESCRIPTIONSEQ_CH_
    
    class TAO_IFR_Client_Export _TAO_Unbounded_Sequence_CORBA_ComponentIR_ProvidesDescriptionSeq
      : public TAO_Unbounded_Base_Sequence
    {
    public:
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_ProvidesDescriptionSeq (void);
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_ProvidesDescriptionSeq (CORBA::ULong maximum); 
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_ProvidesDescriptionSeq (
          CORBA::ULong maximum,
          CORBA::ULong length,
          ProvidesDescription *data,
          CORBA::Boolean release = 0
        );
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_ProvidesDescriptionSeq (
          const _TAO_Unbounded_Sequence_CORBA_ComponentIR_ProvidesDescriptionSeq &rhs
        );
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_ProvidesDescriptionSeq &operator= (
          const _TAO_Unbounded_Sequence_CORBA_ComponentIR_ProvidesDescriptionSeq &rhs
        );
      virtual ~_TAO_Unbounded_Sequence_CORBA_ComponentIR_ProvidesDescriptionSeq (void);
      
      // = Accessors.
      ProvidesDescription &operator[] (CORBA::ULong i);
      const ProvidesDescription &operator[] (CORBA::ULong i) const;
      
      // = Static operations.
      static ProvidesDescription *allocbuf (CORBA::ULong size);
      static void freebuf (ProvidesDescription *buffer);
      
      // Implement the TAO_Base_Sequence methods (see Sequence.h)
      virtual void _allocate_buffer (CORBA::ULong length);
      virtual void _deallocate_buffer (void);
      ProvidesDescription *get_buffer (CORBA::Boolean orphan = 0);
      const ProvidesDescription *get_buffer (void) const;
      void replace (
          CORBA::ULong max,
          CORBA::ULong length,
          ProvidesDescription *data,
          CORBA::Boolean release
        );
    };

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_COMPONENTIR_PROVIDESDESCRIPTIONSEQ_CH_)
#define _CORBA_COMPONENTIR_PROVIDESDESCRIPTIONSEQ_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:371
    
    class ProvidesDescriptionSeq;
    class ProvidesDescriptionSeq_var;
    
    // *************************************************************
    // CORBA::ComponentIR::ProvidesDescriptionSeq
    // *************************************************************
    
    class TAO_IFR_Client_Export ProvidesDescriptionSeq : public 
    
    // TAO_IDL - Generated from 
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
    _TAO_Unbounded_Sequence_CORBA_ComponentIR_ProvidesDescriptionSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
    TAO_Unbounded_Sequence<ProvidesDescription>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
    {
    public:
      ProvidesDescriptionSeq (void);
      ProvidesDescriptionSeq (CORBA::ULong max);
      ProvidesDescriptionSeq (
          CORBA::ULong max, 
          CORBA::ULong length, 
          ProvidesDescription *buffer, 
          CORBA::Boolean release = 0
        );
      ProvidesDescriptionSeq (const ProvidesDescriptionSeq &);
      ~ProvidesDescriptionSeq (void);
      
      static void _tao_any_destructor (void*);
      
      typedef ProvidesDescriptionSeq_var _var_type;
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_PROVIDESDESCRIPTIONSEQ___VAR_CH_)
#define _CORBA_COMPONENTIR_PROVIDESDESCRIPTIONSEQ___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:549
    
    // *************************************************************
    // class CORBA::ComponentIR::ProvidesDescriptionSeq_var
    // *************************************************************
    
    class TAO_IFR_Client_Export ProvidesDescriptionSeq_var
    {
    public:
      ProvidesDescriptionSeq_var (void);
      ProvidesDescriptionSeq_var (ProvidesDescriptionSeq *);
      ProvidesDescriptionSeq_var (const ProvidesDescriptionSeq_var &);
      ~ProvidesDescriptionSeq_var (void);
      
      ProvidesDescriptionSeq_var &operator= (ProvidesDescriptionSeq *);
      ProvidesDescriptionSeq_var &operator= (const ProvidesDescriptionSeq_var &);
      ProvidesDescriptionSeq *operator-> (void);
      const ProvidesDescriptionSeq *operator-> (void) const;
      
      operator const ProvidesDescriptionSeq &() const;
      operator ProvidesDescriptionSeq &();
      operator ProvidesDescriptionSeq &() const;
      
      // Variable-size base types only.
      operator ProvidesDescriptionSeq *&();
      
      ProvidesDescription & operator[] (CORBA::ULong index);
      const ProvidesDescription & operator[] (CORBA::ULong index) const;
      
      // in, inout, out, _retn 
      const ProvidesDescriptionSeq &in (void) const;
      ProvidesDescriptionSeq &inout (void);
      ProvidesDescriptionSeq *&out (void);
      ProvidesDescriptionSeq *_retn (void);
      ProvidesDescriptionSeq *ptr (void) const;
    
    private:
      ProvidesDescriptionSeq *ptr_;
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_PROVIDESDESCRIPTIONSEQ___OUT_CH_)
#define _CORBA_COMPONENTIR_PROVIDESDESCRIPTIONSEQ___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:753
    
    class TAO_IFR_Client_Export ProvidesDescriptionSeq_out
    {
    public:
      ProvidesDescriptionSeq_out (ProvidesDescriptionSeq *&);
      ProvidesDescriptionSeq_out (ProvidesDescriptionSeq_var &);
      ProvidesDescriptionSeq_out (const ProvidesDescriptionSeq_out &);
      ProvidesDescriptionSeq_out &operator= (const ProvidesDescriptionSeq_out &);
      ProvidesDescriptionSeq_out &operator= (ProvidesDescriptionSeq *);
      operator ProvidesDescriptionSeq *&();
      ProvidesDescriptionSeq *&ptr (void);
      ProvidesDescriptionSeq *operator-> (void);
      ProvidesDescription & operator[] (CORBA::ULong index);
    
    private:
      ProvidesDescriptionSeq *&ptr_;
      // Assignment from T_var not allowed.
      void operator= (const ProvidesDescriptionSeq_var &);
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ProvidesDescriptionSeq;
    
    // TAO_IDL - Generated from 
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_COMPONENTIR_USESDESCRIPTIONSEQ_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_COMPONENTIR_USESDESCRIPTIONSEQ_CH_
    
    class TAO_IFR_Client_Export _TAO_Unbounded_Sequence_CORBA_ComponentIR_UsesDescriptionSeq
      : public TAO_Unbounded_Base_Sequence
    {
    public:
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_UsesDescriptionSeq (void);
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_UsesDescriptionSeq (CORBA::ULong maximum); 
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_UsesDescriptionSeq (
          CORBA::ULong maximum,
          CORBA::ULong length,
          UsesDescription *data,
          CORBA::Boolean release = 0
        );
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_UsesDescriptionSeq (
          const _TAO_Unbounded_Sequence_CORBA_ComponentIR_UsesDescriptionSeq &rhs
        );
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_UsesDescriptionSeq &operator= (
          const _TAO_Unbounded_Sequence_CORBA_ComponentIR_UsesDescriptionSeq &rhs
        );
      virtual ~_TAO_Unbounded_Sequence_CORBA_ComponentIR_UsesDescriptionSeq (void);
      
      // = Accessors.
      UsesDescription &operator[] (CORBA::ULong i);
      const UsesDescription &operator[] (CORBA::ULong i) const;
      
      // = Static operations.
      static UsesDescription *allocbuf (CORBA::ULong size);
      static void freebuf (UsesDescription *buffer);
      
      // Implement the TAO_Base_Sequence methods (see Sequence.h)
      virtual void _allocate_buffer (CORBA::ULong length);
      virtual void _deallocate_buffer (void);
      UsesDescription *get_buffer (CORBA::Boolean orphan = 0);
      const UsesDescription *get_buffer (void) const;
      void replace (
          CORBA::ULong max,
          CORBA::ULong length,
          UsesDescription *data,
          CORBA::Boolean release
        );
    };

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_COMPONENTIR_USESDESCRIPTIONSEQ_CH_)
#define _CORBA_COMPONENTIR_USESDESCRIPTIONSEQ_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:371
    
    class UsesDescriptionSeq;
    class UsesDescriptionSeq_var;
    
    // *************************************************************
    // CORBA::ComponentIR::UsesDescriptionSeq
    // *************************************************************
    
    class TAO_IFR_Client_Export UsesDescriptionSeq : public 
    
    // TAO_IDL - Generated from 
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
    _TAO_Unbounded_Sequence_CORBA_ComponentIR_UsesDescriptionSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
    TAO_Unbounded_Sequence<UsesDescription>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
    {
    public:
      UsesDescriptionSeq (void);
      UsesDescriptionSeq (CORBA::ULong max);
      UsesDescriptionSeq (
          CORBA::ULong max, 
          CORBA::ULong length, 
          UsesDescription *buffer, 
          CORBA::Boolean release = 0
        );
      UsesDescriptionSeq (const UsesDescriptionSeq &);
      ~UsesDescriptionSeq (void);
      
      static void _tao_any_destructor (void*);
      
      typedef UsesDescriptionSeq_var _var_type;
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_USESDESCRIPTIONSEQ___VAR_CH_)
#define _CORBA_COMPONENTIR_USESDESCRIPTIONSEQ___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:549
    
    // *************************************************************
    // class CORBA::ComponentIR::UsesDescriptionSeq_var
    // *************************************************************
    
    class TAO_IFR_Client_Export UsesDescriptionSeq_var
    {
    public:
      UsesDescriptionSeq_var (void);
      UsesDescriptionSeq_var (UsesDescriptionSeq *);
      UsesDescriptionSeq_var (const UsesDescriptionSeq_var &);
      ~UsesDescriptionSeq_var (void);
      
      UsesDescriptionSeq_var &operator= (UsesDescriptionSeq *);
      UsesDescriptionSeq_var &operator= (const UsesDescriptionSeq_var &);
      UsesDescriptionSeq *operator-> (void);
      const UsesDescriptionSeq *operator-> (void) const;
      
      operator const UsesDescriptionSeq &() const;
      operator UsesDescriptionSeq &();
      operator UsesDescriptionSeq &() const;
      
      // Variable-size base types only.
      operator UsesDescriptionSeq *&();
      
      UsesDescription & operator[] (CORBA::ULong index);
      const UsesDescription & operator[] (CORBA::ULong index) const;
      
      // in, inout, out, _retn 
      const UsesDescriptionSeq &in (void) const;
      UsesDescriptionSeq &inout (void);
      UsesDescriptionSeq *&out (void);
      UsesDescriptionSeq *_retn (void);
      UsesDescriptionSeq *ptr (void) const;
    
    private:
      UsesDescriptionSeq *ptr_;
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_USESDESCRIPTIONSEQ___OUT_CH_)
#define _CORBA_COMPONENTIR_USESDESCRIPTIONSEQ___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:753
    
    class TAO_IFR_Client_Export UsesDescriptionSeq_out
    {
    public:
      UsesDescriptionSeq_out (UsesDescriptionSeq *&);
      UsesDescriptionSeq_out (UsesDescriptionSeq_var &);
      UsesDescriptionSeq_out (const UsesDescriptionSeq_out &);
      UsesDescriptionSeq_out &operator= (const UsesDescriptionSeq_out &);
      UsesDescriptionSeq_out &operator= (UsesDescriptionSeq *);
      operator UsesDescriptionSeq *&();
      UsesDescriptionSeq *&ptr (void);
      UsesDescriptionSeq *operator-> (void);
      UsesDescription & operator[] (CORBA::ULong index);
    
    private:
      UsesDescriptionSeq *&ptr_;
      // Assignment from T_var not allowed.
      void operator= (const UsesDescriptionSeq_var &);
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_UsesDescriptionSeq;
    
    // TAO_IDL - Generated from 
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_COMPONENTIR_EVENTPORTDESCRIPTIONSEQ_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_COMPONENTIR_EVENTPORTDESCRIPTIONSEQ_CH_
    
    class TAO_IFR_Client_Export _TAO_Unbounded_Sequence_CORBA_ComponentIR_EventPortDescriptionSeq
      : public TAO_Unbounded_Base_Sequence
    {
    public:
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_EventPortDescriptionSeq (void);
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_EventPortDescriptionSeq (CORBA::ULong maximum); 
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_EventPortDescriptionSeq (
          CORBA::ULong maximum,
          CORBA::ULong length,
          EventPortDescription *data,
          CORBA::Boolean release = 0
        );
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_EventPortDescriptionSeq (
          const _TAO_Unbounded_Sequence_CORBA_ComponentIR_EventPortDescriptionSeq &rhs
        );
      _TAO_Unbounded_Sequence_CORBA_ComponentIR_EventPortDescriptionSeq &operator= (
          const _TAO_Unbounded_Sequence_CORBA_ComponentIR_EventPortDescriptionSeq &rhs
        );
      virtual ~_TAO_Unbounded_Sequence_CORBA_ComponentIR_EventPortDescriptionSeq (void);
      
      // = Accessors.
      EventPortDescription &operator[] (CORBA::ULong i);
      const EventPortDescription &operator[] (CORBA::ULong i) const;
      
      // = Static operations.
      static EventPortDescription *allocbuf (CORBA::ULong size);
      static void freebuf (EventPortDescription *buffer);
      
      // Implement the TAO_Base_Sequence methods (see Sequence.h)
      virtual void _allocate_buffer (CORBA::ULong length);
      virtual void _deallocate_buffer (void);
      EventPortDescription *get_buffer (CORBA::Boolean orphan = 0);
      const EventPortDescription *get_buffer (void) const;
      void replace (
          CORBA::ULong max,
          CORBA::ULong length,
          EventPortDescription *data,
          CORBA::Boolean release
        );
    };

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_COMPONENTIR_EVENTPORTDESCRIPTIONSEQ_CH_)
#define _CORBA_COMPONENTIR_EVENTPORTDESCRIPTIONSEQ_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:371
    
    class EventPortDescriptionSeq;
    class EventPortDescriptionSeq_var;
    
    // *************************************************************
    // CORBA::ComponentIR::EventPortDescriptionSeq
    // *************************************************************
    
    class TAO_IFR_Client_Export EventPortDescriptionSeq : public 
    
    // TAO_IDL - Generated from 
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
    _TAO_Unbounded_Sequence_CORBA_ComponentIR_EventPortDescriptionSeq
#else /* TAO_USE_SEQUENCE_TEMPLATES */
    TAO_Unbounded_Sequence<EventPortDescription>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
    {
    public:
      EventPortDescriptionSeq (void);
      EventPortDescriptionSeq (CORBA::ULong max);
      EventPortDescriptionSeq (
          CORBA::ULong max, 
          CORBA::ULong length, 
          EventPortDescription *buffer, 
          CORBA::Boolean release = 0
        );
      EventPortDescriptionSeq (const EventPortDescriptionSeq &);
      ~EventPortDescriptionSeq (void);
      
      static void _tao_any_destructor (void*);
      
      typedef EventPortDescriptionSeq_var _var_type;
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_EVENTPORTDESCRIPTIONSEQ___VAR_CH_)
#define _CORBA_COMPONENTIR_EVENTPORTDESCRIPTIONSEQ___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:549
    
    // *************************************************************
    // class CORBA::ComponentIR::EventPortDescriptionSeq_var
    // *************************************************************
    
    class TAO_IFR_Client_Export EventPortDescriptionSeq_var
    {
    public:
      EventPortDescriptionSeq_var (void);
      EventPortDescriptionSeq_var (EventPortDescriptionSeq *);
      EventPortDescriptionSeq_var (const EventPortDescriptionSeq_var &);
      ~EventPortDescriptionSeq_var (void);
      
      EventPortDescriptionSeq_var &operator= (EventPortDescriptionSeq *);
      EventPortDescriptionSeq_var &operator= (const EventPortDescriptionSeq_var &);
      EventPortDescriptionSeq *operator-> (void);
      const EventPortDescriptionSeq *operator-> (void) const;
      
      operator const EventPortDescriptionSeq &() const;
      operator EventPortDescriptionSeq &();
      operator EventPortDescriptionSeq &() const;
      
      // Variable-size base types only.
      operator EventPortDescriptionSeq *&();
      
      EventPortDescription & operator[] (CORBA::ULong index);
      const EventPortDescription & operator[] (CORBA::ULong index) const;
      
      // in, inout, out, _retn 
      const EventPortDescriptionSeq &in (void) const;
      EventPortDescriptionSeq &inout (void);
      EventPortDescriptionSeq *&out (void);
      EventPortDescriptionSeq *_retn (void);
      EventPortDescriptionSeq *ptr (void) const;
    
    private:
      EventPortDescriptionSeq *ptr_;
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_EVENTPORTDESCRIPTIONSEQ___OUT_CH_)
#define _CORBA_COMPONENTIR_EVENTPORTDESCRIPTIONSEQ___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:753
    
    class TAO_IFR_Client_Export EventPortDescriptionSeq_out
    {
    public:
      EventPortDescriptionSeq_out (EventPortDescriptionSeq *&);
      EventPortDescriptionSeq_out (EventPortDescriptionSeq_var &);
      EventPortDescriptionSeq_out (const EventPortDescriptionSeq_out &);
      EventPortDescriptionSeq_out &operator= (const EventPortDescriptionSeq_out &);
      EventPortDescriptionSeq_out &operator= (EventPortDescriptionSeq *);
      operator EventPortDescriptionSeq *&();
      EventPortDescriptionSeq *&ptr (void);
      EventPortDescriptionSeq *operator-> (void);
      EventPortDescription & operator[] (CORBA::ULong index);
    
    private:
      EventPortDescriptionSeq *&ptr_;
      // Assignment from T_var not allowed.
      void operator= (const EventPortDescriptionSeq_var &);
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_EventPortDescriptionSeq;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_ch.cpp:49
    
    class ComponentDescription_var;
    
    struct TAO_IFR_Client_Export ComponentDescription
    {
      typedef ComponentDescription_var _var_type;
      
      static void _tao_any_destructor (void *);
      TAO_String_Manager name;
      TAO_String_Manager id;
      TAO_String_Manager defined_in;
      TAO_String_Manager version;
      TAO_String_Manager base_component;
      CORBA::RepositoryIdSeq supported_interfaces;
      CORBA::ComponentIR::ProvidesDescriptionSeq provided_interfaces;
      CORBA::ComponentIR::UsesDescriptionSeq used_interfaces;
      CORBA::ComponentIR::EventPortDescriptionSeq emits_events;
      CORBA::ComponentIR::EventPortDescriptionSeq publishes_events;
      CORBA::ComponentIR::EventPortDescriptionSeq consumes_events;
      CORBA::ExtAttrDescriptionSeq attributes;
      CORBA::TypeCode_var type;
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:71
    
    class TAO_IFR_Client_Export ComponentDescription_var
    {
    public:
      ComponentDescription_var (void);
      ComponentDescription_var (ComponentDescription *);
      ComponentDescription_var (const ComponentDescription_var &);
      ~ComponentDescription_var (void);
      
      ComponentDescription_var &operator= (ComponentDescription *);
      ComponentDescription_var &operator= (const ComponentDescription_var &);
      ComponentDescription *operator-> (void);
      const ComponentDescription *operator-> (void) const;
      
      operator const ComponentDescription &() const;
      operator ComponentDescription &();
      operator ComponentDescription &() const;
      
      // Variable-size types only.
      operator ComponentDescription *&();
      
      // in, inout, out, _retn 
      const ComponentDescription &in (void) const;
      ComponentDescription &inout (void);
      ComponentDescription *&out (void);
      ComponentDescription *_retn (void);
      ComponentDescription *ptr (void) const;
    
    private:
      ComponentDescription *ptr_;
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:445
    
    class TAO_IFR_Client_Export ComponentDescription_out
    {
    public:
      ComponentDescription_out (ComponentDescription *&);
      ComponentDescription_out (ComponentDescription_var &);
      ComponentDescription_out (const ComponentDescription_out &);
      ComponentDescription_out &operator= (const ComponentDescription_out &);
      ComponentDescription_out &operator= (ComponentDescription *);
      operator ComponentDescription *&();
      ComponentDescription *&ptr (void);
      ComponentDescription *operator-> (void);
      
    private:
      ComponentDescription *&ptr_;
      // Assignment from T_var not allowed.
      void operator= (const ComponentDescription_var &);
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ComponentDescription;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_FACTORYDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_FACTORYDEF___PTR_CH_
    
    class FactoryDef;
    typedef FactoryDef *FactoryDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_FACTORYDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_FACTORYDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export FactoryDef_var : public TAO_Base_var
    {
    public:
      FactoryDef_var (void); // default constructor
      FactoryDef_var (FactoryDef_ptr p) : ptr_ (p) {} 
      FactoryDef_var (const FactoryDef_var &); // copy constructor
      ~FactoryDef_var (void); // destructor
      
      FactoryDef_var &operator= (FactoryDef_ptr);
      FactoryDef_var &operator= (const FactoryDef_var &);
      FactoryDef_ptr operator-> (void) const;
      
      operator const FactoryDef_ptr &() const;
      operator FactoryDef_ptr &();
      // in, inout, out, _retn 
      FactoryDef_ptr in (void) const;
      FactoryDef_ptr &inout (void);
      FactoryDef_ptr &out (void);
      FactoryDef_ptr _retn (void);
      FactoryDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static FactoryDef_ptr tao_duplicate (FactoryDef_ptr);
      static void tao_release (FactoryDef_ptr);
      static FactoryDef_ptr tao_nil (void);
      static FactoryDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      FactoryDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      FactoryDef_var (const TAO_Base_var &rhs);
      FactoryDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_FACTORYDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_FACTORYDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export FactoryDef_out
    {
    public:
      FactoryDef_out (FactoryDef_ptr &);
      FactoryDef_out (FactoryDef_var &);
      FactoryDef_out (const FactoryDef_out &);
      FactoryDef_out &operator= (const FactoryDef_out &);
      FactoryDef_out &operator= (const FactoryDef_var &);
      FactoryDef_out &operator= (FactoryDef_ptr);
      operator FactoryDef_ptr &();
      FactoryDef_ptr &ptr (void);
      FactoryDef_ptr operator-> (void);
    
    private:
      FactoryDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_FACTORYDEF_CH_)
#define _CORBA_COMPONENTIR_FACTORYDEF_CH_
    
    class _TAO_FactoryDef_Proxy_Impl;
    class _TAO_FactoryDef_Remote_Proxy_Impl;
    class _TAO_FactoryDef_Proxy_Broker;
    class _TAO_FactoryDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export FactoryDef
      : public virtual CORBA::OperationDef
    {
    public:
      typedef FactoryDef_ptr _ptr_type;
      typedef FactoryDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static FactoryDef_ptr _duplicate (FactoryDef_ptr obj);
      
      static FactoryDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static FactoryDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static FactoryDef_ptr _nil (void)
        {
          return (FactoryDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_FactoryDef_Proxy_Broker *the_TAO_FactoryDef_Proxy_Broker_;
    
    protected:
      FactoryDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_FactoryDef_setup_collocation (int collocated);
      
      FactoryDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~FactoryDef (void);
      
      friend class _TAO_FactoryDef_Remote_Proxy_Impl;
      friend class _TAO_FactoryDef_ThruPOA_Proxy_Impl;
      friend class _TAO_FactoryDef_Direct_Proxy_Impl;
    
    private:
      FactoryDef (const FactoryDef &);
      void operator= (const FactoryDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_FactoryDef_Proxy_Impl
      : public virtual CORBA::_TAO_OperationDef_Proxy_Impl
    {
    public:
      virtual ~_TAO_FactoryDef_Proxy_Impl (void) {}
    
    protected:
      _TAO_FactoryDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_FactoryDef_Remote_Proxy_Impl
      : public virtual _TAO_FactoryDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::_TAO_OperationDef_Remote_Proxy_Impl
    {
    public:
      _TAO_FactoryDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_FactoryDef_Remote_Proxy_Impl (void) {}
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_FactoryDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_FactoryDef_Proxy_Broker (void);
      virtual _TAO_FactoryDef_Proxy_Impl &select_proxy (
          FactoryDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_FactoryDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_FactoryDef_Remote_Proxy_Broker
      : public virtual _TAO_FactoryDef_Proxy_Broker
    {
    public: 
      _TAO_FactoryDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_FactoryDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_FactoryDef_Proxy_Impl &select_proxy (
          FactoryDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_FactoryDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_FactoryDef_Remote_Proxy_Broker *the_TAO_FactoryDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_FactoryDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_FINDERDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_FINDERDEF___PTR_CH_
    
    class FinderDef;
    typedef FinderDef *FinderDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_FINDERDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_FINDERDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export FinderDef_var : public TAO_Base_var
    {
    public:
      FinderDef_var (void); // default constructor
      FinderDef_var (FinderDef_ptr p) : ptr_ (p) {} 
      FinderDef_var (const FinderDef_var &); // copy constructor
      ~FinderDef_var (void); // destructor
      
      FinderDef_var &operator= (FinderDef_ptr);
      FinderDef_var &operator= (const FinderDef_var &);
      FinderDef_ptr operator-> (void) const;
      
      operator const FinderDef_ptr &() const;
      operator FinderDef_ptr &();
      // in, inout, out, _retn 
      FinderDef_ptr in (void) const;
      FinderDef_ptr &inout (void);
      FinderDef_ptr &out (void);
      FinderDef_ptr _retn (void);
      FinderDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static FinderDef_ptr tao_duplicate (FinderDef_ptr);
      static void tao_release (FinderDef_ptr);
      static FinderDef_ptr tao_nil (void);
      static FinderDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      FinderDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      FinderDef_var (const TAO_Base_var &rhs);
      FinderDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_FINDERDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_FINDERDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export FinderDef_out
    {
    public:
      FinderDef_out (FinderDef_ptr &);
      FinderDef_out (FinderDef_var &);
      FinderDef_out (const FinderDef_out &);
      FinderDef_out &operator= (const FinderDef_out &);
      FinderDef_out &operator= (const FinderDef_var &);
      FinderDef_out &operator= (FinderDef_ptr);
      operator FinderDef_ptr &();
      FinderDef_ptr &ptr (void);
      FinderDef_ptr operator-> (void);
    
    private:
      FinderDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_FINDERDEF_CH_)
#define _CORBA_COMPONENTIR_FINDERDEF_CH_
    
    class _TAO_FinderDef_Proxy_Impl;
    class _TAO_FinderDef_Remote_Proxy_Impl;
    class _TAO_FinderDef_Proxy_Broker;
    class _TAO_FinderDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export FinderDef
      : public virtual CORBA::OperationDef
    {
    public:
      typedef FinderDef_ptr _ptr_type;
      typedef FinderDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static FinderDef_ptr _duplicate (FinderDef_ptr obj);
      
      static FinderDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static FinderDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static FinderDef_ptr _nil (void)
        {
          return (FinderDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_FinderDef_Proxy_Broker *the_TAO_FinderDef_Proxy_Broker_;
    
    protected:
      FinderDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_FinderDef_setup_collocation (int collocated);
      
      FinderDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~FinderDef (void);
      
      friend class _TAO_FinderDef_Remote_Proxy_Impl;
      friend class _TAO_FinderDef_ThruPOA_Proxy_Impl;
      friend class _TAO_FinderDef_Direct_Proxy_Impl;
    
    private:
      FinderDef (const FinderDef &);
      void operator= (const FinderDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_FinderDef_Proxy_Impl
      : public virtual CORBA::_TAO_OperationDef_Proxy_Impl
    {
    public:
      virtual ~_TAO_FinderDef_Proxy_Impl (void) {}
    
    protected:
      _TAO_FinderDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_FinderDef_Remote_Proxy_Impl
      : public virtual _TAO_FinderDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::_TAO_OperationDef_Remote_Proxy_Impl
    {
    public:
      _TAO_FinderDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_FinderDef_Remote_Proxy_Impl (void) {}
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_FinderDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_FinderDef_Proxy_Broker (void);
      virtual _TAO_FinderDef_Proxy_Impl &select_proxy (
          FinderDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_FinderDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_FinderDef_Remote_Proxy_Broker
      : public virtual _TAO_FinderDef_Proxy_Broker
    {
    public: 
      _TAO_FinderDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_FinderDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_FinderDef_Proxy_Impl &select_proxy (
          FinderDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_FinderDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_FinderDef_Remote_Proxy_Broker *the_TAO_FinderDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_FinderDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_CORBA_COMPONENTIR_HOMEDEF___PTR_CH_)
#define _CORBA_COMPONENTIR_HOMEDEF___PTR_CH_
    
    class HomeDef;
    typedef HomeDef *HomeDef_ptr;

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_HOMEDEF___VAR_CH_)
#define _CORBA_COMPONENTIR_HOMEDEF___VAR_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
    
    class TAO_IFR_Client_Export HomeDef_var : public TAO_Base_var
    {
    public:
      HomeDef_var (void); // default constructor
      HomeDef_var (HomeDef_ptr p) : ptr_ (p) {} 
      HomeDef_var (const HomeDef_var &); // copy constructor
      ~HomeDef_var (void); // destructor
      
      HomeDef_var &operator= (HomeDef_ptr);
      HomeDef_var &operator= (const HomeDef_var &);
      HomeDef_ptr operator-> (void) const;
      
      operator const HomeDef_ptr &() const;
      operator HomeDef_ptr &();
      // in, inout, out, _retn 
      HomeDef_ptr in (void) const;
      HomeDef_ptr &inout (void);
      HomeDef_ptr &out (void);
      HomeDef_ptr _retn (void);
      HomeDef_ptr ptr (void) const;
      
      // Hooks used by template sequence and object manager classes
      // for non-defined forward declared interfaces.
      static HomeDef_ptr tao_duplicate (HomeDef_ptr);
      static void tao_release (HomeDef_ptr);
      static HomeDef_ptr tao_nil (void);
      static HomeDef_ptr tao_narrow (
          CORBA::Object *
          ACE_ENV_ARG_DECL_NOT_USED
        );
      static CORBA::Object * tao_upcast (void *);
    
    private:
      HomeDef_ptr ptr_;
      // Unimplemented - prevents widening assignment.
      HomeDef_var (const TAO_Base_var &rhs);
      HomeDef_var &operator= (const TAO_Base_var &rhs);
    };

#endif /* end #if !defined */

#if !defined (_CORBA_COMPONENTIR_HOMEDEF___OUT_CH_)
#define _CORBA_COMPONENTIR_HOMEDEF___OUT_CH_
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
    
    class TAO_IFR_Client_Export HomeDef_out
    {
    public:
      HomeDef_out (HomeDef_ptr &);
      HomeDef_out (HomeDef_var &);
      HomeDef_out (const HomeDef_out &);
      HomeDef_out &operator= (const HomeDef_out &);
      HomeDef_out &operator= (const HomeDef_var &);
      HomeDef_out &operator= (HomeDef_ptr);
      operator HomeDef_ptr &();
      HomeDef_ptr &ptr (void);
      HomeDef_ptr operator-> (void);
    
    private:
      HomeDef_ptr &ptr_;
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_CORBA_COMPONENTIR_HOMEDEF_CH_)
#define _CORBA_COMPONENTIR_HOMEDEF_CH_
    
    class _TAO_HomeDef_Proxy_Impl;
    class _TAO_HomeDef_Remote_Proxy_Impl;
    class _TAO_HomeDef_Proxy_Broker;
    class _TAO_HomeDef_Remote_Proxy_Broker;
    
    class TAO_IFR_Client_Export HomeDef
      : public virtual CORBA::ExtInterfaceDef
    {
    public:
      typedef HomeDef_ptr _ptr_type;
      typedef HomeDef_var _var_type;
      static int _tao_class_id;
      
      // The static operations.
      static HomeDef_ptr _duplicate (HomeDef_ptr obj);
      
      static HomeDef_ptr _narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static HomeDef_ptr _unchecked_narrow (
          CORBA::Object_ptr obj
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      static HomeDef_ptr _nil (void)
        {
          return (HomeDef_ptr)0;
        }
      
      static void _tao_any_destructor (void *);
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::HomeDef_ptr base_home (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual void base_home (
          CORBA::ComponentIR::HomeDef_ptr base_home
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::InterfaceDefSeq * supported_interfaces (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual void supported_interfaces (
          const CORBA::InterfaceDefSeq & supported_interfaces
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::ComponentDef_ptr managed_component (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual void managed_component (
          CORBA::ComponentIR::ComponentDef_ptr managed_component
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ValueDef_ptr primary_key (
          ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual void primary_key (
          CORBA::ValueDef_ptr primary_key
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::FactoryDef_ptr create_factory (
          const char * id,
          const char * name,
          const char * version,
          const CORBA::ParDescriptionSeq & params,
          const CORBA::ExceptionDefSeq & exceptions
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
      
      virtual ::CORBA::ComponentIR::FinderDef_ptr create_finder (
          const char * id,
          const char * name,
          const char * version,
          const CORBA::ParDescriptionSeq & params,
          const CORBA::ExceptionDefSeq & exceptions
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
      
      virtual CORBA::Boolean _is_a (
          const char *type_id
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        );
      
      virtual void *_tao_QueryInterface (ptr_arith_t type);
      
      virtual const char* _interface_repository_id (void) const;
      virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    private:
      _TAO_HomeDef_Proxy_Broker *the_TAO_HomeDef_Proxy_Broker_;
    
    protected:
      HomeDef (int collocated = 0);
      
      // These methods travese the inheritance tree and set the
      // parents piece of the given class in the right mode.
      virtual void CORBA_ComponentIR_HomeDef_setup_collocation (int collocated);
      
      HomeDef (
          TAO_Stub *objref, 
          CORBA::Boolean _tao_collocated = 0,
          TAO_Abstract_ServantBase *servant = 0
        );
      virtual ~HomeDef (void);
      
      friend class _TAO_HomeDef_Remote_Proxy_Impl;
      friend class _TAO_HomeDef_ThruPOA_Proxy_Impl;
      friend class _TAO_HomeDef_Direct_Proxy_Impl;
    
    private:
      HomeDef (const HomeDef &);
      void operator= (const HomeDef &);
    };
    
    // The Proxy Implementations are used by each interface to
    // perform a call. Each different implementation encapsulates
    // an invocation logic.
    
    
    ///////////////////////////////////////////////////////////////////////
    //                    Base Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_impl_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_HomeDef_Proxy_Impl
      : public virtual CORBA::_TAO_ExtInterfaceDef_Proxy_Impl
    {
    public:
      virtual ~_TAO_HomeDef_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::HomeDef_ptr base_home (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual void base_home (
          CORBA_Object *_collocated_tao_target_,
          CORBA::ComponentIR::HomeDef_ptr base_home
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::InterfaceDefSeq * supported_interfaces (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual void supported_interfaces (
          CORBA_Object *_collocated_tao_target_,
          const CORBA::InterfaceDefSeq & supported_interfaces
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::ComponentDef_ptr managed_component (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual void managed_component (
          CORBA_Object *_collocated_tao_target_,
          CORBA::ComponentIR::ComponentDef_ptr managed_component
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ValueDef_ptr primary_key (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual void primary_key (
          CORBA_Object *_collocated_tao_target_,
          CORBA::ValueDef_ptr primary_key
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::FactoryDef_ptr create_factory (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          const CORBA::ParDescriptionSeq & params,
          const CORBA::ExceptionDefSeq & exceptions
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
      
      virtual ::CORBA::ComponentIR::FinderDef_ptr create_finder (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          const CORBA::ParDescriptionSeq & params,
          const CORBA::ExceptionDefSeq & exceptions
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        )) = 0;
    
    protected:
      _TAO_HomeDef_Proxy_Impl (void);
    };
    
    //
    //               End Base Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    
    ///////////////////////////////////////////////////////////////////////
    //                Remote Proxy Impl. Declaration
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37
    
    class TAO_IFR_Client_Export _TAO_HomeDef_Remote_Proxy_Impl
      : public virtual _TAO_HomeDef_Proxy_Impl,
        public virtual TAO_Remote_Object_Proxy_Impl,
        public virtual CORBA::_TAO_ExtInterfaceDef_Remote_Proxy_Impl
    {
    public:
      _TAO_HomeDef_Remote_Proxy_Impl (void);
      
      virtual ~_TAO_HomeDef_Remote_Proxy_Impl (void) {}
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::HomeDef_ptr base_home (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual void base_home (
          CORBA_Object *_collocated_tao_target_,
          CORBA::ComponentIR::HomeDef_ptr base_home
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::InterfaceDefSeq * supported_interfaces (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual void supported_interfaces (
          CORBA_Object *_collocated_tao_target_,
          const CORBA::InterfaceDefSeq & supported_interfaces
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::ComponentDef_ptr managed_component (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual void managed_component (
          CORBA_Object *_collocated_tao_target_,
          CORBA::ComponentIR::ComponentDef_ptr managed_component
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ValueDef_ptr primary_key (
          CORBA_Object *_collocated_tao_target_
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual void primary_key (
          CORBA_Object *_collocated_tao_target_,
          CORBA::ValueDef_ptr primary_key
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::FactoryDef_ptr create_factory (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          const CORBA::ParDescriptionSeq & params,
          const CORBA::ExceptionDefSeq & exceptions
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
      
      // TAO_IDL - Generated from
      // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/proxy_impl_xh.cpp:24
      
      virtual ::CORBA::ComponentIR::FinderDef_ptr create_finder (
          CORBA_Object *_collocated_tao_target_,
          const char * id,
          const char * name,
          const char * version,
          const CORBA::ParDescriptionSeq & params,
          const CORBA::ExceptionDefSeq & exceptions
          ACE_ENV_ARG_DECL
        )
        ACE_THROW_SPEC ((
          CORBA::SystemException
        ));
    };
    
    //
    //             End Remote Proxy Impl. Declaration
    ///////////////////////////////////////////////////////////////////////
    
    // The Proxy Brokers are used by each interface to get
    // the right proxy for performing a call. In the new 
    // collocation scheme, the proxy to be used can vary on
    // a call by call basis.
    
    ///////////////////////////////////////////////////////////////////////
    //                 Base Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/base_proxy_broker_ch.cpp:35
    
    class TAO_IFR_Client_Export _TAO_HomeDef_Proxy_Broker
    {
    public:
      virtual ~_TAO_HomeDef_Proxy_Broker (void);
      virtual _TAO_HomeDef_Proxy_Impl &select_proxy (
          HomeDef *object
          ACE_ENV_ARG_DECL_WITH_DEFAULTS
        ) = 0;
      
    protected:
      _TAO_HomeDef_Proxy_Broker (void);
      
    };
    
    //
    //              End Base Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////
    
        
    ///////////////////////////////////////////////////////////////////////
    //                 Remote Proxy Broker Declaration 
    //
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40
    
    class TAO_IFR_Client_Export _TAO_HomeDef_Remote_Proxy_Broker
      : public virtual _TAO_HomeDef_Proxy_Broker
    {
    public: 
      _TAO_HomeDef_Remote_Proxy_Broker (void);
      
      virtual ~_TAO_HomeDef_Remote_Proxy_Broker (void);
      
      virtual _TAO_HomeDef_Proxy_Impl &select_proxy (
          HomeDef *object
          ACE_ENV_ARG_DECL
        );
      
    private:
      _TAO_HomeDef_Remote_Proxy_Impl remote_proxy_impl_;
    
    public:
      // This member function is used to get an handle to the unique instance
      // of the Remote Proxy Broker that is available for a given
      // interface.
      static _TAO_HomeDef_Remote_Proxy_Broker *the_TAO_HomeDef_Remote_Proxy_Broker (void);
    };
    
    //
    //              End Remote Proxy Broker Declaration 
    ///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_HomeDef;
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/structure_ch.cpp:49
    
    class HomeDescription_var;
    
    struct TAO_IFR_Client_Export HomeDescription
    {
      typedef HomeDescription_var _var_type;
      
      static void _tao_any_destructor (void *);
      TAO_String_Manager name;
      TAO_String_Manager id;
      TAO_String_Manager defined_in;
      TAO_String_Manager version;
      TAO_String_Manager base_home;
      TAO_String_Manager managed_component;
      CORBA::ValueDescription primary_key;
      CORBA::OpDescriptionSeq factories;
      CORBA::OpDescriptionSeq finders;
      CORBA::OpDescriptionSeq operations;
      CORBA::ExtAttrDescriptionSeq attributes;
      CORBA::TypeCode_var type;
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:71
    
    class TAO_IFR_Client_Export HomeDescription_var
    {
    public:
      HomeDescription_var (void);
      HomeDescription_var (HomeDescription *);
      HomeDescription_var (const HomeDescription_var &);
      ~HomeDescription_var (void);
      
      HomeDescription_var &operator= (HomeDescription *);
      HomeDescription_var &operator= (const HomeDescription_var &);
      HomeDescription *operator-> (void);
      const HomeDescription *operator-> (void) const;
      
      operator const HomeDescription &() const;
      operator HomeDescription &();
      operator HomeDescription &() const;
      
      // Variable-size types only.
      operator HomeDescription *&();
      
      // in, inout, out, _retn 
      const HomeDescription &in (void) const;
      HomeDescription &inout (void);
      HomeDescription *&out (void);
      HomeDescription *_retn (void);
      HomeDescription *ptr (void) const;
    
    private:
      HomeDescription *ptr_;
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:445
    
    class TAO_IFR_Client_Export HomeDescription_out
    {
    public:
      HomeDescription_out (HomeDescription *&);
      HomeDescription_out (HomeDescription_var &);
      HomeDescription_out (const HomeDescription_out &);
      HomeDescription_out &operator= (const HomeDescription_out &);
      HomeDescription_out &operator= (HomeDescription *);
      operator HomeDescription *&();
      HomeDescription *&ptr (void);
      HomeDescription *operator-> (void);
      
    private:
      HomeDescription *&ptr_;
      // Assignment from T_var not allowed.
      void operator= (const HomeDescription_var &);
    };
    
    // TAO_IDL - Generated from
    // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_HomeDescription;
  
  // TAO_IDL - Generated from
  // W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:67
  
  }
TAO_NAMESPACE_CLOSE // module CORBA::ComponentIR

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:67

}
TAO_NAMESPACE_CLOSE // module CORBA

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/root.cpp:80

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_EventDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_EventDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_Container_Proxy_Broker *
(*CORBA_ComponentIR__TAO_Container_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_ModuleDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_ModuleDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_Repository_Proxy_Broker *
(*CORBA_ComponentIR__TAO_Repository_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_ProvidesDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_ProvidesDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_UsesDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_UsesDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_EventPortDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_EventPortDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_EmitsDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_EmitsDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_PublishesDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_PublishesDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_ConsumesDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_ConsumesDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_ComponentDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_ComponentDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_FactoryDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_FactoryDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_FinderDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_FinderDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

extern TAO_IFR_Client_Export
CORBA::ComponentIR::_TAO_HomeDef_Proxy_Broker *
(*CORBA_ComponentIR__TAO_HomeDef_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::EventDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::EventDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::EventDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::Container_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::Container_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::Container_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ModuleDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ModuleDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::ModuleDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::Repository_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::Repository_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::Repository_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ProvidesDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ProvidesDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::ProvidesDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ComponentIR::ProvidesDescription &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ProvidesDescription*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::ProvidesDescription *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ComponentIR::ProvidesDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::UsesDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::UsesDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::UsesDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ComponentIR::UsesDescription &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::UsesDescription*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::UsesDescription *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ComponentIR::UsesDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::EventPortDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::EventPortDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::EventPortDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ComponentIR::EventPortDescription &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::EventPortDescription*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::EventPortDescription *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ComponentIR::EventPortDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::EmitsDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::EmitsDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::EmitsDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::PublishesDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::PublishesDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::PublishesDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ConsumesDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ConsumesDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::ConsumesDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ComponentDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ComponentDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::ComponentDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ComponentIR::ProvidesDescriptionSeq &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ProvidesDescriptionSeq*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::ProvidesDescriptionSeq *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ComponentIR::ProvidesDescriptionSeq *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ComponentIR::UsesDescriptionSeq &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::UsesDescriptionSeq*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::UsesDescriptionSeq *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ComponentIR::UsesDescriptionSeq *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ComponentIR::EventPortDescriptionSeq &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::EventPortDescriptionSeq*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::EventPortDescriptionSeq *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ComponentIR::EventPortDescriptionSeq *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ComponentIR::ComponentDescription &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::ComponentDescription*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::ComponentDescription *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ComponentIR::ComponentDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::FactoryDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::FactoryDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::FactoryDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::FinderDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::FinderDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::FinderDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::HomeDef_ptr); // copying
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::HomeDef_ptr *); // non-copying
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::HomeDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/any_op_ch.cpp:52

TAO_IFR_Client_Export void operator<<= (CORBA::Any &, const CORBA::ComponentIR::HomeDescription &); // copying version
TAO_IFR_Client_Export void operator<<= (CORBA::Any &, CORBA::ComponentIR::HomeDescription*); // noncopying version
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, CORBA::ComponentIR::HomeDescription *&); // deprecated
TAO_IFR_Client_Export CORBA::Boolean operator>>= (const CORBA::Any &, const CORBA::ComponentIR::HomeDescription *&);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/cdr_op.cpp:48

#ifndef __ACE_INLINE__

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::EventDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::EventDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::Container_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::Container_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::ModuleDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::ModuleDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::Repository_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::Repository_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::ProvidesDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::ProvidesDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ch.cpp:54

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::ProvidesDescription &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::ProvidesDescription &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::UsesDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::UsesDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ch.cpp:54

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::UsesDescription &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::UsesDescription &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::EventPortDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::EventPortDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ch.cpp:54

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::EventPortDescription &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::EventPortDescription &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::EmitsDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::EmitsDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::PublishesDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::PublishesDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::ConsumesDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::ConsumesDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::ComponentDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::ComponentDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_CORBA_ComponentIR_ProvidesDescriptionSeq_H_
#define _TAO_CDR_OP_CORBA_ComponentIR_ProvidesDescriptionSeq_H_

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::ComponentIR::ProvidesDescriptionSeq &
  );
TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::ComponentIR::ProvidesDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ComponentIR_ProvidesDescriptionSeq_H_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_CORBA_ComponentIR_UsesDescriptionSeq_H_
#define _TAO_CDR_OP_CORBA_ComponentIR_UsesDescriptionSeq_H_

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::ComponentIR::UsesDescriptionSeq &
  );
TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::ComponentIR::UsesDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ComponentIR_UsesDescriptionSeq_H_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_CORBA_ComponentIR_EventPortDescriptionSeq_H_
#define _TAO_CDR_OP_CORBA_ComponentIR_EventPortDescriptionSeq_H_

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::ComponentIR::EventPortDescriptionSeq &
  );
TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::ComponentIR::EventPortDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ComponentIR_EventPortDescriptionSeq_H_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ch.cpp:54

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::ComponentDescription &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::ComponentDescription &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::FactoryDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::FactoryDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::FinderDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::FinderDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::HomeDef_ptr );
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::HomeDef_ptr &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ch.cpp:54

TAO_IFR_Client_Export CORBA::Boolean operator<< (TAO_OutputCDR &, const CORBA::ComponentIR::HomeDescription &);
TAO_IFR_Client_Export CORBA::Boolean operator>> (TAO_InputCDR &, CORBA::ComponentIR::HomeDescription &);

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/cdr_op.cpp:64

#endif /* __ACE_INLINE__ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:1009

#if defined (__ACE_INLINE__)
#include "IFR_ComponentsC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include "ace/post.h"
#endif /* ifndef */

