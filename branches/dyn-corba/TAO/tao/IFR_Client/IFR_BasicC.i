// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_REPOSITORY___CI_)
#define _CORBA_REPOSITORY___CI_

ACE_INLINE
CORBA::Repository::Repository (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_Repository_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::Repository::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_MODULEDEF___CI_)
#define _CORBA_MODULEDEF___CI_

ACE_INLINE
CORBA::ModuleDef::ModuleDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ModuleDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::ModuleDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class CORBA::ModuleDescription_var
// *************************************************************

ACE_INLINE
CORBA::ModuleDescription_var::ModuleDescription_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ModuleDescription_var::ModuleDescription_var (ModuleDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ModuleDescription_var::ModuleDescription_var (const ::CORBA::ModuleDescription_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::ModuleDescription (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::ModuleDescription_var::~ModuleDescription_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::ModuleDescription_var &
CORBA::ModuleDescription_var::operator= (ModuleDescription *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::CORBA::ModuleDescription_var &
CORBA::ModuleDescription_var::operator= (const ::CORBA::ModuleDescription_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ModuleDescription *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ModuleDescription (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ModuleDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA::ModuleDescription *
CORBA::ModuleDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ModuleDescription *
CORBA::ModuleDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ModuleDescription_var::operator const ::CORBA::ModuleDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ModuleDescription_var::operator ::CORBA::ModuleDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ModuleDescription_var::operator ::CORBA::ModuleDescription &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::ModuleDescription_var::operator ::CORBA::ModuleDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA::ModuleDescription &
CORBA::ModuleDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA::ModuleDescription &
CORBA::ModuleDescription_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::CORBA::ModuleDescription *&
CORBA::ModuleDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA::ModuleDescription *
CORBA::ModuleDescription_var::_retn (void)
{
  ::CORBA::ModuleDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA::ModuleDescription *
CORBA::ModuleDescription_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class CORBA::ModuleDescription_out
// *************************************************************

ACE_INLINE
CORBA::ModuleDescription_out::ModuleDescription_out (::CORBA::ModuleDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ModuleDescription_out::ModuleDescription_out (ModuleDescription_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ModuleDescription_out::ModuleDescription_out (const ::CORBA::ModuleDescription_out &p)
  : ptr_ (ACE_const_cast (ModuleDescription_out&, p).ptr_)
{}

ACE_INLINE
CORBA::ModuleDescription_out &
CORBA::ModuleDescription_out::operator= (const ::CORBA::ModuleDescription_out &p)
{
  this->ptr_ = ACE_const_cast (ModuleDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE
CORBA::ModuleDescription_out &
CORBA::ModuleDescription_out::operator= (ModuleDescription *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
CORBA::ModuleDescription_out::operator ::CORBA::ModuleDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ModuleDescription *&
CORBA::ModuleDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ModuleDescription *
CORBA::ModuleDescription_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_CONSTANTDEF___CI_)
#define _CORBA_CONSTANTDEF___CI_

ACE_INLINE
CORBA::ConstantDef::ConstantDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ConstantDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::ConstantDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class CORBA::ConstantDescription_var
// *************************************************************

ACE_INLINE
CORBA::ConstantDescription_var::ConstantDescription_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ConstantDescription_var::ConstantDescription_var (ConstantDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ConstantDescription_var::ConstantDescription_var (const ::CORBA::ConstantDescription_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::ConstantDescription (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::ConstantDescription_var::~ConstantDescription_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::ConstantDescription_var &
CORBA::ConstantDescription_var::operator= (ConstantDescription *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::CORBA::ConstantDescription_var &
CORBA::ConstantDescription_var::operator= (const ::CORBA::ConstantDescription_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ConstantDescription *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ConstantDescription (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ConstantDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA::ConstantDescription *
CORBA::ConstantDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ConstantDescription *
CORBA::ConstantDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ConstantDescription_var::operator const ::CORBA::ConstantDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ConstantDescription_var::operator ::CORBA::ConstantDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ConstantDescription_var::operator ::CORBA::ConstantDescription &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::ConstantDescription_var::operator ::CORBA::ConstantDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA::ConstantDescription &
CORBA::ConstantDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA::ConstantDescription &
CORBA::ConstantDescription_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::CORBA::ConstantDescription *&
CORBA::ConstantDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA::ConstantDescription *
CORBA::ConstantDescription_var::_retn (void)
{
  ::CORBA::ConstantDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA::ConstantDescription *
CORBA::ConstantDescription_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class CORBA::ConstantDescription_out
// *************************************************************

ACE_INLINE
CORBA::ConstantDescription_out::ConstantDescription_out (::CORBA::ConstantDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ConstantDescription_out::ConstantDescription_out (ConstantDescription_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ConstantDescription_out::ConstantDescription_out (const ::CORBA::ConstantDescription_out &p)
  : ptr_ (ACE_const_cast (ConstantDescription_out&, p).ptr_)
{}

ACE_INLINE
CORBA::ConstantDescription_out &
CORBA::ConstantDescription_out::operator= (const ::CORBA::ConstantDescription_out &p)
{
  this->ptr_ = ACE_const_cast (ConstantDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE
CORBA::ConstantDescription_out &
CORBA::ConstantDescription_out::operator= (ConstantDescription *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
CORBA::ConstantDescription_out::operator ::CORBA::ConstantDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ConstantDescription *&
CORBA::ConstantDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ConstantDescription *
CORBA::ConstantDescription_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_STRUCTDEF___CI_)
#define _CORBA_STRUCTDEF___CI_

ACE_INLINE
CORBA::StructDef::StructDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_StructDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::StructDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_UNIONDEF___CI_)
#define _CORBA_UNIONDEF___CI_

ACE_INLINE
CORBA::UnionDef::UnionDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_UnionDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::UnionDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_ENUMDEF___CI_)
#define _CORBA_ENUMDEF___CI_

ACE_INLINE
CORBA::EnumDef::EnumDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_EnumDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::EnumDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_ALIASDEF___CI_)
#define _CORBA_ALIASDEF___CI_

ACE_INLINE
CORBA::AliasDef::AliasDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_AliasDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::AliasDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_NATIVEDEF___CI_)
#define _CORBA_NATIVEDEF___CI_

ACE_INLINE
CORBA::NativeDef::NativeDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_NativeDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::NativeDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_PRIMITIVEDEF___CI_)
#define _CORBA_PRIMITIVEDEF___CI_

ACE_INLINE
CORBA::PrimitiveDef::PrimitiveDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_PrimitiveDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::PrimitiveDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_STRINGDEF___CI_)
#define _CORBA_STRINGDEF___CI_

ACE_INLINE
CORBA::StringDef::StringDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_StringDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::StringDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_WSTRINGDEF___CI_)
#define _CORBA_WSTRINGDEF___CI_

ACE_INLINE
CORBA::WstringDef::WstringDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_WstringDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::WstringDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_SEQUENCEDEF___CI_)
#define _CORBA_SEQUENCEDEF___CI_

ACE_INLINE
CORBA::SequenceDef::SequenceDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_SequenceDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::SequenceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_ARRAYDEF___CI_)
#define _CORBA_ARRAYDEF___CI_

ACE_INLINE
CORBA::ArrayDef::ArrayDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ArrayDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::ArrayDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_EXCEPTIONDEF___CI_)
#define _CORBA_EXCEPTIONDEF___CI_

ACE_INLINE
CORBA::ExceptionDef::ExceptionDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_ExceptionDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::ExceptionDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class CORBA::ExceptionDescription_var
// *************************************************************

ACE_INLINE
CORBA::ExceptionDescription_var::ExceptionDescription_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ExceptionDescription_var::ExceptionDescription_var (ExceptionDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ExceptionDescription_var::ExceptionDescription_var (const ::CORBA::ExceptionDescription_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::ExceptionDescription (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::ExceptionDescription_var::~ExceptionDescription_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDescription_var &
CORBA::ExceptionDescription_var::operator= (ExceptionDescription *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::CORBA::ExceptionDescription_var &
CORBA::ExceptionDescription_var::operator= (const ::CORBA::ExceptionDescription_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ExceptionDescription *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ExceptionDescription (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ExceptionDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA::ExceptionDescription *
CORBA::ExceptionDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ExceptionDescription *
CORBA::ExceptionDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDescription_var::operator const ::CORBA::ExceptionDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDescription_var::operator ::CORBA::ExceptionDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDescription_var::operator ::CORBA::ExceptionDescription &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::ExceptionDescription_var::operator ::CORBA::ExceptionDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA::ExceptionDescription &
CORBA::ExceptionDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA::ExceptionDescription &
CORBA::ExceptionDescription_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::CORBA::ExceptionDescription *&
CORBA::ExceptionDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA::ExceptionDescription *
CORBA::ExceptionDescription_var::_retn (void)
{
  ::CORBA::ExceptionDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA::ExceptionDescription *
CORBA::ExceptionDescription_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class CORBA::ExceptionDescription_out
// *************************************************************

ACE_INLINE
CORBA::ExceptionDescription_out::ExceptionDescription_out (::CORBA::ExceptionDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExceptionDescription_out::ExceptionDescription_out (ExceptionDescription_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExceptionDescription_out::ExceptionDescription_out (const ::CORBA::ExceptionDescription_out &p)
  : ptr_ (ACE_const_cast (ExceptionDescription_out&, p).ptr_)
{}

ACE_INLINE
CORBA::ExceptionDescription_out &
CORBA::ExceptionDescription_out::operator= (const ::CORBA::ExceptionDescription_out &p)
{
  this->ptr_ = ACE_const_cast (ExceptionDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE
CORBA::ExceptionDescription_out &
CORBA::ExceptionDescription_out::operator= (ExceptionDescription *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
CORBA::ExceptionDescription_out::operator ::CORBA::ExceptionDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ExceptionDescription *&
CORBA::ExceptionDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ExceptionDescription *
CORBA::ExceptionDescription_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_obj_sequence_ci.cpp:108

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_EXCEPTIONDEFSEQ_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_EXCEPTIONDEFSEQ_CI_

ACE_INLINE
CORBA::ExceptionDef **
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (CORBA::ULong nelems)
{
  CORBA::ExceptionDef **buf = 0;
  
  ACE_NEW_RETURN (buf, CORBA::ExceptionDef*[nelems], 0);
  
  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = CORBA::ExceptionDef::_nil ();
    }
  
  return buf;
}

ACE_INLINE
void 
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::freebuf (CORBA::ExceptionDef **buffer)
{
  if (buffer == 0)
    {
      return;
    }
  
  delete[] buffer;
}

ACE_INLINE
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq (void)
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (maximum))
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq (
    CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ExceptionDef* *value,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq(
    const _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      CORBA::ExceptionDef **tmp1 =
        _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (this->maximum_);
      CORBA::ExceptionDef ** const tmp2 =
        ACE_reinterpret_cast (CORBA::ExceptionDef ** ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < rhs.length_; ++i)
        {
          tmp1[i] = CORBA::ExceptionDef::_duplicate (tmp2[i]);
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq &
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::operator= (
    const _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      CORBA::ExceptionDef **tmp =
        ACE_reinterpret_cast (CORBA::ExceptionDef **, this->buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          CORBA::release (tmp[i]);
          tmp[i] = CORBA::ExceptionDef::_nil ();
        }
      
      if (this->maximum_ < rhs.maximum_)
        {
          _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::freebuf (tmp);
          this->buffer_ = _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  CORBA::ExceptionDef **tmp1 =
    ACE_reinterpret_cast (CORBA::ExceptionDef **, this->buffer_);
  
  CORBA::ExceptionDef ** const tmp2 =
    ACE_reinterpret_cast (CORBA::ExceptionDef ** ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      tmp1[i] = CORBA::ExceptionDef::_duplicate (tmp2[i]);
    }
  
  return *this;
}

ACE_INLINE
TAO_Object_Manager<CORBA::ExceptionDef,CORBA::ExceptionDef_var>
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::operator[] (CORBA::ULong index) const
{
  ACE_ASSERT (index < this->maximum_);
  CORBA::ExceptionDef ** const tmp =
    ACE_reinterpret_cast (CORBA::ExceptionDef ** ACE_CAST_CONST, this->buffer_);
  return TAO_Object_Manager<CORBA::ExceptionDef,CORBA::ExceptionDef_var> (tmp + index, this->release_);
}

ACE_INLINE
CORBA::ExceptionDef* *
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::get_buffer (CORBA::Boolean orphan)
{
  CORBA::ExceptionDef **result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::allocbuf (this->maximum_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (CORBA::ExceptionDef**, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(CORBA::ExceptionDef**,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const CORBA::ExceptionDef* *
CORBA::_TAO_Unbounded_Object_Sequence_CORBA_ExceptionDefSeq::get_buffer (void) const
{
  return ACE_reinterpret_cast (const CORBA::ExceptionDef ** ACE_CAST_CONST, this->buffer_);
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_EXCEPTIONDEFSEQ_CI_)
#define _CORBA_EXCEPTIONDEFSEQ_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class CORBA::ExceptionDefSeq_var
// *************************************************************

ACE_INLINE
CORBA::ExceptionDefSeq_var::ExceptionDefSeq_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ExceptionDefSeq_var::ExceptionDefSeq_var (ExceptionDefSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ExceptionDefSeq_var::ExceptionDefSeq_var (const ::CORBA::ExceptionDefSeq_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::ExceptionDefSeq (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::ExceptionDefSeq_var::~ExceptionDefSeq_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDefSeq_var &
CORBA::ExceptionDefSeq_var::operator= (ExceptionDefSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::CORBA::ExceptionDefSeq_var &
CORBA::ExceptionDefSeq_var::operator= (const ::CORBA::ExceptionDefSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ExceptionDefSeq *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ExceptionDefSeq (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ExceptionDefSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::CORBA::ExceptionDefSeq *
CORBA::ExceptionDefSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ExceptionDefSeq *
CORBA::ExceptionDefSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDefSeq_var::operator const ::CORBA::ExceptionDefSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDefSeq_var::operator ::CORBA::ExceptionDefSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDefSeq_var::operator ::CORBA::ExceptionDefSeq &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::ExceptionDefSeq_var::operator ::CORBA::ExceptionDefSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_Object_Manager<CORBA::ExceptionDef, CORBA::ExceptionDef_var>
CORBA::ExceptionDefSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::CORBA::ExceptionDefSeq &
CORBA::ExceptionDefSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::ExceptionDefSeq &
CORBA::ExceptionDefSeq_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::ExceptionDefSeq *&
CORBA::ExceptionDefSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::CORBA::ExceptionDefSeq *
CORBA::ExceptionDefSeq_var::_retn (void)
{
  ::CORBA::ExceptionDefSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::CORBA::ExceptionDefSeq *
CORBA::ExceptionDefSeq_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class CORBA::ExceptionDefSeq_out
// *************************************************************

ACE_INLINE
CORBA::ExceptionDefSeq_out::ExceptionDefSeq_out (ExceptionDefSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExceptionDefSeq_out::ExceptionDefSeq_out (ExceptionDefSeq_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExceptionDefSeq_out::ExceptionDefSeq_out (const ::CORBA::ExceptionDefSeq_out &p)
  : ptr_ (ACE_const_cast (ExceptionDefSeq_out&, p).ptr_)
{}

ACE_INLINE
::CORBA::ExceptionDefSeq_out &
CORBA::ExceptionDefSeq_out::operator= (const ::CORBA::ExceptionDefSeq_out &p)
{
  this->ptr_ = ACE_const_cast (ExceptionDefSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::CORBA::ExceptionDefSeq_out &
CORBA::ExceptionDefSeq_out::operator= (ExceptionDefSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA::ExceptionDefSeq_out::operator ::CORBA::ExceptionDefSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ExceptionDefSeq *&
CORBA::ExceptionDefSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ExceptionDefSeq *
CORBA::ExceptionDefSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_Object_Manager<CORBA::ExceptionDef, CORBA::ExceptionDef_var>
CORBA::ExceptionDefSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ci.cpp:99

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_EXCDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_EXCDESCRIPTIONSEQ_CI_

ACE_INLINE
CORBA::ExceptionDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (CORBA::ULong size)
{
  CORBA::ExceptionDescription *retval = 0;
  ACE_NEW_RETURN (retval, CORBA::ExceptionDescription[size], 0);
  return retval;
}

ACE_INLINE
void CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::freebuf (CORBA::ExceptionDescription *buffer)
{
  delete [] buffer;
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (void)
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (CORBA::ULong maximum) 
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (maximum))
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (
    CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ExceptionDescription *data,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq (
    const _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      CORBA::ExceptionDescription *tmp1 =
        _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (this->maximum_);
      CORBA::ExceptionDescription * const tmp2 =
        ACE_reinterpret_cast (CORBA::ExceptionDescription * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp1[i] = tmp2[i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq &
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::operator= (
    const _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
        {
          // Free the old buffer.
          CORBA::ExceptionDescription *tmp =
            ACE_reinterpret_cast (CORBA::ExceptionDescription *, this->buffer_);
          
          _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::freebuf (tmp);
          
          this->buffer_ =
            _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  CORBA::ExceptionDescription *tmp1 =
    ACE_reinterpret_cast (CORBA::ExceptionDescription *, this->buffer_);
  CORBA::ExceptionDescription * const tmp2 =
    ACE_reinterpret_cast (CORBA::ExceptionDescription * ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp1[i] = tmp2[i];
    }
  
  return *this;
}

// = Accessors.
ACE_INLINE
CORBA::ExceptionDescription &
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::operator[] (CORBA::ULong i)
{
  ACE_ASSERT (i < this->maximum_);
  CORBA::ExceptionDescription* tmp =
    ACE_reinterpret_cast (CORBA::ExceptionDescription*, this->buffer_);
  return tmp[i];
}

ACE_INLINE
const CORBA::ExceptionDescription &
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::operator[] (CORBA::ULong i) const
{
  ACE_ASSERT (i < this->maximum_);
  CORBA::ExceptionDescription * const tmp =
    ACE_reinterpret_cast (CORBA::ExceptionDescription* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE
CORBA::ExceptionDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::get_buffer (CORBA::Boolean orphan)
{
  CORBA::ExceptionDescription *result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::allocbuf (this->length_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (CORBA::ExceptionDescription*, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(CORBA::ExceptionDescription*,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const CORBA::ExceptionDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::get_buffer (void) const
{
  return ACE_reinterpret_cast (const CORBA::ExceptionDescription * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE
void
CORBA::_TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::replace (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ExceptionDescription *data,
    CORBA::Boolean release
  )
{
  this->maximum_ = max;
  this->length_ = length;
  
  if (this->buffer_ && this->release_ == 1)
    {
      CORBA::ExceptionDescription *tmp =
        ACE_reinterpret_cast (CORBA::ExceptionDescription*, this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_ExcDescriptionSeq::freebuf (tmp);
    }
  
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_EXCDESCRIPTIONSEQ_CI_)
#define _CORBA_EXCDESCRIPTIONSEQ_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class CORBA::ExcDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA::ExcDescriptionSeq_var::ExcDescriptionSeq_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ExcDescriptionSeq_var::ExcDescriptionSeq_var (ExcDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ExcDescriptionSeq_var::ExcDescriptionSeq_var (const ::CORBA::ExcDescriptionSeq_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::ExcDescriptionSeq (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::ExcDescriptionSeq_var::~ExcDescriptionSeq_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::ExcDescriptionSeq_var &
CORBA::ExcDescriptionSeq_var::operator= (ExcDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::CORBA::ExcDescriptionSeq_var &
CORBA::ExcDescriptionSeq_var::operator= (const ::CORBA::ExcDescriptionSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ExcDescriptionSeq *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ExcDescriptionSeq (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ExcDescriptionSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::CORBA::ExcDescriptionSeq *
CORBA::ExcDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ExcDescriptionSeq *
CORBA::ExcDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ExcDescriptionSeq_var::operator const ::CORBA::ExcDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ExcDescriptionSeq_var::operator ::CORBA::ExcDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ExcDescriptionSeq_var::operator ::CORBA::ExcDescriptionSeq &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::ExcDescriptionSeq_var::operator ::CORBA::ExcDescriptionSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDescription &
CORBA::ExcDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const CORBA::ExceptionDescription &
CORBA::ExcDescriptionSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::ExceptionDescription &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::CORBA::ExcDescriptionSeq &
CORBA::ExcDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::ExcDescriptionSeq &
CORBA::ExcDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::ExcDescriptionSeq *&
CORBA::ExcDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::CORBA::ExcDescriptionSeq *
CORBA::ExcDescriptionSeq_var::_retn (void)
{
  ::CORBA::ExcDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::CORBA::ExcDescriptionSeq *
CORBA::ExcDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class CORBA::ExcDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA::ExcDescriptionSeq_out::ExcDescriptionSeq_out (ExcDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExcDescriptionSeq_out::ExcDescriptionSeq_out (ExcDescriptionSeq_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ExcDescriptionSeq_out::ExcDescriptionSeq_out (const ::CORBA::ExcDescriptionSeq_out &p)
  : ptr_ (ACE_const_cast (ExcDescriptionSeq_out&, p).ptr_)
{}

ACE_INLINE
::CORBA::ExcDescriptionSeq_out &
CORBA::ExcDescriptionSeq_out::operator= (const ::CORBA::ExcDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (ExcDescriptionSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::CORBA::ExcDescriptionSeq_out &
CORBA::ExcDescriptionSeq_out::operator= (ExcDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA::ExcDescriptionSeq_out::operator ::CORBA::ExcDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ExcDescriptionSeq *&
CORBA::ExcDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ExcDescriptionSeq *
CORBA::ExcDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ExceptionDescription &
CORBA::ExcDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_ATTRIBUTEDEF___CI_)
#define _CORBA_ATTRIBUTEDEF___CI_

ACE_INLINE
CORBA::AttributeDef::AttributeDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_AttributeDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::AttributeDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class CORBA::AttributeDescription_var
// *************************************************************

ACE_INLINE
CORBA::AttributeDescription_var::AttributeDescription_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::AttributeDescription_var::AttributeDescription_var (AttributeDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::AttributeDescription_var::AttributeDescription_var (const ::CORBA::AttributeDescription_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::AttributeDescription (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::AttributeDescription_var::~AttributeDescription_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::AttributeDescription_var &
CORBA::AttributeDescription_var::operator= (AttributeDescription *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::CORBA::AttributeDescription_var &
CORBA::AttributeDescription_var::operator= (const ::CORBA::AttributeDescription_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          AttributeDescription *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              AttributeDescription (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              AttributeDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA::AttributeDescription *
CORBA::AttributeDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::AttributeDescription *
CORBA::AttributeDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::AttributeDescription_var::operator const ::CORBA::AttributeDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::AttributeDescription_var::operator ::CORBA::AttributeDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::AttributeDescription_var::operator ::CORBA::AttributeDescription &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::AttributeDescription_var::operator ::CORBA::AttributeDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA::AttributeDescription &
CORBA::AttributeDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA::AttributeDescription &
CORBA::AttributeDescription_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::CORBA::AttributeDescription *&
CORBA::AttributeDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA::AttributeDescription *
CORBA::AttributeDescription_var::_retn (void)
{
  ::CORBA::AttributeDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA::AttributeDescription *
CORBA::AttributeDescription_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class CORBA::AttributeDescription_out
// *************************************************************

ACE_INLINE
CORBA::AttributeDescription_out::AttributeDescription_out (::CORBA::AttributeDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::AttributeDescription_out::AttributeDescription_out (AttributeDescription_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::AttributeDescription_out::AttributeDescription_out (const ::CORBA::AttributeDescription_out &p)
  : ptr_ (ACE_const_cast (AttributeDescription_out&, p).ptr_)
{}

ACE_INLINE
CORBA::AttributeDescription_out &
CORBA::AttributeDescription_out::operator= (const ::CORBA::AttributeDescription_out &p)
{
  this->ptr_ = ACE_const_cast (AttributeDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE
CORBA::AttributeDescription_out &
CORBA::AttributeDescription_out::operator= (AttributeDescription *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
CORBA::AttributeDescription_out::operator ::CORBA::AttributeDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::AttributeDescription *&
CORBA::AttributeDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::AttributeDescription *
CORBA::AttributeDescription_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class CORBA::ParameterDescription_var
// *************************************************************

ACE_INLINE
CORBA::ParameterDescription_var::ParameterDescription_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ParameterDescription_var::ParameterDescription_var (ParameterDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ParameterDescription_var::ParameterDescription_var (const ::CORBA::ParameterDescription_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::ParameterDescription (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::ParameterDescription_var::~ParameterDescription_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::ParameterDescription_var &
CORBA::ParameterDescription_var::operator= (ParameterDescription *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::CORBA::ParameterDescription_var &
CORBA::ParameterDescription_var::operator= (const ::CORBA::ParameterDescription_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ParameterDescription *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ParameterDescription (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ParameterDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA::ParameterDescription *
CORBA::ParameterDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ParameterDescription *
CORBA::ParameterDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ParameterDescription_var::operator const ::CORBA::ParameterDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ParameterDescription_var::operator ::CORBA::ParameterDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ParameterDescription_var::operator ::CORBA::ParameterDescription &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::ParameterDescription_var::operator ::CORBA::ParameterDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA::ParameterDescription &
CORBA::ParameterDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA::ParameterDescription &
CORBA::ParameterDescription_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::CORBA::ParameterDescription *&
CORBA::ParameterDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA::ParameterDescription *
CORBA::ParameterDescription_var::_retn (void)
{
  ::CORBA::ParameterDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA::ParameterDescription *
CORBA::ParameterDescription_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class CORBA::ParameterDescription_out
// *************************************************************

ACE_INLINE
CORBA::ParameterDescription_out::ParameterDescription_out (::CORBA::ParameterDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ParameterDescription_out::ParameterDescription_out (ParameterDescription_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ParameterDescription_out::ParameterDescription_out (const ::CORBA::ParameterDescription_out &p)
  : ptr_ (ACE_const_cast (ParameterDescription_out&, p).ptr_)
{}

ACE_INLINE
CORBA::ParameterDescription_out &
CORBA::ParameterDescription_out::operator= (const ::CORBA::ParameterDescription_out &p)
{
  this->ptr_ = ACE_const_cast (ParameterDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE
CORBA::ParameterDescription_out &
CORBA::ParameterDescription_out::operator= (ParameterDescription *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
CORBA::ParameterDescription_out::operator ::CORBA::ParameterDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ParameterDescription *&
CORBA::ParameterDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::ParameterDescription *
CORBA::ParameterDescription_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ci.cpp:99

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_PARDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_PARDESCRIPTIONSEQ_CI_

ACE_INLINE
CORBA::ParameterDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (CORBA::ULong size)
{
  CORBA::ParameterDescription *retval = 0;
  ACE_NEW_RETURN (retval, CORBA::ParameterDescription[size], 0);
  return retval;
}

ACE_INLINE
void CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::freebuf (CORBA::ParameterDescription *buffer)
{
  delete [] buffer;
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (void)
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (CORBA::ULong maximum) 
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (maximum))
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (
    CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::ParameterDescription *data,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq (
    const _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      CORBA::ParameterDescription *tmp1 =
        _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (this->maximum_);
      CORBA::ParameterDescription * const tmp2 =
        ACE_reinterpret_cast (CORBA::ParameterDescription * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp1[i] = tmp2[i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq &
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::operator= (
    const _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
        {
          // Free the old buffer.
          CORBA::ParameterDescription *tmp =
            ACE_reinterpret_cast (CORBA::ParameterDescription *, this->buffer_);
          
          _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::freebuf (tmp);
          
          this->buffer_ =
            _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  CORBA::ParameterDescription *tmp1 =
    ACE_reinterpret_cast (CORBA::ParameterDescription *, this->buffer_);
  CORBA::ParameterDescription * const tmp2 =
    ACE_reinterpret_cast (CORBA::ParameterDescription * ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp1[i] = tmp2[i];
    }
  
  return *this;
}

// = Accessors.
ACE_INLINE
CORBA::ParameterDescription &
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::operator[] (CORBA::ULong i)
{
  ACE_ASSERT (i < this->maximum_);
  CORBA::ParameterDescription* tmp =
    ACE_reinterpret_cast (CORBA::ParameterDescription*, this->buffer_);
  return tmp[i];
}

ACE_INLINE
const CORBA::ParameterDescription &
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::operator[] (CORBA::ULong i) const
{
  ACE_ASSERT (i < this->maximum_);
  CORBA::ParameterDescription * const tmp =
    ACE_reinterpret_cast (CORBA::ParameterDescription* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE
CORBA::ParameterDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::get_buffer (CORBA::Boolean orphan)
{
  CORBA::ParameterDescription *result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::allocbuf (this->length_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (CORBA::ParameterDescription*, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(CORBA::ParameterDescription*,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const CORBA::ParameterDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::get_buffer (void) const
{
  return ACE_reinterpret_cast (const CORBA::ParameterDescription * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE
void
CORBA::_TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::replace (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::ParameterDescription *data,
    CORBA::Boolean release
  )
{
  this->maximum_ = max;
  this->length_ = length;
  
  if (this->buffer_ && this->release_ == 1)
    {
      CORBA::ParameterDescription *tmp =
        ACE_reinterpret_cast (CORBA::ParameterDescription*, this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_ParDescriptionSeq::freebuf (tmp);
    }
  
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_PARDESCRIPTIONSEQ_CI_)
#define _CORBA_PARDESCRIPTIONSEQ_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class CORBA::ParDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA::ParDescriptionSeq_var::ParDescriptionSeq_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ParDescriptionSeq_var::ParDescriptionSeq_var (ParDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ParDescriptionSeq_var::ParDescriptionSeq_var (const ::CORBA::ParDescriptionSeq_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::ParDescriptionSeq (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::ParDescriptionSeq_var::~ParDescriptionSeq_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::ParDescriptionSeq_var &
CORBA::ParDescriptionSeq_var::operator= (ParDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::CORBA::ParDescriptionSeq_var &
CORBA::ParDescriptionSeq_var::operator= (const ::CORBA::ParDescriptionSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ParDescriptionSeq *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ParDescriptionSeq (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ParDescriptionSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::CORBA::ParDescriptionSeq *
CORBA::ParDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ParDescriptionSeq *
CORBA::ParDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ParDescriptionSeq_var::operator const ::CORBA::ParDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ParDescriptionSeq_var::operator ::CORBA::ParDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ParDescriptionSeq_var::operator ::CORBA::ParDescriptionSeq &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::ParDescriptionSeq_var::operator ::CORBA::ParDescriptionSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ParameterDescription &
CORBA::ParDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const CORBA::ParameterDescription &
CORBA::ParDescriptionSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::ParameterDescription &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::CORBA::ParDescriptionSeq &
CORBA::ParDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::ParDescriptionSeq &
CORBA::ParDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::ParDescriptionSeq *&
CORBA::ParDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::CORBA::ParDescriptionSeq *
CORBA::ParDescriptionSeq_var::_retn (void)
{
  ::CORBA::ParDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::CORBA::ParDescriptionSeq *
CORBA::ParDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class CORBA::ParDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA::ParDescriptionSeq_out::ParDescriptionSeq_out (ParDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ParDescriptionSeq_out::ParDescriptionSeq_out (ParDescriptionSeq_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ParDescriptionSeq_out::ParDescriptionSeq_out (const ::CORBA::ParDescriptionSeq_out &p)
  : ptr_ (ACE_const_cast (ParDescriptionSeq_out&, p).ptr_)
{}

ACE_INLINE
::CORBA::ParDescriptionSeq_out &
CORBA::ParDescriptionSeq_out::operator= (const ::CORBA::ParDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (ParDescriptionSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::CORBA::ParDescriptionSeq_out &
CORBA::ParDescriptionSeq_out::operator= (ParDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA::ParDescriptionSeq_out::operator ::CORBA::ParDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ParDescriptionSeq *&
CORBA::ParDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ParDescriptionSeq *
CORBA::ParDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ParameterDescription &
CORBA::ParDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

#if !defined (_CORBA_CONTEXTIDSEQ_CI_)
#define _CORBA_CONTEXTIDSEQ_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class CORBA::ContextIdSeq_var
// *************************************************************

ACE_INLINE
CORBA::ContextIdSeq_var::ContextIdSeq_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::ContextIdSeq_var::ContextIdSeq_var (ContextIdSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::ContextIdSeq_var::ContextIdSeq_var (const ::CORBA::ContextIdSeq_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::ContextIdSeq (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::ContextIdSeq_var::~ContextIdSeq_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::ContextIdSeq_var &
CORBA::ContextIdSeq_var::operator= (ContextIdSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::CORBA::ContextIdSeq_var &
CORBA::ContextIdSeq_var::operator= (const ::CORBA::ContextIdSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          ContextIdSeq *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              ContextIdSeq (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              ContextIdSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::CORBA::ContextIdSeq *
CORBA::ContextIdSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ContextIdSeq *
CORBA::ContextIdSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::ContextIdSeq_var::operator const ::CORBA::ContextIdSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ContextIdSeq_var::operator ::CORBA::ContextIdSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::ContextIdSeq_var::operator ::CORBA::ContextIdSeq &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::ContextIdSeq_var::operator ::CORBA::ContextIdSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_SeqElem_String_Manager
CORBA::ContextIdSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::CORBA::ContextIdSeq &
CORBA::ContextIdSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::ContextIdSeq &
CORBA::ContextIdSeq_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::ContextIdSeq *&
CORBA::ContextIdSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::CORBA::ContextIdSeq *
CORBA::ContextIdSeq_var::_retn (void)
{
  ::CORBA::ContextIdSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::CORBA::ContextIdSeq *
CORBA::ContextIdSeq_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class CORBA::ContextIdSeq_out
// *************************************************************

ACE_INLINE
CORBA::ContextIdSeq_out::ContextIdSeq_out (ContextIdSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ContextIdSeq_out::ContextIdSeq_out (ContextIdSeq_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::ContextIdSeq_out::ContextIdSeq_out (const ::CORBA::ContextIdSeq_out &p)
  : ptr_ (ACE_const_cast (ContextIdSeq_out&, p).ptr_)
{}

ACE_INLINE
::CORBA::ContextIdSeq_out &
CORBA::ContextIdSeq_out::operator= (const ::CORBA::ContextIdSeq_out &p)
{
  this->ptr_ = ACE_const_cast (ContextIdSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::CORBA::ContextIdSeq_out &
CORBA::ContextIdSeq_out::operator= (ContextIdSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA::ContextIdSeq_out::operator ::CORBA::ContextIdSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ContextIdSeq *&
CORBA::ContextIdSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::ContextIdSeq *
CORBA::ContextIdSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_SeqElem_String_Manager
CORBA::ContextIdSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_OPERATIONDEF___CI_)
#define _CORBA_OPERATIONDEF___CI_

ACE_INLINE
CORBA::OperationDef::OperationDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_OperationDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::OperationDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class CORBA::OperationDescription_var
// *************************************************************

ACE_INLINE
CORBA::OperationDescription_var::OperationDescription_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::OperationDescription_var::OperationDescription_var (OperationDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::OperationDescription_var::OperationDescription_var (const ::CORBA::OperationDescription_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::OperationDescription (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::OperationDescription_var::~OperationDescription_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::OperationDescription_var &
CORBA::OperationDescription_var::operator= (OperationDescription *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::CORBA::OperationDescription_var &
CORBA::OperationDescription_var::operator= (const ::CORBA::OperationDescription_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          OperationDescription *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              OperationDescription (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              OperationDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA::OperationDescription *
CORBA::OperationDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::OperationDescription *
CORBA::OperationDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::OperationDescription_var::operator const ::CORBA::OperationDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::OperationDescription_var::operator ::CORBA::OperationDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::OperationDescription_var::operator ::CORBA::OperationDescription &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::OperationDescription_var::operator ::CORBA::OperationDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA::OperationDescription &
CORBA::OperationDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA::OperationDescription &
CORBA::OperationDescription_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::CORBA::OperationDescription *&
CORBA::OperationDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA::OperationDescription *
CORBA::OperationDescription_var::_retn (void)
{
  ::CORBA::OperationDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA::OperationDescription *
CORBA::OperationDescription_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class CORBA::OperationDescription_out
// *************************************************************

ACE_INLINE
CORBA::OperationDescription_out::OperationDescription_out (::CORBA::OperationDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::OperationDescription_out::OperationDescription_out (OperationDescription_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::OperationDescription_out::OperationDescription_out (const ::CORBA::OperationDescription_out &p)
  : ptr_ (ACE_const_cast (OperationDescription_out&, p).ptr_)
{}

ACE_INLINE
CORBA::OperationDescription_out &
CORBA::OperationDescription_out::operator= (const ::CORBA::OperationDescription_out &p)
{
  this->ptr_ = ACE_const_cast (OperationDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE
CORBA::OperationDescription_out &
CORBA::OperationDescription_out::operator= (OperationDescription *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
CORBA::OperationDescription_out::operator ::CORBA::OperationDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::OperationDescription *&
CORBA::OperationDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::OperationDescription *
CORBA::OperationDescription_out::operator-> (void)
{
  return this->ptr_;
}

#if !defined (_CORBA_REPOSITORYIDSEQ_CI_)
#define _CORBA_REPOSITORYIDSEQ_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class CORBA::RepositoryIdSeq_var
// *************************************************************

ACE_INLINE
CORBA::RepositoryIdSeq_var::RepositoryIdSeq_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::RepositoryIdSeq_var::RepositoryIdSeq_var (RepositoryIdSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::RepositoryIdSeq_var::RepositoryIdSeq_var (const ::CORBA::RepositoryIdSeq_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::RepositoryIdSeq (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::RepositoryIdSeq_var::~RepositoryIdSeq_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::RepositoryIdSeq_var &
CORBA::RepositoryIdSeq_var::operator= (RepositoryIdSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::CORBA::RepositoryIdSeq_var &
CORBA::RepositoryIdSeq_var::operator= (const ::CORBA::RepositoryIdSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          RepositoryIdSeq *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              RepositoryIdSeq (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              RepositoryIdSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::CORBA::RepositoryIdSeq *
CORBA::RepositoryIdSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::RepositoryIdSeq *
CORBA::RepositoryIdSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::RepositoryIdSeq_var::operator const ::CORBA::RepositoryIdSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::RepositoryIdSeq_var::operator ::CORBA::RepositoryIdSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::RepositoryIdSeq_var::operator ::CORBA::RepositoryIdSeq &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::RepositoryIdSeq_var::operator ::CORBA::RepositoryIdSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_SeqElem_String_Manager
CORBA::RepositoryIdSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::CORBA::RepositoryIdSeq &
CORBA::RepositoryIdSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::RepositoryIdSeq &
CORBA::RepositoryIdSeq_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::RepositoryIdSeq *&
CORBA::RepositoryIdSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::CORBA::RepositoryIdSeq *
CORBA::RepositoryIdSeq_var::_retn (void)
{
  ::CORBA::RepositoryIdSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::CORBA::RepositoryIdSeq *
CORBA::RepositoryIdSeq_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class CORBA::RepositoryIdSeq_out
// *************************************************************

ACE_INLINE
CORBA::RepositoryIdSeq_out::RepositoryIdSeq_out (RepositoryIdSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::RepositoryIdSeq_out::RepositoryIdSeq_out (RepositoryIdSeq_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::RepositoryIdSeq_out::RepositoryIdSeq_out (const ::CORBA::RepositoryIdSeq_out &p)
  : ptr_ (ACE_const_cast (RepositoryIdSeq_out&, p).ptr_)
{}

ACE_INLINE
::CORBA::RepositoryIdSeq_out &
CORBA::RepositoryIdSeq_out::operator= (const ::CORBA::RepositoryIdSeq_out &p)
{
  this->ptr_ = ACE_const_cast (RepositoryIdSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::CORBA::RepositoryIdSeq_out &
CORBA::RepositoryIdSeq_out::operator= (RepositoryIdSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA::RepositoryIdSeq_out::operator ::CORBA::RepositoryIdSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::RepositoryIdSeq *&
CORBA::RepositoryIdSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::RepositoryIdSeq *
CORBA::RepositoryIdSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_SeqElem_String_Manager
CORBA::RepositoryIdSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ci.cpp:99

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_OPDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_OPDESCRIPTIONSEQ_CI_

ACE_INLINE
CORBA::OperationDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (CORBA::ULong size)
{
  CORBA::OperationDescription *retval = 0;
  ACE_NEW_RETURN (retval, CORBA::OperationDescription[size], 0);
  return retval;
}

ACE_INLINE
void CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::freebuf (CORBA::OperationDescription *buffer)
{
  delete [] buffer;
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (void)
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (CORBA::ULong maximum) 
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (maximum))
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (
    CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::OperationDescription *data,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq (
    const _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      CORBA::OperationDescription *tmp1 =
        _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (this->maximum_);
      CORBA::OperationDescription * const tmp2 =
        ACE_reinterpret_cast (CORBA::OperationDescription * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp1[i] = tmp2[i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq &
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::operator= (
    const _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
        {
          // Free the old buffer.
          CORBA::OperationDescription *tmp =
            ACE_reinterpret_cast (CORBA::OperationDescription *, this->buffer_);
          
          _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::freebuf (tmp);
          
          this->buffer_ =
            _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  CORBA::OperationDescription *tmp1 =
    ACE_reinterpret_cast (CORBA::OperationDescription *, this->buffer_);
  CORBA::OperationDescription * const tmp2 =
    ACE_reinterpret_cast (CORBA::OperationDescription * ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp1[i] = tmp2[i];
    }
  
  return *this;
}

// = Accessors.
ACE_INLINE
CORBA::OperationDescription &
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::operator[] (CORBA::ULong i)
{
  ACE_ASSERT (i < this->maximum_);
  CORBA::OperationDescription* tmp =
    ACE_reinterpret_cast (CORBA::OperationDescription*, this->buffer_);
  return tmp[i];
}

ACE_INLINE
const CORBA::OperationDescription &
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::operator[] (CORBA::ULong i) const
{
  ACE_ASSERT (i < this->maximum_);
  CORBA::OperationDescription * const tmp =
    ACE_reinterpret_cast (CORBA::OperationDescription* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE
CORBA::OperationDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::get_buffer (CORBA::Boolean orphan)
{
  CORBA::OperationDescription *result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::allocbuf (this->length_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (CORBA::OperationDescription*, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(CORBA::OperationDescription*,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const CORBA::OperationDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::get_buffer (void) const
{
  return ACE_reinterpret_cast (const CORBA::OperationDescription * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE
void
CORBA::_TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::replace (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::OperationDescription *data,
    CORBA::Boolean release
  )
{
  this->maximum_ = max;
  this->length_ = length;
  
  if (this->buffer_ && this->release_ == 1)
    {
      CORBA::OperationDescription *tmp =
        ACE_reinterpret_cast (CORBA::OperationDescription*, this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_OpDescriptionSeq::freebuf (tmp);
    }
  
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_OPDESCRIPTIONSEQ_CI_)
#define _CORBA_OPDESCRIPTIONSEQ_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class CORBA::OpDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA::OpDescriptionSeq_var::OpDescriptionSeq_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::OpDescriptionSeq_var::OpDescriptionSeq_var (OpDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::OpDescriptionSeq_var::OpDescriptionSeq_var (const ::CORBA::OpDescriptionSeq_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::OpDescriptionSeq (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::OpDescriptionSeq_var::~OpDescriptionSeq_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::OpDescriptionSeq_var &
CORBA::OpDescriptionSeq_var::operator= (OpDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::CORBA::OpDescriptionSeq_var &
CORBA::OpDescriptionSeq_var::operator= (const ::CORBA::OpDescriptionSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          OpDescriptionSeq *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              OpDescriptionSeq (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              OpDescriptionSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::CORBA::OpDescriptionSeq *
CORBA::OpDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::OpDescriptionSeq *
CORBA::OpDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::OpDescriptionSeq_var::operator const ::CORBA::OpDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::OpDescriptionSeq_var::operator ::CORBA::OpDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::OpDescriptionSeq_var::operator ::CORBA::OpDescriptionSeq &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::OpDescriptionSeq_var::operator ::CORBA::OpDescriptionSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
CORBA::OperationDescription &
CORBA::OpDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const CORBA::OperationDescription &
CORBA::OpDescriptionSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::OperationDescription &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::CORBA::OpDescriptionSeq &
CORBA::OpDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::OpDescriptionSeq &
CORBA::OpDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::OpDescriptionSeq *&
CORBA::OpDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::CORBA::OpDescriptionSeq *
CORBA::OpDescriptionSeq_var::_retn (void)
{
  ::CORBA::OpDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::CORBA::OpDescriptionSeq *
CORBA::OpDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class CORBA::OpDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA::OpDescriptionSeq_out::OpDescriptionSeq_out (OpDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::OpDescriptionSeq_out::OpDescriptionSeq_out (OpDescriptionSeq_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::OpDescriptionSeq_out::OpDescriptionSeq_out (const ::CORBA::OpDescriptionSeq_out &p)
  : ptr_ (ACE_const_cast (OpDescriptionSeq_out&, p).ptr_)
{}

ACE_INLINE
::CORBA::OpDescriptionSeq_out &
CORBA::OpDescriptionSeq_out::operator= (const ::CORBA::OpDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (OpDescriptionSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::CORBA::OpDescriptionSeq_out &
CORBA::OpDescriptionSeq_out::operator= (OpDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA::OpDescriptionSeq_out::operator ::CORBA::OpDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::OpDescriptionSeq *&
CORBA::OpDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::OpDescriptionSeq *
CORBA::OpDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::OperationDescription &
CORBA::OpDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/gen_unbounded_sequence_ci.cpp:99

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_ATTRDESCRIPTIONSEQ_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_CORBA_ATTRDESCRIPTIONSEQ_CI_

ACE_INLINE
CORBA::AttributeDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (CORBA::ULong size)
{
  CORBA::AttributeDescription *retval = 0;
  ACE_NEW_RETURN (retval, CORBA::AttributeDescription[size], 0);
  return retval;
}

ACE_INLINE
void CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::freebuf (CORBA::AttributeDescription *buffer)
{
  delete [] buffer;
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (void)
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (CORBA::ULong maximum) 
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (maximum))
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (
    CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::AttributeDescription *data,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq (
    const _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      CORBA::AttributeDescription *tmp1 =
        _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (this->maximum_);
      CORBA::AttributeDescription * const tmp2 =
        ACE_reinterpret_cast (CORBA::AttributeDescription * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp1[i] = tmp2[i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq &
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::operator= (
    const _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
        {
          // Free the old buffer.
          CORBA::AttributeDescription *tmp =
            ACE_reinterpret_cast (CORBA::AttributeDescription *, this->buffer_);
          
          _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::freebuf (tmp);
          
          this->buffer_ =
            _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  CORBA::AttributeDescription *tmp1 =
    ACE_reinterpret_cast (CORBA::AttributeDescription *, this->buffer_);
  CORBA::AttributeDescription * const tmp2 =
    ACE_reinterpret_cast (CORBA::AttributeDescription * ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp1[i] = tmp2[i];
    }
  
  return *this;
}

// = Accessors.
ACE_INLINE
CORBA::AttributeDescription &
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::operator[] (CORBA::ULong i)
{
  ACE_ASSERT (i < this->maximum_);
  CORBA::AttributeDescription* tmp =
    ACE_reinterpret_cast (CORBA::AttributeDescription*, this->buffer_);
  return tmp[i];
}

ACE_INLINE
const CORBA::AttributeDescription &
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::operator[] (CORBA::ULong i) const
{
  ACE_ASSERT (i < this->maximum_);
  CORBA::AttributeDescription * const tmp =
    ACE_reinterpret_cast (CORBA::AttributeDescription* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE
CORBA::AttributeDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::get_buffer (CORBA::Boolean orphan)
{
  CORBA::AttributeDescription *result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::allocbuf (this->length_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (CORBA::AttributeDescription*, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(CORBA::AttributeDescription*,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const CORBA::AttributeDescription *
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::get_buffer (void) const
{
  return ACE_reinterpret_cast (const CORBA::AttributeDescription * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE
void
CORBA::_TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::replace (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::AttributeDescription *data,
    CORBA::Boolean release
  )
{
  this->maximum_ = max;
  this->length_ = length;
  
  if (this->buffer_ && this->release_ == 1)
    {
      CORBA::AttributeDescription *tmp =
        ACE_reinterpret_cast (CORBA::AttributeDescription*, this->buffer_);
      _TAO_Unbounded_Sequence_CORBA_AttrDescriptionSeq::freebuf (tmp);
    }
  
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_CORBA_ATTRDESCRIPTIONSEQ_CI_)
#define _CORBA_ATTRDESCRIPTIONSEQ_CI_

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class CORBA::AttrDescriptionSeq_var
// *************************************************************

ACE_INLINE
CORBA::AttrDescriptionSeq_var::AttrDescriptionSeq_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::AttrDescriptionSeq_var::AttrDescriptionSeq_var (AttrDescriptionSeq *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::AttrDescriptionSeq_var::AttrDescriptionSeq_var (const ::CORBA::AttrDescriptionSeq_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::AttrDescriptionSeq (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::AttrDescriptionSeq_var::~AttrDescriptionSeq_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::AttrDescriptionSeq_var &
CORBA::AttrDescriptionSeq_var::operator= (AttrDescriptionSeq *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::CORBA::AttrDescriptionSeq_var &
CORBA::AttrDescriptionSeq_var::operator= (const ::CORBA::AttrDescriptionSeq_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          AttrDescriptionSeq *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              AttrDescriptionSeq (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              AttrDescriptionSeq *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::CORBA::AttrDescriptionSeq *
CORBA::AttrDescriptionSeq_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::AttrDescriptionSeq *
CORBA::AttrDescriptionSeq_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::AttrDescriptionSeq_var::operator const ::CORBA::AttrDescriptionSeq &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::AttrDescriptionSeq_var::operator ::CORBA::AttrDescriptionSeq &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::AttrDescriptionSeq_var::operator ::CORBA::AttrDescriptionSeq &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::AttrDescriptionSeq_var::operator ::CORBA::AttrDescriptionSeq *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
CORBA::AttributeDescription &
CORBA::AttrDescriptionSeq_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const CORBA::AttributeDescription &
CORBA::AttrDescriptionSeq_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::AttributeDescription &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::CORBA::AttrDescriptionSeq &
CORBA::AttrDescriptionSeq_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::AttrDescriptionSeq &
CORBA::AttrDescriptionSeq_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::CORBA::AttrDescriptionSeq *&
CORBA::AttrDescriptionSeq_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::CORBA::AttrDescriptionSeq *
CORBA::AttrDescriptionSeq_var::_retn (void)
{
  ::CORBA::AttrDescriptionSeq *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::CORBA::AttrDescriptionSeq *
CORBA::AttrDescriptionSeq_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class CORBA::AttrDescriptionSeq_out
// *************************************************************

ACE_INLINE
CORBA::AttrDescriptionSeq_out::AttrDescriptionSeq_out (AttrDescriptionSeq *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::AttrDescriptionSeq_out::AttrDescriptionSeq_out (AttrDescriptionSeq_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::AttrDescriptionSeq_out::AttrDescriptionSeq_out (const ::CORBA::AttrDescriptionSeq_out &p)
  : ptr_ (ACE_const_cast (AttrDescriptionSeq_out&, p).ptr_)
{}

ACE_INLINE
::CORBA::AttrDescriptionSeq_out &
CORBA::AttrDescriptionSeq_out::operator= (const ::CORBA::AttrDescriptionSeq_out &p)
{
  this->ptr_ = ACE_const_cast (AttrDescriptionSeq_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::CORBA::AttrDescriptionSeq_out &
CORBA::AttrDescriptionSeq_out::operator= (AttrDescriptionSeq *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
CORBA::AttrDescriptionSeq_out::operator ::CORBA::AttrDescriptionSeq *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::AttrDescriptionSeq *&
CORBA::AttrDescriptionSeq_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::CORBA::AttrDescriptionSeq *
CORBA::AttrDescriptionSeq_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::AttributeDescription &
CORBA::AttrDescriptionSeq_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class CORBA::InterfaceDef::FullInterfaceDescription_var
// *************************************************************

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::FullInterfaceDescription_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::FullInterfaceDescription_var (FullInterfaceDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::FullInterfaceDescription_var (const ::CORBA::InterfaceDef::FullInterfaceDescription_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::InterfaceDef::FullInterfaceDescription (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::~FullInterfaceDescription_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var &
CORBA::InterfaceDef::FullInterfaceDescription_var::operator= (FullInterfaceDescription *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::CORBA::InterfaceDef::FullInterfaceDescription_var &
CORBA::InterfaceDef::FullInterfaceDescription_var::operator= (const ::CORBA::InterfaceDef::FullInterfaceDescription_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          FullInterfaceDescription *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              FullInterfaceDescription (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              FullInterfaceDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::operator const ::CORBA::InterfaceDef::FullInterfaceDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::operator ::CORBA::InterfaceDef::FullInterfaceDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::operator ::CORBA::InterfaceDef::FullInterfaceDescription &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_var::operator ::CORBA::InterfaceDef::FullInterfaceDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA::InterfaceDef::FullInterfaceDescription &
CORBA::InterfaceDef::FullInterfaceDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription &
CORBA::InterfaceDef::FullInterfaceDescription_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *&
CORBA::InterfaceDef::FullInterfaceDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::_retn (void)
{
  ::CORBA::InterfaceDef::FullInterfaceDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class CORBA::InterfaceDef::FullInterfaceDescription_out
// *************************************************************

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out::FullInterfaceDescription_out (::CORBA::InterfaceDef::FullInterfaceDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out::FullInterfaceDescription_out (FullInterfaceDescription_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out::FullInterfaceDescription_out (const ::CORBA::InterfaceDef::FullInterfaceDescription_out &p)
  : ptr_ (ACE_const_cast (FullInterfaceDescription_out&, p).ptr_)
{}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out &
CORBA::InterfaceDef::FullInterfaceDescription_out::operator= (const ::CORBA::InterfaceDef::FullInterfaceDescription_out &p)
{
  this->ptr_ = ACE_const_cast (FullInterfaceDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE
CORBA::InterfaceDef::FullInterfaceDescription_out &
CORBA::InterfaceDef::FullInterfaceDescription_out::operator= (FullInterfaceDescription *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
CORBA::InterfaceDef::FullInterfaceDescription_out::operator ::CORBA::InterfaceDef::FullInterfaceDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *&
CORBA::InterfaceDef::FullInterfaceDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDef::FullInterfaceDescription *
CORBA::InterfaceDef::FullInterfaceDescription_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_INTERFACEDEF___CI_)
#define _CORBA_INTERFACEDEF___CI_

ACE_INLINE
CORBA::InterfaceDef::InterfaceDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_InterfaceDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::InterfaceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class CORBA::InterfaceDescription_var
// *************************************************************

ACE_INLINE
CORBA::InterfaceDescription_var::InterfaceDescription_var (void)
  : ptr_ (0)
{}

ACE_INLINE
CORBA::InterfaceDescription_var::InterfaceDescription_var (InterfaceDescription *p)
  : ptr_ (p)
{}

ACE_INLINE
CORBA::InterfaceDescription_var::InterfaceDescription_var (const ::CORBA::InterfaceDescription_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::CORBA::InterfaceDescription (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
CORBA::InterfaceDescription_var::~InterfaceDescription_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDescription_var &
CORBA::InterfaceDescription_var::operator= (InterfaceDescription *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::CORBA::InterfaceDescription_var &
CORBA::InterfaceDescription_var::operator= (const ::CORBA::InterfaceDescription_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          InterfaceDescription *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              InterfaceDescription (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              InterfaceDescription *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::CORBA::InterfaceDescription *
CORBA::InterfaceDescription_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDescription *
CORBA::InterfaceDescription_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDescription_var::operator const ::CORBA::InterfaceDescription &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDescription_var::operator ::CORBA::InterfaceDescription &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::InterfaceDescription_var::operator ::CORBA::InterfaceDescription &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
CORBA::InterfaceDescription_var::operator ::CORBA::InterfaceDescription *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE const ::CORBA::InterfaceDescription &
CORBA::InterfaceDescription_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDescription &
CORBA::InterfaceDescription_var::inout (void)
{
  return *this->ptr_;
}

// Mapping for variable size.
ACE_INLINE ::CORBA::InterfaceDescription *&
CORBA::InterfaceDescription_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDescription *
CORBA::InterfaceDescription_var::_retn (void)
{
  ::CORBA::InterfaceDescription *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::CORBA::InterfaceDescription *
CORBA::InterfaceDescription_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:523

// *************************************************************
// Inline operations for class CORBA::InterfaceDescription_out
// *************************************************************

ACE_INLINE
CORBA::InterfaceDescription_out::InterfaceDescription_out (::CORBA::InterfaceDescription *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDescription_out::InterfaceDescription_out (InterfaceDescription_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
CORBA::InterfaceDescription_out::InterfaceDescription_out (const ::CORBA::InterfaceDescription_out &p)
  : ptr_ (ACE_const_cast (InterfaceDescription_out&, p).ptr_)
{}

ACE_INLINE
CORBA::InterfaceDescription_out &
CORBA::InterfaceDescription_out::operator= (const ::CORBA::InterfaceDescription_out &p)
{
  this->ptr_ = ACE_const_cast (InterfaceDescription_out&, p).ptr_;
  return *this;
}

ACE_INLINE
CORBA::InterfaceDescription_out &
CORBA::InterfaceDescription_out::operator= (InterfaceDescription *_tao_struct_out)
{
  this->ptr_ = _tao_struct_out;
  return *this;
}

ACE_INLINE 
CORBA::InterfaceDescription_out::operator ::CORBA::InterfaceDescription *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDescription *&
CORBA::InterfaceDescription_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::CORBA::InterfaceDescription *
CORBA::InterfaceDescription_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_ABSTRACTINTERFACEDEF___CI_)
#define _CORBA_ABSTRACTINTERFACEDEF___CI_

ACE_INLINE
CORBA::AbstractInterfaceDef::AbstractInterfaceDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_AbstractInterfaceDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::AbstractInterfaceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ci.cpp:68

#if !defined (_CORBA_LOCALINTERFACEDEF___CI_)
#define _CORBA_LOCALINTERFACEDEF___CI_

ACE_INLINE
CORBA::LocalInterfaceDef::LocalInterfaceDef (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->CORBA_LocalInterfaceDef_setup_collocation (_tao_collocated);
}

ACE_INLINE
CORBA::Boolean
CORBA::LocalInterfaceDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/cdr_op_ci.cpp:59

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::PrimitiveDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::PrimitiveDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/cdr_op_ci.cpp:59

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::StringDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::StringDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/cdr_op_ci.cpp:59

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::SequenceDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::SequenceDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/cdr_op_ci.cpp:59

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::ArrayDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::ArrayDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/cdr_op_ci.cpp:59

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::WstringDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::WstringDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface_fwd/cdr_op_ci.cpp:59

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::FixedDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::FixedDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/cdr_op_ci.cpp:51

ACE_INLINE
CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::PrimitiveKind &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE
CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::PrimitiveKind &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (CORBA::PrimitiveKind, _tao_temp);
    }
  
  return _tao_result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::Repository_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::Repository_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::ModuleDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::ModuleDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ModuleDescription &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ())
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ModuleDescription &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ())
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::ConstantDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::ConstantDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ConstantDescription &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.value)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ConstantDescription &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.value)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::StructDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::StructDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::UnionDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::UnionDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::EnumDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::EnumDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::AliasDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::AliasDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::NativeDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::NativeDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::ExceptionDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::ExceptionDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ExceptionDescription &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ())
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ExceptionDescription &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ())
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_CORBA_ExceptionDefSeq_I_
#define _TAO_CDR_OP_CORBA_ExceptionDefSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::ExceptionDefSeq &
  );

CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::ExceptionDefSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ExceptionDefSeq_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_CORBA_ExcDescriptionSeq_I_
#define _TAO_CDR_OP_CORBA_ExcDescriptionSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::ExcDescriptionSeq &
  );

CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::ExcDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ExcDescriptionSeq_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/cdr_op_ci.cpp:51

ACE_INLINE
CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::AttributeMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE
CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::AttributeMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (CORBA::AttributeMode, _tao_temp);
    }
  
  return _tao_result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::AttributeDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::AttributeDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::AttributeDescription &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    (strm << _tao_aggregate.mode)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::AttributeDescription &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.mode)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_enum/cdr_op_ci.cpp:51

ACE_INLINE
CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::OperationMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = _tao_enumval;
  return strm << _tao_temp;
}

ACE_INLINE
CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::OperationMode &_tao_enumval)
{
  CORBA::ULong _tao_temp = 0;
  CORBA::Boolean _tao_result = strm >> _tao_temp;
  
  if (_tao_result == 1)
    {
      _tao_enumval = ACE_static_cast (CORBA::OperationMode, _tao_temp);
    }
  
  return _tao_result;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::ParameterDescription &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.type.in ()) &&
    _tao_aggregate.type_def.in ()->marshal (strm) &&
    (strm << _tao_aggregate.mode)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::ParameterDescription &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.type.out ()) &&
    (strm >> _tao_aggregate.type_def.out ()) &&
    (strm >> _tao_aggregate.mode)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_CORBA_ParDescriptionSeq_I_
#define _TAO_CDR_OP_CORBA_ParDescriptionSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::ParDescriptionSeq &
  );

CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::ParDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ParDescriptionSeq_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_CORBA_ContextIdSeq_I_
#define _TAO_CDR_OP_CORBA_ContextIdSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::ContextIdSeq &
  );

CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::ContextIdSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_ContextIdSeq_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::OperationDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::OperationDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::OperationDescription &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.result.in ()) &&
    (strm << _tao_aggregate.mode) &&
    (strm << _tao_aggregate.contexts) &&
    (strm << _tao_aggregate.parameters) &&
    (strm << _tao_aggregate.exceptions)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::OperationDescription &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.result.out ()) &&
    (strm >> _tao_aggregate.mode) &&
    (strm >> _tao_aggregate.contexts) &&
    (strm >> _tao_aggregate.parameters) &&
    (strm >> _tao_aggregate.exceptions)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_CORBA_RepositoryIdSeq_I_
#define _TAO_CDR_OP_CORBA_RepositoryIdSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::RepositoryIdSeq &
  );

CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::RepositoryIdSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_RepositoryIdSeq_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_CORBA_OpDescriptionSeq_I_
#define _TAO_CDR_OP_CORBA_OpDescriptionSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::OpDescriptionSeq &
  );

CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::OpDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_OpDescriptionSeq_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_CORBA_AttrDescriptionSeq_I_
#define _TAO_CDR_OP_CORBA_AttrDescriptionSeq_I_

CORBA::Boolean TAO_IFR_Client_Export operator<< (
    TAO_OutputCDR &,
    const CORBA::AttrDescriptionSeq &
  );

CORBA::Boolean TAO_IFR_Client_Export operator>> (
    TAO_InputCDR &,
    CORBA::AttrDescriptionSeq &
  );

#endif /* _TAO_CDR_OP_CORBA_AttrDescriptionSeq_I_ */

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::InterfaceDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::InterfaceDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::InterfaceDef::FullInterfaceDescription &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.operations) &&
    (strm << _tao_aggregate.attributes) &&
    (strm << _tao_aggregate.base_interfaces) &&
    (strm << _tao_aggregate.type.in ())
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::InterfaceDef::FullInterfaceDescription &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.operations) &&
    (strm >> _tao_aggregate.attributes) &&
    (strm >> _tao_aggregate.base_interfaces) &&
    (strm >> _tao_aggregate.type.out ())
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:71

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBA::InterfaceDescription &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.defined_in.in ()) &&
    (strm << _tao_aggregate.version.in ()) &&
    (strm << _tao_aggregate.base_interfaces)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBA::InterfaceDescription &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.defined_in.out ()) &&
    (strm >> _tao_aggregate.version.out ()) &&
    (strm >> _tao_aggregate.base_interfaces)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::AbstractInterfaceDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::AbstractInterfaceDef_ptr &
  );

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/cdr_op_ci.cpp:72

TAO_IFR_Client_Export CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const CORBA::LocalInterfaceDef_ptr
  );

TAO_IFR_Client_Export CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CORBA::LocalInterfaceDef_ptr &
  );

