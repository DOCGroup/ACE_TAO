// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class TimeBase::UtcT_var
// *************************************************************

ACE_INLINE
TimeBase::UtcT_var::UtcT_var (void)
  : ptr_ (0)
{}

ACE_INLINE
TimeBase::UtcT_var::UtcT_var (UtcT *p)
  : ptr_ (p)
{}

ACE_INLINE
TimeBase::UtcT_var::UtcT_var (const ::TimeBase::UtcT_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::TimeBase::UtcT (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

// Fixed-size types only.
ACE_INLINE
TimeBase::UtcT_var::UtcT_var (const ::TimeBase::UtcT &p)
{
  ACE_NEW (this->ptr_, ::TimeBase::UtcT (p));
}

ACE_INLINE
TimeBase::UtcT_var::~UtcT_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
TimeBase::UtcT_var &
TimeBase::UtcT_var::operator= (UtcT *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::TimeBase::UtcT_var &
TimeBase::UtcT_var::operator= (const ::TimeBase::UtcT_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          UtcT *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              UtcT (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              UtcT *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

// fixed-size types only
ACE_INLINE TimeBase::UtcT_var &
TimeBase::UtcT_var::operator= (const ::TimeBase::UtcT &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (
        this->ptr_,
        ::TimeBase::UtcT (p),
        *this
      );
  }
  
  return *this;
}

ACE_INLINE const ::TimeBase::UtcT *
TimeBase::UtcT_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::TimeBase::UtcT *
TimeBase::UtcT_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TimeBase::UtcT_var::operator const ::TimeBase::UtcT &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
TimeBase::UtcT_var::operator ::TimeBase::UtcT &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
TimeBase::UtcT_var::operator ::TimeBase::UtcT &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE const ::TimeBase::UtcT &
TimeBase::UtcT_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::TimeBase::UtcT &
TimeBase::UtcT_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE ::TimeBase::UtcT &
TimeBase::UtcT_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::TimeBase::UtcT
TimeBase::UtcT_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::TimeBase::UtcT *
TimeBase::UtcT_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_structure.cpp:194

// *************************************************************
// Inline operations for class TimeBase::IntervalT_var
// *************************************************************

ACE_INLINE
TimeBase::IntervalT_var::IntervalT_var (void)
  : ptr_ (0)
{}

ACE_INLINE
TimeBase::IntervalT_var::IntervalT_var (IntervalT *p)
  : ptr_ (p)
{}

ACE_INLINE
TimeBase::IntervalT_var::IntervalT_var (const ::TimeBase::IntervalT_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::TimeBase::IntervalT (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

// Fixed-size types only.
ACE_INLINE
TimeBase::IntervalT_var::IntervalT_var (const ::TimeBase::IntervalT &p)
{
  ACE_NEW (this->ptr_, ::TimeBase::IntervalT (p));
}

ACE_INLINE
TimeBase::IntervalT_var::~IntervalT_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
TimeBase::IntervalT_var &
TimeBase::IntervalT_var::operator= (IntervalT *_tao_struct_var)
{
  delete this->ptr_;
  this->ptr_ = _tao_struct_var;
  return *this;
}

ACE_INLINE
::TimeBase::IntervalT_var &
TimeBase::IntervalT_var::operator= (const ::TimeBase::IntervalT_var &_tao_struct_var)
{
  if (this != &_tao_struct_var)
    {
      if (_tao_struct_var.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          IntervalT *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              IntervalT (*_tao_struct_var.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              IntervalT *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

// fixed-size types only
ACE_INLINE TimeBase::IntervalT_var &
TimeBase::IntervalT_var::operator= (const ::TimeBase::IntervalT &p)
{
  if (this->ptr_ != &p)
  {
    delete this->ptr_;
    ACE_NEW_RETURN (
        this->ptr_,
        ::TimeBase::IntervalT (p),
        *this
      );
  }
  
  return *this;
}

ACE_INLINE const ::TimeBase::IntervalT *
TimeBase::IntervalT_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::TimeBase::IntervalT *
TimeBase::IntervalT_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TimeBase::IntervalT_var::operator const ::TimeBase::IntervalT &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
TimeBase::IntervalT_var::operator ::TimeBase::IntervalT &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
TimeBase::IntervalT_var::operator ::TimeBase::IntervalT &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE const ::TimeBase::IntervalT &
TimeBase::IntervalT_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::TimeBase::IntervalT &
TimeBase::IntervalT_var::inout (void)
{
  return *this->ptr_;
}

// mapping for fixed size 
ACE_INLINE ::TimeBase::IntervalT &
TimeBase::IntervalT_var::out (void)
{
  return *this->ptr_;
}

ACE_INLINE ::TimeBase::IntervalT
TimeBase::IntervalT_var::_retn (void)
{
  return *this->ptr_;
}

ACE_INLINE ::TimeBase::IntervalT *
TimeBase::IntervalT_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:103

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TimeBase::UtcT &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.time) &&
    (strm << _tao_aggregate.inacclo) &&
    (strm << _tao_aggregate.inacchi) &&
    (strm << _tao_aggregate.tdf)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TimeBase::UtcT &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.time) &&
    (strm >> _tao_aggregate.inacclo) &&
    (strm >> _tao_aggregate.inacchi) &&
    (strm >> _tao_aggregate.tdf)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

// TAO_IDL - Generated from
// W:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_structure/cdr_op_ci.cpp:103

ACE_INLINE
CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TimeBase::IntervalT &_tao_aggregate
  )
{
  if (
    (strm << _tao_aggregate.lower_bound) &&
    (strm << _tao_aggregate.upper_bound)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

ACE_INLINE
CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TimeBase::IntervalT &_tao_aggregate
  )
{
  if (
    (strm >> _tao_aggregate.lower_bound) &&
    (strm >> _tao_aggregate.upper_bound)
   )
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

