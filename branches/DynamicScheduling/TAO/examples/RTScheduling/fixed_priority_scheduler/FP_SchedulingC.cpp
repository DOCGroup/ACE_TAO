// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:318


#include "FP_SchedulingC.h"
#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo_i.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "FP_SchedulingC.i"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int FP_Scheduling::SegmentSchedulingParameterPolicy::_tao_class_id = 0;

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
tao_FP_Scheduling_SegmentSchedulingParameterPolicy_duplicate (
    FP_Scheduling::SegmentSchedulingParameterPolicy_ptr p
  )
{
  return FP_Scheduling::SegmentSchedulingParameterPolicy::_duplicate (p);
}

void
tao_FP_Scheduling_SegmentSchedulingParameterPolicy_release (
    FP_Scheduling::SegmentSchedulingParameterPolicy_ptr p
  )
{
  CORBA::release (p);
}

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
tao_FP_Scheduling_SegmentSchedulingParameterPolicy_nil (
    void
  )
{
  return FP_Scheduling::SegmentSchedulingParameterPolicy::_nil ();
}

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
tao_FP_Scheduling_SegmentSchedulingParameterPolicy_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return FP_Scheduling::SegmentSchedulingParameterPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_FP_Scheduling_SegmentSchedulingParameterPolicy_upcast (
    void *src
  )
{
  FP_Scheduling::SegmentSchedulingParameterPolicy **tmp =
    ACE_static_cast (FP_Scheduling::SegmentSchedulingParameterPolicy **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// FP_Scheduling::SegmentSchedulingParameterPolicy_var
// *************************************************************

FP_Scheduling::SegmentSchedulingParameterPolicy_var::SegmentSchedulingParameterPolicy_var (void)
  : ptr_ (SegmentSchedulingParameterPolicy::_nil ())
{}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy_var::ptr (void) const
{
  return this->ptr_;
}

FP_Scheduling::SegmentSchedulingParameterPolicy_var::SegmentSchedulingParameterPolicy_var (const ::FP_Scheduling::SegmentSchedulingParameterPolicy_var &p)
  : TAO_Base_var (),
    ptr_ (SegmentSchedulingParameterPolicy::_duplicate (p.ptr ()))
{}

FP_Scheduling::SegmentSchedulingParameterPolicy_var::~SegmentSchedulingParameterPolicy_var (void)
{
  CORBA::release (this->ptr_);
}

FP_Scheduling::SegmentSchedulingParameterPolicy_var &
FP_Scheduling::SegmentSchedulingParameterPolicy_var::operator= (SegmentSchedulingParameterPolicy_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

FP_Scheduling::SegmentSchedulingParameterPolicy_var &
FP_Scheduling::SegmentSchedulingParameterPolicy_var::operator= (const ::FP_Scheduling::SegmentSchedulingParameterPolicy_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::FP_Scheduling::SegmentSchedulingParameterPolicy::_duplicate (p.ptr ());
  }
  return *this;
}

FP_Scheduling::SegmentSchedulingParameterPolicy_var::operator const ::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr &() const // cast
{
  return this->ptr_;
}

FP_Scheduling::SegmentSchedulingParameterPolicy_var::operator ::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr &() // cast 
{
  return this->ptr_;
}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy_var::operator-> (void) const
{
  return this->ptr_;
}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy_var::in (void) const
{
  return this->ptr_;
}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr &
FP_Scheduling::SegmentSchedulingParameterPolicy_var::inout (void)
{
  return this->ptr_;
}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr &
FP_Scheduling::SegmentSchedulingParameterPolicy_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FP_Scheduling::SegmentSchedulingParameterPolicy::_nil ();
  return this->ptr_;
}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr val = this->ptr_;
  this->ptr_ = ::FP_Scheduling::SegmentSchedulingParameterPolicy::_nil ();
  return val;
}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy_var::tao_duplicate (SegmentSchedulingParameterPolicy_ptr p)
{
  return ::FP_Scheduling::SegmentSchedulingParameterPolicy::_duplicate (p);
}

void
FP_Scheduling::SegmentSchedulingParameterPolicy_var::tao_release (SegmentSchedulingParameterPolicy_ptr p)
{
  CORBA::release (p);
}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy_var::tao_nil (void)
{
  return ::FP_Scheduling::SegmentSchedulingParameterPolicy::_nil ();
}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::FP_Scheduling::SegmentSchedulingParameterPolicy::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
FP_Scheduling::SegmentSchedulingParameterPolicy_var::tao_upcast (void *src)
{
  SegmentSchedulingParameterPolicy **tmp =
    ACE_static_cast (SegmentSchedulingParameterPolicy **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// FP_Scheduling::SegmentSchedulingParameterPolicy_out
// *************************************************************

FP_Scheduling::SegmentSchedulingParameterPolicy_out::SegmentSchedulingParameterPolicy_out (SegmentSchedulingParameterPolicy_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::FP_Scheduling::SegmentSchedulingParameterPolicy::_nil ();
}

FP_Scheduling::SegmentSchedulingParameterPolicy_out::SegmentSchedulingParameterPolicy_out (SegmentSchedulingParameterPolicy_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FP_Scheduling::SegmentSchedulingParameterPolicy::_nil ();
}

FP_Scheduling::SegmentSchedulingParameterPolicy_out::SegmentSchedulingParameterPolicy_out (const ::FP_Scheduling::SegmentSchedulingParameterPolicy_out &p)
  : ptr_ (ACE_const_cast (SegmentSchedulingParameterPolicy_out &, p).ptr_)
{}

::FP_Scheduling::SegmentSchedulingParameterPolicy_out &
FP_Scheduling::SegmentSchedulingParameterPolicy_out::operator= (const ::FP_Scheduling::SegmentSchedulingParameterPolicy_out &p)
{
  this->ptr_ = ACE_const_cast (SegmentSchedulingParameterPolicy_out&, p).ptr_;
  return *this;
}

FP_Scheduling::SegmentSchedulingParameterPolicy_out &
FP_Scheduling::SegmentSchedulingParameterPolicy_out::operator= (const ::FP_Scheduling::SegmentSchedulingParameterPolicy_var &p)
{
  this->ptr_ = ::FP_Scheduling::SegmentSchedulingParameterPolicy::_duplicate (p.ptr ());
  return *this;
}

FP_Scheduling::SegmentSchedulingParameterPolicy_out &
FP_Scheduling::SegmentSchedulingParameterPolicy_out::operator= (SegmentSchedulingParameterPolicy_ptr p)
{
  this->ptr_ = p;
  return *this;
}

FP_Scheduling::SegmentSchedulingParameterPolicy_out::operator ::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr &() // cast
{
  return this->ptr_;
}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr &
FP_Scheduling::SegmentSchedulingParameterPolicy_out::ptr (void)
{
  return this->ptr_;
}

::FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

FP_Scheduling::SegmentSchedulingParameterPolicy::SegmentSchedulingParameterPolicy (void)
{}

FP_Scheduling::SegmentSchedulingParameterPolicy::~SegmentSchedulingParameterPolicy (void)
{}

void 
FP_Scheduling::SegmentSchedulingParameterPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  SegmentSchedulingParameterPolicy *tmp = ACE_static_cast (SegmentSchedulingParameterPolicy *, _tao_void_pointer);
  CORBA::release (tmp);
}

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return SegmentSchedulingParameterPolicy::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr 
FP_Scheduling::SegmentSchedulingParameterPolicy::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return SegmentSchedulingParameterPolicy::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          SegmentSchedulingParameterPolicy_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &SegmentSchedulingParameterPolicy::_tao_class_id
                )
            )
        );
}

FP_Scheduling::SegmentSchedulingParameterPolicy_ptr
FP_Scheduling::SegmentSchedulingParameterPolicy::_duplicate (SegmentSchedulingParameterPolicy_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *FP_Scheduling::SegmentSchedulingParameterPolicy::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::FP_Scheduling, SegmentSchedulingParameterPolicy)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::CORBA::Policy::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                CORBA::Policy_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* FP_Scheduling::SegmentSchedulingParameterPolicy::_interface_repository_id (void) const
{
  return "IDL:FP_Scheduling/SegmentSchedulingParameterPolicy:1.0";
}

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_FP_Scheduling_SegmentSchedulingParameterPolicy[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  55,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x46505f53), 
  ACE_NTOHL (0x63686564), 
  ACE_NTOHL (0x756c696e), 
  ACE_NTOHL (0x672f5365), 
  ACE_NTOHL (0x676d656e), 
  ACE_NTOHL (0x74536368), 
  ACE_NTOHL (0x6564756c), 
  ACE_NTOHL (0x696e6750), 
  ACE_NTOHL (0x6172616d), 
  ACE_NTOHL (0x65746572), 
  ACE_NTOHL (0x506f6c69), 
  ACE_NTOHL (0x63793a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:FP_Scheduling/SegmentSchedulingParameterPolicy:1.0
  33,
  ACE_NTOHL (0x5365676d), 
  ACE_NTOHL (0x656e7453), 
  ACE_NTOHL (0x63686564), 
  ACE_NTOHL (0x756c696e), 
  ACE_NTOHL (0x67506172), 
  ACE_NTOHL (0x616d6574), 
  ACE_NTOHL (0x6572506f), 
  ACE_NTOHL (0x6c696379), 
  ACE_NTOHL (0x0),  // name = SegmentSchedulingParameterPolicy
};

static CORBA::TypeCode _tc_TAO_tc_FP_Scheduling_SegmentSchedulingParameterPolicy (
    CORBA::tk_objref,
    sizeof (_oc_FP_Scheduling_SegmentSchedulingParameterPolicy),
    (char *) &_oc_FP_Scheduling_SegmentSchedulingParameterPolicy,
    0,
    sizeof (FP_Scheduling::SegmentSchedulingParameterPolicy)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (FP_Scheduling)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_SegmentSchedulingParameterPolicy,
    &_tc_TAO_tc_FP_Scheduling_SegmentSchedulingParameterPolicy
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:61

int FP_Scheduling::FP_Scheduler::_tao_class_id = 0;

FP_Scheduling::FP_Scheduler_ptr
tao_FP_Scheduling_FP_Scheduler_duplicate (
    FP_Scheduling::FP_Scheduler_ptr p
  )
{
  return FP_Scheduling::FP_Scheduler::_duplicate (p);
}

void
tao_FP_Scheduling_FP_Scheduler_release (
    FP_Scheduling::FP_Scheduler_ptr p
  )
{
  CORBA::release (p);
}

FP_Scheduling::FP_Scheduler_ptr
tao_FP_Scheduling_FP_Scheduler_nil (
    void
  )
{
  return FP_Scheduling::FP_Scheduler::_nil ();
}

FP_Scheduling::FP_Scheduler_ptr
tao_FP_Scheduling_FP_Scheduler_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return FP_Scheduling::FP_Scheduler::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
tao_FP_Scheduling_FP_Scheduler_upcast (
    void *src
  )
{
  FP_Scheduling::FP_Scheduler **tmp =
    ACE_static_cast (FP_Scheduling::FP_Scheduler **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:721

// *************************************************************
// FP_Scheduling::FP_Scheduler_var
// *************************************************************

FP_Scheduling::FP_Scheduler_var::FP_Scheduler_var (void)
  : ptr_ (FP_Scheduler::_nil ())
{}

::FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler_var::ptr (void) const
{
  return this->ptr_;
}

FP_Scheduling::FP_Scheduler_var::FP_Scheduler_var (const ::FP_Scheduling::FP_Scheduler_var &p)
  : TAO_Base_var (),
    ptr_ (FP_Scheduler::_duplicate (p.ptr ()))
{}

FP_Scheduling::FP_Scheduler_var::~FP_Scheduler_var (void)
{
  CORBA::release (this->ptr_);
}

FP_Scheduling::FP_Scheduler_var &
FP_Scheduling::FP_Scheduler_var::operator= (FP_Scheduler_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

FP_Scheduling::FP_Scheduler_var &
FP_Scheduling::FP_Scheduler_var::operator= (const ::FP_Scheduling::FP_Scheduler_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::FP_Scheduling::FP_Scheduler::_duplicate (p.ptr ());
  }
  return *this;
}

FP_Scheduling::FP_Scheduler_var::operator const ::FP_Scheduling::FP_Scheduler_ptr &() const // cast
{
  return this->ptr_;
}

FP_Scheduling::FP_Scheduler_var::operator ::FP_Scheduling::FP_Scheduler_ptr &() // cast 
{
  return this->ptr_;
}

::FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler_var::operator-> (void) const
{
  return this->ptr_;
}

::FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler_var::in (void) const
{
  return this->ptr_;
}

::FP_Scheduling::FP_Scheduler_ptr &
FP_Scheduling::FP_Scheduler_var::inout (void)
{
  return this->ptr_;
}

::FP_Scheduling::FP_Scheduler_ptr &
FP_Scheduling::FP_Scheduler_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FP_Scheduling::FP_Scheduler::_nil ();
  return this->ptr_;
}

::FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::FP_Scheduling::FP_Scheduler_ptr val = this->ptr_;
  this->ptr_ = ::FP_Scheduling::FP_Scheduler::_nil ();
  return val;
}

::FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler_var::tao_duplicate (FP_Scheduler_ptr p)
{
  return ::FP_Scheduling::FP_Scheduler::_duplicate (p);
}

void
FP_Scheduling::FP_Scheduler_var::tao_release (FP_Scheduler_ptr p)
{
  CORBA::release (p);
}

::FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler_var::tao_nil (void)
{
  return ::FP_Scheduling::FP_Scheduler::_nil ();
}

::FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler_var::tao_narrow (
    CORBA::Object *p
    ACE_ENV_ARG_DECL
  )
{
  return ::FP_Scheduling::FP_Scheduler::_narrow (p ACE_ENV_ARG_PARAMETER);
}

CORBA::Object *
FP_Scheduling::FP_Scheduler_var::tao_upcast (void *src)
{
  FP_Scheduler **tmp =
    ACE_static_cast (FP_Scheduler **, src);
  return *tmp;
}

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:1030

// *************************************************************
// FP_Scheduling::FP_Scheduler_out
// *************************************************************

FP_Scheduling::FP_Scheduler_out::FP_Scheduler_out (FP_Scheduler_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::FP_Scheduling::FP_Scheduler::_nil ();
}

FP_Scheduling::FP_Scheduler_out::FP_Scheduler_out (FP_Scheduler_var &p)
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::FP_Scheduling::FP_Scheduler::_nil ();
}

FP_Scheduling::FP_Scheduler_out::FP_Scheduler_out (const ::FP_Scheduling::FP_Scheduler_out &p)
  : ptr_ (ACE_const_cast (FP_Scheduler_out &, p).ptr_)
{}

::FP_Scheduling::FP_Scheduler_out &
FP_Scheduling::FP_Scheduler_out::operator= (const ::FP_Scheduling::FP_Scheduler_out &p)
{
  this->ptr_ = ACE_const_cast (FP_Scheduler_out&, p).ptr_;
  return *this;
}

FP_Scheduling::FP_Scheduler_out &
FP_Scheduling::FP_Scheduler_out::operator= (const ::FP_Scheduling::FP_Scheduler_var &p)
{
  this->ptr_ = ::FP_Scheduling::FP_Scheduler::_duplicate (p.ptr ());
  return *this;
}

FP_Scheduling::FP_Scheduler_out &
FP_Scheduling::FP_Scheduler_out::operator= (FP_Scheduler_ptr p)
{
  this->ptr_ = p;
  return *this;
}

FP_Scheduling::FP_Scheduler_out::operator ::FP_Scheduling::FP_Scheduler_ptr &() // cast
{
  return this->ptr_;
}

::FP_Scheduling::FP_Scheduler_ptr &
FP_Scheduling::FP_Scheduler_out::ptr (void)
{
  return this->ptr_;
}

::FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler_out::operator-> (void)
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_cs.cpp:225

FP_Scheduling::FP_Scheduler::FP_Scheduler (void)
{}

FP_Scheduling::FP_Scheduler::~FP_Scheduler (void)
{}

void 
FP_Scheduling::FP_Scheduler::_tao_any_destructor (void *_tao_void_pointer)
{
  FP_Scheduler *tmp = ACE_static_cast (FP_Scheduler *, _tao_void_pointer);
  CORBA::release (tmp);
}

FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler::_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL
  )
{
  return FP_Scheduler::_unchecked_narrow (obj ACE_ENV_ARG_PARAMETER);
}

FP_Scheduling::FP_Scheduler_ptr 
FP_Scheduling::FP_Scheduler::_unchecked_narrow (
    CORBA::Object_ptr obj
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  if (CORBA::is_nil (obj))
    {
      return FP_Scheduler::_nil ();
    }
  
  return
      ACE_reinterpret_cast (
          FP_Scheduler_ptr,
          obj->_tao_QueryInterface (
              ACE_reinterpret_cast (
                  ptr_arith_t,
                  &FP_Scheduler::_tao_class_id
                )
            )
        );
}

FP_Scheduling::FP_Scheduler_ptr
FP_Scheduling::FP_Scheduler::_duplicate (FP_Scheduler_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void *FP_Scheduling::FP_Scheduler::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  
  if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &ACE_NESTED_CLASS (::FP_Scheduling, FP_Scheduler)::_tao_class_id)
            )
    {
      retv = ACE_reinterpret_cast (void*, this);
    }
  else if (type == ACE_reinterpret_cast (
              ptr_arith_t,
              &::RTScheduling::Scheduler::_tao_class_id)
            )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (
                RTScheduling::Scheduler_ptr,
                this
              )
          );
    }
  else if (type == ACE_reinterpret_cast (
               ptr_arith_t,
               &CORBA::Object::_tao_class_id)
             )
    {
      retv =
        ACE_reinterpret_cast (
            void *,
            ACE_static_cast (CORBA::Object_ptr, this)
          );
    }
  
  if (retv != 0)
    {
      this->_add_ref ();
    }
  
  return retv;
}

const char* FP_Scheduling::FP_Scheduler::_interface_repository_id (void) const
{
  return "IDL:FP_Scheduling/FP_Scheduler:1.0";
}

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_defn.cpp:284

static const CORBA::Long _oc_FP_Scheduling_FP_Scheduler[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x46505f53), 
  ACE_NTOHL (0x63686564), 
  ACE_NTOHL (0x756c696e), 
  ACE_NTOHL (0x672f4650), 
  ACE_NTOHL (0x5f536368), 
  ACE_NTOHL (0x6564756c), 
  ACE_NTOHL (0x65723a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:FP_Scheduling/FP_Scheduler:1.0
  13,
  ACE_NTOHL (0x46505f53), 
  ACE_NTOHL (0x63686564), 
  ACE_NTOHL (0x756c6572), 
  ACE_NTOHL (0x0),  // name = FP_Scheduler
};

static CORBA::TypeCode _tc_TAO_tc_FP_Scheduling_FP_Scheduler (
    CORBA::tk_objref,
    sizeof (_oc_FP_Scheduling_FP_Scheduler),
    (char *) &_oc_FP_Scheduling_FP_Scheduler,
    0,
    sizeof (FP_Scheduling::FP_Scheduler)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (FP_Scheduling)
TAO_NAMESPACE_DEFINE (
    ::CORBA::TypeCode_ptr,
    _tc_FP_Scheduler,
    &_tc_TAO_tc_FP_Scheduling_FP_Scheduler
  )
TAO_NAMESPACE_END

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    FP_Scheduling::SegmentSchedulingParameterPolicy_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      FP_Scheduling::_tc_SegmentSchedulingParameterPolicy,
      1,
      FP_Scheduling::SegmentSchedulingParameterPolicy::_duplicate (_tao_elem),
      FP_Scheduling::SegmentSchedulingParameterPolicy::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    FP_Scheduling::SegmentSchedulingParameterPolicy_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      FP_Scheduling::_tc_SegmentSchedulingParameterPolicy,
      1,
      *_tao_elem,
      FP_Scheduling::SegmentSchedulingParameterPolicy::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    FP_Scheduling::SegmentSchedulingParameterPolicy_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = FP_Scheduling::SegmentSchedulingParameterPolicy::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          FP_Scheduling::_tc_SegmentSchedulingParameterPolicy
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          FP_Scheduling::SegmentSchedulingParameterPolicy_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = FP_Scheduling::SegmentSchedulingParameterPolicy::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<FP_Scheduling::SegmentSchedulingParameterPolicy,FP_Scheduling::SegmentSchedulingParameterPolicy_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<FP_Scheduling::SegmentSchedulingParameterPolicy,FP_Scheduling::SegmentSchedulingParameterPolicy_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_cs.cpp:52

// Copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    FP_Scheduling::FP_Scheduler_ptr _tao_elem
  )
{
  _tao_any._tao_replace (
      FP_Scheduling::_tc_FP_Scheduler,
      1,
      FP_Scheduling::FP_Scheduler::_duplicate (_tao_elem),
      FP_Scheduling::FP_Scheduler::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

// Non-copying version.
void
operator<<= (
    CORBA::Any &_tao_any,
    FP_Scheduling::FP_Scheduler_ptr *_tao_elem
  )
{
  _tao_any._tao_replace (
      FP_Scheduling::_tc_FP_Scheduler,
      1,
      *_tao_elem,
      FP_Scheduling::FP_Scheduler::_tao_any_destructor
    );
  
  _tao_any.contains_local (1);
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    FP_Scheduling::FP_Scheduler_ptr &_tao_elem
  )
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = FP_Scheduling::FP_Scheduler::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result =
      type->equivalent (
          FP_Scheduling::_tc_FP_Scheduler
          ACE_ENV_ARG_PARAMETER
        );
    ACE_TRY_CHECK;
    
    if (!result)
      {
        return 0; // not equivalent
      }
    
    _tao_elem =
      ACE_reinterpret_cast (
          FP_Scheduling::FP_Scheduler_ptr,
          ACE_const_cast (void *, _tao_any.value ())
        );
      
    return 1;
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  
  _tao_elem = FP_Scheduling::FP_Scheduler::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
  template class TAO_Object_Manager<FP_Scheduling::FP_Scheduler,FP_Scheduling::FP_Scheduler_var>;
#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
# pragma instantiate TAO_Object_Manager<FP_Scheduling::FP_Scheduler,FP_Scheduling::FP_Scheduler_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

