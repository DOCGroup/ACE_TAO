// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:151

#ifndef _TAO_IDL_KOKYU_QOSC_H_
#define _TAO_IDL_KOKYU_QOSC_H_


#include "tao/corba.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "RTSchedulerC.h"
#include "RTCORBAC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO 
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:48

TAO_NAMESPACE  Kokyu
{

#if !defined (_KOKYU_GUIDTYPE_CH_)
#define _KOKYU_GUIDTYPE_CH_
  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:371
  
  class GuidType;
  class GuidType_var;
  
  // *************************************************************
  // Kokyu::GuidType
  // *************************************************************
  
  class  GuidType : public 
  
  // TAO_IDL - Generated from 
  // be/be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  {
  public:
    GuidType (void);
    GuidType (CORBA::ULong max);
    GuidType (
        CORBA::ULong max, 
        CORBA::ULong length, 
        CORBA::Octet *buffer, 
        CORBA::Boolean release = 0
      );
    GuidType (const GuidType &);
    ~GuidType (void);
    
    static void _tao_any_destructor (void*);
    
    typedef GuidType_var _var_type;
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    GuidType (
        CORBA::ULong length,
        const ACE_Message_Block* mb
      )
      : TAO_Unbounded_Sequence<CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
  };

#endif /* end #if !defined */

#if !defined (_KOKYU_GUIDTYPE___VAR_CH_)
#define _KOKYU_GUIDTYPE___VAR_CH_
  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:549
  
  // *************************************************************
  // class Kokyu::GuidType_var
  // *************************************************************
  
  class  GuidType_var
  {
  public:
    GuidType_var (void);
    GuidType_var (GuidType *);
    GuidType_var (const GuidType_var &);
    
    // Fixed-size base types only.
    GuidType_var (const GuidType &);
    
    ~GuidType_var (void);
    
    GuidType_var &operator= (GuidType *);
    GuidType_var &operator= (const GuidType_var &);
    
    // Fixed-size base types only.
    GuidType_var &operator= (const GuidType &);
    
    GuidType *operator-> (void);
    const GuidType *operator-> (void) const;
    
    operator const GuidType &() const;
    operator GuidType &();
    operator GuidType &() const;
    CORBA::Octet & operator[] (CORBA::ULong index);
    const CORBA::Octet & operator[] (CORBA::ULong index) const;
    
    // in, inout, out, _retn 
    const GuidType &in (void) const;
    GuidType &inout (void);
    GuidType *&out (void);
    GuidType *_retn (void);
    GuidType *ptr (void) const;
  
  private:
    GuidType *ptr_;
  };

#endif /* end #if !defined */

#if !defined (_KOKYU_GUIDTYPE___OUT_CH_)
#define _KOKYU_GUIDTYPE___OUT_CH_
  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:753
  
  class  GuidType_out
  {
  public:
    GuidType_out (GuidType *&);
    GuidType_out (GuidType_var &);
    GuidType_out (const GuidType_out &);
    GuidType_out &operator= (const GuidType_out &);
    GuidType_out &operator= (GuidType *);
    operator GuidType *&();
    GuidType *&ptr (void);
    GuidType *operator-> (void);
    CORBA::Octet & operator[] (CORBA::ULong index);
  
  private:
    GuidType *&ptr_;
    // Assignment from T_var not allowed.
    void operator= (const GuidType_var &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_GuidType;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:49
  
  class Svc_Ctxt_DSRT_QoS_var;
  
  struct  Svc_Ctxt_DSRT_QoS
  {
    typedef Svc_Ctxt_DSRT_QoS_var _var_type;
    
    static void _tao_any_destructor (void *);
    Kokyu::GuidType guid;
    CORBA::Long importance;
    CORBA::Long criticality;
    RTCORBA::Priority desired_priority;
    TimeBase::TimeT deadline;
    TimeBase::TimeT estimated_initial_execution_time;
  };
  
  // TAO_IDL - Generated from
  // be/be_structure.cpp:71
  
  class  Svc_Ctxt_DSRT_QoS_var
  {
  public:
    Svc_Ctxt_DSRT_QoS_var (void);
    Svc_Ctxt_DSRT_QoS_var (Svc_Ctxt_DSRT_QoS *);
    Svc_Ctxt_DSRT_QoS_var (const Svc_Ctxt_DSRT_QoS_var &);
    ~Svc_Ctxt_DSRT_QoS_var (void);
    
    Svc_Ctxt_DSRT_QoS_var &operator= (Svc_Ctxt_DSRT_QoS *);
    Svc_Ctxt_DSRT_QoS_var &operator= (const Svc_Ctxt_DSRT_QoS_var &);
    Svc_Ctxt_DSRT_QoS *operator-> (void);
    const Svc_Ctxt_DSRT_QoS *operator-> (void) const;
    
    operator const Svc_Ctxt_DSRT_QoS &() const;
    operator Svc_Ctxt_DSRT_QoS &();
    operator Svc_Ctxt_DSRT_QoS &() const;
    
    // Variable-size types only.
    operator Svc_Ctxt_DSRT_QoS *&();
    
    // in, inout, out, _retn 
    const Svc_Ctxt_DSRT_QoS &in (void) const;
    Svc_Ctxt_DSRT_QoS &inout (void);
    Svc_Ctxt_DSRT_QoS *&out (void);
    Svc_Ctxt_DSRT_QoS *_retn (void);
    Svc_Ctxt_DSRT_QoS *ptr (void) const;
  
  private:
    Svc_Ctxt_DSRT_QoS *ptr_;
  };
  
  // TAO_IDL - Generated from
  // be/be_structure.cpp:445
  
  class  Svc_Ctxt_DSRT_QoS_out
  {
  public:
    Svc_Ctxt_DSRT_QoS_out (Svc_Ctxt_DSRT_QoS *&);
    Svc_Ctxt_DSRT_QoS_out (Svc_Ctxt_DSRT_QoS_var &);
    Svc_Ctxt_DSRT_QoS_out (const Svc_Ctxt_DSRT_QoS_out &);
    Svc_Ctxt_DSRT_QoS_out &operator= (const Svc_Ctxt_DSRT_QoS_out &);
    Svc_Ctxt_DSRT_QoS_out &operator= (Svc_Ctxt_DSRT_QoS *);
    operator Svc_Ctxt_DSRT_QoS *&();
    Svc_Ctxt_DSRT_QoS *&ptr (void);
    Svc_Ctxt_DSRT_QoS *operator-> (void);
    
  private:
    Svc_Ctxt_DSRT_QoS *&ptr_;
    // Assignment from T_var not allowed.
    void operator= (const Svc_Ctxt_DSRT_QoS_var &);
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Svc_Ctxt_DSRT_QoS;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

}
TAO_NAMESPACE_CLOSE // module Kokyu

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const Kokyu::GuidType &); // copying version
 void operator<<= (CORBA::Any &, Kokyu::GuidType*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, Kokyu::GuidType *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const Kokyu::GuidType *&);

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const Kokyu::Svc_Ctxt_DSRT_QoS &); // copying version
 void operator<<= (CORBA::Any &, Kokyu::Svc_Ctxt_DSRT_QoS*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, Kokyu::Svc_Ctxt_DSRT_QoS *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const Kokyu::Svc_Ctxt_DSRT_QoS *&);

// TAO_IDL - Generated from
// be/be_visitor_root/cdr_op.cpp:48

#ifndef __ACE_INLINE__

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_Kokyu_GuidType_H_
#define _TAO_CDR_OP_Kokyu_GuidType_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const Kokyu::GuidType &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Kokyu::GuidType &
  );

#endif /* _TAO_CDR_OP_Kokyu_GuidType_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:54

 CORBA::Boolean operator<< (TAO_OutputCDR &, const Kokyu::Svc_Ctxt_DSRT_QoS &);
 CORBA::Boolean operator>> (TAO_InputCDR &, Kokyu::Svc_Ctxt_DSRT_QoS &);

// TAO_IDL - Generated from
// be/be_visitor_root/cdr_op.cpp:64

#endif /* __ACE_INLINE__ */

// TAO_IDL - Generated from
// be/be_codegen.cpp:1004

#if defined (__ACE_INLINE__)
#include "Kokyu_qosC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#endif /* ifndef */

