// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:151

#ifndef _TAO_IDL_RTSCHEDULERC_H_
#define _TAO_IDL_RTSCHEDULERC_H_

#include "ace/pre.h"

#include "tao/corba.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "rtscheduler_export.h"

#include "c:/ACE_wrappers/TAO/tao/RTCORBA/RTCORBA.h"
#include "c:/ACE_wrappers/TAO/tao/PortableServer/PortableServerC.h"
#include "c:/ACE_wrappers/TAO/tao/PortableInterceptorC.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_RTScheduler_Export

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO TAO_RTScheduler_Export
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:48

TAO_NAMESPACE  CORBA
{

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:67
	typedef void* VoidData;

}
TAO_NAMESPACE_CLOSE // module CORBA

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:48

TAO_NAMESPACE  RTScheduling
{
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_RTSCHEDULING_THREADACTION___PTR_CH_)
#define _RTSCHEDULING_THREADACTION___PTR_CH_
  
  class ThreadAction;
  typedef ThreadAction *ThreadAction_ptr;

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_THREADACTION___VAR_CH_)
#define _RTSCHEDULING_THREADACTION___VAR_CH_
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
  
  class TAO_RTScheduler_Export ThreadAction_var : public TAO_Base_var
  {
  public:
    ThreadAction_var (void); // default constructor
    ThreadAction_var (ThreadAction_ptr p) : ptr_ (p) {} 
    ThreadAction_var (const ThreadAction_var &); // copy constructor
    ~ThreadAction_var (void); // destructor
    
    ThreadAction_var &operator= (ThreadAction_ptr);
    ThreadAction_var &operator= (const ThreadAction_var &);
    ThreadAction_ptr operator-> (void) const;
    
    operator const ThreadAction_ptr &() const;
    operator ThreadAction_ptr &();
    // in, inout, out, _retn 
    ThreadAction_ptr in (void) const;
    ThreadAction_ptr &inout (void);
    ThreadAction_ptr &out (void);
    ThreadAction_ptr _retn (void);
    ThreadAction_ptr ptr (void) const;
    
    // Hooks used by template sequence and object manager classes
    // for non-defined forward declared interfaces.
    static ThreadAction_ptr tao_duplicate (ThreadAction_ptr);
    static void tao_release (ThreadAction_ptr);
    static ThreadAction_ptr tao_nil (void);
    static ThreadAction_ptr tao_narrow (
        CORBA::Object *
        ACE_ENV_ARG_DECL_NOT_USED
      );
    static CORBA::Object * tao_upcast (void *);
  
  private:
    ThreadAction_ptr ptr_;
    // Unimplemented - prevents widening assignment.
    ThreadAction_var (const TAO_Base_var &rhs);
    ThreadAction_var &operator= (const TAO_Base_var &rhs);
  };

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_THREADACTION___OUT_CH_)
#define _RTSCHEDULING_THREADACTION___OUT_CH_
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
  
  class TAO_RTScheduler_Export ThreadAction_out
  {
  public:
    ThreadAction_out (ThreadAction_ptr &);
    ThreadAction_out (ThreadAction_var &);
    ThreadAction_out (const ThreadAction_out &);
    ThreadAction_out &operator= (const ThreadAction_out &);
    ThreadAction_out &operator= (const ThreadAction_var &);
    ThreadAction_out &operator= (ThreadAction_ptr);
    operator ThreadAction_ptr &();
    ThreadAction_ptr &ptr (void);
    ThreadAction_ptr operator-> (void);
  
  private:
    ThreadAction_ptr &ptr_;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_RTSCHEDULING_THREADACTION_CH_)
#define _RTSCHEDULING_THREADACTION_CH_
  
  class TAO_RTScheduler_Export ThreadAction
    : public virtual CORBA::Object
  {
  public:
    typedef ThreadAction_ptr _ptr_type;
    typedef ThreadAction_var _var_type;
    static int _tao_class_id;
    
    // The static operations.
    static ThreadAction_ptr _duplicate (ThreadAction_ptr obj);
    
    static ThreadAction_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static ThreadAction_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static ThreadAction_ptr _nil (void)
      {
        return (ThreadAction_ptr)0;
      }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void _cxx_do (
        CORBA::VoidData data
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
    
    virtual void *_tao_QueryInterface (ptr_arith_t type);
    
    virtual const char* _interface_repository_id (void) const;
  
  protected:
    ThreadAction (void);
    virtual ~ThreadAction (void);
    
    friend class _TAO_ThreadAction_Remote_Proxy_Impl;
    friend class _TAO_ThreadAction_ThruPOA_Proxy_Impl;
    friend class _TAO_ThreadAction_Direct_Proxy_Impl;
  
  private:
    ThreadAction (const ThreadAction &);
    void operator= (const ThreadAction &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ThreadAction;
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_RTSCHEDULING_DISTRIBUTABLETHREAD___PTR_CH_)
#define _RTSCHEDULING_DISTRIBUTABLETHREAD___PTR_CH_
  
  class DistributableThread;
  typedef DistributableThread *DistributableThread_ptr;

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_DISTRIBUTABLETHREAD___VAR_CH_)
#define _RTSCHEDULING_DISTRIBUTABLETHREAD___VAR_CH_
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
  
  class TAO_RTScheduler_Export DistributableThread_var : public TAO_Base_var
  {
  public:
    DistributableThread_var (void); // default constructor
    DistributableThread_var (DistributableThread_ptr p) : ptr_ (p) {} 
    DistributableThread_var (const DistributableThread_var &); // copy constructor
    ~DistributableThread_var (void); // destructor
    
    DistributableThread_var &operator= (DistributableThread_ptr);
    DistributableThread_var &operator= (const DistributableThread_var &);
    DistributableThread_ptr operator-> (void) const;
    
    operator const DistributableThread_ptr &() const;
    operator DistributableThread_ptr &();
    // in, inout, out, _retn 
    DistributableThread_ptr in (void) const;
    DistributableThread_ptr &inout (void);
    DistributableThread_ptr &out (void);
    DistributableThread_ptr _retn (void);
    DistributableThread_ptr ptr (void) const;
    
    // Hooks used by template sequence and object manager classes
    // for non-defined forward declared interfaces.
    static DistributableThread_ptr tao_duplicate (DistributableThread_ptr);
    static void tao_release (DistributableThread_ptr);
    static DistributableThread_ptr tao_nil (void);
    static DistributableThread_ptr tao_narrow (
        CORBA::Object *
        ACE_ENV_ARG_DECL_NOT_USED
      );
    static CORBA::Object * tao_upcast (void *);
  
  private:
    DistributableThread_ptr ptr_;
    // Unimplemented - prevents widening assignment.
    DistributableThread_var (const TAO_Base_var &rhs);
    DistributableThread_var &operator= (const TAO_Base_var &rhs);
  };

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_DISTRIBUTABLETHREAD___OUT_CH_)
#define _RTSCHEDULING_DISTRIBUTABLETHREAD___OUT_CH_
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
  
  class TAO_RTScheduler_Export DistributableThread_out
  {
  public:
    DistributableThread_out (DistributableThread_ptr &);
    DistributableThread_out (DistributableThread_var &);
    DistributableThread_out (const DistributableThread_out &);
    DistributableThread_out &operator= (const DistributableThread_out &);
    DistributableThread_out &operator= (const DistributableThread_var &);
    DistributableThread_out &operator= (DistributableThread_ptr);
    operator DistributableThread_ptr &();
    DistributableThread_ptr &ptr (void);
    DistributableThread_ptr operator-> (void);
  
  private:
    DistributableThread_ptr &ptr_;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_RTSCHEDULING_DISTRIBUTABLETHREAD_CH_)
#define _RTSCHEDULING_DISTRIBUTABLETHREAD_CH_
  
  class TAO_RTScheduler_Export DistributableThread
    : public virtual CORBA::Object
  {
  public:
    typedef DistributableThread_ptr _ptr_type;
    typedef DistributableThread_var _var_type;
    static int _tao_class_id;
    
    // The static operations.
    static DistributableThread_ptr _duplicate (DistributableThread_ptr obj);
    
    static DistributableThread_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static DistributableThread_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static DistributableThread_ptr _nil (void)
      {
        return (DistributableThread_ptr)0;
      }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void cancel (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
    
    virtual void *_tao_QueryInterface (ptr_arith_t type);
    
    virtual const char* _interface_repository_id (void) const;
  
  protected:
    DistributableThread (void);
    virtual ~DistributableThread (void);
    
    friend class _TAO_DistributableThread_Remote_Proxy_Impl;
    friend class _TAO_DistributableThread_ThruPOA_Proxy_Impl;
    friend class _TAO_DistributableThread_Direct_Proxy_Impl;
  
  private:
    DistributableThread (const DistributableThread &);
    void operator= (const DistributableThread &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_DistributableThread;
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_RTSCHEDULING_CURRENT___PTR_CH_)
#define _RTSCHEDULING_CURRENT___PTR_CH_
  
  class Current;
  typedef Current *Current_ptr;

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_CURRENT___VAR_CH_)
#define _RTSCHEDULING_CURRENT___VAR_CH_
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
  
  class TAO_RTScheduler_Export Current_var : public TAO_Base_var
  {
  public:
    Current_var (void); // default constructor
    Current_var (Current_ptr p) : ptr_ (p) {} 
    Current_var (const Current_var &); // copy constructor
    ~Current_var (void); // destructor
    
    Current_var &operator= (Current_ptr);
    Current_var &operator= (const Current_var &);
    Current_ptr operator-> (void) const;
    
    operator const Current_ptr &() const;
    operator Current_ptr &();
    // in, inout, out, _retn 
    Current_ptr in (void) const;
    Current_ptr &inout (void);
    Current_ptr &out (void);
    Current_ptr _retn (void);
    Current_ptr ptr (void) const;
    
    // Hooks used by template sequence and object manager classes
    // for non-defined forward declared interfaces.
    static Current_ptr tao_duplicate (Current_ptr);
    static void tao_release (Current_ptr);
    static Current_ptr tao_nil (void);
    static Current_ptr tao_narrow (
        CORBA::Object *
        ACE_ENV_ARG_DECL_NOT_USED
      );
    static CORBA::Object * tao_upcast (void *);
  
  private:
    Current_ptr ptr_;
    // Unimplemented - prevents widening assignment.
    Current_var (const TAO_Base_var &rhs);
    Current_var &operator= (const TAO_Base_var &rhs);
  };

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_CURRENT___OUT_CH_)
#define _RTSCHEDULING_CURRENT___OUT_CH_
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
  
  class TAO_RTScheduler_Export Current_out
  {
  public:
    Current_out (Current_ptr &);
    Current_out (Current_var &);
    Current_out (const Current_out &);
    Current_out &operator= (const Current_out &);
    Current_out &operator= (const Current_var &);
    Current_out &operator= (Current_ptr);
    operator Current_ptr &();
    Current_ptr &ptr (void);
    Current_ptr operator-> (void);
  
  private:
    Current_ptr &ptr_;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_RTSCHEDULING_CURRENT_CH_)
#define _RTSCHEDULING_CURRENT_CH_
  
  class TAO_RTScheduler_Export Current
    : public virtual RTCORBA::Current
  {
  public:
    typedef Current_ptr _ptr_type;
    typedef Current_var _var_type;
    static int _tao_class_id;
    
    // The static operations.
    static Current_ptr _duplicate (Current_ptr obj);
    
    static Current_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static Current_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static Current_ptr _nil (void)
      {
        return (Current_ptr)0;
      }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::RTScheduling::DistributableThread_ptr spawn (
        RTScheduling::ThreadAction_ptr start,
        CORBA::ULong stack_size,
        RTCORBA::Priority base_priority
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_RTSCHEDULING_CURRENT_UNSUPPORTED_SCHEDULING_DISCIPLINE_CH_)
#define _RTSCHEDULING_CURRENT_UNSUPPORTED_SCHEDULING_DISCIPLINE_CH_
    
    class TAO_RTScheduler_Export UNSUPPORTED_SCHEDULING_DISCIPLINE : public CORBA::UserException
    {
    public:
      
      UNSUPPORTED_SCHEDULING_DISCIPLINE (void);
      UNSUPPORTED_SCHEDULING_DISCIPLINE (const UNSUPPORTED_SCHEDULING_DISCIPLINE &);
      ~UNSUPPORTED_SCHEDULING_DISCIPLINE (void);

      UNSUPPORTED_SCHEDULING_DISCIPLINE &operator= (const UNSUPPORTED_SCHEDULING_DISCIPLINE &);
      
      static void _tao_any_destructor (void *);
      
      static UNSUPPORTED_SCHEDULING_DISCIPLINE *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void);

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL_NOT_USED
        ) const;
      
      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL_NOT_USED
        );
      
      // TAO_IDL - Generated from
      // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_ch.cpp:125
      
      virtual CORBA::TypeCode_ptr _type (void) const;
    };
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    static ::CORBA::TypeCode_ptr _tc_UNSUPPORTED_SCHEDULING_DISCIPLINE;

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void begin_scheduling_segment (
        const char * name,
        CORBA::Policy_ptr sched_param,
        CORBA::Policy_ptr implicit_sched_param
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , RTScheduling::Current::UNSUPPORTED_SCHEDULING_DISCIPLINE
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void update_scheduling_segment (
        const char * name,
        CORBA::Policy_ptr sched_param,
        CORBA::Policy_ptr implicit_sched_param
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , RTScheduling::Current::UNSUPPORTED_SCHEDULING_DISCIPLINE
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void end_scheduling_segment (
        const char * name
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

#if !defined (_RTSCHEDULING_CURRENT_IDTYPE_CH_)
#define _RTSCHEDULING_CURRENT_IDTYPE_CH_
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:371
    
    class IdType;
    class IdType_var;
    
    // *************************************************************
    // RTScheduling::Current::IdType
    // *************************************************************
    
    class TAO_RTScheduler_Export IdType : public 
    
    // TAO_IDL - Generated from 
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
    TAO_Unbounded_Sequence<CORBA::Octet>
#else /* TAO_USE_SEQUENCE_TEMPLATES */
    TAO_Unbounded_Sequence<CORBA::Octet>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
    {
    public:
      IdType (void);
      IdType (CORBA::ULong max);
      IdType (
          CORBA::ULong max, 
          CORBA::ULong length, 
          CORBA::Octet *buffer, 
          CORBA::Boolean release = 0
        );
      IdType (const IdType &);
      ~IdType (void);
      
      static void _tao_any_destructor (void*);
      
      typedef IdType_var _var_type;
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      IdType (
          CORBA::ULong length,
          const ACE_Message_Block* mb
        )
        : TAO_Unbounded_Sequence<CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
    };

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_CURRENT_IDTYPE___VAR_CH_)
#define _RTSCHEDULING_CURRENT_IDTYPE___VAR_CH_
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:549
    
    // *************************************************************
    // class RTScheduling::Current::IdType_var
    // *************************************************************
    
    class TAO_RTScheduler_Export IdType_var
    {
    public:
      IdType_var (void);
      IdType_var (IdType *);
      IdType_var (const IdType_var &);
      
      // Fixed-size base types only.
      IdType_var (const IdType &);
      
      ~IdType_var (void);
      
      IdType_var &operator= (IdType *);
      IdType_var &operator= (const IdType_var &);
      
      // Fixed-size base types only.
      IdType_var &operator= (const IdType &);
      
      IdType *operator-> (void);
      const IdType *operator-> (void) const;
      
      operator const IdType &() const;
      operator IdType &();
      operator IdType &() const;
      CORBA::Octet & operator[] (CORBA::ULong index);
      const CORBA::Octet & operator[] (CORBA::ULong index) const;
      
      // in, inout, out, _retn 
      const IdType &in (void) const;
      IdType &inout (void);
      IdType *&out (void);
      IdType *_retn (void);
      IdType *ptr (void) const;
    
    private:
      IdType *ptr_;
    };

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_CURRENT_IDTYPE___OUT_CH_)
#define _RTSCHEDULING_CURRENT_IDTYPE___OUT_CH_
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:753
    
    class TAO_RTScheduler_Export IdType_out
    {
    public:
      IdType_out (IdType *&);
      IdType_out (IdType_var &);
      IdType_out (const IdType_out &);
      IdType_out &operator= (const IdType_out &);
      IdType_out &operator= (IdType *);
      operator IdType *&();
      IdType *&ptr (void);
      IdType *operator-> (void);
      CORBA::Octet & operator[] (CORBA::ULong index);
    
    private:
      IdType *&ptr_;
      // Assignment from T_var not allowed.
      void operator= (const IdType_var &);
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    static ::CORBA::TypeCode_ptr _tc_IdType;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::RTScheduling::Current::IdType * id (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::RTScheduling::DistributableThread_ptr lookup (
        const RTScheduling::Current::IdType & id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::Policy_ptr scheduling_parameter (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::Policy_ptr implicit_scheduling_parameter (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;

#if !defined (_RTSCHEDULING_CURRENT_NAMELIST_CH_)
#define _RTSCHEDULING_CURRENT_NAMELIST_CH_
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:371
    
    class NameList;
    class NameList_var;
    
    // *************************************************************
    // RTScheduling::Current::NameList
    // *************************************************************
    
    class TAO_RTScheduler_Export NameList : public 
    
    // TAO_IDL - Generated from 
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
    TAO_Unbounded_String_Sequence
#else /* TAO_USE_SEQUENCE_TEMPLATES */
    TAO_Unbounded_String_Sequence

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
    {
    public:
      NameList (void);
      NameList (CORBA::ULong max);
      NameList (
          CORBA::ULong max, 
          CORBA::ULong length, 
          char * *buffer, 
          CORBA::Boolean release = 0
        );
      NameList (const NameList &);
      ~NameList (void);
      
      static void _tao_any_destructor (void*);
      
      typedef NameList_var _var_type;
    };

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_CURRENT_NAMELIST___VAR_CH_)
#define _RTSCHEDULING_CURRENT_NAMELIST___VAR_CH_
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:549
    
    // *************************************************************
    // class RTScheduling::Current::NameList_var
    // *************************************************************
    
    class TAO_RTScheduler_Export NameList_var
    {
    public:
      NameList_var (void);
      NameList_var (NameList *);
      NameList_var (const NameList_var &);
      ~NameList_var (void);
      
      NameList_var &operator= (NameList *);
      NameList_var &operator= (const NameList_var &);
      NameList *operator-> (void);
      const NameList *operator-> (void) const;
      
      operator const NameList &() const;
      operator NameList &();
      operator NameList &() const;
      
      // Variable-size base types only.
      operator NameList *&();
      
      TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);
      
      // in, inout, out, _retn 
      const NameList &in (void) const;
      NameList &inout (void);
      NameList *&out (void);
      NameList *_retn (void);
      NameList *ptr (void) const;
    
    private:
      NameList *ptr_;
    };

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_CURRENT_NAMELIST___OUT_CH_)
#define _RTSCHEDULING_CURRENT_NAMELIST___OUT_CH_
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/sequence_ch.cpp:753
    
    class TAO_RTScheduler_Export NameList_out
    {
    public:
      NameList_out (NameList *&);
      NameList_out (NameList_var &);
      NameList_out (const NameList_out &);
      NameList_out &operator= (const NameList_out &);
      NameList_out &operator= (NameList *);
      operator NameList *&();
      NameList *&ptr (void);
      NameList *operator-> (void);
      TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);
    
    private:
      NameList *&ptr_;
      // Assignment from T_var not allowed.
      void operator= (const NameList_var &);
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    static ::CORBA::TypeCode_ptr _tc_NameList;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::RTScheduling::Current::NameList * current_scheduling_segment_names (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
    
    virtual void *_tao_QueryInterface (ptr_arith_t type);
    
    virtual const char* _interface_repository_id (void) const;
  
  protected:
    Current (void);
    virtual ~Current (void);
    
    friend class _TAO_Current_Remote_Proxy_Impl;
    friend class _TAO_Current_ThruPOA_Proxy_Impl;
    friend class _TAO_Current_Direct_Proxy_Impl;
  
  private:
    Current (const Current &);
    void operator= (const Current &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Current;
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_RTSCHEDULING_RESOURCEMANAGER___PTR_CH_)
#define _RTSCHEDULING_RESOURCEMANAGER___PTR_CH_
  
  class ResourceManager;
  typedef ResourceManager *ResourceManager_ptr;

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_RESOURCEMANAGER___VAR_CH_)
#define _RTSCHEDULING_RESOURCEMANAGER___VAR_CH_
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
  
  class TAO_RTScheduler_Export ResourceManager_var : public TAO_Base_var
  {
  public:
    ResourceManager_var (void); // default constructor
    ResourceManager_var (ResourceManager_ptr p) : ptr_ (p) {} 
    ResourceManager_var (const ResourceManager_var &); // copy constructor
    ~ResourceManager_var (void); // destructor
    
    ResourceManager_var &operator= (ResourceManager_ptr);
    ResourceManager_var &operator= (const ResourceManager_var &);
    ResourceManager_ptr operator-> (void) const;
    
    operator const ResourceManager_ptr &() const;
    operator ResourceManager_ptr &();
    // in, inout, out, _retn 
    ResourceManager_ptr in (void) const;
    ResourceManager_ptr &inout (void);
    ResourceManager_ptr &out (void);
    ResourceManager_ptr _retn (void);
    ResourceManager_ptr ptr (void) const;
    
    // Hooks used by template sequence and object manager classes
    // for non-defined forward declared interfaces.
    static ResourceManager_ptr tao_duplicate (ResourceManager_ptr);
    static void tao_release (ResourceManager_ptr);
    static ResourceManager_ptr tao_nil (void);
    static ResourceManager_ptr tao_narrow (
        CORBA::Object *
        ACE_ENV_ARG_DECL_NOT_USED
      );
    static CORBA::Object * tao_upcast (void *);
  
  private:
    ResourceManager_ptr ptr_;
    // Unimplemented - prevents widening assignment.
    ResourceManager_var (const TAO_Base_var &rhs);
    ResourceManager_var &operator= (const TAO_Base_var &rhs);
  };

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_RESOURCEMANAGER___OUT_CH_)
#define _RTSCHEDULING_RESOURCEMANAGER___OUT_CH_
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
  
  class TAO_RTScheduler_Export ResourceManager_out
  {
  public:
    ResourceManager_out (ResourceManager_ptr &);
    ResourceManager_out (ResourceManager_var &);
    ResourceManager_out (const ResourceManager_out &);
    ResourceManager_out &operator= (const ResourceManager_out &);
    ResourceManager_out &operator= (const ResourceManager_var &);
    ResourceManager_out &operator= (ResourceManager_ptr);
    operator ResourceManager_ptr &();
    ResourceManager_ptr &ptr (void);
    ResourceManager_ptr operator-> (void);
  
  private:
    ResourceManager_ptr &ptr_;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_RTSCHEDULING_RESOURCEMANAGER_CH_)
#define _RTSCHEDULING_RESOURCEMANAGER_CH_
  
  class TAO_RTScheduler_Export ResourceManager
    : public virtual RTCORBA::Mutex
  {
  public:
    typedef ResourceManager_ptr _ptr_type;
    typedef ResourceManager_var _var_type;
    static int _tao_class_id;
    
    // The static operations.
    static ResourceManager_ptr _duplicate (ResourceManager_ptr obj);
    
    static ResourceManager_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static ResourceManager_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static ResourceManager_ptr _nil (void)
      {
        return (ResourceManager_ptr)0;
      }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
    
    virtual void *_tao_QueryInterface (ptr_arith_t type);
    
    virtual const char* _interface_repository_id (void) const;
  
  protected:
    ResourceManager (void);
    virtual ~ResourceManager (void);
    
    friend class _TAO_ResourceManager_Remote_Proxy_Impl;
    friend class _TAO_ResourceManager_ThruPOA_Proxy_Impl;
    friend class _TAO_ResourceManager_Direct_Proxy_Impl;
  
  private:
    ResourceManager (const ResourceManager &);
    void operator= (const ResourceManager &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_ResourceManager;
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_RTSCHEDULING_SCHEDULER___PTR_CH_)
#define _RTSCHEDULING_SCHEDULER___PTR_CH_
  
  class Scheduler;
  typedef Scheduler *Scheduler_ptr;

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_SCHEDULER___VAR_CH_)
#define _RTSCHEDULING_SCHEDULER___VAR_CH_
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:571
  
  class TAO_RTScheduler_Export Scheduler_var : public TAO_Base_var
  {
  public:
    Scheduler_var (void); // default constructor
    Scheduler_var (Scheduler_ptr p) : ptr_ (p) {} 
    Scheduler_var (const Scheduler_var &); // copy constructor
    ~Scheduler_var (void); // destructor
    
    Scheduler_var &operator= (Scheduler_ptr);
    Scheduler_var &operator= (const Scheduler_var &);
    Scheduler_ptr operator-> (void) const;
    
    operator const Scheduler_ptr &() const;
    operator Scheduler_ptr &();
    // in, inout, out, _retn 
    Scheduler_ptr in (void) const;
    Scheduler_ptr &inout (void);
    Scheduler_ptr &out (void);
    Scheduler_ptr _retn (void);
    Scheduler_ptr ptr (void) const;
    
    // Hooks used by template sequence and object manager classes
    // for non-defined forward declared interfaces.
    static Scheduler_ptr tao_duplicate (Scheduler_ptr);
    static void tao_release (Scheduler_ptr);
    static Scheduler_ptr tao_nil (void);
    static Scheduler_ptr tao_narrow (
        CORBA::Object *
        ACE_ENV_ARG_DECL_NOT_USED
      );
    static CORBA::Object * tao_upcast (void *);
  
  private:
    Scheduler_ptr ptr_;
    // Unimplemented - prevents widening assignment.
    Scheduler_var (const TAO_Base_var &rhs);
    Scheduler_var &operator= (const TAO_Base_var &rhs);
  };

#endif /* end #if !defined */

#if !defined (_RTSCHEDULING_SCHEDULER___OUT_CH_)
#define _RTSCHEDULING_SCHEDULER___OUT_CH_
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_interface.cpp:946
  
  class TAO_RTScheduler_Export Scheduler_out
  {
  public:
    Scheduler_out (Scheduler_ptr &);
    Scheduler_out (Scheduler_var &);
    Scheduler_out (const Scheduler_out &);
    Scheduler_out &operator= (const Scheduler_out &);
    Scheduler_out &operator= (const Scheduler_var &);
    Scheduler_out &operator= (Scheduler_ptr);
    operator Scheduler_ptr &();
    Scheduler_ptr &ptr (void);
    Scheduler_ptr operator-> (void);
  
  private:
    Scheduler_ptr &ptr_;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_RTSCHEDULING_SCHEDULER_CH_)
#define _RTSCHEDULING_SCHEDULER_CH_
  
  class TAO_RTScheduler_Export Scheduler
    : public virtual CORBA::Object
  {
  public:
    typedef Scheduler_ptr _ptr_type;
    typedef Scheduler_var _var_type;
    static int _tao_class_id;
    
    // The static operations.
    static Scheduler_ptr _duplicate (Scheduler_ptr obj);
    
    static Scheduler_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static Scheduler_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static Scheduler_ptr _nil (void)
      {
        return (Scheduler_ptr)0;
      }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_ch.cpp:51

#if !defined (_RTSCHEDULING_SCHEDULER_INCOMPATIBLE_SCHEDULING_DISCIPLINES_CH_)
#define _RTSCHEDULING_SCHEDULER_INCOMPATIBLE_SCHEDULING_DISCIPLINES_CH_
    
    class TAO_RTScheduler_Export INCOMPATIBLE_SCHEDULING_DISCIPLINES : public CORBA::UserException
    {
    public:
      
      INCOMPATIBLE_SCHEDULING_DISCIPLINES (void);
      INCOMPATIBLE_SCHEDULING_DISCIPLINES (const INCOMPATIBLE_SCHEDULING_DISCIPLINES &);
      ~INCOMPATIBLE_SCHEDULING_DISCIPLINES (void);

      INCOMPATIBLE_SCHEDULING_DISCIPLINES &operator= (const INCOMPATIBLE_SCHEDULING_DISCIPLINES &);
      
      static void _tao_any_destructor (void *);
      
      static INCOMPATIBLE_SCHEDULING_DISCIPLINES *_downcast (CORBA::Exception *);
      static CORBA::Exception *_alloc (void);

      virtual CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void);

      virtual void _tao_encode (
          TAO_OutputCDR &
          ACE_ENV_ARG_DECL_NOT_USED
        ) const;
      
      virtual void _tao_decode (
          TAO_InputCDR &
          ACE_ENV_ARG_DECL_NOT_USED
        );
      
      // TAO_IDL - Generated from
      // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/exception_ch.cpp:125
      
      virtual CORBA::TypeCode_ptr _type (void) const;
    };
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
    
    static ::CORBA::TypeCode_ptr _tc_INCOMPATIBLE_SCHEDULING_DISCIPLINES;

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::PolicyList * scheduling_policies (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void scheduling_policies (
        const CORBA::PolicyList & scheduling_policies
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::PolicyList * poa_policies (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual char * scheduling_discipline_name (
        ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual ::RTScheduling::ResourceManager_ptr create_resource_manager (
        const char * name,
        CORBA::Policy_ptr scheduling_parameter
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void set_scheduling_parameter (
        PortableServer::Servant & resource,
        const char * name,
        CORBA::Policy_ptr scheduling_parameter
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void begin_new_scheduling_segment (
        const RTScheduling::Current::IdType & guid,
        const char * name,
        CORBA::Policy_ptr sched_param,
        CORBA::Policy_ptr implicit_sched_param
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , RTScheduling::Current::UNSUPPORTED_SCHEDULING_DISCIPLINE
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void begin_nested_scheduling_segment (
        const RTScheduling::Current::IdType & guid,
        const char * name,
        CORBA::Policy_ptr sched_param,
        CORBA::Policy_ptr implicit_sched_param
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , RTScheduling::Current::UNSUPPORTED_SCHEDULING_DISCIPLINE
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void update_scheduling_segment (
        const RTScheduling::Current::IdType & guid,
        const char * name,
        CORBA::Policy_ptr sched_param,
        CORBA::Policy_ptr implicit_sched_param
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , RTScheduling::Current::UNSUPPORTED_SCHEDULING_DISCIPLINE
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void end_scheduling_segment (
        const RTScheduling::Current::IdType & guid,
        const char * name
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void end_nested_scheduling_segment (
        const RTScheduling::Current::IdType & guid,
        const char * name,
        CORBA::Policy_ptr outer_sched_param
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void send_request (
        PortableInterceptor::ClientRequestInfo_ptr ri
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableInterceptor::ForwardRequest
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void receive_request (
        PortableInterceptor::ServerRequestInfo_ptr ri,
        const RTScheduling::Current::IdType & guid,
        const char * name,
        CORBA::Policy_ptr sched_param,
        CORBA::Policy_ptr implicit_sched_param
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableInterceptor::ForwardRequest
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void send_reply (
        PortableInterceptor::ServerRequestInfo_ptr ri
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void send_exception (
        PortableInterceptor::ServerRequestInfo_ptr ri
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableInterceptor::ForwardRequest
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void send_other (
        PortableInterceptor::ServerRequestInfo_ptr ri
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableInterceptor::ForwardRequest
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void receive_reply (
        PortableInterceptor::ClientRequestInfo_ptr ri
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void receive_exception (
        PortableInterceptor::ClientRequestInfo_ptr ri
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableInterceptor::ForwardRequest
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void receive_other (
        PortableInterceptor::ClientRequestInfo_ptr ri
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
        , PortableInterceptor::ForwardRequest
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void cancel (
        const RTScheduling::Current::IdType & guid
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      )) = 0;
    
    // TAO_IDL - Generated from
    // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/interface_ch.cpp:267
    
    virtual void *_tao_QueryInterface (ptr_arith_t type);
    
    virtual const char* _interface_repository_id (void) const;
  
  protected:
    Scheduler (void);
    virtual ~Scheduler (void);
    
    friend class _TAO_Scheduler_Remote_Proxy_Impl;
    friend class _TAO_Scheduler_ThruPOA_Proxy_Impl;
    friend class _TAO_Scheduler_Direct_Proxy_Impl;
  
  private:
    Scheduler (const Scheduler &);
    void operator= (const Scheduler &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_typecode/typecode_decl.cpp:44
  
  TAO_NAMESPACE_STORAGE_CLASS ::CORBA::TypeCode_ptr _tc_Scheduler;

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_module/module_ch.cpp:67

}
TAO_NAMESPACE_CLOSE // module RTScheduling

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::ThreadAction_ptr); // copying
TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::ThreadAction_ptr *); // non-copying
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, RTScheduling::ThreadAction_ptr &);

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::DistributableThread_ptr); // copying
TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::DistributableThread_ptr *); // non-copying
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, RTScheduling::DistributableThread_ptr &);

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::Current_ptr); // copying
TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::Current_ptr *); // non-copying
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, RTScheduling::Current_ptr &);

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_ch.cpp:52

TAO_RTScheduler_Export void operator<<= (CORBA::Any &, const RTScheduling::Current::UNSUPPORTED_SCHEDULING_DISCIPLINE &); // copying version
TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::Current::UNSUPPORTED_SCHEDULING_DISCIPLINE*); // noncopying version
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, RTScheduling::Current::UNSUPPORTED_SCHEDULING_DISCIPLINE *&); // deprecated
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, const RTScheduling::Current::UNSUPPORTED_SCHEDULING_DISCIPLINE *&);

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_ch.cpp:52

TAO_RTScheduler_Export void operator<<= (CORBA::Any &, const RTScheduling::Current::IdType &); // copying version
TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::Current::IdType*); // noncopying version
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, RTScheduling::Current::IdType *&); // deprecated
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, const RTScheduling::Current::IdType *&);

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_sequence/any_op_ch.cpp:52

TAO_RTScheduler_Export void operator<<= (CORBA::Any &, const RTScheduling::Current::NameList &); // copying version
TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::Current::NameList*); // noncopying version
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, RTScheduling::Current::NameList *&); // deprecated
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, const RTScheduling::Current::NameList *&);

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::ResourceManager_ptr); // copying
TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::ResourceManager_ptr *); // non-copying
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, RTScheduling::ResourceManager_ptr &);

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_interface/any_op_ch.cpp:52

TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::Scheduler_ptr); // copying
TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::Scheduler_ptr *); // non-copying
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, RTScheduling::Scheduler_ptr &);

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_exception/any_op_ch.cpp:52

TAO_RTScheduler_Export void operator<<= (CORBA::Any &, const RTScheduling::Scheduler::INCOMPATIBLE_SCHEDULING_DISCIPLINES &); // copying version
TAO_RTScheduler_Export void operator<<= (CORBA::Any &, RTScheduling::Scheduler::INCOMPATIBLE_SCHEDULING_DISCIPLINES*); // noncopying version
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, RTScheduling::Scheduler::INCOMPATIBLE_SCHEDULING_DISCIPLINES *&); // deprecated
TAO_RTScheduler_Export CORBA::Boolean operator>>= (const CORBA::Any &, const RTScheduling::Scheduler::INCOMPATIBLE_SCHEDULING_DISCIPLINES *&);

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/cdr_op.cpp:48

#ifndef __ACE_INLINE__

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_visitor_root/cdr_op.cpp:64

#endif /* __ACE_INLINE__ */

// TAO_IDL - Generated from
// C:\ACE_wrappers\TAO\TAO_IDL\be\be_codegen.cpp:1004

#if defined (__ACE_INLINE__)
#include "RTSchedulerC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include "ace/post.h"
#endif /* ifndef */

