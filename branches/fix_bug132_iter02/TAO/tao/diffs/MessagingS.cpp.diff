--- orig/MessagingS.cpp	Sun Apr 30 18:03:09 2000
+++ MessagingS.cpp	Sun Apr 30 18:06:01 2000
@@ -7,12 +7,25 @@
 // Information about TAO is available at:
 //                 http://www.cs.wustl.edu/~schmidt/TAO.html
 
+#include "tao/orbconf.h"
+
+#if (TAO_HAS_CORBA_MESSAGING == 1)
+
 #include "MessagingS.h"
+#include "Operation_Table.h"
+#include "Server_Request.h"
+#include "Stub.h"
+#include "ORB_Core.h"
+#include "Object_Adapter.h"
 
 #if !defined (__ACE_INLINE__)
 #include "MessagingS.i"
 #endif /* !defined INLINE */
 
+ACE_RCSID(tao, MessagingS, "$Id$")
+
+#if (TAO_HAS_AMI_CALLBACK == 1) || (TAO_HAS_AMI_POLLER == 1)
+
 class TAO_Messaging_ReplyHandler_Perfect_Hash_OpTable : public TAO_Perfect_Hash_OpTable
 {
 private:
@@ -20,9 +33,9 @@
 public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
 };
-/* starting time is 18:03:09 */
+/* starting time is 12:21:06 */
 /* C++ code produced by gperf version 2.8 (ACE version) */
-/* Command-line: /export/kelvar/coryan/head/ACE_wrappers/build/Linux/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_Messaging_ReplyHandler_Perfect_Hash_OpTable -N lookup  */
+/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0 -a -o -t -p -K opname_ -L C++ -Z TAO_Messaging_ReplyHandler_Perfect_Hash_OpTable -N lookup  */
 unsigned int
 TAO_Messaging_ReplyHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
 {
@@ -110,7 +123,7 @@
     }
   return 0;
 }
-/* ending time is 18:03:09 */
+/* ending time is 12:21:06 */
 static TAO_Messaging_ReplyHandler_Perfect_Hash_OpTable tao_Messaging_ReplyHandler_optable;
 
 Messaging::ReplyHandler_ptr _TAO_collocation_POA_Messaging_ReplyHandler_Stub_Factory (
@@ -118,7 +131,7 @@
   )
 {
   TAO_Stub *stub = obj->_stubobj ();
-  
+
   switch (stub->servant_orb_var ()->orb_core ()->get_collocation_strategy ())
     {
     case TAO_ORB_Core::THRU_POA:
@@ -156,14 +169,14 @@
 int _TAO_collocation_POA_Messaging_ReplyHandler_Stub_Factory_Initializer (long dummy)
 {
   ACE_UNUSED_ARG (dummy);
-  
-  _TAO_collocation_Messaging_ReplyHandler_Stub_Factory_function_pointer = 
+
+  _TAO_collocation_Messaging_ReplyHandler_Stub_Factory_function_pointer =
     _TAO_collocation_POA_Messaging_ReplyHandler_Stub_Factory;
-  
+
   return 0;
 }
 
-static int _TAO_collocation_POA_Messaging_ReplyHandler_Stub_Factory_Initializer_Scarecrow = 
+static int _TAO_collocation_POA_Messaging_ReplyHandler_Stub_Factory_Initializer_Scarecrow =
   _TAO_collocation_POA_Messaging_ReplyHandler_Stub_Factory_Initializer (ACE_reinterpret_cast (long, _TAO_collocation_POA_Messaging_ReplyHandler_Stub_Factory_Initializer));
 
 // skeleton constructor
@@ -183,7 +196,7 @@
 }
 
 void POA_Messaging::ReplyHandler::_is_a_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -195,10 +208,10 @@
   CORBA::String_var value;
   if (!((_tao_in >> value.out ())))
     ACE_THROW (CORBA::MARSHAL ());
-  
+
   _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply (ACE_TRY_ENV);
   ACE_CHECK;
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
@@ -207,7 +220,7 @@
 }
 
 void POA_Messaging::ReplyHandler::_non_existent_skel (
-    TAO_ServerRequest &_tao_server_request, 
+    TAO_ServerRequest &_tao_server_request,
     void * _tao_object_reference,
     void * /* context */,
     CORBA::Environment &ACE_TRY_ENV
@@ -216,7 +229,7 @@
   POA_Messaging::ReplyHandler *_tao_impl = (POA_Messaging::ReplyHandler *) _tao_object_reference;
   CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
   ACE_CHECK;
-  
+
   _tao_server_request.init_reply (ACE_TRY_ENV);
   ACE_CHECK;
   TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
@@ -395,6 +408,6 @@
   return this->servant_->_non_existent (ACE_TRY_ENV);
 }
 
+#endif /* TAO_HAS_AMI_CALLBACK == 1 || TAO_HAS_AMI_POLLER == 1 */
 
-
-
+#endif /* TAO_HAS_CORBA_MESSAGING == 1 */
