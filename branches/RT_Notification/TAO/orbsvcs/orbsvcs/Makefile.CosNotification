#----------------------------------------------------------------------------
#       GNU Makefile
#----------------------------------------------------------------------------
MAKEFILE        = Makefile.CosNotification
DEPENDENCY_FILE = .depend.Makefile.CosNotification
LIB_UNCHECKED   = libTAO_CosNotification.a
SHLIB_UNCHECKED = libTAO_CosNotification.$(SOEXT)

ifndef TAO_ROOT
  TAO_ROOT = $(ACE_ROOT)/TAO
endif

IDL_FILES = CosEventComm CosEventChannelAdmin CosNotification CosNotifyComm CosNotifyFilter CosNotifyChannelAdmin NotifyExt Event_Forwarder
IDL_SRC = $(foreach ext, C.cpp S.cpp, $(foreach file, $(IDL_FILES), $(file)$(ext)))



Notify = \
  CosEventCommC \
  CosEventCommS \
  CosEventChannelAdminC \
  CosEventChannelAdminS \
  CosNotificationC \
  CosNotificationS \
  CosNotifyCommC \
  CosNotifyCommS \
  CosNotifyFilterC \
  CosNotifyFilterS \
  CosNotifyChannelAdminC \
  CosNotifyChannelAdminS \
  NotifyExtC \
  NotifyExtS \
  Event_ForwarderC \
  Event_ForwarderS \
  Notify/Admin \
  Notify/AdminProperties \
  Notify/Buffering_Strategy \
  Notify/Builder \
  Notify/Consumer \
  Notify/ConsumerAdmin \
  Notify/Container_T \
  Notify/CosNotify_Initializer \
  Notify/CosNotify_Service \
  Notify/Default_Factory \
  Notify/ETCL_Filter \
  Notify/ETCL_FilterFactory \
  Notify/Event \
  Notify/EventChannel \
  Notify/EventChannelFactory \
  Notify/EventType \
  Notify/EventTypeSeq \
  Notify/Event_Manager \
  Notify/Event_Map_Entry_T \
  Notify/Event_Map_T \
  Notify/FilterAdmin \
  Notify/Find_Worker_T \
  Notify/ID_Factory \
  Notify/Method_Request \
  Notify/Method_Request_Dispatch \
  Notify/Method_Request_Dispatch_No_Filtering \
  Notify/Method_Request_Lookup \
  Notify/Method_Request_Shutdown \
  Notify/Method_Request_Updates \
  Notify/Notify_Constraint_Interpreter \
  Notify/Notify_Constraint_Visitors \
  Notify/Notify_Default_Collection_Factory \
  Notify/Notify_Default_CO_Factory \
  Notify/Notify_Default_EMO_Factory \
  Notify/Notify_Default_POA_Factory \
  Notify/Notify_EventChannelFactory_i \
  Notify/Notify_Extensions \
  Notify/Object \
  Notify/Peer \
  Notify/POA_Helper \
  Notify/Properties \
  Notify/PropertySeq \
  Notify/Property_Boolean \
  Notify/Property_T \
  Notify/Proxy \
  Notify/ProxyConsumer \
  Notify/ProxyConsumer_T \
  Notify/ProxySupplier \
  Notify/ProxySupplier_T \
  Notify/Proxy_T \
  Notify/QoSProperties \
  Notify/Reactive_Task \
  Notify/Refcountable \
  Notify/Seq_Worker_T \
  Notify/Subscription_Change_Worker \
  Notify/Supplier \
  Notify/SupplierAdmin \
  Notify/ThreadPool_Task \
  Notify/Timer_Queue \
  Notify/Timer_Reactor \
  Notify/Worker_Task \
  Notify/Any/AnyEvent \
  Notify/Any/CosEC_ProxyPushConsumer \
  Notify/Any/CosEC_ProxyPushSupplier \
  Notify/Any/ProxyPushConsumer \
  Notify/Any/ProxyPushSupplier \
  Notify/Any/PushConsumer \
  Notify/Any/PushSupplier \
  Notify/Structured/StructuredEvent \
  Notify/Structured/StructuredProxyPushConsumer \
  Notify/Structured/StructuredProxyPushSupplier \
  Notify/Structured/StructuredPushConsumer \
  Notify/Structured/StructuredPushSupplier \
  Notify/Sequence/Batch_Buffering_Strategy \
  Notify/Sequence/SequenceProxyPushConsumer \
  Notify/Sequence/SequenceProxyPushSupplier \
  Notify/Sequence/SequencePushConsumer \
  Notify/Sequence/SequencePushSupplier

ifndef ORBSVCS_COMPONENTS
  ORBSVCS_COMPONENTS = \
    Notify
endif # ORBSVCS_COMPONENTS

ifneq (,$(findstring Notify, $(ORBSVCS_COMPONENTS)))
  FILES += $(Notify)
endif # Notify

VPATH = .:Notify:Notify/Any:Notify/Sequence:Notify/Structured

ifeq (,$(TAO_ORBSVCS))
LIB   = $(LIB_UNCHECKED)
SHLIB = $(SHLIB_UNCHECKED)
else
  ifeq (Notify, $(findstring Notify, $(TAO_ORBSVCS)))
    LIB   = $(LIB_UNCHECKED)
    SHLIB = $(SHLIB_UNCHECKED)
  endif
endif

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
include $(TAO_ROOT)/rules.tao.GNU
LSRC   = $(addsuffix .cpp, $(FILES))
ifeq (,$(TAO_ORBSVCS))
BUILD += ORBSVCS_COMPONENTS
else
  ifeq (Notify, $(findstring Notify, $(TAO_ORBSVCS)))
    BUILD += ORBSVCS_COMPONENTS
  endif
endif
ACELIB = -lACE

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
include $(TAO_ROOT)/taoconfig.mk

CPPFLAGS     += -I../../orbsvcs -I../.. -I../../tao -I../../..
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_NOTIFY_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  ifneq ($(LIB),)
    CPPFLAGS += -DTAO_AS_STATIC_LIBS -DACE_AS_STATIC_LIBS
  endif
endif


LDFLAGS      += -L../../tao/PortableServer -L../../tao/DynamicAny -L../../orbsvcs/orbsvcs/ETCL -L../../orbsvcs/orbsvcs -L../../tao -L../../../ace
TAO_IDLFLAGS += -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -Wb,export_macro=TAO_Notify_Export -Wb,export_include=Notify/notify_export.h -I../.. -I$(TAO_ROOT)/orbsvcs -Ge 1 -Sc

ACE_SHLIBS = -lTAO_Svc_Utils -lTAO_ETCL -lTAO_PortableServer -lTAO_DynamicAny -lTAO $(ACELIB)

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------

.PHONY: ORBSVCS_COMPONENTS
ORBSVCS_COMPONENTS:
	@sh ../../../bin/ace_components --orbsvcs --append '$(ORBSVCS_COMPONENTS)'

compclean:
	@sh $(ACE_ROOT)/bin/ace_components --orbsvcs --remove

ADDITIONAL_IDL_TARGETS =
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .
# IDL File Directory: .

ifneq ($(ADDITIONAL_IDL_TARGETS),)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)
endif

ifneq ($(SHLIB),)
all: idl_stubs
endif

.PRECIOUS: $(foreach ext, $(IDL_EXT), $(foreach file, $(IDL_FILES), $(file)$(ext)))

realclean: clean compclean
	-$(RM) $(foreach ext, $(IDL_EXT), $(foreach file, $(IDL_FILES), $(file)$(ext)))

