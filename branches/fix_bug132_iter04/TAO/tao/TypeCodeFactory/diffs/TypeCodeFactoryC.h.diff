--- orig/TypeCodeFactoryC.h	Mon Mar 12 22:17:35 2001
+++ TypeCodeFactoryC.h	Mon Mar 12 22:49:58 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -19,8 +19,12 @@
 // Information about TAO is available at:
 //     http://www.cs.wustl.edu/~schmidt/TAO.html
 
-#ifndef _TAO_IDL_ORIG_TYPECODEFACTORYC_H_
-#define _TAO_IDL_ORIG_TYPECODEFACTORYC_H_
+#ifndef TAO_TYPECODEFACTORYC_H
+#define TAO_TYPECODEFACTORYC_H
+
+#ifndef TAO_TYPECODEFACTORY_SAFE_INCLUDE
+#error "You should not include TypeCodeFactoryC.h directly, use TCF_Loader.h"
+#endif /* !TAO_TYPECODEFACTORY_SAFE_INCLUDE */
 
 #include "ace/pre.h"
 #include "tao/corba.h"
@@ -30,7 +34,7 @@
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
 #include "typecodefactory_export.h"
-#include "../IFR_Client/InterfaceC.h"
+#include "tao/IFR_Client/InterfaceC.h"
 
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
@@ -55,123 +59,82 @@
 #pragma option push -w-rvl -w-rch -w-ccc -w-inl
 #endif /* __BORLANDC__ */
 
-TAO_NAMESPACE  CORBA
-{
-  typedef char * Identifier;
-  typedef CORBA::String_var Identifier_var;
-  typedef CORBA::String_out Identifier_out;
-    TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_Identifier;
-
-  typedef char * RepositoryId;
-  typedef CORBA::String_var RepositoryId_var;
-  typedef CORBA::String_out RepositoryId_out;
-    TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_RepositoryId;
-
-  typedef CORBA::Short ValueModifier;
-  typedef CORBA::Short_out ValueModifier_out;
-    TAO_NAMESPACE_STORAGE_CLASS CORBA::TypeCode_ptr _tc_ValueModifier;
-
-
-#if !defined (_CORBA_TYPECODEFACTORY___PTR_CH_)
-#define _CORBA_TYPECODEFACTORY___PTR_CH_
-
-  class TypeCodeFactory;
-  typedef TypeCodeFactory *TypeCodeFactory_ptr;
-  
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_TYPECODEFACTORY___VAR_CH_)
-#define _CORBA_TYPECODEFACTORY___VAR_CH_
-
-  class TAO_TypeCodeFactory_Export TypeCodeFactory_var : public TAO_Base_var
+class TAO_TypeCodeFactory_Export CORBA_TypeCodeFactory_var 
+  : public TAO_Base_var
   {
   public:
-    TypeCodeFactory_var (void); // default constructor
-    TypeCodeFactory_var (TypeCodeFactory_ptr p) : ptr_ (p) {} 
-    TypeCodeFactory_var (const TypeCodeFactory_var &); // copy constructor
-    ~TypeCodeFactory_var (void); // destructor
-    
-    TypeCodeFactory_var &operator= (TypeCodeFactory_ptr);
-    TypeCodeFactory_var &operator= (const TypeCodeFactory_var &);
-    TypeCodeFactory_ptr operator-> (void) const;
+  CORBA_TypeCodeFactory_var (void); // default constructor
+  CORBA_TypeCodeFactory_var (CORBA_TypeCodeFactory_ptr p) : ptr_ (p) {} 
+  CORBA_TypeCodeFactory_var (const CORBA_TypeCodeFactory_var &); // copy constructor
+  ~CORBA_TypeCodeFactory_var (void); // destructor
+
+  CORBA_TypeCodeFactory_var &operator= (CORBA_TypeCodeFactory_ptr);
+  CORBA_TypeCodeFactory_var &operator= (const CORBA_TypeCodeFactory_var &);
+  CORBA_TypeCodeFactory_ptr operator-> (void) const;
     
-    operator const TypeCodeFactory_ptr &() const;
-    operator TypeCodeFactory_ptr &();
+  operator const CORBA_TypeCodeFactory_ptr &() const;
+  operator CORBA_TypeCodeFactory_ptr &();
     // in, inout, out, _retn 
-    TypeCodeFactory_ptr in (void) const;
-    TypeCodeFactory_ptr &inout (void);
-    TypeCodeFactory_ptr &out (void);
-    TypeCodeFactory_ptr _retn (void);
-    TypeCodeFactory_ptr ptr (void) const;
+  CORBA_TypeCodeFactory_ptr in (void) const;
+  CORBA_TypeCodeFactory_ptr &inout (void);
+  CORBA_TypeCodeFactory_ptr &out (void);
+  CORBA_TypeCodeFactory_ptr _retn (void);
+  CORBA_TypeCodeFactory_ptr ptr (void) const;
 
   private:
-    TypeCodeFactory_ptr ptr_;
+  CORBA_TypeCodeFactory_ptr ptr_;
     // Unimplemented - prevents widening assignment.
-    TypeCodeFactory_var (const TAO_Base_var &rhs);
-    TypeCodeFactory_var &operator= (const TAO_Base_var &rhs);
+  CORBA_TypeCodeFactory_var (const TAO_Base_var &rhs);
+  CORBA_TypeCodeFactory_var &operator= (const TAO_Base_var &rhs);
   };
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_TYPECODEFACTORY___OUT_CH_)
-#define _CORBA_TYPECODEFACTORY___OUT_CH_
-
-  class TAO_TypeCodeFactory_Export TypeCodeFactory_out
+class TAO_TypeCodeFactory_Export CORBA_TypeCodeFactory_out
   {
   public:
-    TypeCodeFactory_out (TypeCodeFactory_ptr &);
-    TypeCodeFactory_out (TypeCodeFactory_var &);
-    TypeCodeFactory_out (const TypeCodeFactory_out &);
-    TypeCodeFactory_out &operator= (const TypeCodeFactory_out &);
-    TypeCodeFactory_out &operator= (const TypeCodeFactory_var &);
-    TypeCodeFactory_out &operator= (TypeCodeFactory_ptr);
-    operator TypeCodeFactory_ptr &();
-    TypeCodeFactory_ptr &ptr (void);
-    TypeCodeFactory_ptr operator-> (void);
+  CORBA_TypeCodeFactory_out (CORBA_TypeCodeFactory_ptr &);
+  CORBA_TypeCodeFactory_out (CORBA_TypeCodeFactory_var &);
+  CORBA_TypeCodeFactory_out (const CORBA_TypeCodeFactory_out &);
+  CORBA_TypeCodeFactory_out &operator= (const CORBA_TypeCodeFactory_out &);
+  CORBA_TypeCodeFactory_out &operator= (const CORBA_TypeCodeFactory_var &);
+  CORBA_TypeCodeFactory_out &operator= (CORBA_TypeCodeFactory_ptr);
+  operator CORBA_TypeCodeFactory_ptr &();
+  CORBA_TypeCodeFactory_ptr &ptr (void);
+  CORBA_TypeCodeFactory_ptr operator-> (void);
     
   private:
-    TypeCodeFactory_ptr &ptr_;
+  CORBA_TypeCodeFactory_ptr &ptr_;
   };
 
-
-#endif /* end #if !defined */
-
-
-#if !defined (_CORBA_TYPECODEFACTORY_CH_)
-#define _CORBA_TYPECODEFACTORY_CH_
-
-class TAO_TypeCodeFactory_Export TypeCodeFactory : public virtual CORBA_Object
+class TAO_TypeCodeFactory_Export CORBA_TypeCodeFactory 
+  : public virtual CORBA_Object
   {
   public:
   #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
-    typedef TypeCodeFactory_ptr _ptr_type;
-    typedef TypeCodeFactory_var _var_type;
+    typedef CORBA_TypeCodeFactory_ptr _ptr_type;
+    typedef CORBA_TypeCodeFactory_var _var_type;
   #endif /* ! __GNUC__ || g++ >= 2.8 */
 
     // the static operations
-    static TypeCodeFactory_ptr _duplicate (TypeCodeFactory_ptr obj);
-    static TypeCodeFactory_ptr _narrow (
+    static CORBA_TypeCodeFactory_ptr _duplicate (CORBA_TypeCodeFactory_ptr obj);
+    static CORBA_TypeCodeFactory_ptr _narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &env =
           TAO_default_environment ()
       );
-    static TypeCodeFactory_ptr _unchecked_narrow (
+    static CORBA_TypeCodeFactory_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
-        CORBA::Environment &ACE_TRY_ENV = 
+        CORBA::Environment &env =
           TAO_default_environment ()
       );
-    static TypeCodeFactory_ptr _nil (void)
+    static CORBA_TypeCodeFactory_ptr _nil (void)
       {
-        return (TypeCodeFactory_ptr)0;
+        return (CORBA_TypeCodeFactory_ptr)0;
       }
 
     virtual CORBA::TypeCode_ptr create_struct_tc (
         const char * id,
         const char * name,
-        const IR::StructMemberSeq & members,
+        const IR_StructMemberSeq & members,
         CORBA::Environment &ACE_TRY_ENV = 
           TAO_default_environment ()
       )
@@ -183,7 +146,7 @@
         const char * id,
         const char * name,
         CORBA::TypeCode_ptr discriminator_type,
-        const IR::UnionMemberSeq & members,
+        const IR_UnionMemberSeq & members,
         CORBA::Environment &ACE_TRY_ENV = 
           TAO_default_environment ()
       )
@@ -194,7 +157,7 @@
     virtual CORBA::TypeCode_ptr create_enum_tc (
         const char * id,
         const char * name,
-        const IR::EnumMemberSeq & members,
+        const IR_EnumMemberSeq & members,
         CORBA::Environment &ACE_TRY_ENV = 
           TAO_default_environment ()
       )
@@ -216,7 +179,7 @@
     virtual CORBA::TypeCode_ptr create_exception_tc (
         const char * id,
         const char * name,
-        const IR::StructMemberSeq & members,
+        const IR_StructMemberSeq & members,
         CORBA::Environment &ACE_TRY_ENV = 
           TAO_default_environment ()
       )
@@ -287,7 +250,7 @@
         const char * name,
         CORBA::ValueModifier type_modifier,
         CORBA::TypeCode_ptr concrete_base,
-        const IR::ValueMemberSeq & members,
+        const IR_ValueMemberSeq & members,
         CORBA::Environment &ACE_TRY_ENV = 
           TAO_default_environment ()
       )
@@ -370,30 +333,13 @@
     virtual const char* _interface_repository_id (void) const;
 
   protected:
-    TypeCodeFactory ();
-    
-    virtual ~TypeCodeFactory (void);
+    CORBA_TypeCodeFactory (void);
+    virtual ~CORBA_TypeCodeFactory (void);
   private:
-    TypeCodeFactory (const TypeCodeFactory &);
-    void operator= (const TypeCodeFactory &);
+    CORBA_TypeCodeFactory (const CORBA_TypeCodeFactory &);
+    void operator= (const CORBA_TypeCodeFactory &);
   };
 
-
-#endif /* end #if !defined */
-
-
-}
-TAO_NAMESPACE_CLOSE // module CORBA
-
-// Proxy Broker Factory function pointer declarations.
-
-
-#ifndef __ACE_INLINE__
-
-
-#endif /* __ACE_INLINE__ */
-
-
 #if defined (__ACE_INLINE__)
 #include "TypeCodeFactoryC.inl"
 #endif /* defined INLINE */
@@ -407,4 +353,4 @@
 #endif /* __BORLANDC__ */
 
 #include "ace/post.h"
-#endif /* ifndef */
+#endif /* TAO_TYPECODEFACTORYC_H */
