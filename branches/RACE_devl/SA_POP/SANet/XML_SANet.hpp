/* $Id$
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please contact the current XSC maintainer:
 *             Will Otte <wotte@dre.vanderbilt.edu>
 */

// Fix for Borland compilers, which seem to have a broken
// <string> include.
#ifdef __BORLANDC__
# include <string.h>
#endif

#ifndef XML_SANET_HPP
#define XML_SANET_HPP

// Forward declarations.
//
namespace SANet
{
  namespace XML
  {
    class CondKind;
    class TaskNode;
    class CondNode;
    class PrecondLink;
    class EffectLink;
    class Network;
  }
}

#include <memory>
#include <vector>
#include "XMLSchema/Types.hpp"

namespace SANet
{
  namespace XML
  {
    class CondKind : public ::XSCRT::Type
    {
      public:
      CondKind (::XSCRT::XML::Element< wchar_t > const&);
      CondKind (::XSCRT::XML::Attribute< wchar_t > const&);

      static CondKind const ENVIRON;
      static CondKind const SYSTEM;
      static CondKind const DATA;

      enum Value
      {
        ENVIRON_l, SYSTEM_l, DATA_l
      };


      Value
      integral () const;

      friend bool 
      operator== (CondKind const& a, CondKind const& b);

      friend bool 
      operator!= (CondKind const& a, CondKind const& b);

      private:
      CondKind (Value v);

      Value v_;
    };

    bool operator== (CondKind const &a, CondKind const &b);

    bool operator!= (CondKind const &a, CondKind const &b);


    class TaskNode : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      // nodeID
      // 
      public:
      ::XMLSchema::int_ const& nodeID () const;
      void nodeID (::XMLSchema::int_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::int_ > nodeID_;

      // name
      // 
      public:
      ::XMLSchema::string< wchar_t > const& name () const;
      void name (::XMLSchema::string< wchar_t > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< wchar_t > > name_;

      // priorProb
      // 
      public:
      ::XMLSchema::double_ const& priorProb () const;
      void priorProb (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > priorProb_;

      // attenFactor
      // 
      public:
      ::XMLSchema::double_ const& attenFactor () const;
      void attenFactor (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > attenFactor_;

      // cost
      // 
      public:
      ::XMLSchema::double_ const& cost () const;
      void cost (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > cost_;

      public:
      TaskNode (::XMLSchema::int_ const& nodeID__,
                ::XMLSchema::string< wchar_t > const& name__,
                ::XMLSchema::double_ const& priorProb__,
                ::XMLSchema::double_ const& attenFactor__,
                ::XMLSchema::double_ const& cost__);

      TaskNode (::XSCRT::XML::Element< wchar_t > const&);
      TaskNode (TaskNode const& s);

      TaskNode&
      operator= (TaskNode const& s);

      private:
      char regulator__;
    };


    class CondNode : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      // nodeID
      // 
      public:
      ::XMLSchema::int_ const& nodeID () const;
      void nodeID (::XMLSchema::int_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::int_ > nodeID_;

      // name
      // 
      public:
      ::XMLSchema::string< wchar_t > const& name () const;
      void name (::XMLSchema::string< wchar_t > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< wchar_t > > name_;

      // probTrue
      // 
      public:
      ::XMLSchema::double_ const& probTrue () const;
      void probTrue (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > probTrue_;

      // utility
      // 
      public:
      ::XMLSchema::double_ const& utility () const;
      void utility (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > utility_;

      // kind
      // 
      public:
      ::SANet::XML::CondKind const& kind () const;
      void kind (::SANet::XML::CondKind const& );

      protected:
      ::std::auto_ptr< ::SANet::XML::CondKind > kind_;

      // attenFactor
      // 
      public:
      ::XMLSchema::double_ const& attenFactor () const;
      void attenFactor (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > attenFactor_;

      public:
      CondNode (::XMLSchema::int_ const& nodeID__,
                ::XMLSchema::string< wchar_t > const& name__,
                ::XMLSchema::double_ const& probTrue__,
                ::XMLSchema::double_ const& utility__,
                ::SANet::XML::CondKind const& kind__,
                ::XMLSchema::double_ const& attenFactor__);

      CondNode (::XSCRT::XML::Element< wchar_t > const&);
      CondNode (CondNode const& s);

      CondNode&
      operator= (CondNode const& s);

      private:
      char regulator__;
    };


    class PrecondLink : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      // condID
      // 
      public:
      ::XMLSchema::int_ const& condID () const;
      void condID (::XMLSchema::int_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::int_ > condID_;

      // taskID
      // 
      public:
      ::XMLSchema::int_ const& taskID () const;
      void taskID (::XMLSchema::int_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::int_ > taskID_;

      // portID
      // 
      public:
      ::XMLSchema::string< wchar_t > const& portID () const;
      void portID (::XMLSchema::string< wchar_t > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< wchar_t > > portID_;

      // trueProb
      // 
      public:
      ::XMLSchema::double_ const& trueProb () const;
      void trueProb (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > trueProb_;

      // falseProb
      // 
      public:
      ::XMLSchema::double_ const& falseProb () const;
      void falseProb (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > falseProb_;

      public:
      PrecondLink (::XMLSchema::int_ const& condID__,
                   ::XMLSchema::int_ const& taskID__,
                   ::XMLSchema::string< wchar_t > const& portID__,
                   ::XMLSchema::double_ const& trueProb__,
                   ::XMLSchema::double_ const& falseProb__);

      PrecondLink (::XSCRT::XML::Element< wchar_t > const&);
      PrecondLink (PrecondLink const& s);

      PrecondLink&
      operator= (PrecondLink const& s);

      private:
      char regulator__;
    };


    class EffectLink : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      // taskID
      // 
      public:
      ::XMLSchema::int_ const& taskID () const;
      void taskID (::XMLSchema::int_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::int_ > taskID_;

      // condID
      // 
      public:
      ::XMLSchema::int_ const& condID () const;
      void condID (::XMLSchema::int_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::int_ > condID_;

      // portID
      // 
      public:
      ::XMLSchema::string< wchar_t > const& portID () const;
      void portID (::XMLSchema::string< wchar_t > const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::string< wchar_t > > portID_;

      // weight
      // 
      public:
      ::XMLSchema::double_ const& weight () const;
      void weight (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > weight_;

      public:
      EffectLink (::XMLSchema::int_ const& taskID__,
                  ::XMLSchema::int_ const& condID__,
                  ::XMLSchema::string< wchar_t > const& portID__,
                  ::XMLSchema::double_ const& weight__);

      EffectLink (::XSCRT::XML::Element< wchar_t > const&);
      EffectLink (EffectLink const& s);

      EffectLink&
      operator= (EffectLink const& s);

      private:
      char regulator__;
    };


    class Network : public ::XSCRT::Type
    {
      typedef ::XSCRT::Type Base;

      // defaultAttenFactor
      // 
      public:
      ::XMLSchema::double_ const& defaultAttenFactor () const;
      void defaultAttenFactor (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > defaultAttenFactor_;

      // defaultTaskCost
      // 
      public:
      ::XMLSchema::double_ const& defaultTaskCost () const;
      void defaultTaskCost (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > defaultTaskCost_;

      // defaultCondUtil
      // 
      public:
      ::XMLSchema::double_ const& defaultCondUtil () const;
      void defaultCondUtil (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > defaultCondUtil_;

      // defaultCondProbTrue
      // 
      public:
      ::XMLSchema::double_ const& defaultCondProbTrue () const;
      void defaultCondProbTrue (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > defaultCondProbTrue_;

      // linkThresh
      // 
      public:
      ::XMLSchema::double_ const& linkThresh () const;
      void linkThresh (::XMLSchema::double_ const& );

      protected:
      ::std::auto_ptr< ::XMLSchema::double_ > linkThresh_;

      // taskNode
      // 
      public:
      typedef ::std::vector< ::SANet::XML::TaskNode >::iterator taskNode_iterator;
      typedef ::std::vector< ::SANet::XML::TaskNode >::const_iterator taskNode_const_iterator;
      taskNode_iterator begin_taskNode ();
      taskNode_iterator end_taskNode ();
      taskNode_const_iterator begin_taskNode () const;
      taskNode_const_iterator end_taskNode () const;
      void add_taskNode (::SANet::XML::TaskNode const& );
      size_t count_taskNode (void) const;

      protected:
      ::std::vector< ::SANet::XML::TaskNode > taskNode_;

      // condNode
      // 
      public:
      typedef ::std::vector< ::SANet::XML::CondNode >::iterator condNode_iterator;
      typedef ::std::vector< ::SANet::XML::CondNode >::const_iterator condNode_const_iterator;
      condNode_iterator begin_condNode ();
      condNode_iterator end_condNode ();
      condNode_const_iterator begin_condNode () const;
      condNode_const_iterator end_condNode () const;
      void add_condNode (::SANet::XML::CondNode const& );
      size_t count_condNode (void) const;

      protected:
      ::std::vector< ::SANet::XML::CondNode > condNode_;

      // precondLink
      // 
      public:
      typedef ::std::vector< ::SANet::XML::PrecondLink >::iterator precondLink_iterator;
      typedef ::std::vector< ::SANet::XML::PrecondLink >::const_iterator precondLink_const_iterator;
      precondLink_iterator begin_precondLink ();
      precondLink_iterator end_precondLink ();
      precondLink_const_iterator begin_precondLink () const;
      precondLink_const_iterator end_precondLink () const;
      void add_precondLink (::SANet::XML::PrecondLink const& );
      size_t count_precondLink (void) const;

      protected:
      ::std::vector< ::SANet::XML::PrecondLink > precondLink_;

      // effectLink
      // 
      public:
      typedef ::std::vector< ::SANet::XML::EffectLink >::iterator effectLink_iterator;
      typedef ::std::vector< ::SANet::XML::EffectLink >::const_iterator effectLink_const_iterator;
      effectLink_iterator begin_effectLink ();
      effectLink_iterator end_effectLink ();
      effectLink_const_iterator begin_effectLink () const;
      effectLink_const_iterator end_effectLink () const;
      void add_effectLink (::SANet::XML::EffectLink const& );
      size_t count_effectLink (void) const;

      protected:
      ::std::vector< ::SANet::XML::EffectLink > effectLink_;

      public:
      Network (::XMLSchema::double_ const& defaultAttenFactor__,
               ::XMLSchema::double_ const& defaultTaskCost__,
               ::XMLSchema::double_ const& defaultCondUtil__,
               ::XMLSchema::double_ const& defaultCondProbTrue__,
               ::XMLSchema::double_ const& linkThresh__);

      Network (::XSCRT::XML::Element< wchar_t > const&);
      Network (Network const& s);

      Network&
      operator= (Network const& s);

      private:
      char regulator__;
    };
  }
}

namespace SANet
{
  namespace XML
  {
    ::SANet::XML::Network
    network (xercesc::DOMDocument const*);
  }
}

#include "XMLSchema/Traversal.hpp"

namespace SANet
{
  namespace XML
  {
    namespace Traversal
    {
      typedef
      ::XMLSchema::Traversal::Traverser< ::SANet::XML::CondKind >
      CondKind;

      struct TaskNode : ::XMLSchema::Traversal::Traverser< ::SANet::XML::TaskNode >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        nodeID (Type&);

        virtual void
        nodeID (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        priorProb (Type&);

        virtual void
        priorProb (Type const&);

        virtual void
        attenFactor (Type&);

        virtual void
        attenFactor (Type const&);

        virtual void
        cost (Type&);

        virtual void
        cost (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct CondNode : ::XMLSchema::Traversal::Traverser< ::SANet::XML::CondNode >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        nodeID (Type&);

        virtual void
        nodeID (Type const&);

        virtual void
        name (Type&);

        virtual void
        name (Type const&);

        virtual void
        probTrue (Type&);

        virtual void
        probTrue (Type const&);

        virtual void
        utility (Type&);

        virtual void
        utility (Type const&);

        virtual void
        kind (Type&);

        virtual void
        kind (Type const&);

        virtual void
        attenFactor (Type&);

        virtual void
        attenFactor (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct PrecondLink : ::XMLSchema::Traversal::Traverser< ::SANet::XML::PrecondLink >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        condID (Type&);

        virtual void
        condID (Type const&);

        virtual void
        taskID (Type&);

        virtual void
        taskID (Type const&);

        virtual void
        portID (Type&);

        virtual void
        portID (Type const&);

        virtual void
        trueProb (Type&);

        virtual void
        trueProb (Type const&);

        virtual void
        falseProb (Type&);

        virtual void
        falseProb (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct EffectLink : ::XMLSchema::Traversal::Traverser< ::SANet::XML::EffectLink >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        taskID (Type&);

        virtual void
        taskID (Type const&);

        virtual void
        condID (Type&);

        virtual void
        condID (Type const&);

        virtual void
        portID (Type&);

        virtual void
        portID (Type const&);

        virtual void
        weight (Type&);

        virtual void
        weight (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };

      struct Network : ::XMLSchema::Traversal::Traverser< ::SANet::XML::Network >
      {
        virtual void
        traverse (Type&);

        virtual void
        traverse (Type const&);

        virtual void
        pre (Type&);

        virtual void
        pre (Type const&);

        virtual void
        defaultAttenFactor (Type&);

        virtual void
        defaultAttenFactor (Type const&);

        virtual void
        defaultTaskCost (Type&);

        virtual void
        defaultTaskCost (Type const&);

        virtual void
        defaultCondUtil (Type&);

        virtual void
        defaultCondUtil (Type const&);

        virtual void
        defaultCondProbTrue (Type&);

        virtual void
        defaultCondProbTrue (Type const&);

        virtual void
        linkThresh (Type&);

        virtual void
        linkThresh (Type const&);

        virtual void
        taskNode (Type&);

        virtual void
        taskNode (Type const&);

        virtual void
        taskNode_pre (Type&);

        virtual void
        taskNode_pre (Type const&);

        virtual void
        taskNode_next (Type&);

        virtual void
        taskNode_next (Type const&);

        virtual void
        taskNode_post (Type&);

        virtual void
        taskNode_post (Type const&);

        virtual void
        condNode (Type&);

        virtual void
        condNode (Type const&);

        virtual void
        condNode_pre (Type&);

        virtual void
        condNode_pre (Type const&);

        virtual void
        condNode_next (Type&);

        virtual void
        condNode_next (Type const&);

        virtual void
        condNode_post (Type&);

        virtual void
        condNode_post (Type const&);

        virtual void
        precondLink (Type&);

        virtual void
        precondLink (Type const&);

        virtual void
        precondLink_pre (Type&);

        virtual void
        precondLink_pre (Type const&);

        virtual void
        precondLink_next (Type&);

        virtual void
        precondLink_next (Type const&);

        virtual void
        precondLink_post (Type&);

        virtual void
        precondLink_post (Type const&);

        virtual void
        effectLink (Type&);

        virtual void
        effectLink (Type const&);

        virtual void
        effectLink_pre (Type&);

        virtual void
        effectLink_pre (Type const&);

        virtual void
        effectLink_next (Type&);

        virtual void
        effectLink_next (Type const&);

        virtual void
        effectLink_post (Type&);

        virtual void
        effectLink_post (Type const&);

        virtual void
        post (Type&);

        virtual void
        post (Type const&);
      };
    }
  }
}

#include "XMLSchema/Writer.hpp"

namespace SANet
{
  namespace XML
  {
    namespace Writer
    {
      struct CondKind : Traversal::CondKind, 
      virtual ::XSCRT::Writer< wchar_t >
      {
        CondKind (::XSCRT::XML::Element< wchar_t >&);

        virtual void 
        traverse (Type &o)
        {
          this->traverse (const_cast <Type const &> (o));
        }

        virtual void
        traverse (Type const&);

        protected:
        CondKind ();
      };

      struct TaskNode : Traversal::TaskNode, 
      virtual ::XSCRT::Writer< wchar_t >
      {
        typedef ::SANet::XML::TaskNode Type;
        TaskNode (::XSCRT::XML::Element< wchar_t >&);

        virtual void 
        traverse (Type &o)
        {

          this->traverse (const_cast <Type const &> (o));
        }


        virtual void
        traverse (Type const&);

        virtual void 
        nodeID (Type &o)
        {

          this->nodeID (const_cast <Type const &> (o));
        }


        virtual void
        nodeID (Type const&);

        virtual void 
        name (Type &o)
        {

          this->name (const_cast <Type const &> (o));
        }


        virtual void
        name (Type const&);

        virtual void 
        priorProb (Type &o)
        {

          this->priorProb (const_cast <Type const &> (o));
        }


        virtual void
        priorProb (Type const&);

        virtual void 
        attenFactor (Type &o)
        {

          this->attenFactor (const_cast <Type const &> (o));
        }


        virtual void
        attenFactor (Type const&);

        virtual void 
        cost (Type &o)
        {

          this->cost (const_cast <Type const &> (o));
        }


        virtual void
        cost (Type const&);

        protected:
        TaskNode ();
      };

      struct CondNode : Traversal::CondNode, 
      virtual ::XSCRT::Writer< wchar_t >
      {
        typedef ::SANet::XML::CondNode Type;
        CondNode (::XSCRT::XML::Element< wchar_t >&);

        virtual void 
        traverse (Type &o)
        {

          this->traverse (const_cast <Type const &> (o));
        }


        virtual void
        traverse (Type const&);

        virtual void 
        nodeID (Type &o)
        {

          this->nodeID (const_cast <Type const &> (o));
        }


        virtual void
        nodeID (Type const&);

        virtual void 
        name (Type &o)
        {

          this->name (const_cast <Type const &> (o));
        }


        virtual void
        name (Type const&);

        virtual void 
        probTrue (Type &o)
        {

          this->probTrue (const_cast <Type const &> (o));
        }


        virtual void
        probTrue (Type const&);

        virtual void 
        utility (Type &o)
        {

          this->utility (const_cast <Type const &> (o));
        }


        virtual void
        utility (Type const&);

        virtual void 
        kind (Type &o)
        {

          this->kind (const_cast <Type const &> (o));
        }


        virtual void
        kind (Type const&);

        virtual void 
        attenFactor (Type &o)
        {

          this->attenFactor (const_cast <Type const &> (o));
        }


        virtual void
        attenFactor (Type const&);

        protected:
        CondNode ();
      };

      struct PrecondLink : Traversal::PrecondLink, 
      virtual ::XSCRT::Writer< wchar_t >
      {
        typedef ::SANet::XML::PrecondLink Type;
        PrecondLink (::XSCRT::XML::Element< wchar_t >&);

        virtual void 
        traverse (Type &o)
        {

          this->traverse (const_cast <Type const &> (o));
        }


        virtual void
        traverse (Type const&);

        virtual void 
        condID (Type &o)
        {

          this->condID (const_cast <Type const &> (o));
        }


        virtual void
        condID (Type const&);

        virtual void 
        taskID (Type &o)
        {

          this->taskID (const_cast <Type const &> (o));
        }


        virtual void
        taskID (Type const&);

        virtual void 
        portID (Type &o)
        {

          this->portID (const_cast <Type const &> (o));
        }


        virtual void
        portID (Type const&);

        virtual void 
        trueProb (Type &o)
        {

          this->trueProb (const_cast <Type const &> (o));
        }


        virtual void
        trueProb (Type const&);

        virtual void 
        falseProb (Type &o)
        {

          this->falseProb (const_cast <Type const &> (o));
        }


        virtual void
        falseProb (Type const&);

        protected:
        PrecondLink ();
      };

      struct EffectLink : Traversal::EffectLink, 
      virtual ::XSCRT::Writer< wchar_t >
      {
        typedef ::SANet::XML::EffectLink Type;
        EffectLink (::XSCRT::XML::Element< wchar_t >&);

        virtual void 
        traverse (Type &o)
        {

          this->traverse (const_cast <Type const &> (o));
        }


        virtual void
        traverse (Type const&);

        virtual void 
        taskID (Type &o)
        {

          this->taskID (const_cast <Type const &> (o));
        }


        virtual void
        taskID (Type const&);

        virtual void 
        condID (Type &o)
        {

          this->condID (const_cast <Type const &> (o));
        }


        virtual void
        condID (Type const&);

        virtual void 
        portID (Type &o)
        {

          this->portID (const_cast <Type const &> (o));
        }


        virtual void
        portID (Type const&);

        virtual void 
        weight (Type &o)
        {

          this->weight (const_cast <Type const &> (o));
        }


        virtual void
        weight (Type const&);

        protected:
        EffectLink ();
      };

      struct Network : Traversal::Network, 
      virtual ::XSCRT::Writer< wchar_t >
      {
        typedef ::SANet::XML::Network Type;
        Network (::XSCRT::XML::Element< wchar_t >&);

        virtual void 
        traverse (Type &o)
        {

          this->traverse (const_cast <Type const &> (o));
        }


        virtual void
        traverse (Type const&);

        virtual void 
        defaultAttenFactor (Type &o)
        {

          this->defaultAttenFactor (const_cast <Type const &> (o));
        }


        virtual void
        defaultAttenFactor (Type const&);

        virtual void 
        defaultTaskCost (Type &o)
        {

          this->defaultTaskCost (const_cast <Type const &> (o));
        }


        virtual void
        defaultTaskCost (Type const&);

        virtual void 
        defaultCondUtil (Type &o)
        {

          this->defaultCondUtil (const_cast <Type const &> (o));
        }


        virtual void
        defaultCondUtil (Type const&);

        virtual void 
        defaultCondProbTrue (Type &o)
        {

          this->defaultCondProbTrue (const_cast <Type const &> (o));
        }


        virtual void
        defaultCondProbTrue (Type const&);

        virtual void 
        linkThresh (Type &o)
        {

          this->linkThresh (const_cast <Type const &> (o));
        }


        virtual void
        linkThresh (Type const&);

        virtual void 
        taskNode_pre (Type &o)
        {

          this->taskNode_pre (const_cast <Type const &> (o));
        }


        virtual void
        taskNode_pre (Type const&);

        virtual void 
        taskNode_next (Type &o)
        {

          this->taskNode_next (const_cast <Type const &> (o));
        }


        virtual void
        taskNode_next (Type const&);

        virtual void 
        taskNode_post (Type &o)
        {

          this->taskNode_post (const_cast <Type const &> (o));
        }


        virtual void
        taskNode_post (Type const&);

        virtual void 
        condNode_pre (Type &o)
        {

          this->condNode_pre (const_cast <Type const &> (o));
        }


        virtual void
        condNode_pre (Type const&);

        virtual void 
        condNode_next (Type &o)
        {

          this->condNode_next (const_cast <Type const &> (o));
        }


        virtual void
        condNode_next (Type const&);

        virtual void 
        condNode_post (Type &o)
        {

          this->condNode_post (const_cast <Type const &> (o));
        }


        virtual void
        condNode_post (Type const&);

        virtual void 
        precondLink_pre (Type &o)
        {

          this->precondLink_pre (const_cast <Type const &> (o));
        }


        virtual void
        precondLink_pre (Type const&);

        virtual void 
        precondLink_next (Type &o)
        {

          this->precondLink_next (const_cast <Type const &> (o));
        }


        virtual void
        precondLink_next (Type const&);

        virtual void 
        precondLink_post (Type &o)
        {

          this->precondLink_post (const_cast <Type const &> (o));
        }


        virtual void
        precondLink_post (Type const&);

        virtual void 
        effectLink_pre (Type &o)
        {

          this->effectLink_pre (const_cast <Type const &> (o));
        }


        virtual void
        effectLink_pre (Type const&);

        virtual void 
        effectLink_next (Type &o)
        {

          this->effectLink_next (const_cast <Type const &> (o));
        }


        virtual void
        effectLink_next (Type const&);

        virtual void 
        effectLink_post (Type &o)
        {

          this->effectLink_post (const_cast <Type const &> (o));
        }


        virtual void
        effectLink_post (Type const&);

        protected:
        Network ();
      };
    }
  }
}

namespace SANet
{
  namespace XML
  {
    void
    network (::SANet::XML::Network const&, xercesc::DOMDocument*);
  }
}

#endif // XML_SANET_HPP
