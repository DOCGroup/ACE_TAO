// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#include "Plan_Analyzer_exec.h"
#include "ciao/CIAO_common.h"

namespace CIAO
{
  namespace RACE
  {
    namespace CIDL_Plan_Analyzer_Impl
    {
      //==================================================================
      // Facet Executor Implementation Class:   PlanIngress_exec_i
      //==================================================================

      PlanIngress_exec_i::PlanIngress_exec_i (Plan_Analyzer_exec_i &comp)
        : comp_ (comp)
      {
      }

      PlanIngress_exec_i::~PlanIngress_exec_i (void)
      {
      }

      // Operations from ::CIAO::RACE::PlanIngress

      void
      PlanIngress_exec_i::analyze_plan (const ::CIAO::RACE::Plan_Actions & plan_action
                                        ACE_ENV_ARG_DECL_NOT_USED)
        ACE_THROW_SPEC ((CORBA::SystemException))
      {
        PlannerFlow flow;
        const ::Deployment::DeploymentPlan &plan = plan_action [0].plan;

        for (CORBA::ULong i = 0;
             i < plan.infoProperty.length ();
             ++i)
          {
            ACE_DEBUG ((LM_DEBUG, "RACE::infoprop: %s\n",
                        plan.infoProperty[i].name.in ()));

            if (ACE_OS::strcmp (plan.infoProperty[i].name.in (),
                                "RACEAllocation") == 0)
              {
                const char *value;

                plan.infoProperty[i].value >>= value;

                ACE_DEBUG ((LM_DEBUG, "RACEAllocation: %s\n",
                            value));

                if (ACE_OS::strcmp (value,
                                    "Static") != 0)
                  {
                    ACE_ERROR ((LM_ERROR, "RACE::Allocation::Analyzer:: "
                                "Found dynamic allocation request, queuing planner...\n"));

                    FlowItem item;
                    item.planner = "ImportancePlanner";

                    flow.length (1);
                    flow[0] = item;
                  }
                else
                  {
                    ACE_ERROR ((LM_ERROR, "RACE::Allocation::Analyzer::"
                                "Explicit static request, queueing planner...."));
                    FlowItem item;
                    item.planner = "StaticPlanner";
                    flow.length (1);
                    flow[0] = item;
                  }

              }
          }

        if (flow.length () == 0)
          {
            ACE_DEBUG ((LM_DEBUG, "RACE::Allocation::Analayzer::"
                        "Implicit static requrest, queueing planner...."));
            FlowItem item;
            item.planner = "StaticPlanner";
            flow.length (1);
            flow[0] = item;
          }

        this->comp_.context_->get_connection_planner_manager_i ()
          ->execute_planners (plan_action, flow);
      }

      //==================================================================
      // Component Executor Implementation Class:   Plan_Analyzer_exec_i
      //==================================================================

      Plan_Analyzer_exec_i::Plan_Analyzer_exec_i (void)
      {
      }

      Plan_Analyzer_exec_i::~Plan_Analyzer_exec_i (void)
      {
      }

      // Supported or inherited operations.

      // Attribute operations.

      ::CIAO::RACE::RACE_Classifications *
      Plan_Analyzer_exec_i::classes (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((CORBA::SystemException))
      {
        RACE_Classifications_var retval (new RACE_Classifications (0));
        retval->length (0);
        return retval._retn ();
      }

      // Port operations.

      ::CIAO::RACE::CCM_PlanIngress_ptr
      Plan_Analyzer_exec_i::get_plan_ingress (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((CORBA::SystemException))
      {
        return new PlanIngress_exec_i (*this);
      }

      // Operations from Components::SessionComponent

      void
      Plan_Analyzer_exec_i::set_session_context (
        ::Components::SessionContext_ptr ctx
        ACE_ENV_ARG_DECL)
      ACE_THROW_SPEC ((
                        ::CORBA::SystemException,
                        ::Components::CCMException))
      {
        this->context_ =
        Plan_Analyzer_Context::_narrow (
          ctx
          ACE_ENV_ARG_PARAMETER);
        ACE_CHECK;

        if (this->context_ == 0)
        {
          ACE_THROW (CORBA::INTERNAL ());
        }
      }

      void
      Plan_Analyzer_exec_i::ciao_preactivate (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((
                        ::CORBA::SystemException,
                        ::Components::CCMException))
      {
        // Your code here.
      }

      void
      Plan_Analyzer_exec_i::configuration_complete (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((
                        ::CORBA::SystemException,
                        ::Components::CCMException))
      {
        // Your code here.
      }

      void
      Plan_Analyzer_exec_i::ccm_activate (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((
                        ::CORBA::SystemException,
                        ::Components::CCMException))
      {
        // Your code here.
      }

      void
      Plan_Analyzer_exec_i::ccm_passivate (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((
                        ::CORBA::SystemException,
                        ::Components::CCMException))
      {
        // Your code here.
      }

      void
      Plan_Analyzer_exec_i::ccm_remove (
        ACE_ENV_SINGLE_ARG_DECL_NOT_USED)
      ACE_THROW_SPEC ((
                        ::CORBA::SystemException,
                        ::Components::CCMException))
      {
        // Your code here.
      }

      //==================================================================
      // Home Executor Implementation Class:   Plan_Analyzer_Home_exec_i
      //==================================================================

      Plan_Analyzer_Home_exec_i::Plan_Analyzer_Home_exec_i (void)
      {
      }

      Plan_Analyzer_Home_exec_i::~Plan_Analyzer_Home_exec_i (void)
      {
      }

      // Supported or inherited operations.

      // Home operations.

      // Factory and finder operations.

      // Attribute operations.

      // Implicit operations.

      ::Components::EnterpriseComponent_ptr
      Plan_Analyzer_Home_exec_i::create (
        ACE_ENV_SINGLE_ARG_DECL)
      ACE_THROW_SPEC ((
                        ::CORBA::SystemException,
                        ::Components::CCMException))
      {
        ::Components::EnterpriseComponent_ptr retval =
        ::Components::EnterpriseComponent::_nil ();

        ACE_NEW_THROW_EX (
          retval,
          Plan_Analyzer_exec_i,
          CORBA::NO_MEMORY ());
        ACE_CHECK_RETURN (::Components::EnterpriseComponent::_nil ());

        return retval;
      }

      extern "C" PLAN_ANALYZER_EXEC_Export ::Components::HomeExecutorBase_ptr
      create_CIAO_RACE_Plan_Analyzer_Home_Impl (void)
      {
        ::Components::HomeExecutorBase_ptr retval =
        ::Components::HomeExecutorBase::_nil ();

        ACE_NEW_RETURN (
          retval,
          Plan_Analyzer_Home_exec_i,
          ::Components::HomeExecutorBase::_nil ());

        return retval;
      }
    }
  }
}
