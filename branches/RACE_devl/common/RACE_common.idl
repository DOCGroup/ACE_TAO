#ifndef RACE_COMMON_IDL
#define RACE_COMMON_IDL

module CIAO
{
  module RACE
    {

      /// Create a UUID type.
      typedef string UUID;

      /// Creating a type for human readable name or ID.
      typedef string label;

      /// Describes what action to perform for the given operational
      /// string.
      enum Action
      {
        TEARDOWN,
        DEPLOY
      };

//       enum ConfiguratorType
//       {
//         APPLICATION,
//         MIDDLEWARE,
//         OS,
//         OTHER
//       };



      /// Sequence of configurator's ID.
      //      typedef <UUID> Configurator_seq;

      /// Sequence of allocator's ID.
      //      typedef <UUID> Allocator_seq;

      /// Defines (1) the allocator that is to be used for this operational
      /// string and (2) the configurators that are to be employed for this
      /// operational string.
//       struct Composition
//       {
//         /// Sequence of configurators that are to be invoked for a given
//         /// operational string.
//         Configurator_seq configurators;

//         ///
//         Allocator_seq allocators;
//       };

//       struct Plan_Action
//       {
//         Action command;
//         Deployment::DeploymentPlan plan;
//         Deployment::PackageConfiguration package;
//       };

//       typedef string RACE_Classification;
//       typedef sequence <RACE_Classification> RACE_Classifications;

//       struct FlowItem
//       {
//         string planner;
//         RACE_Classification classification;
//       };

//       typedef sequence <FlowItem> PlannerFlow;

//       struct Plan_Action
//       {
//         Action command;
//         Deployment::DeploymentPlan plan;
//         Deployment::PackageConfiguration package;
//       };

//       typedef sequence<Plan_Action> Plan_Actions;

    };
};

#endif /* RACE_COMMON_IDL */
