// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#include "FirstFit_exec.h"
#include "ciao/CIAO_common.h"
#include "tools/Config_Handlers/DD_Handler.h"

#include "Deployment/Deployment_TargetDataC.h"

namespace CIAO
{
  namespace RACE
  {
    namespace Allocator
    {
      namespace CIDL_First_Fit_Allocator_Impl
      {
        //==================================================================
        // Facet Executor Implementation Class:   Allocation_exec_i
        //==================================================================

        Allocation_exec_i::Allocation_exec_i (void)
        {
        }

        Allocation_exec_i::~Allocation_exec_i (void)
        {
        }

        // Operations from ::CIAO::RACE::Allocator::Allocation

        ::CORBA::Boolean
        Allocation_exec_i::allocate (
          ::CIAO::RACE::OperationalString & opstring)
        {
          //create the single dimensional allocator
          this->bin_packer_ = new Single_D_BP (0,
                                               0.0,
                                               0,
                                               "");

		      //get the node details from the Target Manager 
		      // get the component details from the opstring
          Bin_Array bins;

          get_node_capacity (bins);

          Item_Array items;
          get_component_utils (opstring, items);

          this->bin_packer_->set_bins (bins);
          this->bin_packer_->set_items_array (items);

          this->bin_packer_->sort ('a');
          this->bin_packer_->first_fit ();

          this->bin_packer_->get_packed_items (items);

          this->populate_opstream (opstring, items, bins);

		      // call the Multi_D_BP to allocate ...
          return false;
        }

        bool
        Allocation_exec_i::get_node_capacity (
          Bin_Array& bins)
        {
          // make a call to the TM getSnapshot method
          // this will return a Domain structure 
          Deployment::Domain domain = get_domain (); //

          for (CORBA::ULong i = 0;
               i < domain.node.length ();
               i++)
          {
            Bin new_bin;

            for (CORBA::ULong j = 0;
              j < domain.node[i].resource.length ();
              j++)
            {
              for (CORBA::ULong k = 0;
                k < domain.node[i].resource[j].property.length ();
                k++)
              {
                if (!ACE_OS::strcmp ("Setpoint",
                           domain.node[i].resource[j].property[k].name.in ()))
                {
                  // get the bin capacity ..
                  CORBA::Double val;

                  domain.node[i].resource[j].property[k].value >>= val;

                  new_bin.capacity.cpu = 100*val;
                  new_bin.name = domain.node[i].name.in ();
                }
              }
            }

            bins.push_back (new_bin);
          }
          return 1;
        }

        bool
        Allocation_exec_i::populate_opstream (
          ::CIAO::RACE::OperationalString& opstring,
          Item_Array& items,
          Bin_Array& bins)
        {
          // here the operational string will be 
          // populated with the allocation 

          for (unsigned int i = 0;i < items.size ();i++)
          {
            opstring.instance[i].node = bins[items[i].bin_no].name.c_str ();
          }
          return 1;
        }

        bool
        Allocation_exec_i::get_component_utils (
          ::CIAO::RACE::OperationalString & opstring,
          Item_Array& items)
        {

          //parse the operational string 
          for (CORBA::ULong index = 0;
            index < opstring.instance.length ();
            index++)
          {
            Item_Type new_item;
            for (CORBA::ULong j = 0;
              j < opstring.instance[index].configProperty.length ();
                  j++)
            {
              //searching for cpu requirement
              if (!ACE_OS::strcmp (CPU_REQ,
                                   opstring.instance[index].configProperty[j].name.in ()))
              {
                // found a match ... read the CPU requirement

                //cpu requirement is between 0 and 1 ..
                CORBA::Double req; 
                opstring.instance[index].configProperty[j].value >>= req;

                //convert it to integer between 0 to 100 
                // since the packing algos take value between 0 and 100 ..
                new_item.cpu = req*100;
                break;
              }
            }
            new_item.id = index;
            new_item.memory = 0;
            new_item.packed = false;

            items.push_back (new_item);
          }
          return 1;
        }

        ::Deployment::Domain Allocation_exec_i::get_domain ()
        {
            CIAO::Config_Handlers::DD_Handler dd ("Domain.cdd");
            ::Deployment::Domain *dmn = dd. domain_idl ();
            ::Deployment::Domain ret_dmn = *dmn;
            return ret_dmn;
        }

        //==================================================================
        // Component Executor Implementation Class:   First_Fit_Allocator_exec_i
        //==================================================================

        First_Fit_Allocator_exec_i::First_Fit_Allocator_exec_i (void)
        {
        }

        First_Fit_Allocator_exec_i::~First_Fit_Allocator_exec_i (void)
        {
        }

        // Supported or inherited operations.

        // Attribute operations.

        // Port operations.

        ::CIAO::RACE::Allocator::CCM_Allocation_ptr
        First_Fit_Allocator_exec_i::get_allocation ()
        {
          // Your code here.
          return new ::CIAO::RACE::Allocator::CIDL_First_Fit_Allocator_Impl::Allocation_exec_i ();
          //return ::CIAO::RACE::Allocator::CCM_Allocation::_nil ();
        }

        // Operations from Components::SessionComponent

        void
        First_Fit_Allocator_exec_i::set_session_context (
          ::Components::SessionContext_ptr ctx)
        {
          this->context_ =
            ::CIAO::RACE::Allocator::CCM_First_Fit_Allocator_Context::_narrow (ctx);

          if (CORBA::is_nil (this->context_.in ()))
          {
            throw ::CORBA::INTERNAL ();
          }
        }

        void
        First_Fit_Allocator_exec_i::ciao_preactivate ()
        {
          // Your code here.
        }

        void
        First_Fit_Allocator_exec_i::configuration_complete ()
        {
          // Your code here.
        }

        void
        First_Fit_Allocator_exec_i::ccm_activate ()
        {
          // Your code here.
        }

        void
        First_Fit_Allocator_exec_i::ccm_passivate ()
        {
          // Your code here.
        }

        void
        First_Fit_Allocator_exec_i::ccm_remove ()
        {
          // Your code here.
        }

        //==================================================================
        // Home Executor Implementation Class:   First_Fit_Allocator_Home_exec_i
        //==================================================================

        First_Fit_Allocator_Home_exec_i::First_Fit_Allocator_Home_exec_i (void)
        {
        }

        First_Fit_Allocator_Home_exec_i::~First_Fit_Allocator_Home_exec_i (void)
        {
        }

        // Supported or inherited operations.

        // Home operations.

        // Factory and finder operations.

        // Attribute operations.

        // Implicit operations.

        ::Components::EnterpriseComponent_ptr
        First_Fit_Allocator_Home_exec_i::create ()
        {
          ::Components::EnterpriseComponent_ptr retval =
            ::Components::EnterpriseComponent::_nil ();

          ACE_NEW_THROW_EX (
            retval,
            First_Fit_Allocator_exec_i,
            ::CORBA::NO_MEMORY ());

          return retval;
        }

        extern "C" FIRSTFIT_EXEC_Export ::Components::HomeExecutorBase_ptr
        create_CIAO_RACE_Allocator_First_Fit_Allocator_Home_Impl (void)
        {
          ::Components::HomeExecutorBase_ptr retval =
            ::Components::HomeExecutorBase::_nil ();

          ACE_NEW_RETURN (
            retval,
            First_Fit_Allocator_Home_exec_i,
            ::Components::HomeExecutorBase::_nil ());

          return retval;
        }
      }
    }
  }
}

