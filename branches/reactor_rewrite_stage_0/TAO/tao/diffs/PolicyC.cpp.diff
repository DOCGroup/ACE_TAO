--- orig/PolicyC.cpp	Tue Jun 12 17:22:53 2001
+++ PolicyC.cpp	Tue Jun 12 13:58:12 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -39,124 +39,34 @@
 #include "PolicyC.i"
 #endif /* !defined INLINE */
 
-static const CORBA::Long _oc_CORBA_PolicyErrorCode[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  38,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x4572726f), 
-  ACE_NTOHL (0x72436f64), 
-  ACE_NTOHL (0x653a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/PolicyErrorCode:1.0
-  16,
-  ACE_NTOHL (0x506f6c69), 
-  ACE_NTOHL (0x63794572), 
-  ACE_NTOHL (0x726f7243), 
-  ACE_NTOHL (0x6f646500),  // name = PolicyErrorCode
-  CORBA::tk_short,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_PolicyErrorCode (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_PolicyErrorCode),
-    (char *) &_oc_CORBA_PolicyErrorCode,
-    0,
-    sizeof (CORBA::PolicyErrorCode)
-  );
+// ****************************************************************
 
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
+TAO_NAMESPACE_TYPE (const CORBA::PolicyErrorCode)
 TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_PolicyErrorCode, &_tc_TAO_tc_CORBA_PolicyErrorCode)
+TAO_NAMESPACE_DEFINE (const CORBA::PolicyErrorCode, BAD_POLICY, 0)
 TAO_NAMESPACE_END
-
-static const CORBA::Long _oc_CORBA_PolicyType[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  33,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x54797065), 
-  ACE_NTOHL (0x3a312e30), 
-  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/PolicyType:1.0
-  11,
-  ACE_NTOHL (0x506f6c69), 
-  ACE_NTOHL (0x63795479), 
-  ACE_NTOHL (0x70650000),  // name = PolicyType
-  CORBA::tk_ulong,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_PolicyType (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_PolicyType),
-    (char *) &_oc_CORBA_PolicyType,
-    0,
-    sizeof (CORBA::PolicyType)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
+TAO_NAMESPACE_TYPE (const CORBA::PolicyErrorCode)
 TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_PolicyType, &_tc_TAO_tc_CORBA_PolicyType)
+TAO_NAMESPACE_DEFINE (const CORBA::PolicyErrorCode, UNSUPPORTED_POLICY, 1)
 TAO_NAMESPACE_END
-
-static const CORBA::Long _oc_CORBA_SetOverrideType[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  38,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x412f5365), 
-  ACE_NTOHL (0x744f7665), 
-  ACE_NTOHL (0x72726964), 
-  ACE_NTOHL (0x65547970), 
-  ACE_NTOHL (0x653a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/SetOverrideType:1.0
-  16,
-  ACE_NTOHL (0x5365744f), 
-  ACE_NTOHL (0x76657272), 
-  ACE_NTOHL (0x69646554), 
-  ACE_NTOHL (0x79706500),  // name = SetOverrideType
-  2, // member count
-  13,
-  ACE_NTOHL (0x5345545f), 
-  ACE_NTOHL (0x4f564552), 
-  ACE_NTOHL (0x52494445), 
-  ACE_NTOHL (0x0),  // name = SET_OVERRIDE
-  13,
-  ACE_NTOHL (0x4144445f), 
-  ACE_NTOHL (0x4f564552), 
-  ACE_NTOHL (0x52494445), 
-  ACE_NTOHL (0x0),  // name = ADD_OVERRIDE
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_SetOverrideType (
-    CORBA::tk_enum,
-    sizeof (_oc_CORBA_SetOverrideType),
-    (char *) &_oc_CORBA_SetOverrideType,
-    0,
-    sizeof (CORBA::SetOverrideType)
-  );
-
-TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
+TAO_NAMESPACE_TYPE (const CORBA::PolicyErrorCode)
+TAO_NAMESPACE_BEGIN (CORBA)
+TAO_NAMESPACE_DEFINE (const CORBA::PolicyErrorCode, BAD_POLICY_TYPE, 2)
+TAO_NAMESPACE_END
+TAO_NAMESPACE_TYPE (const CORBA::PolicyErrorCode)
 TAO_NAMESPACE_BEGIN (CORBA)
-TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_SetOverrideType, &_tc_TAO_tc_CORBA_SetOverrideType)
+TAO_NAMESPACE_DEFINE (const CORBA::PolicyErrorCode, BAD_POLICY_VALUE, 3)
 TAO_NAMESPACE_END
+TAO_NAMESPACE_TYPE (const CORBA::PolicyErrorCode)
+TAO_NAMESPACE_BEGIN (CORBA)
+TAO_NAMESPACE_DEFINE (const CORBA::PolicyErrorCode, UNSUPPORTED_POLICY_VALUE, 4)
+TAO_NAMESPACE_END
+
+// ****************************************************************
 
 // Default constructor.
 CORBA_PolicyError::CORBA_PolicyError (void)
-  : CORBA_UserException ("IDL:omg.org/CORBA_PolicyError:1.0")
+  : CORBA_UserException ("IDL:omg.org/CORBA/PolicyError:1.0")
 {
 }
 
@@ -165,22 +75,22 @@
 {
 }
 
-void CORBA_PolicyError::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_PolicyError::_tao_any_destructor (void *x)
 {
-  CORBA_PolicyError *tmp = ACE_static_cast (CORBA_PolicyError*, _tao_void_pointer);
+  CORBA_PolicyError *tmp = ACE_static_cast (CORBA_PolicyError*,x);
   delete tmp;
 }
 
 // Copy constructor.
-CORBA_PolicyError::CORBA_PolicyError (const ::CORBA_PolicyError &_tao_excp)
+CORBA_PolicyError::CORBA_PolicyError (const ::CORBA::PolicyError &_tao_excp)
   : CORBA_UserException (_tao_excp._id ())
 {
   this->reason = _tao_excp.reason;
 }
 
 // Assignment operator.
-CORBA_PolicyError&
-CORBA_PolicyError::operator= (const ::CORBA_PolicyError &_tao_excp)
+CORBA::PolicyError&
+CORBA::PolicyError::operator= (const ::CORBA::PolicyError &_tao_excp)
 {
   this->CORBA_UserException::operator= (_tao_excp);
   this->reason = _tao_excp.reason;
@@ -188,10 +98,10 @@
 }
 
 // Narrow.
-CORBA_PolicyError *
-CORBA_PolicyError::_downcast (CORBA::Exception *exc)
+CORBA::PolicyError *
+CORBA::PolicyError::_downcast (CORBA::Exception *exc)
 {
-  if (!ACE_OS::strcmp ("IDL:omg.org/CORBA_PolicyError:1.0", exc->_id ()))
+  if (!ACE_OS::strcmp ("IDL:omg.org/CORBA/PolicyError:1.0", exc->_id ()))
     {
       return ACE_dynamic_cast (CORBA_PolicyError *, exc);
     }
@@ -201,12 +111,12 @@
     }
 }
 
-void CORBA_PolicyError::_raise ()
+void CORBA::PolicyError::_raise ()
 {
   TAO_RAISE (*this);
 }
 
-void CORBA_PolicyError::_tao_encode (
+void CORBA::PolicyError::_tao_encode (
     TAO_OutputCDR &cdr,
     CORBA::Environment &ACE_TRY_ENV
   ) const
@@ -219,7 +129,7 @@
   ACE_THROW (CORBA::MARSHAL ());
 }
 
-void CORBA_PolicyError::_tao_decode (
+void CORBA::PolicyError::_tao_decode (
     TAO_InputCDR &cdr,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -233,84 +143,25 @@
 }
 
 // TAO extension - the _alloc method.
-CORBA::Exception *CORBA_PolicyError::_alloc (void)
+CORBA::Exception *CORBA::PolicyError::_alloc (void)
 {
   CORBA::Exception *retval = 0;
-  ACE_NEW_RETURN (retval, ::CORBA_PolicyError, 0);
+  ACE_NEW_RETURN (retval, ::CORBA::PolicyError, 0);
   return retval;
 }
 
 CORBA_PolicyError::CORBA_PolicyError (
     CORBA::PolicyErrorCode _tao_reason
   )
-  : CORBA_UserException ("IDL:omg.org/CORBA_PolicyError:1.0")
+  : CORBA_UserException ("IDL:omg.org/CORBA/PolicyError:1.0")
 {
   this->reason = _tao_reason;
 }
 
-static const CORBA::Long _oc_CORBA_PolicyError[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  34,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x415f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x4572726f), 
-  ACE_NTOHL (0x723a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA_PolicyError:1.0
-  18,
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x415f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x4572726f), 
-  ACE_NTOHL (0x72000000),  // name = CORBA_PolicyError
-  1, // member count
-  7,
-  ACE_NTOHL (0x72656173), 
-  ACE_NTOHL (0x6f6e0000),  // name = reason
-  CORBA::tk_alias, // typecode kind for typedefs
-  72, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    38,
-    ACE_NTOHL (0x49444c3a), 
-    ACE_NTOHL (0x6f6d672e), 
-    ACE_NTOHL (0x6f72672f), 
-    ACE_NTOHL (0x434f5242), 
-    ACE_NTOHL (0x412f506f), 
-    ACE_NTOHL (0x6c696379), 
-    ACE_NTOHL (0x4572726f), 
-    ACE_NTOHL (0x72436f64), 
-    ACE_NTOHL (0x653a312e), 
-    ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA/PolicyErrorCode:1.0
-    16,
-    ACE_NTOHL (0x506f6c69), 
-    ACE_NTOHL (0x63794572), 
-    ACE_NTOHL (0x726f7243), 
-    ACE_NTOHL (0x6f646500),  // name = PolicyErrorCode
-    CORBA::tk_short,
-
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_PolicyError (
-    CORBA::tk_except,
-    sizeof (_oc_CORBA_PolicyError),
-    (char *) &_oc_CORBA_PolicyError,
-    0,
-    sizeof (CORBA_PolicyError)
-  );
-
-CORBA::TypeCode_ptr _tc_CORBA_PolicyError =
-  &_tc_TAO_tc_CORBA_PolicyError;
-
-
 // TAO extension - the virtual _type method.
-CORBA::TypeCode_ptr CORBA_PolicyError::_type (void) const
+CORBA::TypeCode_ptr CORBA::PolicyError::_type (void) const
 {
-  return ::_tc_CORBA_PolicyError;
+  return ::CORBA::_tc_PolicyError;
 }
 
 
@@ -400,9 +251,9 @@
 {}
 CORBA_InvalidPolicies::_tao_seq_UShort::~_tao_seq_UShort (void) // dtor
 {}
-void CORBA_InvalidPolicies::_tao_seq_UShort::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_InvalidPolicies::_tao_seq_UShort::_tao_any_destructor (void *x)
 {
-  _tao_seq_UShort *tmp = ACE_static_cast (_tao_seq_UShort*, _tao_void_pointer);
+  _tao_seq_UShort *tmp = ACE_static_cast (_tao_seq_UShort*,x);
   delete tmp;
 }
 
@@ -411,7 +262,7 @@
 
 // Default constructor.
 CORBA_InvalidPolicies::CORBA_InvalidPolicies (void)
-  : CORBA_UserException ("IDL:omg.org/CORBA_InvalidPolicies:1.0")
+  : CORBA_UserException ("IDL:omg.org/CORBA/InvalidPolicies:1.0")
 {
 }
 
@@ -420,9 +271,9 @@
 {
 }
 
-void CORBA_InvalidPolicies::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_InvalidPolicies::_tao_any_destructor (void *x)
 {
-  CORBA_InvalidPolicies *tmp = ACE_static_cast (CORBA_InvalidPolicies*, _tao_void_pointer);
+  CORBA_InvalidPolicies *tmp = ACE_static_cast (CORBA_InvalidPolicies*,x);
   delete tmp;
 }
 
@@ -446,7 +297,7 @@
 CORBA_InvalidPolicies *
 CORBA_InvalidPolicies::_downcast (CORBA::Exception *exc)
 {
-  if (!ACE_OS::strcmp ("IDL:omg.org/CORBA_InvalidPolicies:1.0", exc->_id ()))
+  if (!ACE_OS::strcmp ("IDL:omg.org/CORBA/InvalidPolicies:1.0", exc->_id ()))
     {
       return ACE_dynamic_cast (CORBA_InvalidPolicies *, exc);
     }
@@ -498,94 +349,48 @@
 CORBA_InvalidPolicies::CORBA_InvalidPolicies (
     const CORBA_InvalidPolicies::_tao_seq_UShort & _tao_indices
   )
-  : CORBA_UserException ("IDL:omg.org/CORBA_InvalidPolicies:1.0")
+  : CORBA_UserException ("IDL:omg.org/CORBA/InvalidPolicies:1.0")
 {
   this->indices = _tao_indices;
 }
 
-static const CORBA::Long _oc_CORBA_InvalidPolicies[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  38,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x415f496e), 
-  ACE_NTOHL (0x76616c69), 
-  ACE_NTOHL (0x64506f6c), 
-  ACE_NTOHL (0x69636965), 
-  ACE_NTOHL (0x733a312e), 
-  ACE_NTOHL (0x30000000),  // repository ID = IDL:omg.org/CORBA_InvalidPolicies:1.0
-  22,
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x415f496e), 
-  ACE_NTOHL (0x76616c69), 
-  ACE_NTOHL (0x64506f6c), 
-  ACE_NTOHL (0x69636965), 
-  ACE_NTOHL (0x73000000),  // name = CORBA_InvalidPolicies
-  1, // member count
-  8,
-  ACE_NTOHL (0x696e6469), 
-  ACE_NTOHL (0x63657300),  // name = indices
-  CORBA::tk_sequence, // typecode kind
-  12, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_ushort,
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_InvalidPolicies (
-    CORBA::tk_except,
-    sizeof (_oc_CORBA_InvalidPolicies),
-    (char *) &_oc_CORBA_InvalidPolicies,
-    0,
-    sizeof (CORBA_InvalidPolicies)
-  );
-
-CORBA::TypeCode_ptr _tc_CORBA_InvalidPolicies =
-  &_tc_TAO_tc_CORBA_InvalidPolicies;
-
-
 // TAO extension - the virtual _type method.
 CORBA::TypeCode_ptr CORBA_InvalidPolicies::_type (void) const
 {
-  return ::_tc_CORBA_InvalidPolicies;
+  return ::CORBA::_tc_InvalidPolicies;
 }
 
-CORBA_Policy_ptr
+CORBA::Policy_ptr
 tao_CORBA_Policy_duplicate (
-    CORBA_Policy_ptr p
+    CORBA::Policy_ptr p
   )
 {
-  return CORBA_Policy::_duplicate (p);
+  return CORBA::Policy::_duplicate (p);
 }
 
 void
 tao_CORBA_Policy_release (
-    CORBA_Policy_ptr p
+    CORBA::Policy_ptr p
   )
 {
   CORBA::release (p);
 }
 
-CORBA_Policy_ptr
+CORBA::Policy_ptr
 tao_CORBA_Policy_nil (
     void
   )
 {
-  return CORBA_Policy::_nil ();
+  return CORBA::Policy::_nil ();
 }
 
-CORBA_Policy_ptr
+CORBA::Policy_ptr
 tao_CORBA_Policy_narrow (
     CORBA::Object *p,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  return CORBA_Policy::_narrow (p, ACE_TRY_ENV);
+  return CORBA::Policy::_narrow (p, ACE_TRY_ENV);
 }
 
 CORBA::Object *
@@ -593,26 +398,26 @@
     void *src
   )
 {
-  CORBA_Policy **tmp =
-    ACE_static_cast (CORBA_Policy **, src);
+  CORBA::Policy **tmp =
+    ACE_static_cast (CORBA::Policy **, src);
   return *tmp;
 }
 
 // *************************************************************
-// Operations for class CORBA_Policy_var
+// Operations for class CORBA::Policy_var
 // *************************************************************
 
 CORBA_Policy_var::CORBA_Policy_var (void) // default constructor
   : ptr_ (CORBA_Policy::_nil ())
 {}
 
-::CORBA_Policy_ptr
+::CORBA::Policy_ptr
 CORBA_Policy_var::ptr (void) const
 {
   return this->ptr_;
 }
 
-CORBA_Policy_var::CORBA_Policy_var (const ::CORBA_Policy_var &p) // copy constructor
+CORBA_Policy_var::CORBA_Policy_var (const ::CORBA::Policy_var &p) // copy constructor
   : TAO_Base_var (),
     ptr_ (CORBA_Policy::_duplicate (p.ptr ()))
 {}
@@ -622,7 +427,7 @@
   CORBA::release (this->ptr_);
 }
 
-CORBA_Policy_var &
+CORBA::Policy_var &
 CORBA_Policy_var::operator= (CORBA_Policy_ptr p)
 {
   CORBA::release (this->ptr_);
@@ -630,66 +435,66 @@
   return *this;
 }
 
-CORBA_Policy_var &
-CORBA_Policy_var::operator= (const ::CORBA_Policy_var &p)
+CORBA::Policy_var &
+CORBA_Policy_var::operator= (const ::CORBA::Policy_var &p)
 {
   if (this != &p)
   {
     CORBA::release (this->ptr_);
-    this->ptr_ = ::CORBA_Policy::_duplicate (p.ptr ());
+    this->ptr_ = ::CORBA::Policy::_duplicate (p.ptr ());
   }
   return *this;
 }
 
-CORBA_Policy_var::operator const ::CORBA_Policy_ptr &() const // cast
+CORBA_Policy_var::operator const ::CORBA::Policy_ptr &() const // cast
 {
   return this->ptr_;
 }
 
-CORBA_Policy_var::operator ::CORBA_Policy_ptr &() // cast 
+CORBA_Policy_var::operator ::CORBA::Policy_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA_Policy_ptr
+::CORBA::Policy_ptr
 CORBA_Policy_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-::CORBA_Policy_ptr
+::CORBA::Policy_ptr
 CORBA_Policy_var::in (void) const
 {
   return this->ptr_;
 }
 
-::CORBA_Policy_ptr &
+::CORBA::Policy_ptr &
 CORBA_Policy_var::inout (void)
 {
   return this->ptr_;
 }
 
-::CORBA_Policy_ptr &
+::CORBA::Policy_ptr &
 CORBA_Policy_var::out (void)
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA_Policy::_nil ();
+  this->ptr_ = ::CORBA::Policy::_nil ();
   return this->ptr_;
 }
 
-::CORBA_Policy_ptr
+::CORBA::Policy_ptr
 CORBA_Policy_var::_retn (void)
 {
   // yield ownership of managed obj reference
-  ::CORBA_Policy_ptr val = this->ptr_;
-  this->ptr_ = ::CORBA_Policy::_nil ();
+  ::CORBA::Policy_ptr val = this->ptr_;
+  this->ptr_ = ::CORBA::Policy::_nil ();
   return val;
 }
 
-::CORBA_Policy_ptr
+::CORBA::Policy_ptr
 CORBA_Policy_var::duplicate (CORBA_Policy_ptr p)
 {
-  return ::CORBA_Policy::_duplicate (p);
+  return ::CORBA::Policy::_duplicate (p);
 }
 
 void
@@ -698,19 +503,19 @@
   CORBA::release (p);
 }
 
-::CORBA_Policy_ptr
+::CORBA::Policy_ptr
 CORBA_Policy_var::nil (void)
 {
-  return ::CORBA_Policy::_nil ();
+  return ::CORBA::Policy::_nil ();
 }
 
-::CORBA_Policy_ptr
+::CORBA::Policy_ptr
 CORBA_Policy_var::narrow (
     CORBA::Object *p,
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  return ::CORBA_Policy::_narrow (p, ACE_TRY_ENV);
+  return ::CORBA::Policy::_narrow (p, ACE_TRY_ENV);
 }
 
 CORBA::Object *
@@ -722,20 +527,20 @@
 }
 
 // *************************************************************
-// Operations for class CORBA_Policy_out
+// Operations for class CORBA::Policy_out
 // *************************************************************
 
 CORBA_Policy_out::CORBA_Policy_out (CORBA_Policy_ptr &p)
   : ptr_ (p)
 {
-  this->ptr_ = ::CORBA_Policy::_nil ();
+  this->ptr_ = ::CORBA::Policy::_nil ();
 }
 
 CORBA_Policy_out::CORBA_Policy_out (CORBA_Policy_var &p) // constructor from _var
   : ptr_ (p.out ())
 {
   CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA_Policy::_nil ();
+  this->ptr_ = ::CORBA::Policy::_nil ();
 }
 
 CORBA_Policy_out::CORBA_Policy_out (const ::CORBA_Policy_out &p) // copy constructor
@@ -743,38 +548,38 @@
 {}
 
 ::CORBA_Policy_out &
-CORBA_Policy_out::operator= (const ::CORBA_Policy_out &p)
+CORBA_Policy_out::operator= (const ::CORBA::Policy_out &p)
 {
   this->ptr_ = ACE_const_cast (CORBA_Policy_out&, p).ptr_;
   return *this;
 }
 
-CORBA_Policy_out &
-CORBA_Policy_out::operator= (const ::CORBA_Policy_var &p)
+CORBA::Policy_out &
+CORBA_Policy_out::operator= (const ::CORBA::Policy_var &p)
 {
-  this->ptr_ = ::CORBA_Policy::_duplicate (p.ptr ());
+  this->ptr_ = ::CORBA::Policy::_duplicate (p.ptr ());
   return *this;
 }
 
-CORBA_Policy_out &
+CORBA::Policy_out &
 CORBA_Policy_out::operator= (CORBA_Policy_ptr p)
 {
   this->ptr_ = p;
   return *this;
 }
 
-CORBA_Policy_out::operator ::CORBA_Policy_ptr &() // cast
+CORBA_Policy_out::operator ::CORBA::Policy_ptr &() // cast
 {
   return this->ptr_;
 }
 
-::CORBA_Policy_ptr &
+::CORBA::Policy_ptr &
 CORBA_Policy_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-::CORBA_Policy_ptr
+::CORBA::Policy_ptr
 CORBA_Policy_out::operator-> (void)
 {
   return this->ptr_;
@@ -903,13 +708,13 @@
     )
     ACE_THROW_SPEC ((CORBA::SystemException));
 
-  void result (CORBA_Policy_ptr result);
+  void result (CORBA::Policy_ptr result);
 
 private:
   TAO_ClientRequestInfo_CORBA_Policy_copy (const TAO_ClientRequestInfo_CORBA_Policy_copy &);
   void operator= (const TAO_ClientRequestInfo_CORBA_Policy_copy &);
 
-  CORBA_Policy_ptr _result;
+  CORBA::Policy_ptr _result;
 };
 
 TAO_ClientRequestInfo_CORBA_Policy_copy::TAO_ClientRequestInfo_CORBA_Policy_copy (
@@ -962,7 +767,7 @@
 }
 
 void 
-TAO_ClientRequestInfo_CORBA_Policy_copy::result (CORBA_Policy_ptr result)
+TAO_ClientRequestInfo_CORBA_Policy_copy::result (CORBA::Policy_ptr result)
 {
   // update the result 
   this->_result = result;
@@ -1055,16 +860,16 @@
 //                Base & Remote Proxy  Implementation. 
 //
 
-_TAO_CORBA_Policy_Proxy_Impl::_TAO_CORBA_Policy_Proxy_Impl (void)
+CORBA_TAO_Policy_Proxy_Impl::CORBA_TAO_Policy_Proxy_Impl (void)
 {}
 
-_TAO_CORBA_Policy_Remote_Proxy_Impl::_TAO_CORBA_Policy_Remote_Proxy_Impl (void)
+CORBA_TAO_Policy_Remote_Proxy_Impl::CORBA_TAO_Policy_Remote_Proxy_Impl (void)
 {}
 
 // Remote Implementation of the IDL interface methods
 
-CORBA::PolicyType _TAO_CORBA_Policy_Remote_Proxy_Impl::policy_type (
-    CORBA_Object *_collocated_tao_target_,
+CORBA::PolicyType CORBA_TAO_Policy_Remote_Proxy_Impl::policy_type (
+    CORBA::Object_ptr _collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -1151,7 +956,7 @@
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW_RETURN (
-                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES),
+                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                 _tao_retval
               );
               
@@ -1229,8 +1034,8 @@
 return _tao_retval;
 }
 
-CORBA_Policy_ptr _TAO_CORBA_Policy_Remote_Proxy_Impl::copy (
-    CORBA_Object *_collocated_tao_target_,
+CORBA::Policy_ptr CORBA_TAO_Policy_Remote_Proxy_Impl::copy (
+    CORBA::Object_ptr _collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -1238,8 +1043,8 @@
   ))
 {
   
-  CORBA_Policy_ptr _tao_retval = CORBA_Policy::_nil ();
-  CORBA_Policy_var _tao_safe_retval (_tao_retval);
+  CORBA::Policy_ptr _tao_retval = CORBA::Policy::_nil ();
+  CORBA::Policy_var _tao_safe_retval (_tao_retval);
   
   
   TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
@@ -1318,7 +1123,7 @@
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW_RETURN (
-                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES),
+                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                 0
               );
               
@@ -1350,7 +1155,7 @@
             }
           
 #if TAO_HAS_INTERCEPTORS == 1
-          CORBA_Policy_ptr _tao_retval_info = _tao_safe_retval._retn ();
+          CORBA::Policy_ptr _tao_retval_info = _tao_safe_retval._retn ();
           ri.result (_tao_retval_info);
           _tao_safe_retval = _tao_retval_info;
           
@@ -1397,8 +1202,8 @@
 return _tao_safe_retval._retn ();
 }
 
-void _TAO_CORBA_Policy_Remote_Proxy_Impl::destroy (
-    CORBA_Object *_collocated_tao_target_,
+void CORBA_TAO_Policy_Remote_Proxy_Impl::destroy (
+    CORBA::Object_ptr _collocated_tao_target_,
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
@@ -1485,7 +1290,7 @@
           if (_invoke_status == TAO_INVOKE_EXCEPTION)
             {
               TAO_INTERCEPTOR_THROW (
-                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES)
+                CORBA::UNKNOWN (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES)
               );
               
             }
@@ -1559,37 +1364,37 @@
 //           Remote & Base  Proxy Broker Implementation
 //
 
-_TAO_CORBA_Policy_Proxy_Broker::_TAO_CORBA_Policy_Proxy_Broker (void)
+CORBA_TAO_Policy_Proxy_Broker::CORBA_TAO_Policy_Proxy_Broker (void)
 {
 }
 
-_TAO_CORBA_Policy_Proxy_Broker::~_TAO_CORBA_Policy_Proxy_Broker (void)
+CORBA_TAO_Policy_Proxy_Broker::~CORBA_TAO_Policy_Proxy_Broker (void)
 {
 }
 
-_TAO_CORBA_Policy_Proxy_Broker * (*_TAO_CORBA_Policy_Proxy_Broker_Factory_function_pointer) (
+CORBA_TAO_Policy_Proxy_Broker * (*CORBA_CORBA_TAO_Policy_Proxy_Broker_Factory_function_pointer) (
     CORBA::Object_ptr obj
   ) = 0;
 
 // Factory Member function Implementation.
-_TAO_CORBA_Policy_Remote_Proxy_Broker *
-_TAO_CORBA_Policy_Remote_Proxy_Broker::the_TAO_CORBA_Policy_Remote_Proxy_Broker (void)
+CORBA_TAO_Policy_Remote_Proxy_Broker *
+CORBA_TAO_Policy_Remote_Proxy_Broker::the_CORBA_TAO_Policy_Remote_Proxy_Broker (void)
 {
-  static ::_TAO_CORBA_Policy_Remote_Proxy_Broker remote_proxy_broker;
+  static CORBA_TAO_Policy_Remote_Proxy_Broker remote_proxy_broker;
   return &remote_proxy_broker;
 }
 
-_TAO_CORBA_Policy_Remote_Proxy_Broker::_TAO_CORBA_Policy_Remote_Proxy_Broker (void)
+CORBA_TAO_Policy_Remote_Proxy_Broker::CORBA_TAO_Policy_Remote_Proxy_Broker (void)
 {
 }
 
-_TAO_CORBA_Policy_Remote_Proxy_Broker::~_TAO_CORBA_Policy_Remote_Proxy_Broker (void)
+CORBA_TAO_Policy_Remote_Proxy_Broker::~CORBA_TAO_Policy_Remote_Proxy_Broker (void)
 {
 }
 
-_TAO_CORBA_Policy_Proxy_Impl&
-_TAO_CORBA_Policy_Remote_Proxy_Broker::select_proxy (
-  ::CORBA_Policy *,
+CORBA_TAO_Policy_Proxy_Impl&
+CORBA_TAO_Policy_Remote_Proxy_Broker::select_proxy (
+  ::CORBA::Policy *,
   CORBA::Environment &
 )
 {
@@ -1616,20 +1421,20 @@
 CORBA_Policy::CORBA_Policy_setup_collocation (int collocated)
 {
   if (collocated)
-    this->the_TAO_CORBA_Policy_Proxy_Broker_ =
-      ::_TAO_CORBA_Policy_Proxy_Broker_Factory_function_pointer (this);
+    this->the_CORBA_TAO_Policy_Proxy_Broker_ =
+      ::CORBA_CORBA_TAO_Policy_Proxy_Broker_Factory_function_pointer (this);
   else
-    this->the_TAO_CORBA_Policy_Proxy_Broker_ =
-      ::_TAO_CORBA_Policy_Remote_Proxy_Broker::the_TAO_CORBA_Policy_Remote_Proxy_Broker ();
+    this->the_CORBA_TAO_Policy_Proxy_Broker_ =
+      CORBA_TAO_Policy_Remote_Proxy_Broker::the_CORBA_TAO_Policy_Remote_Proxy_Broker ();
 }
 
-void CORBA_Policy::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_Policy::_tao_any_destructor (void *x)
 {
-  CORBA_Policy *tmp = ACE_static_cast (CORBA_Policy*, _tao_void_pointer);
+  CORBA_Policy *tmp = ACE_static_cast (CORBA_Policy*,x);
   CORBA::release (tmp);
 }
 
-CORBA_Policy_ptr CORBA_Policy::_narrow (
+CORBA::Policy_ptr CORBA_Policy::_narrow (
     CORBA::Object_ptr obj,
     CORBA::Environment &ACE_TRY_ENV
   )
@@ -1638,7 +1443,7 @@
     return CORBA_Policy::_nil ();
   if (! obj->_is_local ())
     {
-      CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA_Policy:1.0", ACE_TRY_ENV);
+      CORBA::Boolean is_a = obj->_is_a ("IDL:omg.org/CORBA/Policy:1.0", ACE_TRY_ENV);
       ACE_CHECK_RETURN (CORBA_Policy::_nil ());
       if (is_a == 0)
         return CORBA_Policy::_nil ();
@@ -1646,29 +1451,31 @@
   return CORBA_Policy::_unchecked_narrow (obj, ACE_TRY_ENV);
 }
 
-CORBA_Policy_ptr CORBA_Policy::_unchecked_narrow (
+CORBA::Policy_ptr CORBA_Policy::_unchecked_narrow (
     CORBA::Object_ptr obj,
     CORBA::Environment &
   )
 {
   if (CORBA::is_nil (obj))
     return CORBA_Policy::_nil ();
+
   if (! obj->_is_local ())
     {
       TAO_Stub* stub = obj->_stubobj ();
       if (stub)
         stub->_incr_refcnt ();
+
       CORBA_Policy_ptr default_proxy = CORBA_Policy::_nil ();
 
       if (
           !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
           stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
-          obj->_is_collocated () &&_TAO_CORBA_Policy_Proxy_Broker_Factory_function_pointer != 0
+          obj->_is_collocated () &&CORBA_CORBA_TAO_Policy_Proxy_Broker_Factory_function_pointer != 0
         )
       {
         ACE_NEW_RETURN (
           default_proxy,
-          ::CORBA_Policy (
+          ::CORBA::Policy (
             stub,
             1,
             obj->_servant ()),
@@ -1676,7 +1483,7 @@
           CORBA_Policy::_nil ());
         }
       if (CORBA::is_nil (default_proxy))
-        ACE_NEW_RETURN (default_proxy, ::CORBA_Policy (stub, 0, obj->_servant ()), CORBA_Policy::_nil ());
+        ACE_NEW_RETURN (default_proxy, ::CORBA::Policy (stub, 0, obj->_servant ()), CORBA_Policy::_nil ());
         return default_proxy;
       }
     else 
@@ -1695,7 +1502,7 @@
           );
 }
 
-CORBA_Policy_ptr
+CORBA::Policy_ptr
 CORBA_Policy::_duplicate (CORBA_Policy_ptr obj)
 {
   if (!CORBA::is_nil (obj))
@@ -1706,14 +1513,14 @@
 CORBA::Boolean CORBA_Policy::_is_a (const CORBA::Char *value, CORBA::Environment &ACE_TRY_ENV)
 {
   if (
-    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA_Policy:1.0")) ||
+    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Policy:1.0")) ||
     (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Object:1.0")))
   return 1; // success using local knowledge
   else
     return this->CORBA_Object::_is_a (value, ACE_TRY_ENV);
 }
 
-void *CORBA_Policy::_tao_QueryInterface (ptr_arith_t type)
+void *CORBA::Policy::_tao_QueryInterface (ptr_arith_t type)
 {
   void *retv = 0;
   if (type == ACE_reinterpret_cast
@@ -1731,7 +1538,32 @@
 
 const char* CORBA_Policy::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/CORBA_Policy:1.0";
+  return "IDL:omg.org/CORBA/Policy:1.0";
+}
+
+CORBA::Boolean
+CORBA_Policy::_tao_encode (TAO_OutputCDR &)
+{
+  return 0;
+}
+
+CORBA::Boolean
+CORBA_Policy::_tao_decode (TAO_InputCDR &)
+{
+  return 0;
+}
+
+TAO_Cached_Policy_Type
+CORBA_Policy::_tao_cached_type (void) const
+{
+  // By default, all policies are uncached.
+  return TAO_CACHED_POLICY_UNCACHED;
+}
+
+TAO_Policy_Scope
+CORBA_Policy::_tao_scope (void) const
+{
+  return TAO_POLICY_DEFAULT_SCOPE;
 }
 
 CORBA::PolicyType CORBA_Policy::policy_type (
@@ -1741,8 +1573,8 @@
     CORBA::SystemException
   ))
 {
-  _TAO_CORBA_Policy_Proxy_Impl &proxy = 
-    this->the_TAO_CORBA_Policy_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
+  CORBA_TAO_Policy_Proxy_Impl &proxy =
+    this->the_CORBA_TAO_Policy_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
   
   return proxy.policy_type (
@@ -1751,15 +1583,15 @@
     );
 }
 
-CORBA_Policy_ptr CORBA_Policy::copy (
+CORBA::Policy_ptr CORBA_Policy::copy (
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_CORBA_Policy_Proxy_Impl &proxy = 
-    this->the_TAO_CORBA_Policy_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
+  CORBA_TAO_Policy_Proxy_Impl &proxy =
+    this->the_CORBA_TAO_Policy_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK_RETURN (0);
   
   return proxy.copy (
@@ -1768,15 +1600,15 @@
     );
 }
 
-void CORBA_Policy::destroy (
+void CORBA::Policy::destroy (
     CORBA::Environment &ACE_TRY_ENV
   )
   ACE_THROW_SPEC ((
     CORBA::SystemException
   ))
 {
-  _TAO_CORBA_Policy_Proxy_Impl &proxy = 
-    this->the_TAO_CORBA_Policy_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
+  CORBA_TAO_Policy_Proxy_Impl &proxy =
+    this->the_CORBA_TAO_Policy_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
   ACE_CHECK;
   
   proxy.destroy (
@@ -1785,37 +1617,6 @@
     );
 }
 
-static const CORBA::Long _oc_CORBA_Policy[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  29,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x415f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x3a312e30), 
-  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA_Policy:1.0
-  13,
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x415f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x0),  // name = CORBA_Policy
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_Policy (
-    CORBA::tk_objref,
-    sizeof (_oc_CORBA_Policy),
-    (char *) &_oc_CORBA_Policy,
-    0,
-    sizeof (CORBA_Policy)
-  );
-
-CORBA::TypeCode_ptr _tc_CORBA_Policy =
-  &_tc_TAO_tc_CORBA_Policy;
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 
 #if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CS_)
@@ -1825,17 +1626,17 @@
 void
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_allocate_buffer (CORBA::ULong length)
 {
-  CORBA_Policy **tmp = 0;
+    CORBA::Policy **tmp = 0;
   tmp = _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (length);
   
   if (this->buffer_ != 0)
   {
-    CORBA_Policy **old = ACE_reinterpret_cast (CORBA_Policy**, this->buffer_);
+      CORBA::Policy **old = ACE_reinterpret_cast (CORBA::Policy**, this->buffer_);
     for (CORBA::ULong i = 0; i < this->length_; ++i)
       {
         if (!this->release_)
           {
-            tmp[i] = CORBA_Policy::_duplicate (old[i]);
+              tmp[i] = CORBA::Policy::_duplicate (old[i]);
           }
         else
           {
@@ -1856,12 +1657,12 @@
 {
   if (this->buffer_ == 0 || this->release_ == 0)
     return;
-  CORBA_Policy **tmp = ACE_reinterpret_cast (CORBA_Policy**, this->buffer_);
+    CORBA::Policy **tmp = ACE_reinterpret_cast (CORBA::Policy**, this->buffer_);
   
   for (CORBA::ULong i = 0; i < this->length_; ++i)
     {
       CORBA::release (tmp[i]);
-      tmp[i] = CORBA_Policy::_nil ();
+        tmp[i] = CORBA::Policy::_nil ();
     }
   
   _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::freebuf (tmp);
@@ -1876,12 +1677,12 @@
 void
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_shrink_buffer (CORBA::ULong nl, CORBA::ULong ol)
 {
-  CORBA_Policy **tmp = ACE_reinterpret_cast (CORBA_Policy**, this->buffer_);
+    CORBA::Policy **tmp = ACE_reinterpret_cast (CORBA::Policy**, this->buffer_);
   
   for (CORBA::ULong i = nl; i < ol; ++i)
     {
       CORBA::release (tmp[i]);
-      tmp[i] = CORBA_Policy::_nil ();
+        tmp[i] = CORBA::Policy::_nil ();
     }
 }
 
@@ -1892,15 +1693,15 @@
     CORBA_Environment &ACE_TRY_ENV
   )
 {
-  CORBA_Policy **tmp = ACE_static_cast (CORBA_Policy**, target);
-  *tmp = CORBA_Policy::_narrow (src, ACE_TRY_ENV);
+    CORBA::Policy **tmp = ACE_static_cast (CORBA::Policy**, target);
+    *tmp = CORBA::Policy::_narrow (src, ACE_TRY_ENV);
   ACE_CHECK;
 }
 
 CORBA_Object*
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_upcast (void *src) const
 {
-  CORBA_Policy **tmp = ACE_static_cast (CORBA_Policy**, src);
+    CORBA::Policy **tmp = ACE_static_cast (CORBA::Policy**, src);
   return *tmp;
 }
 
@@ -1913,7 +1714,7 @@
 #define _CORBA_POLICYLIST_CS_
 
 // *************************************************************
-// CORBA_PolicyList
+// CORBA::PolicyList
 // *************************************************************
 
 CORBA_PolicyList::CORBA_PolicyList (void)
@@ -1923,16 +1724,16 @@
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA_Policy,CORBA_Policy_var>
+  TAO_Unbounded_Object_Sequence<CORBA::Policy,CORBA::Policy_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max)
 {}
-CORBA_PolicyList::CORBA_PolicyList (CORBA::ULong max, CORBA::ULong length, CORBA_Policy_ptr *buffer, CORBA::Boolean release)
+CORBA_PolicyList::CORBA_PolicyList (CORBA::ULong max, CORBA::ULong length, CORBA::Policy_ptr *buffer, CORBA::Boolean release)
   : 
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA_Policy,CORBA_Policy_var>
+  TAO_Unbounded_Object_Sequence<CORBA::Policy,CORBA::Policy_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (max, length, buffer, release)
 {}
@@ -1941,77 +1742,21 @@
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList
 #else /* TAO_USE_SEQUENCE_TEMPLATES */
-TAO_Unbounded_Object_Sequence<CORBA_Policy,CORBA_Policy_var>
+  TAO_Unbounded_Object_Sequence<CORBA::Policy,CORBA::Policy_var>
 #endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  (seq)
 {}
 CORBA_PolicyList::~CORBA_PolicyList (void) // dtor
 {}
-void CORBA_PolicyList::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_PolicyList::_tao_any_destructor (void *x)
 {
-  CORBA_PolicyList *tmp = ACE_static_cast (CORBA_PolicyList*, _tao_void_pointer);
+  CORBA_PolicyList *tmp = ACE_static_cast (CORBA_PolicyList*,x);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_PolicyList[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  33,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x415f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x4c697374), 
-  ACE_NTOHL (0x3a312e30), 
-  ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA_PolicyList:1.0
-  17,
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x415f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x4c697374), 
-  ACE_NTOHL (0x0),  // name = CORBA_PolicyList
-  CORBA::tk_sequence, // typecode kind
-  76, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_objref, // typecode kind
-    60, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      29,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x415f506f), 
-      ACE_NTOHL (0x6c696379), 
-      ACE_NTOHL (0x3a312e30), 
-      ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA_Policy:1.0
-      13,
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x415f506f), 
-      ACE_NTOHL (0x6c696379), 
-      ACE_NTOHL (0x0),  // name = CORBA_Policy
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_PolicyList (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_PolicyList),
-    (char *) &_oc_CORBA_PolicyList,
-    0,
-    sizeof (CORBA_PolicyList)
-  );
-
-CORBA::TypeCode_ptr _tc_CORBA_PolicyList =
-  &_tc_TAO_tc_CORBA_PolicyList;
-
-
 #if !defined (TAO_USE_SEQUENCE_TEMPLATES)
 
 #if !defined (__TAO_UNBOUNDED_SEQUENCE_CORBA_POLICYTYPESEQ_CS_)
@@ -2064,7 +1809,7 @@
 #define _CORBA_POLICYTYPESEQ_CS_
 
 // *************************************************************
-// CORBA_PolicyTypeSeq
+// CORBA::PolicyTypeSeq
 // *************************************************************
 
 CORBA_PolicyTypeSeq::CORBA_PolicyTypeSeq (void)
@@ -2098,72 +1843,15 @@
 {}
 CORBA_PolicyTypeSeq::~CORBA_PolicyTypeSeq (void) // dtor
 {}
-void CORBA_PolicyTypeSeq::_tao_any_destructor (void *_tao_void_pointer)
+void CORBA_PolicyTypeSeq::_tao_any_destructor (void *x)
 {
-  CORBA_PolicyTypeSeq *tmp = ACE_static_cast (CORBA_PolicyTypeSeq*, _tao_void_pointer);
+  CORBA_PolicyTypeSeq *tmp = ACE_static_cast (CORBA_PolicyTypeSeq*,x);
   delete tmp;
 }
 
 
 #endif /* end #if !defined */
 
-static const CORBA::Long _oc_CORBA_PolicyTypeSeq[] =
-{
-  TAO_ENCAP_BYTE_ORDER, // byte order
-  36,
-  ACE_NTOHL (0x49444c3a), 
-  ACE_NTOHL (0x6f6d672e), 
-  ACE_NTOHL (0x6f72672f), 
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x415f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x54797065), 
-  ACE_NTOHL (0x5365713a), 
-  ACE_NTOHL (0x312e3000),  // repository ID = IDL:omg.org/CORBA_PolicyTypeSeq:1.0
-  20,
-  ACE_NTOHL (0x434f5242), 
-  ACE_NTOHL (0x415f506f), 
-  ACE_NTOHL (0x6c696379), 
-  ACE_NTOHL (0x54797065), 
-  ACE_NTOHL (0x53657100),  // name = CORBA_PolicyTypeSeq
-  CORBA::tk_sequence, // typecode kind
-  80, // encapsulation length
-    TAO_ENCAP_BYTE_ORDER, // byte order
-    CORBA::tk_alias, // typecode kind for typedefs
-    64, // encapsulation length
-      TAO_ENCAP_BYTE_ORDER, // byte order
-      33,
-      ACE_NTOHL (0x49444c3a), 
-      ACE_NTOHL (0x6f6d672e), 
-      ACE_NTOHL (0x6f72672f), 
-      ACE_NTOHL (0x434f5242), 
-      ACE_NTOHL (0x412f506f), 
-      ACE_NTOHL (0x6c696379), 
-      ACE_NTOHL (0x54797065), 
-      ACE_NTOHL (0x3a312e30), 
-      ACE_NTOHL (0x0),  // repository ID = IDL:omg.org/CORBA/PolicyType:1.0
-      11,
-      ACE_NTOHL (0x506f6c69), 
-      ACE_NTOHL (0x63795479), 
-      ACE_NTOHL (0x70650000),  // name = PolicyType
-      CORBA::tk_ulong,
-
-
-    0U,
-
-};
-
-static CORBA::TypeCode _tc_TAO_tc_CORBA_PolicyTypeSeq (
-    CORBA::tk_alias,
-    sizeof (_oc_CORBA_PolicyTypeSeq),
-    (char *) &_oc_CORBA_PolicyTypeSeq,
-    0,
-    sizeof (CORBA_PolicyTypeSeq)
-  );
-
-CORBA::TypeCode_ptr _tc_CORBA_PolicyTypeSeq =
-  &_tc_TAO_tc_CORBA_PolicyTypeSeq;
-
 CORBA_PolicyManager_ptr
 tao_CORBA_PolicyManager_duplicate (
     CORBA_PolicyManager_ptr p
@@ -2404,7 +2092,7 @@
     CORBA::Environment &ACE_TRY_ENV
   )
 {
-  return CORBA_PolicyManager::_unchecked_narrow (obj, ACE_TRY_ENV);
+  return CORBA::PolicyManager::_unchecked_narrow (obj, ACE_TRY_ENV);
 }
 
 CORBA_PolicyManager_ptr CORBA_PolicyManager::_unchecked_narrow (
@@ -2414,6 +2102,7 @@
 {
   if (CORBA::is_nil (obj))
     return CORBA_PolicyManager::_nil ();
+
   return
       ACE_reinterpret_cast
         (
@@ -2455,320 +2144,26 @@
 
 const char* CORBA_PolicyManager::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/CORBA_PolicyManager:1.0";
-}
-
-CORBA_Current_ptr
-tao_CORBA_Current_duplicate (
-    CORBA_Current_ptr p
-  )
-{
-  return CORBA_Current::_duplicate (p);
-}
-
-void
-tao_CORBA_Current_release (
-    CORBA_Current_ptr p
-  )
-{
-  CORBA::release (p);
-}
-
-CORBA_Current_ptr
-tao_CORBA_Current_nil (
-    void
-  )
-{
-  return CORBA_Current::_nil ();
-}
-
-CORBA_Current_ptr
-tao_CORBA_Current_narrow (
-    CORBA::Object *p,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  return CORBA_Current::_narrow (p, ACE_TRY_ENV);
-}
-
-CORBA::Object *
-tao_CORBA_Current_upcast (
-    void *src
-  )
-{
-  CORBA_Current **tmp =
-    ACE_static_cast (CORBA_Current **, src);
-  return *tmp;
-}
-
-// *************************************************************
-// Operations for class CORBA_Current_var
-// *************************************************************
-
-CORBA_Current_var::CORBA_Current_var (void) // default constructor
-  : ptr_ (CORBA_Current::_nil ())
-{}
-
-::CORBA_Current_ptr
-CORBA_Current_var::ptr (void) const
-{
-  return this->ptr_;
-}
-
-CORBA_Current_var::CORBA_Current_var (const ::CORBA_Current_var &p) // copy constructor
-  : TAO_Base_var (),
-    ptr_ (CORBA_Current::_duplicate (p.ptr ()))
-{}
-
-CORBA_Current_var::~CORBA_Current_var (void) // destructor
-{
-  CORBA::release (this->ptr_);
-}
-
-CORBA_Current_var &
-CORBA_Current_var::operator= (CORBA_Current_ptr p)
-{
-  CORBA::release (this->ptr_);
-  this->ptr_ = p;
-  return *this;
-}
-
-CORBA_Current_var &
-CORBA_Current_var::operator= (const ::CORBA_Current_var &p)
-{
-  if (this != &p)
-  {
-    CORBA::release (this->ptr_);
-    this->ptr_ = ::CORBA_Current::_duplicate (p.ptr ());
-  }
-  return *this;
-}
-
-CORBA_Current_var::operator const ::CORBA_Current_ptr &() const // cast
-{
-  return this->ptr_;
-}
-
-CORBA_Current_var::operator ::CORBA_Current_ptr &() // cast 
-{
-  return this->ptr_;
-}
-
-::CORBA_Current_ptr
-CORBA_Current_var::operator-> (void) const
-{
-  return this->ptr_;
-}
-
-::CORBA_Current_ptr
-CORBA_Current_var::in (void) const
-{
-  return this->ptr_;
-}
-
-::CORBA_Current_ptr &
-CORBA_Current_var::inout (void)
-{
-  return this->ptr_;
-}
-
-::CORBA_Current_ptr &
-CORBA_Current_var::out (void)
-{
-  CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA_Current::_nil ();
-  return this->ptr_;
-}
-
-::CORBA_Current_ptr
-CORBA_Current_var::_retn (void)
-{
-  // yield ownership of managed obj reference
-  ::CORBA_Current_ptr val = this->ptr_;
-  this->ptr_ = ::CORBA_Current::_nil ();
-  return val;
-}
-
-::CORBA_Current_ptr
-CORBA_Current_var::duplicate (CORBA_Current_ptr p)
-{
-  return ::CORBA_Current::_duplicate (p);
-}
-
-void
-CORBA_Current_var::release (CORBA_Current_ptr p)
-{
-  CORBA::release (p);
-}
-
-::CORBA_Current_ptr
-CORBA_Current_var::nil (void)
-{
-  return ::CORBA_Current::_nil ();
-}
-
-::CORBA_Current_ptr
-CORBA_Current_var::narrow (
-    CORBA::Object *p,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  return ::CORBA_Current::_narrow (p, ACE_TRY_ENV);
-}
-
-CORBA::Object *
-CORBA_Current_var::upcast (void *src)
-{
-  CORBA_Current **tmp =
-    ACE_static_cast (CORBA_Current **, src);
-  return *tmp;
-}
-
-// *************************************************************
-// Operations for class CORBA_Current_out
-// *************************************************************
-
-CORBA_Current_out::CORBA_Current_out (CORBA_Current_ptr &p)
-  : ptr_ (p)
-{
-  this->ptr_ = ::CORBA_Current::_nil ();
-}
-
-CORBA_Current_out::CORBA_Current_out (CORBA_Current_var &p) // constructor from _var
-  : ptr_ (p.out ())
-{
-  CORBA::release (this->ptr_);
-  this->ptr_ = ::CORBA_Current::_nil ();
-}
-
-CORBA_Current_out::CORBA_Current_out (const ::CORBA_Current_out &p) // copy constructor
-  : ptr_ (ACE_const_cast (CORBA_Current_out &, p).ptr_)
-{}
-
-::CORBA_Current_out &
-CORBA_Current_out::operator= (const ::CORBA_Current_out &p)
-{
-  this->ptr_ = ACE_const_cast (CORBA_Current_out&, p).ptr_;
-  return *this;
-}
-
-CORBA_Current_out &
-CORBA_Current_out::operator= (const ::CORBA_Current_var &p)
-{
-  this->ptr_ = ::CORBA_Current::_duplicate (p.ptr ());
-  return *this;
-}
-
-CORBA_Current_out &
-CORBA_Current_out::operator= (CORBA_Current_ptr p)
-{
-  this->ptr_ = p;
-  return *this;
-}
-
-CORBA_Current_out::operator ::CORBA_Current_ptr &() // cast
-{
-  return this->ptr_;
-}
-
-::CORBA_Current_ptr &
-CORBA_Current_out::ptr (void) // ptr
-{
-  return this->ptr_;
-}
-
-::CORBA_Current_ptr
-CORBA_Current_out::operator-> (void)
-{
-  return this->ptr_;
-}
-
-
-// default constructor
-CORBA_Current::CORBA_Current ()
-{
-  }
-
-// destructor
-CORBA_Current::~CORBA_Current (void)
-{}
-
-CORBA_Current_ptr CORBA_Current::_narrow (
-    CORBA::Object_ptr obj,
-    CORBA::Environment &ACE_TRY_ENV
-  )
-{
-  return CORBA_Current::_unchecked_narrow (obj, ACE_TRY_ENV);
-}
-
-CORBA_Current_ptr CORBA_Current::_unchecked_narrow (
-    CORBA::Object_ptr obj,
-    CORBA::Environment &
-  )
-{
-  if (CORBA::is_nil (obj))
-    return CORBA_Current::_nil ();
-  return
-      ACE_reinterpret_cast
-        (
-          CORBA_Current_ptr,
-            obj->_tao_QueryInterface
-              (
-                ACE_reinterpret_cast
-                  (
-                    ptr_arith_t,
-                    &CORBA_Current::_narrow
-                  )
-              )
-        );
-}
-
-CORBA_Current_ptr
-CORBA_Current::_duplicate (CORBA_Current_ptr obj)
-{
-  if (!CORBA::is_nil (obj))
-    obj->_add_ref ();
-  return obj;
-}
-
-void *CORBA_Current::_tao_QueryInterface (ptr_arith_t type)
-{
-  void *retv = 0;
-  if (type == ACE_reinterpret_cast
-    (ptr_arith_t,
-      &CORBA_Current::_narrow))
-    retv = ACE_reinterpret_cast (void*, this);
-  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_narrow))
-    retv = ACE_reinterpret_cast (void *,
-      ACE_static_cast (CORBA::Object_ptr, this));
-    
-  if (retv)
-    this->_add_ref ();
-  return retv;
-}
-
-const char* CORBA_Current::_interface_repository_id (void) const
-{
-  return "IDL:omg.org/CORBA_Current:1.0";
+  return "IDL:omg.org/CORBA/PolicyManager:1.0";
 }
 
-CORBA_PolicyCurrent_ptr
+CORBA::PolicyCurrent_ptr
 tao_CORBA_PolicyCurrent_duplicate (
-    CORBA_PolicyCurrent_ptr p
+    CORBA::PolicyCurrent_ptr p
   )
 {
-  return CORBA_PolicyCurrent::_duplicate (p);
+  return CORBA::PolicyCurrent::_duplicate (p);
 }
 
 void
 tao_CORBA_PolicyCurrent_release (
-    CORBA_PolicyCurrent_ptr p
+    CORBA::PolicyCurrent_ptr p
   )
 {
   CORBA::release (p);
 }
 
-CORBA_PolicyCurrent_ptr
+CORBA::PolicyCurrent_ptr
 tao_CORBA_PolicyCurrent_nil (
     void
   )
@@ -3002,6 +2397,7 @@
 {
   if (CORBA::is_nil (obj))
     return CORBA_PolicyCurrent::_nil ();
+
   return
       ACE_reinterpret_cast
         (
@@ -3052,7 +2448,7 @@
         void *,
         ACE_static_cast
           (
-            CORBA_Current_ptr,
+            CORBA::Current_ptr,
             this
           )
       );
@@ -3067,90 +2463,50 @@
 
 const char* CORBA_PolicyCurrent::_interface_repository_id (void) const
 {
-  return "IDL:omg.org/CORBA_PolicyCurrent:1.0";
-}
-
-void operator<<= (CORBA::Any &_tao_any, CORBA::SetOverrideType _tao_elem)
-{
-  TAO_OutputCDR stream;
-  stream << _tao_elem;
-  _tao_any._tao_replace (
-      CORBA::_tc_SetOverrideType,
-      TAO_ENCAP_BYTE_ORDER,
-      stream.begin ()
-    );
-}
-
-CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::SetOverrideType &_tao_elem)
-{
-  ACE_TRY_NEW_ENV
-  {
-    CORBA::TypeCode_var type = _tao_any.type ();
-    
-    CORBA::Boolean result = type->equivalent (CORBA::_tc_SetOverrideType, ACE_TRY_ENV);
-    ACE_TRY_CHECK;
-    
-    if (!result)
-      return 0; // not equivalent
-    
-    TAO_InputCDR stream (
-        _tao_any._tao_get_cdr (),
-        _tao_any._tao_byte_order ()
-      );
-    if (stream >> _tao_elem)
-    {
-      return 1;
-    }
-  }
-  ACE_CATCHANY
-  {
-    return 0;
-  }
-  ACE_ENDTRY;
-  return 0;
+  return "IDL:omg.org/CORBA/PolicyCurrent:1.0";
 }
 
-void operator<<= (CORBA::Any &_tao_any, const CORBA_PolicyError &_tao_elem) // copying
+void operator<<= (CORBA::Any &_tao_any, const CORBA::PolicyError &_tao_elem) // copying
 {
   TAO_OutputCDR stream;
   stream << _tao_elem;
   _tao_any._tao_replace (
-      _tc_CORBA_PolicyError,
+      CORBA::_tc_PolicyError,
       TAO_ENCAP_BYTE_ORDER,
       stream.begin ()
     );
 }
 
-void operator<<= (CORBA::Any &_tao_any, CORBA_PolicyError *_tao_elem) // non copying
+void operator<<= (CORBA::Any &_tao_any, CORBA::PolicyError *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
   stream << *_tao_elem;
   _tao_any._tao_replace (
-      _tc_CORBA_PolicyError,
+      CORBA::_tc_PolicyError,
       TAO_ENCAP_BYTE_ORDER,
       stream.begin (),
       1,
       _tao_elem,
-      CORBA_PolicyError::_tao_any_destructor
+      CORBA::PolicyError::_tao_any_destructor
     );
 }
 
-CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_PolicyError *&_tao_elem)
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::PolicyError *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA_PolicyError*&,
+      const CORBA::PolicyError*&,
       _tao_elem
     );
 }
 
-CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_PolicyError *&_tao_elem)
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::PolicyError *&_tao_elem)
 {
   _tao_elem = 0;
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result = type->equivalent (_tc_CORBA_PolicyError, ACE_TRY_ENV);
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_PolicyError, ACE_TRY_ENV);
     ACE_TRY_CHECK;
     
     if (!result)
@@ -3158,13 +2514,13 @@
     
     if (_tao_any.any_owns_data ())
     {
-      _tao_elem = (CORBA_PolicyError *)_tao_any.value ();
+      _tao_elem = (CORBA::PolicyError *)_tao_any.value ();
       return 1;
     }
     else
     {
-      CORBA_PolicyError *tmp;
-      ACE_NEW_RETURN (tmp, CORBA_PolicyError, 0);
+      CORBA::PolicyError *tmp;
+      ACE_NEW_RETURN (tmp, CORBA::PolicyError, 0);
       TAO_InputCDR stream (
           _tao_any._tao_get_cdr (),
           _tao_any._tao_byte_order ()
@@ -3174,15 +2530,15 @@
         return 0;
       if (ACE_OS::strcmp (
           interface_repository_id.in (),
-          "IDL:omg.org/CORBA_PolicyError:1.0"))
+          "IDL:omg.org/CORBA/PolicyError:1.0"))
         return 0;
       if (stream >> *tmp)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
-            _tc_CORBA_PolicyError,
+            CORBA::_tc_PolicyError,
             1,
             tmp,
-            CORBA_PolicyError::_tao_any_destructor
+            CORBA::PolicyError::_tao_any_destructor
           );
         _tao_elem = tmp;
         return 1;
@@ -3205,7 +2561,7 @@
   TAO_OutputCDR stream;
   stream << _tao_elem;
   _tao_any._tao_replace (
-      _tc_CORBA_InvalidPolicies,
+      CORBA::_tc_InvalidPolicies,
       TAO_ENCAP_BYTE_ORDER,
       stream.begin ()
     );
@@ -3216,7 +2572,7 @@
   TAO_OutputCDR stream;
   stream << *_tao_elem;
   _tao_any._tao_replace (
-      _tc_CORBA_InvalidPolicies,
+      CORBA::_tc_InvalidPolicies,
       TAO_ENCAP_BYTE_ORDER,
       stream.begin (),
       1,
@@ -3240,7 +2596,7 @@
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result = type->equivalent (_tc_CORBA_InvalidPolicies, ACE_TRY_ENV);
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_InvalidPolicies, ACE_TRY_ENV);
     ACE_TRY_CHECK;
     
     if (!result)
@@ -3264,12 +2620,12 @@
         return 0;
       if (ACE_OS::strcmp (
           interface_repository_id.in (),
-          "IDL:omg.org/CORBA_InvalidPolicies:1.0"))
+          "IDL:omg.org/CORBA/InvalidPolicies:1.0"))
         return 0;
       if (stream >> *tmp)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
-            _tc_CORBA_InvalidPolicies,
+            CORBA::_tc_InvalidPolicies,
             1,
             tmp,
             CORBA_InvalidPolicies::_tao_any_destructor
@@ -3290,30 +2646,30 @@
   return 0;
 }
 
-void operator<<= (CORBA::Any &_tao_any, CORBA_Policy_ptr _tao_elem)
+void operator<<= (CORBA::Any &_tao_any, CORBA::Policy_ptr _tao_elem)
 {
   TAO_OutputCDR stream;
   if (stream << _tao_elem)
   {
     _tao_any._tao_replace (
-        _tc_CORBA_Policy, 
+        CORBA::_tc_Policy,
         TAO_ENCAP_BYTE_ORDER,
         stream.begin (),
         1,
-        CORBA_Policy::_duplicate (_tao_elem),
-        CORBA_Policy::_tao_any_destructor
+        CORBA::Policy::_duplicate (_tao_elem),
+        CORBA::Policy::_tao_any_destructor
       );
   }
 }
 
-CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_Policy_ptr &_tao_elem)
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::Policy_ptr &_tao_elem)
 {
   ACE_TRY_NEW_ENV
   {
-    _tao_elem = CORBA_Policy::_nil ();
+    _tao_elem = CORBA::Policy::_nil ();
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result = type->equivalent (_tc_CORBA_Policy, ACE_TRY_ENV);
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_Policy, ACE_TRY_ENV);
     ACE_TRY_CHECK;
     
     if (!result)
@@ -3326,77 +2682,77 @@
     if (stream >> _tao_elem)
     {
       ((CORBA::Any *)&_tao_any)->_tao_replace (
-          _tc_CORBA_Policy,
+          CORBA::_tc_Policy,
           1,
           _tao_elem,
-          CORBA_Policy::_tao_any_destructor
+          CORBA::Policy::_tao_any_destructor
         );
       return 1;
     }
   }
   ACE_CATCHANY
   {
-    _tao_elem = CORBA_Policy::_nil ();
+    _tao_elem = CORBA::Policy::_nil ();
     return 0;
   }
   ACE_ENDTRY;
-  _tao_elem = CORBA_Policy::_nil ();
+  _tao_elem = CORBA::Policy::_nil ();
   return 0;
 }
 
 #if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
     defined (ACE_HAS_GNU_REPO)
-    template class TAO_Object_Manager<CORBA_Policy,CORBA_Policy_var>;
+    template class TAO_Object_Manager<CORBA::Policy,CORBA::Policy_var>;
   #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
-  #  pragma instantiate TAO_Object_Manager<CORBA_Policy,CORBA_Policy_var>
+  #  pragma instantiate TAO_Object_Manager<CORBA::Policy,CORBA::Policy_var>
 #endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
 
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA_PolicyList &_tao_elem
+    const CORBA::PolicyList &_tao_elem
   ) // copying
 {
   TAO_OutputCDR stream;
   if (stream << _tao_elem)
   {
     _tao_any._tao_replace (
-        _tc_CORBA_PolicyList,
+        CORBA::_tc_PolicyList,
         TAO_ENCAP_BYTE_ORDER,
         stream.begin ()
       );
   }
 }
 
-void operator<<= (CORBA::Any &_tao_any, CORBA_PolicyList *_tao_elem) // non copying
+void operator<<= (CORBA::Any &_tao_any, CORBA::PolicyList *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
   stream << *_tao_elem;
   _tao_any._tao_replace (
-      _tc_CORBA_PolicyList,
+      CORBA::_tc_PolicyList,
       TAO_ENCAP_BYTE_ORDER,
       stream.begin (),
       1,
       _tao_elem,
-      CORBA_PolicyList::_tao_any_destructor
+      CORBA::PolicyList::_tao_any_destructor
     );
 }
 
-CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_PolicyList *&_tao_elem)
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::PolicyList *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA_PolicyList*&,
+      const CORBA::PolicyList*&,
       _tao_elem
     );
 }
 
-CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_PolicyList *&_tao_elem)
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::PolicyList *&_tao_elem)
 {
   _tao_elem = 0;
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result = type->equivalent (_tc_CORBA_PolicyList, ACE_TRY_ENV);
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_PolicyList, ACE_TRY_ENV);
     ACE_TRY_CHECK;
     
     if (!result)
@@ -3405,15 +2761,15 @@
     if (_tao_any.any_owns_data ())
     {
       _tao_elem = ACE_static_cast(
-          const CORBA_PolicyList*,
+          const CORBA::PolicyList*,
           _tao_any.value ()
         );
       return 1;
     }
     else
     {
-      CORBA_PolicyList *tmp;
-      ACE_NEW_RETURN (tmp, CORBA_PolicyList, 0);
+      CORBA::PolicyList *tmp;
+      ACE_NEW_RETURN (tmp, CORBA::PolicyList, 0);
       TAO_InputCDR stream (
           _tao_any._tao_get_cdr (),
           _tao_any._tao_byte_order ()
@@ -3421,10 +2777,10 @@
       if (stream >> *tmp)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
-            _tc_CORBA_PolicyList,
+            CORBA::_tc_PolicyList,
             1,
             ACE_static_cast (void *, tmp),
-            CORBA_PolicyList::_tao_any_destructor
+            CORBA::PolicyList::_tao_any_destructor
           );
         _tao_elem = tmp;
         return 1;
@@ -3444,50 +2800,50 @@
 
 void operator<<= (
     CORBA::Any &_tao_any,
-    const CORBA_PolicyTypeSeq &_tao_elem
+    const CORBA::PolicyTypeSeq &_tao_elem
   ) // copying
 {
   TAO_OutputCDR stream;
   if (stream << _tao_elem)
   {
     _tao_any._tao_replace (
-        _tc_CORBA_PolicyTypeSeq,
+        CORBA::_tc_PolicyTypeSeq,
         TAO_ENCAP_BYTE_ORDER,
         stream.begin ()
       );
   }
 }
 
-void operator<<= (CORBA::Any &_tao_any, CORBA_PolicyTypeSeq *_tao_elem) // non copying
+void operator<<= (CORBA::Any &_tao_any, CORBA::PolicyTypeSeq *_tao_elem) // non copying
 {
   TAO_OutputCDR stream;
   stream << *_tao_elem;
   _tao_any._tao_replace (
-      _tc_CORBA_PolicyTypeSeq,
+      CORBA::_tc_PolicyTypeSeq,
       TAO_ENCAP_BYTE_ORDER,
       stream.begin (),
       1,
       _tao_elem,
-      CORBA_PolicyTypeSeq::_tao_any_destructor
+      CORBA::PolicyTypeSeq::_tao_any_destructor
     );
 }
 
-CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA_PolicyTypeSeq *&_tao_elem)
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::PolicyTypeSeq *&_tao_elem)
 {
   return _tao_any >>= ACE_const_cast(
-      const CORBA_PolicyTypeSeq*&,
+      const CORBA::PolicyTypeSeq*&,
       _tao_elem
     );
 }
 
-CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA_PolicyTypeSeq *&_tao_elem)
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const CORBA::PolicyTypeSeq *&_tao_elem)
 {
   _tao_elem = 0;
   ACE_TRY_NEW_ENV
   {
     CORBA::TypeCode_var type = _tao_any.type ();
     
-    CORBA::Boolean result = type->equivalent (_tc_CORBA_PolicyTypeSeq, ACE_TRY_ENV);
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_PolicyTypeSeq, ACE_TRY_ENV);
     ACE_TRY_CHECK;
     
     if (!result)
@@ -3496,15 +2852,15 @@
     if (_tao_any.any_owns_data ())
     {
       _tao_elem = ACE_static_cast(
-          const CORBA_PolicyTypeSeq*,
+          const CORBA::PolicyTypeSeq*,
           _tao_any.value ()
         );
       return 1;
     }
     else
     {
-      CORBA_PolicyTypeSeq *tmp;
-      ACE_NEW_RETURN (tmp, CORBA_PolicyTypeSeq, 0);
+      CORBA::PolicyTypeSeq *tmp;
+      ACE_NEW_RETURN (tmp, CORBA::PolicyTypeSeq, 0);
       TAO_InputCDR stream (
           _tao_any._tao_get_cdr (),
           _tao_any._tao_byte_order ()
@@ -3512,10 +2868,10 @@
       if (stream >> *tmp)
       {
         ((CORBA::Any *)&_tao_any)->_tao_replace (
-            _tc_CORBA_PolicyTypeSeq,
+            CORBA::_tc_PolicyTypeSeq,
             1,
             ACE_static_cast (void *, tmp),
-            CORBA_PolicyTypeSeq::_tao_any_destructor
+            CORBA::PolicyTypeSeq::_tao_any_destructor
           );
         _tao_elem = tmp;
         return 1;
@@ -3533,6 +2889,46 @@
   return 0;
 }
 
+void operator<<= (CORBA::Any &_tao_any, CORBA::SetOverrideType _tao_elem)
+{
+  TAO_OutputCDR stream;
+  stream << _tao_elem;
+  _tao_any._tao_replace (
+      CORBA::_tc_SetOverrideType,
+      TAO_ENCAP_BYTE_ORDER,
+      stream.begin ()
+    );
+}
+
+CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, CORBA::SetOverrideType &_tao_elem)
+{
+  ACE_TRY_NEW_ENV
+  {
+    CORBA::TypeCode_var type = _tao_any.type ();
+
+    CORBA::Boolean result = type->equivalent (CORBA::_tc_SetOverrideType, ACE_TRY_ENV);
+    ACE_TRY_CHECK;
+
+    if (!result)
+      return 0; // not equivalent
+
+    TAO_InputCDR stream (
+        _tao_any._tao_get_cdr (),
+        _tao_any._tao_byte_order ()
+      );
+    if (stream >> _tao_elem)
+    {
+      return 1;
+    }
+  }
+  ACE_CATCHANY
+  {
+    return 0;
+  }
+  ACE_ENDTRY;
+  return 0;
+}
+
 #if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
     defined (ACE_HAS_GNU_REPO)
     template class TAO_Object_Manager<CORBA_PolicyManager,CORBA_PolicyManager_var>;
@@ -3542,13 +2938,6 @@
 
 #if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
     defined (ACE_HAS_GNU_REPO)
-    template class TAO_Object_Manager<CORBA_Current,CORBA_Current_var>;
-  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
-  #  pragma instantiate TAO_Object_Manager<CORBA_Current,CORBA_Current_var>
-#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */
-
-#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
-    defined (ACE_HAS_GNU_REPO)
     template class TAO_Object_Manager<CORBA_PolicyCurrent,CORBA_PolicyCurrent_var>;
   #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
   #  pragma instantiate TAO_Object_Manager<CORBA_PolicyCurrent,CORBA_PolicyCurrent_var>
@@ -3599,7 +2988,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA_Policy_ptr _tao_objref
+    const CORBA::Policy_ptr _tao_objref
   )
 {
   CORBA::Object_ptr _tao_corba_obj = _tao_objref;
@@ -3608,7 +2997,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA_Policy_ptr &_tao_objref
+    CORBA::Policy_ptr &_tao_objref
   )
 {
   ACE_TRY_NEW_ENV
@@ -3618,7 +3007,7 @@
       return 0;
     // narrow to the right type
     _tao_objref =
-      CORBA_Policy::_unchecked_narrow (
+      CORBA::Policy::_unchecked_narrow (
           obj.in (),
           ACE_TRY_ENV
         );
@@ -3635,7 +3024,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA_PolicyList &_tao_sequence
+    const CORBA::PolicyList &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -3653,7 +3042,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA_PolicyList &_tao_sequence
+    CORBA::PolicyList &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -3682,7 +3071,7 @@
 
 CORBA::Boolean operator<< (
     TAO_OutputCDR &strm,
-    const CORBA_PolicyTypeSeq &_tao_sequence
+    const CORBA::PolicyTypeSeq &_tao_sequence
   )
 {
   if (strm << _tao_sequence.length ())
@@ -3695,7 +3084,7 @@
 
 CORBA::Boolean operator>> (
     TAO_InputCDR &strm,
-    CORBA_PolicyTypeSeq &_tao_sequence
+    CORBA::PolicyTypeSeq &_tao_sequence
   )
 {
   CORBA::ULong _tao_seq_len;
@@ -3716,4 +3105,3 @@
   }
   return 0; // error
 }
-
