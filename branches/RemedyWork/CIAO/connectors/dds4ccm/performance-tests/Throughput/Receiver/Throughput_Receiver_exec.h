// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.8.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/
#ifndef CIAO_THROUGHPUT_RECEIVER_EXEC_3P5DJU_H_
#define CIAO_THROUGHPUT_RECEIVER_EXEC_3P5DJU_H_

#include /**/ "ace/pre.h"

#include "Throughput_ReceiverEC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include /**/ "Receiver_exec_export.h"
#include "tao/LocalObject.h"

namespace CIAO_Throughput_Receiver_Impl
{
  class Receiver_exec_i;
  typedef ACE_Atomic_Op <TAO_SYNCH_MUTEX, CORBA::Boolean> Atomic_Bool;

  /**
   * Provider Executor Implementation Class: info_listen_data_listener_exec_i
   */

  class info_listen_data_listener_exec_i
    : public virtual ::Throughput::ThroughputTestConn::CCM_Listener,
      public virtual ::CORBA::LocalObject
  {
  public:
    info_listen_data_listener_exec_i (
      ::Throughput::CCM_Receiver_Context_ptr ctx,
      Receiver_exec_i &callback);
    virtual ~info_listen_data_listener_exec_i (void);

    //@{
    /** Operations and attributes from Throughput::ThroughputTestConn::Listener. */

    virtual
    void on_one_data (const ::ThroughputTest & datum,
    const ::CCM_DDS::ReadInfo & info);

    virtual
    void on_many_data (const ::ThroughputTestSeq & data,
    const ::CCM_DDS::ReadInfoSeq & infos);
    //@}

  private:
    ::Throughput::CCM_Receiver_Context_var ciao_context_;
    Receiver_exec_i &callback_;
  };

  /**
   * Provider Executor Implementation Class: command_listen_data_listener_exec_i
   */

  class command_listen_data_listener_exec_i
    : public virtual ::Throughput::ThroughputCommandConn::CCM_Listener,
      public virtual ::CORBA::LocalObject
  {
  public:
    command_listen_data_listener_exec_i (
      ::Throughput::CCM_Receiver_Context_ptr ctx,
      Receiver_exec_i &callback);
    virtual ~command_listen_data_listener_exec_i (void);

    //@{
    /** Operations and attributes from Throughput::ThroughputCommandConn::Listener. */

    virtual
    void on_one_data (const ::ThroughputCommand & datum,
    const ::CCM_DDS::ReadInfo & info);

    virtual
    void on_many_data (const ::ThroughputCommandSeq & data,
    const ::CCM_DDS::ReadInfoSeq & infos);
    //@}

  private:
    ::Throughput::CCM_Receiver_Context_var ciao_context_;
    Receiver_exec_i &callback_;
  };

  /**
   * Component Executor Implementation Class: Receiver_exec_i
   */

  class Receiver_exec_i
    : public virtual Receiver_Exec,
      public virtual ::CORBA::LocalObject
  {
  public:
    Receiver_exec_i (void);
    virtual ~Receiver_exec_i (void);

    //@{
    /** Supported operations and attributes. */

    //@}

    //@{
    /** Component attributes and port operations. */

    virtual ::Throughput::ThroughputTestConn::CCM_Listener_ptr
    get_info_listen_data_listener (void);

    virtual ::CCM_DDS::CCM_PortStatusListener_ptr
    get_info_listen_status (void);

    virtual ::Throughput::ThroughputCommandConn::CCM_Listener_ptr
    get_command_listen_data_listener (void);

    virtual ::CCM_DDS::CCM_PortStatusListener_ptr
    get_command_listen_status (void);
    //@}

    //@{
    /** Operations from Components::SessionComponent. */
    virtual void set_session_context (::Components::SessionContext_ptr ctx);
    virtual void configuration_complete (void);
    virtual void ccm_activate (void);
    virtual void ccm_passivate (void);
    virtual void ccm_remove (void);
    //@}

    //@{
    /** User defined public operations. */
    void record_data (ThroughputTest & an_instance);
    void handle_run (ThroughputCommand & an_instance);

    //@}

  private:
    ::Throughput::CCM_Receiver_Context_var ciao_context_;

    //@{
    /** Component attributes. */
    ::Throughput::ThroughputTestConn::CCM_Listener_var ciao_info_listen_data_listener_;
    ::CCM_DDS::CCM_PortStatusListener_var ciao_info_listen_status_;
    ::Throughput::ThroughputCommandConn::CCM_Listener_var ciao_command_listen_data_listener_;
    ::CCM_DDS::CCM_PortStatusListener_var ciao_command_listen_status_;
    //@}

    //@{
    /** User defined members. */

    //@}

    //@{
    /** User defined private operations. */

    CORBA::ULongLong count_;
    CORBA::ULongLong interval_messages_received_;
    CORBA::ULongLong interval_bytes_received_;
    CORBA::ULong interval_data_length_;
    CORBA::ULong run_;
    ACE_UINT64 first_time_;
    CORBA::ULongLong demand_;
    CORBA::ULongLong seq_num_;
    CORBA::ULongLong messages_lost_;
    Atomic_Bool log_;

    void start ();
    void reset_results (void);
    void show_results (const ACE_UINT64& interval_time);
    //@}
  };

  extern "C" RECEIVER_EXEC_Export ::Components::EnterpriseComponent_ptr
  create_Throughput_Receiver_Impl (void);
}

#include /**/ "ace/post.h"

#endif /* ifndef */
