// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.8.3
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:1661

#include "AsynchTA_conn_i.h"

//original namespace name generated with -Gcn -Gex, replaced with current name
//namespace CIAO_AsynchT_AMI4CCM_MyFoo_Connector_AMI4CCM_Connector_Impl
namespace CIAO_AsynchT_Sender_Impl
{

  AMI4CCM_MyFooReplyHandler_i::AMI4CCM_MyFooReplyHandler_i (
                            Atomic_UShort &nr_of_sent,
                            Atomic_UShort &nr_of_rec)
      : nr_of_sent_ (nr_of_sent),
        nr_of_rec_ (nr_of_rec)
  {
  }

  AMI4CCM_MyFooReplyHandler_i::~AMI4CCM_MyFooReplyHandler_i (void)
  {
  }

  void
  AMI4CCM_MyFooReplyHandler_i::foo (::CORBA::Long ami_return_val,
      const char * /*answer*/)
    {
      ++this->nr_of_rec_;
      if (ami_return_val == 1)
        {
          ACE_DEBUG ((LM_DEBUG, "OK: GET ASYNCHRONOUS CALLBACK foo.\n"));
          --this->nr_of_sent_;
        }
      if (ami_return_val == 2)
        {
          ACE_ERROR ((LM_ERROR, "ERROR: GET ASYNCHRONOUS CALLBACK "
                                "FROM SYNCHRONOUS SENT MESSAGE\n"));
        }
  }

  void
  AMI4CCM_MyFooReplyHandler_i::foo_excep (
                            ::CCM_AMI::ExceptionHolder * excep_holder)
  {
    excep_holder->raise_exception ();
  }

  void
  AMI4CCM_MyFooReplyHandler_i::bar (CORBA::Long l_cmd)
  {
    ++this->nr_of_rec_;
    if (l_cmd == 1)
      {
        --this->nr_of_sent_;
        ACE_DEBUG ((LM_DEBUG, "OK: GET ASYNCHRONOUS CALLBACK bar.\n"));
      }
    if (l_cmd == 2)
      {
        ACE_ERROR ((LM_ERROR, "ERROR: GET ASYNCHRONOUS CALLBACK "
                              "FROM SYNCHRONOUS SENT MESSAGE\n"));
      }
  }

  void
  AMI4CCM_MyFooReplyHandler_i::bar_excep (
      ::CCM_AMI::ExceptionHolder * excep_holder)
  {
    excep_holder->raise_exception ();
  }

  void
  AMI4CCM_MyFooReplyHandler_i::get_rw_attrib (
      ::CORBA::Short /*ami_return_val*/)
  {
      ACE_DEBUG ((LM_DEBUG, "OK: GET ASYNCHRONOUS CALLBACK get_rw_attrib.\n"));
      ++this->nr_of_rec_;
      --this->nr_of_sent_;
  }

  void
  AMI4CCM_MyFooReplyHandler_i::get_rw_attrib_excep (
      ::CCM_AMI::ExceptionHolder * excep_holder)
  {
    excep_holder->raise_exception ();
  }

  void
  AMI4CCM_MyFooReplyHandler_i::set_rw_attrib (void)
  {
    ACE_DEBUG ((LM_DEBUG, "OK: GET ASYNCHRONOUS CALLBACK set_rw_attrib.\n"));
    ++this->nr_of_rec_;
    --this->nr_of_sent_;
  }

  void
  AMI4CCM_MyFooReplyHandler_i::set_rw_attrib_excep (
                                  ::CCM_AMI::ExceptionHolder * excep_holder)
  {
    excep_holder->raise_exception ();
  }

  void
  AMI4CCM_MyFooReplyHandler_i::get_ro_attrib (
                                          ::CORBA::Short /*ami_return_val*/)
  {
    ACE_DEBUG ((LM_DEBUG, "OK: GET ASYNCHRONOUS CALLBACK get_ro_attrib.\n"));
    ++this->nr_of_rec_;
    --this->nr_of_sent_;
  }

  void
  AMI4CCM_MyFooReplyHandler_i::get_ro_attrib_excep (
                                   ::CCM_AMI::ExceptionHolder * excep_holder)
  {
    excep_holder->raise_exception ();
  }
}
