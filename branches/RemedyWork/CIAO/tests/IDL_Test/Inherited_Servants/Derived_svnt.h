// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0.5
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:1073

#ifndef CIAO_SESSION_DERIVED_SVNT_7LDT8W_H_
#define CIAO_SESSION_DERIVED_SVNT_7LDT8W_H_

#include /**/ "ace/pre.h"

#include /**/ "Derived_svnt_export.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "ciao/Containers/Session/Session_ContainerC.h"
#include "ciao/Contexts/Session/Session_Context_T.h"
#include "ciao/Servants/Session/Servant_Impl_T.h"
#include "ciao/Servants/Home_Servant_Impl_T.h"

#include "DerivedEC.h"

#include "DerivedS.h"

namespace CIAO_FACET_Inherited
{
  class derived_interface_Servant
    : public virtual POA_Inherited::derived_interface
  {
  public:
    derived_interface_Servant (
      ::Inherited::CCM_derived_interface_ptr executor,
      ::Components::CCMContext_ptr ctx);
    
    virtual ~derived_interface_Servant (void);

    virtual void do_derived (
      void);

    /// Get component implementation.
    virtual CORBA::Object_ptr _get_component (void);
  
  protected:
    /// Facet executor.
    ::Inherited::CCM_derived_interface_var executor_;

    /// Context object.
    ::Components::CCMContext_var ctx_;
  };
  
}

namespace CIAO_Inherited_Derived_comp_Impl
{
  class Derived_comp_Servant;

  class IS_DERIVED_SVNT_Export Derived_comp_Context
    : public virtual ::CIAO::Session_Context_Impl<
        ::Inherited::CCM_Derived_comp_Context,
        ::Inherited::Derived_comp>
  {
  public:
    /// Allow the servant to access our state.
    friend class Derived_comp_Servant;

    /// Some useful typedefs.
    typedef
    ::CIAO::Session_Context_Impl<
        ::Inherited::CCM_Derived_comp_Context,
        ::Inherited::Derived_comp>
      base_type;
    
    typedef base_type::context_type context_type;
    typedef base_type::component_type component_type;
    typedef ::CIAO::Connector_Servant_Impl_Base svnt_base_type;

    Derived_comp_Context (
      ::Components::CCMHome_ptr h,
      ::CIAO::Session_Container_ptr c,
      PortableServer::Servant sv,
      const char *id);
    
    virtual ~Derived_comp_Context (void);

    /** @name Operations and members for Derived_comp receptacles and event sources,
     * defined in ::Inherited::CCM_Derived_comp_Context.
     */
    //@{
  
  public:
    virtual ::Inherited::derived_interface_ptr
    get_connection_uses_derived (void);
    
  protected:
    virtual void
    connect_uses_derived (::Inherited::derived_interface_ptr);

    virtual ::Inherited::derived_interface_ptr
    disconnect_uses_derived (void);
  
  private:
    /// Simplex uses_derived connection.
    ::Inherited::derived_interface_var
    ciao_uses_uses_derived_;
    //@}
  };

  class IS_DERIVED_SVNT_Export Derived_comp_Servant
    : public virtual
        ::CIAO::Session_Servant_Impl<
          ::POA_Inherited::Derived_comp,
          ::Inherited::CCM_Derived_comp,
          Derived_comp_Context>
  {
  public:
    typedef ::Inherited::CCM_Derived_comp _exec_type;
    
    Derived_comp_Servant (
      ::Inherited::CCM_Derived_comp_ptr executor,
      ::Components::CCMHome_ptr h,
      const char * ins_name,
      ::CIAO::Home_Servant_Impl_Base *hs,
      ::CIAO::Session_Container_ptr c);
    
    virtual ~Derived_comp_Servant (void);
    
    /// Supported operations and attributes.
  
  public:
    virtual ::Inherited::derived_interface_ptr
    provide_prov_derived (void);
  
  private:
    void
    setup_prov_derived_i (void);
  
  private:
    ::Inherited::derived_interface_var
    provide_prov_derived_;
  
  public:
    virtual ::Inherited::derived_interface_ptr
    get_connection_uses_derived (void);

    virtual void
    connect_uses_derived (::Inherited::derived_interface_ptr);

    virtual ::Inherited::derived_interface_ptr
    disconnect_uses_derived (void);

    // Base class overrides.
  
  public:
    virtual ::Components::Cookie *
    connect (const char * name, ::CORBA::Object_ptr connection);

    virtual ::CORBA::Object_ptr
    disconnect (const char * name, ::Components::Cookie * ck);

    virtual ::Components::ReceptacleDescriptions *
    get_all_receptacles (void);

    /// CIAO-specific.
    ::CORBA::Object_ptr
    get_facet_executor (const char * name);
  };

  extern "C" IS_DERIVED_SVNT_Export ::PortableServer::Servant
  create_Inherited_Derived_comp_Servant (
    ::Components::EnterpriseComponent_ptr p,
    ::CIAO::Session_Container_ptr c,
    const char * ins_name);
}

namespace CIAO_FACET_Inherited
{
  class derived_2_interface_Servant
    : public virtual POA_Inherited::derived_2_interface
  {
  public:
    derived_2_interface_Servant (
      ::Inherited::CCM_derived_2_interface_ptr executor,
      ::Components::CCMContext_ptr ctx);
    
    virtual ~derived_2_interface_Servant (void);

    virtual void do_derived (
      void);

    virtual void do_derived_2 (
      void);

    /// Get component implementation.
    virtual CORBA::Object_ptr _get_component (void);
  
  protected:
    /// Facet executor.
    ::Inherited::CCM_derived_2_interface_var executor_;

    /// Context object.
    ::Components::CCMContext_var ctx_;
  };
  
}

namespace CIAO_Inherited_Derived_2_comp_Impl
{
  class Derived_2_comp_Servant;

  class IS_DERIVED_SVNT_Export Derived_2_comp_Context
    : public virtual ::CIAO::Session_Context_Impl<
        ::Inherited::CCM_Derived_2_comp_Context,
        ::Inherited::Derived_2_comp>
  {
  public:
    /// Allow the servant to access our state.
    friend class Derived_2_comp_Servant;

    /// Some useful typedefs.
    typedef
    ::CIAO::Session_Context_Impl<
        ::Inherited::CCM_Derived_2_comp_Context,
        ::Inherited::Derived_2_comp>
      base_type;
    
    typedef base_type::context_type context_type;
    typedef base_type::component_type component_type;
    typedef ::CIAO::Connector_Servant_Impl_Base svnt_base_type;

    Derived_2_comp_Context (
      ::Components::CCMHome_ptr h,
      ::CIAO::Session_Container_ptr c,
      PortableServer::Servant sv,
      const char *id);
    
    virtual ~Derived_2_comp_Context (void);

    /** @name Operations and members for Derived_2_comp receptacles and event sources,
     * defined in ::Inherited::CCM_Derived_2_comp_Context.
     */
    //@{
  
  public:
    virtual ::Inherited::derived_2_interface_ptr
    get_connection_uses_derived_2 (void);
    
  protected:
    virtual void
    connect_uses_derived_2 (::Inherited::derived_2_interface_ptr);

    virtual ::Inherited::derived_2_interface_ptr
    disconnect_uses_derived_2 (void);
  
  private:
    /// Simplex uses_derived_2 connection.
    ::Inherited::derived_2_interface_var
    ciao_uses_uses_derived_2_;
  
  public:
    virtual ::Inherited::derived_interface_ptr
    get_connection_uses_derived (void);
    
  protected:
    virtual void
    connect_uses_derived (::Inherited::derived_interface_ptr);

    virtual ::Inherited::derived_interface_ptr
    disconnect_uses_derived (void);
  
  private:
    /// Simplex uses_derived connection.
    ::Inherited::derived_interface_var
    ciao_uses_uses_derived_;
    //@}
  };

  class IS_DERIVED_SVNT_Export Derived_2_comp_Servant
    : public virtual
        ::CIAO::Session_Servant_Impl<
          ::POA_Inherited::Derived_2_comp,
          ::Inherited::CCM_Derived_2_comp,
          Derived_2_comp_Context>
  {
  public:
    typedef ::Inherited::CCM_Derived_2_comp _exec_type;
    
    Derived_2_comp_Servant (
      ::Inherited::CCM_Derived_2_comp_ptr executor,
      ::Components::CCMHome_ptr h,
      const char * ins_name,
      ::CIAO::Home_Servant_Impl_Base *hs,
      ::CIAO::Session_Container_ptr c);
    
    virtual ~Derived_2_comp_Servant (void);
    
    /// Supported operations and attributes.
  
  public:
    virtual ::Inherited::derived_2_interface_ptr
    provide_prov_derived_2 (void);
  
  private:
    void
    setup_prov_derived_2_i (void);
  
  private:
    ::Inherited::derived_2_interface_var
    provide_prov_derived_2_;
  
  public:
    virtual ::Inherited::derived_2_interface_ptr
    get_connection_uses_derived_2 (void);

    virtual void
    connect_uses_derived_2 (::Inherited::derived_2_interface_ptr);

    virtual ::Inherited::derived_2_interface_ptr
    disconnect_uses_derived_2 (void);
  
  public:
    virtual ::Inherited::derived_interface_ptr
    provide_prov_derived (void);
  
  private:
    void
    setup_prov_derived_i (void);
  
  private:
    ::Inherited::derived_interface_var
    provide_prov_derived_;
  
  public:
    virtual ::Inherited::derived_interface_ptr
    get_connection_uses_derived (void);

    virtual void
    connect_uses_derived (::Inherited::derived_interface_ptr);

    virtual ::Inherited::derived_interface_ptr
    disconnect_uses_derived (void);

    // Base class overrides.
  
  public:
    virtual ::Components::Cookie *
    connect (const char * name, ::CORBA::Object_ptr connection);

    virtual ::CORBA::Object_ptr
    disconnect (const char * name, ::Components::Cookie * ck);

    virtual ::Components::ReceptacleDescriptions *
    get_all_receptacles (void);

    /// CIAO-specific.
    ::CORBA::Object_ptr
    get_facet_executor (const char * name);
  };

  extern "C" IS_DERIVED_SVNT_Export ::PortableServer::Servant
  create_Inherited_Derived_2_comp_Servant (
    ::Components::EnterpriseComponent_ptr p,
    ::CIAO::Session_Container_ptr c,
    const char * ins_name);
}

#include /**/ "ace/post.h"

#endif /* ifndef */
