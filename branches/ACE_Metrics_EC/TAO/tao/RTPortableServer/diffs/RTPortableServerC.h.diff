--- orig/RTPortableServerC.h	Tue Jun 12 18:17:14 2001
+++ RTPortableServerC.h	Tue Jun 12 16:19:19 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -23,15 +23,14 @@
 #define _TAO_IDL_ORIG_RTPORTABLESERVERC_H_
 
 #include "ace/pre.h"
-#include "tao/corba.h"
+#include "rtportableserver_export.h"
+#include "tao/PortableServer/PortableServerC.h"
 
 #if !defined (ACE_LACKS_PRAGMA_ONCE)
 # pragma once
 #endif /* ACE_LACKS_PRAGMA_ONCE */
 
-#include "rtportableserver_export.h"
-#include "../PortableServer/PortableServerC.h"
-#include "../RTCORBA/RTCORBAC.h"
+#include "tao/RTCORBA/RTCORBA.h"
 
 #if defined (TAO_EXPORT_MACRO)
 #undef TAO_EXPORT_MACRO
@@ -97,10 +96,7 @@
     static POA_ptr duplicate (POA_ptr);
     static void release (POA_ptr);
     static POA_ptr nil (void);
-    static POA_ptr narrow (
-        CORBA::Object *,
-        CORBA::Environment &
-      );
+    static POA_ptr narrow (CORBA::Object *, CORBA::Environment &);
     static CORBA::Object * upcast (void *);
   
   private:
@@ -141,8 +137,7 @@
 #if !defined (_RTPORTABLESERVER_POA_CH_)
 #define _RTPORTABLESERVER_POA_CH_
   
-  class TAO_RTPortableServer_Export POA
-    : public virtual PortableServer::POA
+class TAO_RTPortableServer_Export POA: public virtual PortableServer::POA
   {
   public:
   #if !defined(__GNUC__) || !defined (ACE_HAS_GNUG_PRE_2_8)
@@ -152,19 +147,16 @@
 
     // the static operations
     static POA_ptr _duplicate (POA_ptr obj);
-    
     static POA_ptr _narrow (
         CORBA::Object_ptr obj,
         CORBA::Environment &ACE_TRY_ENV = 
           TAO_default_environment ()
       );
-    
     static POA_ptr _unchecked_narrow (
         CORBA::Object_ptr obj,
         CORBA::Environment &ACE_TRY_ENV = 
           TAO_default_environment ()
       );
-    
     static POA_ptr _nil (void)
       {
         return (POA_ptr)0;
@@ -227,7 +219,6 @@
     POA ();
     
     virtual ~POA (void);
-  
   private:
     POA (const POA &);
     void operator= (const POA &);
