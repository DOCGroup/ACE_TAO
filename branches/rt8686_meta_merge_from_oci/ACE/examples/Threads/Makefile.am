##  Process this file with automake to create Makefile.in
##
## $Id$
##
## This file was generated by MPC.  Any changes made directly to
## this file will be lost the next time it is generated.
##
## MPC Command:
## ./bin/mwc.pl -type automake -noreldefs ACE.mwc

ACE_BUILDDIR = $(top_builddir)
ACE_ROOT = $(top_srcdir)


## Makefile.Threads_Auto_Event.am
noinst_PROGRAMS = auto_event

auto_event_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

auto_event_SOURCES = \
  auto_event.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

auto_event_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Barrier1.am
noinst_PROGRAMS += barrier1

barrier1_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

barrier1_SOURCES = \
  barrier1.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

barrier1_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Barrier2.am
noinst_PROGRAMS += barrier2

barrier2_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

barrier2_SOURCES = \
  barrier2.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

barrier2_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Cancel.am
noinst_PROGRAMS += cancel

cancel_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

cancel_SOURCES = \
  cancel.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

cancel_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Future1.am

if !BUILD_ACE_FOR_TAO
noinst_PROGRAMS += future1

future1_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

future1_SOURCES = \
  future1.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

future1_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

endif !BUILD_ACE_FOR_TAO

## Makefile.Threads_Future2.am

if !BUILD_ACE_FOR_TAO
noinst_PROGRAMS += future2

future2_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

future2_SOURCES = \
  future2.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

future2_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

endif !BUILD_ACE_FOR_TAO

## Makefile.Threads_Manual_Event.am
noinst_PROGRAMS += manual_event

manual_event_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

manual_event_SOURCES = \
  manual_event.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

manual_event_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Process_Mutex.am

if !BUILD_ACE_FOR_TAO
noinst_PROGRAMS += process_mutex

process_mutex_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

process_mutex_SOURCES = \
  process_mutex.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

process_mutex_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

endif !BUILD_ACE_FOR_TAO

## Makefile.Threads_Process_Semaphore.am

if !BUILD_ACE_FOR_TAO
noinst_PROGRAMS += process_semaphore

process_semaphore_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

process_semaphore_SOURCES = \
  process_semaphore.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

process_semaphore_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

endif !BUILD_ACE_FOR_TAO

## Makefile.Threads_Reader_Writer.am
noinst_PROGRAMS += reader_writer

reader_writer_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

reader_writer_SOURCES = \
  reader_writer.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

reader_writer_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Recursive_Mutex.am
noinst_PROGRAMS += recursive_mutex

recursive_mutex_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

recursive_mutex_SOURCES = \
  recursive_mutex.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

recursive_mutex_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Task_Five.am
noinst_PROGRAMS += task_five

task_five_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

task_five_SOURCES = \
  task_five.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

task_five_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Task_Four.am
noinst_PROGRAMS += task_four

task_four_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

task_four_SOURCES = \
  task_four.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

task_four_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Task_One.am
noinst_PROGRAMS += task_one

task_one_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

task_one_SOURCES = \
  task_one.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

task_one_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Task_Three.am
noinst_PROGRAMS += task_three

task_three_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

task_three_SOURCES = \
  task_three.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

task_three_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Task_Two.am
noinst_PROGRAMS += task_two

task_two_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

task_two_SOURCES = \
  task_two.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

task_two_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Thread_Manager.am
noinst_PROGRAMS += thread_manager

thread_manager_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

thread_manager_SOURCES = \
  thread_manager.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

thread_manager_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Thread_Pool.am
noinst_PROGRAMS += thread_pool

thread_pool_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

thread_pool_SOURCES = \
  thread_pool.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

thread_pool_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Thread_Specific.am
noinst_PROGRAMS += thread_specific

thread_specific_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

thread_specific_SOURCES = \
  thread_specific.cpp \
  thread_specific.h

thread_specific_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Token.am
noinst_PROGRAMS += token

token_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

token_SOURCES = \
  token.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

token_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Tss1.am
noinst_PROGRAMS += tss1

tss1_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

tss1_SOURCES = \
  tss1.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

tss1_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Makefile.Threads_Tss2.am
noinst_PROGRAMS += tss2

tss2_CPPFLAGS = \
  -I$(ACE_ROOT) \
  -I$(ACE_BUILDDIR)

tss2_SOURCES = \
  tss2.cpp \
  TSS_Data.h \
  TSS_Obj.h \
  TSS_Task.h \
  thread_specific.h

tss2_LDADD = \
  $(ACE_BUILDDIR)/ace/libACE.la

## Clean up template repositories, etc.
clean-local:
	-rm -f *~ *.bak *.rpo *.sym lib*.*_pure_* core core.*
	-rm -f gcctemp.c gcctemp so_locations *.ics
	-rm -rf cxx_repository ptrepository ti_files
	-rm -rf templateregistry ir.out
	-rm -rf ptrepository SunWS_cache Templates.DB
