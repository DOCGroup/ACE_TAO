Mon Mar 26 11:05:40 2001  Balachandran  <bala@cs.wustl.edu>

        * TAO version 1.1.14 released.

Mon Mar 26 09:10:09 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Sched/Reconfig_Sched_Utils_T.cpp:
        * orbsvcs/orbsvcs/Sched/Reconfig_Sched_Utils_T.h:
        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.cpp: Fixed
          compilation problem with VXWORKS GCC.

Mon Mar 26 07:56:56 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/examples/RtEC/Schedule/Service.cpp: Removed redundant
          guards for g++ 2.7. This should fix problems in LYNX_I386.

Mon Mar 26 06:38:34 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp: Fixed a
          compilation error in Borland C++. Converting a void * to in with
          a static cast does not go well in Borland. Changed all the
          static_cast to reinterpret_cast. Thanks to Chris K for
          reporting this problem and suggesting a fix.

Sun Mar 25 20:18:18 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/POA/Excessive_Object_Deactivations/Excessive_Object_Deactivations.cpp:
          Fixed a warning with KCC builds. The ACE_ASSERTs dissappear in
          non-debug builds. Added ACE_UNUSED_ARG to prevent the compiler
          from complaining about unused variables.

Sun Mar 25 18:15:39 2001  Angelo Corsaro  <corsaro@danzon.cs.wustl.edu>

        * tests/RTCORBA/MT_Client_Protocol_Priority/process-output.pl:
          Modified confition in the script that was leading to a false
          detected error. See comment in the script.

Sun Mar 25 17:14:31 2001  Angelo Corsaro  <corsaro@danzon.cs.wustl.edu>

        * tao/orbconf.h:
          Updated the number associated to the RTCORBA macros to reflect
          the changes made by Frank in:
          Sun Mar  4 13:29:09 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>
          This fix remove the inconsistencies that were currently present
          in the constant associated to RTCORBA policies.

        * tao/Stub.cpp (relative_roundtrip_timeout):
          Removed a line of code that was erroneously, setting
          the policies holded by the stub to zero. This subtle bug
          a very weird behavior in certain cases because a call to this
          method would have wiped out totally the policies associated to
          the Stub.

        * tests/RTCORBA/Banded_Connections/run_test.pl:
          Changed some of paramether passed by the script to the
          tests.


Sun Mar 25 09:55:38 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/IIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
          Change handle_close() method, the object should be deleted even
          if it is not registered with the Reactor.  I think this fixes
          [BUGID:837]

Sun Mar 25 11:44:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport.cpp: Fixed a warning in cxx. The problem was in
          casting 'this' pointer to an 'int'. Changed the cast to 'long'
          so that cxx doesnt complain.

Sun Mar 25 11:17:40 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Sched/Reconfig_Sched_Utils.h:
        * orbsvcs/orbsvcs/Sched/Reconfig_Sched_Utils.cpp:
        * orbsvcs/orbsvcs/Sched/Reconfig_Sched_Utils_T.h:
        * orbsvcs/orbsvcs/Sched/Reconfig_Sched_Utils_T.cpp: Removed
          redundant guards for old g++. These files got missed in the last
          change.

Sun Mar 25 08:52:48 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile.RTSched:
          Added guards for old g++.

        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler.cpp:
        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler.h:
        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.cpp:
        * orbsvcs/orbsvcs/Sched/Reconfig_Scheduler_T.h:
          Removed redundant guards  in the files. This should fix a small
          compilation problem in LYNX-I386 builds.

Sun Mar 25 07:42:44 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp :
          Under Win32 the handle() has to be cast before setting the id()
          field on TAO_Transport.

Sat Mar 24 22:15:23 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Invocation.cpp:
          Do not release the Transport until the destructor is invoked.

Sat Mar 24 15:06:11 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport.cpp: Fixed a compile error in SunCC 4.2.

Sat Mar 24 07:55:45 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
          Under Win32 the handle() has to be cast before setting the id()
          field on TAO_Transport.

Fri Mar 23 21:19:17 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/IIOP_Connection_Handler.cpp (activate):
          Under Win32 the handle() has to be cast before setting the id()
          field on TAO_Transport.

Fri Mar 23 18:15:58 2001  Chris Cleeland  <cleeland_c@ociweb.com>

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Lite.cpp:
        * tao/GIOP_Utils.cpp:

          Changed uses of TAO_Tranport::handle() to TAO_Transport::id()
          the uses were for debug/informational message purposes.

        * tao/IIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:

          Changed debug message accesses to the transport's handler's
          handle, and replaced with calls to TAO_Transport::id().

        * tao/Sync_Strategies.cpp (timer_check): Eliminated direct
          references to the transport's event handler and used the new
          TAO_Transport::register_for_timer_event method to do this in a
          lock-safe manner.

        * tao/Transport_Cache_Manager.cpp (make_idle_i): Protected against
          being passed a zero pointer as argument.

        * tao/Transport_Cache_Manager.cpp (close_i): Added back code to
          fill in an ACE_Handle_Set of all transports' associated handlers
          which are registered with the reactor.  This is necessary to
          perform an orderly close and unloading of the ORB.

        * tao/Transport.cpp:
        * tao/Transport.h:

          Added an ACE_Lock, initialized identically to the way that the
          TAO_Transport_Cache_Manager's lock is initialized, to lock
          accesses to or through the protocol-specific transport's
          handler.  Although the handler doesn't exist in the generic
          TAO_Transport, the lock does so that the framework handles all
          the tedious locking issues and the pluggable protocol
          implementor only needs to override methods which are called in
          lock-safe manner.  Note that since the lock is initialized from
          the resource factory, single-threaded implementations need not
          pay locking penalties.

          Added provide_handle method to permit the Sync Strategies to
          fill in an ACE_Handle_Set without violating locking and
          encapsulation.

          Made the following methods lock-safe and created corresponding
          _i methods which assume that the lock is already held--send,
          recv, register_handler, event_handler, transtion_handler_state.
          The corresponding _i methods are protected.

          Eliminated service_handler and connection_handler accessors
          since all they did was confuse the issue.  Moreover, gaining
          access to these would have violated the locking protocol.  They
          weren't necessary, so they're gone.

          Added an id_ data member and getter/setter methods.  Formerly,
          the connection's handle was used for identifying the
          transport--especially in debug messages--but the need for
          lock-safety made that unreliable.  Now, the id() is used
          instead, and transport-savvy connection handlers can feel free
          to change the id to anything they desire such as, say, the
          handle_. :-)

        * tao/IIOP_Transport.cpp:
        * tao/IIOP_Transport.h:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Transport.h:
        * tao/Strategies/UIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.h:
        * tao/orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
        * tao/orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:
        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Transport.h:

          Updated all of these to reflect the changes outlined for the
          TAO_Transport base class.

        * tao/IIOP_Connection_Handler.cpp (activate):
        * tao/Strategies/UIOP_Connection_Handler.cpp (activate):
        * tao/Strategies/SHMIOP_Connection_Handler.cpp (activate):
        * tao/orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp (activate):
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp (activate):

          Added code to set the transport's id to the handler's handle,
          thus making debug messages referring to that (which are
          everywhere!) more useful.

          Thanks to Carlos, Bala, Chad, and my family for all their help
          on this change!

Fri Mar 23 15:16:57 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/POA.cpp (deactivate_all_objects_i):
          Yesterday's change to
          Active_Object_Map::find_servant_and_system_id_using_user_id()
          broke POA::deactivate_all_objects_i() because this method was
          trying to find entries in the map that don't have valid
          servants.  To fix this, I added a new method
          POA::deactivate_map_entry() that does not require looking up the
          entry in the map again.

Fri Mar 23 10:06:10 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/ImplRepo/Makefile:
          Automatically recurse builds into the NameService subdirectory.

Fri Mar 23 11:58:49 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/ImplRepo/NameService/Makefile: Fixed
          dependencies. Thanks to Thomas Groth <groth.th@nord-com.net> for
          reporting this.

Fri Mar 23 09:42:30 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Hello/Hello.dsw:
        * tests/Hello/server.dsp:
        * tests/Hello/client.dsp:
          Add project files for MSVC

Fri Mar 23 09:06:38 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Makefile:
        * tests/Makefile.bor:
        * tests/README:
        * tests/Hello/README:
        * tests/Hello/Makefile:
        * tests/Hello/Makefile.bor:
        * tests/Hello/server.bor:
        * tests/Hello/client.bor:
        * tests/Hello/Test.idl:
        * tests/Hello/run_test.pl:
        * tests/Hello/client.cpp:
        * tests/Hello/server.cpp:
        * tests/Hello/Hello.h:
        * tests/Hello/Hello.cpp:
          Add new super-simple regression test, we lacked one of these, so
          we were always using more complicated tests to smoke test the
          ORB.

Fri Mar 23 07:12:50 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/examples/Notify/Subscribe/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile:
          Add libraries to make QNX happy

Fri Mar 23 06:44:12 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/POA/Excessive_Object_Deactivations/Excessive_Object_deactivations.cpp:
          Fixed warnings with g++ builds.

Thu Mar 22 19:29:09 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer/Active_Object_Map.i
          (find_servant_and_system_id_using_user_id): One version of this
          function was broken because it did not check the <deactivated_>
          and the <servant_> fields.  Thanks to Jody Hagins
          <jody@atdesk.com> for pointing this out.  This fixes
          [BUGID:834].

        * tests/POA/Excessive_Object_Deactivations: New test for
          regression checking excessive object deactivations in the POA.
          The test checks excessive deactivations in a POA with SYSTEM_ID
          and other POA with USER_ID.  The test also check for excessive
          deactivations during upcalls.

        * tests/POA/Multiple_Deactivations: No longer needed with
          tests/POA/Excessive_Object_Deactivations in place.

        * tao/PortableServer/POA.cpp (key_to_stub_i):

          (Re)fixed compilation problems under Minimum CORBA
          configurations which got reverted when Bala backed out Carlos'
          changes.

        * tao/ORB_Core.cpp (collocation_strategy): Small change for better
          code readability.  Thanks Ossama.

        * tests/POA/Destruction was renamed to tests/POA/POA_Destruction.

        * tests/POA/Deactivation was renamed to tests/POA/Object_Reactivation.

        * Following files were also updated to accomodate new and renamed
          tests:

          - tests/TAO_Tests.dsw
          - tests/POA/Makefile
          - tests/POA/Makefile.bor
          - tests/POA/README
          - ACE_wrappers/bin/auto_run_tests.lst

Thu Mar 22 20:08:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/PortableServer/POA.cpp: Backed out changes from "Thu Mar 22
          15:32:22 2001  Carlos O'Ryan  <coryan@uci.edu>." The fix is
          being commited by Irfan as the above changes may not be the
          right fix.

Thu Mar 22 15:32:22 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/POA.cpp (deactivate_object_i):
          The deactivation code did not check for previous deactivations,
          this can result in crashes as the ORB deactivates objects in the
          middle of a request. This fixes [BUGID:834]
          Also fixed compilation problems under Minimum CORBA
          configurations.

        * tests/POA/Makefile:
        * tests/POA/Makefile.bor:
        * tests/POA/README:
        * tests/POA/Multiple_Deactivations/README:
        * tests/POA/Multiple_Deactivations/Makefile:
        * tests/POA/Multiple_Deactivations/Makefile.bor:
        * tests/POA/Multiple_Deactivations/run_test.pl:
        * tests/POA/Multiple_Deactivations/Test.idl:
        * tests/POA/Multiple_Deactivations/Empty.h:
        * tests/POA/Multiple_Deactivations/Empty.cpp:
        * tests/POA/Multiple_Deactivations/server.cpp:
          New regression test for the previous bug.

Thu Mar 22 12:20:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * docs/releasenotes/index.html:

          Updated the release notes to reflect the latest status of
          AMI, e.g. AMI timeouts.

Thu Mar 22 09:25:43 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/RejectInsecure/Makefile:
        * orbsvcs/tests/Security/RejectInsecure/README:
        * orbsvcs/tests/Security/RejectInsecure/authorization_test.idl:
        * orbsvcs/tests/Security/RejectInsecure/authorization_test_i.cpp:
        * orbsvcs/tests/Security/RejectInsecure/authorization_test_i.h:
        * orbsvcs/tests/Security/RejectInsecure/authorization_test_i.i:
        * orbsvcs/tests/Security/RejectInsecure/client.conf:
        * orbsvcs/tests/Security/RejectInsecure/client.cpp:
        * orbsvcs/tests/Security/RejectInsecure/client_nopasswd.conf:
        * orbsvcs/tests/Security/RejectInsecure/server.conf:
        * orbsvcs/tests/Security/RejectInsecure/server.cpp:
        * orbsvcs/tests/Security/RejectInsecure/server_i.h:
        * orbsvcs/tests/Security/RejectInsecure/server_nopasswd.conf:

          Removed this incomplete/non-functional test.  The
          Secure_Invocation I recently added tests most of what this test
          was intended to do but in a more straightforward manner.

Thu Mar 22 07:02:17 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Client_Leaks/Startup_Callback.h:
        * tests/Client_Leaks/Startup_Callback.cpp:
          Fixed throw specs

Wed Mar 21 23:13:23 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
          Fixed TAO_Export macro for TAO_Synch_Refcountable.  Thanks to
          Johnny Willemsen <johnny.willemsen@meco.nl> for suggesting this
          fix.

Wed Mar 21 23:57:44 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/PortableServer/POA.cpp (key_to_stub_i):
          Fixed Typo.

        * tests/RTCORBA/Explicit_Binding/client.cpp:
          Disabled temporarily one diagnostic message.

Wed Mar 21 14:54:07 2001  Ossama Othman  <ossama@uci.edu>

        * docs/releasenotes/index.html:

          Updated CORBA Security Service release notes.

Wed Mar 21 16:08:32 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

          The followings are contributions from Scott Snyder
          <snyder@fnal.gov> to make ACE happy on Digital UNIX with KCC
          3.4d.

        * orbsvcs/tests/AVStreams/benchmark/Makefile:  Got a bunch of
          errors when compiling on Digital UNIX.  This is because the
          Makefile in this directory is making a bogus definition of
          DCFLAGS.

Wed Mar 21 15:17:58 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Transport.cpp:
        * tao/Transport.h:
        * tao/Transport.inl:
        * tao/Transport_Cache_Manager.h:
        * tao/Transport_Cache_Manager.cpp:
        * tao/Transport_Cache_Manager.inl: It was observed during testing
          that there was a race condition in the code. The race condition
          was because of unsynchronized access to the hash_map_entry that
          TAO_Transport stores. This is a first attempt to solve the
          problem. The problem has been solved by protecting access and
          trying to hide the Hash_Map_Entry from direct access.

Wed Mar 21 13:48:44 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/Options.html: Added the missing default reactor type to the
          documentation of "-ORBReactorType". Thanks to Craig Rodrigues
          for poiting this out.

Wed Mar 21 11:23:31 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PolicyFactory_Registry.cpp (register_policy_factory):

          Throw a CORBA::BAD_PARAM exception instead of a
          CORBA::INV_OBJREF exception if the policy reference is nil.  A
          nil reference is perfectly valid, so CORBA::INV_OBJREF isn't
          appropriate in this case.

Wed Mar 21 11:04:27 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/PortableServer/POA.cpp (key_to_stub_i):

          A part on non RTCORBA code was using an RTCORBA acceptor filter.
          The problem has been fixed using the standard TAO acceptor filter.

Wed Mar 21 20:44:33 2001 Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tests/RTCORBA/Banded_Connections/client.cpp:

          Fixed misleading error message.

Wed Mar 21 07:05:40 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Client_Leaks/client.dsp:
        * tests/Client_Leaks/server.dsp:
          Updated project files.

        * tests/Client_Leaks/Process_Factory.cpp:
          Fixed compilation problems on Win32, ACE_Process_Options lacks
          an avoid_zombies in this case.

Wed Mar 21 08:02:56 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/RTCORBA/Explicit_Binding/client.cpp: Fixed a possible typo
          that was giving false alarms in the nightly builds. The message
          read "ERROR: <validate_connection> returned true". The message
          was not right, as this is not an error.

Tue Mar 20 21:53:17 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/Secure_Invocation/Foo.idl:
          Added user exception that is thrown when no security attributes
          are available for the current upcall.

          The baz() test method raises this exception.

        * orbsvcs/tests/Security/Secure_Invocation/Foo_i.h (baz):
          Updated exception specification to include the newly added user
          exception.

        * orbsvcs/tests/Security/Secure_Invocation/Foo_i.cpp (baz):
          Throw an exception if no security attributes are available for
          the current upcall.  The exception indicates problem with the
          underlying security mechanism in use.

        * orbsvcs/tests/Security/Secure_Invocation/run_test.pl:
          Increased timeout for server IOR file.  It wasn't long enough
          for some slow machines.

Tue Mar 20 20:01:56 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.cpp (make_idle):
          The function was not checking if cache_map_entry_ was null
          before using it.  This field is set to 0 once the underlying
          connection is closed, this can be done by another thread, while
          the Transport has not been idled by the thread making a request.

Tue Mar 20 16:55:38 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Client_Leaks/Makefile:
        * tests/Client_Leaks/Test.idl:
        * tests/Client_Leaks/Client_Task.h:
        * tests/Client_Leaks/Client_Task.cpp:
        * tests/Client_Leaks/Process_Factory.h:
        * tests/Client_Leaks/Process_Factory.cpp:
        * tests/Client_Leaks/Server_Task.h:
        * tests/Client_Leaks/Server_Task.cpp:
        * tests/Client_Leaks/Startup_Callback.h:
        * tests/Client_Leaks/Startup_Callback.cpp:
        * tests/Client_Leaks/child.cpp:
        * tests/Client_Leaks/client.cpp:
        * tests/Client_Leaks/server.cpp:
          Several improvements to the test to make it more reliable and
          faster.  The process factory uses callback interfaces to receive
          the new child IOR.  Both the client and the process factory are
          multithreaded, to speed up the test by increasing concurrency
          during process creation.  The child processes are detached to
          avoid zombies and to minimize the need of using the
          ACE_Process_Manager.

Tue Mar 20 18.54:01  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/PortableServer/POA.cpp (key_to_stub_i):

          This was source of most of the the RTCORBA test failure.
          The problem was that the wrong Acceptor Filter were being used,
          this had as a conseguence the fact that some useful endpoint
          associated to the erroneously filtered acceptor were filtered
          as well.

        * tao/RT_Invocation_Endpoint_Selectors.cpp:

          Reverted the change made in the in the
          Priority_Endpoint_Selector. A description of the
          change that were done is in:
          Sun Mar 18 23:50:28 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tests/RTCORBA/Banded_Connections/run_test.pl:

          The perl script was passing a priority that did not match one
          of the endpoints exported in the server ORB, this was causing the
          request to a CORBA object with CLIENT_PROPAGATED policy and no
          priority bands to fail.

Tue Mar 20 18:19:31 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.h:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/distribuer.h:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/distribuer.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/receiver.h:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/receiver.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/README:

          Fixed bugs and cleaned up the test. This should get it working
          on windows.

Tue Mar 20 08:30:10 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Exception.cpp (_tao_get_omg_exception_description):

          Forgot to add the "const" qualifier to the description table
          declarations.  This fixes a "string literal loses const
          qualifier" warning.

Tue Mar 20 06:17:32 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/examples/RtEC/Schedule:/Service.cpp: Fixed a nagging
          warning in many platforms.

Mon Mar 19 19:49:04 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/Event/Basic/Atomic_Reconnect.bor:
        * orbsvcs/tests/Event/Basic/BCast.bor:
        * orbsvcs/tests/Event/Basic/Bitmask.bor:
        * orbsvcs/tests/Event/Basic/Complex.bor:
        * orbsvcs/tests/Event/Basic/Control.bor:
        * orbsvcs/tests/Event/Basic/Disconnect.bor:
        * orbsvcs/tests/Event/Basic/Gateway.bor:
        * orbsvcs/tests/Event/Basic/MT_Disconnect.bor:
        * orbsvcs/tests/Event/Basic/Negation.bor:
        * orbsvcs/tests/Event/Basic/Observer.bor:
        * orbsvcs/tests/Event/Basic/Random.bor:
        * orbsvcs/tests/Event/Basic/Reconnect.bor:
        * orbsvcs/tests/Event/Basic/Shutdown.bor:
        * orbsvcs/tests/Event/Basic/Timeout.bor:
        * orbsvcs/tests/Event/Basic/Wildcard.bor:
        * orbsvcs/tests/Event/Performance/Connect.bor:
        * orbsvcs/tests/Event/Performance/Inversion.bor:
        * orbsvcs/tests/Event/Performance/Throughput.bor:
        * orbsvcs/tests/Event/Performance/Latency.bor:
        * orbsvcs/tests/Event/Performance/Latency_Server.bor:
          Use the new directory for the ECTest library.

Mon Mar 19 16:37:21 2001  Chris Cleeland  <cleeland_c@ociweb.com>

        * tao/Transport.cpp:
        * tao/Transport.h:

          Added new thread-safe TAO_Synch_Refcountable class (which uses
          TAO_SYNCH_MUTEX to insure thread-safe reference counting), and
          changed the private base of TAO_Transport to use it rather than
          ACE_Refcountable.  Now refcounting of Transport objects should
          be thread-safe.  Thanks to Carlos O'Ryan for catching this! [Bug
          814]

Mon Mar 19 15:09:52 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * examples/POA/On_Demand_Loading/Server_Manager.cpp (create_activator):
        * examples/POA/On_Demand_Loading/Server_Manager.cpp (create_locator):
        * examples/POA/Loader/Server_Manager.cpp (create_activator):
        * examples/POA/Loader/Server_Manager.cpp (create_locator):

          Fixed Servant Managers and Servant Activators leaks.

        * tao/ORB_Core.cpp (collocation_strategy): When looking for a
          valid servant ORB, the following code was used:

          stub->servant_orb_ptr () != 0

          Unfortunately, servant_orb_ptr() duplicated the ORB.  Correct
          solution is to use:

          stub->servant_orb_var ().in () != CORBA::ORB::_nil ()

        * tests/POA/wait_for_completion/wait_for_completion.cpp (main):
          The servant was not removed from the POA at the end of the
          program.  When the POA died in the static destructors, it tried
          to reach for the dead servant causing a seg fault.  This was
          fixed by destroying the POA before the servant died.

Mon Mar 19 14:20:38 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Makefile (DIRS):

          Added the `Security' directory to the list of directories to
          recurse into.

Mon Mar 19 14:03:35 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/Makefile:

          New top-level Security Service test suite Makefile.

Mon Mar 19 13:58:44 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/Security/Secure_Invocation/Makefile:

          Added a new Makefile.

Mon Mar 19 15:28:17 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/EC_Throughput: Added a space between the svc conf
          file and the option "-m". This could be the problem that has
          been dodging the builds for quite sometime.

Mon Mar 19 11:37:43 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tests/POA/Single_Threaded_POA/Single_Threaded_POA.cpp (main):
        * examples/POA/FindPOA/FindPOA.cpp (find_non_existant_POA):

          In non-debug compiles, asserts disappear.  Thus it was necessary
          to add ACE_UNUSED_ARG to variables that are just being asserted
          on.

        * TAOACE.dsw: Added ACE DLL to gpref dependencies.

Mon Mar 19 12:59:28 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Faults/run_test.pl: Fixed a problem that was signaling a
          flase alarm on many platforms in the nightly builds.

Mon Mar 19 11:28:40 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.i: Moved the method service_context_list () from
          the .i file to .cpp file. This was causing SunCC 4.2 to choke
          when the debugging symbols were off and caused the clients
          linked with TAO to dump a core. Thanks to Carlos for suggesting
          that some methods in .i file could be the source of the problem.

Mon Mar 19 09:05:40 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Typecode.cpp:
          The code was not checking for exceptions with ACE_CHECK or
          ACE_CHECK_RETURN, but was using the return values.  This is
          clearly broken and can result in some nasty behavior on
          platforms without native exceptions.

        * tao/Transport.cpp:
          Cosmetic fixes to fit the ACE-guidelines.

        * tao/RT_Invocation_Endpoint_Selectors.cpp:
          Don't use ACE_UNUSED_ARG() when simply removing the argument
          name would do.

        * tao/RT_Invocation_Endpoint_Selectors.cpp:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.cpp:
        * orbsvcs/tests/CosEvent/lib/Counting_Consumer.cpp:
        * orbsvcs/tests/CosEvent/Basic/Random.cpp:
        * orbsvcs/tests/Concurrency/CC_tests.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Dispatching_Task.cpp:
          Add missing ACE_CHECK, ACE_CHECK_RETURN or ACE_TRY_CHECK

Mon Mar 19 10:03:01 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/POA/Single_Threaded_POA/Single_Threaded_POA.cpp (main):
          Fixed a warning in KCC builds.

Mon Mar 19 06:23:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/examples/RtEC/Schedule/Service.cpp: Commented out the
          guard for RECONFIG_SCHED type. Theoretically the guard may not
          be needed. This should solve one of the compile problems on Lynx
          I386 builds.

Mon Mar 19 03:02:11 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current_Impl.cpp (get_attributes):

          Fixed memory access violations.

        * orbsvcs/tests/Security/Secure_Invocation/Foo.idl:
        * orbsvcs/tests/Security/Secure_Invocation/Foo_i.cpp:
        * orbsvcs/tests/Security/Secure_Invocation/Foo_i.h:
        * orbsvcs/tests/Security/Secure_Invocation/README:
        * orbsvcs/tests/Security/Secure_Invocation/Secure_Invocation.dsw:
        * orbsvcs/tests/Security/Secure_Invocation/cacert.pem:
        * orbsvcs/tests/Security/Secure_Invocation/client.conf:
        * orbsvcs/tests/Security/Secure_Invocation/client.cpp:
        * orbsvcs/tests/Security/Secure_Invocation/client.dsp:
        * orbsvcs/tests/Security/Secure_Invocation/client_cert.pem:
        * orbsvcs/tests/Security/Secure_Invocation/client_key.pem:
        * orbsvcs/tests/Security/Secure_Invocation/client_key_nopasswd.pem:
        * orbsvcs/tests/Security/Secure_Invocation/client_nopasswd.conf:
        * orbsvcs/tests/Security/Secure_Invocation/run_test.pl:
        * orbsvcs/tests/Security/Secure_Invocation/server.conf:
        * orbsvcs/tests/Security/Secure_Invocation/server.cpp:
        * orbsvcs/tests/Security/Secure_Invocation/server.dsp:
        * orbsvcs/tests/Security/Secure_Invocation/server_cert.pem:
        * orbsvcs/tests/Security/Secure_Invocation/server_key.pem:
        * orbsvcs/tests/Security/Secure_Invocation/server_key_nopasswd.pem:
        * orbsvcs/tests/Security/Secure_Invocation/server_none.conf:
        * orbsvcs/tests/Security/Secure_Invocation/server_nopasswd.conf:

          New test that verifies secure invocations are working properly,
          and to some extent the "SecurityCurrent" object.

Mon Mar 19 00:16:13 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security.dsp:

          Added missing custom IDL build steps to the "Release"
          configuration.

Sun Mar 18 23:50:28 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tests/RTCORBA/Banded_Connections/run_test.pl:

          Changed the parameter passed to the server and the client.

        * tests/RTCORBA/Banded_Connections/bands.unix:

          Changed the bands to be adjacent.

        * tests/RTCORBA/Banded_Connections/bands.nt:

          Changed the priority bands to cover all the available priority
          range available on win32.

        * tests/RTCORBA/Banded_Connections/server.cpp:

          It was creating and activating two CORBA object using the same
          servant and using the UNIQUE_ID policy. This problem has been
          fixed by using two different servant.

        * tests/RTCORBA/Banded_Connections/client.cpp:

          Fixed wront diagnostic message that was erroneously signaling an
          error condition in case of success.

        * tao/RT_Invocation_Endpoint_Selectors.cpp (select_endpoint):

          Changed the logic used to select the ORB endpoint that should
          be used to send a GIOP request in presence of priority bands.
          Before if the client was exposing a priority that was different
          from one of the server ORB endpoint's priority, an exception
          would have been raised even if the priority exposed by the
          client was within one of the bands used by the server ORB.
          The decision logic assume that the endpoint priority exported in
          the server ORB are associated with the maximum value of the
          relative bands.

Sun Mar 18 21:13:36 2001  Ossama Othman  <ossama@uci.edu>

        * tao/IORInfo.cpp (add_ior_component_to_profile):
        * tao/Object_Ref_Table.cpp (register_initial_reference):
        * tao/PolicyFactory_Registry.cpp (register_policy_factory):

          Added missing OMG assigned exception minor codes to ACE_THROW
          expressions.

        * tao/corbafwd.h:
        * tao/CORBALOC_Parser.cpp (parse_string_count_helper):
        * tao/CORBANAME_Parser.cpp (parse_string_dynamic_request_helper):

          Removed uses of needless TAO_OMG_MINOR_BAD_PARAM_10 macro.

Sun Mar 18 16:28:03 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Exception.h:
        * tao/corbafwd.h:

          Added missing CODESET_INCOMPATIBLE and BAD_QOS to the list of
          CORBA system exceptions (see CORBA 2.4.2 spec).

        * tao/Exception.cpp (_tao_get_omg_exception_description):

          Return the description of the OMG minor code for a given
          CORBA::SystemException.  Descriptions correspond to those found
          in the CORBA 2.4.2 spec and the recently adopted Portable
          Interceptors spec.  [Bug 827]

Sun Mar 18 18:09:05 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Param_Test/ub_any_seq.cpp (init_parameters):

          Fixed warnings issued by g++ 2.95.2.

Sun Mar 18 13:30:00 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Exception.cpp (_info):
          Fixed _is_a() call on CORBA::BAD_PARAM() exception.  The
          repository ID passed to the _is_a() call was missing the
          version.

Sun Mar 18 11:50:57 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Exception.cpp (_info):

          Fixed exception informational message so that it displays the
          properly masked TAO and OMG minor codes, rather than the raw
          minor codes.  The masked minor codes are more meaningful.

        * tao/ORB_Core.i (check_shutdown):

          Bitwise-OR the minor code in the CORBA::BAD_INV_ORDER()
          exception being thrown with the TAO_OMG_VMCID constant/macro.
          The minor code in use is one assigned by the OMG.

Sun Mar 18 12:34:44 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Sequence.i:
          Fixed memory leak on bounded sequences.  This changed fixed
          many a problem in Param_Test, but not all of them.

        * tests/Param_Test/ub_any_seq.cpp:
          Use CORBA::String_var to automatically deallocate memory
          returned by the random string generation utility.

        * orbsvcs/examples/CosEC/Simple/Makefile:
        * orbsvcs/examples/Log/Client/Makefile:
        * orbsvcs/examples/Notify/Filter/Makefile:
          More QNX related fixes.

Sun Mar 18 12:22:08 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security/Security_ORBInitializer.cpp (pre_init):

          Corrected debugging message to display "pre_init()" instead of
          "post_init()."

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.cpp (TAO_SSLIOP_Current):
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Current.inl (tss_slot):

          Added method to set the TSS slot ID assigned to the
          "SSLIOPCurrent" object.  The constructor no longer accepts a TSS
          slot ID parameter.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ORBInitializer.cpp (post_init):

          Moved call to "this->get_tss_slot_id()" from the pre_init()
          method to the post_init() method.  This was necessary to get
          around "order of initialization" restrictions imposed by the
          PortableInterceptor::ORBInitInfo object,
          i.e., resolve_initial_references() cannot be called from within
          pre_init().

Sun Mar 18 13:24:52 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Cache_Entries.inl: Fixed a warning with Tru64 builds.

Sun Mar 18 10:40:32 2001  Ossama Othman  <ossama@uci.edu>

        * tao/TAO_Static.dsp:

          Removed apparently incorrect references to
          Transport_Connection_Property.cpp.  Whoever updated this file
          didn't do any testing.  Strike one, whoever you are!

          Added missing files `Base_Transport_Property.*' to this project
          file.

Sun Mar 18 08:53:34 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security/Security_Current_Impl.h:

          Export the TAO_Security_Current_Impl class on MS Windows
          builds.  Fixes a link-time "unresolved symbol" error.

        * orbsvcs/orbsvcs/Makefile.SSLIOP:
        * orbsvcs/orbsvcs/SSLIOP.bor:
        * orbsvcs/orbsvcs/SSLIOP.dsp:

          Don't bother compiling SSLIOPS.cpp.  It is empty since
          SSLIOP.idl does not define remote interfaces.

Sat Mar 17 19:36:02 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * examples/PluggableUDP/tests/{client,server}.cpp: Changed "true" to 1
          and "false" to 0 to work on compiler platforms that don't
          support bool.  Thanks to Craig Rodrigues for suggesting this
          fix.

Sun Mar 18 02:43:41 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Security.dsp:
        * orbsvcs/orbsvcs/Security.bor:

          Added new Security Level 1 related files to the source lists in
          these files.

Sun Mar 18 01:53:42 2001  Ossama Othman  <ossama@uci.edu>

        * Security/Security_Current.cpp:
        * Security/Security_Current.h:
        * Security/Security_Current.inl:
        * Security/Security_Current_Impl.cpp:
        * Security/Security_Current_Impl.h:
        * Security/Security_ORBInitializer.cpp:
        * Security/Security_ORBInitializer.h:

          New Security Level 1 implementation.

        * SSLIOP/SSLIOP_Connection_Handler.cpp:
        * SSLIOP/SSLIOP_Current.cpp:
        * SSLIOP/SSLIOP_Current.inl:
        * SSLIOP/SSLIOP_Current_Impl.cpp:
        * SSLIOP/SSLIOP_Current_Impl.h:
        * SSLIOP/SSLIOP_Factory.cpp:
        * SSLIOP/SSLIOP_Factory.h:
        * SSLIOP/SSLIOP_ORBInitializer.cpp:
        * SSLIOP/SSLIOP_ORBInitializer.h:

          Updates to support Security Level 1 (via SSLIOP security
          mechanism).

        * Makefile.Security:

          Added new Security Level 1 implementation to the source list.

        * Makefile.SSLIOP:

          Updated dependencies.

Sat Mar 17 14:33:23 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/examples/CosEC/Simple/Makefile:
        * orbsvcs/examples/Log/Client/Makefile:
        * examples/Content_Server/AMI_Iterator/Makefile:
        * examples/Simulator/Event_Supplier/Makefile:
        * orbsvcs/examples/Notify/Filter/Makefile:
        * orbsvcs/tests/EC_Basic/Makefile:
        * orbsvcs/tests/EC_Throughput/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGR/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile:
        * orbsvcs/tests/Interoperable_Naming/Makefile:
        * orbsvcs/tests/Trading/Makefile:
        * utils/nslist/Makefile:
          More fixes to support QNX/RTP

Sat Mar 17 14:28:24 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Client_Leaks/client.cpp:
          Cosmetic fixes.

Sat Mar 17 16:15:14 2001  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.i:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.h:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
        * orbsvcs/orbsvcs/Makefile.SSLIOP:
          Update the SSL Pluggable protocal to reflect the new transport
          caching changes.

Sat Mar 17 11:54:45 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple/Makefile:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/Makefile: Updated
          dependencies.

Sat Mar 17 10:47:55 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/IFR_Service/Makefile.EX:
        * orbsvcs/IFR_Service/Makefile.TypeCodeFactory:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/IFR_Service/Makefile.tao_ifr: Updated dependencies

Sat Mar 17 10:26:40 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/BiDirectional_NestedUpcall/test_i.cpp (test_method):
          Changed connection_cache () as transport_cache (). This fixes
          some of the compile errors in g++.

Sat Mar 17 10:23:44 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/BiDirectional/test_i.cpp: Changed connection_cache () as
          transport_cache ()

Sat Mar 17 09:55:51 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Client_Leaks/Makefile: Fixed dependencies

Sat Mar 17 09:23:49 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connection_Handler.cpp:
        * tao/Transport_Cache_Manager.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp: Fixed warnings with
          g++.

Fri Mar 16 18:25:54 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tao/Cache_Entries.h:
        * tao/Cache_Entries.inl:
        * tao/Cache_Entries.cpp:
          Modified the Cache_Entries to support caching the Transport
          instead of the Connection_Handler. [Bug 814]

        * tao/Connection_Handler.h:
        * tao/Connection_Handler.inl:
        * tao/Connection_Handler.cpp:
          Removed the reference counting altogether.  The lifecycle of the
          connection handler now follows the reactor. [Bug 814]

        * tao/IIOP_Connection_Handler.h:
        * tao/IIOP_Connection_Handler.i:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.h:
        * tao/Strategies/SHMIOP_Connection_Handler.inl:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.h:
        * tao/Strategies/UIOP_Connection_Handler.inl:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.h:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.i:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
          Removed the transport data member.  The transport may exist
          independently of the Connection_Handler.  The connection handler
          now allocats the transport on the heap and maintains a reference
          to it. [Bug 814]

        * tao/IIOP_Connector.h:
        * tao/IIOP_Connector.cpp:
        * tao/Strategies/SHMIOP_Connector.h:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/UIOP_Connector.h:
        * tao/Strategies/UIOP_Connector.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connector.h:
        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
          Make connection based on transport. [Bug 814]

        * tao/IIOP_Transport.h:
        * tao/IIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Transport.h:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.h:
        * tao/Strategies/UIOP_Transport.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Transport.h:
        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:
          Removed obsolete methods and added methods to transition the
          handler state (called by the connection handler) and to return
          the protocol specific connection handler as a
          TAO_Connection_Handler. [Bug 814]

        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
        * tao/ORB_Core.cpp:
          Maintain a collection of transports instead of connection
          handlers. [Bug 814]

        * tao/Makefile.bor:
        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
          Updated file information for Windows based compilers. [Bug 814]

        * tao/Transport.cpp:
        * tao/Transport.h:
        * tao/Transport.inl:
          Removed redundant methods and added new ones to support caching of
          the transport within the orb core. [Bug 814]

        * tao/Transport_Cache_Manager.h:
        * tao/Transport_Cache_Manager.inl:
        * tao/Transport_Cache_Manager.cpp:
          Renamed the Connection_Cache_Manager.* to
          Transport_Cache_Manager.*  The functionality is similar, just
          replace the TAO_Connection_Handler with TAO_Transport.
          [Bug 814]

        * tao/Transport_Descriptor_Interface.h:
        * tao/Transport_Descriptor_Interface.inl:
        * tao/Transport_Descriptor_Interface.cpp:
          Renamed the Connection_Descriptor_Interface.* to
          Transport_Descriptor_Interface.*  The functionality was unchanged.
          [Bug 814]

        * tao/Private_Transport_Descriptor.h:
        * tao/Private_Transport_Descriptor.inl:
        * tao/Private_Transport_Descriptor.cpp:
          Renamed the Private_Connection_Descriptor.* to
          Private_Transport_Descriptor.*  The functionality was unchanged.
          [Bug 814]

        * tao/Base_Transport_Property.h:
        * tao/Base_Transport_Property.inl:
        * tao/Base_Transport_Property.cpp:
          Renamed the Base_Connection_Property.* to
          Base_Transport_Property.*  The functionality was unchanged.
          [Bug 814]

        * tao/Acceptor_Impl.cpp:
        * tao/Asynch_Invocation.cpp:
        * tao/Asynch_Reply_Dispatcher.cpp:
        * tao/Asynch_Reply_Dispatcher.h:
        * tao/Asynch_Reply_Dispatcher.i:
        * tao/Connector_Registry.cpp:
        * tao/Connector_Registry.h:
        * tao/Exclusive_TMS.cpp:
        * tao/Invocation.cpp:
        * tao/Muxed_TMS.cpp:
        * tao/Pluggable.h:
        * tao/Protocols_Hooks.h:
          Modifications to reflect method changes in the connection handler
          and transport classes. [Bug 814]

        * */Makefile:
          Updated the dependencies to reflect the renaming of the 12 files.
          [Bug 814]


Fri Mar 16 15:48:03 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/PluggableUDP/DIOP/Makefile:
          Define ACE_SHLIBS, otherwise Tru64/CXX is unhappy.

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
          Regroup code to use a single #if 0/#endif instead of multiple
          sections of commented out code, easier to work that way.

        * tests/Client_Leaks/Process_Factory.cpp:
          Fixed Fuzz warning (i.e., missing ACE_CHECK_RETURN)

Fri Mar 16 15:11:04 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/Event/lib/Makefile.bor:
          The library must be installed for the tests to run correctly
          under the nightly builds.

Fri Mar 16 15:45:21 2001  Angelo Corsaro  <angelo@cs.wustl.edu>

        * tests/RTCORBA/Client_Protocol/client.cpp (exception_test):
          Moved an ACE_DEBUG that was writing an error message to the
          CATCH block instead of the TRY. This fix a fictious error in the
          Client_Protocol unit test.

Fri Mar 16 13:53:04 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/EC_Throughput/run_test.pl:
          Made several cosmetic fixes, but also re-enabled the ec_mt.conf
          file test.  It works for me on my workspace, can't tell why it
          fails in the nightly builds yet.

        * orbsvcs/tests/EC_Throughput/ec_mt.conf:
          Minor cosmetic fixes.

Fri Mar 16 14:10:25 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:
          Reorganized how the libraries get included to fix static
          builds.

Fri Mar 16 13:57:17 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_union_branch/public_assign_cs.cpp:

          Modified generated union copy constructor and assignment
          operator to safely copy an uninitialized union that can
          contain a variable size member. A fix I had made for this
          some time ago missed a few use cases. Thanks to Matt Cheers
          <matt.cheers@boeing.com> for pointing one of them out. This
          fix closes out [BUGID:820].

Fri Mar 16 10:48:36 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Server_Leaks/run_test.pl:
          The timeout period for the client was too short, extended it to
          5 seconds.  Also reduced the total number of iterations in the
          test and run more clients in parallel, for faster execution. The
          test takes less than 1 minute on my machine (with nice -20).
          Any machine that cannot run this in the timeout allowed for
          nightly builds is too slow anyway.

Fri Mar 16 12:43:55 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp: Fixed a unused
          variable warning.

Fri Mar 16 07:22:15 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/EC_Throughput/run_test.pl: Removed the usage of
          ec_mt.conf from the run_test.pl script. The builds complain
          about an invalid service confiurator argument.

Thu Mar 15 17:56:58 2001  Carlos O'Ryan  <coryan@uci.edu>

        * The following changes speed up the test without loosing
          coverage.

        * tests/Client_Leaks/client.cpp:
          Reduce the number of iterations.

        * tests/Client_Leaks/Process_Factory.cpp:
          Reduce the sleep time.


Thu Mar 15 15:49:30 2001  Carlos O'Ryan  <coryan@uci.edu>

        * docs/tutorials/Quoter/Makefile:
          Disable compilation for platforms without native C++ exception
          support

        * docs/tutorials/Quoter/Event_Service/Makefile:
        * docs/tutorials/Quoter/RT_Event_Service/Makefile:
          Add missing libraries

        * docs/tutorials/Quoter/RT_Event_Service/index.html:
        * docs/tutorials/Quoter/RT_Event_Service/Quoter.idl:
          Copy IDL file from the Event_Service example, this is better for
          automatic builds.

Thu Mar 15 11:27:59 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/AMI_Timeouts/client.cpp (main):
        * tests/AMI_Timeouts/server.cpp:
        * tests/AMI_Timeouts/timeout_client.cpp:
        * tests/AMI_Timeouts/timeout_client.h:
        * tests/AMI_Timeouts/timeout_i.cpp: Fixed quite few errors in
          SunCC 4.2 builds. The problem was the usage of the keyword 'bool'
          which is not supported in SunCC 4.2. Changed them to
          CORBA::Boolean which should be supported widely.

Thu Mar 15 10:32:01 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/IFR_Service/Makefile.TypeCodeFactory: Fixed a problem in
          TRUE_64 builds. Added -lTAO and -lACE to the list of libraries.

Thu Mar 15 09:21:37 2001  Paul Calabrese <calabrese_p@ociweb.com>

        * tao/Sequence.i:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_ci.cpp:

          Recommit of changes from Fri Mar  9 14:38:06 2001 with
          additional changes to fix the assignment operators
          that broke Param_Test.

          Fix a memory leak with bounded sequences of all types.
          Also cleaned up some indentation in the generated code
          and added a missing data member initialization.

Thu Mar 15 07:21:21 2001  Balachandran Natarajan <bala@cs.wustl.edu>

        * orbsvcs/tests/FaultTolerance/IOGR/Makefile:
          Fixed a problem with static builds.

Wed Mar 14 21:21:21 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/CosEventComm.idl:
        * orbsvcs/orbsvcs/CosEventChannelAdmin.idl:
          The prefix was not reset at the end, thanks to Sunil Rottoo
          <sunil@gdc.ca> for pointing this out.

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
          Fixed warning about unused value in a variable.

Wed Mar 14 21:53:03 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.h:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/distribuer.h:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/distribuer.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/receiver.cpp:

          Removed unused member variables.

          Reference counted servants to manage their lifetime.

          Initialized member variables.

Wed Mar 14 17:28:19 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tests/NestedUpcall/MT_Client_Test/client.cpp (main): Not sure
          why the author was using (THR_BOUND | THR_SCHED_FIFO) as <flags>
          to the Task::activate() call.  THR_SCHED_FIFO is for realtime
          threads and does not work for regular users (e.g., bugzilla),
          specially on Linux.  Once Ossama error checked the activate call
          in:

          Sat Mar 10 18:17:57 2001  Ossama Othman  <ossama@uci.edu>

        I the test started reporting the failed activate call because of
          the flags and the test no longer worked.  Once I switched the
          Task::activate() call to use the default flags, the test started
          working again.

Wed Mar 14 16:25:52 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams: Fixed broken dsps for the release
          build.

Wed Mar 14 16:17:13 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/EC_Throughput/ec.mt.conf: Renamed the file as
          ec_mt.conf.
        * orbsvcs/tests/EC_Throughput/ec_mt.conf: New file
        * orbsvcs/tests/EC_Throughput/run_test.pl: Invalidated a reference
          to a non-existent conf file in ec_mt_conf. Changed the name as
          ec_mt.conf.

Wed Mar 14 15:36:14 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.h:
        * tao/GIOP_Message_Handler.cpp: The high drama involved with BCB
          not working with TAO 1.1.13 should be finally over. Thanks a lot
          to Chris Kohlhoff and Johnny Willemsen for working on this and
          providing patches.

Wed Mar 14 14:50:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/AMI_Timeouts/AMI_Timeouts.dsw
        * tests/AMI_Timeouts/client.cpp
        * tests/AMI_Timeouts/server.cpp
        * tests/AMI_Timeouts/timeout.idl
        * tests/AMI_Timeouts/timeout_client.cpp
        * tests/AMI_Timeouts/timeout_client.h
        * tests/AMI_Timeouts/timeout_i.cpp
        * tests/AMI_Timeouts/timeout_i.h:

          Renamed the "Timeout" IDL interface to "TimeoutObj" as it
          had a name clash with Messaging::Timeout due to a SunCC 4.2
          compiler bug.
          Thanks to Bala our Build Czar for reporting this.

Wed Mar 14 13:01:03 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile:
        * orbsvcs/orbsvcs/Makefile.FaultTolerance: Fixed a compile error
          that was showing up on many platforms.

Wed Mar 14 12:35:43 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Leader_Followers/run_test.pl: Had a reference to a
          non-available service configurator file. This is now
          removed. This should fix the error seen in this test in the
          daily builds. This is actually a proof that Chanaka's fix
          works ;)

Tue Mar 13 23:50:02 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple_Three_Stage/distributer.dsp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/receiver.dsp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.dsp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/Simple_Three_Stage.dsw:
        * orbsvcs/tests/AVStreams/AVStreams.dsw:

          Added files to enable builds on windows.

Tue Mar 13 22:54:45 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Three_Stage/distributer.cpp:

          Fixed compile errors in the Fuzz builds.


Tue Mar 13 15:21:32 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ORB.cpp (ORB_init):
        * tao/ClientRequestInfo.cpp:
        * tao/PortableServer/ServerRequestInfo.cpp:
        * tao/PortableServer/POA.cpp
          (check_for_valid_wait_for_completions):

          The OMG assigned exception minor code should be bitwise-ORed
          with TAO_OMG_VMCID.

Tue Mar 13 14:57:47 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.cpp:

          Fixed compile errors.

Tue Mar 13 14:13:38 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * rules.tao.GNU: Removed duplicate definition of -lTAO from
          TAO_CLNT_LIBS.

        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/tests/Event/Basic/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGR/Makefile:
        * orbsvcs/tests/Notify/Basic/Makefile:  Fixed more Makefiles.

Tue Mar 13 13:02:05 CST 2001 Chanaka Liyanaarachchi <chanaka@ociweb.com>

        * utils/catior/catior.cpp: Removed tab charactres from the
          previous change.

Tue Mar 13 12:38:19 CST 2001 Chanaka Liyanaarachchi <chanaka@ociweb.com>

        * tao/TAO_Internal.cpp: Removed tab characters from the previous
          change.

Tue Mar 13 12:18:52 CST 2001 Chanaka Liyanaarachchi <chanaka@ociweb.com>

        * utils/catior/catior.cpp: Added a condition to check for IIOP 1.0
          before calling the cat_tagged_components() operation. IIOP 1.0
          IOR's do not have tagged components [Bug 727].

Tue Mar 13 12:18:06 CST 2001 Chanaka Liyanaarachchi <chanaka@ociweb.com>

        * tao/TAO_Internal.cpp: If the specified service configurator file
          for -ORBsvcconf does not exist, returns -1, eventually raising
          CORBA::INITIALIZE exception [Bug 738].

Tue Mar 13 11:59:45 2001 Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.h:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/ditributer.h:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/ditributer.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/receiver.h:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/receiver.cpp:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/Makefile:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/run_test.pl:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/README:
        * orbsvcs/tests/AVStreams/Makefile: Created a new test,
          Simple_Three_Stage. It consists of a sender that sends data,
          read from a file, to the distributer at a specified rate .The
          distributer in turn sends the data to the receiver. The receiver
          writes the data to a file.

Tue Mar 13 11:59:45 2001  Craig Rodrigues <crodrigu@bbn.com>

        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.h:
        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.i:
        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.cpp:
        * orbsvcs/orbsvcs/AV/sfp.h:
        * orbsvcs/orbsvcs/AV/sfp.cpp:
           Cleaned up use of strings, replacing with ACE_CString
           where appropriate.
           Changed to Doxygen style comments.

        *  orbsvcs/orbsvcs/AV/AVStreams_i.h:
        *  orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
           Removed platform specific ifdef for gethostname, replaced
           with ACE_OS::hostname()

Tue Mar 13 06:48:19 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Base.cpp: Tried to apply a fix that Chris
          Kolhloff had suggested.

Mon Mar 12 23:40:09 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/Makefile.bor:
        * orbsvcs/tests/EC_Basic/Makefile.bor:
        * orbsvcs/tests/EC_Custom_Marshal/ECM_Consumer.bor:
        * orbsvcs/tests/EC_Custom_Marshal/ECM_Supplier.bor:
        * orbsvcs/tests/EC_Custom_Marshal/Makefile.bor:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.cpp:
        * orbsvcs/tests/EC_Mcast/Makefile.bor:
        * orbsvcs/tests/EC_Multiple/Makefile.bor:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.bor:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier.bor:
        * orbsvcs/tests/EC_Throughput/ECT_Throughput.bor:
        * orbsvcs/tests/EC_Throughput/Makefile.bor:
        * orbsvcs/tests/Event_Latency/Makefile.bor:
          Add more Borland Makefiles for the RT Event Service tests

        * orbsvcs/tests/Simple_Naming/makefile.bor:
          Add missing IORTable library

Mon Mar 12 17:54:39 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Client_Leaks/client.cpp:
          Ignore Test::Spawn_Failed exceptions, they are not the kind of
          error we are looking for anyway.

        * tests/Client_Leaks/run_test.pl:
          Increase running time for the test.

Mon Mar 12 18:46:33 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Base.cpp: Made a try fix for QNX and BCB.

Mon Mar 12 16:50:14 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Makefile.FaultTolerance: Fixed the Makefile for
          builds where corba_messaging is turned off.

Mon Mar 12 14:56:47 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * examples/Buffered_Oneways/Makefile:
        * examples/PluggableUDP/DIOP/Makefile:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/IFR_Service/Makefile.TypeCodeFactory:
        * orbsvcs/tests/Event/Basic/Makefile:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:
        * orbsvcs/tests/Notify/Basic/Makefile:
        * performance-tests/Pluggable/Makefile:
        * performance-tests/RTCorba/Oneways/Reliable/Makefile:
        * performance-tests/Thruput/TAO/Makefile:
        * tests/AMI/Makefile:
        * tests/Codec/Makefile:
        * tests/DSI_Gateway/Makefile:
        * tests/FL_Cube/Makefile:
        * tests/Forwarding/Makefile:
        * tests/InterOp-Naming/Makefile:
        * tests/MProfile/Makefile:
        * tests/MT_Server/Makefile:
        * tests/Multiple_Inheritance/Makefile:
        * tests/Native_Exceptions/Makefile:
        * tests/OctetSeq/Makefile:
        * tests/Param_Test/Makefile:
        * tests/Portable_Interceptors/Benchmark/Makefile:
        * tests/Portable_Interceptors/Dynamic/Makefile:
        * tests/Portable_Interceptors/ForwardRequest/Makefile:
        * tests/Portable_Interceptors/IORInterceptor/Makefile:
        * tests/Portable_Interceptors/Service_Context_Manipulation/Makefile:
        * tests/QtTests/Makefile:
        * tests/Single_Read/Makefile:
        * tests/Timed_Buffered_Oneways/Makefile:
        * tests/Timeout/Makefile: Fixed duplicate uses of library.  KCC is
          the only compiler that catches this problem.  Usually, this is
          caused by Makefiles adding -lTAO into $(LDLIBS) but it has
          already been taken care of by rule.tao.GNU.

Mon Mar 12 12:55:50 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Latency/client.conf:
        * performance-tests/Latency/st_client.conf:
          Reenable the RW waiting strategy for both tests.  This
          application does not need nested upcalls. This explains the
          mysterious 10% drop in performance shown on the nightly builds,
          I guess I wasn't thinking when I commited this files mixed on
          the middle of all the ORB::run() changes. Frank Hunleth tracked
          this one down.

Mon Mar 12 11:37:14 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Simple/echo/Echo_i.cpp:
          Use list[CORBA::ULong(0)] instead of (*list)[0] to workaround
          the MSVC problems with multiple conversions, the former looks
          nicer to me.

Mon Mar 12 13:33:44 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Moved the generation of the #ifndef guard to prevent the
          inclusion of skeleton source code more than once in a build to
          come after the generation of the #include statement for the
          pre-compiled header file (if any). Thanks to Pedro Brando
          <pbrandao@inescporto.pt> for pointing out that the previous
          order of code generation could sometimes cause the C++ compiler
          to think that there is an extra #endif in the file.

Mon Mar 12 13:20:12 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Lite.cpp (message_type): Added a fix to
          soncolidate the outgoing message blocks before dumping the
          contents for debugging purposes. Thanks to Johnny Willemsen for
          providing this patch.

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Handler.cpp:
        * tao/GIOP_Message_Handler.inl: Added code to align the message
          blocks on an 8 byte boundary. This is needed for BCB as the
          memory allocated doesn't seem to get aligned on an 8 byte
          boundary. Hopefully this should fix most of the problem that
          folks see on BCB. Thanks to Christopher Kohlhoff
          <chris@kohlhoff.com> and Johnny Willemsen for putting in effort
          to get behind what the compiler was actually doing.

Mon Mar 12 12:39:37 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/Simple/time/Time_i.h:
        * examples/Simple/echo/Echo_i.h:
        * examples/Simple/echo/Echo_i.cpp:
        * examples/Simple/grid/Grid_i.h:
        * examples/Persistent_Grid/Grid_i.h:
        * examples/Simple/bank/AccountManager_i.h: Fixed warnings and
          errors in KCC builds.

Mon Mar 12 12:14:10 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * TAO-INSTALL.html: Mentioned Windows 2000 explicitly in the
          document.  Thanks to Rahul Shukla <rshukla@ggn.aithent.com> for
          raising the question.

Mon Mar 12 11:08:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:

          Removed code that was registering the connection handler with
          the connection caching mechanism. We need to shortcut it, as we
          use our own concept. The code was actually causing problems for
          Craig Rodrigues <rodrigc@mediaone.net>, thanks for reporting.

Mon Mar 12 01:01:57 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AV_Core.h (TAO_AV_Core): deactivate_servant()
          and get_flowname() were global.  Moved them to the TAO_AV_Core
          namespace.

        * orbsvcs/tests/AVStreams: Added the following files to enable
          builds on Win32:

          - AVStreams.dsw
          - Full_Profile/Full_Profile.dsw
          - Full_Profile/ftp.dsp
          - Full_Profile/server.dsp
          - Latency/Latency.dsw
          - Latency/control.dsp
          - Latency/ping.dsp
          - Latency/pong.dsp
          - Multicast/Multicast.dsw
          - Multicast/ftp.dsp
          - Multicast/server.dsp
          - Multicast_Full_Profile/Multicast_Full_Profile.dsw
          - Multicast_Full_Profile/ftp.dsp
          - Multicast_Full_Profile/server.dsp
          - Pluggable/Pluggable.dsw
          - Pluggable/ftp.dsp
          - Pluggable/server.dsp
          - Simple/run_test.pl

Mon Mar 12 10:00:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tao/Wait_On_Leader_Follower.cpp:

          When timeouts were specified and the connection was closed
          before the timer expired or the reply arrived we returned no
          error, thereby letting the client believe that the request was
          actually sucessful. This fixes the problem by returning -1 in
          TAO_Wait_On_Leader_Follower::wait () in such cases.  Thanks to
          Jeffrey J. Persch <hyperslug@yahoo.com> for sending us this
          patch.

Sun Mar 11 16:33:53 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/PluggableUDP/tests/UDP_i.cpp: Changed Thread_Mutex in
          template instantiations to Null_Mutex. The declaration was
          Null_Mutex.

Sun Mar 11 11:29:53 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/Makefile.bor:
        * orbsvcs/tests/Event/Makefile.bor:
        * orbsvcs/tests/Event/lib/Makefile.bor:
        * orbsvcs/tests/Event/Basic/Atomic_Reconnect.bor:
        * orbsvcs/tests/Event/Basic/BCast.bor:
        * orbsvcs/tests/Event/Basic/Bitmask.bor:
        * orbsvcs/tests/Event/Basic/Complex.bor:
        * orbsvcs/tests/Event/Basic/Control.bor:
        * orbsvcs/tests/Event/Basic/Disconnect.bor:
        * orbsvcs/tests/Event/Basic/Gateway.bor:
        * orbsvcs/tests/Event/Basic/MT_Disconnect.bor:
        * orbsvcs/tests/Event/Basic/Makefile.bor:
        * orbsvcs/tests/Event/Basic/Negation.bor:
        * orbsvcs/tests/Event/Basic/Observer.bor:
        * orbsvcs/tests/Event/Basic/Random.bor:
        * orbsvcs/tests/Event/Basic/Reconnect.bor:
        * orbsvcs/tests/Event/Basic/Shutdown.bor:
        * orbsvcs/tests/Event/Basic/Timeout.bor:
        * orbsvcs/tests/Event/Basic/Wildcard.bor:
        * orbsvcs/tests/Event/Performance/Connect.bor:
        * orbsvcs/tests/Event/Performance/Inversion.bor:
        * orbsvcs/tests/Event/Performance/Latency.bor:
        * orbsvcs/tests/Event/Performance/Latency_Server.bor:
        * orbsvcs/tests/Event/Performance/Makefile.bor:
        * orbsvcs/tests/Event/Performance/Throughput.bor:
          Add Borland Makefiles for the event service regression tests.

Sun Mar 11 10:39:14 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Makefile.bor:
        * tests/Client_Leaks/Makefile.bor:
        * tests/Client_Leaks/child.bor:
        * tests/Client_Leaks/client.bor:
        * tests/Client_Leaks/server.bor:
        * tests/Crashed_Callback/Makefile.bor:
        * tests/Crashed_Callback/client.bor:
        * tests/Crashed_Callback/server.bor:
        * tests/LongUpcalls/Makefile.bor:
        * tests/LongUpcalls/ami_client.bor:
        * tests/LongUpcalls/ami_server.bor:
        * tests/LongUpcalls/blocking_client.bor:
        * tests/LongUpcalls/blocking_server.bor:
        * tests/MT_Client/Makefile.bor:
        * tests/MT_Client/client.bor:
        * tests/MT_Client/orb_creation.bor:
        * tests/MT_Client/server.bor:
        * tests/MT_Client/simple-client.bor:
        * tests/MT_Server/Makefile.bor:
        * tests/MT_Server/client.bor:
        * tests/MT_Server/server.bor:
        * tests/Muxing/Makefile.bor:
        * tests/Muxing/client.bor:
        * tests/Muxing/server.bor:
        * tests/Server_Leaks/Makefile.bor:
        * tests/Server_Leaks/client.bor:
        * tests/Server_Leaks/server.bor:
        * performance-tests/Makefile.bor:
        * performance-tests/Latency/Makefile.bor:
        * performance-tests/Latency/ami-latency-client.bor:
        * performance-tests/Latency/ami-throughput-client.bor:
        * performance-tests/Latency/client.bor:
        * performance-tests/Latency/dii_client.bor:
        * performance-tests/Latency/server.bor:
        * performance-tests/Latency/st_client.bor:
        * performance-tests/Latency/st_server.bor:
          Add Borland Makefiles for several crucial tests.

Sun Mar 11 09:53:13 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/Simple/grid/Grid_i.h:
        * examples/Persistent_Grid/Grid_i.h:
        * examples/Simple/time/Time_i.h: Added a operator= to
          keep g++ 2.7.2 happy.

Sun Mar 11 09:02:29 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/Simple/echo/Echo_i.h:
        * examples/Simple/bank/AccountManager_i.h: Added a operator= to
          keep g++ 2.7.2 happy.

Sun Mar 11 07:04:39 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp: Fixed a warning in
          g++.

Sun Mar 11 04:17:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * examples/PluggableUDP/DIOP/DIOP_Acceptor.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.h:
        * examples/PluggableUDP/DIOP/Transport.cpp:

          Added code to support two-way calls, but only for single-
          threaded servers.

        * examples/PluggableUDP/tests/server.cpp:
        * examples/PluggableUDP/tests/client.cpp:
        * tests/AMI_Timeouts.server.cpp:

          Fixed some exception handling and shut down code.

        * examples/PluggableUDP/tests/UDP_i.h:

          Fixed the usage of ACE_Thread_Mutex in the single-thread
          build. Added an include to "ace/Synch.h" and made the
          lock to a ACE_Null_Mutex, as this servant supports only
          single-threaded servers anyway.

Sat Mar 10 22:27:58 2001  Pradeep Gore  <pradeep@cs.wustl.edu>

        * orbsvcs/orbsvcs/Notify/Notify_ConsumerAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ID_Pool_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ID_Pool_T.h:
        * orbsvcs/orbsvcs/Notify/Notify_SupplierAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.cpp:
          Added the following fixes for bugs reported by
          Sergey Logvin <S.Logvin@telesens.com.ua> -
          + Filters are destroyed correctly.
          + Fixed memory leak in EventChannelFactory.
          + Implemented TAO_Notify_FilterAdmin_i::remove_all_filters.
          + Fixed ConsumerAdmin::get_all_filters.
          + Fixed SupplierAdmin::get_all_filters.
          + Fixed CosNotifyFilter::Filter::get_constraints.
          + Fixed Filter::get_all_constraints.

Sat Mar 10 18:17:57 2001  Ossama Othman  <ossama@uci.edu>

        * tests/NestedUpcall/MT_Client_Test/client.cpp (main):

          Make sure the server task was activated before continuing with
          the test.

        * tests/NestedUpcall/MT_Client_Test/local_server.cpp (MT_Server):

          The ORB_Manager pointer may be zero, i.e., uninitialized, if the
          server task was not activated.  Check that it is non-zero before
          attempting to call methods through it.  Fixes a seg fault.

Sat Mar 10 18:20:32 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/AMI/server.cpp:
        * tests/AMI/client.cpp:
        * tests/AMI/simple_client.cpp:
        * examples/PluggableUDP/tests/client.cpp:
          Don't use true or false, the lame platforms (gcc-2.7.2 and
          Sun/CC 4.2) do not have a bool type.

Sat Mar 10 18:12:58 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Client_Leaks/client.cpp:
          Increase the number of iterations, the lower number did not
          trigger the problem on TAO-1.1.12

        * tests/Server_Leaks/client.cpp:
          The do_shutdown flag was not initialized correctly.

        * tests/Server_Leaks/run_test.pl:
          Run multiple clients simultaneously, this speeds up the test
          significantly.

Sat Mar 10 16:51:38 2001  Carlos O'Ryan  <coryan@uci.edu>

        * docs/tutorials/Quoter/RT_Event_Service/index.html:
          Fixed misleading instructions in the document.

Sat Mar 10 16:08:46 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Makefile:
          Add the new test to the recursive build

        * tests/Server_Leaks/Makefile:
          Fix the Makefile

        * examples/Simple/echo/Echo_i.cpp:
          Fixed stupid typo.

Sat Mar 10 15:38:28 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Content_Server/SMI_Iterator/Makefile:
          Add missing library for QNX

        * examples/Simple/echo/Echo_i.cpp (Echo_i::echo_list):
          The code was not exception safe, and was abusing ACE_UNUSED_ARG()

        * tests/Crashed_Callback/client.cpp:
        * tests/Crashed_Callback/server.cpp:
          The test was using SYNC_WITH_TARGET and we wanted
          SYNC_WITH_SERVER behavior

Sat Mar 10 15:30:05 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/README:
        * tests/Muxing/README:
        * tests/Muxing/Makefile:
        * tests/Muxing/Muxing.dsw:
        * tests/Muxing/Test.idl:
        * tests/Muxing/run_test.pl:
        * tests/Muxing/Client_Task.h:
        * tests/Muxing/Client_Task.cpp:
        * tests/Muxing/Receiver.h:
        * tests/Muxing/Receiver.cpp:
        * tests/Muxing/Server_Task.h:
        * tests/Muxing/Server_Task.cpp:
        * tests/Muxing/client.cpp:
        * tests/Muxing/client.dsp:
        * tests/Muxing/server.cpp:
        * tests/Muxing/server.dsp:
        * tests/Muxing/svc.conf:
          New one-button test for connection muxing.  More than a
          regression test this is just a simpler way to test the same
          thing.

        * tests/README:
        * tests/Server_Leaks/README:
        * tests/Server_Leaks/Makefile:
        * tests/Server_Leaks/Server_Leaks.dsw:
        * tests/Server_Leaks/Test.idl:
        * tests/Server_Leaks/run_test.pl:
        * tests/Server_Leaks/Ping_Service.h:
        * tests/Server_Leaks/Ping_Service.cpp:
        * tests/Server_Leaks/client.cpp:
        * tests/Server_Leaks/client.dsp:
        * tests/Server_Leaks/server.cpp:
        * tests/Server_Leaks/server.dsp:
          Another regression test for resource leaks on the server-side.

        * tests/LongWrites/client.dsp:
          Was trying to compile files not present on the main trunk.

Sat Mar 10 11:46:28 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/RtEC/MCast/Makefile:
        * tests/AVStreams/Latency/Makefile:
        * tests/CosEvent/Basic/Makefile:
        * tests/CosEvent/lib/Makefile:
        * tests/EC_Custom_Marshal/Makefile:
        * tests/FaultTolerance/IOGRManipulation/Makefile:
        * tests/Notify/performance-tests/RedGreen/Makefile:
        * tests/Notify/performance-tests/Throughput/Makefile:
        * tests/Sched/Makefile:
          More fixes to make QNX happy about the library
          interdependencies.

        * tests/FaultTolerance/IOGR/Manager.h:
        * tests/FaultTolerance/IOGR/Manager.cpp:
          Do not return anything from Manager::init(), exceptions are
          raised to indicate errors, and the return value was ignored
          anyway.

Sat Mar 10 11:29:16 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/Simple/echo/Echo_i.cpp: Fixed a compile error in debian
          Linux.

Sat Mar 10 09:39:45 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * Reverted the change made by Paul Calabrese vide "Fri Mar  9
          14:38:06 2001  Paul Calabrese <calabrese_p@ociweb.com>. This
          change was breaking all the tests for Sequences in
          $TAO_ROOT/tests/Param_Test.

Sat Mar 10 02:33:13 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Makefile:
          Add the new test to the recursive Makefiles

Sat Mar 10 02:09:29 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/README:
        * tests/Client_Leaks/README:
          Add new test to check that clients do not leak handle
          resources.

        * tests/Client_Leaks/Test.idl:
          Define the IDL interfaces used in the test

        * tests/Client_Leaks/child.cpp:
        * tests/Client_Leaks/Process.h:
        * tests/Client_Leaks/Process.cpp:
          Implement the Process interface

        * tests/Client_Leaks/server.cpp:
        * tests/Client_Leaks/Process_Factory.h:
        * tests/Client_Leaks/Process_Factory.cpp:
          Implement the Process_Factory interface, create instances of the
          child program as requested by the client.

        * tests/Client_Leaks/client.cpp:
          Invoke create_new_process() and shutdown() on the returned
          process multiple times (1000 by default).

        * tests/Client_Leaks/run_test.pl:
          One button script

        * tests/Client_Leaks/Makefile:
        * tests/Client_Leaks/Client_Leaks.dsw:
        * tests/Client_Leaks/child.dsp:
        * tests/Client_Leaks/client.dsp:
        * tests/Client_Leaks/server.dsp:
          Project files and Makefile for the new test

Fri Mar 09 23:52:02 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/README:
        * tests/Crashed_Callback/README:
          Document the purpose of the new Crashed_Callback test.

        * tests/Crashed_Callback/Crashed_Callback.dsw:
        * tests/Crashed_Callback/client.dsp:
        * tests/Crashed_Callback/server.dsp:
          Add project files for the Crashed_Callback test.

        * tests/Crashed_Callback/Makefile:
          Disable the test if corba messaging is disabled.

        * tests/LongWrites/LongWrites.dsw:
        * tests/LongWrites/client.dsp:
        * tests/LongWrites/server.dsp:
          Add project files for the LongWrites test.

Fri Mar  9 22:44:55 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/RT_ORBInitializer.cpp:
          Use the ACE_Service_Config::new process_directive() call to
          insert static services into the Service Repository, this
          approach is cleaner than what I did on Feb 20th.

Fri Mar  9 18:27:08 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Crashed_Callback/Crashed_Callback.h:
          Minor cosmetic fixes.

        * tests/Crashed_Callback/Service.h:
        * tests/Crashed_Callback/Service.cpp:
        * tests/Crashed_Callback/server.cpp:
          Print out an error if the test did not finish successfully.

        * tests/Crashed_Callback/run_test.pl:
          Simplify the structure a bit, thanks to Darrell.

Fri Mar 09 16:16:56 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * examples/POA/FindPOA/FindPOA.cpp (main): Added additional test
          cases to make sure that the correct exception
          (PortableServer::POA::AdapterNonExistent) is raised when looking
          for a non-existant POA.

Fri Mar  9 16:06:29 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Makefile:
        * tests/Crashed_Callback/Makefile:
        * tests/Crashed_Callback/Test.idl:
        * tests/Crashed_Callback/run_test.pl:
        * tests/Crashed_Callback/Crashed_Callback.h:
        * tests/Crashed_Callback/Crashed_Callback.cpp:
        * tests/Crashed_Callback/Service.h:
        * tests/Crashed_Callback/Service.cpp:
        * tests/Crashed_Callback/client.cpp:
        * tests/Crashed_Callback/server.cpp:
          New regression test.  Verify that the ORB does raise an
          exception when a callback interface dies.  This was reported by
          Jody Hagins <jody@atdesk.com>.
          It does work TAO-1.1.13 but it failed on TAO-1.1.12, we add the
          regression to avoid future problems.

Fri Mar  9 16:38:57 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/be_produce.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.h:
        * orbsvcs/IFR_Service/ifr_removing_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_removing_visitor.h:
        * orbsvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.h:
        * orbsvcs/IFR_Service/ifr_visitor_macro.h:

          Removed CORBA::Environment member from the visitor classes,
          and its use. Instead, each visitor method that makes a
          call to the IFR, or to _narrow, creates a new environment
          variable. Thanks to Carlos for showing me the error in
          trying to piggyback exception propagation onto the
          propagation of the visit_* methods' error codes.

        * orbsvcs/IFR_Service/drv_preproc_ifr.cpp:

          Made change corresponding to Darrell's below.

Fri Mar 09 14:40:37 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Simple/Simple_util.cpp:
          Fixed compilation problems with the Simple examples.

Fri Mar  9 14:07:06 2001  Darrell Brunsch <brunsch@uci.edu>

        * TAO_IDL/driver/drv_preproc.cpp:

          Jeff and I have been chatting about why "tao_idl -E" doesn't
          work too well on Windows, and it was narrowed down to a system ()
          call that used "cat".  I could not let this travesty of platform
          independence continue to reside in our very own tao_idl compiler!

          Um, yeah, so I changed that bit of code to read in the file and
          print it out via ACE_DEBUG.

Fri Mar  9 15:40:00 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * tests/AMI/client.cpp:
        * tests/AMI/simple_client.cpp:
        * tests/AMI/server.cpp:

          Fixed the custom event loop and clean-up code. This fixes
          a seg fault problem Bala reported.

Fri Mar  9 14:48:19 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Typecode.h:
        * tao/Typecode.cpp:

          Added method private_default_index_i() that does not
          grab a lock like its counterpart private_default_index().
          This enables the default index to be checked from
          within a critical section of private_member_label().

Fri Mar  9 14:38:06 2001  Paul Calabrese <calabrese_p@ociweb.com>

        * tao/Sequence.i:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_obj_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_str_sequence_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/gen_bounded_wstr_sequence_ci.cpp:

          Fix a memory leak with bounded sequences of all types.
          Also cleaned up some indentation in the generated code
          and added a missing data member initialization.

Fri Mar  9 14:27:00 2001  Chad Elliott  <elliott_c@ociweb.com>

        * performance-tests/Cubit/TAO/MT_Cubit/Makefile:
        * tao/Makefile:

          Modifications to make things build correctly with Chorus 4.0.1.

Fri Mar 09 12:54:14 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp (parse): Fixed
          TAO_Tokenizer::parse().  It was not delimiting strings
          correctly.

        * orbsvcs/tests/AVStreams/Simple: Made the following changes to
          make things run more smoothly:

          - Updated README.  Added information about defaults.

          - ftp and server: Changed <ftp::client_mmdevice_> and
          <ftp::streamctrl_> and <server::mmdevice> to be dynamic and use
          servant reference counting to manage their lifetime. Otherwise,
          things will crash on exit.

          - ftp: Added defaults to all user specified parameters.

          - ftp: Address should default to "localhost:0".

          - ftp: Removed <Client::flowname> and <Client::frame_rate> since
          they are not used.

          - ftp: Changed CString to use operator= rather than set() since
          it is more intuitive.

          - ftp: <flow_spec.length> should be called *before* slot [0] is
          used.

Fri Mar  9 10:30:54 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_codegen.cpp:

          To a conditional checking for Linux in the handling of
          the gperf input stream, added a check for QNX, which
          seems to have similar behavior at that point. Thanks
          to Andy Olson <andrew.olson@lmco.com> for reporting the
          bug and for tracking down the problem.

Fri Mar  9 16:07:55 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Makefile.bor
        * tests/QtTests/*.bor
        * tests/Strategies/*.bor

          Added BCB makefiles for these tests

Fri Mar  9 07:25:26 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/FaultTolerance/IOGR/Makefile: Fixed a error.

Fri Mar  9 07:00:26 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/POA/Single_Threaded_POA/Single_Threaded_POA.cpp: Fixed
          some usage of ACE_CHECK which were giving warnings.

Fri Mar  9 06:48:35 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * examples/Simple/Simple_util.cpp: Fixed a typo.

Thu Mar  8 21:10:39 2001  Ossama Othman  <ossama@uci.edu>

        * tao/IOPC.cpp (operator>>=):
        * tao/MessagingC.cpp (operator>>=):
        * tao/PortableInterceptorC.cpp (operator>>=):

          Fixed code so that ACE_TRY_CHECK is correctly called immediately
          after a call that uses ACE_TRY_ENV is made.

Thu Mar  8 20:44:23 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Any.h:
        * tao/Any.cpp:

          Removed CORBA::Environment parameter from the constructor.  It's
          a really bad idea to attempt to support emulated exceptions in
          constructors.  In any case, the parameter wasn't used.

        * tao/RequestInfo_Util.cpp (make_any):

          Removed ACE_TRY_ENV parameter from the CORBA::Any constructor
          call.  It is no longer part of the constructor's signature.

        * docs/INS.html:

        Updated URL for the INS spec.

Thu Mar  8 21:34:35 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Asynch_Reply_Dispatcher.cpp (schedule_timer): Fixed a
          warning with g++.

Thu Mar  8 19:02:52 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/Interface.pidl:

          Added some comments to the top of the file, about how to
          regenerate the stub code, and how to regenerate and use
          the diff files.

        * tao/IFR_Client/diffs/InterfaceC.h.diff:
        * tao/IFR_Client/diffs/InterfaceC.i.diff:
        * tao/IFR_Client/diffs/InterfaceC.cpp.diff:
        * orbsvcs/IFR_Service/diffs/InterfaceS.h.diff:
        * orbsvcs/IFR_Service/diffs/InterfaceS.i.diff:
        * orbsvcs/IFR_Service/diffs/InterfaceS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/InterfaceS_T.i.diff:

          Regenerated these files.

Thu Mar  8 15:32:00 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * tao/Asynch_Invocation.cpp:
        * tao/Asynch_Reply_Dispatcher.cpp:
        * tao/Asynch_Reply_Dispatcher.h:
        * tao/Asynch_Timeout_Handler.cpp:
        * tao/Asynch_Timeout_Handler.h:

          Moved the alloaction of the timeout handler from the asynch invocation,
          where it was done dynamically, to the constructur of the asynch reply
          dispatcher constructor, where it is allocated together with the
          reply dispatcher. The reply dispatcher itself is allocated on the
          heap as the invocation object will go away before the reply arrives.

          This change also involved some restructuring of the timeout mechanism,
          though nothing major.


Thu Mar  8 14:20:43 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/InterfaceC.cpp:

          Updated file to correspond with change in generated
          code in the following entry:

          Wed Mar  7 16:17:16 2001  Jeff Parsons <parsons@cs.wustl.edu>

Thu Mar  8 12:39:21 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/tests/FaultTolerance/IOGR/server.cpp (main):
        * orbsvcs/tests/FaultTolerance/IOGR/Manager.cpp:
        * orbsvcs/Dump_Schedule/Dump_Schedule.cpp:
        * examples/Simulator/Event_Supplier/DOVE_Supplier.cpp:
        * examples/Simulator/Event_Supplier/DOVE_Supplier.cpp:
        * examples/Simulator/Event_Supplier/DualEC_Sup.cpp:
        * examples/Simulator/Event_Supplier/DualEC_Sup.cpp:
        * examples/Simulator/Event_Supplier/Event_Con.cpp:
        * examples/Simulator/Event_Supplier/Event_Con.cpp:
        * examples/Simple/Simple_util.cpp:
        * examples/Simple/echo/Echo_i.cpp:
        * examples/Simple/echo/Echo_i.cpp:
        * examples/Simple/echo/Echo_i.cpp: Fixed some
          resolve_initial_reference fuzz errors.

Thu Mar  8 09:32:49 2001  Darrell Brunsch <brunsch@uci.edu>

        * examples/Borland/ChatClientWnd.cpp:
        * examples/Callback_Quoter/Consumer_Handler.cpp:

          Fixed some resolve_initial_reference fuzz errors.

Thu Mar  8 11:01:45 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * performance-tests/RTCorba/Oneways/Reliable/server.cpp:
          Added missing ACE_TRY_ENV to resolve_initial_references
          call.

Thu Mar  8 08:34:16 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Makefile:
          Fixed path to the PluggableUDP directory.

        * examples/PluggableUDP/tests/UDP_i.cpp:
          Fixed throw spec for the invoke() method.

        * tests/POA/Single_Threaded_POA/Makefile:
          rules.bin.GNU cannot be included if there is an explicit rule to
          build the binary.  Cleanup the macros and regenerate
          dependencies.

        * tests/POA/Single_Threaded_POA/Single_Threaded_POA.cpp:
          Fixed warning about unused argument.

Thu Mar  8 10:29:08 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/server.cpp:

          Added missing ACE_TRY_ENV to resolve_initial_references
          call.

Thu Mar  8 10:00:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/AMI_Timeouts/timeout_client.cpp:
          Added more time to wait for asynch replies in case of local and
          remote timer == 0ms.

        * tests/AMI_Timeouts/client.cpp:
          Removed a memory leak caused by not deleting the client object.

        * tests/AMI_Timeouts/timeout_i.cpp:
          Removed some confusing debugging messages. Also, added a check
          to accept only timeout exceptions and report others.

Wed Mar  7 20:07:00 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/CosEvent_Service/Makefile:
        * orbsvcs/Dump_Schedule/Makefile:
        * orbsvcs/Event_Service/Makefile:
        * orbsvcs/LifeCycle_Service/Makefile:
        * orbsvcs/Logging_Service/Makefile:
        * orbsvcs/Scheduling_Service/Makefile:
        * orbsvcs/Trading_Service/Makefile:
        * orbsvcs/tests/EC_Multiple/Makefile:
        * orbsvcs/tests/Event/Basic/Makefile:
        * orbsvcs/tests/Event_Latency/Makefile:
        * TAO/examples/Content_Server/AMI_Observer/Makefile:
        * TAO/examples/Quoter/Makefile:
        * TAO/orbsvcs/examples/CosEC/RtEC_Based/bin/Makefile:
        * TAO/orbsvcs/examples/CosEC/RtEC_Based/tests/Basic/Makefile:
        * TAO/orbsvcs/examples/RtEC/Schedule/Makefile:
        * TAO/orbsvcs/examples/RtEC/Simple/Makefile:
        * TAO/orbsvcs/tests/Event/Performance/Makefile:
        * TAO/orbsvcs/tests/FaultTolerance/IOGR/Makefile:
        * TAO/orbsvcs/tests/Notify/Basic/Makefile:
          Add missing libraries for QNX

        * tests/Collocation/Makefile.impl:
          Add libraries missing for Tru64/CXX

Wed Mar  7 19:36:45 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple/Makefile:
        * orbsvcs/tests/AVStreams/Makefile:

          Added the Makefiles to compile the Simple test.

Wed Mar 07 19:19:18 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * tao/PortableServer:

          The SINGLE_THREAD_MODEL was not implemented correctly in the
          POA.  As documented in Bug 483, the spec was misread to
          understand that two threads cannot call the same servant in
          a single threaded POA.  The spec actually meant that any two
          servants in a single threaded POA cannot be called
          simultaneously.  This was fixed by the following changes:

          - There is one lock per single threaded POA instead of one
            lock per servant.

          - Since the lock is now on the POA instead of being on the
            servant, there is no need to set up the per servant lock
            when the servant is registered or when the servant is
            removed from the POA.  Thus the <teardown_servant_lock>
            and the <establish_servant_lock> were removed from the
            POA.

          - The lock type was changed from regular to recursive.

        * tests/POA/Single_Threaded_POA:

          New test added. This program tests to make sure that two threads
          cannot call servants in a single threaded POA simultaneously.
          At the same time, it makes sure that a servant can call itself
          or other servants in the same POA while in an upcall.

        * Updated the following files wrt the new test:

          ACE_wrappers/TAO/tests/TAO_Tests.dsw
          ACE_wrappers/TAO/tests/POA/Makefile
          ACE_wrappers/TAO/tests/POA/README
          ACE_wrappers/bin/auto_compile_win32.pl
          ACE_wrappers/bin/auto_run_tests.lst

        * tao/ORB_Core.cpp:

          - There was a memory leak when an ORB was not explicitly
            destroyed or shutdown by the user.  The fix was to call
            TAO_ORB_Core::shutdown() from TAO_ORB_Core::fini().  This
            will ensure that the Object Adapter(s) gets closed,
            reactor registry is shutdown, the threads are canceled,
            etc. when the user does not explicitly destroyed or
            shutdown the ORB.  This fixes move than Bug 406 since it
            cleans up after the user even when the user does not call
            shutdown() or destroy() on the ORB.

          - There was a guard added to avoid repeated shutdowns and
            then there was no need to guard repeated destroys.

          - Ossama's change to make <root_poa_> a ptr from the
            original var type was incorrect because he thought that
            poa_adapter->root() doesn't return a duplicate.  It
            actually does duplicate (TAO_POA *root_poa() doesn't but
            CORBA::Object_ptr root()does).  Therefore, his change was
            reverted.

          - Moved destroy_interceptors() from destroy() to shutdown().
            All destroy() should do is (a) call shutdown() and (b)
            unbind() from the ORB table.  Nothing else should really
            be added to this method.  Everything else should go to the
            shutdown() method.  Remember when the ORB Core is finally
            removed from the ORB table, the reference count goes to
            zero and fini() is called.  fini() calls shutdown() and
            does not call destory() since destroy() will try to unbind
            from the ORB table again.  Additional code should not be
            added to destroy() since there is no guarantee that
            orb->destroy() will ever be called by the user.  Since TAO
            guarantees that shutdown() will be called, all cleanup
            code should go there.

Wed Mar  7 16:17:16 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/operation_cs/cpp:

          Added to previous fix to handle case where the
          return value is a struct or union of fixed size.
          In these cases, the return value is not a pointer,
          so ACE_CHECK_RETURN must return the result of a
          call to the default constructor.

Wed Mar 07 11:35:03 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * examples/Advanced/ch_21/Makefile (LDLIBS): Added missing
          PortableServer library.  Fixes Bug 809.

Wed Mar  7 13:03:59 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/Makefile:
        * examples/Makefile:
          Added DIOP and tests to the non-windows builds.

Wed Mar  7 12:01:36 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_operation/operation_cs.cpp:

          Added to previous fix to handle the case where the
          return type is an enum. In such a case, the added
          ACE_CHECK_RETURN macro cannot just return 0, but
          must return an enum value, which is a separate type.

        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:

          Cosmetic changes to generation of the *_setup_collocation
          method.

Wed Mar  7 10:50:16 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be_operation/operation_cs.cpp:

          Broke up a chain of generated calls in the stub
          operation implementation into separate statements,
          and inserted a needed ACE_CHECK.

Wed Mar  7 08:33:39 2001  Darrell Brunsch <brunsch@uci.edu>

        * utils/wxNamingViewer/wxNamingViewer.dsp:

          Changed the configuration names so they don't show up in
          the nightly builds.

Wed Mar 07 08:01:16 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Stub.cpp (~TAO_Stub):

          Make sure the returned TAO_Endpoint pointer is non-zero before
          invoking methods through it.  It could be zero in the case of
          profiles created by other ORBs.  Thanks to Goran Lowkrantz
          <goran.lowkrantz@ismobile.com> for submitting the fix.

Wed Mar  7 08:39:56 2001  Chad Elliott  <elliott_c@ociweb.com>

        * tests/AMI/client.cpp:
        * tests/AMI/server.cpp:

          Fixed build error when building with exceptions disabled.

        * orbsvcs/orbsvcs/Naming/Naming_Utils.cpp:

          Removed a warning when compiling with multicast disabled.

        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.cpp:
        * orbsvcs/tests/Notify/Basic/Events_Test.cpp:
        * orbsvcs/tests/Notify/Basic/Simple.cpp:
        * orbsvcs/tests/Notify/Basic/Updates.cpp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
        * orbsvcs/tests/Trading/colocated_test.cpp:

          Fixed link errors on VxWorks due to multiply defined templates.
          The templates in question were already instantiated in the orbsvcs
          libraries.

Wed Mar  7 06:43:11 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/examples/CosEC/RtEC_Based/lib: Fixed a typo in exception
          macros.

Wed Mar 07 00:07:48 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableInterceptorS.h:

          Some IDL files may include the `tao/PortableInterceptor.pidl'
          file.  In those cases, the IDL compiler will generate an include
          for this header in the skeleton.  This dummy header satisfies
          that inclusion.

        * tests/Portable_Interceptors/ForwardRequest/ServerRequestInterceptor.idl:

          Removed this IDL files.  Some old C++ compilers couldn't handle the
          reopened namespaces found in the stubs/skeletons associated with
          this IDL.

        * tests/Portable_Interceptors/ForwardRequest/test.idl:

          Moved the "ServerRequestInterceptor" interface to this IDL file
          since some old C++ compilers couldn't handle the reopened
          namespaces found in the stubs/skeletons associated with this
          IDL.

        * tests/Portable_Interceptors/ForwardRequest/Server_Request_Interceptor.h:

          Include `testC.h' instead of `ServerRequestInterceptorC.h' since
          the server request interceptor IDL was moved to the `test.idl'
          file.

        * tests/Portable_Interceptors/ForwardRequest/Makefile:
        * tests/Portable_Interceptors/ForwardRequest/client.dsp:
        * tests/Portable_Interceptors/ForwardRequest/client.bor:
        * tests/Portable_Interceptors/ForwardRequest/server.bor:
        * tests/Portable_Interceptors/ForwardRequest/server.dsp:

          Removed references to the removed `ServerRequestInterceptor.idl'
          file, and updated IDL compiler flags accordingly.

Tue Mar 06 23:43:07 2001  Ossama Othman  <ossama@uci.edu>

        * tao/CONV_FRAMEC.cpp (operator>>=):
        * tao/DomainC.cpp (operator>>=):
        * tao/DynamicC.cpp (operator>>=):
        * tao/GIOPC.cpp (operator>>=):
        * tao/IIOPC.cpp (operator>>=):
        * tao/OctetSeqC.cpp (operator>>=):
        * tao/StringSeqC.cpp (operator>>=):
        * tao/TAOC.cpp (operator>>=):
        * orbsvcs/examples/Security/SecurityLevel1/SLevel1_Test_i.cpp
          (authorize_level1):
        * tests/Portable_Interceptors/Benchmark/client.cpp (run_test):
        * performance-tests/Cubit/TAO/IDL_Cubit/collocation_test.cpp
          (svr_worker):
        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Client.cpp (run):

          Added missing ACE_CHECK/ACE_TRY_CHECK macros.

        * orbsvcs/tests/LoadBalancing/server.cpp (main):
        * orbsvcs/tests/Security/RejectInsecure/server.cpp (main):
        * orbsvcs/tests/Security/SecurityLevel1/server.cpp (main):
        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test_i.cpp
          (authorize_level1):

          Added missing ACE_TRY_ENV macros to the
          resolve_initial_references() call.

Wed Mar  7 07:46:51 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Makefile.bor
        * tests/ior_corbaloc/*.bor
        * tests/Single_Read/*.bor

          Added BCB specific makefiles for these tests

Tue Mar  6 21:22:51 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/ior_corbaloc/status_i.cpp:
          The default arguments were also set in the implementation file.
          Corrected it.

          Thanks to Johnny Willemsen <johnny.willemsen@meco.nl>
          for reporting this.

Tue Mar  6 21:21:45 2001  Chris Cleeland  <cleeland_c@ociweb.com>

        * tao/IIOP_Acceptor.h (port_span_): Added data member to track the
          span of ports the user wishes a server-side ORB to search for an
          open port. [Bug 817]

        * tao/IIOP_Acceptor.cpp (parse_options): Added code to parse a new
          "portspan" endpoint option to set the port_span_ data member. [Bug
          817]

        * tao/IIOP_Acceptor.cpp (CTOR): Default the port_span_ to 1. [Bug 817]

        * tao/IIOP_Acceptor.cpp (open_i): Added code to search for a port
          starting at the port specified in the -ORBEndpoint option, over a
          span of port_span_ ports looking for an available port on which to
          listen for requests.  Search is in-order linear.  If there are
          multiple endpoints, then only the first endpoint gets search, and
          all other endpoints use whatever port was found for that one.
          This is identical to the behavior used for ephemeral ports. [Bug 817]

Tue Mar  6 18:32:34 PST 2001 Mayur Deshpande  <mayur@balar.ece.uci.edu>

        * docs/tutorials/Quoter/Makefile (Repository):
          Top level Makefiel that recursively makes all tutorials in the subdirectories.

        * docs/tutorials/Quoter/RT_Event_Service/Makefile (Repository):
          Updated LDLIBS section

        * docs/tutorials/Quoter/On_Demand_Activation/Stock_i.h (Repository):
        * docs/tutorials/Quoter/On_Demand_Activation/Stock_i.cpp (Repository):
          Copied from ../Simple/Server

        * docs/tutorials/Quoter/On_Demand_Activation/Stock_Factory_Locator_i.cpp (Repository):
          Handled 'dangling else' condition.

        * docs/tutorials/Quoter/On_Demand_Activation/Stock_Factory_Locator_i.h (Repository):
          Included PortableServer header file

        * docs/tutorials/Quoter/On_Demand_Activation/Makefile (Repository):
          Makefile to make the new self-contained Tutorial.

        * docs/tutorials/Quoter/On_Demand_Activation/Handler_i.h (Repository):
        * docs/tutorials/Quoter/On_Demand_Activation/Handler_i.cpp (Repository):
        * docs/tutorials/Quoter/On_Demand_Activation/Quoter.idl (Repository):
        * docs/tutorials/Quoter/On_Demand_Activation/client.cpp (Repository):
          Copied from ../AMI

        * docs/tutorials/Quoter/Naming_Service/Stock_i.h (Repository):
        * docs/tutorials/Quoter/Naming_Service/Stock_i.cpp (Repository):
        * docs/tutorials/Quoter/Naming_Service/Stock_Factory_i.h (Repository):
        * docs/tutorials/Quoter/Naming_Service/Stock_Factory_i.cpp (Repository):
          Copied from ../Server.
        * docs/tutorials/Quoter/Event_Service/Makefile (Message):
            Makefile to make the self-contained AMI tutorial.

        * docs/tutorials/Quoter/Event_Service/ec.conf (Message):
          Works better with defaults (no need for an ec.conf file actually).

        * docs/tutorials/Quoter/AMI/Makefile (Message):
          Makefile to make the self-contained AMI tutorial.

        * docs/tutorials/Quoter/idl/quoter_common_export.h (Repository):
          For exporting DLL symbols.

        * docs/tutorials/Quoter/idl/Quoter.idl (Repository):
          The mother of all Quoter.idl file.

        * docs/tutorials/Quoter/idl/Makefile (Repository):
          Most of the IDL generated files were common to many tutoroals (especially
          in the Simple directory), so the IDL file was moved into a separate directory,
          the necessary files generated and stored in a library, Quoter_Common, to be
          used by others.

        * docs/tutorials/Quoter/Simple/Server/Stock_i.h (Repository):
          Modified to take into account the new Quoter_Common library.

        * docs/tutorials/Quoter/Simple/Server/Makefile (Repository):
          Makefile to make the new self-contained Server tutorial.

        * docs/tutorials/Quoter/Simple/Persistent (Repository):
          Copied Stock_Facory_i* and Stock_i* files from ../Server and client.cpp from
          ../Client to make Impl-Repo self-sufficient.

        * docs/tutorials/Quoter/Simple/Persistent/Makefile :
          Makefile to make the new self-contained Persistent tutorial.

        * docs/tutorials/Quoter/Simple/Impl-Repo :
          Copied Stock_Facory_i* and Stock_i* files from ../Server and client.cpp from
          ../Client to make Impl-Repo self-sufficient.

        * docs/tutorials/Quoter/Simple/ImprovedServer/Makefile :
          Makefile to make the new self-contained ImprovedServer directory.

        * docs/tutorials/Quoter/Simple/Impl-Repo/index.html :
          Corrected path to ImplRepo_Service.

        * docs/tutorials/Quoter/Simple/Client/Makefile :
          Makefile making use of the Common_Quoter library and 'idl' files.

Tue Mar  6 17:56:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * utils/wxNamingViewer/pch.h:
        * utils/wxNamingViewer/wxBindDialog.cpp:
        * utils/wxNamingViewer/wxNamingViewer.dsp:
        * utils/wxNamingViewer/wxNamingViewer.dsw:

          Some fixes to get this util to work in MSVC 6.

Tue Mar  6 17:29:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_i.h:
        * orbsvcs/ImplRepo_Service/Options.cpp:
        * orbsvcs/ImplRepo_Service/Options.h:

          Hmmm, yuck.  I'm cleaning up my 10 or so workspaces and found
          that I still had this fix ready for checkin.  [Bug 723]
          Originally submitted by RogerTragin@bigfoot.com (Roger Tragin).

Tue Mar  6 15:40:42 2001  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_cs.cpp:
        * examples/OBV/Typed_Events/Event_Types_impl.cpp:
        * orbsvcs/Concurrency_Service/Concurrency_Service.cpp:
        * orbsvcs/Event_Service/Event_Service.cpp:
        * orbsvcs/examples/CosEC/RtEC_Based/bin/RtEC_Based_CosEC.cpp:
        * orbsvcs/examples/CosEC/RtEC_Based/lib/CosEvent_Utilities.cpp:
        * orbsvcs/examples/CosEC/RtEC_Based/lib/ProxyPushConsumer_i.cpp:
        * orbsvcs/examples/RtEC/Schedule/Service.cpp:
        * orbsvcs/orbsvcs/ESF/ESF_Delayed_Changes.cpp:
        * orbsvcs/orbsvcs/Event/EC_And_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_Gateway.cpp:
        * orbsvcs/orbsvcs/Event/EC_Masked_Type_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_Per_Supplier_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_ProxySupplier.cpp:
        * orbsvcs/orbsvcs/Event/EC_Sched_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_Timeout_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_Type_Filter.cpp:
        * orbsvcs/orbsvcs/Event/Event_Channel.cpp:
        * orbsvcs/orbsvcs/Event/RT_Task.cpp:
        * orbsvcs/tests/EC_Basic/EC_Basic.cpp:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.cpp:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.cpp:
        * orbsvcs/tests/Event/Basic/Observer.cpp:
        * orbsvcs/tests/Event/Basic/Random.cpp:
        * orbsvcs/tests/Event/Basic/Reconnect.cpp:
        * orbsvcs/tests/Event/Performance/Latency_Server.cpp:
        * orbsvcs/tests/Event/lib/Consumer.cpp:
        * orbsvcs/tests/Event/lib/Driver.cpp:
        * orbsvcs/tests/Event/lib/Supplier.cpp:
        * orbsvcs/tests/Event_Latency/Event_Latency.cpp:
        * performance-tests/Callback/Server_i.cpp:
        * performance-tests/Callback/server.cpp:
        * tests/LongWrites/client.cpp:
        * tests/LongWrites/server.cpp:
        * tests/Object_Loader/Test_i.cpp:
        * tests/Timeout/client.cpp:
          More ACE_TRY_ENV/ACE_CHECK fixes to make the Fuzz script happy.
          Lucky for us, the Event Service changes are more a matter of
          style than correctness.

Tue Mar  6 17:35:00 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/corbafwd.h:

          Modified the enum TCKind to be compatible with CORBA 2.4,
          and added some of the forward declarations and typedefs
          needed to make the Interface Repository compatible with
          CORBA 2.4.

Tue Mar  6 16:11:53 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp (read_messages): Added a new method
          read_messages () that would avoid code duplication.

Tue Mar  6 13:44:38 2001  Darrell Brunsch <brunsch@uci.edu>

        * examples/Quoter/run_test.pl:

          Updated to new PerlACE::Run_Test.  Missed this one since
          it didn't use ACEutils.

        * examples/Quoter/testall.pl: (removed)

          Out of date and not used anymore.

        * examples/Quoter/README:

          Removed some out of date comments.

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp:
        * examples/Quoter/Factory_Finder.cpp:
        * examples/Quoter/Generic_Factory.cpp:
        * examples/Quoter/client.cpp:
        * examples/Quoter/server.cpp:
        * orbsvcs/tests/ImplRepo/airplane_i.cpp:
        * orbsvcs/tests/ImplRepo/airplane_server.cpp:
        * orbsvcs/tests/ImplRepo/nestea_i.cpp:
        * orbsvcs/tests/ImplRepo/nestea_server.cpp:

          Fixed problems detected by fuzz.

Tue Mar  6 15:54:39 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.h:
        * tao/GIOP_Message_Handler.cpp:
        * tao/GIOP_Message_Base.cpp: Did some cosmetic changes to the code.

Tue Mar  6 13:06:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/AMI_Timeouts/client.cpp:
        * tests/AMI_Timeouts/server.cpp:
        * tests/AMI_Timeouts/timeout_client.cpp:
        * tests/AMI_Timeouts/timeout_i.cpp:

          Cleaned up the code and pretty-printed the output of the
          debug messages.

Tue Mar  6 11:51:18 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Wait_On_Leader_Follower.cpp:
          Do not enter the leader loop if the reply has been received
          already.  This eliminates a subtle race condition reported by
          Derek Horton <trohed@yahoo.com>.

Tue Mar  6 13:41:05 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp (read_parse_message):
        * tao/GIOP_Message_Base.cpp: Made some aesthetic changes and fixed
          some comments.

Tue Mar  6 13:25:42 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/PortableServer/ImplRepoC.cpp:

          Fixed some Any extraction operators overlooked in a
          previous hand-crafting.

Tue Mar  6 11:49:37 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp (is_message_ready):
        * tao/GIOP_Message_Base.cpp: Made a pass through the code and
          fixed a few ACE_DEBUG statements and HEXDUMP statements. Thanks
          to Johnny.Willemsen <jwillemsen@remedy.nl> for pointing these
          out.

Tue Mar 06 10:58:15 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/tests/client.dsp:
        * examples/PluggableUDP/tests/server.dsp:
          Removed unnecessary libraries in Windows release builds.

Tue Mar 06 08:29:28 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Collocation/Makefile.stub:
        * tests/Collocation/Makefile.impl:
          Define ACE_SHLIBS, this is the macro used to link shared
          libraries.  Without the proper list of libraries the Tru64/CXX
          compiler gives warnings, and other compilers could give out
          errors.

        * tests/AMI_Timeouts/timeout_i.cpp:
        * tests/AMI_Timeouts/timeout_client.cpp:
          Removed extra ';' at the end of function definitions.

Tue Mar  6 07:15:06 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/MT_Client/simple-client.cpp: Fixed a typo that was giving
          annoying warnings in Debian boxes.

Tue Mar  6 06:17:46 2001  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

        * tests/Param_Test/client.cpp (run_sii_test): Make sure to
          call this->test_object_->print_values () before running each
          test.  Thanks to Johnny Willemsen <jwillemsen@mego.nl> for
          reporting this.

Mon Mar  5 20:11:49 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/examples/Security/Send_File/server.cpp (main):
        * orbsvcs/examples/Security/SecurityLevel1/server.cpp (main):

          More missing ACE_TRY_ENV parameter fixes.

Mon Mar  5 19:32:56 2001  Ossama Othman  <ossama@uci.edu>

        * TAO_IDL/be/be_visitor_array/any_op_cs.cpp (visit_array):
        * TAO_IDL/be/be_visitor_enum/any_op_cs.cpp (visit_enum):
        * TAO_IDL/be/be_visitor_exception/any_op_cs.cpp (visit_exception):
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp (visit_interface):
        * TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp (visit_sequence):
        * TAO_IDL/be/be_visitor_structure/any_op_cs.cpp (visit_structure):
        * TAO_IDL/be/be_visitor_union/any_op_cs.cpp (visit_union):

          Fixed generated code that it does an ACE_TRY_CHECK before
          checking the return value of the CORBA::TypeCode::equivalent()
          call.  This fixes a subtle problem where the return code could
          be potentially meaningless due to the fact that an emulated
          exception was thrown.  This change also makes the code match the
          semantics of native exceptions more closely.

Mon Mar  5 19:14:03 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Callback/client.cpp:
        * performance-tests/Callback/server.cpp:
        * performance-tests/Latency/ami-latency-client.cpp:
        * performance-tests/Latency/ami-throughput-client.cpp:
        * performance-tests/Latency/server.cpp:
        * performance-tests/Latency/st_server.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/client.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/server.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/server.cpp:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/server.cpp:
        * tests/OctetSeq/server.cpp:
        * tests/Param_Test/server.cpp:
        * tests/Timeout/server.cpp:
        * utils/nslist/nslist.cpp:
          More ACE_TRY_ENV / resolve_initial_references() fixes.

Mon Mar  5 19:01:15 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Dynamic.pidl:
        * tao/Messaging.pidl:
        * tao/Pollable.pidl:

          Removed backslashes from the comments in these files.  Some
          preprocessors complain about "multi-line" comments.

Mon Mar  5 18:46:42 2001  Fuzz Master D <brunsch@uci.edu>

        * examples/Simple/time-date/run_test.pl:

          Server hard codes ior file so my localfile thing will not
          work.

        * orbsvcs/tests/Property/run_test.pl:

          Forgot some \n's in prints.

Mon Mar  5 18:40:58 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/Event/lib/Driver.cpp:
          Replaced ACE_TRY_CHECK with ACE_CHECK

        * tests/AMI/client.cpp:
        * tests/AMI/server.cpp:
          Fixed misuse of ACE_CHECK_RETURN

Mon Mar  5 14:21:15 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/Strategies/server.cpp :
          Added ACE_TRY_ENV parameter to resolve_initial_references call.

Mon Mar 05 20:29:00 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tests/Collocation/Coll_Tester.cpp (init): Adding missing
          ACE_TRY_ENV to resolve_initial_reference().  Thanks to Ossama
          for pointing this out.

Mon Mar  5 19:54:25 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple/ftp.h:
        * orbsvcs/tests/AVStreams/Simple/ftp.cpp:

          Removed unused client callbacks. Replaced char* with ACE_CString.

Mon Mar  5 14:21:15 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/Strategies/server.cpp :
          Added ACE_TRY_ENV parameter to resolve_initial_references call.

Mon Mar  5 14:21:05 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/Container_i.cpp:
        * orbsvcs/IFR_Service/ExceptionDef_i.cpp:
        * orbsvcs/IFR_Service/InterfaceDef_i.cpp:
        * orbsvcs/IFR_Service/OperationDef_i.cpp:
        * orbsvcs/IFR_Service/StructDef_i.cpp:
        * orbsvcs/IFR_Service/UnionDef_i.cpp:

          Added .in () to instances where the 'type_def'
          member of the struct StructMember, UnionMember, or
          ParameterDescription is passed as an argument.
          The type of that member in each case is
          IDLType_var.

Mon Mar  5 11:37:18 2001  Fuzz Master D <brunsch@uci.edu>

        * tests/Leader_Followers/run_test_mt.pl: (added)
        * tests/Param_Test/run_test_dii.pl:

          Fixed to work on both Windows and Linux (and Solaris
          should follow Linux).

Mon Mar  5 11:24:05 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/Event_Service/Event_Service.cpp:
        * orbsvcs/tests/EC_Basic/EC_Basic.cpp:
        * orbsvcs/tests/EC_Custom_Marshal/ECM_Consumer.cpp:
        * orbsvcs/tests/EC_Custom_Marshal/ECM_Supplier.cpp:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.cpp:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer_Driver.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Supplier_Driver.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Throughput.cpp:
        * orbsvcs/tests/Event/Basic/Observer.cpp:
        * orbsvcs/tests/Event/Performance/Latency.cpp:
        * orbsvcs/tests/Event/Performance/Latency_Server.cpp:
        * orbsvcs/tests/Event/lib/Driver.cpp:
        * orbsvcs/tests/Event_Latency/Event_Latency.cpp:
          Fixed more missing ACE_TRY_ENV in resolve_initial_references()

Mon Mar  5 12:55:06 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/TAO_DIOP_Static.dsp:
          Removed bogus files from project file list.

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:
          Fixed some comments that were causing warnings with the Windows
          builds.

Mon Mar  5 12:24:05 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/IDL_Test/main.cpp:

          Added ACE_TRY_ENV and check to the call to
          resolve_initial_references ("RootPOA").

Mon Mar  5 07:35:35 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile:
          Fixed library name.

Mon Mar  5 08:03:03 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/Makefile.bor
        * tests/Native_Exceptions/*.bor

          Added BCB specific makefiles for this test

Mon Mar  5 07:59:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/AMI/client.cpp:
        * tests/AMI/simple_client.cpp:
        * tests/AMI/server.cpp:
        * examples/mfc/client.cpp:
        * examples/mfc/server.cpp:

          Fixed exception handling, especially missing ACE_TRY_ENVs for
          CORBA::ORB::resolve_initial_references (). Thanks to Ossama for
          pointing this out.

        * examples/PluggableUDP/Diop/README:

          Added a small paragraph about the limitations of the current
          DIOP implemenation.
          Also, added a disclaimer.

Mon Mar  5 04:42:52 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Simple/ftp.h:
        * orbsvcs/tests/AVStreams/Simple/ftp.cpp:
        * orbsvcs/tests/AVStreams/Simple/server.h:
        * orbsvcs/tests/AVStreams/Simple/server.cpp:
        * orbsvcs/tests/AVStreams/Simple/README:
        * orbsvcs/tests/AVStreams/Simple/run_test.pl:

          Added a new test to the AVStreams tests in order to demonstrate
          the use of AVStreams Service to pace data at a specified frame rate.

Mon Mar  5 01:26:42 2001  Fuzz Master D <brunsch@uci.edu>

        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/run_test.pl:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/run_test2.pl:
        * orbsvcs/examples/CosEC/Simple/run_test.pl:
        * orbsvcs/examples/RtEC/Simple/run_test.pl:

          The last of the PerlACE::Run_Test changes.  Everything else
          that still uses ACEutils does so because they need more help
          than I can provide right now (mostly using redirection in
          the scripts, which does not work on Windows in either the
          new or old Process module).

          But anyway, I'll still use it to signify the close to my career
          as the the group Perl junkie.  Somewhat fitting that what
          started off with what I believe was a run_test script for
          IDL_Cubit and its associated Process module ended with
          changing most every run_test for a new PerlACE::Process module.

          Let's have a moment of silence for remembrance.







          I think that's long enough.  Seriously, the main reason I
          wanted a moment of silence is so I can clearly hear the
          anguished cries from all those who find out that they get to
          maintain my perl scripts once I leave.  ;-)

Mon Mar 05 09:10:27 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * examples/Makefile.bor:
        * examples/PluggableUDP/Makefile.bor:
        * examples/PluggableUDP/tests/Makefile.bor:
        * examples/PluggableUDP/Diop/Makefile.bor:

          Included Diop in the BCB build and make tests makefile empty
          because for tests there is no correct client and server makefile yet

Sun Mar 04 23:00:59 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ORB.h (run):

          Updated comments for the ORB::run() method.  This method, as
          implemented by TAO, no longer returns an "int" error status (see
          Carlos' ChangeLog entry from Feb 13).  The CORBA spec calls for
          a "void" return type.

Sun Mar 04 21:43:51 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/CosEvent_Service/Makefile:
        * orbsvcs/Dump_Schedule/Makefile:
        * orbsvcs/Event_Service/Makefile:
        * orbsvcs/LifeCycle_Service/Makefile:
        * orbsvcs/Logging_Service/Makefile:
        * orbsvcs/Notify_Service/Makefile:
        * orbsvcs/Scheduling_Service/Makefile:
        * orbsvcs/tests/AVStreams/benchmark/Makefile:
        * orbsvcs/tests/CosEvent/Basic/Makefile:
        * orbsvcs/tests/EC_Basic/Makefile:
        * orbsvcs/tests/EC_Custom_Marshal/Makefile:
        * orbsvcs/tests/EC_Multiple/Makefile:
        * orbsvcs/tests/EC_Throughput/Makefile:
        * orbsvcs/tests/Event/Basic/Makefile:
        * orbsvcs/tests/Event/Performance/Makefile:
        * orbsvcs/tests/Event_Latency/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGR/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile:
        * orbsvcs/tests/Sched/Makefile:
        * orbsvcs/tests/Trading/Makefile:
        * orbsvcs/tests/ior_corbaname/Makefile:
          The libraries added to support QNX were not in the right order,
          it should be fixed now.

        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager.i:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Processor.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Processor.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.h:
          Several minor cosmetic fixes.

Sun Mar 04 20:15:33 2001  Ossama Othman  <ossama@uci.edu>

        * examples/Content_Server/SMI_Iterator/client.cpp (retrieve_data):
        * examples/Content_Server/AMI_Iterator/Iterator_Handler.cpp
          (initialize_content_iterator):
        * examples/Content_Server/AMI_Observer/Callback_i.cpp
          (Callback_i):

          Windows doesn't like the POSIX.1 mode constants I was using in
          these files.  Use the ACE_DEFAULT_FILE_PERMS macro instead to
          work-around Windows-specific stuff like this.

          Fixed error messages so that they properly display filename with
          which the error was associated.

Sun Mar  4 21:39:03 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/corbafwd.h:
          Commented in TAO_TAG_UDP_PROFILE now that DIOP is being
          built regularly.

        * examples/PluggableUDP/DIOP/DIOP_Connector.cpp:
        * examples/PluggableUDP/DIOP/DIOP_Transport.cpp:
          Fixed compile warnings under Linux.

Sun Mar  4 19:12:59 2001  Darrell Brunsch <brunsch@uci.edu>

        * examples/Callback_Quoter/Consumer.dsp:
        * examples/Callback_Quoter/Notifier.dsp:
        * examples/Callback_Quoter/Supplier.dsp:
        * examples/Load_Balancing/client.dsp:
        * examples/Load_Balancing/server.dsp:
        * examples/Load_Balancing/service.dsp:
        * examples/Persistent_Grid/Persistent_Grid_Client_Files.dsp:
        * examples/Persistent_Grid/Persistent_Grid_Second_Client_Files.dsp:
        * examples/Persistent_Grid/Persistent_Grid_Server_Files.dsp:
        * orbsvcs/tests/EC_Basic/EC_Basic.dsp:
        * orbsvcs/tests/EC_Custom_Marshal/ECCM_Consumer.dsp:
        * orbsvcs/tests/EC_Custom_Marshal/ECCM_Supplier.dsp:
        * orbsvcs/tests/Interoperable_Naming/client.dsp:
        * orbsvcs/tests/LoadBalancing/client.dsp:
        * orbsvcs/tests/LoadBalancing/server.dsp:
        * orbsvcs/tests/Simple_Naming/client.dsp:
        * orbsvcs/tests/Trading/Colocated_Test.dsp:
        * orbsvcs/tests/Trading/Export_Test.dsp:
        * orbsvcs/tests/Trading/Import_Test.dsp:
        * orbsvcs/tests/Trading/TradingLib.dsp:
        * tests/AMI/AMI_Test_Client.dsp:
        * tests/AMI/AMI_Test_Server.dsp:
        * tests/AMI/AMI_Test_Simple_Client.dsp:
        * tests/AMI_Timeouts/client.dsp:
        * tests/AMI_Timeouts/server.dsp:
        * tests/DynAny_Test/basic_test.dsp:
        * tests/Multiple/Client.dsp:
        * tests/Multiple/Server.dsp:
        * tests/Native_Exceptions/client.dsp:
        * tests/ORB_destroy/ORB_destroy.dsp:
        * tests/Native_Exceptions/server.dsp:
        * tests/Object_Loader/Test_DLL.dsp:
        * tests/Object_Loader/driver.dsp:
        * tests/Portable_Interceptors/Benchmark/client.dsp:
        * tests/Portable_Interceptors/Benchmark/server.dsp:
        * tests/Smart_Proxies/client.dsp:
        * tests/Smart_Proxies/server.dsp:
        * tests/Timeout/client.dsp:
        * tests/Timeout/server.dsp:

          Fixed problems with outputting the release executables into
          the wrong directory.

        * tests/CDR/alignment.dsp: (added)
        * tests/CDR/allocator.dsp: (added)
        * tests/CDR/CDR.dsw:

          Added a couple of missing projects.

        * tests/Leader_Followers/run_test.pl:
        * tests/Leader_Followers/run_test_mt.pl:

          Split the actions of this test into 2 run_tests, so it
          doesn't hit the sandbox timeout in the nightly builds.

        * examples/Buffered_AMI/run_test.pl:
        * examples/Buffered_Oneways/run_test.pl:
        * examples/Callback_Quoter/run_test.pl:
        * examples/Load_Balancing/run_test.pl:
        * examples/Logging/run_test.pl:
        * examples/OBV/Typed_Events/run_test.pl:
        * examples/PluggableUDP/tests/run_test.pl:
        * examples/POA/Forwarding/run_test.pl:
        * examples/Persistent_Grid/run_test.pl:
        * examples/Simple/bank/run_test.pl:
        * examples/Simple/echo/run_test.pl:
        * examples/Simple/grid/run_test.pl:
        * examples/Simple/time/run_test.pl:
        * examples/Simple/time-date/run_test.pl:
        * orbsvcs/tests/AVStreams/Full_Profile/run_test.pl:
        * orbsvcs/tests/AVStreams/Latency/run_test.pl:
        * orbsvcs/tests/AVStreams/Multicast/run_test.pl:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/run_test.pl:
        * orbsvcs/tests/AVStreams/Pluggable/run_test.pl:
        * orbsvcs/tests/AVStreams/benchmark/run_test.pl:
        * orbsvcs/tests/CosEvent/Basic/run_test.pl:
        * orbsvcs/tests/EC_Basic/run_test.pl:
        * orbsvcs/tests/EC_Custom_Marshal/run_test.pl:
        * orbsvcs/tests/EC_Mcast/run_test.pl:
        * orbsvcs/tests/EC_Multiple/run_test.pl:
        * orbsvcs/tests/EC_Throughput/run_test.pl:
        * orbsvcs/tests/Event/Basic/exhaustive_test.pl:
        * orbsvcs/tests/Event/Basic/run_test.pl:
        * orbsvcs/tests/Event/Performance/run_test.pl:
        * orbsvcs/tests/Event_Latency/run_test.pl:
        * orbsvcs/tests/ImplRepo/run_test.pl:
        * orbsvcs/tests/ImplRepo/NameService/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Application_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/run_test.pl:
        * orbsvcs/tests/Interoperable_Naming/run_test.pl:
        * orbsvcs/tests/Property/run_test.pl:
        * orbsvcs/tests/Simple_Naming/process-m-output.pl:
        * orbsvcs/tests/Simple_Naming/run_test.pl:
        * orbsvcs/tests/Time/run_test.pl:
        * orbsvcs/tests/Trading/run_test.pl:
        * tests/AMI/run_test.pl:
        * tests/AMI_Timeouts/run_test.pl:
        * tests/BiDirectional/run_test.pl:
        * tests/BiDirectional_NestedUpcall/run_test.pl:
        * tests/CDR/run_test.pl:
        * tests/Codec/run_test.pl:
        * tests/Connection_Purging/run_test.pl:
        * tests/DSI_Gateway/run_test.pl:
        * tests/DynAny_Test/run_test.pl:
        * tests/Endpoint_Per_Priority/run_test.pl:
        * tests/Exposed_Policies/run_test.pl:
        * tests/Faults/run_test.pl:
        * tests/Forwarding/run_test.pl:
        * tests/IDL_Test/run_test.pl:
        * tests/IORManipulation/run_test.pl:
        * tests/InterOp-Naming/run_test.pl:
        * tests/Leader_Followers/run_test.pl:
        * tests/LongUpcalls/run_test.pl:
        * tests/LongWrites/run_test.pl:
        * tests/MT_Client/run_test.pl:
        * tests/MT_Server/run_test.pl:
        * tests/Multiple/run_test.pl:
        * tests/Multiple_Inheritance/run_test.pl:
        * tests/Native_Exceptions/run_test.pl:
        * tests/NestedUpcall/MT_Client_Test/run_test.pl:
        * tests/NestedUpcall/Simple/run_test.pl:
        * tests/NestedUpcall/Triangle_Test/run_test.pl:
        * tests/Nested_Event_Loop/run_test.pl:
        * tests/ORB_destroy/run_test.pl:
        * tests/ORB_init/run_test.pl:
        * tests/Object_Loader/run_test.pl:
        * tests/OctetSeq/run_test.pl:
        * tests/POA/Deactivation/run_test.pl:
        * tests/POA/Destruction/run_test.pl:
        * tests/POA/Identity/run_test.pl:
        * tests/POA/Non_Servant_Upcalls/run_test.pl:
        * tests/POA/wait_for_completion/run_test.pl:
        * tests/Param_Test/run_test.pl:
        * tests/Param_Test/run_test_dii.pl:
        * tests/Policies/run_test.pl:
        * tests/Portable_Interceptors/Benchmark/run_test.pl:
        * tests/Portable_Interceptors/Dynamic/run_test.pl:
        * tests/Portable_Interceptors/ForwardRequest/run_test.pl:
        * tests/Portable_Interceptors/IORInterceptor/run_test.pl:
        * tests/Portable_Interceptors/Service_Context_Manipulation/run_test.pl:
        * tests/RTCORBA/Banded_Connections/run_test.pl:
        * tests/RTCORBA/Client_Propagated/run_test.pl:
        * tests/RTCORBA/Client_Protocol/run_test.pl:
        * tests/RTCORBA/Explicit_Binding/run_test.pl:
        * tests/RTCORBA/MT_Client_Protocol_Priority/process-output.pl:
        * tests/RTCORBA/MT_Client_Protocol_Priority/run_test.pl:
        * tests/RTCORBA/Private_Connection/run_test.pl:
        * tests/RTCORBA/RTMutex/run_test.pl:
        * tests/RTCORBA/Server_Declared/run_test.pl:
        * tests/RTCORBA/Server_Protocol/run_test.pl:
        * tests/Smart_Proxies/run_test.pl:
        * tests/Smart_Proxies/Benchmark/run_test.pl:
        * tests/Smart_Proxies/On_Demand/run_test.pl:
        * tests/Smart_Proxies/Policy/run_test.pl:
        * tests/Timed_Buffered_Oneways/run_test.pl:
        * tests/Timeout/run_test.pl:
        * tests/Xt_Stopwatch/run_test.pl:
        * tests/ior_corbaloc/run_test.pl:

          Updated to use PerlACE::Run_Test;

Sun Mar 04 16:01:50 2001  Ossama Othman  <ossama@uci.edu>

        * tao/RT_Current.h:
        * tao/RT_Mutex.h:
        * tao/RT_ORB.h:
        * tao/RT_Policy_i.h:

          Removed inclusion of `tao/RTCORBAS.h'.  The RTCORBA module only
          defines local interfaces, so there is no need to include this
          header.  Included `tao/RTCORBAC.h' instead.  This reduces header
          dependencies.

        * tao/RTCORBAC.cpp:
        * tao/TAOC.cpp:
        * tao/TimeBaseC.cpp:

          We should never include a skeleton header for the same IDL in
          the corresponding stub sources.  Removed those includes
          (e.g. removed '#include "tao/TAOS.h"' from TAOC.cpp).

        * tao/Makefile:
        * tao/Makefile.bor:
        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:

          Do not compile the following empty skeleton files:

            CONV_FRAMES
            GIOPS
            IOPS
            PollableS
            RTCORBAS
            TAOS

Sun Mar 04 13:55:28 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/AMI/FL_Callback/peer.cpp:
        * examples/AMI/FL_Callback/progress.cpp:
        * tests/DSI_Gateway/gateway.cpp:
        * tests/DSI_Gateway/server.cpp:
        * tests/Endpoint_Per_Priority/client.cpp:
        * tests/Endpoint_Per_Priority/server.cpp:
        * tests/FL_Cube/server.cpp:
        * tests/Faults/client.cpp:
        * tests/Faults/middle.cpp:
        * tests/Faults/server.cpp:
        * tests/LongUpcalls/ami_client.cpp:
        * tests/LongUpcalls/ami_server.cpp:
        * tests/LongUpcalls/blocking_client.cpp:
        * tests/LongUpcalls/blocking_server.cpp:
        * tests/LongWrites/client.cpp:
        * tests/LongWrites/server.cpp:
        * tests/MT_Client/server.cpp:
        * tests/MT_Server/server.cpp:
          More calls to resolve_initial_references() with a missing
          ACE_TRY_ENV

Sun Mar 04 13:14:39 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PP_Memory_Management.txt:
          The memory management rules for TAO's pluggable protocol
          framework were poorly documented.  This file should capture
          that, currently it describes a proposal more than the current
          behavior.

Sun Mar  4 13:29:09 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RTCORBA.pidl:
        * tao/IOP.pidl:
        * tao/RTPOA.pidl:
          Updated to CORBA v2.4.2 (February 2001) versions.  Only comments
          were changed in IOP.pidl and RTPOA.pidl.  In RTCORBA.pidl, all
          of the PolicyTypes were changed from TAO specific numbers to OMG
          assigned numbers.  Also, the create_tcp_protocol_properties
          factor method was added to RTORB, so that users can now
          instantiate instances of TCPProtocolProperties.

        * tao/RT_ORB.{h,cpp} (create_tcp_protocol_properties):
          Added implementation to return a new TCPProtocolProperties
          instance.

        * tao/RTCORBAC.{cpp,h,i}:
        * tao/RTCORBAS.{cpp,h,i}:
        * tao/RTCORBAS_T.{cpp,h,i}:
        * tao/diffs/RTCORBAC.cpp.diff:
        * tao/diffs/RTCORBAC.h.diff:
        * tao/diffs/RTCORBAS.cpp.diff:
        * tao/diffs/RTCORBAS.h.diff:
          Updated all the files generated from RTCORBA.pidl.

Sun Mar 04 08:10:04 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * Changed the following files to correctly use the
          CORBA::Environment parameter when calling
          <ORB::resolve_initial_references>.  Thanks to Ossama for
          pointing this out.

          Under examples/POA:

          - Adapter_Activator/server.cpp
          - DSI/Database_i.cpp
          - DSI/server.cpp
          - Default_Servant/File_i.cpp
          - Default_Servant/server.cpp
          - Explicit_Activation/server.cpp
          - FindPOA/FindPOA.cpp
          - Forwarding/server.cpp
          - Loader/Server_Manager.cpp
          - NewPOA/NewPOA.cpp
          - On_Demand_Activation/server.cpp
          - On_Demand_Loading/Server_Manager.cpp
          - Reference_Counted_Servant/server.cpp
          - RootPOA/RootPOA.cpp
          - TIE/server.cpp

          Under tests/POA:

          - Deactivation/Deactivation.cpp
          - Destruction/Destruction.cpp
          - Identity/Identity.cpp
          - Non_Servant_Upcalls/Non_Servant_Upcalls.cpp
          - wait_for_completion/wait_for_completion.cpp

Sun Mar 04 10:11:07 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Smart_Proxies/Policy/server.cpp (shutdown):

          Added missing ACE_TRY_ENV parameter to the ORB::shutdown() call.

          (main):

          Fixed ORB::run() call so that it uses the standard calling
          convention (void return).

Sun Mar 04 10:02:18 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Smart_Proxies/Benchmark/server.cpp (box_prices, tickets):

          Fixed "unused argument" warnings.

          (shutdown):

          Added missing ACE_TRY_ENV parameter to the ORB::shutdown() call.

          (main):

          Fixed ORB::run() call so that it uses the standard calling
          convention (void return).

Sun Mar 04 09:44:18 2001  Ossama Othman  <ossama@uci.edu>

        * tests/BiDirectional/client.cpp (main):
        * tests/BiDirectional/server.cpp (main):
        * tests/BiDirectional_NestedUpcall/client.cpp (main):
        * tests/BiDirectional_NestedUpcall/server.cpp (main):
        * tests/MProfile/server.cpp (main):
        * tests/MProfile_Forwarding/Manager.cpp (init):
        * tests/MProfile_Forwarding/server.cpp (main):
        * tests/QtTests/server.cpp (main):
        * tests/Smart_Proxies/Collocation/Coll_Tester.cpp (init):
        * tests/Xt_Stopwatch/server.cpp (main):

          Added missing ACE_TRY_ENV parameter to
          resolve_initial_references() call, and the corresponding
          ACE_CHECK/ACE_CHECK_RETURN/ACE_TRY_CHECK macro.

        * tests/Smart_Proxies/Benchmark/server.cpp (main):
        * tests/Smart_Proxies/Policy/server.cpp (main):

          Added missing ACE_TRY_CHECK after resolve_initial_references()
          call.

Sun Mar 04 09:12:40 2001  Ossama Othman  <ossama@uci.edu>

        * tao/IFR_Client/InterfaceC.cpp:

          Moved inclusion of the `tao/PortableInterceptor.h' header
          outside of the "TAO_HAS_INTERCEPTORS" protected block.  This
          header must remain visible since it contains the
          "TAO_INTERCEPTOR" macros.  Note that this won't cause problems
          when portable interceptor support is disabled since those macros
          are always visible, too.

Sun Mar  4 11:06:25 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/README:
        * examples/PluggableUDP/DIOP/README:
          Added infomation about DIOP and PluggableUDP directories.

        * examples/PluggableUDP/tests/README:
          Moved some information about the implementation of DIOP into the
          ../DIOP/README file.

Sun Mar  4 10:03:59 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/tests/server.cpp:
        * examples/PluggableUDP/tests/client.cpp:
          Added missing ACE_TRY_ENV parameter to
          resolve_initial_references() per Ossama's request.

        * examples/PluggableUDP/tests/UDP_i.cpp:
          Fixed some compiler warnings under Linux.

Sat Mar 03 23:32:29 2001  Ossama Othman  <ossama@uci.edu>

        * tests/AMI_Timeouts/timeout_client.cpp (init):
        * tests/AMI_Timeouts/timeout_client.cpp (init, svc):

          Renamed "init()" method to "initialize()."  It conflicted with
          its base class "ACE_Task_Base::init()" method.

Sat Mar 03 22:56:20 2001  Ossama Othman  <ossama@uci.edu>

        * tests/AMI_Timeouts/client.cpp (main):
        * tests/AMI_Timeouts/timeout_client.cpp (svc, init):
        * tests/AMI_Timeouts/server.cpp (main):

          Fixed compile-time problems related to emulated exceptions.
          ACE_TRY_NEW_ENV declares a CORBA::Environment within a do-while
          loop scope, so that Environment is not available outside of the
          loop.  However, an ACE_CHECK_RETURN is done outside of the
          ACE_TRY_NEW_ENV block.  Use ACE_DECLARE_NEW_CORBA_ENV instead.

          Added missing ACE_TRY_ENV parameter to the
          resolve_initial_references() and shutdown() calls.

          Corrected spelling.  "Caught," not "Catched!"

        * tests/AMI_Timeouts/Makefile:

          Added missing dependencies.

Sat Mar  3 16:31:31 2001  Darrell Brunsch <brunsch@uci.edu>

        * docs/TAO-metrics.html:
        * docs/TAO-tutorials.html:
        * docs/components.html:
        * docs/events_tutorial.html:
        * docs/poa_migration.html:
        * docs/reactivator.html:
        * docs/releasenotes.html:
        * docs/releasenotes/OBV.html:
        * docs/tutorials/Quoter/index.html:
        * docs/tutorials/Quoter/On_Demand_Activation/index.html:
        * docs/tutorials/Quoter/Simple/Impl-Repo/index.html:
        * docs/tutorials/Quoter/Simple/ImprovedServer/index.html:
        * docs/tutorials/Quoter/Simple/Persistent/index.html:

          Changed references to
          http://www.cs.wustl.edu/~schmidt/ACE_wrappers/* to
          relative paths instead (Fixes fuzz errors).

        * tao/ORB_Core.i:
        * tao/Stub.i:
        * tao/default_resource.cpp:
        * tao/Strategies/advanced_resource.cpp:

          Fixed bad ACE_TRACE's.  (Fixes more fuzz errors)

Sat Mar  3 16:31:07 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * examples/PluggableUDP/DIOP/DIOP_Acceptor.{cpp,i,h}:
        * examples/PluggableUDP/DIOP/DIOP_Connection_Handler.{cpp,i,h}:
        * examples/PluggableUDP/DIOP/DIOP_Connector.{cpp,h}:
        * examples/PluggableUDP/DIOP/DIOP_Endpoint.{cpp,i,h}:
        * examples/PluggableUDP/DIOP/DIOP_Factory.{cpp,h}:
        * examples/PluggableUDP/DIOP/DIOP_Profile.{cpp,i,h}:
        * examples/PluggableUDP/DIOP/DIOP_Transport.{cpp,i,h}:
        * examples/PluggableUDP/DIOP/diop_export.h:
        * examples/PluggableUDP/DIOP/Makefile:
        * examples/PluggableUDP/DIOP/Makefile.bor:
        * examples/PluggableUDP/DIOP/TAO_DIOP.dsp:
        * examples/PluggableUDP/DIOP/TAO_DIOP.dsw:
        * examples/PluggableUDP/DIOP/TAO_DIOP_Static.dsp:
        * examples/PluggableUDP/tests/Makefile:
        * examples/PluggableUDP/tests/Makefile.bor:
        * examples/PluggableUDP/tests/README:
        * examples/PluggableUDP/tests/UDP.dsw:
        * examples/PluggableUDP/tests/UDP.idl:
        * examples/PluggableUDP/tests/UDP_Client_i.{cpp,h}:
        * examples/PluggableUDP/tests/UDP_i.{cpp,h}:
        * examples/PluggableUDP/tests/client.cpp:
        * examples/PluggableUDP/tests/client.dsp:
        * examples/PluggableUDP/tests/run_test.pl:
        * examples/PluggableUDP/tests/server.cpp:
        * examples/PluggableUDP/tests/server.dsp:
        * examples/PluggableUDP/tests/svc.conf:
          Added UDP pluggable protocol and unit tests as a TAO example.
          This code was contributed by Michael Kircher
          <Michael.Kircher@mchp.siemens.de> and John Mackenzie
          <John.Mackenzie.extern@icn.siemens.de> as a TAO 1.1a
          pluggable protocol.  The main changes from the original code
          include upgrading the pluggable protocol interfaces with the latest
          changes and  moving the code from TAO/tao to a separate library.

Sat Mar 03 15:28:34 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/Object_Adapter.cpp (open):

          Fixed broken memory management that I inadvertently introduced.
          This brings the code back to what it used to do before my
          change, but it uses a POA_Manager_var instead of an auto_ptr.
          Using the _var allows us to remove the auto_ptr template
          instantiation(s) for the POA_Manager.  We technically shouldn't
          be using auto_ptrs on reference counted objects anyway, even
          though in this case there was no harm in doing so.

        * tao/PortableServer/POA.cpp:

          Removed auto_ptr<TAO_POA> and auto_ptr<TAO_POA_Manager> template
          instantiations.  They are no longer needed, thus reducing the
          POA footprint slightly.

          (create_POA_i):

          Use a POA_var instead of an auto_ptr.  The same reasoning from
          above applies here as well, i.e., auto_ptrs should not be used on
          reference counted objects.

Sat Mar  3 13:12:00 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/Object_Adapter.cpp:
          Fixed minor typo in the creation of the RootPOA

Sat Mar 03 12:18:12 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Codec/client.cpp (verify_data):

          Cleaned up test output so that it is HTML friendly (i.e., no tab
          characters).  The output in our HTML build logs was slightly
          confusing.

        * tests/Codec/README:

          Updated expected test output.

Sat Mar 03 11:46:36 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/ForwardRequest/server.bor:

          Fixed typo in the rule that builds the ServerRequestInterceptor
          stub.  The test should once again build with Borland C++.

Sat Mar 03 11:14:57 2001  Ossama Othman  <ossama@uci.edu>

        * tao/corbafwd.h:

          Added the CORBA::_tc_{OctetSeq,StringSeq,WStringSeq} TypeCode
          declarations.  They were previously renamed to get around
          problems with compilers that lack support for namespaces.  The
          proper workaround is to actually put them in the CORBA namespace
          by using the forward declaration / typedef trick used in this
          file.  This also fixes a problem with these TypeCodes not being
          available due to the renaming.

        * tao/OctetSeqC.h:
        * tao/StringSeqC.h:

          Removed the _tc_CORBA_{OctetSeq,StringSeq,WStringSeq}
          declarations.  They were hacks to get around compilers that do
          not support namespaces.  The proper TypeCodes are now declared
          in the CORBA namespace in `corbafwd.h'.

        * tao/OctetSeqC.cpp:
        * tao/StringSeqC.cpp:

          Use the proper CORBA::_tc_{OctetSeq,StringSeq,WStringSeq}
          TypeCodes rather than broken renamed ones described above.  This
          addresses CORBA compliance and interoperability problems.

        * tao/diffs/OctetSeq.diff:
        * tao/diffs/StringSeq.diff:

          Regenerated these diffs to include the above changes.

Sat Mar  3 10:42:01 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Portable_Interceptors/ForwardRequest/Server_Request_Interceptor.cpp (forward_references):

          Fixed an exception specification.

Sat Mar 03 02:10:00 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableServer/ServerRequestInfo.cpp:

          Include "tao/PolicyC.h" to pull in declaration of
          CORBA::Policy::_nil().  This is particularly necessary for
          builds that disable compile-time support for CORBA Messaging
          since the Policy header doesn't get pulled in otherwise.

Sat Mar  3 00:16:46 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/ForwardRequest/Makefile:

          Updated dependencies.  Fixed one part of the build problems.

          (TAO_IDLFLAGS):

          Added missing IDL include path.  `ServerRequestInterceptor.idl'
          includes "tao/PortableInterceptor.pidl".  This is the other part
          of the build fix.

          (realclean):

          Added missing clean rules for the `ServerRequestInterceptor*'
          stubs and skeletons.

Fri Mar 02 23:54:41 2001  Ossama Othman  <ossama@uci.edu>

        * tao/OctetSeqC.cpp:
        * tao/StringSeqC.cpp:

          Use the TAO_NAMESPACE_{TYPE,DEFINE} preprocessor to macros
          correct compile-time errors on platforms that do not define the
          ACE_HAS_USING_KEYWORD.  Fixes a "multiple definition"
          compile-time error on those platforms.

        * tao/diffs/OctetSeq.diff:
        * tao/diffs/StringSeq.diff:

          Regenerated these diffs so that they include the above changes.

Fri Mar  2 20:28:27  Angelo Corsaro  <angelo@hermes.doc.wustl.edu>

        * rules.tao.GNU:
        * orbsvcs/CosEvent_Service/Makefile:
        * orbsvcs/Dump_Schedule/Makefile:
        * orbsvcs/Event_Service/Makefile:
        * orbsvcs/LifeCycle_Service/Makefile:
        * orbsvcs/Logging_Service/Makefile:
        * orbsvcs/Notify_Service/Makefile:
        * orbsvcs/Scheduling_Service/Makefile:
        * orbsvcs/tests/AVStreams/benchmark/Makefile:
        * orbsvcs/tests/CosEvent/Basic/Makefile:
        * orbsvcs/tests/EC_Basic/Makefile:
        * orbsvcs/tests/EC_Custom_Marshal/Makefile:
        * orbsvcs/tests/EC_Multiple/Makefile:
        * orbsvcs/tests/EC_Throughput/Makefile:
        * orbsvcs/tests/Event/Basic/Makefile:
        * orbsvcs/tests/Event/Performance/Makefile:
        * orbsvcs/tests/Event_Latency/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGR/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile:
        * orbsvcs/tests/Sched/Makefile:
        * orbsvcs/tests/Trading/Makefile:
        * orbsvcs/tests/ior_corbaname/Makefile:

          Added the new macros:
              - TAO_DYNAMIC_LIBS
              - TAO_COS_NOTIFICATION_LIBS
              - TAO_RT_SCHED_LIBS
              - TAO_FAULT_TOLERANCE_LIBS
              - TAO_COS_TRADING_LIBS

          this macros expand to  multiple libraries on QNX RTP,
          and this enable to work around a problem that is present
          currently in the QNX linker. For all othe platform these
          macro expand to the only library associated to the CORBA
          service. With this work aroun all the orbsvcs  and almost
          all the orbsvcs test build.

Fri Mar  2 16:16:45 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Object.cpp (operator>>):

          Added "ERROR" to the error output so that our automated test
          suite will pick up the error message.  Previously it was not
          detected.  Clarified the error message a bit, as well.

Fri Mar 02 15:39:28 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/orbconf.h: Since MEM_Stream is not supported if position
          independent pointers are not, we need to disable SHMIOP in that
          case.

Fri Mar 02 15:20:32 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * tests/AMI_Timeouts/timout_client.cpp:
          Fixed a missing ".in ()" on a var type.

Fri Mar  2 11:46:40 2001  Ossama Othman  <ossama@uci.edu>

        * tao/CodecFactory.cpp (create_codec):

          Fixed a "statement is unreachable" warning.

        * tao/PortableInterceptorC.h (sync_scope):

          Hide the ClientRequestInfo::sync_scope() method declaration if
          CORBA Messaging support isn't enabled.

Fri Mar  2 11:37:43 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableInterceptor.cpp:

          Moved code within the "TAO_HAS_INTERCEPTORS" block.  Fixes a
          compile-time error on platforms with request interceptors
          disabled.

Fri Mar 02 11:57:03 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/Connection_Handler.cpp (set_socket_option):

           Fixed mispelling in ACE_UNUSED_ARG, that was breaking
           QNX build.

Fri Mar 02 09:32:33 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/ForwardRequest/Server_Request_Interceptor.cpp (~Server_Request_Interceptor, destroy):

          Moved release of the forward object references from the
          destructor to the destroy() method.  There was a strange problem
          with interdependent object life cycles.  The forward object
          references wouldn't be released unless the server request
          interceptor was destroyed (destructor called), and the
          interceptor wouldn't be destroyed unless the object references
          were released!  I'll need to examine this issue further.  In the
          meantime, the ServerRequestInterceptor::destroy() change gets
          around the problem nicely, and fixes the memory leaks.

        * tests/Portable_Interceptors/ForwardRequest/Server_ORBInitializer.cpp
          (post_init):

          Use ACE_TRY_ENV instead of TAO_ENV_ARG_PARAMETER.  There is no
          reason to use the latter when calling ORB supplied methods.

        * tests/Portable_Interceptors/ForwardRequest/test_i.cpp:

          Removed debugging message from the destructor.

Fri Mar 02 08:29:53 2001  Ossama Othman  <ossama@uci.edu>

        * docs/index.html:
        * docs/minimumTAO.html:
        * docs/pluggable_protocols/index.html:
        * docs/releasenotes/index.html:

          Fixed references to Doug's web site.  Just link to the local
          files.  There is no need to go remote.  Thanks to Darrell's
          "Fuzz" script for picking these up.

Fri Mar 02 08:13:34 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/ForwardRequest/Makefile
          (TAO_IDLFLAGS):

          Define the "CORBA3" preprocessor macro to make sure that the
          "local" keyword is enabled in the `tao/PortableInterceptor.pidl'
          file included by `ServerRequestInterceptor.idl'.

Fri Mar 02 07:40:28 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/ForwardRequest/ServerRequestInterceptor.idl:

          Added this missing file.  I neglected to commit it with my
          previous set of changes for this test.

        * tests/Portable_Interceptors/ForwardRequest/Makefile:
        * tests/Portable_Interceptors/ForwardRequest/server.bor:

          Added missing `ServerRequestInterceptor.idl' related rules to
          these Makefiles.

        * tests/Portable_Interceptors/ForwardRequest/server.dsp:

          Added missing header files to the header file list.

Fri Mar 02 07:25:50 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.cpp (destroy_interceptors):

          Fixed a compile-time warning that occured on native exception
          builds.

Fri Mar  02 02:18:32 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * tests/AMI_Timeouts/timeout_i.cpp:
        * tests/AMI_Timeouts/server.cpp:
        * tests/AMI_Timeouts/client.cpp:
          Fixed exception handling code.

Fri Mar  2 02:15:32 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * tao/Connection_Handler.cpp:
          Fixed a wrong "#elsif".

Fri Mar  2 01:32:32 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/Connection_Handler.cpp (set_socket_option):
          Added ACE_UNUSED_ARG to avoid warning on those platform
          that lack SOCK_BUF_SIZE.

Fri Mar  2 07:51:04 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/makefile.bor:
        * tests/Forwarding/*.bor:

          Added BCB specific makefiles for this TAO test

Thu Mar  1 18:24:32 2001  Darrell Brunsch <brunsch@uci.edu>

        * examples/POA/Adapter_Activator/server.dsp:
        * examples/POA/DSI/client.dsp:
        * examples/POA/DSI/server.dsp:
        * examples/POA/Default_Servant/client.dsp:
        * examples/POA/Default_Servant/server.dsp:
        * examples/POA/FindPOA/FindPOA.dsp:
        * examples/POA/Forwarding/client.dsp:
        * examples/POA/Forwarding/server.dsp:
        * examples/POA/Generic_Servant/client.dsp:
        * examples/POA/NewPOA/NewPOA.dsp:
        * examples/POA/On_Demand_Activation/server.dsp:
        * examples/POA/Reference_Counted_Servant/server.dsp:
        * examples/POA/RootPOA/RootPOA.dsp:
        * examples/POA/TIE/client.dsp:
        * examples/POA/TIE/server.dsp:

          Release executables go into Release subdirectory.

        * examples/POA/Adapter_Activator/run_test.pl:
        * examples/POA/DSI/run_test.pl:
        * examples/POA/Default_Servant/run_test.pl:
        * examples/POA/Explicit_Activation/run_test.pl:
        * examples/POA/FindPOA/run_test.pl:
        * examples/POA/Forwarding/run_test.pl:
        * examples/POA/Loader/run_test.pl:
        * examples/POA/NewPOA/run_test.pl:
        * examples/POA/On_Demand_Activation/run_test.pl:
        * examples/POA/On_Demand_Loading/run_test.pl:
        * examples/POA/Reference_Counted_Servant/run_test.pl:
        * examples/POA/RootPOA/run_test.pl:
        * examples/POA/TIE/run_test.pl:

          More scripts using PerlACE::Run_Test.  Yay!

Thu Mar  1 18:51:45 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:

          Disabled generation of _var and _out classes for
          anonymous sequences and arrays (those not declared in an
          IDL file via a typedef), as required by the spec.
          This closes [BUGID:677].

Thu Mar  1 15:54:54 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Invocation_Interceptor.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Invocation_Interceptor.cpp
          (destroy):

          Added missing PortableInterceptor::Interceptor::destroy()
          implementation.

Thu Mar  1 17:49:51 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/Protocol_Factory.cpp:
        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.cpp:
        * orbsvcs/orbsvcs/AV/AV_Core.cpp:
        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:

          Removed unncessary ACE_DEBUGS and ensconced the others with
          TAO_debug_level checks. This should fix the tests from failing.

Thu Mar  1 14:14:38 2001  Darrell Brunsch <brunsch@uci.edu>

        And today's quote is.....

        "What we call progress is the exchange of one Nuisance for another
         Nuisance."
                     - Havelock Ellis

        This is the first in a set of updates to the run_test.pl scripts.
        The goal is to start running the tests for the Release configuration
        and for Borland.  These setups output the executables into sub-
        directories, which wasn't handled too well by the old ACEutils.pm
        perl module.  PerlACE::Run_Test contains an updated Process class
        which does a much better job of handling this (among other things).

        * performance-tests/Latency/deferred_synch_client.dsp:

          Changed the output executable name to match the other platforms.

        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/Client.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/Server.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/Client.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/Server.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/Client.dsp:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/Server.dsp:

          Output directory of Win32 Release executables should be "Release".

        * performance-tests/Cubit/TAO/IDL_Cubit/run_test.pl:

          Made sure to clean up shmiop files when finished.

        * performance-tests/Cubit/TAO/MT_Cubit/run_test.pl:

          Made some minor updates to make it more consistent with the rest of
          the run_test.pl scripts.

        * performance-tests/Callback/run_test.pl:
        * performance-tests/Cubit/TAO/DII_Cubit/run_test.pl:
        * performance-tests/Cubit/TAO/IDL_Cubit/run_test.pl:
        * performance-tests/Latency/multi_threaded.pl:
        * performance-tests/Latency/run_test.pl:
        * performance-tests/Latency/scalability.pl:
        * performance-tests/Latency/single_threaded.pl:
        * performance-tests/POA/Object_Creation_And_Registration/run_test.pl:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/run-test.pl:
        * performance-tests/RTCorba/Multiple_Endpoints/Endpoint_Per_Priority/run-test.pl:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/run-test.pl:
        * performance-tests/RTCorba/Oneways/Reliable/client_test.pl:
        * performance-tests/RTCorba/Oneways/Reliable/run_test.pl:

          Updated to use PerlACE::Run_Test.

Thu Mar  1 15:21:53 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/TypeCode.cpp:

          Modified private_member_label() to insert octet 0 into
          the Any label for the default index, as the spec requires.
          This closes out [BUGID:123].

Thu Mar  1 14:09:21 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/interceptors_ss.cpp:
        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:

          Removed some extra generated carriage returns in
          interceptor skeleton code.

Thu Mar  1 12:07:57 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ClientRequestInfo.cpp (get_request_policy):

          Fixed "unused argument" warning in the case where compile-time
          support for CORBA Messaging is disabled.

        * tests/Makefile.bor (DIRS):

          Added the `Codec' test directory to list of directories to
          recurse into.

Thu Mar  1 11:10:58 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Makefile (DIRS):

          Added the `Codec' test directory to list of directories to
          recurse into.

Thu Mar  1 10:51:14 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Codec/client.cpp:

          Fixed compiler warnings.

        * tests/Codec/Makefile:

          Fixed typo, and updated dependencies.

Thu Mar  1 10:39:49 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ClientRequestInfo.inl (forward_reference):

          Fixed "unused argument" warning.

        * tao/ClientRequestInfo.cpp (get_request_policy):

          Only call CORBA::Object::_get_policy() if CORBA Messaging is
          enabled at compile-time.  Fixes a compile-time error reported by
          Erik Johannes <ejohannes@oresis.com>.

        * tao/PortableServer/Object_Adapter.cpp (dispatch):

          Cleaned up the interceptor related code slightly.

Thu Mar 01 12:18:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/AMI_Timeouts/client.cpp:

          Added a ".in ()" when passing a _var as _ptr.

        * tests/AMI_Timeouts/Makefile:

          Added a missing space.

        * tests/AMI_Timeouts/timeout_i.cpp:

          Removed the name of some parameters which were not used.

          This should fix several compile warnings and errors. Thanks to
          Bala for hooking up the AMI_Timeouts test and reporting this.

Thu Mar 01 09:38:28 2001  Ossama Othman  <ossama@uci.edu>

        * tao/CodecFactory.h:
        * tao/CodecFactory.cpp:

          New files containing the implementation of the IOP::CodecFactory
          interface as defined by the adopted Portable Interceptor
          specification (ptc/00-08-05).

        * tao/Codec_ORBInitializer.h:
        * tao/Codec_ORBInitializer.cpp:

          ORBInitializer that registers the CodecFactory reference with
          the ORB.

        * tao/CDR_Encaps_Codec.h:
        * tao/CDR_Encaps_Codec.cpp:

          New files containing the implementation of the IOP::Codec
          interface specifically for CDR encapsulations.

        * tao/ORB.cpp (init_orb_globals):

          Register the CodecFactory ORBInitializer with the ORB.

        * tao/ORBInitInfo.h:
        * tao/ORBInitInfo.cpp (codec_factory):

          Implemented this method, as required by the Portable Interceptor
          specification.  Each ORBInitInfo method now retains its own
          copy of a CodecFactory.  This was to done for ease of
          implementation.

        * tao/OctetSeq.pidl:
        * tao/StringSeq.pidl:

          Place the typedef in each of these PIDL files in the CORBA
          module.  Previously they were incorrectly placed in the global
          namespace.  [Bug 793]

        * tao/OctetSeqC.h:
        * tao/OctetSeqC.i:
        * tao/OctetSeqC.cpp:
        * tao/diffs/OctetSeq.diff
        * tao/StringSeqC.h:
        * tao/StringSeqC.i:
        * tao/StringSeqC.cpp:
        * tao/diffs/StringSeq.diff:

          Regenerated these files against the updated PIDL files.
          [Bug 793]

        * tao/PortableInterceptor.pidl:
        * tao/IOP.pidl:

          Updated with changes made in ptc/00-08-05.  These changes
          include (1) moving Codec related interfaces to the IOP module,
          (2) addition of the Interceptor::destroy() method, and (3)
          addition of the IOP::TaggedComponentSeq type to the IOP module.

        * tao/PortableInterceptorC.h:
        * tao/PortableInterceptorC.i:
        * tao/PortableInterceptorC.cpp:
        * tao/diffs/PortableInterceptor.diff:
        * tao/IOPC.h:
        * tao/IOPC.i:
        * tao/IOPC.cpp:
        * tao/diffs/IOP.diff:

          Regenerated these files against the updated PIDL files.

        * tao/ClientRequestInfo.inl:
        * tao/ClientRequestInfo.cpp:
        * tao/PortableServer/ServerRequestInfo.inl:
        * tao/PortableServer/ServerRequestInfo.cpp:

          Removed all reference to LOCATION_FORWARD_PERMANENT.  It is
          currently not supported by the CORBA and Portable Interceptor
          specifications.  This may change in the future as FT CORBA
          issues are resolved.

          Added all missing exception minor codes.  The final adopted
          Portable Interceptor specification specifies what they are (the
          joint submission did not).

        * tao/ClientRequestInfo.h:

          Made target_ member a "_ptr."  The TAO_ClientRequestInfo no
          longer needs to release the reference.

        * tao/ClientRequestInfo.cpp (TAO_ClientRequestInfo):

          Do not duplicate the target object reference.  There is no need
          to do so since it is guaranteed to be valid for the lifetime of
          the request.  This removes a pair of locks from the critical
          path, thus improving performance.  [Bug 795]

        * tao/ORB_Core.h:
        * tao/ORB_Core.cpp (destroy_interceptors):

          New helper method that invokes Interceptor::destroy() on all
          registered interceptors when ORB::destroy() is called.

          (destroy):

          Invoke the TAO_ORB_Core::destroy_interceptors() help method when
          ORB::destroy() is called.

        * tao/PortableInterceptor.i:
        * tao/PortableInterceptor.cpp:

          Un-inlined the destructors.  They're already no-ops, and
          inlining them only serves to increase the footprint since
          inlined destructor code is placed at all exit points.

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * tao/Makefile:
        * tao/Makefile.bor:

          Added Codec related filenames to these files.

        * tests/Codec/Codec.dsw:
        * tests/Codec/Makefile:
        * tests/Codec/Makefile.bor:
        * tests/Codec/README:
        * tests/Codec/client.bor:
        * tests/Codec/client.cpp:
        * tests/Codec/client.dsp:
        * tests/Codec/run_test.pl:
        * tests/Codec/test.idl:

          New test that verifies the CodecFactory and CDR encapsulation
          Codec objects are functioning properly.

        * tests/README:

          Added a description of the Codec test.

        * tests/Portable_Interceptors/Benchmark/interceptors.cpp:
        * tests/Portable_Interceptors/Benchmark/interceptors.h:
        * tests/Portable_Interceptors/Dynamic/interceptors.cpp:
        * tests/Portable_Interceptors/Dynamic/interceptors.h:
        * tests/Portable_Interceptors/ForwardRequest/Client_Request_Interceptor.cpp:
        * tests/Portable_Interceptors/ForwardRequest/Client_Request_Interceptor.h:
        * tests/Portable_Interceptors/ForwardRequest/Server_ORBInitializer.cpp:
        * tests/Portable_Interceptors/ForwardRequest/Server_ORBInitializer.h:
        * tests/Portable_Interceptors/ForwardRequest/Server_Request_Interceptor.cpp:
        * tests/Portable_Interceptors/ForwardRequest/Server_Request_Interceptor.h:
        * tests/Portable_Interceptors/ForwardRequest/server.cpp:
        * tests/Portable_Interceptors/ForwardRequest/server.dsp:
        * tests/Portable_Interceptors/ForwardRequest/test_i.cpp:
        * tests/Portable_Interceptors/ForwardRequest/test_i.h:
        * tests/Portable_Interceptors/IORInterceptor/FOO_ClientRequestInterceptor.cpp:
        * tests/Portable_Interceptors/IORInterceptor/FOO_ClientRequestInterceptor.h:
        * tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.cpp:
        * tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.h:
        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.cpp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.h:

          Updated to conform to the Portable Interceptor support updates.

        * docs/interceptors.html:

          Updated current status of TAO's interceptor support
          (e.g. addition of the CodecFactory and CDR encapsulation Codec),
          and the reference list (URL for the adopted Portable Interceptor
          specification).

Thu Mar  1 09:30:14 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/InterfaceC.i:
        * tao/IFR_Client/InterfaceC.h:
        * tao/IFR_Client/InterfaceC.cpp:
        * orbsvcs/IFR_Service/InterfaceS.h:
        * orbsvcs/IFR_Service/InterfaceS.cpp:

          Replaced the interceptor code I ill-advisedly removed
          some time ago. More changes are soon to come for these
          files, so the .diff files have not yet been regenerated.

Wed Feb 28 20:44:37 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Pluggable/ftp.cpp:
        * orbsvcs/tests/AVStreams/Latency/pong.h:
        * orbsvcs/tests/AVStreams/Latency/ping.h:
        * orbsvcs/tests/AVStreams/Latency/ping.cpp:

          Fixed compile errors and warnings.

Wed Feb 28 15:43:54 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/orbconf.h: Fixed a small mistake for the default case.

Wed Feb 28 15:23:46 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/Options.html: Added documentation for the option
          "-ORBConnectionCacheLock".

Wed Feb 28 15:20:07 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/orbconf.h: Added a check to notify the users that compiling
          RT CORBA without CORBA Messaging support is an error.

Wed Feb 28 14:23:41 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Tagged_Profile.h:
        * tao/Tagged_Profile.i:
        * tao/TAgged_Profile.cpp: This class held an instance of
          GIOP::IORAddressingInfo which in turn held an instance of
          TAO_String_Manager. This was a source of allocation and
          deallocation for every call along the critical path. We now rip
          open the GIOP::IORAddressingInfo structure and store the
          information that is just required like the <type_id> and the
          <IOP::TaggedProfile>.

        * tao/GIOP_Message_Generator_Parser.cpp: Added code to do a lazy
          evaluation of GIOP::IORAddressingInfo structure that we may
          receive. These changes should fix the bugzilla bug #798.

Wed Feb 28 14:17:46 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Makefile: Added AMI_Timeouts to the list of directories.

Wed Feb 28 14:16:00 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Stub.h:
        * tao/Stub.cpp (TAO_Stub): Changed the signature of the method
          create_ior_info ().

Wed Feb 28 13:55:25 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:

          Fixed indentation for generation of
          '_tao_server_request.argument_flag (0);'

Wed Feb 28 09:43:35 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Any:

          Change the value() method to return the void* value_
          member if the any owns its data. In this case, it
          must return something meaningful because we call it
          in the >>= operator for all but the simple types.

Web Feb 28 09:36:03 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * orbsvcs/tests/Makefile.bor
        * orbsvcs/tests/FaultTolerance/Makefile.bor

        The FaultTolerance test is now build with BCB

Web Feb 28 09:02:51 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * Makefile.bor
        * orbsvcs/tests/Makefile.bor
        * orbsvcs/tests/Simple_Naming/Makefile.bor

          The orbsvcs tests for which there is a correct BCB makefile
          are now build in the all build

Tue Feb 27 17:45:55 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Latency/control.cpp:
        * orbsvcs/tests/AVStreams/Latency/pong.cpp:
        * orbsvcs/tests/AVStreams/Latency/ping.cpp:
        * orbsvcs/tests/AVStreams/Latency/run_test.pl:

          Added script to run test.

Tue Feb 27 16:36:06 2001  Christopher Kohlhoff  <chris@kohlhoff.com>

        * orbsvcs/IFR_Service/tao_ifr.bor:
          Added library required for debug build.

        * tests/AMI_Timeouts/client.bor:
        * tests/AMI_Timeouts/server.bor:
          Added missing source file timeout_client.cpp.

Tue Feb 27 15:23:37 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Pluggable/server.cpp:

          Fixed unused args compile warnings.

Tue Feb 27 12:21:03 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connector.cpp: Moved the template instantiations to the
          top of the file as this was creating problem with SunCC
          5.0. Thanks to Christian Mueffling <cvm@aiss.de> for reporting
          this.

        * tao/UIOP_Connector.cpp:
        * tao/SHMIOP_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp: Added the same
          fix for these protocols too.

Tue Feb 27 12:17:18 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Any.cpp:

          Modified value() method to return 'this' if the Any
          contains some value, 0 otherwise. It is possible that
          the Any's void* value_ member could be 0 but the Any
          contains some value in its message block member. The
          'this' pointer is returned to enforce the OMG warnings
          that the method will soon disappear from the spec and
          that its return value cannot be guaranteed to yield
          any useful value by casting.

        * tao/Sequence_T.cpp:
        * tao/Sequence.cpp:

          In the operator= methods in each sequence class, modified
          the case where the release_ member is 0 to set the
          buffer to 0 if rhs.maximum_ is 0. Otherwise allocbuf (0)
          is called, which may lead to problems. Thanks to Virgilijus Globis
          <virgis@megagis.lt> for reporting this bug.

        * tao/MessagingC.h:

          Removed two instances of a typedef of _tao_seq_Octet to
          _marshaled_exception_seq, in Messaging::ExceptionHolder and
          in OBV_Messaging::ExceptionHolder. These typedefs are no
          longer used or needed anywhere.

        * tao/Stub.cpp:

          Removed some extra parentheses in parse_policies.

Tue Feb 27 11:34:00 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Invocation.cpp:
        * tao/Invocation.h: Removed the instance of IOP::IOR that was
          created on the stack in every call. This structure had a
          TAO_String_Manager which allocates memory in the constructor and
          destroys memory in the destructor. This allocation and
          deallocation comes into play for every call even when it is not
          used.

        * tao/Stub.cpp:
        * tao/Stub.h:
        * tao/Stub.i: Added a pointer to the IOP::IOR in this class. When
          the client receives an exception LOC_NEEDS_ADDRESSING_MODE, the
          actual information is prepared only once and passed on to the
          invocation classes for every subsequent call.

Tue Feb 27 06:35:36 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.h (operands.): Fixed a
          typo that was generating quite a bit of errors.

Tue Feb 27 04:32:00 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/run_test.pl:
        * orbsvcs/tests/AVStreams/Multicast/run_test.pl:
        * orbsvcs/tests/AVStreams/Full_Profile/run_test.pl:
        * orbsvcs/tests/AVStreams/Pluggable/run_test.pl:

          Added scripts to run the AVStreams tests.

Mon Feb 26 20:01:06 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/server.cpp:
        * orbsvcs/tests/AVStreams/Multicast/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast/server.cpp:
        * orbsvcs/tests/AVStreams/Latency/control.cpp:
        * orbsvcs/tests/AVStreams/Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/Full_Profile/server.cpp:
        * orbsvcs/tests/AVStreams/Pluggable/ftp.cpp:
        * orbsvcs/tests/AVStreams/Pluggable/server.cpp:

          Ensured clean termination of the processes.

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * orbsvcs/orbsvcs/AV/AVStreams_i.h:

          Corrected multicasting address formating to fix the Multicast
          and Multicast_Full_Profile tests.

          Also fixed the iteration through the reverse flow spec set in
          TAO_StreamEndPoint::start.

          Thanks to Craig Rodrigues <crodrigu@bbn.com> for reporting these
          bugs.

Mon Feb 26 19:05:57 2001  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

        * orbsvcs/orbsvcs/Trader/Constraint_Interpreter.h:
        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.h:
        * orbsvcs/orbsvcs/Trader/Constraint_Visitors.h:
        * orbsvcs/orbsvcs/Trader/Trader_Constraint_Visitors.h:
          Added some TAO_Trading_Export macros to export some classes from
          the Trading Service library.  Thanks to Lothar Werzinger
          <werzinger.lothar@krones.de> for reporting this and submitting
          the patches.

Mon Feb 26 16:34:55 2001  Christopher Kohlhoff  <chris@kohlhoff.com>

        * orbsvcs/IFR_Service/IFR_Service.bor:
        * orbsvcs/IFR_Service/TAO_IFR_BE_DLL.bor:
        * orbsvcs/IFR_Service/TypeCodeFactory_DLL.bor:

          Fixed build of IFR_Service with Borland.

        * orbsvcs/TAO_Service/Makefile.bor:

          Added Borland makefile for the TAO_Service.

        * orbsvcs/Makefile.bor:

          Include IFR_Service and TAO_Service in default build.

Mon Feb 26 15:35:10 2001  Phil Mesnier  <mesnier_p@ociweb.com>

        Port to Unixware 7 (7.1.1) Using UDK CC (7.1.1.b)

        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * orbsvcs/orbsvcs/Log/LogMgr_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannelFactory_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ProxyPushSupplier_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_SupplierAdmin_i.cpp:
        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.cpp:
        * orbsvcs/tests/AVStreams/Latency/ping.cpp:
        * orbsvcs/tests/AVStreams/Latency/pong.cpp:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/server.cpp:
        * tao/CORBALOC_Parser.cpp:
        * tao/RT_ORB.cpp:
        * tao/default_resource.cpp:
        * tao/Strategies/SHMIOP_Acceptor.cpp:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/UIOP_Acceptor.cpp:

        Fixed errors in #pragma instiate lines including removal of ';', mispellings

Mon Feb 26 14:09:29 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Collocation/Diamond_i.cpp (color): Fixed a warning in
          Tru64_CXX builds.

Mon Feb 26 12:52:48 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Asynch_Invocation.h:
        * tao/Asynch_Invocation.i:
        * tao/Invocation.cpp:
        * tao/Invocation.h:
        * tao/Invocation.i:
        * tao/DynamicInterface/DII_Invocation.h:
        * tao/DynamicInterface/DII_Invocation.inl:

          Added default argument to constructors that will
          determine the byte order of the contained CDR
          stream. The default is native byte order, but can
          be modified by a gateway if it is handling a request
          in non-native byte order.

        * tao/GIOP_Message_Base.cpp:

          In write_protocol_header(), added code to toggle the byte
          order field based on the byte order of the CDR stream that
          is passed in.

        * tao/DynamicInterface/Request.cpp:
        * tao/DynamicInterface/Request.h:
        * tao/DynamicInterface/Request.inl:
        * tao/DynamicInterface/Server_Request.h:
        * tao/DynamicInterface/Server_Request.inl:

          Added accessors to the byte order of the underlying
          invocation. These will be used by a gateway to
          preserve the byte order of a request it is handling,
          even if it is a byte order different than that of the
          gateway's platform. CORBA::Request also stores the
          byte order as state, so the reply can be checked for a
          change in byte order.

        * tests/DSI_Gateway/test_dsi.cpp:

          Added lines to the gateway's invoke() method to use the
          above accessors, to get and set the appropriate byte orders
          immediately before and after the call to
          CORBA::Request::invoke().

Mon Feb 26 10:28:45 2001  Darrell Brunsch <brunsch@uci.edu>

        * tests/Param_Test/anyop.dsp:

          Fixed CR->CR/LF problem.

Mon Feb 26 11:40:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/AMI_Timeouts/timeout_i.cpp:
          Added some missing throw specs on method implementations.
          Thanks to Johnny Willemsen <jwillemsen@remedy.nl> for pointing
          this out.

Mon Feb 26 09:32:24 2001  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * performance-tests/RTCorba/Oneways/Reliable/client.cpp:
        * tests/Single_Read/client.cpp:
        * tests/Timed_Buffered_Oneways/client.cpp:
          Fixed gcc-272 compilation problems, all related to constructs
          like Foo::data data (...); I used Foo::data the_data (...); and
          things are happy now.

        * examples/OBV/Typed_Events/Client_i.cpp:
        * examples/OBV/Typed_Events/Event_Types_impl.cpp:
        * examples/OBV/Typed_Events/Server_i.cpp:
          Fixed more gcc-272 compilation problems about ambiguous
          initialization of T_var, changed from T_var x(new T_impl);
          to T_var x(ACE_static_cast(T*,new T_impl));

        * tests/Smart_Proxies/Makefile:
        * tests/Smart_Proxies/On_Demand/Makefile:
        * tests/Smart_Proxies/Policy/Makefile:
          Removed -I options from LDFLAGS.

Mon Feb 26 09:30:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tests/Makefile.bor:
          Added the AMI_Timouts directory to that makefile.
          Thanks to Johnny Willemsen <jwillemsen@remedy.nl> for pointing
          this out.

        * tests/AMI_Timeouts/timeout_i.cpp:
          Added some missing throw specs on method implementations.
          Thanks to Johnny Willemsen <jwillemsen@remedy.nl> for pointing
          this out.

Mon Feb 26 06:45:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tao/Asynch_Reply_Dispatcher.cpp:
          Compilers were complaining about a unused argument. I fixed it
          by removing the name of the argument; this should take care of it.
          Thanks to Bala for pointing that out.

Mon Feb 26 03:45:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tao/Asynch_Timeout_Handler.cpp:
        * tao/Asynch_Timeout_Handler.h:
          Added these two files.
          This class implements an event handler for timeouts on AMI
          invocations. The timeout handler is registered for timeouts
          with the ORB by the asynch invocation object.

          When the reply does not arrive right in time, the timer
          expires and the timeout handler is invoked. The timeout handler
          knows the correct transport mux strategy and the asynch reply
          dispatcher for the reply, which timed out.

          On timeout the timeout handler unbinds the reply dispatcher from
          the transport mux strategy and informs the reply dispatcher that
          the reply timed out. The asynch reply dispatcher informs the
          associated reply handler in the application about this by raising
          the timeout exception. The reply dispatcher will commit suicide after
          that. The timeout handler itself unregisters itself from the reactor
          and commits suicide in handle_close.

          Note: The timeout handler should be allocated statically in the
                reply dispatcher, instead - as it is now - of being allocated
                dynamically in the asynch invocation object. Thanks Carlos.
                But how can we know in the constructor of the reply dispatcher
                (which is the right place to allocate it statically) whether
                timeouts are actually enabled. If they are not enabled, we
                might waste memory for something not needed?

        * tao/Asynch_Reply_Dispatcher.cpp:
        * tao/Asynch_Reply_Dispatcher.h:
          Added a new method <reply_timed_out> which is invoked by the timeout
          handler on timeout. This method informs the application reply handler
          about the timeout by raising the timeout exception.
          At the end of that method the reply dispatcher commits suicide as it
          is no longer needed - it was dynamically allocated, as the original
          asynch invocation object has gone away before (asynchrony!).

          If the reply arrives right in time the reply dispatcher unregisters
          the timeout handler from the reactor and deletes it.

        * tao/Asynch_Invocation.cpp:
          Added code to the actual invocation path. The timeout handler is
          dynamically allocated and registered with the reactor for timeouts.
          It is then handed over to the asynch reply dispatcher for later usage.

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * tao/Makefile:
        * tao/Makefile.am:
        * tao/Makefile.bor:
          Added the Asynch_Timeout_Handler.{h,cpp} files to these files.
          Dependencies in <Makefile> need to be updated.

        * tests/AMI_Timeouts/client.bor:
          Added this file as Borland specific Makefile for the client.

        * tests/AMI_Timeouts/Makefile
        * tests/AMI_Timeouts/Makefile.bor
        * tests/AMI_Timeouts/README
        * tests/AMI_Timeouts/client.cpp
        * tests/AMI_Timeouts/client.dsp
        * tests/AMI_Timeouts/run_test.pl
        * tests/AMI_Timeouts/server.bor
        * tests/AMI_Timeouts/server.cpp
        * tests/AMI_Timeouts/server.dsp
        * tests/AMI_Timeouts/svc.conf
        * tests/AMI_Timeouts/timeout_client.cpp
        * tests/AMI_Timeouts/timeout_client.h
        * tests/AMI_Timeouts/timeout_i.cpp
        * tests/AMI_Timeouts/timeout_i.h:
          Updated these files to reflect latest modifications on the
          AMI Timeout test.

Mon Feb 26 09:46:04 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tests/makefile.bor:
        * tests/Bidirectional_NestedUpcall/*.bor
          Added Borland C++ Builder specific makefiles for this test

Mon Feb 26 00:19:28 2001  Darrell Brunsch <brunsch@uci.edu>

        Time to do some spring cleaning...

        * TAO/examples/Simple/time/client.dsp:
        * TAO/examples/Simple/time/server.dsp:
        * TAO/orbsvcs/Naming_Service/NT_Naming_Service.dsp:
        * TAO/orbsvcs/Naming_Service/Naming_Service.dsp:
        * TAO/tao/TAO.dsp:

          Removed Win32 Alpha configurations.  See ACE changelog
          for more info.

Mon Feb 26 01:47:04 2001  Pradeep Gore  <pradeep@cs.wustl.edu>

        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/Notify_Service/svc.conf:
          Corrected the "-Notify_TPReactor" option.

        * orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.h:
        * orbsvcs/Notify_Service/README:
          - Added the "-AllocateTaskperProxy" option to pre-allocate the
            worker task(s) used in event processing.
          - Added "-AsynchUpdates" option to send subscription/publication
            updates asynchromously.
          - Event Manager Object Factory is allocated per channel now.

        * orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ConsumerAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_Collection_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_POA_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_EventChannel_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager.i:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager_Objects_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Map.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Map.h:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Processor.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_MT_Worker_Task.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ProxyConsumer_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_ProxySupplier_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Proxy_T.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_SupplierAdmin_i.cpp:
          Trivial debug messages will print conditionally. use ORBDebugLevel
          option to see debug messages.

        * orbsvcs/tests/Notify/performance-tests/RedGreen/README:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/listener.conf:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/lookup.conf:
          Updates files to correct configurations.

Mon Feb 26 01:24:00 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * TAO/ValueBase.cpp:
          The code of value types needs a urgent repair in many places.
          With this change I fixed how the ORB was obtained - from
          fetching it via TAO_ORB_Core_instance to fetching
          it via the CDR stream, which owns a correct reference to it.
          With TAO_ORB_Core_instance we could have actually fetched
          the wrong ORB.

Sun Feb 25 19:37:24 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/POA/Adapter_Activator/run_test.pl:
        * examples/POA/DSI/run_test.pl:
        * examples/POA/Explicit_Activation/run_test.pl:
        * examples/POA/FindPOA/run_test.pl:
        * examples/POA/Forwarding/run_test.pl:
        * examples/POA/Loader/run_test.pl:
        * examples/POA/NewPOA/run_test.pl:
        * examples/POA/On_Demand_Activation/run_test.pl:
        * examples/POA/On_Demand_Loading/run_test.pl:
        * examples/POA/Reference_Counted_Servant/run_test.pl:
        * examples/POA/RootPOA/run_test.pl:
        * examples/POA/TIE/run_test.pl:
          Instead of pushing a new directory to @INC we use 'use lib
          <path>;' much cleaner and it works with 'use Foo;'.

Sun Feb 25 11:31:47 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/POA/Adapter_Activator/run_test.pl:
        * examples/POA/Explicit_Activation/run_test.pl:
        * examples/POA/Loader/run_test.pl:
        * examples/POA/On_Demand_Activation/run_test.pl:
        * examples/POA/Reference_Counted_Servant/run_test.pl:
        * examples/POA/RootPOA/run_test.pl:
          Replace 'require ACEutil' with 'use ACEutil', the latter should
          eat the -Config options passed by the auto_compile script.

Sun Feb 25 10:38:57 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/default_resource.h:
          Remove unused enum

Sun Feb 25 12:19:59 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RT_ORB.cpp:
        * tao/RT_ORB.h:
        * tao/RT_Mutex.cpp:
        * tao/RT_Mutex.h:
        * tao/orbconf.h:
        * tests/RTCORBA/RTMutex/server.cpp: Added TAO_HAS_NAMED_RT_MUTEXES
          option to enable support for named RT Mutexes.  They are now
          disabled by default to help reduce TAO's memory footprint.


Sun Feb 25 10:13:58 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/default_resource.cpp: Changed the option
          "-ORBConnectionLock" to "-ORBConnectionCacheLock". This change
          should fix bug #799 in bugzilla which talks about two locks on
          the connection cache for every call.

        * orbsvcs/tests/AVStreams/Latency/svc.conf:
        * performance-tests/Cubit/TAO/IDL_Cubit/svc.conf:
        * performance-tests/Cubit/TAO/IDL_Cubit/svc.st_client.conf:
        * performance-tests/Cubit/TAO/IDL_Cubit/svc.zero_lock.conf:
        * performance-tests/Cubit/TAO/IDL_Cubit/collocation/svc.conf:
        * performance-tests/Cubit/TAO/MT_Cubit/svc.conf:
        * performance-tests/Latency/st_client.conf:
        * tests/Collocation/svc.conf:
        * tests/Smart_Proxies/Collocation/svc.conf: Changed the option
          -ORBConnectorLock to the new option
          -ORBConnectionCacheLock.


Sun Feb 25 10:01:06 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Collocation/Coll_Tester.cpp (parse_args):
        * tests/Collocation/Coll_Tester.h:
        * tests/Collocation/Diamond_i.h: Fixed warnings with g++ on
          Linux.

Sat Feb 24 11:01:21 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Latency/st_client.conf:
          The option to disable locks in the connection cache was changed,
          but this configuration file was still using the old one.

Sat Feb 24 10:16:42 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/RTCORBA/Client_Protocol/svc.conf:
        * tests/RTCORBA/Explicit_Binding/svc.conf:
        * tests/RTCORBA/Server_Protocol/server_reverse.conf:
        * tests/RTCORBA/Server_Protocol/server_reverse_nt.conf:
        * tests/RTCORBA/Server_Protocol/server_shmiop.conf:
        * performance-tests/Cubit/TAO/IDL_Cubit/server_shmiop.conf:
          The SHMIOP protocol was configured using dynamic loading,
          but that does not work on static builds.  Furthermore, there is
          no need to dynamically load the protocol because it is
          statically linked into the application.

Sat Feb 24 11:13:02 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tests/Makefile:
        * tests/Collocation/README:
        * tests/Collocation/Makefile:
        * tests/Collocation/Makefile.impl:
        * tests/Collocation/Makefile.test:
        * tests/Collocation/Makefile.stub: Added the missing UNIX
          Makefiles for collocation test.  Thanks to Steve Hespelt
          <shespelt@bear.com> for reporting this.

Fri Feb 23 19:48:08 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * TAO version 1.1.13 released.

Thu Feb 22 03:07:46 2001  Krishnakumar B  <kitty@ace.cs.wustl.edu>

        * VERSION:
        * PROBLEM-REPORT-FORM:
        * tao/Version.h:

        Revert of the changes done by the release script.

Wed Feb 21 20:32:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * performance-tests/Cubit/TAO/MT_Cubit/run_test.pl:

          Updated to use PerlACE::Run_Test.  Also fixed the timeout
          problem we've been seeing on Win2000_DLL_Debug nightly build.

Wed Feb 21 20:17:22 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Multiple/Multiple_Impl.cpp:
          Don't return a string when an exception is raised.  This is not
          only non-compliant, it is a bad idea: the receiver is supposed
          to ignore all return values, because they are invalid.

Wed Feb 21 21:04:03 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tests/RTCORBA/MT_Client_Protocol_Priority/run_test.pl: Fixed
          incorrect usage of SHMIOP endpoint specifier.

Wed Feb 21 08:38:05 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/RT_ORBInitializer.cpp:
          Add RT_ORB_Loader to the service repository, otherwise
          resolve_initial_references("RT_ORB") fails for static builds.
          Don't add a static service twice, otherwise the old copy is
          destroyed and sometimes the ORB caches it.

Wed Feb 21 10:50:46 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * docs/Options.html: Changed the documentation for
          -ORBConnectionCachingStrategy and -ORBPurgePercentage
          options.

Wed Feb 21 07:27:58 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/EC_Custom_Marshal/ECCM_Consumer.dsp:
        * orbsvcs/tests/EC_Custom_Marshal/ECCM_Supplier.dsp:
          The binary name was broken in this fails, this should fix the
          problems in the Win32 builds.

Tue Feb 20 21:01:53 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/Connection_Handler.h:
        * tao/Connection_Handler.cpp: Added a new method mark_invalid ().

        * tao/IIOP_Connection_Handler.cpp: Checked for any buffered
          messages in the socket before closing the socket during
          handle_close (). This fix should fix the errors in
          Timed_Buffered_Oneways test.

        * tao/IIOP_Transport.cpp: Purged the handle during
          close_connection ().

        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp: Replicated the
          changes done for IIOP.

Tue Feb 20 20:34:06 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Sequence_T.i:
        * tao/Sequence_T.cpp:

          Reverted the change in

          Mon Feb 19 11:26:05 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Makefile:

          Added ACE_HAS_GNUG_PRE_2_8 guard for the compilation of the
          directories IFR_Client and Domain, so these directories will
          be skipped by any build using old g++.

Tue Feb 20 15:02:01 2001  Carlos O'Ryan  <coryan@uci.edu>

        * docs/Options.html:
          Add documentation about the secret -ORBIORParser option in the
          resource factory.

        * docs/ior_parsing.html:
          Document the pluggable IOR parser feature in TAO, and how you
          can go about adding a new version.

Tue Feb 20 16:35:27 2001  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * tao/RT_ORBInitializer.cpp:
          We must add the RT_Protocols_Hooks service, after the
          Service_Configurator is opened.  This is a bit more complicated
          than the usual ACE_Service_Config::static_svcs()->insert().
          After the beta we need to revisit this code and factor out some
          commonalities with ACE_Service_Config::load_static_svcs(), and
          probably rethink this portion of the RT-CORBA initialization.

          This fix should solve the crashes under Sun/CC 4.2 that have
          plagued TAO-1.1.12 and our nightly builds too.

          This problem was identified by many members of the community,
          including Scott Gunn <gunns@tvratings.com>, J. Russell
          Noseworthy <rnosewor@objectsciences.com> and Keith Nicewarner
          <knicewar@erg.sri.com>.

Tue Feb 20 16:13:22 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connection_Handler.cpp (handle_close):  Fixed a problem
          with lingering handles in the cache when the server is
          shutdown. We need to pro-actively purge the handles from
          cache. Thanks to Christian von Mueffling <cvm@aiss.de> for
          reporting this problem.

        * tao/IIOP_Transport.cpp: We were explicitly purging connections
          after a handle_close () in close_connection (). That is not
          required as we purge the connections from cache during
          handle_close () itself.

        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp: Replicated the
          changes done for IIOP.

Tue Feb 20 12:02:30 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connection_Handler.cpp (handle_close):
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp: Fixed a
          leak from open handles on the server side when the clients
          exit.  Thanks to Andy Olson <andrew.olson@lmco.com>
          and Ossama for helping with this.

Tue Feb 20 10:25:37 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation.operation_ss.cpp:

          Added missing carriage return in skeleton code generation.
          Thanks to Alexandr Gavrilov <gavr@trustworks.com> for
          reporting this bug.

Tue Feb 20 06:27:17 2001  Douglas C. Schmidt  <schmidt@tango.cs.wustl.edu>

        * tao/Makefile.bor (OBJFILES): Remove

          $(OBJDIR)\GIOP_Message_Headers.obj

          since this file no longer exists.  Thanks to Johnny Willemsen
          for reporting this.

Mon Feb 19 20:19:07 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Lite.cpp:
        * tao/GIOP_Message_Locate_Header.cpp:
        * tao/GIOP_Message_Generator_Parser_10.cpp: Corrected the wrong
          inclusions.

        * tao/Makefile:
        * tao/Domain/Makefile:
        * tao/DynamicAny/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/IFR_Client/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
        * tao/PortableServer/Makefile:
        * tao/SmartProxies/Makefile:
        * tao/Strategies/Makefile: Updated dependencies.

Mon Feb 19 19:59:44 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Locate_Header.h: Changed the wrong inclusion of
          .i file.

Mon Feb 19 19:15:11 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/Makefile:
        * orbsvcs/tests/Makefile:

          Skipped the IFR_Service and tests/InterfaceRepo
          directories for Lynx OS builds.

Mon Feb 19 14:27:18 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Simple/time-date/client.conf:
        * examples/Simple/time-date/run_test.pl:
          Use an empty configuration file for the client, this should
          resolve the problems with the automatic builds.

Mon Feb 19 16:04:21 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/operation_ss.cpp:

          Added ACE_UNUSED_ARG (ACE_TRY_ENV) at the end of the
          generated *_skel functions. There is a combination
          of circumstances - TAO_HAS_INTERCEPTORS not defined,
          IDL operation has no in, inout, out or return args
          (as in a oneway shutdown operation) and native
          exception use is enforced by passing -Ge 0 to the
          IDL compiler - where this argument is not used. If
          it is used, adding the final line above does no
          harm. The situation described was arising in the
          Native_Exception test in the Debian Linux builds.

Mon Feb 19 15:58:03 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * orbsvcs/examples/RtEC/Schedule/Service.cpp:
          Added a #ifdef to make sure that we are enabling the
        typedef TAO_Reconfig_Scheduler only if we are compiling with
        g++-2.8 or above.

Mon Feb 19 12:18:06 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/IFR_Service/Makefile.BE:
        * orbsvcs/IFR_Service/Makefile.TypeCodeFactory:
          Fixed the warnings under True64/CXX, they were actually
          important and could have manifested themselves as errors in
          other platforms.

Mon Feb 19 12:11:23 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp (is_message_ready):
        * tao/GIOP_Message_Handler.h : A hack to get SHMIOP working. In
          the method is_message_ready (), before the control is returned
          to the reactor, a check is made to see whether the protocol in
          use, uses the reactor for signalling. If that is the case, we
          read the rest of the data immediately. This is based on an
          assumption that SHMIOP (for which this hack is implemented),
          ensures that data gets sent in one big chunk unlike TCP.

        * tao/GIOP_Message_Base.cpp: Made a change to confirm to the
          signature of the is_message_ready () method in
          GIOP_Message_Handler.

        * tao/Transport.h:
        * tao/Transport.cpp: Added a virtual method reactor_signalling
          (). This method returns a value of 1 if the protocol happens to
          use the reactor for signalling and 0 otherwise. The default
          implementation returns a value of 0.

        * tao/Strategies/SHMIOP_Transport.h:
        * tao/Strategies/SHMIOP_Transport.cpp: Implemenetd reactor_signalling
          () to return 1.

        * tao/orbconf.h: Enabled SHMIOP.

Mon Feb 19 11:26:05 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Sequence_T.i:
        * tao/Seuqence_T.cpp:

          Uninlined the operator const T_var () const for TAO_Object_Manager.
          The T::_duplicate method call is not yet defined if the inline
          operator is used on an interface from IFR_Client. This was
          causing a problem on the VxWorks and old g++ builds. Thanks
          to Carlos for the suggestion.

Mon Feb 19 09:59:01 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Quoter/Makefile:
          TAO_IDLFLAGS was redefined, losing all the global settings.

        * tao/Object_Loader.h:
          Must include "tao/Exception.h" to satisfy more strict ANSI-C++
          compilers: the new throw spec uses CORBA::SystemException, so a
          forward declaration is not enough.

Sun Feb 18 15:01:09 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Object_Loader.h:
          Add CORBA::SystemException to create_object()'s throw spec.

        * tao/RT_ORB_Loader.h:
        * tao/RT_ORB_Loader.cpp:
          Use the more lenient throw spec in the RT_ORB_Loader class.
          Only the Borland C++ compiler caught this problem. I believe the
          current solution is the "Right Thing"[tm], it is always possible
          for a load operation to fail.

Sun Feb 18 16:56:33 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * orbsvcs/IFR_Service/Makefile.BE:
        * orbsvcs/IFR_Service/Makefile.TypeCodeFactory:
          Added -I(TAO_ROOT)/tao to LDFLAGS to remove warnings under cxx
          on Tru64.

Sun Feb 18 16:28:45 2001  Chris Gill  <cdgill@cs.wustl.edu>

        * examples/Simulator/DOVEBrowser/NS_Resolve.java: removed
          dependency on com.infoglide package.

Sun Feb 18 14:28:44 2001  Carlos O'Ryan  <coryan@cs.wustl.edu>

        * orbsvcs/orbsvcs/Naming/Naming_Context_Interface.h:
        * orbsvcs/orbsvcs/Naming/Naming_Context_Interface.cpp:
          Workaround problems in the RedHat-7.0 version of the g++
          compiler.  I refactored code to make it simpler, it helps humans
          and it seems to help this compiler too.

Sun Feb 18 10:33:47 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/EC_Throughput/ECT_Supplier_Driver.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer_Driver.cpp:
          Fixed memory leaks in the test.

Sun Feb 18 03:37:33 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * orbsvcs/IFR_Service/Makefile.IFR_Service (IFR_SVR_OBJS):
        Added -I(TAO_ROOT)/tao to LDFLAGS to appease cxx on Tru64.

Sun Feb 18 03:33:52 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tests/Smart_Proxies/On_Demand/Makefile:
        Added -I$(TAO_ROOT)/tao to LDFLAGS to appease cxx on Tru64.

Sun Feb 18 03:22:01 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tests/Smart_Proxies/Makefile (LDFLAGS):
        Added -I$(TAO_ROOT)/tao to LDFLAGS to appease cxx on Tru64.

Sat Feb 17 23:08:44 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp: Fixed a problem that showed up
          only in EC_throughput. When multiple messages were read out of
          the socket and processed, sometime we could be left with
          messages that are not even the size of GIOP header length. Added
          a conditional check for this case. This fixes the problem in
          EC_Throughput.

Sat Feb 17 20:38:10 2001  Darrell Brunsch <brunsch@uci.edu>

        * TAO_INSTALL.html: Added GPERF building to unix instructions.

Sat Feb 17 19:21:54 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/tests/Notify/Basic/Basic.dsw:
        * orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsw:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.dsw:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.dsw:

          Added workspaces for these directories to make it easier to
          compile each of these directories separately.

        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.dsp:
        * orbsvcs/tests/Notify/Basic/Events_Test.dsp:
        * orbsvcs/tests/Notify/Basic/IdAssignment.dsp:
        * orbsvcs/tests/Notify/Basic/LifeCycleTest.dsp:
        * orbsvcs/tests/Notify/Basic/Simple.dsp:
        * orbsvcs/tests/Notify/Basic/Updates.dsp:
        * orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.dsp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.dsp:

          Fixed the multiple problems in these project files.

Sat Feb 17 13:39:30 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Single_Read/test_i.cpp: Added a sleep between incoming
          requests.

Sat Feb 17 12:44:30 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/orbconf.h: Disabled SHMIOP for the upcoming beta. SHMIOP
          does not work with the single read optimizations that have been
          integrated in to TAO. This will be enabled after the beta when
          we have a fix.

Fri Sat 17 11:49:29 2001  Pradeep Gore <pradeep@cs.wustl.edu>

        * orbsvcs/tests/Notify/lib/TAO_NotifyTests.dsp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.dsp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.dsp:
        * orbsvcs/examples/Notify/Filter/Filter.dsp:
        * orbsvcs/examples/Notify/Subscribe/Subscribe.dsp:
          Modified include settings in these projects.

        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.h:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
          Modified event loop to use work-pending/perform-work.

Fri Feb 16 20:12:52 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tests/Smart_Proxies/Makefile:
          Added -I$(TAO_ROOT)/tao to CPPFLAGS to comfort cxx on Tru64 so
          that it could get the template instantiations.

Fri Feb 16 18:42:29 2001  Pradeep Gore <pradeep@cs.wustl.edu>

        * orbsvcs/examples/Notify/Filter/Filter.dsp
        * orbsvcs/examples/Notify/Subscribe/Subscribe.dsp
        * orbsvcs/tests/Notify/Basic/AdminProperties_Test.dsp
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.dsp
        * orbsvcs/tests/Notify/Basic/Events_Test.dsp
        * orbsvcs/tests/Notify/Basic/IdAssignment.dsp
        * orbsvcs/tests/Notify/Basic/LifeCycleTest.dsp
        * orbsvcs/tests/Notify/Basic/Simple.dsp
        * orbsvcs/tests/Notify/Basic/Updates.dsp
        * orbsvcs/tests/Notify/lib/Notify_Test_Client.h
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen.dsp
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.dsp
          Updated include paths, exported class Notify_Test_Client

Fri Feb 16 15:26:29 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * examples/Simulator/DOVEBrowser/NS_Resolve.java:
          Cleaned up the code a bit.  Thanks to Kevin Regan
          <kregan@infoglide.com> for contributing this.

Fri Feb 16 15:06:17 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Handler.cpp: Fixed a problem in the case when
          multiple one way messages were read from the socket. All the
          complete calls got processed correctly. One of the incomplete
          calls at the boundary was not processed properly. This should
          fix the reliable one way test failures.

Fri Feb 16 11:09:41 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Makefile:

          Moved IFR_Client_Adapter from INTERFACE_REPO_FILES
          to ORB_CORE_FILES, since Object and LocalObject use
          the adapter, and the IFR is forcefully disabled on
          some platforms. Thanks to Carlos for the suggestion.

Fri Feb 16 10:53:45 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/IDL_Test/nested_scope.idl:

          Renamed an interface definition in this file to avoid a
          name clash with a module in another IFL file in this
          test.

Fri Feb 16 09:41:54 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * tests/IDL_Test: Added a new Makefile.bor.  Thanks to
          Johnny Willemsen for this.

Fri Feb 16 02:28:19 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tests/Exposed_Policies/Policy_Verifier.h:
        * tests/Exposed_Policies/Policy_Verifier.cpp:

          Fixed false warning message that used to detect that
          the number of bands was not correct.

Thu Feb 15 19:23:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * examples/POA/Default_Servant/File_i.cpp:

          Changed the use of 0644 for open permissions to
          ACE_DEFAULT_FILE_PERMS.  On Win32, 0644 causes ACE_OS::open
          to fail.

        * examples/Load_Balancing/service.dsp:

          Changed the output file from service.exe to load_balancer.exe
          to match what the Makefile does.

        * tests/Exposed_Policies/run_test.pl:

          Test wasn't waiting between starting server and client, thus it
          usually would fail.

        * examples/POA/Default_Servant/run_test.pl:
        * examples/Load_Balancing/run_test.pl:
        * tests/Exposed_Policies/run_test.pl:

          Updated to use PerlACE::Run_Test.

Thu Feb 15 13:19:47 2001  Ossama Othman  <ossama@uci.edu>

        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Client.cpp
          (cube_any, cube_any_struct):

          Fixed a problem where the result check would always fail since
          the Any that owned the result was delete()d too early.  delete()
          the Any after the result check.

        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.cpp
          (send_request, receive_request_service_contexts):

          Sequence buffers to be released by the sequence should be
          allocated with the allocbuf() member, not the new() operator.
          Corrected the buffer allocations in these methods accordingly.

Thu Feb 15 14:20:07 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tests/IDL_Test/Makefile:
        * tests/IDL_Test/namespace_check.cpp:

          Added code generated from two additional IDL files
          (params.idl and nested_scope.idl) to the list of
          file skipped by compilers that either don't support
          namespaces (SunCC4.2 and old g++) or have broken
          typedefs (old g++). The two IDL files added to the
          conditional list have nested modules, and old g++'s
          broken typedef cannot compile the generated code.

Thu Feb 15 13:43:50 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/util/utl_scope.cpp:

          Fixed lookup function to handle the case where the scoped
          name we are looking up begins with an interface, and the
          actual item is in a base class of that interface. Previously,
          only base classes of the scope where the lookup was initiated
          (if it is an interface) were checked. Thanks to
          Doug Warner <dougwarner@micron.com> for sending in the
          example IDL file that pointed this out.

        * tests/IDL_Test/interface.idl:

          Added a modified version of the example IDL file to the
          test suite.

Thu Feb 15 11:47:53 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/Stub.cpp (parse_policies):
          Removed extra parenthesis and changed index type to CORBA::ULong
          in the policy list. This should definitively fix the
          error/warning on any platform. Thanks to Jeff for the hint.

Thu Feb 15 11:09:50 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tao/PortableServer/POA.cpp (key_to_stub_i):
          Added missing clause for handling the case when the priority
          of the object being created differ from the priority of the POA
          in the SERVER_DECLARED priority model, and there are priority
          bands.

        * tao/Stub.cpp:
          Fixed compilation error on some platform caused by a wrong
          de-referencing of a var type.

Thu Feb 15 10:47:18 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:

          Minor change to code that creates an octet sequence _var to avoid
          warnings in the Debian builds when compiling generated code for
          the AMI test.

Thu Feb 15 06:02:55 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * orbsvcs/orbsvcs/Naming/Bindings_Iterator_T.cpp (next_one):
          Initialize the hash_entry pointer to 0 to avoid a warning from
          Compaq C++.

Thu Feb 15 00:22:42 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp (process_message):

          Merged Michael's reply dispatcher related changes from:
          "Wed Feb 14 16:30:23 2001  Michael Kircher  <...>" below into
          the SSLIOP pluggable protocol.

Wed Feb 14 20:59:00 2001  Pradeep Gore <pradeep@cs.wustl.edu>

        * orbsvcs/examples/notify/Notify_Examples.dsw:
        * orbsvcs/examples/notify/Filter/Filter.dsp:
        * orbsvcs/examples/notify/Subscribe/Subscribe.dsp:
        * orbsvcs/tests/notify/Notify_Tests.dsw:
        * orbsvcs/tests/notify/basic/AdminProperties_Test.dsp:
        * orbsvcs/tests/notify/basic/ConnectDisconnect.dsp:
        * orbsvcs/tests/notify/basic/Events_Test.dsp:
        * orbsvcs/tests/notify/basic/IdAssignment.dsp:
        * orbsvcs/tests/notify/basic/LifeCycleTest.dsp:
        * orbsvcs/tests/notify/basic/Simple.dsp:
        * orbsvcs/tests/notify/basic/Updates.dsp:
        * orbsvcs/tests/notify/lib/TAO_NotifyTests.dsp:
        * orbsvcs/tests/notify/performance-tests/Throughput/Throughput.dsp:
        * orbsvcs/tests/notify/performance-tests/RedGreen/RedGreen.dsp:
          Added Notification tests and example project files for Windows.

Wed Feb 14 16:30:23 2001  Michael Kircher  <Michael.Kircher@mchp.siemens.de>

        * tao/Muxed_TMS.cpp: Changed the return value in the case of a
          not found reply dispatcher from -1 to 0. The semantics of the
          return values is 1, for success, 0, for a not found reply dispatcher
          (which is not critical, as this can easily happen with timeouts), and
          -1 on a critical error.
          Added in-source documentation for this.

        * tao/Exclusive_TMS.cpp: Documented the return value, see description
          for Muxed_TMS.cpp.

        * tao/IIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.cpp:
          Changed return path of the method <process_message>.
          In the case that we could not find the right reply dispatcher because
          of a (meanwhile) invalid reply ID, we continue processing messages
          instead of giving up processing.
          This should fix the problem with the tao/tests/Timeout test.

        * tao/Wait_On_Leader_Follower.cpp:
          Added code to remove the leader follower condition variable in the
          case of a timeout. This should fix a bug, where the condition
          variable of the follower thread kept being registered
          with the leader follower model while it went already away.

Wed Feb 14 15:36:23 2001  Pradeep Gore  <pradeep@cs.wustl.edu>

        * docs/orbsvcs.html: Added the Notification Service and it's tests
          into this page.Thanks to Samuel Qi Luo
          <Samuel.QiLuo@ericsson.com.au> for pointing out the missing
          documentation.

        * docs/releasenotes/index.html: Updated Notify Status.

Wed Feb 14 14:58:28 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:

          Removed use of a typedef for _tao_seq_Octet that is guarded
          from g++ versions earlier than 2.8. Also replace use of 'new'
          with 'ACE_NEW'.

Wed Feb 14 11:49:17 2001  Ossama Othman  <ossama@uci.edu>

        * tao/CORBALOC_Parser.cpp (make_stub_from_mprofile):

          Fixed "better conversion sequence" warning issued by g++ by
          using the ".in()" accessor method.

Wed Feb 14 11:34:55 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Pluggable.cpp (make_mprofile):

          Decrease the reference count on the profile before returning
          with an exception on error.  Fixes a memory leak.

        * tao/CORBALOC_Parser.h (parse_string_mprofile_helper):
        * tao/CORBALOC_Parser.cpp (parse_string_mprofile_helper):

          Changed CORBA::String_var parameter that was passed in by copy
          to a const char *.  There was no point in passing in a
          CORBA::String_var.

          Added missing ACE_CHECK macro.

          (make_stub_from_mprofile, parse_string_rir_helper ):

          Fixed potential memory leak and improved exception safety.

          (parse_string):

          Removed unnecessary use of a CORBA::ORB_var, in addition to the
          useless duplication of the ORB reference.

        * tao/orbconf.h:

          Removed "PriorityMappingManager" from the list of initial
          services.  There is no need to list it in the static initial
          services since it is registered when the RTCORBA support is
          loaded into the ORB.

        * tests/InterOp-Naming/run_test.pl:

          Updated test script to excercise additional INS features to make
          it possible to catch more problems in TAO's INS support, should
          they exist.

Wed Feb 14 13:00:28 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Profile.h:
        * tao/IIOP_Endpoint.h:
        * tao/IIOP_Endpoint.i:
        * tao/Strategies/UIOP_Profile.h:
        * tao/Strategies/UIOP_Endpoint.h:
        * tao/Strategies/UIOP_Endpoint.i:
        * tao/Strategies/SHMIOP_Profile.h:
        * tao/Strategies/SHMIOP_Endpoint.h:
        * tao/Strategies/SHMIOP_Endpoint.i: Removed the references to the
          obsolete Client_Connection_Handlers.

Wed Feb 14 09:50:18 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/IIOP_Acceptor.cpp:
        * tao/IIOP_Acceptor.h:
          Updated TAO_IIOP_Acceptor::open and TAO_IIOP_Acceptor::hostname
          to use the specified endpoint hostname instead of always
          resolving the hostname and then looking it back up for what to
          put in the IOR.  This fixed a problem on Windows 2000 when the
          user specified an endpoint having the hostname "localhost".
          This would end up causing the actual hostname of the computer
          to be put into the IOR, but the server would bind to 127.0.0.1.
          As a result, clients wouldn't be able to connect to the server.
          This fix partially addresses bugzilla bug 506.

Wed Feb 14 07:13:12 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Quoter/Quoter_i.cpp:
          Fixed use of ACE_THROW.

Tue Feb 13 18:44:19 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Event/EC_Reactive_Timeout_Generator.cpp:
          Reset the reactor after deactivating the timeout adapter,
          otherwise it tries to use it during shutdown, but at that point
          the reactor is already destroyed.

Tue Feb 13 17:42:16 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/Event/Performance/Latency.dsp:
        * orbsvcs/tests/Event/Performance/Latency_Server.dsp:
          Add missing library

Tue Feb 13 17:37:54 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Quoter/Makefile:
          Nothing was building under Unix.

        * examples/Quoter/Factory_Finder.cpp:
        * examples/Quoter/Generic_Factory.cpp:
        * examples/Quoter/server.cpp:
          More fixes for ORB::run()

Tue Feb 13 17:24:43 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/EC_Custom_Marshal/ECM_Consumer.h:
        * orbsvcs/tests/EC_Custom_Marshal/ECM_Consumer.cpp:
          Fixed problems with the ORB::run() method

        * orbsvcs/tests/EC_Custom_Marshal/Makefile:
          Fixed dependencies, my builds failed to recompile some files in
          this directory even after the ORB::run() changes, thus the
          previous problem went undetected.

Tue Feb 13 12:54:33 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RT_ORB.h:
          Changed TAO_RT_ORB to inherit from TAO_Local_RefCounted_Object
          to fix memory leak found with Purify.

Tue Feb 13 09:48:53 2001  Ossama Othman  <ossama@uci.edu>

        * performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Client.cpp
          (cube_any, cube_any_struct):

          Call delete() on the returned Any once it is no longer needed.
          This fixes a memory leak.  The caller is responsible for
          storage.

Tue Feb 13 11:25:19 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/Makefile:

          Added guard to prevent the Interface Repository tests
          from being compiled under SunCC4.2, which does not
          support namespaces.

Tue Feb 13 11:37:03 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/ORB.cpp:
          Changed ACE_CHECK_RETURN macros to be ACE_CHECK in
          ORB::run() and ORB::perform_work().

Tue Feb 13 09:17:30 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/ORB.h:
        * tao/ORB.cpp:
          The spec says that ORB::run() and ORB::perform_work() return
          void.  If there are errors an exception is raised.  Having both
          exceptions and error codes only results in confusing and broken
          code.
          This fixes bug #785

        * tao/PortableServer/ORB_Manager.cpp:
        * examples/Borland/ORBThread.cpp:
        * examples/Buffered_AMI/client.cpp:
        * examples/Buffered_AMI/server.cpp:
        * examples/Buffered_Oneways/client.cpp:
        * examples/Buffered_Oneways/server.cpp:
        * examples/Callback_Quoter/Consumer_Handler.cpp:
        * examples/Callback_Quoter/Notifier_Input_Handler.cpp:
        * examples/Callback_Quoter/Supplier_i.cpp:
        * examples/Event_Comm/Consumer_Handler.cpp:
        * examples/POA/Adapter_Activator/server.cpp:
        * examples/POA/DSI/server.cpp:
        * examples/POA/Default_Servant/server.cpp:
        * examples/POA/Explicit_Activation/server.cpp:
        * examples/POA/Forwarding/server.cpp:
        * examples/POA/Loader/Server_Manager.cpp:
        * examples/POA/On_Demand_Activation/server.cpp:
        * examples/POA/On_Demand_Loading/Server_Manager.cpp:
        * examples/POA/Reference_Counted_Servant/server.cpp:
        * examples/POA/TIE/server.cpp:
        * examples/Simulator/Event_Supplier/Event_Con.cpp:
        * orbsvcs/CosEvent_Service/CosEvent_Service.cpp:
        * orbsvcs/Event_Service/Event_Service.cpp:
        * orbsvcs/IFR_Service/IFR_Service.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:
        * orbsvcs/ImplRepo_Service/NT_Service.cpp:
        * orbsvcs/ImplRepo_Service/tao_imr_i.cpp:
        * orbsvcs/LifeCycle_Service/LifeCycle_Service.cpp:
        * orbsvcs/Logging_Service/Logging_Service.cpp:
        * orbsvcs/Naming_Service/NT_Naming_Server.cpp:
        * orbsvcs/Naming_Service/Naming_Service.cpp:
        * orbsvcs/Notify_Service/Notify_Service.cpp:
        * orbsvcs/Time_Service/Server_i.cpp:
        * orbsvcs/examples/CosEC/RtEC_Based/bin/RtEC_Based_CosEC.cpp:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Multiple.cpp:
        * orbsvcs/examples/Security/Send_File/server.cpp:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp:
        * orbsvcs/tests/AVStreams/Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/Latency/control.cpp:
        * orbsvcs/tests/AVStreams/Latency/ping.cpp:
        * orbsvcs/tests/AVStreams/Latency/pong.cpp:
        * orbsvcs/tests/AVStreams/Multicast/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/benchmark/server.cpp:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.cpp:
        * orbsvcs/tests/Event/Performance/Latency.cpp:
        * orbsvcs/tests/Event/Performance/Latency_Server.cpp:
        * orbsvcs/tests/Event/Performance/Makefile:
        * orbsvcs/tests/FaultTolerance/IOGR/Manager.cpp:
        * orbsvcs/tests/ImplRepo/airplane_client.cpp:
        * orbsvcs/tests/ImplRepo/airplane_server.cpp:
        * orbsvcs/tests/ImplRepo/nestea_server_i.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/server.cpp:
        * orbsvcs/tests/ior_corbaname/server.cpp:
        * performance-tests/Callback/Callback_i.cpp:
        * performance-tests/Callback/Callback_i.h:
        * performance-tests/Callback/Server_i.cpp:
        * performance-tests/Callback/Server_i.h:
        * performance-tests/Callback/callback.idl:
        * performance-tests/Callback/client.cpp:
        * performance-tests/Latency/client.conf:
        * performance-tests/Latency/st_client.conf:
        * performance-tests/POA/Demux/demux_test_server.cpp:
        * performance-tests/RTCorba/Oneways/Reliable/server.cpp:
        * performance-tests/Thruput/TAO/server.cpp:
        * tests/AMI/server.cpp:
        * tests/AMI_Timeouts/client.cpp:
        * tests/AMI_Timeouts/server.cpp:
        * tests/AMI_Timeouts/timeout_client.cpp:
        * tests/BiDirectional/client.cpp:
        * tests/BiDirectional_NestedUpcall/server.cpp:
        * tests/DSI_Gateway/gateway.cpp:
        * tests/DSI_Gateway/server.cpp:
        * tests/Faults/middle.cpp:
        * tests/Faults/ping.cpp:
        * tests/Faults/pong.cpp:
        * tests/Faults/server.cpp:
        * tests/Forwarding/server.cpp:
        * tests/InterOp-Naming/Server_i.cpp:
        * tests/Leader_Followers/client.cpp:
        * tests/Leader_Followers/server.cpp:
        * tests/LongUpcalls/AMI_Manager.cpp:
        * tests/LongUpcalls/ami_client.cpp:
        * tests/LongUpcalls/ami_server.cpp:
        * tests/LongUpcalls/blocking_server.cpp:
        * tests/MProfile/server.cpp:
        * tests/MProfile_Forwarding/Manager.cpp:
        * tests/MProfile_Forwarding/server.cpp:
        * tests/MT_Client/server.cpp:
        * tests/MT_Server/server.cpp:
        * tests/Native_Exceptions/server.cpp:
        * tests/NestedUpcall/Simple/server.cpp:
        * tests/Nested_Event_Loop/server.cpp:
        * tests/OctetSeq/server.cpp:
        * tests/Param_Test/server.cpp:
        * tests/Single_Read/server.cpp:
        * tests/Smart_Proxies/server.cpp:
        * tests/Smart_Proxies/On_Demand/server.cpp:
        * tests/Strategies/server.cpp:
        * tests/Timed_Buffered_Oneways/server.cpp:
        * tests/Timeout/client.cpp:
        * tests/Timeout/server.cpp:
        * tests/ior_corbaloc/server.cpp:
          Don't check for return code from ORB::run()

        * tests/ior_corbaloc/Makefile:
          Reorder libraries, -lTAO_CosNaming should appear *before*
          -lTAO.

Tue Feb 13 09:16:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/Forwarder.cpp:

          Initialized forward_obj to remove warnings.

Tue Feb 13 09:09:01 2001  Carlos O'Ryan  <coryan@uci.edu>

        * TAO-INSTALL.html:
          Document and IMHO slightly better way to configure TAO for
          cross-compilation environments.

Tue Feb 13 10:17:35 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RT_ORB.cpp:
          Fixed broken template instantiation.

Tue Feb 13 01:14:26 2001  Ossama Othman  <ossama@uci.edu>

        * tao/RT_ORB.cpp (create_named_mutex):

          Fixed misuse of ACE_THROW macro.  ACE_THROW_RETURN is the
          correct macro.  Fixes a compile-time problem.

        * tao/ORB_Core.i (poa_current):

          If the cached POACurrent reference is nil then initialize the
          RootPOA.  Doing so causes the POACurrent object to be
          initialized and cached in the ORB Core.  Fixes problems where it
          wasn't possible to obtain the POACurrent reference before the
          RootPOA reference.

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_ORBInitializer.cpp (pre_init):

          Moved registration of "SSLIOPCurrent" object reference to the
          ORBInitializer::pre_init() method so that it is available to
          the resolve_initial_references() mechanism in
          ORBInitializer::post_init().

Mon Feb 12 22:52:34 2001  Frank Hunleth <fhunleth@cs.wustl.edu>

        * tao/RT_Mutex.h:
        * tao/RT_Mutex.cpp:
        * tao/RT_ORB.cpp:
        * tao/RT_ORB.h:
        * tests/RTCORBA/RTMutex/server.cpp:
          Changed named mutexes to conform more closely to Win32 named
          mutex semantics.  Also simplified and cleaned up most of the
          RT Mutex code.  Thanks to Irfan for much help.

Mon Feb 12 18:53:05 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/ior_corbaname/Makefile:
          Add missing file to the list of sources for make depend.  This
          should fix some intermittent failures in our nightly builds.

Mon Feb 12 13:14:24 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/Makefile:

          Added guard to prevent SunCC4.2, which does not
          support namespaces, from compiling the Interface
          Repository, which requires them.

Sun Feb 11 23:45:41 2001  Ossama Othman  <ossama@uci.edu>

        * tao/RT_ORBInitializer.cpp (register_policy_factories):

          Fixed "unused parameter" warning that occured when native
          exceptions were enabled.

2001-02-12  Yamuna Krishnamurthy  <yamuna@ace.cs.wustl.edu>
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/server.cpp:

        * orbsvcs/tests/AVStreams/Multicast/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast/serevr.cpp:

        * orbsvcs/tests/AVStreams/Full_Profile/server.cpp:
        * orbsvcs/tests/AVStreams/Full_Profile/ftp.cpp:

        * orbsvcs/tests/AVStreams/Latency/pong.cpp:
        * orbsvcs/tests/AVStreams/Latency/ping.cpp:

        * orbsvcs/tests/AVStreams/Pluggable/server.cpp:
        * orbsvcs/tests/AVStreams/Pluggable/ftp.cpp:

        * orbsvcs/tests/AVStreams/benchmark/server.cpp:
        * orbsvcs/tests/AVStreams/benchmark/client.cpp:

        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.cpp:
        * orbsvcs/orbsvcs/AV/Endpoint_Strategy_T.h:

          Added an init method to the endpoint strategies to initialize
          the orb and poa and hence fix the SUNCC5 compile errors.

Mon Feb 12 00:28:26 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/Strategies/SHMIOP_Acceptor.cpp (open): Added error detection
          to make sure we have something that looks like a port number.
          Otherwise, don't open the acceptor.

        * docs/ORBEndpoint.html:
        * docs/Options.html: Fixed incorrect shmiop endpoint examples.  A
          shmiop endpoint should be the form "shmiop://1234", not
          "shmiop://:1234".                                     [Bug 686]

Sun Feb 11 18:33:47 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/tests/ImplRepo/nestea_i.cpp:

          The problem with the nestea test on Redhat was that the server
          was crashing (but the perl script seemed to hide that).  Thanks
          to Mountain Dew <mountaindew@mountaindew.com> for assisting in
          this debugging session.

          [Bug 495]

Sun Feb 11 17:06:06 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Priority_Mapping_Manager.h (~TAO_Priority_Mapping_Manager):
        * tao/RT_Current.h (~TAO_RT_Current):

          Made destructor protected instead of private.  This fixes a
          compile-time warning about the fact that the class had a private
          destructor but had no friends.

        * tao/RT_Current.cpp (the_priority):

          Corrected typo.

Sun Feb 11 16:52:55 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Connection_Cache_Manager.cpp
          (TAO_Connection_Cache_Mananger):

          Initialize the lock pointer to zero in the base member
          initializer list.  Fixes an access violation that occured upon
          premature destruction of the Connection_Cache_Manager.  This
          also makes it possible to determine if
          Connection_Cache_Manager::open() was ever called.

        * tao/Connection_Cache_Manager.inl (close):

          Do not attempt to close the connection cache manager if the lock
          pointer is zero.  Such a condition implies that the connection
          cache was never open()ed.

        * tao/ORB.h:
        * tao/ORB.cpp (resolve_priority_mapping_manager):

          Removed resolve_priority_mapping_manager() helper method.  It is
          no longer needed since the RT_ORBInitializer registers the
          "PriorityMappingManager" reference with the ORB.

        * tao/ORB_Core.h (priority_mapping_manager_):

          This class member is now a local member, instead of a static
          one.  This fixes access violations that occured in the presence
          of multiple ORBs.

          It is also now a "_var".  This cleans up several memory
          management issues.

          (root_poa_):

          Changed this class member from "_var" to a "_ptr".  The code
          from which this reference is obtained
          (TAO_Object_Adapter::root()) does not duplicate the RootPOA
          reference, so the ORB Core should not attempt to release it.
          Rather than duplicate the reference in the ORB core, the code
          from which the RootPOA reference is obtained should perform the
          duplication.  For now, the class member will remain a "_ptr".

          (rt_orb_, rt_current_):

          Changed this class member from "_var" to a "_ptr".  This
          addresses some memory leaks.

        * tao/ORB_Core.cpp (TAO_ORB_Core):

          Initialize the RootPOA reference to the nil reference in the
          base member initializer list.

          (~TAO_ORB_Core):

          Do not call delete() on the PolicyManager and PolicyCurrent
          object references.  They are reference counted.  As such, call
          CORBA::release() on them.  Fixes memory violations due to
          attempts to release dangling references/pointers.

          (fini):

          No need to explicitly release the PriorityMappingManager
          reference.  It will be released by the "_var" it is stored in
          when the ORB Core is destroyed.

          (root_poa):

          The root_poa_ member is no longer a "_var".  Adjusted all
          references to this member accordingly (i.e., removed the ".in()"
          calls).

          (priority_mapping_manager):

          Obtain the PriorityMappingManager object reference from the
          Object_Ref_Table, if it hasn't already been cached in the ORB
          Core.

          Removed method that sets the reference to the
          PriorityMappingManager object.  It is longer needed since each
          ORB now has its own PriorityMappingManager.

          These two changes address memory access violations that occured
          in the presence of multiple ORBs.

        * tao/ORB_Core.i (rt_orb):

          The rt_orb_ class member is now "_var".  Updated code to use
          ".in()" accessors.

          (rt_current):

          Make sure the RTORB has been initialized prior to returning the
          reference to the RTCurrent object.  This is necessary since
          RTORB initialization causes the RTCurrent object to be
          initialized as well.

        * tao/RT_Current.h (TAO_RT_Current):

          Derive this class from the reference counted version of
          CORBA::LocalObject, i.e., the "TAO_Local_RefCounted_Object"
          extension.  This addresses memory management issues.

        * tao/Priority_Mapping_Manager.h (TAO_Priority_Mapping_Manager):
        * tao/RT_Current.h (~TAO_RT_Current):
        * tao/RT_Mutex.h (~TAO_RT_Mutex):

          Made destructor private to enforce proper memory management of
          this reference counted object.

        * tao/RT_Current.cpp (the_priority):

          Check the return value of the call to
          {get,set}_thread_priority().  It isn't enough just to check for
          exceptions.

        * tao/RT_ORB.cpp (create_named_mutex):

          Do not call delete() on a reference counted object.  The code
          now properly calls CORBA::release() on the object.

          Added missing ACE_CHECK_RETURN macro.

        * tao/RT_ORBInitializer.h:

          The RTCORBA policy factory is stateless and reentrant, so share
          a single instance between all ORBs.

        * tao/RT_ORBInitializer.cpp (pre_init):

          Register the "PriorityMappingManager" object reference with the
          ORB's resolve_initial_references() mechanism.

          (post_init):

          Do not instantiate the RT policy factory.  It is now a
          TAO_RT_ORBInitializer class member (stack allocated).

        * tao/RT_ORB_Loader.h (set_objects):

          Made this helper method protected.  There is no reason why it
          should be public.

        * tao/RT_ORB_Loader.cpp (create_object):

          Use ACE_NEW_THROW_EX instead ACE_NEW_RETURN.

          Store RTORB reference in a CORBA::Object_var and relinquish
          ownership upon return to the caller.  This improves exception
          safety of this method.

          (set_objects):

          Use ACE_NEW_THROW_EX instead of the raw "new()" operator.

        * tao/RT_PolicyFactory.h (TAO_RT_PolicyFactory):

          Derive from CORBA::LocalObject to make reference counting a
          no-op.  The TAO_RT_PolicyFactory is now stack allocated.

        * tao/RT_Policy_i.h:

          Made all policy and property class destructors protected to
          enforce proper memory management of those reference counted
          objects.

        * tao/RT_Protocols_Hooks.cpp (set_priority_mapping):

          If the reference to the PriorityMappingManager is nil, then
          throw a CORBA::INV_OBJREF exception, i.e., don't just die
          quietly.

          (set_default_policies):

          Store the newly allocated ServerProtocolPolicy and
          ClientProtocolPolicy objects in their corresponding "_var"
          objects.  This fixes memory leaks, in addition to making the
          code exception safe.

Sun Feb 11 14:44:24 2001  Darrell Brunsch <brunsch@uci.edu>

        * tao/orbconf.h:

          On AIX, define TAO_USE_SEQUENCE_TEMPLATES.  Thanks to Scott Bolin
          <scott.bolin@pgs.com> for the fix.  [Bug 767]

        * tao/Exception.cpp:
        * tao/corbafwd.h:
        * orbsvcs/ImplRepo_Service/ImplRepo_i.cpp:

          Changed the minor code TAO_IMPLREPO_SERVER_MANUAL_ACTIVATION to
          TAO_IMPLREPO_MINOR_CODE, so I can now use it for ImR exceptions in
          general.

        * tao/PortableServer/POA.cpp:
        * orbsvcs/ImplRepo_Service/Forwarder.cpp:

          As reported by Mark L Boriack <mboriack@std.saic.com> in [Bug 724],
          the ImplRepo_Service and POA code was letting through ImR specific
          exceptions, even when throw specs didn't allow it.  I added catch
          blocks to translate to TRANSIENT exceptions, when appropriate.

Fri Feb  9 18:11:35 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/README.txt:

          Added a new page just for using the Naming Service with the
          ImR.  THe page should show up on

          http://doc.ece.uci.edu/Doxygen/Current/html/tao/implrepo_service/pages.html

          in the next couple of days.

Fri Feb  9 11:38:06 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/PortableServer/Servant_Base.cpp:
          Fixed problem with expressions like:

          PortableServer::ServantBase_var foo = ...;
          foo = foo.in ();

          they used to crash.  Thanks to Jody Hagins <jody@atdesk.com> for
          pointing this out.

Fri Feb  9 11:35:17 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/tests/Interoperable_Naming/client.cpp:
          Fixed warning about unreachable statement

Fri Feb  9 12:13:44 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:

          Created duplicates of streamendpoint _ptrs before assigning them
          to _vars.

          Thanks to Bruce McIntosh<Bruce.McIntosh@Australia.Boeing.com>
          for suggesting this.

Thu Feb  8 18:47:52 2001  Ossama Othman  <ossama@uci.edu>

        * tao/MProfile.cpp (init_policy_list):

          Added missing ACE_CHECK macro.

Thu Feb  8 18:34:15 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.cpp (create_stub_object):

          Fixed misuse of ACE_CHECK.  ACE_CHECK_RETURN should have been
          used.

        * tao/MProfile.cpp:
        * tao/Stub.cpp:

          Added missing ACE_CHECK_RETURN macros.

          Fixed build errors and warnings.

        * tao/Profile.cpp:

          Fixed build warnings.

Thu Feb  8 20:00:49 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/InterfaceS.cpp:

          Chnages corresponding to the changes to generated
          code in the the entry below.

Thu Feb  8 19:22:00 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_visitor_root/root.cpp:

          Added #ifndef guards agains including the skeleton
          source file more than once, similar to the generated
          header files and skeleton template source file. When
          the _tie classes (which are templates) are used in a
          service or application, the SunCC compiler tries to
          compile the skeleton source file twice, even though
          it contains no template code.

          Also consolidated several occurrences of the code
          block that generates the #ifndef clause (with minor
          variations) into a separate function.

Thu Feb 08 18:15:59 2001  Angelo Corsaro  <corsaro@cs.wustl.edu>

        * tests/Exposed_Policies/server.conf:
        * tests/Exposed_Policies/Object.cfg:
        * tests/Exposed_Policies/POA.cfg:
        * tests/Exposed_Policies/README:
        * tests/Exposed_Policies/run_test.pl:

          Added service configuration file to set up one ORB endpoint
          for each bands used in the server orb. Updated test specific
          configuration files.

        * tao/Invocation_Endpoint_Selectors.cpp:
        * tao/MProfile.cpp:
        * tao/MProfile.h:
        * tao/MProfile.i:
        * tao/ORB_Core.cpp:
        * tao/Profile.cpp:
        * tao/Profile.h:
        * tao/Stub.cpp:
        * tao/Stub.h:

          Added ACE_TRY_ENV to a bounch of methods that deal with
          policies, fixed some part of code that was leading to memory
          leaks.

        * tao/PortableServer/POA.cpp:

          In the method <key_to_stub_i> there was a bug that has currently
          been fixed, but more investigation is needed. The problem was
          that when an object was created with a priority that was
          overriding the POA priority, if that object also had lanes as
          policy then the stub would have not been created.


Thu Feb  8 14:53:07 2001  Darrell Brunsch <brunsch@uci.edu>

        * tests/AMI_Timeouts/AMI_Timeouts.dsw:

          Inserted client.dsp.

        * tests/AMI_Timeouts/client.dsp:
        * tests/AMI_Timeouts/server.dsp:

          Fixed/Added idl custom build commands.

Thu Feb  8 14:29:13 2001  Darrell Brunsch <brunsch@uci.edu>

        * tao/GIOP_Message_Handler.cpp:

          TAO_GIOP_Message_Handler::read_parse_message was checking
          the errno after trnasport->recv (..) and was masking out
          a ECONNRESET error.  In the ImR at least, this would cause
          the ImR + a server to get into an infinite loop.

          I removed this code so the error does get propogated up.

Thu Feb  8 12:21:35 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/stub.cpp:
        * tao/Policy_Manager.cpp:
          Fixed policy object reference counting in several places
          to fix bad pointer references when running the RT Corba
          Client Protocol Unit Test.  Thanks to Nanbor for most of
          the changes and thanks to Christian Ewald
          <christian.ewald@zuehlke.com> for reporting this.

Wed Feb  7 14:31:48 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/Makefile:
        * orbsvcs/IFR_Service/IFR_Service.cpp:
        * orbsvcs/IFR_Service/Makefile:
        * orbsvcs/IFR_Service/Servant_Locator.cpp:
        * orbsvcs/IFR_Service/Servant_Locator.h:
        * orbsvcs/tests/Makefile:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.h:

          Reverted changes to source files that guarded against
          minimum CORBA compilation. Instead, modified makefiles
          to skip the relevant directories.

Wed Feb  7 12:57:35 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Acceptor_Registry.cpp:
          Fixed redundant call to strtok_r in open_i when a protocol is
          specified without an endpoint.  This was causing core dumps on
          Linux platforms.  Thanks to Christian Ewald
          <christian.ewald@zuehlke.com> for reporting this.

Tue Feb  6 22:39:06 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Connection_Cache_Manager.cpp:
          Fixed core dump in close_i () that was being caused by
          unbinding hash map entries while iterating over the
          hash map.

Tue Feb 06 15:49:41 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO.dsw:
          Add several missing project files.

        * performance-tests/Latency/client.cpp:
          Fixed memory leak.

Tue Feb  6 16:34:16 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/tests/AVStreams/Multicast/ftp.cpp:

          Fixed compile warnings on SunCC42.

Tue Feb  6 10:20:02 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/IFR_Client_Adapter_Impl.h:

          Removed unnecessary inlclusion of corbafwd.h.

        * orbsvcs/IFR_Service/drv_arg_ifr.cpp:

          Removed unused function DRV_prep_cpp_arg().

Mon Feb  5 19:41:41 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.h (object_ref_table):

          Clarified the comment corresponding to this method.  It should
          be apparent what the returned table is used for.

        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.cpp (receive_request_service_contexts):

          Ignore the "_is_a" operation since it may have been invoked
          locally on the server side as a side effect of another call,
          meaning that the client hasn't added the service context yet.
          Fixes a test failure.

Mon Feb  5 16:48:10 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/IFR_Service.cpp:
        * orbsvcs/IFR_Service/Servant_Locator.cpp:
        * orbsvcs/IFR_Service/Servant_Locator.h:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.h:

          Added minimum CORBA guards around code that won't compile under
          minimum CORBA.

Mon Feb  5 15:57:54 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Object.cpp:
        * tao/Object.h:

          Moved the DII create_request methods inside the
          minimum CORBA guards, along with other methods in
          that class, and as is already the case in class
          LocalObject.

Mon Feb  5 15:13:53 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/Makefile:
        * orbsvcs/tests/Makefile:

          Added guards to keep the IFR_Service, tao_ifr and associated
          tests from being built with old g++. The TypeCodeFactory
          will still be built on all build configurations.

Mon Feb  5 12:33:44 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/Benchmark/interceptors.cpp
          (send_request):

          Corrected typo.  ACE_TRY_CHECK --> ACE_TRY_ENV.

Mon Feb  5 12:27:14 2001  Ossama Othman  <ossama@uci.edu>

        * tao/ORB_Core.cpp (fini):

          Removed debugging statement that accidentally got committed.

        * tests/Portable_Interceptors/Dynamic/interceptors.cpp
          (receive_request):

          Corrected use of TAO_ENV_ARG_DECL_NOT_USED macro.  The
          TAO_ENV_ARG_DECL macro should have been used instead.

Mon Feb  5 12:17:02 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp (TAO_Trading_Loader):

          Corrected typo.

Mon Feb 05 11:53:56 2001  Ossama Othman  <ossama@uci.edu>

        * tao/PortableInterceptor.pidl:
          Removed backslashes from comments.  Some compilers cannot handle
          them.

        * tao/Interceptor_List.cpp (add_interceptor):

          Removed comment about duplicating the interceptor reference
          passed in to the method.  The code does the right thing by
          duplicating the reference.

        * tao/ORB_Core.cpp (create_stub_object):

          Removed useless call to TAO_Profile::the_stub().  It sets the
          TAO_Stub pointer associated with the profile, yet the stub hasn't
          been initialized at this point in the code.  The stub pointer is
          set in each profile in the TAO_Stub constructor anyway.

          (init):

          Added missing ACE_CHECK_RETURN after call to RT_ORB_init().

        * tao/Profile.i (TAO_Profile):

          Initialize the stub_ pointer member to zero in the base member
          initializer list.  Previously it was not initialized.

        * orbsvcs/orbsvcs/Naming/Naming_Loader.cpp (init):

          Added missing ACE_TRY_CHECK after call to ORB_init().

        * orbsvcs/orbsvcs/Trader/Trading_Loader.cpp (TAO_Trading_Loader):

          Fallback on IP address if hostname lookup fails.

          (init):

          Fixed mismatched ACE_CHECK_RETURN inside ACE_TRY block.
          ACE_TRY_CHECK is the proper macro.

          (bootstrap_to_federation):

          Added missing CORBA::Environment argument and the accompanying
          ACE_CHECK_RETURN to the resolve_initial_references() call.

        * tests/Portable_Interceptors/Benchmark/Client_ORBInitializer.cpp
          (post_init):
        * tests/Portable_Interceptors/Benchmark/Server_ORBInitializer.cpp
          (post_init):
        * tests/Portable_Interceptors/Benchmark/interceptors.cpp:
        * tests/Portable_Interceptors/Dynamic/interceptors.cpp:
        * tests/Portable_Interceptors/Dynamic/client.cpp (main):

          Fixed memory leaks.

          Added missing ACE_CHECKs.

        * tests/Portable_Interceptors/Dynamic/server.cpp (main):

          Added missing ACE_TRY_CHECKs.

          Fixed mismatched use of ACE_CHECK_RETURN within an ACE_TRY
          block.

        * tests/Portable_Interceptors/IORInterceptor/FOO_ClientRequestInterceptor.h:

          Corrected class description.

Mon Feb  5 09:12:00 2001  Ossama Othman  <ossama@uci.edu>

        * docs/Options.html:

          Added missing "-ORBReactorType" argument descriptions.

Sun Feb  4 15:30:00 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * tests/AMI_Timeouts/client.cpp:
        * tests/AMI_Timeouts/client.dsp:
          Added the client side of the AMI timeout test.

Sun Feb  4 10:40:39 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/orbsvcs/Fault_Tolerance.dsp:

          Updated the TAO_IDL build line to not refer to POA_CORBA.h
          for the Release configurations.

Sun Feb  4 5:45:00 2001  Michael Kircher <Michael.Kircher@mchp.siemens.de>

        * tests/AMI_Timeouts:
          Created this directory to hold a new test for AMI in combination
          with roundtrip timeouts.

        * tests/AMI_Timeouts/AMI_Timeouts.dsw:
        * tests/AMI_Timeouts/server.dsp:
        * tests/AMI_Timeouts/server.bor:
        * tests/AMI_Timeouts/server.cpp:
        * tests/AMI_Timeouts/timeout.idl:
        * tests/AMI_Timeouts/timeout_i.h:
        * tests/AMI_Timeouts/timeout_i.cpp:
        * tests/AMI_Timeouts/timeout_client.h:
        * tests/AMI_Timeouts/timeout_client.cpp:
        * tests/AMI_Timeouts/Makefile:
        * tests/AMI_Timeouts/Makefile.bor:
        * tests/AMI_Timeouts/run_test.pl:
        * tests/AMI_Timeouts/README:
          Added these files as part of the new test. Please note that
          the Makefiles, run_test.pl and the Borland Compiler project
          might not be up to date.

Sat Feb  3 15:56:43 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:

          Renamed some variables to remove multiply defined variables
          on MSVC, which resulted from different for loop scoping rules.

Fri Feb  2 14:45:57 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * orbsvcs/ImplRepo_Service/NT_Service.h:
        * orbsvcs/Naming_Service/NT_Naming_Service.h:
          Added #include "tao/orbconf.h" to bring in definition for
          TAO_SYNCH_MUTEX and fix compile errors in Windows builds.

Fri Feb  2 14:34:15 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/TAO_Singleton_Manager.h: Removed forward reference for
          TAO_SYNCH_RECURSIVE_MUTEX and added #include "tao/orbconf.h".
          The forward reference wasn't necessary, and it was causing an
          internal compiler error under gcc 2.95.2.

Fri Feb  2 14:20:26 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * orbsvcs/Naming_Service/README: Changed the README file so that
          it uses the "Name_Service" rather than "Name_Server."  Thanks to
          Luther Baker for pointing this out.

Fri Feb  2 13:35:19 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RT_ORB.h:
        * tao/RT_Mutex.h: Updated method documentation.

        * docs/rtcorba/status.html: Update RT Mutex status.

Fri Feb  2 08:01:48 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * tao/IIOP_Profile.cpp (decode): Make sure to initialize the major
          and minor codes so they don't have garbage values.  Thanks to
          Detlef Becker for reporting htis.

        * tao/RT_ORB.{h,cpp}
        * tao/RT_Mutex.{h,cpp}: Made some minor cosmetic changes.

Thu Feb  1 22:57:27 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/RT_Mutex.h:
        * tao/RT_Mutex.cpp:
        * tao/RT_ORB.cpp:
        * tao/RT_ORB.h:

          Code cleanup.

        * tests/RTCORBA/RTMutex/server.cpp:

          Fixed typo that was causing a compiler error.

Thu Feb  1 21:47:58 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * tests/RTCORBA/RTMutex/server.cpp: Various cosmetic changes
          to conform to ACE+TAO programming guidelines.

Thu Feb  1 20:54:11 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Makefile:
        * tao/RTCORBA.pidl:
        * tao/RTCORBAC.cpp:
        * tao/RTCORBAC.h:
        * tao/RTCORBAC.i:
        * tao/RTCORBAS.cpp:
        * tao/RTCORBAS.h:
        * tao/RTCORBAS.i:
        * tao/RTCORBAS_T.cpp:
        * tao/RTCORBAS_T.h:
        * tao/RTCORBAS_T.i:
        * tao/RT_Mutex.cpp:
        * tao/RT_Mutex.h:
        * tao/RT_ORB.cpp:
        * tao/RT_ORB.h:
        * tao/diffs/RTCORBAC.cpp.diff:
        * tao/diffs/RTCORBAC.h.diff:
        * tao/diffs/RTCORBAC.i.diff:
        * tao/diffs/RTCORBAS.h.diff:
        * tao/diffs/RTCORBAS.cpp.diff:
        * tests/RTCORBA/Makefile:
        * tests/RTCORBA/Makefile.bor:
        * tests/RTCORBA/README:
        * tests/RTCORBA/RTCORBA_tests.dsw:
        * tests/RTCORBA/RTMutex/Makefile:
        * tests/RTCORBA/RTMutex/Makefile.bor:
        * tests/RTCORBA/RTMutex/README:
        * tests/RTCORBA/RTMutex/RTMutex.dsw:
        * tests/RTCORBA/RTMutex/run_test.pl:
        * tests/RTCORBA/RTMutex/server.bor:
        * tests/RTCORBA/RTMutex/server.cpp:
        * tests/RTCORBA/RTMutex/server.dsp:

        Added RT Mutex implementation and unit tests.

Thu Feb  1 20:29:54 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/orbconf.h:

          Added default definitions for TAO_SYNCH_MUTEX,
          TAO_SYNCH_RECURSIVE_MUTEX, TAO_SYNCH_RW_MUTEX, and
          TAO_SYNCH_CONDITION to allow TAO's use of mutexes
          and condition variables to be globally changed at
          compile time.

          This change was most important for the RT Mutex
          implementation which requires that the mutexes
          that it returns to users have the same semantics
          (priority inheritance, etc.) as the ones used in
          the ORB.

        * TAO_IDL/be/be_visitor_interface/smart_proxy_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/smart_proxy_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_sh.cpp:
        * TAO_IDL/be/be_visitor_interface/strategized_proxy_broker_ss.cpp:
        * docs/Smart_Proxies.html:
        * docs/events_tutorial.html:
        * examples/Content_Server/AMI_Observer/Callback_i.cpp:
        * examples/Content_Server/AMI_Observer/Callback_i.h:
        * examples/Load_Balancing_persistent/Load_Balancer_i.h:
        * orbsvcs/IFR_Service/InterfaceS.cpp:
        * orbsvcs/IFR_Service/InterfaceS.h:
        * orbsvcs/IFR_Service/Repository_i.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvcs/IFR_Service/diffs/InterfaceS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/InterfaceS.h.diff:
        * orbsvcs/ImplRepo_Service/NT_Service.h:
        * orbsvcs/Naming_Service/NT_Naming_Service.h:
        * orbsvcs/Scheduling_Service/Scheduling_Service.cpp:
        * orbsvcs/Scheduling_Service/Scheduling_Service.h:
        * orbsvcs/examples/Notify/Filter/Filter.cpp:
        * orbsvcs/examples/Notify/Subscribe/Subscribe.cpp:
        * orbsvcs/examples/RtEC/Schedule/Service.cpp:
        * orbsvcs/orbsvcs/Event_Service_Constants.h:
        * orbsvcs/orbsvcs/AV/TCP.cpp:
        * orbsvcs/orbsvcs/AV/sfp.cpp:
        * orbsvcs/orbsvcs/AV/sfp.h:
        * orbsvcs/orbsvcs/Concurrency/CC_LockSet.cpp:
        * orbsvcs/orbsvcs/Concurrency/CC_LockSet.h:
        * orbsvcs/orbsvcs/Concurrency/CC_LockSetFactory.cpp:
        * orbsvcs/orbsvcs/Concurrency/CC_LockSetFactory.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Dispatching_Task.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Dispatching_Task.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_MT_Dispatching.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_MT_Dispatching.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullSupplier.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPullSupplier.h:
        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp:
        * orbsvcs/orbsvcs/ETCL/ETCL_l.cpp.diff:
        * orbsvcs/orbsvcs/Event/EC_Basic_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.cpp:
        * orbsvcs/orbsvcs/Event/EC_Dispatching_Task.cpp:
        * orbsvcs/orbsvcs/Event/EC_Dispatching_Task.h:
        * orbsvcs/orbsvcs/Event/EC_Gateway.cpp:
        * orbsvcs/orbsvcs/Event/EC_Gateway.h:
        * orbsvcs/orbsvcs/Event/EC_Gateway_Sched.cpp:
        * orbsvcs/orbsvcs/Event/EC_Gateway_UDP.cpp:
        * orbsvcs/orbsvcs/Event/EC_Gateway_UDP.h:
        * orbsvcs/orbsvcs/Event/EC_MT_Dispatching.cpp:
        * orbsvcs/orbsvcs/Event/EC_MT_Dispatching.h:
        * orbsvcs/orbsvcs/Event/EC_Per_Supplier_Filter.cpp:
        * orbsvcs/orbsvcs/Event/EC_Per_Supplier_Filter.h:
        * orbsvcs/orbsvcs/Event/Event_Manip.cpp:
        * orbsvcs/orbsvcs/Event/Event_Manip.h:
        * orbsvcs/orbsvcs/Event/Memory_Pools.cpp:
        * orbsvcs/orbsvcs/Event/Memory_Pools.h:
        * orbsvcs/orbsvcs/LoadBalancing/Minimum_Dispersion.cpp:
        * orbsvcs/orbsvcs/LoadBalancing/Minimum_Dispersion.h:
        * orbsvcs/orbsvcs/LoadBalancing/ReplicaProxy.cpp:
        * orbsvcs/orbsvcs/LoadBalancing/ReplicaProxy.h:
        * orbsvcs/orbsvcs/LoadBalancing/Round_Robin_Strategy.cpp:
        * orbsvcs/orbsvcs/LoadBalancing/Round_Robin_Strategy.h:
        * orbsvcs/orbsvcs/Log/LogMgr_i.cpp:
        * orbsvcs/orbsvcs/Log/LogMgr_i.h:
        * orbsvcs/orbsvcs/Naming/Bindings_Iterator_T.cpp:
        * orbsvcs/orbsvcs/Naming/Bindings_Iterator_T.h:
        * orbsvcs/orbsvcs/Naming/Hash_Naming_Context.cpp:
        * orbsvcs/orbsvcs/Naming/Hash_Naming_Context.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Context_Index.cpp:
        * orbsvcs/orbsvcs/Naming/Persistent_Context_Index.h:
        * orbsvcs/orbsvcs/Naming/Persistent_Naming_Context.cpp:
        * orbsvcs/orbsvcs/Naming/Transient_Naming_Context.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_AdminProperties.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_AdminProperties.h:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Default_Collection_Factory.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Manager.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Event_Map.h:
        * orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_FilterAdmin_i.h:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.cpp:
        * orbsvcs/orbsvcs/Notify/Notify_Filter_i.h:
        * orbsvcs/orbsvcs/SSLIOP/IIOP_SSL_Connector.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
        * orbsvcs/orbsvcs/Sched/DynSched.cpp:
        * orbsvcs/orbsvcs/Sched/DynSched.h:
        * orbsvcs/orbsvcs/Sched/Scheduler.cpp:
        * orbsvcs/orbsvcs/Sched/Scheduler.h:
        * orbsvcs/orbsvcs/Sched/Scheduler_Generic.h:
        * orbsvcs/orbsvcs/Trader/Interpreter.cpp:
        * orbsvcs/orbsvcs/Trader/Interpreter.h:
        * orbsvcs/orbsvcs/Trader/Trader.cpp:
        * orbsvcs/tests/AVStreams/benchmark/child.cpp:
        * orbsvcs/tests/AVStreams/benchmark/child.h:
        * orbsvcs/tests/AVStreams/benchmark/client.cpp:
        * orbsvcs/tests/AVStreams/benchmark/client.h:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Audio_Control_State.cpp:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Audio_Control_State.h:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Globals.cpp:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Globals.h:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Video_Control_State.cpp:
        * orbsvcs/tests/AVStreams/mpeg/source/mpeg_server/Video_Control_State.h:
        * orbsvcs/tests/CosEvent/Basic/Random.cpp:
        * orbsvcs/tests/CosEvent/Basic/Random.h:
        * orbsvcs/tests/CosEvent/lib/Counting_Consumer.cpp:
        * orbsvcs/tests/CosEvent/lib/Counting_Consumer.h:
        * orbsvcs/tests/CosEvent/lib/Counting_Supplier.cpp:
        * orbsvcs/tests/CosEvent/lib/Counting_Supplier.h:
        * orbsvcs/tests/EC_Custom_Marshal/ECM_Consumer.cpp:
        * orbsvcs/tests/EC_Custom_Marshal/ECM_Consumer.h:
        * orbsvcs/tests/EC_Mcast/EC_Mcast.h:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.cpp:
        * orbsvcs/tests/EC_Multiple/EC_Multiple.h:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer.h:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer_Driver.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Consumer_Driver.h:
        * orbsvcs/tests/EC_Throughput/ECT_Throughput.cpp:
        * orbsvcs/tests/EC_Throughput/ECT_Throughput.h:
        * orbsvcs/tests/Event/Basic/Atomic_Reconnect.cpp:
        * orbsvcs/tests/Event/Basic/Atomic_Reconnect.h:
        * orbsvcs/tests/Event/Basic/Control.cpp:
        * orbsvcs/tests/Event/Basic/Control.h:
        * orbsvcs/tests/Event/Basic/Observer.cpp:
        * orbsvcs/tests/Event/Basic/Observer.h:
        * orbsvcs/tests/Event/Basic/Random.cpp:
        * orbsvcs/tests/Event/Basic/Random.h:
        * orbsvcs/tests/Event/Performance/Latency.cpp:
        * orbsvcs/tests/Event/Performance/Latency.h:
        * orbsvcs/tests/Event/lib/Consumer.cpp:
        * orbsvcs/tests/Event/lib/Consumer.h:
        * orbsvcs/tests/Event/lib/Counting_Supplier.cpp:
        * orbsvcs/tests/Event/lib/Counting_Supplier.h:
        * orbsvcs/tests/Event/lib/Supplier.cpp:
        * orbsvcs/tests/Event/lib/Supplier.h:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.cpp:
        * orbsvcs/tests/Notify/Basic/ConnectDisconnect.h:
        * orbsvcs/tests/Notify/Basic/Events_Test.cpp:
        * orbsvcs/tests/Notify/Basic/Events_Test.h:
        * orbsvcs/tests/Notify/Basic/Simple.cpp:
        * orbsvcs/tests/Notify/Basic/Simple.h:
        * orbsvcs/tests/Notify/Basic/Updates.cpp:
        * orbsvcs/tests/Notify/Basic/Updates.h:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.h:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.cpp:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.h:
        * performance-tests/Callback/Callback_i.cpp:
        * performance-tests/Callback/Callback_i.h:
        * performance-tests/Callback/client.cpp:
        * performance-tests/Cubit/TAO/MT_Cubit/Cubit_Task.cpp:
        * performance-tests/Cubit/TAO/MT_Cubit/Globals.h:
        * performance-tests/Cubit/TAO/MT_Cubit/Task_Client.cpp:
        * performance-tests/Cubit/TAO/MT_Cubit/Task_Client.h:
        * performance-tests/Cubit/TAO/MT_Cubit/client.cpp:
        * performance-tests/Cubit/TAO/MT_Cubit/server.cpp:
        * tao/Environment.cpp:
        * tao/Environment.h:
        * tao/Exception.cpp:
        * tao/Exception.h:
        * tao/IIOP_Connector.cpp:
        * tao/Leader_Follower.cpp:
        * tao/Leader_Follower.h:
        * tao/Leader_Follower.i:
        * tao/MProfile.cpp:
        * tao/MProfile.h:
        * tao/Muxed_TMS.cpp:
        * tao/Muxed_TMS.h:
        * tao/NVList.cpp:
        * tao/NVList.h:
        * tao/ORB.cpp:
        * tao/ORB.h:
        * tao/ORB.i:
        * tao/ORBInitializer_Registry.cpp:
        * tao/ORBInitializer_Registry.h:
        * tao/ORBInitializer_Registry.inl:
        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
        * tao/ORB_Table.cpp:
        * tao/ORB_Table.h:
        * tao/ORB_Table.inl:
        * tao/Object.h:
        * tao/Object.i:
        * tao/Policy_Manager.h:
        * tao/Policy_Manager.i:
        * tao/Principal.h:
        * tao/Profile.h:
        * tao/Profile.i:
        * tao/Single_Reactor.cpp:
        * tao/Stub.cpp:
        * tao/Stub.h:
        * tao/Synch_Reply_Dispatcher.h:
        * tao/TAO_Internal.cpp:
        * tao/TAO_Singleton_Manager.cpp:
        * tao/TAO_Singleton_Manager.h:
        * tao/Transport.cpp:
        * tao/Transport.h:
        * tao/Typecode.cpp:
        * tao/Typecode.h:
        * tao/Typecode.i:
        * tao/ValueBase.h:
        * tao/ValueBase.i:
        * tao/ValueFactory.h:
        * tao/ValueFactory.i:
        * tao/ValueFactory_Map.cpp:
        * tao/ValueFactory_Map.h:
        * tao/Wait_On_Leader_Follower.cpp:
        * tao/Wait_On_Leader_Follower.h:
        * tao/Wait_Strategy.cpp:
        * tao/Wait_Strategy.h:
        * tao/default_client.cpp:
        * tao/default_resource.cpp:
        * tao/default_server.cpp:
        * tao/DynamicInterface/Context.cpp:
        * tao/DynamicInterface/Context.h:
        * tao/DynamicInterface/ExceptionList.cpp:
        * tao/DynamicInterface/ExceptionList.h:
        * tao/DynamicInterface/Request.cpp:
        * tao/DynamicInterface/Request.h:
        * tao/DynamicInterface/Server_Request.cpp:
        * tao/DynamicInterface/Server_Request.h:
        * tao/IORTable/IOR_Table_Impl.cpp:
        * tao/IORTable/IOR_Table_Impl.h:
        * tao/PortableServer/ImplRepoC.cpp:
        * tao/PortableServer/ImplRepoC.h:
        * tao/PortableServer/MessagingS.cpp:
        * tao/PortableServer/MessagingS.h:
        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/Object_Adapter.h:
        * tao/PortableServer/Object_Adapter.i:
        * tao/PortableServer/Operation_Table.cpp:
        * tao/PortableServer/Operation_Table.h:
        * tao/PortableServer/POA.cpp:
        * tao/PortableServer/POA.h:
        * tao/PortableServer/Servant_Base.cpp:
        * tao/PortableServer/Servant_Base.h:
        * tao/PortableServer/Strategized_Object_Proxy_Broker.cpp:
        * tao/PortableServer/Strategized_Object_Proxy_Broker.h:
        * tao/Strategies/Reactor_Per_Priority.cpp:
        * tao/Strategies/Reactor_Per_Priority.h:
        * tao/Strategies/SHMIOP_Connector.cpp:
        * tao/Strategies/TAO_Strategies_Internal.cpp:
        * tao/Strategies/UIOP_Connector.cpp:
        * tao/Strategies/advanced_resource.cpp:
        * tao/diffs/MessagingC.cpp.diff:
        * tao/diffs/MessagingC.h.diff:
        * tests/Leader_Followers/client.cpp:
        * tests/LongUpcalls/AMI_Manager.cpp:
        * tests/LongUpcalls/AMI_Manager.h:
        * tests/LongUpcalls/Controller.cpp:
        * tests/LongUpcalls/Controller.h:
        * tests/Param_Test/helper.cpp:
        * tests/Param_Test/helper.h:
        * tests/Param_Test/options.cpp:
        * tests/Param_Test/options.h:

          Changed occurrances of ACE_SYNCH_* to their
          new TAO_SYNCH_* equivalents.  In some cases,
          occurrances of Ace_Thread_Mutex,
          Ace_Recursive_Thread_Mutex, and Ace_RW_Thread_Mutex
          were changed to their TAO_SYNCH_ forms.

Thu Feb  1 09:36:26 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * examples/AMI/FL_Callback/peer.cpp:

          Corrected typo in the usage message. Thanks to
          Johnny Willemsen <johnny.willemsen@meco.nl> for
          reporting it.

Wed Jan 31 19:13:18 2001  Krishnakumar B  <kitty@cs.wustl.edu>

        * tests/Multiple/Multiple.idl:

        Added a C-style comment to remove the multiple-line comment
        warning and also to retain the `\' used in the comment.

Tue Jan 30 20:41:37 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AV_Core.cpp:

          Initialized the roles (TAO_AV_PRODUCER & TAO_AV_CONSUMER) of the
          entries correspondingly for the flows. Thanks to David Karr
          <dkarr@bbn.com> and Craig Rodrigues <crodrigu@bbn.com> for
          reporting this

Tue Jan 30 13:49:01 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/Servant_Factory.h:
        * orbsvcs/IFR_Service/Servant_Factory.cpp:

          Cosmetic changes.

Tue Jan 30 10:21:24 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/InterfaceS.cpp:

        Cosmetic changes.

Tue Jan 30 10:03:50 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/OctetSeqC.h:
        * tao/OctetSeqC.i:
        * tao/OctetSeqC.cpp:

          Changed the #ifdef guards in these files to be
          different from that generated by the IDL compiler
          for 'typedef sequence<octet> OctetSeq;'. This will
          eliminate masking of code in application IDL files
          that contain the above line. Thanks to Sathish
          Tiptur <Sathish.Tiptur@geind.ge.com> for reporting
          this bug.

Mon Jan 29 15:34:08 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Lite.cpp:
        * orbsvcs/orbsvcs/AV/sfp.cpp:

          Changed one instance in each file where
          'stream->do_byte_swap ()' should have been
          'stream.do_byte_swap ()'. Thanks to Paul Rubel
          <prubel@bbn.com> for pointing out this error,
          which is visible only when SWAP_ON_WRITE is
          enabled.

Mon Jan 29 15:25:44 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao.IFR_TypeCodes.cpp:

          Added CORBA namespace scoping to ValueModifier constant
          assignments.

Mon Jan 29 10:58:54 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/InterfaceC.h:

        Removed an unnecessary #inlude.

Sun Jan 28 22:19:35 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:

          Added iterations to start the flow handlers for the reverse flow
          spec set in the TAO_StreamEndpoint::start method. This was
          required to enable the AVStream clients and servers to run on
          different hosts. Thanks to David Karr <dkarr@bbn.com> for
          reporting the bug.

Sun Jan 28 08:28:52 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/ORB_Core.cpp:
          Don't use priority_mapping_manager_ if RT-CORBA is disabled.

Sun Jan 28 07:49:22 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/LongWrites/Coordinator.cpp:
          Fixed problems with compilers that only support the old rules
          for variables declared inside a for() loop.

Sat Jan 27 19:42:01 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/Service_Context_Manipulation/Client_ORBInitializer.cpp (post_init):
        * tests/Portable_Interceptors/Service_Context_Manipulation/Server_ORBInitializer.cpp (post_init):
        * tests/Portable_Interceptors/Service_Context_Manipulation/client.cpp:

          Do not call _retn() on the "_var."  The caller (post_init() in
          this case) is responsible for storage.  Fixes several memory
          leaks.

        * tests/Portable_Interceptors/Service_Context_Manipulation/server.cpp
          (main):

          Fixed a memory leak.

          Fixed ACE_TRY_CHECK/ACE_CHECK_RETURN mismatches.

          Added missing ACE_TRY_ENV argument to
          resolve_initial_references() call.

          Corrected spelling.

        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.cpp:

          Fixed memory leaks.

          Added missing ACE_TRY_ENV argument to all of the invocations
          that were missing it.

        * tests/Portable_Interceptors/Service_Context_Manipulation/interceptors.h:

          Derive/mix-in CORBA::LocalObject into both the client side and
          server side interceptors, since interceptors are indeed local
          objects.

        * tests/Portable_Interceptors/Service_Context_Manipulation/test_i.h:

          Fixed broken throw specs and missing default CORBA::Environment
          arguments.

        * tests/Portable_Interceptors/Service_Context_Manipulation/test_i.cpp
          (shutdown):

          Do not wait for completion.  Fixes a problem where the server
          wouldn't shutdown properly.

        * tests/Portable_Interceptors/Service_Context_Manipulation/Service_Context_Manipulation.dsw:
        * tests/Portable_Interceptors/Service_Context_Manipulation/client.dsp:
        * tests/Portable_Interceptors/Service_Context_Manipulation/server.dsp:

          New MSVC project files.

Sat Jan 27 18:41:28 2001  Ossama Othman  <ossama@uci.edu>

        * tao/RT_ORBInitializer.cpp (pre_init):

          Use ACE_NEW_THROW_EX instead of raw "new" operator.

          Store newly created TAO_Priority_Mapping_Manager reference in
          its corresponding "_var" so that proper reference counting
          semantics are maintained, i.e., the caller is always responsible
          for storage.  Fixes a memory leak.

        * tao/Priority_Mapping_Manager.h (TAO_Priority_Mapping_Manager):

          Derive this class from TAO_Local_RefCounted_Object so that we
          pull in the version of CORBA::LocalObject with reference
          counting implemented.  Fixes a memory leak.

        * tao/Pool_Per_Endpoint.cpp (run):
        * tao/RT_Protocols_Hooks.cpp (set_thread_priority,
          get_thread_priority):

          Added missing ACE_CHECKs and ACE_CHECK_RETURNs.

        * tao/ORB_Core.cpp (priority_mapping_manager):

          Fixed problem where this (accessor) method would always return a
          nil object reference.  Thanks to Michael Hampel for detecting
          this problem.

          Release the old reference before setting the new one in the
          mutator version of this method.  Fixes a memory leak.  We won't
          need to do this once we change the priority_mapping_manager_
          member to be a non-static CORBA::Object_var.

          (fini):

          Release the reference to the priority mapping manager.  Fixes a
          memory leak.  We won't need to do this once we change the
          priority_mapping_manager_ member to be a non-static
          CORBA::Object_var.

Sat Jan 27 16:01:08 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/IFR_Service/Options.cpp:

          Include "ace/Log_Msg.h" to pull in ACE_ERROR_RETURN and LM_ERROR
          definitions.

        * orbsvcs/tests/LoadBalancing/Hash_ReplicaControl.cpp:

          Include "ace/Reactor.h" to pull in ACE_Reactor class
          declaration.  Needed for configurations that do not define
          ACE_TEMPLATES_REQUIRE_SOURCE.

Sat Jan 27 11:32:18 2001  Ossama Othman  <ossama@uci.edu>

        * tao/IOP.pidl:
        * tao/Policy.pidl:

          Removed backslashes in comments.  Some compilers issue a warning
          about including them in a comment.

Sat Jan 27 00:30:57 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.h:
        * orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.h:
        * orbsvcs/orbsvcs/Event/EC_Default_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_CO_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_Collection_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_Default_EMO_Factory.h:
        * orbsvcs/orbsvcs/Notify/Notify_POA_Factory.h:
          Add missing ace/Service_Config.h #include, required for
          platforms that do not define ACE_TEMPLATES_REQUIRE_SOURCE.

        * orbsvcs/orbsvcs/Event/EC_Event_Channel.cpp:
        * orbsvcs/orbsvcs/Event/EC_Gateway_UDP.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_SupplierControl.cpp:
        * orbsvcs/orbsvcs/Event/EC_Reactive_Timeout_Generator.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_ConsumerControl.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_Reactive_SupplierControl.cpp:
        * tests/NestedUpcall/Triangle_Test/Object_A_i.cpp:
          Add missing ace/Reactor.h #include, required for
          platforms that do not define ACE_TEMPLATES_REQUIRE_SOURCE.

Fri Jan 26 22:24:56 2001  Ossama Othman  <ossama@uci.edu>

        * tao/Default_Protocols_Hooks.cpp (ACE_RCSID):
        * tao/RT_Protocols_Hooks.cpp (ACE_RCSID):

          Removed trailing semi-colon.  The ACE_RCSID macro already places
          trailing semi-colons in the expanded text.  This change fixes a
          warning about the extra semi-colon.

Fri Jan 26 22:13:16 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Ptest.cpp (run):

          Added missing ACE_TRY_CHECKs.  This fixes a compile-time
          warning.

Fri Jan 26 19:37:50 2001  Craig Rodrigues <crodrigu@bbn.com>

        * tao/DynamicInterface/DII_Invocation.h:

          Add #include "Unknown_User_Exception.h" to appease gcc 2.97.

Fri Jan 26 17:33:32 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Makefile:
        * tests/README:
        * tests/LongWrites/Coordinator.cpp:
        * tests/LongWrites/Coordinator.h:
        * tests/LongWrites/Makefile:
        * tests/LongWrites/README:
        * tests/LongWrites/Receiver.cpp:
        * tests/LongWrites/Receiver.h:
        * tests/LongWrites/Sender.cpp:
        * tests/LongWrites/Sender.h:
        * tests/LongWrites/Test.idl:
        * tests/LongWrites/client.cpp:
        * tests/LongWrites/run_test.pl:
        * tests/LongWrites/server.cpp:
          New regression test for bug #132, do not attempt to run it now,
          it is still failing

Fri Jan 26 16:39:50 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Content_Server/SMI_Iterator/Iterator_Factory_i.h:
          Remove spurious forward declaration

        * orbsvcs/IFR_Service/tmplinst.cpp:
          Add missing template instantiations.

Fri Jan 26 16:22:02 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/IFR_Client/ifrfwd.h:

          Removed duplicate declaration of UsesDescription,
          UsesDescription_var and UsesDescription_out.

Fri Jan 26 10:42:07 2001  Darrell Brunsch <brunsch@uci.edu>

        * examples/POA/Explicit_Activation/Alt_Resources/Resource_Factory.cpp:

          Added explicit include of ace/WFMO_Reactor.h.

        * tests/Timed_Buffered_Oneways/run_test.pl:

          Updated to use the new run_test style.

Fri Jan 26 13:54:24 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/run_test.pl:

          Changes to make sure ACE_ROOT is defined for use in the Perl
          script.

Fri Jan 26 13:30:05 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:

          Added missing link library.

Fri Jan 26 09:07:14 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/DLL_Parser.h:
          Documented DLL IORs in more detail.

        * tests/README:
        * tests/Forwarding/README:
        * tests/LongUpcalls/README:
        * tests/Object_Loader/README:
          Add README files for the tests above.

        * tests/Object_Loader/run_test.pl:
          Add driver script, so the test can be put in the nightly builds.

        * tests/Forwarding/run_test.pl:
          Use corbaloc instead of the (now obsolete) iioploc format.

Fri Jan 26 08:42:24 2001  Darrell Brunsch <brunsch@uci.edu>

        * examples/Content_Server/AMI_Iterator/Iterator_Factory_i.cpp:
        * examples/Content_Server/AMI_Iterator/Iterator_Factory_i.h:
        * examples/Content_Server/AMI_Observer/Push_Iterator_Factory_i.cpp:
        * examples/Content_Server/AMI_Observer/Push_Iterator_Factory_i.h:
        * examples/Content_Server/SMI_Iterator/Iterator_Factory_i.cpp:
        * examples/Content_Server/SMI_Iterator/Iterator_Factory_i.h:

          Changed use of struct stat to ACE_stat.

Fri Jan 26 07:38:01 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * tests/README: Updated all the README entries.

Thu Jan 25 22:36:00 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
          Documented all the methods as I currently understand them.
          Remove the send(const char*, size_t) method, it was cluttering
          the interface, used very rarely (increasing footprint), and it
          will complicate the implementation of the reactive I/O.

        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Lite.cpp:
          Modified to use only the TAO_Transport::send() method taking an
          ACE_Message_Block.

        * tao/IIOP_Transport.h:
        * tao/Strategies/SHMIOP_Transport.h:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.h:
        * tao/Strategies/UIOP_Transport.cpp:
        * tao/IIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
          Remove the send() method from all the pluggable protocols.

Thu Jan 25 20:10:24 2001  Irfan Pyarali  <irfan@cs.wustl.edu>

        * orbsvcs/orbsvcs/ESF/ESF_Immediate_Changes.i: Fixed template
          parameter name mismatch between declaration and definition.

          Thanks to J. Russell Noseworthy <rnosewor@objectsciences.com>
          for contributing the above patches.

Thu Jan 25 17:31:15 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/ForwardRequest/README:

          Updated expected test output.

        * tests/Portable_Interceptors/ForwardRequest/client.cpp:

          Fixed CVS conflict tags and syntax error that crept into the
          previous commit.

Thu Jan 25 18:41:11 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:

          Corrected typo.

Thu Jan 25 10:40:33 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/examples/RtEC/MCast/MCast.h:
        * orbsvcs/examples/RtEC/MCast/MCast.dsp:
          Removed MCast.h, the file was no longer used, thanks to Richard
          Eperjesi <reperjesi@yahoo.com> for pointing this out.

Thu Jan 25 10:14:01 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * tao/PortableServer/ORB_Manager.h: Changed "servant_name" to
          "object_name" for activate_under_child_poa().  Thanks to
          Jean-Francois Daune <Daune@IBA.be> for reporting this
          discrepancy.

        * THANKS: We recently added our 1,100 contributor to ACE+TAO!

Thu Jan 25 10:15:45 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * performance-tests/Cubit/TAO/DII_Cubit/client.dsp:

          Changes to the static release and debug versions of the
          project, to make them consistent with the DLL versions.

Wed Jan 24 17:00:52 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
          Document the design for the new treatment of outgoing data,
          basically it should support non-blocking (reactive) I/O, queued
          messages, urgent data, per-message timeouts and multiple threads
          waiting on outgoing messages (ala Leader/Followers).

        * tao/Transport.h:
        * tao/Transport.cpp:
        * tao/IIOP_Transport.h:
        * tao/IIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.h:
        * tao/Strategies/UIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Transport.h:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
          Factored out common code into the TAO_Transport class.

        * tao/things_that_needs:
          Removed spurious file

        * docs/pluggable_protocols/index.html:
          Fixed my homepage.

Wed Jan 24 18:09:12 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Domain/TAO_Domain.dsp:

          Modified the settings for the release version to get rid
          of build errors on Win32 DLL release builds.

Wed Jan 24 14:34:47 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/fe/idl.ll:
        * TAO_IDL/fe/lex.yy.cpp:
        * TAO_IDL/fe/lex.yy.cpp.diff:
        * TAO_IDL/include/idl_global.h:
        * TAO_IDL/util/utl_global.cpp:

          Added IDL compiler capability to recognize a line of
          the form '#pragma ident <some string>' in an IDL file
          and put '#ident <some string>' each generated file.
          Suggested by Jody Hagins <jody@atdesk.com>.

Wed Jan 24 09:44:24 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/CORBALOC_Parser.h:
        * tao/CORBANAME_Parser.h:
        * tao/DLL_ORB.h:
        * tao/DLL_Parser.h:
        * tao/Default_Protocols_Hooks.h:
        * tao/FILE_Parser.h:
        * tao/IIOP_Factory.h:
        * tao/IIOP_Lite_Factory.h:
        * tao/Protocols_Hooks.h:
        * tao/RT_ORB_Loader.h:
        * tao/default_client.h:
        * tao/default_resource.h:
        * tao/default_server.h:
        * tao/qt_resource.h:
        * tao/xt_resource.h:
          Fixed use of ACE_STATIC_SVC_DECLARE() it should be
          ACE_STATIC_SVC_DECLARE_EXPORT()

        * tao/RT_Protocols_Hooks.h:
        * tao/Connection_Cache_Manager.cpp:
          Add missing #include, this should fix some problems in Tru64/CXX
          and SunOS/SunCC4.2 builds.

Wed Jan 24 10:41:35 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/diffs/InterfaceC.*.diff:

          Removed these files. They now exist in
          tao/IFR_Client/diffs, and I forgot to remove them in
          my original checkin. Thanks to Nanbor for pointing
          out the oversight.

Wed Jan 24 00:27:47 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Invocation_Interceptor.cpp
          (receive_request_service_contexts, receive_request):

          Moved the secure invocation interception code from the
          receive_request() interception point to the
          receive_request_service_contexts() interception point since it
          executed earlier in the request handling path.

        * tests/Portable_Interceptors/ForwardRequest/client.cpp (main):

          Improved test by verifying no two consecutive invocation results
          are the same.  The test is designed so that this situation
          should never occur.  If it does, then it is a clear indication
          that PortableInterceptor::ForwardRequest support is broken.

Wed Jan 24 08:26:52 2001  Johnny Willemsen <jwillemsen@remedy.nl>

        * tao/Makefile.bor:
        * tao/IFR_Client.bor:
          Corrected makefiles for the latest changes

Tue Jan 23 18:22:52 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/orbsvcs/Fault_Tolerance.dsp:
        * orbsvcs/orbsvcs/Makefile.FaultTolerance:

          Changed IDL compiler command line option to generate
          #include "tao/PortableServer/POA_CORBA.h" to generate
          #include "tao/PortableServer/PolicyS.h", since the
          one remaining class definition in POA_CORBA.h was moved
          there, and POA_CORBA.h removed from the CVS repository.

Tue Jan 23 13:43:07 2001  Carlos O'Ryan  <coryan@uci.edu>

        * */Makefile:
          Update dependencies in all directories.

        * orbsvcs/tests/FaultTolerance/IOGR/Makefile:
          Fixed used of IDL_SRC the idl_stubs target was not working.

Tue Jan 23 14:34:24 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/Makefile*:
        * orbsvcs/orbsvcs/Makefile.Svc_Utils:
        * orbsvcs/tests/InterfaceRepo/*Makefile:

          Updated dependencies.

Tue Jan 23 11:15:59 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Leader_Follower.i:
        * tao/Leader_Follower.cpp:
          Moved use of the ACE_Reactor class from the .i to the .cpp file,
          the methods were too complex to be inlined anyway.
          This should fix the problems with the SunOS/SunCC 4.2 and Tru64
          builds.

Tue Jan 23 13:15:03 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/*Makefile:

          Updated dependencies.

Tue Jan 23 11:08:00 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * configure.in:
        * rules.tao.GNU:
        * tests/Smart_Proxies/Makefile:
        * tests/Smart_Proxies/Benchmark/Makefile:
        * tests/Smart_Proxies/On_Demand/Makefile:
        * tests/Smart_Proxies/Policy/Makefile:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/README:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/README:
        * orbsvcs/IFR_Service/Makefile.BE:
        * orbsvcs/IFR_Service/Makefile.EX:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/IFR_Service/Makefile.TypeCodeFactory:
        * orbsvcs/IFR_Service/README:
        * tao/orbconf.h:

          Removed all occurrences of the following - 'smart_proxies',
          'interface_repo' and 'TAO_HAS_INTERFACE_REPOSITORY'.
          'TAO_HAS_SMART_PROXIES' was removed in an earlier checkin.
          Because of the Smart_Proxies library and the new
          IFR_Client library described below, these compile options
          are no longer necessary.

        * orbsvcs/tests/InterfaceRepo/Application_Test/Application_Test.dsp:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/IFR_Test.dsp:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Persistence_Test.dsp:

          Added link to IFR_Client library.

        * orbsvcs/IFR_Service/InterfaceS.cpp:
        * orbsvcs/IFR_Service/InterfaceS.h:
        * orbsvcs/IFR_Service/InterfaceS.i:
        * orbsvcs/IFR_Service/diffs/InterfaceS.cpp.diff:
        * orbsvcs/IFR_Service/diffs/InterfaceS.h.diff:
        * orbsvcs/IFR_Service/diffs/InterfaceS.i.diff:

          Removed POA_CORBA::IRObject from POA_CORBA.h and
          moved it to InterfaceS.* as POA_CORBA_IRObject.
          Also added the Borland preprocessor directives
          that have recently been added to all generated code.

        * orbsvcs/IFR_Service/IFR_Service.dsp:
        * orbsvcs/IFR_Service/TypeCodeFactory_DLL.dsp:
        * orbsvcs/IFR_Service/tao_ifr.dsp:
        * orbsvcs/IFR_Service/TAO_IFR_BE_DLL.dsp:

          Added link to IFR_Client library.

        * orbsvcs/IFR_Service/IRObject_i.h:

          Changed instances of POA_CORBA::IRObject to
          POA_CORBA_IRObject.

        * orbsvcs/IFR_Service/Servant_Factory.h:
        * orbsvcs/IFR_Service/IFR_Service.h:
        * orbsvcs/IFR_Service/be_global.h:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.h:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.h:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Ptest.h:

          Changed #include of 'tao/ifrfwd.h' to
          'tao/IFR_Client/ifrfwd.h', or 'tao/InterfaceC.h'
          to 'tao/IFR_CLient/InterfaceC.h'.


        * tao/PortableServer/POA_CORBA.h:

          Removed this file, and moved the only remaining
          declaration, POA_CORBA::Policy, to the new file
          PolicyS.h, as POA_CORBA_Policy.

        * tao/PortableServer/PolicyS.h:

          New file containing the declaration of POA_CORBA_Policy
          as described above.

        * tao/PortableServer/DomainS.cpp:
        * tao/PortableServer/DomainS.h:
        * tao/PortableServer/DomainS.i:
        * tao/PortableServer/DomainS_T.cpp:
        * tao/PortableServer/DomainS_T.h:
        * tao/PortableServer/DomainS_T.i:

          Moved these files to a new library called Domain, as
          described below.

        * tao/PortableServer/PolicyS.cpp:
        * tao/PortableServer/TAO_PortableServer.dsp:
        * tao/PortableServer/TAO_PortableServer_Static.dsp:
        * tao/PortableServer/Makefile:
        * tao/PortableServer/Makefile.bor:

          Changes corresponding to the other changes to this library
          described above.

        * tao/Domain/DomainS.cpp:
        * tao/Domain/DomainS.h:
        * tao/Domain/DomainS.i:
        * tao/Domain/DomainS_T.cpp:
        * tao/Domain/DomainS_T.h:
        * tao/Domain/DomainS_T.i:
        * tao/Domain/domain_export.h:
        * tao/Domain/TAO_Domain.dsp:
        * tao/Domain/TAO_Domain_Static.dsp:
        * tao/Domain/Makefile:
        * tao/Domain/Makefile.bor:

          Files either new or moved from PortableServer. The CORBA
          Domain API depends on Interface Repository stub code,
          which, as described below, has been given its own library.
          If instead a hook method using the IFR client dynamic
          service object had been used, the IFR client library
          would then depend on PortableServer. Also, even after
          the Domain API is fully implemented, there is no reason
          for the POA to know about Domain's skeleton side.

        * tao/IFR_Client/InterfaceC.cpp:
        * tao/IFR_Client/InterfaceC.h:
        * tao/IFR_Client/InterfaceC.i:
        * tao/IFR_Client/IFR_Client_Adapter_Impl.cpp:
        * tao/IFR_Client/IFR_Client_Adapter_Impl.h:
        * tao/IFR_Client/ifr_client_export.h:
        * tao/IFR_Client/TAO_IFR_Client.dsp:
        * tao/IFR_Client/TAO_IFR_Client_Static.dsp:
        * tao/IFR_Client/Makefile:
        * tao/IFR_Client/Makefile.bor:

          Files either new or moved from TAO. This new library
          contains Interface Repository stub code, and a
          dynamic service object containing hook methods for
          use by TAO classes that interact with the IFR. This
          library also enables the removal of the compile-time
          options 'TAO_HAS_INTERFACE_REPOSITORY' and
          'interface_repo'. Also, in IFR_Client_Adapter_Impl.cpp,
          the method _get_interface() (found in CORBA::Object and
          LocalObject and required by CorbaScript) is implemented.
          Finally, the static Initializer() method not only
          registers the service object with the ORB, but also
          initializes the IFR typecodes which are in the CORBA
          namespace.

        * tao/InterfaceC.cpp:
        * tao/InterfaceC.h:
        * tao/InterfaceC.i:
        * tao/ifrfwd.h:

          Moved from TAO to the new IFR_Client library.

        * tao/IFR_Client_Adapter.cpp:
        * tao/IFR_Client_Adapter.h:

          Base class for the dynamic service object in the
          IFR_Client library. This base class contains no-op
          versions of the hook methods implemented in the
          derived class.

        * tao/IFR_TypeCodes.cpp:

          New file wherein the IFR typecodes that are in the
          CORBA namespace are initialized to 0, and the IFR
          constants that are in the CORBA namespace are assigned
          their correct values.

        * tao/Typecode_Constants.cpp:

          IFR typecodes in the CORBA namespace were removed from
          this file and moved to the IFR_Client dynamic service
          object.

        * tao/DomainC.cpp:
        * tao/DomainC.h:
        * tao/LocalObject.cpp:
        * tao/LocalObject.h:
        * tao/Object.cpp:
        * tao/Object.h:

          Calls to IFR_Client_Adapter hook methods added.

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:

          Mechanism (member ifr_client_adapter_name_ and get/set
          methods ifr_client_adapter_name()) added to enable the
          IFR_Client dynamic service object to register with the
          ORB.

        * tao/Makefile:
        * tao/Makefile.am:
        * tao/Makefile.bor:
        * TAOACE.dsw:
        * TAOACE_Static.dsw:
        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
        * tao/corba.h:
        * tao/corbafwd.h:

          Various changes necessitated by all of the above.

Mon Jan 22 17:04:59 2001  Nanbor Wang  <nanbor@cs.wustl.edu>

        * tao/Strategies/SHMIOP_Connector.cpp: Corrected several
          references to IIOP.  Thanks to Johnny Willemsen
          <jwillemsen@meco.nl> for pointing this out.

Mon Jan 22 12:49:25 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/MessagingC.h:
        * tao/MessagingC.i:
        * tao/MessagingC.cpp:

          Changed the name of Messaging::ReplyHandler::_tao_setup_collocation()
          to Messaging::ReplyHandler::Messaging_ReplyHandler_setup_collocation(),
          to correspond to recent changes to generated code in

          Fri Jan 19 17:41:10 2001  Jeff Parsons <parsons@cs.wustl.edu>. Thanks
          to Craig Rodrigues <rodrigc@mediaone.net> for reporting the build
          failures in tests/AMI and examples/Buffered_AMI.

Sat Jan 20 13:27:01 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Transport.h:
          Must include "Exception.h" for newer gcc versions.  Thanks to
          Craig Rodrigues <crodrigu@bbn.com> for pointing this out.

Sat Jan 20 09:29:34 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * examples/Advanced/ch_21:
        * examples/Advanced/ch_8_and_10:
        * examples/Advanced/ch_18/server.cpp: Made several fixes so
          these examples will compile correctly.  Thanks to Craig Rodrigues
          <rodrigc@mediaone.net> for reporting this.

Fri Jan 19 17:41:10 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:
        * TAO_IDL/be/be_visitor_interface_fwd/interface_fwd_ci.cpp:

          Reverted previous fix for the infinite recursion problem
          on Win32 with the Notification Service - compile errors
          were fixed, but not the infinite recursion at runtime.
          Renamed all foo::bar::_tao_setup_collocation() functions
          as foo::bar::foo_bar_setup_collocation(). This eliminates
          the need for the ACE_NESTED_CLASS macro and for the the typedef
          that was in the original fix. Thanks to Jonathan Stockdale
          <Jonathan.Stockdale@locusdialogue.com> for letting us know
          that it still wasn't fixed, and for the example code that
          clarified the problem.

Fri Jan 19 15:42:19 2001  Carlos O'Ryan  <coryan@uci.edu>

        * TAO_IDL/driver/drv_args.cpp:
          Fixed problem when compiling without GPERF.

        * tao/Cache_Entries.h:
          In many platforms (including QNX/RTP) 'index' is a macro undefine
          it in this header file as it is used as a method name.

Fri Jan 19 13:52:34 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/tests/Security/RejectInsecure/Makefile:
        * orbsvcs/tests/Security/RejectInsecure/README:
        * orbsvcs/tests/Security/RejectInsecure/client.cpp :
        * orbsvcs/tests/Security/RejectInsecure/server.cpp :
        * orbsvcs/tests/Security/RejectInsecure/server_i.cpp :
        * orbsvcs/tests/Security/RejectInsecure/server_i.h :
        * orbsvcs/tests/Security/RejectInsecure/authorization_test.idl :
        * orbsvcs/tests/Security/RejectInsecure/authorization_test_i.h:
        * orbsvcs/tests/Security/RejectInsecure/authorization_test_i.cpp :
        * orbsvcs/tests/Security/RejectInsecure/authorization_test_i.i :
        * orbsvcs/tests/Security/RejectInsecure/client.conf :
        * orbsvcs/tests/Security/RejectInsecure/client_nopassdwd.conf :
        * orbsvcs/tests/Security/RejectInsecure/server.conf :
        * orbsvcs/tests/Security/RejectInsecure/server_nopassdwd.conf :

          Test to check if insecure and unauthroized connections are
          rejected.

        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test_i.h:
        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test_i.cpp:
        * orbsvcs/tests/Security/SecurityLevel1/SLevel1_Test.idl:
        * orbsvcs/tests/Security/SecurityLevel1/server.cpp:
        * orbsvcs/tests/Security/SecurityLevel1/client.cpp:
        * orbsvcs/tests/Security/SecurityLevel1/README :
        * orbsvcs/tests/Security/SecurityLevel1/Makefile :

        * orbsvcs/examples/Security/SecurityLevel1/SLevel1_Test_i.h:
        * orbsvcs/examples/Security/SecurityLevel1/SLevel1_Test_i.cpp:
        * orbsvcs/examples/Security/SecurityLevel1/SLevel1_Test.idl:
        * orbsvcs/examples/Security/SecurityLevel1/server.cpp:
        * orbsvcs/examples/Security/SecurityLevel1/client.cpp:
        * orbsvcs/examples/Security/SecurityLevel1/README :
        * orbsvcs/examples/Security/SecurityLevel1/Makefile :

          Base for a test and example for the Security::Level1. These are
          no where near to compilation ready but will act as a base.

Fri Jan 19 13:16:10 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tests/Param_Test/client.cpp:
          Included tao/DynamicInterface/Request.h explicitly as HPUX had
          problems.

        * tests/DynAny_Test/test_wrapper.cpp:
          Included ace/Log_Msg.h explicitly.

        * tao/Sequence_T.cpp:
          Included tao/Environment.h explicitly.

        * orbsvcs/orbsvcs/Makefile.SSLIOP:
          Put a check for defining ACE_SHLIBS to get it compiled on HPUX.

Fri Jan 19 14:32:28 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_operation/ami_handler_reply_stub_operation_cs.cpp:

          Made some changes to code generation to fix compile
          errors on LynxOS. Also made cosmetic changes to generated
          code.

Fri Jan 19 12:30:05 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/Event/EC_Default_Factory.cpp:
          The supplier control object was configured with the consumer
          control period, an obvious typo. Thanks to Wei Chiang
          <wei.chiang@kolumbus.fi> for pointing this out.

Fri Jan 19 12:15:27 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:

          Changed generation of node's full name to node's
          local name when occurring in the body of the
          _var assignment operator from another _var. This
          error turned up compiling cide generated from
          nested_scopes.idl in IDL_Test.

        * TAO_IDL/ast/ast_array.cpp:
        * TAO_IDL/be/be_array.cpp:

          Cosmetic changes.

        * TAO_IDL/ast/ast_expression.cpp:

          Changed behavior of coerce() function to always
          return a new ExprValue. Formerly, if the
          ExprType already matched, the original ExprValue
          was returned. This led to cases where a node's
          ExprValue member (an array dim, for example)
          could be modified unintentionally. Thanks to
          JEAN-FRANCOIS DAUNE <Daune@IBA.be> for reporting
          this bug and sending in an example IDL file.

Fri Jan 19 08:55:45 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Leader_Follower.cpp:
          Add missing #include for "ace/Reactor.h".

Fri Jan 19 08:22:34 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/ORB.cpp:
          Add missing #include for "ace/Reactor.h".

Thu Jan 18 15:43:52 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:

          Corrected cut and paste errors from earlier checkin.

Thu Jan 18 10:40:29 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/README.txt:

          Updated to include some docs on the use of
          -ORBDefaultInitRef with the ImR.

Thu Jan 18 08:31:21 2001  Carlos O'Ryan  <coryan@uci.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
          Fixed warnings due to duplicate definition of the
          bidirectional_flag() method.

Thu Jan 18 09:05:46 2001  Douglas C. Schmidt  <schmidt@ace.cs.wustl.edu>

        * orbsvcs/Concurrency_Service: Added back the svc.conf file that
          appears to have been missing.  Thanks to Mark L. Boriack"
          <mboriack@dctd.saic.com> for reporting this.

Wed Jan 17 10:21:46 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/GIOP_Message_Base.cpp:
          This change should fix the annoying warnings under RedHat
          Linux.

Wed Jan 17 09:08:25 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/AMI/run_test.pl:
          Remove the IOR file before running the test, otherwise old files
          can produce unexpected results.

Tue Jan 16 22:35:03 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Single_Read/Makefile: Forgot to checkin the Makefile this
          morning.

        * tests/Makefile: Added the above Makefile to the list.

Tue Jan 16 18:57:27 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * orbsvcs/tests/ior_corbaname/Makefile:
          Updated dependencies.

Tue Jan 16 20:43:46 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_structure.cpp:
        * TAO_IDL/be/be_union.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ci.cpp:

          Modified body of _var assignment from another _var.
          In the case where an uninitialized _var is assigned
          to another, there is a dereference of a null pointer.
          This change was needed only for structs, unions and
          sequences. It was not necessary for interfaces (which
          use _duplicate and CORBA::release), valuetypes (which
          use add_ref and remove_ref) or arrays (which use
          *_free and *_dup). The new versions have the added
          benefits of propagating any exceptions that may arise
          from the heap allocation or from the constructor call,
          and of leaving the state of the _var unchanged if there
          is any problem. Added benefits are thanks to Carlos and
          thanks to Sathish Tiptur <Sathish.Tiptur@geind.ge.com>
          for reporting this bug.

        * tao/CONV_FRAMEC.i:
        * tao/DomainC.i:
        * tao/DynamicC.i:
        * tao/GIOPC.i:
        * tao/IIOPC.i:
        * tao/IOPC.i:
        * tao/MessagingC.i:
        * tao/Object_KeyC.i:
        * tao/OctetSeqC.i:
        * tao/PolicyC.i:
        * tao/RTCORBAC.i:
        * tao/StringSeqC.i:
        * tao/TAOC.i:
        * tao/TimeBaseC.i:
        * tao/DynamicAny/DynamicAnyC.i:
        * tao/IORManipulation/IORC.i:
        * tao/PortableServer/ImplRepoC.i:
        * tao/PortableServer/PortableServerC.i:

          Corresponding mods to hand-drafted files.

Tue Jan 16 15:38:29 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp:
          Add new Transport file to the projects

        * docs/TAO-metrics.html:
          Include link to nightly builds.

Tue Jan 16 15:07:29 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/Makefile:
        * tao/Makefile.am:
        * tao/Makefile.bor:
        * tao/tao-dll.icc:
        * tao/tao-lib.icc:
        * tao/Transport.h:
        * tao/Transport.inl:
        * tao/Transport.cpp:
        * tao/Pluggable.h:
        * tao/Pluggable.i:
        * tao/Pluggable.cpp:
          Move TAO_Transport class to its own file, Pluggable.{h,i,cpp}
          were growing too much, and there is no need to expose TAO users
          to the definition of Transport.

        * tao/Strategies/SHMIOP_Transport.h:
        * tao/Strategies/UIOP_Transport.h:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.h:
        * tao/Asynch_Invocation.cpp:
        * tao/Asynch_Reply_Dispatcher.cpp:
        * tao/Exclusive_TMS.cpp:
        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_Handler.cpp:
        * tao/GIOP_Message_Lite.cpp:
        * tao/GIOP_Utils.cpp:
        * tao/IIOP_Transport.h:
        * tao/IIOP_Transport.cpp:
        * tao/Invocation.cpp:
        * tao/Muxed_TMS.cpp:
        * tao/ORB_Core.h:
        * tao/Sync_Strategies.h:
        * tao/Synch_Reply_Dispatcher.cpp:
        * tao/TAO_Server_Request.cpp:
        * tao/Wait_On_Reactor.cpp:
        * tao/Wait_On_Read.cpp:
        * tao/Wait_On_Leader_Follower.cpp:
        * tao/DynamicInterface/DII_Invocation.cpp:
          A few files required explicit #includes for tao/Transport.h

        * tao/DynamicAny/Makefile:
        * tao/DynamicInterface/Makefile:
        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
        * tao/PortableServer/Makefile:
        * tao/SmartProxies/Makefile:
        * tao/Strategies/Makefile:
          Updated dependencies

        * orbsvcs/orbsvcs/Notify/Notify_Buffering_Strategy.h:
          Now we need an explicit #include for ace/Message_Queue.  This is
          good, before the change all TAO programs were getting
          Message_Queue for no reason.

        * tests/Faults/client.cpp:
        * tests/Faults/middle.cpp:
        * tests/Faults/ping.cpp:
        * tests/Faults/pong.cpp:
        * tests/Faults/server.cpp:
          Fixed typo in error message

Tue Jan 16 14:52:01 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/driver/drv_preproc.cpp:

          Removed the Win32 #ifdef guards in function DRV_pre_prc.
          The definition of ACE_DEFAULT_FILE_PERMS has changed to
          make this unnecessary.

        * orbsvcs/IFR_Service/drv_preproc_ifr.cpp:

          Brought this file up to date with the recent set of
          changes to TAO_IDL/driver/DRV_pre_proc.

Tue Jan 16 13:25:17 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_global.cpp:

          Removed explicit template instantiations. They are
          duplicates of those found in be_interface.cpp:

Tue Jan 16 10:39:13 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tao/IIOP_Transport.cpp:
          Fixed RCSID macro

Tue Jan 16 12:09:49 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/StringSeqC.h:
        * tao/StringSeqC.i:
        * tao/StringSeqC.cpp:
        * tao/diffs/StringSeq.diff:

          Changed the '#if !defined' guards around the declarations and
          definitions to something other than that generated by the
          IDL compiler. If an application IDL file contains
               typedef sequence<(w)string> (W)StringSeq;
          all declarations except those of the Any operators will be
          ignored by the IDL compiler. The exporting of the classes
          in TAO won't help because a 'CORBA_' has been added to all
          the class names, resulting in compiler errors. The easiest thing
          to do would be to use 'CORBA::(W)StringSeq' in the application
          code, and leave the typedef out of the IDL file altogether, but
          there are many reasons why this wouldn't be possible. Thanks to
          Jonas Nordin <jonas.nordin@syncom.se> for reporting this bug.

Tue  Jan 16 07:55:06 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tests/Single_Read: New stress test for the SingleRead that we do
          in TAO

        * tests/Single_Read/client.cpp:
        * tests/Single_Read/test_i.h:
        * tests/Single_Read/test_i.cpp:
        * tests/Single_Read/server.cpp:
        * tests/Single_Read/README:
        * tests/Single_Read/Single_Read.dsw:
        * tests/Single_Read/client.dsp:
        * tests/Single_Read/server.dsp: Files for the stress test. Please
          read the README file in the directory for details.

Tue Jan 16 07:05:06 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Mesage_Base.cpp:
        * tao/GIOP_Message_Handler.cpp:
        * tao/GIOP_Message_Handler.h:
        * tao/GIOP_Message_Handler.inl: Made changes to the way multiple
          messages that are read from the stream are handled. Initially,
          every message was split and put into a seperate buffer for
          processing. Now, we dump the whole message in to a new buffer and
          keep reading from that buffer for processing. This fixes some
          bizzare problems that we saw in a test which will be checked in
          next.

Mon Jan 15 19:28:20 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_broker_ch.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be_include/be_global.h:

          Previous fix
            Mon Jan 15 14:04:18 2001  Jeff Parsons <parsons@cs.wustl.edu>
          doesn't work for interfaces defined inside a module or nested
          modules, since the proxy broker factory function pointers
          must be declared globally. The above changes move the
          declaration(s) to a point in the client header file just
          after the close of any namespace(s) that may have been declared
          in the IDL file.

        * TAO_IDL/be/be_visitor_module/module_ch.cpp:

          Cosmetic changes.

Mon Jan 15 19:26:30 2001  Priyanka Gontla <pgontla@ece.uci.edu>

        * tao/ORB_Core.cpp:
          Added correct if-def guards to get ORB_Core.cpp compiled when
          TAO_HAS_RT_CORBA==0

          Thanks to David Allen <dallen@storm.com> for reporting this.

Mon Jan 15 16:02:59 2001  Christopher Kohlhoff <chris@kohlhoff.com>

        * tao/Makefile.bor:
          Added missing file GIOP_Message_Handler.cpp.

        * tao/PortableServer/Makefile.bor:
          Updated list of installed header files to include *.inl.

        * orbsvcs/IFR_Service/Makefile.bor:
        * orbsvcs/IFR_Service/tao_ifr.bor:
        * orbsvcs/IFR_Service/TAO_IFR_BE_DLL.bor:
          Added makefiles for IFR service utilities.

Mon Jan 15 14:04:18 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/base_proxy_broker_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/remote_proxy_broker_cs.cpp:

          Moved code generation for declaration and initialization of
          xxx_Proxy_Broker_Factory_function_pointer from the any_op
          visitor to the corresponding proxy broker visitor. The
          original intention was to prevent the declaration of this
          function pointer for local interfaces, in which case,
          generation of the Any operatiors would be skipped. However,
          generation of Any operators can also be skipped by using
          the command line option to suppress them (-Sa). Using this
          option would therefore generate uncompileable stub code.
          The proxy broker visitors above are also skipped if the
          interface is local, so the condition is still enforced, while
          no longer making the generation of the function pointer
          dependent on the generation of the Any operators. Thanks to
          Max Khon <fjoe@iclub.nsu.ru> for reporting this bug.

Sun Jan 14 07:05:06 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Transport.cpp : A stupid typo that was giving errors
          with g++ :(

Sat Jan 13 18:25:47 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Transport.cpp: Fixed a compile error in g++.

Sat Jan 13 10:36:11 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Acceptor.h (TAO_IIOP_Acceptor): Made hostname ()
          public.

        * tao/IIOP_Transport.cpp: Used TAO_IIOP_Acceptor::hostname () to
          get the hostnames in get_listen_point () method. Thanks to
          Ossama <ossama@uci.edu> for pointing this out.

        * tao/Wait_Strategy.h: Added a pure virtual method non_blocking
          (). This method will return a true or a false value. This value
          will be used by the connection handlers to set the socket to
          non_blocking mode. The strategy Wait_On_Read will need the
          socket on which it is waiting for a reply to be in blocking
          mode.

        * tao/Wait_On_Leader_Follower.h:
        * tao/Wait_On_Leader_Follower.cpp:
        * tao/Wait_On_Reactor.h:
        * tao/Wait_On_Reactor.cpp:
        * tao/Wait_On_Read.h:
        * tao/Wait_On_Read.cpp: Implementation for non_blocking ().

        * tao/IIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp: Set the
          socket to non_blocking mode based on the return value from the
          non_blocking () call from the wait strategy in the corresponding
          transports.

Fri Jan 12 14:52:41 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/LoadBalancing/ReplicaLocator.cpp (preinvoke):

          Fixed syntax error.

Fri Jan 12 16:36:11 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/Pluggable.i:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp: We open the sockets
          in non-blocking mode  and but change it to blocking only for the
          thread-per-connection option.

Fri Jan 12 11:32:01 2001  Ossama Othman  <ossama@uci.edu>

        * orbsvcs/orbsvcs/LoadBalancing/ReplicaLocator.cpp (preinvoke):

          Fixed a memory leak that occured each time a request was
          forwarded.  The object reference was duplicated during each
          location forward, which isn't necessary since the callee (in
          this case the PortableServer::ForwardRequest exception) is
          supposed to duplicate the reference if it wishes to retain
          ownership.  On top of that, the Object_var that held the object
          reference was forced to drop ownership by invoking its _retn()
          method, so the object reference was in effect duplicated twice!
          I must have had too much chocolate that day. :-)

Fri Jan 12 07:49:43 2001  Joe Hoffert  <joeh@cs.wustl.edu>

        * docs/compiler.html:
          Updated link to OMG's 2.3.1 specification download site.

Thu Jan 11 20:50:06 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Pluggable.i:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp: Changed
          the place when the sockets were put in non-blocking
          mode. Setting the socket to non-blocking mode at connection
          initialisation results in poor performance when a RW strategy is
          used in the client side.

Thu Jan 11 15:30:36 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_State.cpp:
        * tao/IIOP_Transport.cpp: Fixed warnings in g++ build.

Thu Jan 11 12:36:49 2001  Carlos O'Ryan  <coryan@uci.edu>

        * examples/Simple/time-date/svc.conf:
          Add RT_Protocol_Hooks to the configuration file, the ORB needs
          this service configured to work correctly.

Thu Jan 11 13:54:56 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * performance-tests/Cubit/TAO/DII_Cubit/DII_Cubit.dsw:
        * performance-tests/Cubit/TAO/DII_Cubit/client.dsp:

          Added static release and debug version to project.

Thu Jan 11 14:04:09 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Added code generation of preprocessor directives specific
          to BCB. Thanks to Chris Kohlhoff <chris@kohlhoff.com> for
          sending in the patches.

Thu Jan 11 14:02:25 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

          This set of changes are for making the server side of the
          completely reactive. This is achieved by doing a single read on
          the socket when the reactor calls the service handler for
          reading GIOP messages. The message is first read into a buffer
          and then apropriate checking is performed. Then the message is
          put into a CDR steam and sent to the higher layers of the ORB
          for processing.

        * tao/GIOP_Message_Handler.cpp
        * tao/GIOP_Message_Handler.h:
        * tao/GIOP_Message_Handler.inl: A new class. This class basically
          does the following functions (1) reads messages from the socket
          in to a buffer (2) checks whether the message is a GIOP message
          (3) calculates the size of the payload and figures if any part
          of the message has been left unread (4) some memory and buffer
          management for the incoming messages.

        * tao/GIOP_Message_Base.h:
        * tao/GIOP_Message_Base.cpp: Moved some portion of the GIOP header
          checking routines like parse_header () to GIOP_Message_handler
          class. This class now sends requests to the higher layers by
          creating a CDR stream on the stack from the buffer in the
          GIOP_Message_Handler class.

        * tao/GIOP_Message_State.i:
        * tao/GIOP_Message_State.h:
        * tao/GIOP_Message_State.cpp: Removed the Input CDR from this
          class. Changed the way fragments are managed.

        * tao/GIOP_Message_Lite.cpp:
        * tao/GIOP_Message_Lite.h: This still uses a CDR stream to read
          the incoming messages. So moved the CDR stream that is used to
          read the incoming messages from the GIOP message state in to
          this class.

        * tao/IIOP_Connection_Handler.cpp: Made the socket non-blocking.

        * tao/IIOP_Transport.cpp: The call process_message () now checks
          if more messages are available in the buffer for processing. The
          call read_process_message () calls process_message () in a loop
          to process all the messages, if the read has read more than one
          message in to the buffer .

        * tao/GIOP_Message_Generator_Parser_Impl.h: Made check_revision ()
          a static method.

        * tao/Pluggable.h:
        * tao/Pluggable.i: Added a new call read () that does a
          non-blocking read on the socket.

        * tao/Pluggable_Messaging.cpp:
        * tao/Pluggable_Messaging.h: Added a call more_messages () to
          check whether any messages need to be processed.

        * tao/TAO.dsp:
        * tao/TAO_Static.dsp: Added the new files.
        * tao/Makefile: Added new files and updated dependencies.

        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp: Replicated
          changes made to IIOP.

        * tao/IORManipulation/Makefile:
        * tao/IORTable/Makefile:
        * tao/PortableServer/Makefile:
        * tao/SmartProxies/Makefile:
        * tao/Strategies/Makefile: Updated dependencies.

Thu Jan 11 13:44:42 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/SmartProxies/Makefile.bor:

          Fixed it to work with static builds.

Thu Jan 11 10:00:06 2001  Frank  <fhunleth@cs.wustl.edu>

        * TAO version 1.1.12 released.

Wed Jan 10 18:48:31 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ORB_Core.cpp (resolve_rir):
          Added a check for the corbaloc and do the necessary. This change
          is necessary so that the -ORBDefaultInitRef option recognizes
          the corbaloc protocol.

Wed Jan 10 17:21:12 2001  Priyanka Gontla  <pgontla@ece.uci.edu>

        * tao/ORB_Core.cpp :

          In TAO_ORB_Core::get_protocol_hooks method, checked if we
          succesfully loaded the necessary instance of TAO_Protocols_Hooks
          and if it is unsuccessful, loaded the same in a hard-coded way.

Wed Jan 10 17:02:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * tao/Policy_Manager.cpp:

          Version 4.  G++ didn't like the last one, so with an
          assist from Carlos, used a ptr as an inbetweener.
          Does work on MSVC 5 and G++ and my fingers are crossed.

Wed Jan 10 16:52:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * tao/Policy_Manager.cpp:

          Fix, Version 3.  The intermediate variable was pointing
          to a temporary, which disappeared by the next statement.
          Found out the cast works on its own, so going with that
          now instead.

Wed Jan 10 15:57:42 2001  Darrell Brunsch <brunsch@uci.edu>

        * tao/Policy_Manager.cpp:

          Tried a new patch to get by a compiler problem in MSVC 5.
          Now I am using a intermediate variable to help MSVC do
          the conversion.

Wed Jan 10 12:07:21 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * tao/Policy_Manager.cpp:
          Reverted change by Darrell on Jan 8 since it was causing
          the Timed_Buffered_Oneways and Timeout tests to fail under
          the Linux and EGCS builds.

Tue Jan  9 14:31:12 2001  Frank Hunleth  <fhunleth@cs.wustl.edu>

        * performance-tests/Cubit/TAO/IDL_Cubit/server_shmiop.conf:
          Increased the shared memory size to 1MB by adding
          -MMAPFileSize 100000 to prevent an out of memory error
          when using SHMIOP.  Thanks to Bala for finding and fixing
          this.

Tue Jan  9 13:28:21 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/IIOP_Connection_Handler.cpp:
        * tao/Strategies/UIOP_Connection_Handler.cpp:
        * tao/Strategies/SHMIOP_Connection_Handler.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connection_Handler.cpp: Fixed an
          error that showed up only when the thread-per-connection is
          used. The closing of the handlers left the connection cache
          unstable which was doing bad things at shutdown.

Tue Jan  9 11:32:53 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/DynamicInterface/TAO_DynamicInterface_Static.dsp:

          Added files Unknown_User_Exception.* to project, as they
          had been added to TAO_DynamicInterface.dsp.

        * tao/DynamicInterface/Request.h:
        * tao/DynamicInterface/Server_Request.h:

          Added #include of Dynamic_Adapter_Impl.h. This will force
          the execution of the static constructor that registers
          the derived Dynamic_Adapter service object, whether the
          application is using DII or DSI.

Tue Jan  9 09:13:49 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/orbsvcs/ESF/ESF_Immediate_Changes.cpp:
        * orbsvcs/orbsvcs/ESF/ESF_Immediate_Changes.i: Fixed compiler
          errors in SPRO 5.1.

Mon Jan  8 17:27:29 2001  Darrell Brunsch <brunsch@uci.edu>

        * tao/Policy_Manager.cpp:

          I believe I removed a warning for MSVC 5 by adding a
          .in () to the

              CORBA::Policy_var policy = policies[i];

          statement in TAO_Policy_Manager_Impl::set_policy_overrides.

          Thanks to McGanahan Skjellifetti <cmeier@concentus-tech.com>
          for submitting a bug report about this.

        * orbsvcs/orbsvcs/AV/sfp.cpp:

          Fixed some unused argument warnings.

Mon Jan  8 13:36:18 2001  Yamuna Krishnamurthy  <yamuna@cs.wustl.edu>

        * orbsvcs/orbsvcs/AV/RTCP.cpp:
        * orbsvcs/orbsvcs/AV/RTCP.h:
        * orbsvcs/orbsvcs/AV/RTP.cpp:
        * orbsvcs/orbsvcs/AV/RTP.h:
        * orbsvcs/orbsvcs/AV/UDP.cpp:
        * orbsvcs/orbsvcs/AV/UDP.h:
        * orbsvcs/orbsvcs/AV/Protocol_Factory.h:

          Added a method send_frame to send char* buffers.

Mon Jan  8 10:59:25 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/Application_Test_server.dsp:

          Updated the IDL custom build command for Release configuration.

Mon Jan  8 09:31:24 2001  Ossama Othman  <ossama@uci.edu>

        * docs/orbsvcs.html:

          Updated orbsvcs hierarchy documentation to include TAO's Load
          Balancer and the Security Service.

Sun Jan  7 17:04:57 2001  Ossama Othman  <ossama@uci.edu>

        * rules.tao.GNU:

          Disable interceptor support if minimum CORBA is enabled.  This
          fixes portable interceptor related build errors in minimum CORBA
          builds.

Sun Jan  7 16:05:54 2001  Ossama Othman  <ossama@uci.edu>

        * tests/Portable_Interceptors/ForwardRequest/client.bor
          (OBJFILES):
        * tests/Portable_Interceptors/ForwardRequest/server.bor
          (OBJFILES):

          Fixed incorrect filenames.

Sat Jan  6 16:43:21 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * orbsvcs/IFR_Service/Makefile.tao_ifr:
        * orbsvcs/IFR_Service/Makefile.BE: Fixed compile errors

Fri Jan  5 14:19:03 2001  Darrell Brunsch <brunsch@uci.edu>

        * orbsvcs/ImplRepo_Service/Options.cpp:

          Thanks to Greg Hall <Greg.Hall@Australia.Boeing.com> for
          noticing a silly mistake on my part.  The ping_interval
          accessor in Options was returning the startup_timeout
          value instead.  Fixed.

        * orbsvcs/tests/ImplRepo/run_test.pl:

          Updated to use PerlACE::RunTest.

Fri Jan  5 18:36:09 2001  Balachandran Natarajan  <bala@cs.wustl.edu>

        * tao/GIOP_Message_Generator_Parser.h: Included
          "tao/Exception.h". This is needed to fix a compile error in gcc
          version 2.97. Thanks to Craig Rodrigues <rodrigc@mediaone.net>
          for reporting this.

Thu Jan  4 15:33:19 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/tmplinst.cpp:

          Added ACE_Write_Guard<ACE_Lock> and
          ACE_Read_Guard<ACE_Lock> to the instantiation list.

        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:

          Added explicit template instantiations for the tao_ifr
          project at the bottom of this file.

        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.h:

          Cosmetic changes.

Thu Jan  4 14:14:23 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/Makefile.tao_ifr:

          Removed execution of $TAO_ROOT/TAO_IDL/Makefile.FE.
          This library should already be built, and in any
          case, executing the makefile from this directory
          would create duplicate object files and a duplicate
          library in the current directory, which is not what
          we want.

        * orbsvcs/IFR_Service/Makefile.EX:

          Added TAO to the list of linked libraries. Apparently,
          the tao_ifr executable's link to TAO_IFR_BE_DLL,
          which is linked to TAO, is not sufficient.

Thu Jan  4 13:45:54 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/tao_ifr.dsp:
        * orbsvcs/IFR_Service/TAO_IFR_BE_DLL.dsp:

          Fixed some settings for the release version.

Wed Jan  3 19:07:31 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * tao/Exception.cpp:

          In the ostream operator for exceptions, there was a
          check for the exception's typecode's name being an
          empty string, but not for it being a null string.
          This check has been added, preventing an access
          violation in certain cases. Thanks to Kristopher Johnson
          <kristopher.johnson@transcore.com> for reporting this
          bug and suggesting a fix.

Wed Jan  3 17:43:44 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:

          In the generated function _tao_setup_collocation(),
          the  function of the same name is called in each of
          the interface's parents. In the case where a base
          class local name is the same as that of the child,
          and the parent is in a different namespace (IDL
          module), there was a problem with MSVC. Using the
          ACE_NESTED_CLASS macro caused this function call to
          self-recurse, leading to a stack overflow. Using
          the full name would cause a bogus compile error. Until
          Microsoft fixes this compiler bug, a workaround
          has been found. In the header file, the clashing
          parent's scoped name is typedef'd to the child class's
          flat name (double colons replaced by single underscores)
          concatenated with a self-explanatory extension string. This
          typedef is then used in the function body to make the
          call to the base class function. Thanks to Steve Olson
          <Steve_Olson@illinova.com> for reporting this bug, and
          to Carlos and Darrell for their help in finding a fix,
          and in researching Microsoft's documentation of this bug.

Wed Jan  3 12:20:15 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/Makefile.BE:
        * orbsvcs/IFR_Service/Makefile.EX:
        * orbsvcs/IFR_Service/Makefile.IFR_Service:
        * orbsvcs/IFR_Service/Makefile.TypeCodeFactory:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Makefile:

          Updated dependencies.

Wed Jan  3 12:14:12 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/server.cpp:

          Added .in() to a string_var passed to ACE_DEBUG.

Wed Jan  3 11:58:33 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/ifr_visitor_macro.h:

          Removed the #pragma once directive. It's
          unnecessary and egcs warns about it.

        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:

          Added default case to switch statement in
          load_any() method.

Wed Jan  3 10:30:46 2001  Joe Hoffert  <joeh@cs.wustl.edu>

        * tests/RTCORBA/README:
        * tests/README:
        * performance-tests/README:
          Documenting that TAO-specific RT tests are in
          $TAO_ROOT/performance-tests/RTCorba while general
          RT CORBA tests are in $TAO_ROOT/tests/RTCorba.

Wed Jan  3 09:28:41 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:

          Changed the order in the list of server object files,
          putting the IDL generated files first, so the IDL
          compiler will be invoked before compiling any of the
          server files. Thanks to Nanbor for noticing this.

Tue Jan  2 18:28:15 2001  Carlos O'Ryan  <coryan@uci.edu>

        * performance-tests/Cubit/TAO/MT_Cubit/Cubit_Task.cpp:
          Make sure the POA is activated before anything else happens,
          this should eliminate some phantom TRANSIENT exceptions in this
          test.  Thanks to Sebastian Schubert
          <sschuber@et.htwk-leipzig.de> and Li Zhou
          <lizhou@doc.ece.uci.edu> for helping identify this.  BTW,
          MT_Cubit is completely unreadable...

Tue Jan  2 18:35:22 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/be_produce.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvcs/IFR_Service/ifr_removing_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.h:
        * orbsvcs/IFR_Service/ifr_visitor_macro.h:

          Substituted new macros TAO_IFR_CHECK and
          TAO_IFR_CHECK_RETURN for ACE_CHECK and
          ACE_CHECK_RETURN. The new macros use the member
          environment varible of the ifr_visitor class
          rather than ACE_TRY_ENV.

Tue Jan  2 16:25:22 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * orbsvcs/IFR_Service/IFR.dsw:
        * orbsvcs/IFR_Service/Makefile:

          Modifications corresponding to the addition of the new files
          and projects added below.

        * orbsvcs/IFR_Service/Makefile.BE:
        * orbsvcs/IFR_Service/Makefile.EX:
        * orbsvcs/IFR_Service/Makefile.am:
        * orbsvcs/IFR_Service/Makefile.dependencies:
        * orbsvcs/IFR_Service/Makefile.tao_ifr:
        * orbsvcs/IFR_Service/TAO_IFR_BE_DLL.dsp:
        * orbsvcs/IFR_Service/TAO_IFR_BE_Export.h:
        * orbsvcs/IFR_Service/be_extern.h:
        * orbsvcs/IFR_Service/be_global.cpp:
        * orbsvcs/IFR_Service/be_global.h:
        * orbsvcs/IFR_Service/be_produce.cpp:
        * orbsvcs/IFR_Service/drv_args_ifr.cpp:
        * orbsvcs/IFR_Service/drv_extern_ifr.h:
        * orbsvcs/IFR_Service/drv_init_ifr.cpp:
        * orbsvcs/IFR_Service/drv_preproc_ifr.cpp:
        * orbsvcs/IFR_Service/drv_private_ifr.cpp:
        * orbsvcs/IFR_Service/drv_private_ifr.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_exception.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_operation.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_structure.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.h:
        * orbsvcs/IFR_Service/ifr_removing_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_removing_visitor.h:
        * orbsvcs/IFR_Service/ifr_visitor.cpp:
        * orbsvcs/IFR_Service/ifr_visitor.h:
        * orbsvcs/IFR_Service/ifr_visitor_macro.h:
        * orbsvcs/IFR_Service/tao_ifr.cpp:
        * orbsvcs/IFR_Service/tao_ifr.dsp:

          New files comprising the backend library and executable for
          'tao_ifr', which processes IDL files and administers the IfR.
          For the frontend library, the existing TAO_IDL_FE_DLL is
          used. The class IFR_Visitor overrides all the pure virtual
          functions of its base class AST_Visitor with no-ops, so that
          further subclasses can override only the functions they need.

        * TAOACE.dsw:

          New projects above added to workspace.

        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:

          Cosmetic changes.

        * orbsvcs/tests/InterfaceRepo/InterfaceRepo.dsw:
        * orbsvcs/tests/InterfaceRepo/Makefile:

          Modifications corresponding to the addition of the new files below.

        * orbsvcs/tests/InterfaceRepo/Application_Test/Application_Test_client.dsp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Application_Test_server.dsp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile:
        * orbsvcs/tests/InterfaceRepo/Application_Test/README:
        * orbsvcs/tests/InterfaceRepo/Application_Test/client.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.h:
        * orbsvcs/tests/InterfaceRepo/Application_Test/run_test.pl:
        * orbsvcs/tests/InterfaceRepo/Application_Test/server.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/test.idl:
        * orbsvcs/tests/InterfaceRepo/Application_Test/test_i.cpp:
        * orbsvcs/tests/InterfaceRepo/Application_Test/test_i.h:

          New files for IfR test which is intended to simulate an application,
          using tao_ifr in both its adding and removing capacity, and
          constructing a DII request based on information obtained by
          querying the IfR.

Tue Jan  2 14:19:03 2001  Carlos O'Ryan  <coryan@uci.edu>

        * tests/Param_Test/run_test_dii.pl:
          Invokes the run_test.pl script with the -i dii option.  This is
          useful in the nightly builds where the scripts must be invoked
          without any options.

Tue Jan  2 12:06:42 2001  Jeff Parsons <parsons@cs.wustl.edu>

        * TAO_IDL/be/be_visitor_sequence/gen_bounded_sequence_ci.cpp:

          Modified default constructor for bounded sequences to call
          the TAO_Bounded_Base_Sequence constructor that takes only
          a maximum and a void* buffer argument. This constructor
          automatically sets the length to 0 and assumes ownership
          of the buffer (which is created by a call to the derived
          sequence's allocate_buffer() method). Formerly, we were
          calling the base class constructor where length and release
          arguments are also supplied, and the release argument was
          set to 0, setting the stage for a possible memory leak.
          For the special cases of object sequences and string
          sequences, the above change was already made. Thanks to
          Bogdan Jeram <bjeram@eso.org> for reporting this bug.
