Thu Jul 28 22:40:26 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
        * TAO_IDL/be_include/be_visitor_context.h:
        
          Added logic to make the anyop export macro and export include
          default to the corresponding stub values, if any, when the
          former values have not been set on the command line, but -GA
          is used. This behavior will enable the *A.* files to be
          generated, but compiled into the same library as the stub
          files. if desired.

Thu Jul 28 18:35:07 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Buffering_Constraint_Policy.{h,cpp}:
        * tao/Messaging/Messaging_PolicyFactory.{h,cpp}:
          Moved the create method to extract a BufferingConstraint out of
          an Any to the Messaging lib. It is used there and not needed at
          all in the core TAO lib. In the future we probably will move the
          complete Buffering_Constraint_Policy to the Messaging lib

Thu Jul 28 16:43:07 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Added code generation to include *A.h files (in the
          *A.cpp file) for each included IDL file. If possible,
          existence checks for these included files will be added
          at a future date.

        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:

          Switched generation of the typecode declaration to the
          *A.h file, if the -GA option is used.

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Updated comment.

        * TAO_IDL/be/be_global.cpp:

          Fixed typo in generated usage message.

        * TAO_IDL/driver/drv_args.cpp:

          Added usage messages for each individual recognized
          -W[p|b] option.

        * docs/compiler.html:

          Updated command line option table with the new -Wb options
          for export macro and export include in *A.h files.

Thu Jul 28 12:41:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/AdapterActivatorA.cpp
        * tao/PortableServer/ForwardRequestA.cpp
        * tao/PortableServer/IdAssignmentPolicyA.cpp
        * tao/PortableServer/IdUniquenessPolicyA.cpp
        * tao/PortableServer/ImplicitActivationPolicyA.cpp
        * tao/PortableServer/LifespanPolicyA.cpp
        * tao/PortableServer/POAManagerA.cpp
        * tao/PortableServer/PolicyS.cpp
        * tao/PortableServer/PortableServerA.cpp
        * tao/PortableServer/PS_ForwardA.cpp
        * tao/PortableServer/RequestProcessingPolicyA.cpp
        * tao/PortableServer/ServantActivatorA.cpp
        * tao/PortableServer/ServantLocatorA.cpp
        * tao/PortableServer/ServantManagerA.cpp
        * tao/PortableServer/ServantRetentionPolicyA.cpp
        * tao/PortableServer/ThreadPolicyA.cpp
          Updated includes to the new AnyTypeCode library. Just a quick
          search and replace to get this lib compiling again. Only have
          an unresolved link error I have to investigate

Thu Jul 28 11:31:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
          Generate post include in A.h file, updated generated
          includes for moving of files

        * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
          Zapped starting spaces

        * tao/PortableServer/Basic_SArgument_T.cpp:
        * tao/PortableServer/Object_SArgument_T.cpp:
        * tao/PortableServer/Special_Basic_SArgument_T.cpp:
        * tao/PortableServer/UB_String_SArgument_T.cpp:
          Only include DynamicParameter.h when interceptors are enabled

Thu Jul 28 11:18:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnyTypeCode.mpc:
          New MPC file

        * tao/Alias_TypeCode.cpp
        * tao/Alias_TypeCode.h
        * tao/Alias_TypeCode.inl
        * tao/Alias_TypeCode_Static.cpp
        * tao/Alias_TypeCode_Static.h
        * tao/Alias_TypeCode_Static.inl
        * tao/Any.cpp
        * tao/Any.h
        * tao/Any.i
        * tao/AnySeq.pidl
        * tao/AnySeqA.cpp
        * tao/AnySeqC.cpp
        * tao/AnySeqC.h
        * tao/AnySeqS.h
        * tao/Any_Arg_Traits.h
        * tao/Any_Array_Impl_T.cpp
        * tao/Any_Array_Impl_T.h
        * tao/Any_Array_Impl_T.inl
        * tao/Any_Basic_Impl.cpp
        * tao/Any_Basic_Impl.h
        * tao/Any_Basic_Impl_T.cpp
        * tao/Any_Basic_Impl_T.h
        * tao/Any_Basic_Impl_T.inl
        * tao/Any_Dual_Impl_T.cpp
        * tao/Any_Dual_Impl_T.h
        * tao/Any_Dual_Impl_T.inl
        * tao/Any_Impl.cpp
        * tao/Any_Impl.h
        * tao/Any_Impl_T.cpp
        * tao/Any_Impl_T.h
        * tao/Any_Impl_T.inl
        * tao/Any_Special_Impl_T.cpp
        * tao/Any_Special_Impl_T.h
        * tao/Any_Special_Impl_T.inl
        * tao/Any_SystemException.cpp
        * tao/Any_SystemException.h
        * tao/Any_Unknown_IDL_Type.cpp
        * tao/Any_Unknown_IDL_Type.h
        * tao/BooleanSeqA.cpp
        * tao/Bounds.pidl
        * tao/BoundsA.cpp
        * tao/BoundsC.cpp
        * tao/BoundsC.h
        * tao/CONV_FRAMEA.cpp
        * tao/CharSeqA.cpp
        * tao/CurrentA.cpp
        * tao/DomainA.cpp
        * tao/DoubleSeqA.cpp
        * tao/Dynamic.pidl
        * tao/DynamicA.cpp
        * tao/DynamicC.cpp
        * tao/DynamicC.h
        * tao/DynamicS.h
        * tao/Dynamic_Parameter.pidl
        * tao/Dynamic_ParameterA.cpp
        * tao/Dynamic_ParameterC.cpp
        * tao/Dynamic_ParameterC.h
        * tao/Empty_Param_TypeCode.cpp
        * tao/Empty_Param_TypeCode.h
        * tao/Empty_Param_TypeCode.inl
        * tao/Enum_TypeCode.cpp
        * tao/Enum_TypeCode.h
        * tao/Enum_TypeCode.inl
        * tao/Enum_TypeCode_Static.cpp
        * tao/Enum_TypeCode_Static.h
        * tao/Enum_TypeCode_Static.inl
        * tao/Fixed_TypeCode.cpp
        * tao/Fixed_TypeCode.h
        * tao/Fixed_TypeCode.inl
        * tao/FloatSeqA.cpp
        * tao/GIOPA.cpp
        * tao/IIOPA.cpp
        * tao/IIOP_EndpointsA.cpp
        * tao/IOP_IORA.cpp
        * tao/InvalidSlotA.cpp
        * tao/LongDoubleSeqA.cpp
        * tao/LongLongSeqA.cpp
        * tao/LongSeqA.cpp
        * tao/Marshal.cpp
        * tao/Marshal.h
        * tao/Marshal.i
        * tao/Messaging_PolicyValueA.cpp
        * tao/NVList.cpp
        * tao/NVList.h
        * tao/NVList.i
        * tao/Null_RefCount_Policy.h
        * tao/ObjectIdListA.cpp
        * tao/Objref_TypeCode.cpp
        * tao/Objref_TypeCode.h
        * tao/Objref_TypeCode.inl
        * tao/Objref_TypeCode_Static.cpp
        * tao/Objref_TypeCode_Static.h
        * tao/Objref_TypeCode_Static.inl
        * tao/OctetSeqA.cpp
        * tao/PICurrentA.cpp
        * tao/ParameterModeA.cpp
        * tao/PolicyA.cpp
        * tao/Policy_ForwardA.cpp
        * tao/Recursive_Type_TypeCode.cpp
        * tao/Recursive_Type_TypeCode.h
        * tao/Recursive_Type_TypeCode.inl
        * tao/RefCount_Policy_Traits.h
        * tao/Sequence_TypeCode.cpp
        * tao/Sequence_TypeCode.h
        * tao/Sequence_TypeCode.inl
        * tao/Sequence_TypeCode_Static.cpp
        * tao/Sequence_TypeCode_Static.h
        * tao/Sequence_TypeCode_Static.inl
        * tao/ShortSeqA.cpp
        * tao/StringSeqA.cpp
        * tao/String_TypeCode.cpp
        * tao/String_TypeCode.h
        * tao/String_TypeCode.inl
        * tao/String_TypeCode_Static.cpp
        * tao/String_TypeCode_Static.h
        * tao/String_TypeCode_Static.inl
        * tao/String_TypeCode_Traits.h
        * tao/Struct_TypeCode.cpp
        * tao/Struct_TypeCode.h
        * tao/Struct_TypeCode.inl
        * tao/Struct_TypeCode_Static.cpp
        * tao/Struct_TypeCode_Static.h
        * tao/Struct_TypeCode_Static.inl
        * tao/SystemExceptionA.cpp
        * tao/TAOA.cpp
        * tao/TimeBaseA.cpp
        * tao/True_RefCount_Policy.cpp
        * tao/True_RefCount_Policy.h
        * tao/True_RefCount_Policy.inl
        * tao/TypeCode.cpp
        * tao/TypeCode.h
        * tao/TypeCode.inl
        * tao/TypeCodeA.cpp
        * tao/TypeCode_Base_Attributes.cpp
        * tao/TypeCode_Base_Attributes.h
        * tao/TypeCode_Base_Attributes.inl
        * tao/TypeCode_CDR_Extraction.cpp
        * tao/TypeCode_CDR_Extraction.h
        * tao/TypeCode_Case.cpp
        * tao/TypeCode_Case.h
        * tao/TypeCode_Case.inl
        * tao/TypeCode_Case_T.cpp
        * tao/TypeCode_Case_T.h
        * tao/TypeCode_Case_T.inl
        * tao/TypeCode_Constants.cpp
        * tao/TypeCode_Constants.h
        * tao/TypeCode_Struct_Field.h
        * tao/TypeCode_Traits.h
        * tao/TypeCode_Value_Field.h
        * tao/ULongLongSeqA.cpp
        * tao/ULongSeqA.cpp
        * tao/UShortSeqA.cpp
        * tao/Union_TypeCode.cpp
        * tao/Union_TypeCode.h
        * tao/Union_TypeCode.inl
        * tao/Union_TypeCode_Static.cpp
        * tao/Union_TypeCode_Static.h
        * tao/Union_TypeCode_Static.inl
        * tao/Value_TypeCode.cpp
        * tao/Value_TypeCode.h
        * tao/Value_TypeCode.inl
        * tao/Value_TypeCode_Static.cpp
        * tao/Value_TypeCode_Static.h
        * tao/Value_TypeCode_Static.inl
        * tao/WCharSeqA.cpp
        * tao/WStringSeqA.cpp
        * tao/WrongTransactionA.cpp
        * tao/append.cpp
        * tao/skip.cpp
          All these files are moved to the AnyTypeCode directory

        * tao/UB_String_Argument_T.cpp:
        * tao/Special_Basic_Argument_T.cpp:
        * tao/Basic_Argument_T.cpp:
        * tao/Object_Argument_T.cpp:
        * tao/operation_details.cpp
        * tao/Invocation_Base.cpp
          Only include Dynamic_ParameterC.h when interceptors are enabled

        * tao/SystemException.{h,cpp}:
          Moved excp_factory to this file, we need it here, temporarily
          removed _tao_type, we need to work on this.

        * tao/RequestInfo_Util.{h,cpp}:
          Don't build these when interceptors are disabled

        * tao/ORB_Core.cpp
          Include ace/Message_Block.h to get ACE_Data_Block

        * tao/ORB_Core.h:
          Added forward declaration of ACE_Data_Block

        * tao/extra_core.mpb:
          Removed NVList

        * tao/corba.h:
          Removed BoundsC.h

        * tao/PortableInterceptorC.cpp
        * tao/VisibilityC.cpp
        * tao/orb_typesC.cpp
        * tao/ORB.cpp
        * tao/PI_ForwardC.cpp
        * tao/InvalidSlotC.cpp
        * tao/WrongTransactionC.cpp
        * tao/GIOPC.cpp

        * tao/Exception.{h,cpp}:
          Commented out the Any operators, they should go to another lib,
          will handle this later

        * tao/Buffering_Constraint_Policy.cpp:
          Commented out Any usage, needs to be addressed

        * tao/WrongTransactionC.{h,cpp}:
        * tao/PolicyC.cpp:
          Commented out _tao_type for exceptions, we have to solve this
          because exceptions now use TypeCode but we have subsetted that

        * tao/UShortSeqC.h
        * tao/ULongSeqC.h
        * tao/WCharSeqC.h
        * tao/Typecode_typesC.h
        * tao/ULongLongSeqC.h
        * tao/StringSeqC.h
        * tao/TAOC.h
        * tao/TimeBaseC.h
        * tao/Policy_ForwardC.h
        * tao/PortableInterceptorC.h
        * tao/ShortSeqC.h
        * tao/VisibilityC.h
        * tao/LongDoubleSeqC.h
        * tao/LongLongSeqC.h
        * tao/LongSeqC.h
        * tao/Messaging_PolicyValueC.h
        * tao/ObjectIdListC.h
        * tao/OctetSeqC.h
        * tao/PICurrentC.h
        * tao/PI_ForwardC.h
        * tao/ParameterModeC.h
        * tao/PolicyC.h
        * tao/GIOPC.h
        * tao/IIOPC.h
        * tao/IIOP_EndpointsC.h
        * tao/IOP_IORC.h
        * tao/InvalidSlotC.h
        * tao/DomainC.h
        * tao/CharSeqC.h
        * tao/CurrentC.h
        * tao/DoubleSeqC.h
        * tao/Exception.h
        * tao/FloatSeqC.h
        * tao/WStringSeqC.h
        * tao/WrongTransactionC.h
        * tao/orb_typesC.h
        * tao/BooleanSeqC.h
        * tao/CONV_FRAMEC.h
          Removed TypeCode and Any operators, these are now all
          in AnyTypeCode/*.h. This has been by hand, with the
          change of Jeff below we can automate this

        * tao.mpc
          Removed a lot of files

Thu Jul 28 02:15:01 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be/be_visitor_array/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_root/any_op.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuebox/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/be_include/be_visitor_context.h:

          Modified -GA option to generate a *A.h file as well as
          a *A.cpp file, and added -Wb options 'anyop_export_macro'
          and 'anyop_export_include' to optionally compile the *A.*
          files into a separate library.

Wed Jul 27 17:51:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_argument/invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_argument/marshal_ss.cpp:
        * TAO_IDL/be/be_visitor_argument/paramlist.cpp:
        * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_field/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_ci.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cdr_cs.cpp:
          Use ACE_OutputCDR::from_octet and ACE_InputCDR:to_octet instead
          of CORBA::Any::from_octect and CORBA::Any::to_octet

Wed Jul 27 14:56:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_Lite.cpp:
          Use ACE_OutputCDR::from_octet and ACE_InputCDR:to_octet
