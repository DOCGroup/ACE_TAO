Fri Aug 12 12:59:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PI/ORBInitializer_Registry_Impl.cpp:
        * tao/PI/PICurrent.{h,cpp,inl}:
          Made PICurrent on the client side working again. When PICurrent is
          requested and used, then we allocate a key in the orb tss resources
          and create the PICurrent_Impl at that moment. The server side of
          PICurrent is now the next todo.

Fri Aug 12 09:54:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ORB.cpp:
        * tao/ORBInitializer_Registry_Adapter.h:
        * tao/PI/ORBInitializer_Registry_Impl.{h,cpp}:
          Changed the way the number of allocated slots is passed to PICurrent.
          This is now completely handled in the PI library, it is not up
          to the ORB anymore. This makes the ORB unaware of PICurrent

Thu Aug 11 15:56:51 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Fixed the logic of generating a *A.h include associated
          with an included .pidl file to determine whether the
          .pidl file is located in $TAO_ROOT/tao or in a subdirectory,
          and thus whether to include the *A.h file from the
          AnyTypeCode library or not. Only .pidl files in the
          $TAO_ROOT/tao directory itself have their associated
          *A.* files moved to the AnyTypeCode library.

Thu Aug 11 09:52:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PI/PI.h:
        * orbsvcs/IFR_Service/ifr_adding_visitor_union.cpp
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.cpp
        * orbsvcs/orbsvcs/FaultTolerance/FT_ClientPolicy_i.cpp
        * orbsvcs/orbsvcs/FaultTolerance/FT_ServerRequest_Interceptor.cpp
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/FtEventServiceInterceptor.h
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/Request_Context_Repository.cpp
        * orbsvcs/orbsvcs/IFRService/ConstantDef_i.cpp
        * orbsvcs/orbsvcs/IFRService/Container_i.cpp
        * orbsvcs/orbsvcs/IFRService/IFR_BaseS.cpp
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS.cpp
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.cpp
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.cpp
        * orbsvcs/orbsvcs/IFRService/UnionDef_i.cpp
        * orbsvcs/orbsvcs/Log/Hash_LogRecordStore.cpp
        * orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.cpp
        * orbsvcs/orbsvcs/Log/Log_Constraint_Visitors.h
        * orbsvcs/orbsvcs/Log/PersistStore.cpp
        * orbsvcs/orbsvcs/Log/PersistStore.h
        * orbsvcs/orbsvcs/Naming/Naming_Server.cpp
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.cpp
        * orbsvcs/orbsvcs/Notify/Notify_Constraint_Visitors.h
        * orbsvcs/orbsvcs/Security/SL3_PolicyFactory.cpp
        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.cpp
        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.h
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp
        * examples/POA/DSI/Database_i.cpp
        * examples/POA/POA_BiDir/POA_BiDir.cpp
        * examples/Simulator/Event_Supplier/Event_Con.cpp
        * orbsvcs/PSS/PSDL_Code_Gen.cpp
        * orbsvcs/examples/ORT/Gateway_i.cpp
        * orbsvcs/tests/Notify/Reconnecting/Consumer.cpp
        * tao/IFR_Client.mpc
        * tao/tao.mpc
        * tests/Nested_Upcall_Crash/client.cpp
        * tests/Nested_Upcall_Crash/scavenger.cpp
        * tests/Nested_Upcall_Crash/server.cpp
        * tests/Oneway_Buffering/client.cpp
        * tests/POA/Policies/Policies.cpp
        * tests/Portable_Interceptors/PICurrent/client.cpp

Wed Aug 10 19:47:30 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_visitor_root.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/be_include/be_visitor_root/root.h:

          Removed calls to the visitor classes in the files
          below that have been removed, and removed the -GT
          command line option and the associated usage message.
          The IDL compiler now generates no explicit template
          instantiations, and has no command line option to
          do so.

        * TAO_IDL/be_include/be_visitor_tmplinst/arg_tmplinst.h:
        * TAO_IDL/be_include/be_visitor_tmplinst/tmplinst.h:
        * TAO_IDL/be_include/be_visitor_tmplinst/tmplinst_cs.h:
        * TAO_IDL/be_include/be_visitor_tmplinst/tmplinst_ss.h:
        * TAO_IDL/be/be_visitor_tmplinst/arg_tmplinst.cpp:
        * TAO_IDL/be/be_visitor_tmplinst/tmplinst.cpp:
        * TAO_IDL/be/be_visitor_tmplinst/tmplinst_cs.cpp:
        * TAO_IDL/be/be_visitor_tmplinst/tmplinst_ss.cpp:
        * TAO_IDL/be_include/be_visitor_tmplinst.h:
        * TAO_IDL/be/be_visitor_tmplinst.cpp:

          Unused visitor classes related to generation of
          explicit template instantiations, their files
          have been removed from CVS.

        * docs/compiler.html:

          Removed the -GT command line option from the table.

        * docs/releasenotes/index.html:

          Updated documentation of the IDL compiler to reflect
          the above changes.

Wed Aug 10 13:38:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/PortableInterceptors/Benchmark/client_interceptors.cpp
        * tests/PortableInterceptors/Benchmark/server_interceptors.cpp
        * tests/PortableInterceptors/Collocated/Dynamic/interceptors.cpp
        * tests/PortableInterceptors/Dynamic/client_interceptor.cpp
        * tests/PortableInterceptors/Dynamic/server_interceptor.cpp
        * tests/PortableInterceptors/PolicyFactory/PolicyFactory.cpp

Wed Aug 10 13:27:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/Buffered_AMI/client.cpp
        * examples/Buffered_Oneways/client.cpp
        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp
        * orbsvcs/orbsvcs/CosEvent/CEC_TypedEvent.h
        * orbsvcs/orbsvcs/CosEvent/CEC_TypedEventChannel.h
        * tests/MProfile_Connection_Timeout/client.cpp
        * tests/MProfile_Forwarding/MProfile_Forwarding.mpc
        * tests/MT_BiDir/client.cpp
        * tests/MT_BiDir/server.cpp
        * tests/MT_Client/MT_Client.mpc
        * tests/MT_Server/MT_Server.mpc
        * tests/MT_Timeout/Client_Task.cpp
        * performance_tests/Anyop/Anyop.mpc
        * performance_tests/Anyop/anyop.cpp
        * performance_tests/Callback/client.cpp
        * performance_tests/Callback/server.cpp
        * performance_tests/Cubit/TAO/DII_Cubit/client.cpp
        * performance_tests/Latency/DII/client.cpp
        * performance_tests/Latency/DSI/Roundtrip.cpp
        * performance_tests/Latency/Deferred/client.cpp
        * performance_tests/RTCorba/Oneways/Reliable/client.cpp
        * performance_tests/Sequence_Latency/DII/client.cpp
        * performance_tests/Sequence_Latency/DSI/Roundtrip.cpp
        * performance_tests/Sequence_Latency/Deferred/client.cpp
          Updated for moves.

Wed Aug 10 12:59:06 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp:

          Removed generation of Any operators for local interfaces.

Wed Aug 10 11:39:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/MProfile_Forwarding/MProfile_Forwarding.mpc
        * tests/MT_Client/MT_Client.mpc
        * tests/MT_Server/MT_Server.mpc
        * tests/DLL_ORB/DLL_ORB.mpc
        * tests/CDR/CDR.mpc:
        * tests/AMI_Buffering/AMI_Buffering.mpc:
        * tests/AMI_Timeouts/AMI_Timeouts.mpc:
        * tests/BiDirectional/BiDirectional.mpc:
        * tests/BiDirectional_MultipleORB/destroy.mpc:
        * tests/Collocation/Collocation.mpc:
        * CDR/CDR.mpc
          Simplified this MPC file

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp
        * orbsvcs/orbsvcs/CosEvent/CEC_TypedEvent.h
        * orbsvcs/orbsvcs/CosEvent/CEC_TypedEventChannel.h
        * orbsvcs/orbsvcs/Security/SL3_PolicyFactory.cpp
        * tests/MProfile_Connection_Timeout/client.cpp
        * tests/MT_BiDir/client.cpp
        * tests/MT_BiDir/server.cpp
        * tests/MT_Timeout/Client_Task.cpp
        * tests/CDR/tc.cpp:
        * tests/AMI_Buffering/client.cpp:
        * tests/AMI_Timeouts/timeout_client.cpp:
        * tests/BiDirectional/client.cpp:
        * tests/BiDirectional/server.cpp:
        * tests/BiDirectional_MultipleORB/destroy.cpp:
        * tests/BiDirectional_NestedUpcall/client.cpp:
        * tests/BiDirectional_NestedUpcall/server.cpp:
        * tests/Big_Request_Muxing/Client_Task.cpp:
        * Blocking_Sync_None/client.cpp
        * Bug_1020_Basic_Regression/client.cpp
        * Bug_1020_Regression/client.cpp
        * Bug_1269_Regression/client.cpp
        * Bug_1270_Regression/client.cpp
        * Bug_1361_Regression/client.cpp
        * Bug_1476_Regression/Client_Task.cpp
        * Bug_1476_Regression/client.cpp
        * Bug_1482_Regression/client.cpp
        * Bug_1551_Regression/client.cpp
        * CDR/basic_types.cpp
        * tests/Connection_Timeout/client.cpp
        * tests/Crashed_Callback/client.cpp
        * tests/Crashed_Callback/server.cpp
        * tests/DynAny_Test/data.cpp
        * tests/DynAny_Test/data.h
          Added missing includes that are needed because of file moves

        * tests/Any/Recursive/RecursiveHello.mpc:
          Don't use -GA, causes problems with the recursive structs

        * tao/corba.h:
          Removed AnySeqC, file moved to a seperate library

        * tao/BD_String_Argument_T.h:
        * tao/PortableServer/BD_String_SArgument_T.{h,inl}:
          Fixed some errors in these files

        * tao/Fixed_Size_Argument_T.cpp
        * tao/Fixed_Size_Argument_T.h
        * tao/Fixed_Size_Argument_T.inl
        * tao/PortableServer/Fixed_Size_SArgument_T.h
        * tao/PortableServer/Fixed_Size_SArgument_T.inl
          Updated

        * tao/orb.idl
          Removed moved files

Wed Aug 10 08:14:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
          Added AnyTypeCode to include path of Any_Arg_Traits.h

Wed Aug 10 08:06:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/IFR_Client/*:
          Removed -GA in the generation options and removed all *A.cpp
          files. The IFR_Client has a struct defined in an interface, then
          the generation of seperate *A.h file will not work.

        * tao/AnyTypeCode/ValueModifier*.*:
          Added A.{h,cpp} file.

Tue Aug  9 13:46:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/Any_SArg_Traits.h
        * tao/PortableServer/BD_String_SArgument_T.cpp
        * tao/PortableServer/BD_String_SArgument_T.h
        * tao/PortableServer/BD_String_SArgument_T.inl
        * tao/PortableServer/Basic_SArgument_T.cpp
        * tao/PortableServer/Basic_SArgument_T.h
        * tao/PortableServer/Basic_SArgument_T.inl
        * tao/PortableServer/Basic_SArguments.h
        * tao/PortableServer/Fixed_Array_SArgument_T.cpp
        * tao/PortableServer/Fixed_Array_SArgument_T.h
        * tao/PortableServer/Fixed_Array_SArgument_T.inl
        * tao/PortableServer/Fixed_Size_SArgument_T.cpp
        * tao/PortableServer/Fixed_Size_SArgument_T.h
        * tao/PortableServer/Fixed_Size_SArgument_T.inl
        * tao/PortableServer/Object_SArg_Traits.h
        * tao/PortableServer/Object_SArgument_T.cpp
        * tao/PortableServer/Object_SArgument_T.h
        * tao/PortableServer/Object_SArgument_T.inl
        * tao/PortableServer/PolicyS.cpp
        * tao/PortableServer/Special_Basic_SArgument_T.cpp
        * tao/PortableServer/Special_Basic_SArgument_T.h
        * tao/PortableServer/Special_Basic_SArgument_T.inl
        * tao/PortableServer/Special_Basic_SArguments.h
        * tao/PortableServer/TypeCode_SArg_Traits.h
          Updated also all SArg_Traits templates

Tue Aug  9 12:37:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_arg_traits.cpp:
          Updated Arg traits generation

Tue Aug  9 11:51:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * AnyTypeCode_Adapter.h
        * BD_String_Argument_T.cpp
        * BD_String_Argument_T.h
        * BD_String_Argument_T.inl
        * Basic_Argument_T.cpp
        * Basic_Argument_T.h
        * Basic_Argument_T.inl
        * Basic_Arguments.h
        * DomainC.cpp
        * Fixed_Array_Argument_T.cpp
        * Fixed_Array_Argument_T.h
        * Fixed_Array_Argument_T.inl
        * ORB_Core_TSS_Resources.cpp
        * ORB_Core_TSS_Resources.h
        * Object.cpp
        * Object.h
        * Object_Argument_T.cpp
        * Object_Argument_T.h
        * Object_Argument_T.inl
        * PolicyC.cpp
        * Special_Basic_Argument_T.cpp
        * Special_Basic_Argument_T.h
        * Special_Basic_Argument_T.inl
        * Special_Basic_Arguments.h
        * UB_String_Argument_T.cpp
        * UB_String_Argument_T.h
        * UB_String_Argument_T.inl
        * UB_String_Arguments.h
        * Var_Array_Argument_T.cpp
        * Var_Array_Argument_T.h
        * Var_Array_Argument_T.inl
        * Var_Size_Argument_T.cpp
        * Var_Size_Argument_T.h
        * Var_Size_Argument_T.inl
        * AnyTypeCode/AnyTypeCode_Adapter_Impl.h
        * AnyTypeCode/Any_Arg_Traits.h
        * AnyTypeCode/TypeCode.h
        * Domain/DomainS.cpp
        * IFR_Client/IFR_BaseC.cpp
        * IORInterceptor/IORInfoC.cpp
        * ImR_Client/ImplRepoC.cpp
        * ImR_Client/ImplRepoS.cpp
        * ObjRefTemplate/ObjectReferenceTemplateC.cpp
        * PortableServer/PolicyS.cpp
        * PortableServer/PortableServerC.cpp
        * RTScheduling/RTSchedulerC.cpp
        * Valuetype/AbstractBase.h
        * Valuetype/ValueBase.h
          Updated Argument classes to use new Any Insert Policy  template

Mon Aug  8 09:13:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ORB.cpp:
        * tao/ORB_Core.{h,cpp,i}:
        * tao/PI/ClientRequestInfo.cpp:
        * tao/PI_Server/POA_Current.cpp:
        * tao/PI_Server/ServerRequestInfo.cpp:
          Updated partly for PI changes. Idea is now to store PICurrent in the
          ORB Core as Object_ptr, a dynamic cast can then be done in the PI libs

        * tao/Argument.cpp
        * tao/Argument.h
        * tao/BD_String_Argument_T.cpp
        * tao/BD_String_Argument_T.h
        * tao/Basic_Argument_T.cpp
        * tao/Basic_Argument_T.h
        * tao/Basic_Arguments.h
        * tao/DomainC.cpp
        * tao/Fixed_Array_Argument_T.cpp
        * tao/Fixed_Array_Argument_T.h
        * tao/Fixed_Size_Argument_T.cpp
        * tao/Fixed_Size_Argument_T.h
        * tao/IFR_Client_Adapter.h
        * tao/Object.cpp
        * tao/Object.h
        * tao/Object_Argument_T.cpp
        * tao/Object_Argument_T.h
        * tao/PolicyC.cpp
        * tao/Special_Basic_Argument_T.cpp
        * tao/Special_Basic_Argument_T.h
        * tao/UB_String_Argument_T.cpp
        * tao/UB_String_Argument_T.h
        * tao/Var_Array_Argument_T.cpp
        * tao/Var_Array_Argument_T.h
        * tao/Var_Size_Argument_T.cpp
        * tao/Var_Size_Argument_T.h
        * tao/DynamicInterface/DII_Arguments.cpp
        * tao/DynamicInterface/DII_Arguments.h
        * tao/IFR_Client/IFR_BaseC.cpp
        * tao/IFR_Client/IFR_BasicC.cpp
        * tao/IFR_Client/IFR_Client_Adapter_Impl.cpp
        * tao/IFR_Client/IFR_Client_Adapter_Impl.h
        * tao/IFR_Client/IFR_ComponentsC.cpp
        * tao/IFR_Client/IFR_ExtendedC.cpp
        * tao/ImR_Client/ImplRepoC.cpp
        * tao/ImR_Client/ServerObjectC.cpp
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.cpp
        * tao/PI/ClientRequestInfo.cpp
        * tao/PI_Server/ServerRequestInfo.cpp
        * tao/PortableServer/BD_String_SArgument_T.cpp
        * tao/PortableServer/BD_String_SArgument_T.h
        * tao/PortableServer/Basic_SArgument_T.cpp
        * tao/PortableServer/Basic_SArgument_T.h
        * tao/PortableServer/Basic_SArguments.h
        * tao/PortableServer/Fixed_Array_SArgument_T.cpp
        * tao/PortableServer/Fixed_Array_SArgument_T.h
        * tao/PortableServer/Fixed_Size_SArgument_T.cpp
        * tao/PortableServer/Fixed_Size_SArgument_T.h
        * tao/PortableServer/Object_SArgument_T.cpp
        * tao/PortableServer/Object_SArgument_T.h
        * tao/PortableServer/PolicyS.cpp
        * tao/PortableServer/Special_Basic_SArgument_T.cpp
        * tao/PortableServer/Special_Basic_SArgument_T.h
        * tao/PortableServer/UB_String_SArgument_T.cpp
        * tao/PortableServer/UB_String_SArgument_T.h
        * tao/PortableServer/Var_Array_SArgument_T.cpp
        * tao/PortableServer/Var_Array_SArgument_T.h
        * tao/PortableServer/Var_Size_SArgument_T.cpp
        * tao/PortableServer/Var_Size_SArgument_T.h
          Changed the interface of TAO::Argument. Instead of using
          Dynamic::Parameter as argument, use the method interceptor_
          value that gets an Any* argument and a separate mode argument
          to get the mode of the argument (in/out/inout). Instead of
          duplicating this mode method, added InArgument, InoutArgument,
          OutArgument and RetArgument class that implement this method.
          All templates are then derived from the correct base method.

Mon Aug  8 20:26:22 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/AnyTypeCode/NVList_Adapter_Impl.h:

          Corrected the export macro.

Mon Aug  8 19:55:07 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp:

          Moved generation of the _tao_type() method for user exceptions
          to the *A.cpp file if we are using the -GA option.

        * TAO_IDL/be/be_codegen.cp:

          Added code generation of *A.h includes from the AnyTypeCode
          library corresponding to included .pidl files.

Thu Aug  4 18:52:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Cache_Entries.{h,inl}:
          Removed non const index method

        * tao/PortableServer/SArg_Traits_T.h:
        * tao/PortableServer/Basic_SArguments.h:
        * tao/PortableServer/Special_Basic_SArguments.h:
        * tao/PortableServer/UB_String_SArguments.h:
        * tao/Arg_Traits_T.h:
          Moved SArg_Traits to its own file and updated includes

        * tao/PI_Server/ServerRequestInfo.cpp:
        * tao/PI_Server/ServerInterceptorAdapter.cpp:
          Updated for PICurrent changes

        * tao/PI/ClientRequestInfo.{h,cpp}:
          Implemented several methods here instead of using
          functionality that was in the TAO lib for interceptors

        * tao/DynamicInterface/DII_Invocation.cpp:
          Updated include of RequestInfo_Util.h

        * tao/Invocation_Base.{h,cpp}:
        * tao/operation_details.{h,cpp,i}:
          Removed several methods that are just there for the
          ClientRequestInfo. The functionality moved to the
          ClientRequestInfo class in the PI library where we just
          access the operation details.

        * tao/tao.mpc:
          Removed files

        * tao/RequestInfo_Util.{h,cpp}:
        * tao/PI/RequestInfo_Util.{h,cpp}:
          Moved to the PI lib

        * tao/Invocation_Adapter.h:
          Removed obsolete forward declaration of TAO_Exception_Data

        * tao/AnyTypeCode/TypeCode.cpp:
          Applied some patches Ossama did to the main branch also

        * tao/Argument.cpp:
          Use true instead of 1

        * tao/PI/InvalidSlotA.h:
        * tao/PI/InvalidSlotC.h:
          Corrected export macro

        * tao/DynamicInterface/Unknown_User_Exception.{h,cpp}:
          Removed _is_a method

        * tao/operation_details.{h,i}:
          Removed non const version of addressing_mode

        * tao/Invocation_Base.{h,inl}:
          Added accessor for operation details

Tue Aug  2 13:13:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/TC_Constants_Forward.h:
        * tao/AnyTypeCode/TC_Constants_Forward.h:
          Moved to AnyTypeCode lib

Tue Aug  2 12:49:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/CORBA_methods.h:
          Removed not needed forward declarations

        * tao/Dynamic_Adapter.cpp:
          Removed not needed includes and explicit templates

        * tao/NVList_Adapter.{h,cpp}:
          New NVList adapter

        * tao/ORB.{h,cpp}:
          Use new NVList Adapter

        * tao/tao.mpc:
          Added NVList_Adapter files

        * tao/AnyTypeCode.mpc:
          Added new files

        * tao/NVList.h:
          Updated friends

        * tao/NVList_Adapter_Impl.{h,cpp}:
          Concrete NVList Adapter implementation

Tue Aug  2 12:17:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnyTypeCode/AnyTypeCode_Adapter_Impl.{h,cpp}:
          Adapter implementation. _tao_type for all systemexceptions
          is not available

Tue Aug  2 12:02:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnyTypeCode/ExceptionA.cpp:
          Reenabled CORBA::Exception Any operators now _tao_type is available
          again

Mon Aug  1 19:18:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Exception.{h,cpp}:
          Removed class TAO_DONT_CATCH, it is not used at all. Also removed
          the emulated exception argument from create_system_exception, it
          is not needed

Mon Aug  1 19:06:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnyTypeCode_Adapter.{h,cpp}:
        * tao/SystemException.cpp:
          Added first version of Adapter interface and implemented
          SystemException::_tao_type to call the adapter method.

        * tao/tao.mpc:
          Added new file

Mon Aug  1 18:10:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Exception.{h,cpp}:
        * tao/SystemException.{h,cpp}:
        * tao/UserException.{h,cpp}:
          Removed _is_a, it is TAO specific to handle environments without
          RTTI but we require and use that, so zapped this method.
          Reimplemented SystemException::_tao_get_omg_exception_description
          to use dynamic_cast to check for the specific exception type

Mon Aug  1 15:22:59 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/AnyTypeCode/DynamicA.h:
        * tao/AnyTypeCode/DynamicC.h:

          Fixed some export macros that were not changed when these
          files were moved to the AnyTypeCode library.

Mon Aug  1 14:20:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Exception.h:
        * tao/SystemException.h:
        * tao/UserException.h:
          Documentation improvements

Mon Aug  1 12:30:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Exception.{h,cpp}:
          Declared _tao_type as pure virtual. No need to have a default
          implementation here

        * tao/ORB.{h,cpp}:
          Optimized InvalidName::_downcast. Implemented _tao_type as
          return 0, we don't have a default implementatio anymore in the
          base

        * tao/PolicyC.{h,cpp}:
        * tao/WrongTransactionC.{h,cpp}:
          Made _tao_type active again, implement this as return 0 at this
          moment, have to call a new adapter later

        * tao/SystemException.{h,cpp}:
          Added _tao_type again, implemented it as return 0, have to add
          a call to an adapter later for all system exceptions

        * tao/UserException.{h,cpp}:
          Added _tao_type with return 0 as default implementation, coming
          from the base

        * tao/AnyTypeCode/BoundsC.{h,cpp}:
        * tao/PI/InvalidSlotC.{h,cpp}:
          Added _tao_type again.

        * tao/AnyTypeCode/TypeCode.{h,cpp}:
          Added _tao_type with return 0

Mon Aug  1 11:19:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnyTypeCode.mpc:
          Updated for a lot of changes

        * tao/Basic_Argument_T.cpp:
          Added a temporarily specialization for unsigned int, will need to be
          removed soon

        * tao/Object_Argument_T.cpp
          Added a temporarily specialization for Policy, will need to be
          removed soon

        * tao/Special_Basic_Argument_T.cpp:
          Added a temporarily specialization for bool, will need to be
          removed soon

        * tao/UB_String_Argument_T.cpp:
          Added a temporarily specialization for string, will need to be
          removed soon

        * tao/BD_String_Argument_T.cpp:
        * tao/Fixed_Array_Argument_T.cpp:
        * tao/Fixed_Size_Argument_T.cpp:
          Removed include of Dynamic_ParameterC.h

        * tao/Block_Flushing_Strategy.h:
        * tao/Flushing_Strategy.h:
        * tao/Leader_Follower_Flushing_Strategy.h:
        * tao/Reactive_Flushing_Strategy.h:
        * tao/Wait_On_Leader_Follower.h:
        * tao/Wait_On_LF_No_Upcall.h:
        * tao/Wait_On_Reactor.h:
        * tao/Wait_On_Read.h:
        * tao/Wait_Strategy.h:
          No need to export the class in this file

        * tao/DomainC.cpp:
          Pass the Dynamic_Parameter to the IFR Adapter, this way we don't
          depend on Any

        * tao/IFR_Client_Adapter.h:
          Pass the Dynamic::Parameter to interfacedef_any_insert

        * tao/InvalidSlot*.*:
          Moved to the PI library

        * tao/Invocation_Base.cpp:
        * tao/operation_details.cpp:
          Commented out several methods which need to be reimplemented
          using a new adapter

        * tao/ORB.cpp:
        * tao/ORB_Core.{h,cpp,i}:
        * tao/ORB_Core_TSS_Resources.{h,cpp}:
          Commented out creation of PICurrent, will have to reimplement this
          now PICurrent moved to the PI lib

        * tao/PortableInterceptor.pidl:
        * tao/PortableInterceptorC.h:
          Removed the files that moved to the PI lib

        * tao/PICurrent.{h,cpp,inl,pidl}:
        * tao/PICurrent_Copy_Callback.{h,cpp}:
        * tao/PICurrent_Impl.{h,cpp,inl}:
        * tao/PICurrent_Loader.{h,cpp}:
        * tao/PICurrentC.{h,cpp}:
        * tao/PICurrentS.h:
          Moved to the PI lib

        * tao/Server_Request.{h,cpp,inl}:
          Use pointers for the PI stuff, will need to update this soon

        * tao/TypeCodeFactory_Adapter.h:
          Added forward declaration for ValueModifier

        * tao/ValueModifier.pidl:
        * tao/ValueModifierC.{h,cpp}:
        * tao/ValueModifierS.h:
          Moved to AnyTypeCode lib

        * tao/Visibility.pidl:
        * tao/VisibilityC.{h,cpp}:
        * tao/VisibilityS.h:
          Moved to AnyTypeCode lib

        * tao/AnyTypeCode/PICurrentA.{h,cpp}:
        * tao/AnyTypeCode/InvalidSlotA.{h,cpp}:
          Moved to the PI lib

        * tao/AnyTypeCode/PortableInterceptorA.h:
          Removed some includes

        * tao/AnyTypeCode/TypeCode.h:
        * tao/AnyTypeCode/Value_TypeCode:
        * tao/AnyTypeCode/Value_TypeCode_Static.h:
          Updated includes

        * tao/IFR_Client/*C.cpp:
          Added include of Dynamic_Parameter.h

        * tao/PI/ClientRequestInfo.{h,cpp}:
          Updated includes

        * tao/PI/PICurrent*.*:
          Moved here from the tao lib

        * tao/PoratbleServer/Basic_SArgument_T.cpp
        * tao/PoratbleServer/BD_String_SArgument_T.cpp
        * tao/PoratbleServer/Fixed_Array_SArgument_T.cpp
        * tao/PoratbleServer/Fixed_Size_SArgument_T.cpp
        * tao/PoratbleServer/Object_SArgument_T.cpp
        * tao/PoratbleServer/Special_Basic_SArgument_T.cpp
        * tao/PoratbleServer/UB_String_SArgument_T.cpp
        * tao/PoratbleServer/Var_Array_SArgument_T.cpp
        * tao/PoratbleServer/Var_Size_SArgument_T.cpp
          Update includes

        * tao/PortableServer/Upcall_Wrapper.cpp:
          Temporarily commented out PICurrent_Guard. Need to change this
          to a call to the PI adapter and an auto_ptr

Fri Jul 29 19:23:17 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be_include/be_global.h:

          Added -oA <path> option to direct the output of generated
          *A.* files. The -oA option overrides path specified by
          -o, if any.

        * docs/compiler.html:

          Added above option to commandline option table.

Fri Jul 29 18:32:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/DynamicAny.mpc
        * tao/IFR_Client.mpc
        * tao/IORManipulation.mpc
        * tao/Strategies.mpc
        * tao/Valuetype.mpc
        * tao/Var_Size_Argument_T.cpp
        * tao/corba.h
        * tao/AnyTypeCode/DynamicA.cpp
        * tao/AnyTypeCode/DynamicA.h
        * tao/AnyTypeCode/DynamicC.cpp
        * tao/AnyTypeCode/DynamicC.h
        * tao/AnyTypeCode/TypeCode_CDR_Extraction.cpp
        * tao/AnyTypeCode/orb_typesA.h
        * tao/DynamicInterface/DII_Arguments.cpp
        * tao/DynamicInterface/Request.cpp
        * tao/DynamicInterface/Request.h
        * tao/DynamicInterface/Server_Request.cpp
        * tao/IFR_Client/IFR_BaseA.cpp
        * tao/IFR_Client/IFR_BaseC.cpp
        * tao/IFR_Client/IFR_BasicA.cpp
        * tao/IFR_Client/IFR_BasicC.cpp
        * tao/IFR_Client/IFR_Client_Adapter_Impl.cpp
        * tao/IFR_Client/IFR_ComponentsA.cpp
        * tao/IFR_Client/IFR_ExtendedA.cpp
        * tao/IORManipulation/IORA.cpp
        * tao/ImR_Client/ImplRepoA.cpp
        * tao/Messaging/Messaging_PolicyFactory.cpp
        * tao/Messaging/Messaging_Policy_i.cpp
        * tao/Messaging/Messaging_RT_PolicyA.cpp
        * tao/ObjRefTemplate/Default_ORTA.cpp
        * tao/ObjRefTemplate/ObjectReferenceTemplateA.cpp
        * tao/PI/ClientRequestInfoA.cpp
        * tao/PI/ClientRequestInterceptorA.cpp
        * tao/PI/InterceptorA.cpp
        * tao/PI/ORBInitInfoA.cpp
        * tao/PI/RequestInfo.pidl
        * tao/PI/RequestInfoA.cpp
        * tao/PI_Server/ServerRequestInfoA.cpp
        * tao/PI_Server/ServerRequestInterceptorA.cpp
        * tao/PortableServer/Var_Size_SArgument_T.cpp
        * tao/RTCORBA/RTCORBAA.cpp
        * tao/RTCORBA/RT_Policy_i.cpp
        * tao/RTPortableServer/RTPortableServerA.cpp
        * tao/RTScheduling/RTSchedulerA.cpp
        * tao/Strategies/sciop_endpointsC.cpp
        * tao/Strategies/uiop_endpointsC.cpp
        * tao/TypeCodeFactory/Recursive_TypeCode.h
        * tao/TypeCodeFactory/TypeCodeFactoryA.cpp
        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp
        * tao/Valuetype/StringValueC.cpp
        * tao/Valuetype/ValueBase.cpp
          All kinds of changes to get things compiling again

        * AnyTypeCode/Union_TypeCode.{h,cpp,inl}:
        * AnyTypeCode/Union_TypeCode_T.{h,cpp,inl}:
          Renamed _T back to normal file

Fri Jul 29 15:26:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/DynamicInterface/DynamicParameter*.{h,cpp}:
        * tao/AnyTypeCode/DynamicParameter*.{h,cpp}:
          Moved DynamicParameter to the AnyTypeCode lib. The PI lib uses this
          and having it in DynamicInterface will make PI dependent on
          DynamicInterface

Fri Jul 29 11:02:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Exception.{h,cpp}:
        * tao/AnyTypeCode/Exception.{h,cpp}:
          Moved Any code from Exception to AnyTypeCode. Have to solve the
          _tao_type issue.

Fri Jul 29 10:42:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnyTypeCode/AnyTypeCode_methods.h:
        * tao/AnyTypeCode/TypeCode.h:
          Moved is_nil and release from TypeCode.h to AnyTypeCode_methods.h

Fri Jul 29 04:19:55 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * tao/CORBA_methods.h:

          Removed static CORBA is_nil() and release() methods for
          NamedValue and NVList.

        * tao/SystemException.cpp:

          Restored definition of static _tao_any_destructor()
          methods for system exceptions. They are used by Anys,
          but do not depend on them. This move eliminated
          'inconsistent dll linkage' warnings on MSVC.

        * tao/SystemException.h:

          Removed declarations of typecodes and Any operators
          for the system exceptions.

        * tao/AnyTypeCode/NVList.h:

          Added include of the new AnyTypeCode_methods.h file below.

        * tao/AnyTypeCode/SystemExceptionA.cpp:

          Removed definition of static _tao_any_destructor()
          methods for system exceptions.

        * tao/AnyTypeCode/SystemExceptionA.h:

          New file, contains typecode and Any operator declarations
          for system exceptions.

        * tao/AnyTypeCode/AnyTypeCode_methods.h:

          New file, contains declarations of static CORBA is_nil()
          and release() methods for NamedValue and NVList. This
          move eliminated 'inconsistent dll linkage' warnings on
          MSVC.

Thu Jul 28 22:40:26 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:
        * TAO_IDL/be_include/be_visitor_context.h:

          Added logic to make the anyop export macro and export include
          default to the corresponding stub values, if any, when the
          former values have not been set on the command line, but -GA
          is used. This behavior will enable the *A.* files to be
          generated, but compiled into the same library as the stub
          files, if desired.

Thu Jul 28 18:35:07 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Buffering_Constraint_Policy.{h,cpp}:
        * tao/Messaging/Messaging_PolicyFactory.{h,cpp}:
          Moved the create method to extract a BufferingConstraint out of
          an Any to the Messaging lib. It is used there and not needed at
          all in the core TAO lib. In the future we probably will move the
          complete Buffering_Constraint_Policy to the Messaging lib

Thu Jul 28 16:43:07 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:

          Added code generation to include *A.h files (in the
          *A.cpp file) for each included IDL file. If possible,
          existence checks for these included files will be added
          at a future date.

        * TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:

          Switched generation of the typecode declaration to the
          *A.h file, if the -GA option is used.

        * TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:

          Updated comment.

        * TAO_IDL/be/be_global.cpp:

          Fixed typo in generated usage message.

        * TAO_IDL/driver/drv_args.cpp:

          Added usage messages for each individual recognized
          -W[p|b] option.

        * docs/compiler.html:

          Updated command line option table with the new -Wb options
          for export macro and export include in *A.h files.

Thu Jul 28 12:41:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PortableServer/AdapterActivatorA.cpp
        * tao/PortableServer/ForwardRequestA.cpp
        * tao/PortableServer/IdAssignmentPolicyA.cpp
        * tao/PortableServer/IdUniquenessPolicyA.cpp
        * tao/PortableServer/ImplicitActivationPolicyA.cpp
        * tao/PortableServer/LifespanPolicyA.cpp
        * tao/PortableServer/POAManagerA.cpp
        * tao/PortableServer/PolicyS.cpp
        * tao/PortableServer/PortableServerA.cpp
        * tao/PortableServer/PS_ForwardA.cpp
        * tao/PortableServer/RequestProcessingPolicyA.cpp
        * tao/PortableServer/ServantActivatorA.cpp
        * tao/PortableServer/ServantLocatorA.cpp
        * tao/PortableServer/ServantManagerA.cpp
        * tao/PortableServer/ServantRetentionPolicyA.cpp
        * tao/PortableServer/ThreadPolicyA.cpp
          Updated includes to the new AnyTypeCode library. Just a quick
          search and replace to get this lib compiling again. Only have
          an unresolved link error I have to investigate

Thu Jul 28 11:31:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_codegen.cpp:
          Generate post include in A.h file, updated generated
          includes for moving of files

        * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
          Zapped starting spaces

        * tao/PortableServer/Basic_SArgument_T.cpp:
        * tao/PortableServer/Object_SArgument_T.cpp:
        * tao/PortableServer/Special_Basic_SArgument_T.cpp:
        * tao/PortableServer/UB_String_SArgument_T.cpp:
          Only include DynamicParameter.h when interceptors are enabled

Thu Jul 28 11:18:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnyTypeCode.mpc:
          New MPC file

        * tao/Alias_TypeCode.cpp
        * tao/Alias_TypeCode.h
        * tao/Alias_TypeCode.inl
        * tao/Alias_TypeCode_Static.cpp
        * tao/Alias_TypeCode_Static.h
        * tao/Alias_TypeCode_Static.inl
        * tao/Any.cpp
        * tao/Any.h
        * tao/Any.i
        * tao/AnySeq.pidl
        * tao/AnySeqA.cpp
        * tao/AnySeqC.cpp
        * tao/AnySeqC.h
        * tao/AnySeqS.h
        * tao/Any_Arg_Traits.h
        * tao/Any_Array_Impl_T.cpp
        * tao/Any_Array_Impl_T.h
        * tao/Any_Array_Impl_T.inl
        * tao/Any_Basic_Impl.cpp
        * tao/Any_Basic_Impl.h
        * tao/Any_Basic_Impl_T.cpp
        * tao/Any_Basic_Impl_T.h
        * tao/Any_Basic_Impl_T.inl
        * tao/Any_Dual_Impl_T.cpp
        * tao/Any_Dual_Impl_T.h
        * tao/Any_Dual_Impl_T.inl
        * tao/Any_Impl.cpp
        * tao/Any_Impl.h
        * tao/Any_Impl_T.cpp
        * tao/Any_Impl_T.h
        * tao/Any_Impl_T.inl
        * tao/Any_Special_Impl_T.cpp
        * tao/Any_Special_Impl_T.h
        * tao/Any_Special_Impl_T.inl
        * tao/Any_SystemException.cpp
        * tao/Any_SystemException.h
        * tao/Any_Unknown_IDL_Type.cpp
        * tao/Any_Unknown_IDL_Type.h
        * tao/BooleanSeqA.cpp
        * tao/Bounds.pidl
        * tao/BoundsA.cpp
        * tao/BoundsC.cpp
        * tao/BoundsC.h
        * tao/CONV_FRAMEA.cpp
        * tao/CharSeqA.cpp
        * tao/CurrentA.cpp
        * tao/DomainA.cpp
        * tao/DoubleSeqA.cpp
        * tao/Dynamic.pidl
        * tao/DynamicA.cpp
        * tao/DynamicC.cpp
        * tao/DynamicC.h
        * tao/DynamicS.h
        * tao/Dynamic_Parameter.pidl
        * tao/Dynamic_ParameterA.cpp
        * tao/Dynamic_ParameterC.cpp
        * tao/Dynamic_ParameterC.h
        * tao/Empty_Param_TypeCode.cpp
        * tao/Empty_Param_TypeCode.h
        * tao/Empty_Param_TypeCode.inl
        * tao/Enum_TypeCode.cpp
        * tao/Enum_TypeCode.h
        * tao/Enum_TypeCode.inl
        * tao/Enum_TypeCode_Static.cpp
        * tao/Enum_TypeCode_Static.h
        * tao/Enum_TypeCode_Static.inl
        * tao/Fixed_TypeCode.cpp
        * tao/Fixed_TypeCode.h
        * tao/Fixed_TypeCode.inl
        * tao/FloatSeqA.cpp
        * tao/GIOPA.cpp
        * tao/IIOPA.cpp
        * tao/IIOP_EndpointsA.cpp
        * tao/IOP_IORA.cpp
        * tao/InvalidSlotA.cpp
        * tao/LongDoubleSeqA.cpp
        * tao/LongLongSeqA.cpp
        * tao/LongSeqA.cpp
        * tao/Marshal.cpp
        * tao/Marshal.h
        * tao/Marshal.i
        * tao/Messaging_PolicyValueA.cpp
        * tao/NVList.cpp
        * tao/NVList.h
        * tao/NVList.i
        * tao/Null_RefCount_Policy.h
        * tao/ObjectIdListA.cpp
        * tao/Objref_TypeCode.cpp
        * tao/Objref_TypeCode.h
        * tao/Objref_TypeCode.inl
        * tao/Objref_TypeCode_Static.cpp
        * tao/Objref_TypeCode_Static.h
        * tao/Objref_TypeCode_Static.inl
        * tao/OctetSeqA.cpp
        * tao/PICurrentA.cpp
        * tao/ParameterModeA.cpp
        * tao/PolicyA.cpp
        * tao/Policy_ForwardA.cpp
        * tao/Recursive_Type_TypeCode.cpp
        * tao/Recursive_Type_TypeCode.h
        * tao/Recursive_Type_TypeCode.inl
        * tao/RefCount_Policy_Traits.h
        * tao/Sequence_TypeCode.cpp
        * tao/Sequence_TypeCode.h
        * tao/Sequence_TypeCode.inl
        * tao/Sequence_TypeCode_Static.cpp
        * tao/Sequence_TypeCode_Static.h
        * tao/Sequence_TypeCode_Static.inl
        * tao/ShortSeqA.cpp
        * tao/StringSeqA.cpp
        * tao/String_TypeCode.cpp
        * tao/String_TypeCode.h
        * tao/String_TypeCode.inl
        * tao/String_TypeCode_Static.cpp
        * tao/String_TypeCode_Static.h
        * tao/String_TypeCode_Static.inl
        * tao/String_TypeCode_Traits.h
        * tao/Struct_TypeCode.cpp
        * tao/Struct_TypeCode.h
        * tao/Struct_TypeCode.inl
        * tao/Struct_TypeCode_Static.cpp
        * tao/Struct_TypeCode_Static.h
        * tao/Struct_TypeCode_Static.inl
        * tao/SystemExceptionA.cpp
        * tao/TAOA.cpp
        * tao/TimeBaseA.cpp
        * tao/True_RefCount_Policy.cpp
        * tao/True_RefCount_Policy.h
        * tao/True_RefCount_Policy.inl
        * tao/TypeCode.cpp
        * tao/TypeCode.h
        * tao/TypeCode.inl
        * tao/TypeCodeA.cpp
        * tao/TypeCode_Base_Attributes.cpp
        * tao/TypeCode_Base_Attributes.h
        * tao/TypeCode_Base_Attributes.inl
        * tao/TypeCode_CDR_Extraction.cpp
        * tao/TypeCode_CDR_Extraction.h
        * tao/TypeCode_Case.cpp
        * tao/TypeCode_Case.h
        * tao/TypeCode_Case.inl
        * tao/TypeCode_Case_T.cpp
        * tao/TypeCode_Case_T.h
        * tao/TypeCode_Case_T.inl
        * tao/TypeCode_Constants.cpp
        * tao/TypeCode_Constants.h
        * tao/TypeCode_Struct_Field.h
        * tao/TypeCode_Traits.h
        * tao/TypeCode_Value_Field.h
        * tao/ULongLongSeqA.cpp
        * tao/ULongSeqA.cpp
        * tao/UShortSeqA.cpp
        * tao/Union_TypeCode.cpp
        * tao/Union_TypeCode.h
        * tao/Union_TypeCode.inl
        * tao/Union_TypeCode_Static.cpp
        * tao/Union_TypeCode_Static.h
        * tao/Union_TypeCode_Static.inl
        * tao/Value_TypeCode.cpp
        * tao/Value_TypeCode.h
        * tao/Value_TypeCode.inl
        * tao/Value_TypeCode_Static.cpp
        * tao/Value_TypeCode_Static.h
        * tao/Value_TypeCode_Static.inl
        * tao/WCharSeqA.cpp
        * tao/WStringSeqA.cpp
        * tao/WrongTransactionA.cpp
        * tao/append.cpp
        * tao/skip.cpp
          All these files are moved to the AnyTypeCode directory

        * tao/UB_String_Argument_T.cpp:
        * tao/Special_Basic_Argument_T.cpp:
        * tao/Basic_Argument_T.cpp:
        * tao/Object_Argument_T.cpp:
        * tao/operation_details.cpp
        * tao/Invocation_Base.cpp
          Only include Dynamic_ParameterC.h when interceptors are enabled

        * tao/SystemException.{h,cpp}:
          Moved excp_factory to this file, we need it here, temporarily
          removed _tao_type, we need to work on this.

        * tao/RequestInfo_Util.{h,cpp}:
          Don't build these when interceptors are disabled

        * tao/ORB_Core.cpp
          Include ace/Message_Block.h to get ACE_Data_Block

        * tao/ORB_Core.h:
          Added forward declaration of ACE_Data_Block

        * tao/extra_core.mpb:
          Removed NVList

        * tao/corba.h:
          Removed BoundsC.h

        * tao/PortableInterceptorC.cpp
        * tao/VisibilityC.cpp
        * tao/orb_typesC.cpp
        * tao/ORB.cpp
        * tao/PI_ForwardC.cpp
        * tao/InvalidSlotC.cpp
        * tao/WrongTransactionC.cpp
        * tao/GIOPC.cpp

        * tao/Exception.{h,cpp}:
          Commented out the Any operators, they should go to another lib,
          will handle this later

        * tao/Buffering_Constraint_Policy.cpp:
          Commented out Any usage, needs to be addressed

        * tao/WrongTransactionC.{h,cpp}:
        * tao/PolicyC.cpp:
          Commented out _tao_type for exceptions, we have to solve this
          because exceptions now use TypeCode but we have subsetted that

        * tao/UShortSeqC.h
        * tao/ULongSeqC.h
        * tao/WCharSeqC.h
        * tao/Typecode_typesC.h
        * tao/ULongLongSeqC.h
        * tao/StringSeqC.h
        * tao/TAOC.h
        * tao/TimeBaseC.h
        * tao/Policy_ForwardC.h
        * tao/PortableInterceptorC.h
        * tao/ShortSeqC.h
        * tao/VisibilityC.h
        * tao/LongDoubleSeqC.h
        * tao/LongLongSeqC.h
        * tao/LongSeqC.h
        * tao/Messaging_PolicyValueC.h
        * tao/ObjectIdListC.h
        * tao/OctetSeqC.h
        * tao/PICurrentC.h
        * tao/PI_ForwardC.h
        * tao/ParameterModeC.h
        * tao/PolicyC.h
        * tao/GIOPC.h
        * tao/IIOPC.h
        * tao/IIOP_EndpointsC.h
        * tao/IOP_IORC.h
        * tao/InvalidSlotC.h
        * tao/DomainC.h
        * tao/CharSeqC.h
        * tao/CurrentC.h
        * tao/DoubleSeqC.h
        * tao/Exception.h
        * tao/FloatSeqC.h
        * tao/WStringSeqC.h
        * tao/WrongTransactionC.h
        * tao/orb_typesC.h
        * tao/BooleanSeqC.h
        * tao/CONV_FRAMEC.h
          Removed TypeCode and Any operators, these are now all
          in AnyTypeCode/*.h. This has been by hand, with the
          change of Jeff below we can automate this

        * tao.mpc
          Removed a lot of files

Thu Jul 28 02:15:01 UTC 2005  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_global.cpp:
        * TAO_IDL/be/be_produce.cpp:
        * TAO_IDL/be/be_visitor_context.cpp:
        * TAO_IDL/be/be_visitor_array/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_exception/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_root/any_op.cpp:
        * TAO_IDL/be/be_visitor_root/root.cpp:
        * TAO_IDL/be/be_visitor_sequence/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_union/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuebox/any_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/any_op_ch.cpp:
        * TAO_IDL/be_include/be_codegen.h:
        * TAO_IDL/be_include/be_global.h:
        * TAO_IDL/be_include/be_visitor_context.h:

          Modified -GA option to generate a *A.h file as well as
          a *A.cpp file, and added -Wb options 'anyop_export_macro'
          and 'anyop_export_include' to optionally compile the *A.*
          files into a separate library.

Wed Jul 27 17:51:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_argument/invoke_cs.cpp:
        * TAO_IDL/be/be_visitor_argument/marshal_ss.cpp:
        * TAO_IDL/be/be_visitor_argument/paramlist.cpp:
        * TAO_IDL/be/be_visitor_field/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_field/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_sequence/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_union_branch/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_ci.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/field_cdr_cs.cpp:
          Use ACE_OutputCDR::from_octet and ACE_InputCDR:to_octet instead
          of CORBA::Any::from_octect and CORBA::Any::to_octet

Wed Jul 27 14:56:12 UTC 2005  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_Lite.cpp:
          Use ACE_OutputCDR::from_octet and ACE_InputCDR:to_octet
