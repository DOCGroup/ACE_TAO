/* This file is automatically generated by Orbeline.         */
/* Do not modify this file.                                  */
/* Orbeline (c) is copyrighted by PostModern Computing, Inc. */

#include <ttcp_s.hh>



static CORBA::_PMCSkelFunc _ttcp_sequence_func_array[] = {
		&ttcp_sequence_impl::_send,
		&ttcp_sequence_impl::_send_hack,
		&ttcp_sequence_impl::_start_timer,
		&ttcp_sequence_impl::_stop_timer,
		0
	};
ttcp_sequence_impl::ttcp_sequence_impl(const char *object_name) : 
	ttcp_sequence(object_name)
{
	_object_name(object_name);
	CORBA::Environment _env;
	_register_implementation("ttcp_sequence", 4, _ttcp_sequence_func_array, (void *) this, _env);
}
ttcp_sequence_impl::~ttcp_sequence_impl()
{
	CORBA::Environment _env;
	_unregister_implementation("ttcp_sequence", (void *) this, _env);
}


void ttcp_sequence_impl::_send(void *obj, CORBA::MarshalStream &strm,
		CORBA::Environment& _env, CORBA::Principal *principal) {
	ttcp_sequence_impl *_impl = (ttcp_sequence_impl *) obj;
	_env.clear_exception();
	ttcp_sequence::my_sequence ttcp_rec;
	strm.getSequence(ttcp_rec, CORBA::MarshalStream::ARG_IN);
	strm.flush(_env);
	if (_env.check_exception())
		return;
	_impl->_principal(principal);
	_impl->send(ttcp_rec);
	strm.putEnvironment(_env);
	_impl->_principal((CORBA::Principal *) NULL);
}


void ttcp_sequence_impl::_send_hack(void *obj, CORBA::MarshalStream &strm,
		CORBA::Environment& _env, CORBA::Principal *principal) {
	ttcp_sequence_impl *_impl = (ttcp_sequence_impl *) obj;
	_env.clear_exception();
	CORBA::String ttcp_string;
	strm.getString(ttcp_string, CORBA::MarshalStream::ARG_IN);
	strm.flush(_env);
	if (_env.check_exception())
		return;
	_impl->_principal(principal);
	_impl->send_hack(ttcp_string);
	strm.putEnvironment(_env);
	_impl->_principal((CORBA::Principal *) NULL);
}


void ttcp_sequence_impl::_start_timer(void *obj, CORBA::MarshalStream &strm,
		CORBA::Environment& _env, CORBA::Principal *principal) {
	ttcp_sequence_impl *_impl = (ttcp_sequence_impl *) obj;
	_env.clear_exception();
	strm.flush(_env);
	if (_env.check_exception())
		return;
	_impl->_principal(principal);
	_impl->start_timer();
	strm.putEnvironment(_env);
	_impl->_principal((CORBA::Principal *) NULL);
}


void ttcp_sequence_impl::_stop_timer(void *obj, CORBA::MarshalStream &strm,
		CORBA::Environment& _env, CORBA::Principal *principal) {
	ttcp_sequence_impl *_impl = (ttcp_sequence_impl *) obj;
	_env.clear_exception();
	strm.flush(_env);
	if (_env.check_exception())
		return;
	_impl->_principal(principal);
	_impl->stop_timer();
	strm.putEnvironment(_env);
	_impl->_principal((CORBA::Principal *) NULL);
}

static CORBA::_PMCSkelFunc _ttcp_string_func_array[] = {
		&ttcp_string_impl::_send,
		&ttcp_string_impl::_send_hack,
		&ttcp_string_impl::_start_timer,
		&ttcp_string_impl::_stop_timer,
		0
	};
ttcp_string_impl::ttcp_string_impl(const char *object_name) : 
	ttcp_string(object_name)
{
	_object_name(object_name);
	CORBA::Environment _env;
	_register_implementation("ttcp_string", 4, _ttcp_string_func_array, (void *) this, _env);
}
ttcp_string_impl::~ttcp_string_impl()
{
	CORBA::Environment _env;
	_unregister_implementation("ttcp_string", (void *) this, _env);
}

void ttcp_string_impl::_send(void *obj, CORBA::MarshalStream &strm,
		CORBA::Environment& _env, CORBA::Principal *principal) {
	ttcp_string_impl *_impl = (ttcp_string_impl *) obj;
	_env.clear_exception();
	CORBA::String ttcp_string;
	strm.getString(ttcp_string, CORBA::MarshalStream::ARG_IN);
	strm.flush(_env);
	if (_env.check_exception())
		return;
	_impl->_principal(principal);
	_impl->send(ttcp_string);
	strm.putEnvironment(_env);
	_impl->_principal((CORBA::Principal *) NULL);
}


void ttcp_string_impl::_send_hack(void *obj, CORBA::MarshalStream &strm,
		CORBA::Environment& _env, CORBA::Principal *principal) {
	ttcp_string_impl *_impl = (ttcp_string_impl *) obj;
	_env.clear_exception();
	CORBA::String ttcp_string;
	strm.getString(ttcp_string, CORBA::MarshalStream::ARG_IN);
	strm.flush(_env);
	if (_env.check_exception())
		return;
	_impl->_principal(principal);
	_impl->send_hack(ttcp_string);
	strm.putEnvironment(_env);
	_impl->_principal((CORBA::Principal *) NULL);
}


void ttcp_string_impl::_start_timer(void *obj, CORBA::MarshalStream &strm,
		CORBA::Environment& _env, CORBA::Principal *principal) {
	ttcp_string_impl *_impl = (ttcp_string_impl *) obj;
	_env.clear_exception();
	strm.flush(_env);
	if (_env.check_exception())
		return;
	_impl->_principal(principal);
	_impl->start_timer();
	strm.putEnvironment(_env);
	_impl->_principal((CORBA::Principal *) NULL);
}


void ttcp_string_impl::_stop_timer(void *obj, CORBA::MarshalStream &strm,
		CORBA::Environment& _env, CORBA::Principal *principal) {
	ttcp_string_impl *_impl = (ttcp_string_impl *) obj;
	_env.clear_exception();
	strm.flush(_env);
	if (_env.check_exception())
		return;
	_impl->_principal(principal);
	_impl->stop_timer();
	strm.putEnvironment(_env);
	_impl->_principal((CORBA::Principal *) NULL);
}


