// file      : CCF/IDL2/SyntaxTree/BuiltIn.cpp
// author    : Boris Kolpackov <boris@dre.vanderbilt.edu>
// cvs-id    : $Id$

// Note, that this file is automatically generated!
//

#include "CCF/IDL2/SyntaxTree/BuiltIn.hpp"

using namespace Introspection;

namespace CCF
{
  namespace IDL2
  {
    namespace SyntaxTree
    {

      // BuiltInTypeDecl
      //
      //
      namespace
      {
        TypeInfo
        built_in_type_decl_init_ ()
        {
          TypeInfo ti (typeid (BuiltInTypeDecl));
          ti.add_base (Access::PUBLIC, true, TypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo built_in_type_decl_ (built_in_type_decl_init_ ());
      }

      TypeInfo const& BuiltInTypeDecl::
      static_type_info () { return built_in_type_decl_; }


      // ObjectDecl
      //
      //
      namespace
      {
        TypeInfo
        object_decl_init_ ()
        {
          TypeInfo ti (typeid (ObjectDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo object_decl_ (object_decl_init_ ());
      }

      TypeInfo const& ObjectDecl::
      static_type_info () { return object_decl_; }


      // ValueBaseDecl
      //
      //
      namespace
      {
        TypeInfo
        value_base_decl_init_ ()
        {
          TypeInfo ti (typeid (ValueBaseDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo value_base_decl_ (value_base_decl_init_ ());
      }

      TypeInfo const& ValueBaseDecl::
      static_type_info () { return value_base_decl_; }


      // AnyDecl
      //
      //
      namespace
      {
        TypeInfo
        any_decl_init_ ()
        {
          TypeInfo ti (typeid (AnyDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo any_decl_ (any_decl_init_ ());
      }

      TypeInfo const& AnyDecl::
      static_type_info () { return any_decl_; }


      // BooleanDecl
      //
      //
      namespace
      {
        TypeInfo
        boolean_decl_init_ ()
        {
          TypeInfo ti (typeid (BooleanDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo boolean_decl_ (boolean_decl_init_ ());
      }

      TypeInfo const& BooleanDecl::
      static_type_info () { return boolean_decl_; }


      // CharDecl
      //
      //
      namespace
      {
        TypeInfo
        char_decl_init_ ()
        {
          TypeInfo ti (typeid (CharDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo char_decl_ (char_decl_init_ ());
      }

      TypeInfo const& CharDecl::
      static_type_info () { return char_decl_; }


      // DoubleDecl
      //
      //
      namespace
      {
        TypeInfo
        double_decl_init_ ()
        {
          TypeInfo ti (typeid (DoubleDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo double_decl_ (double_decl_init_ ());
      }

      TypeInfo const& DoubleDecl::
      static_type_info () { return double_decl_; }


      // FloatDecl
      //
      //
      namespace
      {
        TypeInfo
        float_decl_init_ ()
        {
          TypeInfo ti (typeid (FloatDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo float_decl_ (float_decl_init_ ());
      }

      TypeInfo const& FloatDecl::
      static_type_info () { return float_decl_; }


      // LongDecl
      //
      //
      namespace
      {
        TypeInfo
        long_decl_init_ ()
        {
          TypeInfo ti (typeid (LongDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo long_decl_ (long_decl_init_ ());
      }

      TypeInfo const& LongDecl::
      static_type_info () { return long_decl_; }


      // LongDoubleDecl
      //
      //
      namespace
      {
        TypeInfo
        long_double_decl_init_ ()
        {
          TypeInfo ti (typeid (LongDoubleDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo long_double_decl_ (long_double_decl_init_ ());
      }

      TypeInfo const& LongDoubleDecl::
      static_type_info () { return long_double_decl_; }


      // LongLongDecl
      //
      //
      namespace
      {
        TypeInfo
        long_long_decl_init_ ()
        {
          TypeInfo ti (typeid (LongLongDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo long_long_decl_ (long_long_decl_init_ ());
      }

      TypeInfo const& LongLongDecl::
      static_type_info () { return long_long_decl_; }


      // OctetDecl
      //
      //
      namespace
      {
        TypeInfo
        octet_decl_init_ ()
        {
          TypeInfo ti (typeid (OctetDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo octet_decl_ (octet_decl_init_ ());
      }

      TypeInfo const& OctetDecl::
      static_type_info () { return octet_decl_; }


      // ShortDecl
      //
      //
      namespace
      {
        TypeInfo
        short_decl_init_ ()
        {
          TypeInfo ti (typeid (ShortDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo short_decl_ (short_decl_init_ ());
      }

      TypeInfo const& ShortDecl::
      static_type_info () { return short_decl_; }


      // StringDecl
      //
      //
      namespace
      {
        TypeInfo
        string_decl_init_ ()
        {
          TypeInfo ti (typeid (StringDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo string_decl_ (string_decl_init_ ());
      }

      TypeInfo const& StringDecl::
      static_type_info () { return string_decl_; }


      // UnsignedLongDecl
      //
      //
      namespace
      {
        TypeInfo
        unsigned_long_decl_init_ ()
        {
          TypeInfo ti (typeid (UnsignedLongDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo unsigned_long_decl_ (unsigned_long_decl_init_ ());
      }

      TypeInfo const& UnsignedLongDecl::
      static_type_info () { return unsigned_long_decl_; }


      // UnsignedLongLongDecl
      //
      //
      namespace
      {
        TypeInfo
        unsigned_long_long_decl_init_ ()
        {
          TypeInfo ti (typeid (UnsignedLongLongDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo unsigned_long_long_decl_ (unsigned_long_long_decl_init_ ());
      }

      TypeInfo const& UnsignedLongLongDecl::
      static_type_info () { return unsigned_long_long_decl_; }


      // UnsignedShortDecl
      //
      //
      namespace
      {
        TypeInfo
        unsigned_short_decl_init_ ()
        {
          TypeInfo ti (typeid (UnsignedShortDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo unsigned_short_decl_ (unsigned_short_decl_init_ ());
      }

      TypeInfo const& UnsignedShortDecl::
      static_type_info () { return unsigned_short_decl_; }


      // VoidDecl
      //
      //
      namespace
      {
        TypeInfo
        void_decl_init_ ()
        {
          TypeInfo ti (typeid (VoidDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo void_decl_ (void_decl_init_ ());
      }

      TypeInfo const& VoidDecl::
      static_type_info () { return void_decl_; }


      // WcharDecl
      //
      //
      namespace
      {
        TypeInfo
        wchar_decl_init_ ()
        {
          TypeInfo ti (typeid (WcharDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo wchar_decl_ (wchar_decl_init_ ());
      }

      TypeInfo const& WcharDecl::
      static_type_info () { return wchar_decl_; }


      // WstringDecl
      //
      //
      namespace
      {
        TypeInfo
        wstring_decl_init_ ()
        {
          TypeInfo ti (typeid (WstringDecl));
          ti.add_base (Access::PUBLIC,
                       true,
                       BuiltInTypeDecl::static_type_info ());
          return ti;
        }

        TypeInfo wstring_decl_ (wstring_decl_init_ ());
      }

      TypeInfo const& WstringDecl::
      static_type_info () { return wstring_decl_; }
    }
  }
}
