// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#include "GOAC.h"
#include "tao/Typecode.h"
#include "tao/Any_Impl_T.h"
#include "tao/Any_Dual_Impl_T.h"

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_PortableServer_NotAGroupObject[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  47,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65722f4e), 
  ACE_NTOHL (0x6f744147), 
  ACE_NTOHL (0x726f7570), 
  ACE_NTOHL (0x4f626a65), 
  ACE_NTOHL (0x63743a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/PortableServer/NotAGroupObject:1.0
    16,
  ACE_NTOHL (0x4e6f7441), 
  ACE_NTOHL (0x47726f75), 
  ACE_NTOHL (0x704f626a), 
  ACE_NTOHL (0x65637400),  // name = NotAGroupObject
  0, // member count
  };

static CORBA::TypeCode _tc_TAO_tc_PortableServer_NotAGroupObject (
    CORBA::tk_except,
    sizeof (_oc_PortableServer_NotAGroupObject),
    (char *) &_oc_PortableServer_NotAGroupObject,
    0,
    sizeof (PortableServer::NotAGroupObject)
  );

namespace PortableServer
{
  ::CORBA::TypeCode_ptr _tc_NotAGroupObject =
    &_tc_TAO_tc_PortableServer_NotAGroupObject;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_PortableServer_IDs[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65722f49), 
  ACE_NTOHL (0x44733a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/PortableServer/IDs:1.0
    4,
  ACE_NTOHL (0x49447300),  // name = IDs
    CORBA::tk_sequence, // typecode kind
  164, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_alias, // typecode kind for typedefs
    148, // encapsulation length
      TAO_ENCAP_BYTE_ORDER, // byte order
      40,
      ACE_NTOHL (0x49444c3a), 
      ACE_NTOHL (0x6f6d672e), 
      ACE_NTOHL (0x6f72672f), 
      ACE_NTOHL (0x506f7274), 
      ACE_NTOHL (0x61626c65), 
      ACE_NTOHL (0x53657276), 
      ACE_NTOHL (0x65722f4f), 
      ACE_NTOHL (0x626a6563), 
      ACE_NTOHL (0x7449643a), 
      ACE_NTOHL (0x322e3300),  // repository ID = IDL:omg.org/PortableServer/ObjectId:2.3
            9,
      ACE_NTOHL (0x4f626a65), 
      ACE_NTOHL (0x63744964), 
      ACE_NTOHL (0x0),  // name = ObjectId
            CORBA::tk_alias, // typecode kind for typedefs
      76, // encapsulation length
        TAO_ENCAP_BYTE_ORDER, // byte order
        31,
        ACE_NTOHL (0x49444c3a), 
        ACE_NTOHL (0x6f6d672e), 
        ACE_NTOHL (0x6f72672f), 
        ACE_NTOHL (0x434f5242), 
        ACE_NTOHL (0x412f4f63), 
        ACE_NTOHL (0x74657453), 
        ACE_NTOHL (0x65713a31), 
        ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/CORBA/OctetSeq:1.0
                9,
        ACE_NTOHL (0x4f637465), 
        ACE_NTOHL (0x74536571), 
        ACE_NTOHL (0x0),  // name = OctetSeq
                CORBA::tk_sequence, // typecode kind
        12, // encapsulation length
          TAO_ENCAP_BYTE_ORDER, // byte order
          CORBA::tk_octet,

          0U,



    0U,

};

static CORBA::TypeCode _tc_TAO_tc_PortableServer_IDs (
    CORBA::tk_alias,
    sizeof (_oc_PortableServer_IDs),
    (char *) &_oc_PortableServer_IDs,
    0,
    sizeof (PortableServer::IDs)
  );

namespace PortableServer
{
  ::CORBA::TypeCode_ptr _tc_IDs =
    &_tc_TAO_tc_PortableServer_IDs;
}

// TAO_IDL - Generated from
// be\be_visitor_typecode/typecode_defn.cpp:290

static const CORBA::Long _oc_PortableServer_GOA[] =
{
    TAO_ENCAP_BYTE_ORDER, // byte order
  35,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x6f6d672e), 
  ACE_NTOHL (0x6f72672f), 
  ACE_NTOHL (0x506f7274), 
  ACE_NTOHL (0x61626c65), 
  ACE_NTOHL (0x53657276), 
  ACE_NTOHL (0x65722f47), 
  ACE_NTOHL (0x4f413a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:omg.org/PortableServer/GOA:1.0
    4,
  ACE_NTOHL (0x474f4100),  // name = GOA
  };

static CORBA::TypeCode _tc_TAO_tc_PortableServer_GOA (
    CORBA::tk_objref,
    sizeof (_oc_PortableServer_GOA),
    (char *) &_oc_PortableServer_GOA,
    0,
    sizeof (PortableServer::GOA)
  );

namespace PortableServer
{
  ::CORBA::TypeCode_ptr _tc_GOA =
    &_tc_TAO_tc_PortableServer_GOA;
}

// TAO_IDL - Generated from 
// be\be_visitor_exception/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Dual_Impl_T<PortableServer::NotAGroupObject>::demarshal_value (
    TAO_InputCDR & cdr
  )
{
  CORBA::String_var id;
  
  if ((cdr >> id.out ()) == 0)
    {
      return 0;
    }
  
  ACE_TRY_NEW_ENV
    {
      this->value_->_tao_decode (cdr ACE_ENV_ARG_PARAMETER);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      return 0;
    }
  ACE_ENDTRY;
  
  return 1;
}

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::NotAGroupObject &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::NotAGroupObject>::insert_copy (
      _tao_any,
      PortableServer::NotAGroupObject::_tao_any_destructor,
      PortableServer::_tc_NotAGroupObject,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::NotAGroupObject *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::NotAGroupObject>::insert (
      _tao_any,
      PortableServer::NotAGroupObject::_tao_any_destructor,
      PortableServer::_tc_NotAGroupObject,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::NotAGroupObject *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::NotAGroupObject *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::NotAGroupObject *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::NotAGroupObject>::extract (
        _tao_any,
        PortableServer::NotAGroupObject::_tao_any_destructor,
        PortableServer::_tc_NotAGroupObject,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be\be_visitor_sequence/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const PortableServer::IDs &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::IDs>::insert_copy (
      _tao_any,
      PortableServer::IDs::_tao_any_destructor,
      PortableServer::_tc_IDs,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::IDs *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::IDs>::insert (
      _tao_any,
      PortableServer::IDs::_tao_any_destructor,
      PortableServer::_tc_IDs,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::IDs *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::IDs *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const PortableServer::IDs *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::IDs>::extract (
        _tao_any,
        PortableServer::IDs::_tao_any_destructor,
        PortableServer::_tc_IDs,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be\be_visitor_interface/any_op_cs.cpp:50

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableServer::GOA>::to_object (
    CORBA::Object_ptr &_tao_elem
  ) const
{
  _tao_elem = CORBA::Object::_duplicate (this->value_);
  return 1;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableServer::GOA>::marshal_value (TAO_OutputCDR &)
{
  return 0;
}

ACE_TEMPLATE_SPECIALIZATION
CORBA::Boolean
TAO::Any_Impl_T<PortableServer::GOA>::demarshal_value (TAO_InputCDR &)
{
  return 0;
}

// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::GOA_ptr _tao_elem
  )
{
  PortableServer::GOA_ptr _tao_objptr =
    PortableServer::GOA::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    PortableServer::GOA_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<PortableServer::GOA>::insert (
      _tao_any,
      PortableServer::GOA::_tao_any_destructor,
      PortableServer::_tc_GOA,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    PortableServer::GOA_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<PortableServer::GOA>::extract (
        _tao_any,
        PortableServer::GOA::_tao_any_destructor,
        PortableServer::_tc_GOA,
        _tao_elem
      );
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::NotAGroupObject
      >;

  template class
    TAO::Any_Dual_Impl_T<
        PortableServer::IDs
      >;

  template class
    TAO::Any_Impl_T<
        PortableServer::GOA
      >;

#elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::NotAGroupObject \
      >

# pragma instantiate \
    TAO::Any_Dual_Impl_T< \
        PortableServer::IDs \
      >

# pragma instantiate \
    TAO::Any_Impl_T< \
        PortableServer::GOA \
      >

#endif /* !ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */ 
