/* $Id$
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please contact the current XSC maintainer:
 *             Will Otte <wotte@dre.vanderbilt.edu>
 */

// Fix for Borland compilers, which seem to have a broken
// <string> include.
#ifdef __BORLANDC__
# include <string.h>
#endif

#include "cdp.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {
    // PlanSubcomponentPropertyReference
    // 

    PlanSubcomponentPropertyReference::
    PlanSubcomponentPropertyReference (::XMLSchema::string< ACE_TCHAR > const& propertyName__,
                                       ::CIAO::Config_Handlers::InstanceDeploymentDescription const& instance__)
    : 
    ::XSCRT::Type (), 
    propertyName_ (new ::XMLSchema::string< ACE_TCHAR > (propertyName__)),
    instance_ (new ::CIAO::Config_Handlers::InstanceDeploymentDescription (instance__)),
    regulator__ ()
    {
      propertyName_->container (this);
      instance_->container (this);
    }

    PlanSubcomponentPropertyReference::
    PlanSubcomponentPropertyReference (PlanSubcomponentPropertyReference const& s)
    :
    ::XSCRT::Type (),
    propertyName_ (new ::XMLSchema::string< ACE_TCHAR > (*s.propertyName_)),
    instance_ (new ::CIAO::Config_Handlers::InstanceDeploymentDescription (*s.instance_)),
    regulator__ ()
    {
      propertyName_->container (this);
      instance_->container (this);
    }

    PlanSubcomponentPropertyReference& PlanSubcomponentPropertyReference::
    operator= (PlanSubcomponentPropertyReference const& s)
    {
      propertyName (*s.propertyName_);

      instance (*s.instance_);

      return *this;
    }


    // PlanSubcomponentPropertyReference
    // 
    ::XMLSchema::string< ACE_TCHAR > const& PlanSubcomponentPropertyReference::
    propertyName () const
    {
      return *propertyName_;
    }

    void PlanSubcomponentPropertyReference::
    propertyName (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      *propertyName_ = e;
    }

    // PlanSubcomponentPropertyReference
    // 
    ::CIAO::Config_Handlers::InstanceDeploymentDescription const& PlanSubcomponentPropertyReference::
    instance () const
    {
      return *instance_;
    }

    void PlanSubcomponentPropertyReference::
    instance (::CIAO::Config_Handlers::InstanceDeploymentDescription const& e)
    {
      *instance_ = e;
    }


    // PlanPropertyMapping
    // 

    PlanPropertyMapping::
    PlanPropertyMapping (::XMLSchema::string< ACE_TCHAR > const& name__,
                         ::XMLSchema::string< ACE_TCHAR > const& externalName__,
                         ::std::list< ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanSubcomponentPropertyReference, ACE_Null_Mutex > > const& delegatesTo__)
    : 
    name_ (new ::XMLSchema::string< ACE_TCHAR > (name__)),
    externalName_ (new ::XMLSchema::string< ACE_TCHAR > (externalName__)),
    delegatesTo_ (delegatesTo__),
    regulator__ ()
    {
      name_->container (this);
      externalName_->container (this);
    }

    PlanPropertyMapping::
    PlanPropertyMapping (PlanPropertyMapping const& s)
    :
    ::XSCRT::Type (),
    name_ (new ::XMLSchema::string< ACE_TCHAR > (*s.name_)),
    source_ (s.source_),
    externalName_ (new ::XMLSchema::string< ACE_TCHAR > (*s.externalName_)),
    delegatesTo_ (s.delegatesTo_),
    regulator__ ()
    {
      name_->container (this);
      externalName_->container (this);
    }

    PlanPropertyMapping& PlanPropertyMapping::
    operator= (PlanPropertyMapping const& s)
    {
      name (*s.name_);

      source_ = s.source_;

      externalName (*s.externalName_);

      delegatesTo_ = s.delegatesTo_;

      return *this;
    }


    // PlanPropertyMapping
    // 
    ::XMLSchema::string< ACE_TCHAR > const& PlanPropertyMapping::
    name () const
    {
      return *name_;
    }

    void PlanPropertyMapping::
    name (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      *name_ = e;
    }

    // PlanPropertyMapping
    // 
    PlanPropertyMapping::source_iterator PlanPropertyMapping::
    begin_source ()
    {
      return source_.begin ();
    }

    PlanPropertyMapping::source_iterator PlanPropertyMapping::
    end_source ()
    {
      return source_.end ();
    }

    PlanPropertyMapping::source_const_iterator PlanPropertyMapping::
    begin_source () const
    {
      return source_.begin ();
    }

    PlanPropertyMapping::source_const_iterator PlanPropertyMapping::
    end_source () const
    {
      return source_.end ();
    }

    void PlanPropertyMapping::
    add_source (ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex >  const& e)
    {
      source_.push_back (e);
    }

    size_t PlanPropertyMapping::
    count_source(void) const
    {
      return source_.size ();
    }

    // PlanPropertyMapping
    // 
    ::XMLSchema::string< ACE_TCHAR > const& PlanPropertyMapping::
    externalName () const
    {
      return *externalName_;
    }

    void PlanPropertyMapping::
    externalName (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      *externalName_ = e;
    }

    // PlanPropertyMapping
    // 
    PlanPropertyMapping::delegatesTo_iterator PlanPropertyMapping::
    begin_delegatesTo ()
    {
      return delegatesTo_.begin ();
    }

    PlanPropertyMapping::delegatesTo_iterator PlanPropertyMapping::
    end_delegatesTo ()
    {
      return delegatesTo_.end ();
    }

    PlanPropertyMapping::delegatesTo_const_iterator PlanPropertyMapping::
    begin_delegatesTo () const
    {
      return delegatesTo_.begin ();
    }

    PlanPropertyMapping::delegatesTo_const_iterator PlanPropertyMapping::
    end_delegatesTo () const
    {
      return delegatesTo_.end ();
    }

    void PlanPropertyMapping::
    add_delegatesTo (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanSubcomponentPropertyReference, ACE_Null_Mutex >  const& e)
    {
      delegatesTo_.push_back (e);
    }

    size_t PlanPropertyMapping::
    count_delegatesTo(void) const
    {
      return delegatesTo_.size ();
    }


    // deploymentPlan
    // 

    deploymentPlan::
    deploymentPlan ()
    : 
    regulator__ ()
    {
    }

    deploymentPlan::
    deploymentPlan (deploymentPlan const& s)
    :
    ::XSCRT::Type (),
    label_ (s.label_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.label_) : 0),
    UUID_ (s.UUID_.get () ? new ::XMLSchema::string< ACE_TCHAR > (*s.UUID_) : 0),
    realizes_ (s.realizes_.get () ? new ::CIAO::Config_Handlers::ComponentInterfaceDescription (*s.realizes_) : 0),
    implementation_ (s.implementation_),
    instance_ (s.instance_),
    connection_ (s.connection_),
    externalProperty_ (s.externalProperty_),
    dependsOn_ (s.dependsOn_),
    artifact_ (s.artifact_),
    infoProperty_ (s.infoProperty_),
    localityConstraint_ (s.localityConstraint_),
    regulator__ ()
    {
      if (label_.get ()) label_->container (this);
      if (UUID_.get ()) UUID_->container (this);
      if (realizes_.get ()) realizes_->container (this);
    }

    deploymentPlan& deploymentPlan::
    operator= (deploymentPlan const& s)
    {
      if (s.label_.get ())
        label (*(s.label_));
      else
        label_.reset (0);

      if (s.UUID_.get ())
        UUID (*(s.UUID_));
      else
        UUID_.reset (0);

      if (s.realizes_.get ())
        realizes (*(s.realizes_));
      else
        realizes_.reset (0);

      implementation_ = s.implementation_;

      instance_ = s.instance_;

      connection_ = s.connection_;

      externalProperty_ = s.externalProperty_;

      dependsOn_ = s.dependsOn_;

      artifact_ = s.artifact_;

      infoProperty_ = s.infoProperty_;

      localityConstraint_ = s.localityConstraint_;

      return *this;
    }


    // deploymentPlan
    // 
    bool deploymentPlan::
    label_p () const
    {
      return label_.get () != 0;
    }

    ::XMLSchema::string< ACE_TCHAR > const& deploymentPlan::
    label () const
    {
      return *label_;
    }

    void deploymentPlan::
    label (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      if (label_.get ())
      {
        *label_ = e;
      }

      else
      {
        label_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
        label_->container (this);
      }
    }

    // deploymentPlan
    // 
    bool deploymentPlan::
    UUID_p () const
    {
      return UUID_.get () != 0;
    }

    ::XMLSchema::string< ACE_TCHAR > const& deploymentPlan::
    UUID () const
    {
      return *UUID_;
    }

    void deploymentPlan::
    UUID (::XMLSchema::string< ACE_TCHAR > const& e)
    {
      if (UUID_.get ())
      {
        *UUID_ = e;
      }

      else
      {
        UUID_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
        UUID_->container (this);
      }
    }

    // deploymentPlan
    // 
    bool deploymentPlan::
    realizes_p () const
    {
      return realizes_.get () != 0;
    }

    ::CIAO::Config_Handlers::ComponentInterfaceDescription const& deploymentPlan::
    realizes () const
    {
      return *realizes_;
    }

    void deploymentPlan::
    realizes (::CIAO::Config_Handlers::ComponentInterfaceDescription const& e)
    {
      if (realizes_.get ())
      {
        *realizes_ = e;
      }

      else
      {
        realizes_ = ::std::auto_ptr< ::CIAO::Config_Handlers::ComponentInterfaceDescription > (new ::CIAO::Config_Handlers::ComponentInterfaceDescription (e));
        realizes_->container (this);
      }
    }

    // deploymentPlan
    // 
    deploymentPlan::implementation_iterator deploymentPlan::
    begin_implementation ()
    {
      return implementation_.begin ();
    }

    deploymentPlan::implementation_iterator deploymentPlan::
    end_implementation ()
    {
      return implementation_.end ();
    }

    deploymentPlan::implementation_const_iterator deploymentPlan::
    begin_implementation () const
    {
      return implementation_.begin ();
    }

    deploymentPlan::implementation_const_iterator deploymentPlan::
    end_implementation () const
    {
      return implementation_.end ();
    }

    void deploymentPlan::
    add_implementation (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::MonolithicDeploymentDescription, ACE_Null_Mutex >  const& e)
    {
      implementation_.push_back (e);
    }

    size_t deploymentPlan::
    count_implementation(void) const
    {
      return implementation_.size ();
    }

    // deploymentPlan
    // 
    deploymentPlan::instance_iterator deploymentPlan::
    begin_instance ()
    {
      return instance_.begin ();
    }

    deploymentPlan::instance_iterator deploymentPlan::
    end_instance ()
    {
      return instance_.end ();
    }

    deploymentPlan::instance_const_iterator deploymentPlan::
    begin_instance () const
    {
      return instance_.begin ();
    }

    deploymentPlan::instance_const_iterator deploymentPlan::
    end_instance () const
    {
      return instance_.end ();
    }

    void deploymentPlan::
    add_instance (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::InstanceDeploymentDescription, ACE_Null_Mutex >  const& e)
    {
      instance_.push_back (e);
    }

    size_t deploymentPlan::
    count_instance(void) const
    {
      return instance_.size ();
    }

    // deploymentPlan
    // 
    deploymentPlan::connection_iterator deploymentPlan::
    begin_connection ()
    {
      return connection_.begin ();
    }

    deploymentPlan::connection_iterator deploymentPlan::
    end_connection ()
    {
      return connection_.end ();
    }

    deploymentPlan::connection_const_iterator deploymentPlan::
    begin_connection () const
    {
      return connection_.begin ();
    }

    deploymentPlan::connection_const_iterator deploymentPlan::
    end_connection () const
    {
      return connection_.end ();
    }

    void deploymentPlan::
    add_connection (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanConnectionDescription, ACE_Null_Mutex >  const& e)
    {
      connection_.push_back (e);
    }

    size_t deploymentPlan::
    count_connection(void) const
    {
      return connection_.size ();
    }

    // deploymentPlan
    // 
    deploymentPlan::externalProperty_iterator deploymentPlan::
    begin_externalProperty ()
    {
      return externalProperty_.begin ();
    }

    deploymentPlan::externalProperty_iterator deploymentPlan::
    end_externalProperty ()
    {
      return externalProperty_.end ();
    }

    deploymentPlan::externalProperty_const_iterator deploymentPlan::
    begin_externalProperty () const
    {
      return externalProperty_.begin ();
    }

    deploymentPlan::externalProperty_const_iterator deploymentPlan::
    end_externalProperty () const
    {
      return externalProperty_.end ();
    }

    void deploymentPlan::
    add_externalProperty (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanPropertyMapping, ACE_Null_Mutex >  const& e)
    {
      externalProperty_.push_back (e);
    }

    size_t deploymentPlan::
    count_externalProperty(void) const
    {
      return externalProperty_.size ();
    }

    // deploymentPlan
    // 
    deploymentPlan::dependsOn_iterator deploymentPlan::
    begin_dependsOn ()
    {
      return dependsOn_.begin ();
    }

    deploymentPlan::dependsOn_iterator deploymentPlan::
    end_dependsOn ()
    {
      return dependsOn_.end ();
    }

    deploymentPlan::dependsOn_const_iterator deploymentPlan::
    begin_dependsOn () const
    {
      return dependsOn_.begin ();
    }

    deploymentPlan::dependsOn_const_iterator deploymentPlan::
    end_dependsOn () const
    {
      return dependsOn_.end ();
    }

    void deploymentPlan::
    add_dependsOn (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ImplementationDependency, ACE_Null_Mutex >  const& e)
    {
      dependsOn_.push_back (e);
    }

    size_t deploymentPlan::
    count_dependsOn(void) const
    {
      return dependsOn_.size ();
    }

    // deploymentPlan
    // 
    deploymentPlan::artifact_iterator deploymentPlan::
    begin_artifact ()
    {
      return artifact_.begin ();
    }

    deploymentPlan::artifact_iterator deploymentPlan::
    end_artifact ()
    {
      return artifact_.end ();
    }

    deploymentPlan::artifact_const_iterator deploymentPlan::
    begin_artifact () const
    {
      return artifact_.begin ();
    }

    deploymentPlan::artifact_const_iterator deploymentPlan::
    end_artifact () const
    {
      return artifact_.end ();
    }

    void deploymentPlan::
    add_artifact (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ArtifactDeploymentDescription, ACE_Null_Mutex >  const& e)
    {
      artifact_.push_back (e);
    }

    size_t deploymentPlan::
    count_artifact(void) const
    {
      return artifact_.size ();
    }

    // deploymentPlan
    // 
    deploymentPlan::infoProperty_iterator deploymentPlan::
    begin_infoProperty ()
    {
      return infoProperty_.begin ();
    }

    deploymentPlan::infoProperty_iterator deploymentPlan::
    end_infoProperty ()
    {
      return infoProperty_.end ();
    }

    deploymentPlan::infoProperty_const_iterator deploymentPlan::
    begin_infoProperty () const
    {
      return infoProperty_.begin ();
    }

    deploymentPlan::infoProperty_const_iterator deploymentPlan::
    end_infoProperty () const
    {
      return infoProperty_.end ();
    }

    void deploymentPlan::
    add_infoProperty (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  const& e)
    {
      infoProperty_.push_back (e);
    }

    size_t deploymentPlan::
    count_infoProperty(void) const
    {
      return infoProperty_.size ();
    }

    // deploymentPlan
    // 
    deploymentPlan::localityConstraint_iterator deploymentPlan::
    begin_localityConstraint ()
    {
      return localityConstraint_.begin ();
    }

    deploymentPlan::localityConstraint_iterator deploymentPlan::
    end_localityConstraint ()
    {
      return localityConstraint_.end ();
    }

    deploymentPlan::localityConstraint_const_iterator deploymentPlan::
    begin_localityConstraint () const
    {
      return localityConstraint_.begin ();
    }

    deploymentPlan::localityConstraint_const_iterator deploymentPlan::
    end_localityConstraint () const
    {
      return localityConstraint_.end ();
    }

    void deploymentPlan::
    add_localityConstraint (ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanLocality, ACE_Null_Mutex >  const& e)
    {
      localityConstraint_.push_back (e);
    }

    size_t deploymentPlan::
    count_localityConstraint(void) const
    {
      return localityConstraint_.size ();
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
    // PlanSubcomponentPropertyReference
    //

    PlanSubcomponentPropertyReference::
    PlanSubcomponentPropertyReference (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT ("propertyName"))
        {
          propertyName_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
          propertyName_->container (this);
        }

        else if (n == ACE_TEXT ("instance"))
        {
          instance_ = ::std::auto_ptr< ::CIAO::Config_Handlers::InstanceDeploymentDescription > (new ::CIAO::Config_Handlers::InstanceDeploymentDescription (e));
          instance_->container (this);
        }

        else 
        {
        }
      }
    }

    // PlanPropertyMapping
    //

    PlanPropertyMapping::
    PlanPropertyMapping (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT ("name"))
        {
          name_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
          name_->container (this);
        }

        else if (n == ACE_TEXT ("source"))
        {
          ACE_Refcounted_Auto_Ptr < ::XMLSchema::string< ACE_TCHAR >, ACE_Null_Mutex >  t (new ::XMLSchema::string< ACE_TCHAR > (e));
          add_source (t);
        }

        else if (n == ACE_TEXT ("externalName"))
        {
          externalName_ = ::std::auto_ptr< ::XMLSchema::string< ACE_TCHAR > > (new ::XMLSchema::string< ACE_TCHAR > (e));
          externalName_->container (this);
        }

        else if (n == ACE_TEXT ("delegatesTo"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanSubcomponentPropertyReference, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::PlanSubcomponentPropertyReference (e));
          add_delegatesTo (t);
        }

        else 
        {
        }
      }
    }

    // deploymentPlan
    //

    deploymentPlan::
    deploymentPlan (::XSCRT::XML::Element< ACE_TCHAR > const& e)
    :Base (e), regulator__ ()
    {

      ::XSCRT::Parser< ACE_TCHAR > p (e);

      while (p.more_elements ())
      {
        ::XSCRT::XML::Element< ACE_TCHAR > e (p.next_element ());
        ::std::basic_string< ACE_TCHAR > n (::XSCRT::XML::uq_name (e.name ()));

        if (n == ACE_TEXT ("label"))
        {
          ::XMLSchema::string< ACE_TCHAR > t (e);
          label (t);
        }

        else if (n == ACE_TEXT ("UUID"))
        {
          ::XMLSchema::string< ACE_TCHAR > t (e);
          UUID (t);
        }

        else if (n == ACE_TEXT ("realizes"))
        {
          ::CIAO::Config_Handlers::ComponentInterfaceDescription t (e);
          realizes (t);
        }

        else if (n == ACE_TEXT ("implementation"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::MonolithicDeploymentDescription, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::MonolithicDeploymentDescription (e));
          add_implementation (t);
        }

        else if (n == ACE_TEXT ("instance"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::InstanceDeploymentDescription, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::InstanceDeploymentDescription (e));
          add_instance (t);
        }

        else if (n == ACE_TEXT ("connection"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanConnectionDescription, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::PlanConnectionDescription (e));
          add_connection (t);
        }

        else if (n == ACE_TEXT ("externalProperty"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanPropertyMapping, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::PlanPropertyMapping (e));
          add_externalProperty (t);
        }

        else if (n == ACE_TEXT ("dependsOn"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ImplementationDependency, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::ImplementationDependency (e));
          add_dependsOn (t);
        }

        else if (n == ACE_TEXT ("artifact"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::ArtifactDeploymentDescription, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::ArtifactDeploymentDescription (e));
          add_artifact (t);
        }

        else if (n == ACE_TEXT ("infoProperty"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::Property, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::Property (e));
          add_infoProperty (t);
        }

        else if (n == ACE_TEXT ("localityConstraint"))
        {
          ACE_Refcounted_Auto_Ptr < ::CIAO::Config_Handlers::PlanLocality, ACE_Null_Mutex >  t (new ::CIAO::Config_Handlers::PlanLocality (e));
          add_localityConstraint (t);
        }

        else 
        {
        }
      }
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
  }
}

#include "XMLSchema/TypeInfo.hpp"

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace
    {
      ::XMLSchema::TypeInfoInitializer < ACE_TCHAR > XMLSchemaTypeInfoInitializer_ (::XSCRT::extended_type_info_map ());

      struct PlanSubcomponentPropertyReferenceTypeInfoInitializer
      {
        PlanSubcomponentPropertyReferenceTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::PlanSubcomponentPropertyReference));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      PlanSubcomponentPropertyReferenceTypeInfoInitializer PlanSubcomponentPropertyReferenceTypeInfoInitializer_;

      struct PlanPropertyMappingTypeInfoInitializer
      {
        PlanPropertyMappingTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::PlanPropertyMapping));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      PlanPropertyMappingTypeInfoInitializer PlanPropertyMappingTypeInfoInitializer_;

      struct deploymentPlanTypeInfoInitializer
      {
        deploymentPlanTypeInfoInitializer ()
        {
          ::XSCRT::TypeId id (typeid (::CIAO::Config_Handlers::deploymentPlan));
          ::XSCRT::ExtendedTypeInfo nf (id);

          nf.add_base (::XSCRT::ExtendedTypeInfo::Access::public_, false, typeid (::XSCRT::Type));
          ::XSCRT::extended_type_info_map ().insert (::std::make_pair (id, nf));
        }
      };

      deploymentPlanTypeInfoInitializer deploymentPlanTypeInfoInitializer_;
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace Traversal
    {
      // PlanSubcomponentPropertyReference
      //
      //

      void PlanSubcomponentPropertyReference::
      traverse (Type& o)
      {
        pre (o);
        propertyName (o);
        instance (o);
        post (o);
      }

      void PlanSubcomponentPropertyReference::
      traverse (Type const& o)
      {
        pre (o);
        propertyName (o);
        instance (o);
        post (o);
      }

      void PlanSubcomponentPropertyReference::
      pre (Type&)
      {
      }

      void PlanSubcomponentPropertyReference::
      pre (Type const&)
      {
      }

      void PlanSubcomponentPropertyReference::
      propertyName (Type& o)
      {
        dispatch (o.propertyName ());
      }

      void PlanSubcomponentPropertyReference::
      propertyName (Type const& o)
      {
        dispatch (o.propertyName ());
      }

      void PlanSubcomponentPropertyReference::
      instance (Type& o)
      {
        dispatch (o.instance ());
      }

      void PlanSubcomponentPropertyReference::
      instance (Type const& o)
      {
        dispatch (o.instance ());
      }

      void PlanSubcomponentPropertyReference::
      post (Type&)
      {
      }

      void PlanSubcomponentPropertyReference::
      post (Type const&)
      {
      }

      // PlanPropertyMapping
      //
      //

      void PlanPropertyMapping::
      traverse (Type& o)
      {
        pre (o);
        name (o);
        source (o);
        externalName (o);
        delegatesTo (o);
        post (o);
      }

      void PlanPropertyMapping::
      traverse (Type const& o)
      {
        pre (o);
        name (o);
        source (o);
        externalName (o);
        delegatesTo (o);
        post (o);
      }

      void PlanPropertyMapping::
      pre (Type&)
      {
      }

      void PlanPropertyMapping::
      pre (Type const&)
      {
      }

      void PlanPropertyMapping::
      name (Type& o)
      {
        dispatch (o.name ());
      }

      void PlanPropertyMapping::
      name (Type const& o)
      {
        dispatch (o.name ());
      }

      void PlanPropertyMapping::
      source (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::PlanPropertyMapping::source_iterator b (o.begin_source()), e (o.end_source());

        if (b != e)
        {
          source_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) source_next (o);
          }

          source_post (o);
        }

        else source_none (o);
      }

      void PlanPropertyMapping::
      source (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::PlanPropertyMapping::source_const_iterator b (o.begin_source()), e (o.end_source());

        if (b != e)
        {
          source_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) source_next (o);
          }

          source_post (o);
        }

        else source_none (o);
      }

      void PlanPropertyMapping::
      source_pre (Type&)
      {
      }

      void PlanPropertyMapping::
      source_pre (Type const&)
      {
      }

      void PlanPropertyMapping::
      source_next (Type&)
      {
      }

      void PlanPropertyMapping::
      source_next (Type const&)
      {
      }

      void PlanPropertyMapping::
      source_post (Type&)
      {
      }

      void PlanPropertyMapping::
      source_post (Type const&)
      {
      }

      void PlanPropertyMapping::
      source_none (Type&)
      {
      }

      void PlanPropertyMapping::
      source_none (Type const&)
      {
      }

      void PlanPropertyMapping::
      externalName (Type& o)
      {
        dispatch (o.externalName ());
      }

      void PlanPropertyMapping::
      externalName (Type const& o)
      {
        dispatch (o.externalName ());
      }

      void PlanPropertyMapping::
      delegatesTo (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::PlanPropertyMapping::delegatesTo_iterator b (o.begin_delegatesTo()), e (o.end_delegatesTo());

        if (b != e)
        {
          delegatesTo_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) delegatesTo_next (o);
          }

          delegatesTo_post (o);
        }
      }

      void PlanPropertyMapping::
      delegatesTo (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::PlanPropertyMapping::delegatesTo_const_iterator b (o.begin_delegatesTo()), e (o.end_delegatesTo());

        if (b != e)
        {
          delegatesTo_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) delegatesTo_next (o);
          }

          delegatesTo_post (o);
        }
      }

      void PlanPropertyMapping::
      delegatesTo_pre (Type&)
      {
      }

      void PlanPropertyMapping::
      delegatesTo_pre (Type const&)
      {
      }

      void PlanPropertyMapping::
      delegatesTo_next (Type&)
      {
      }

      void PlanPropertyMapping::
      delegatesTo_next (Type const&)
      {
      }

      void PlanPropertyMapping::
      delegatesTo_post (Type&)
      {
      }

      void PlanPropertyMapping::
      delegatesTo_post (Type const&)
      {
      }

      void PlanPropertyMapping::
      post (Type&)
      {
      }

      void PlanPropertyMapping::
      post (Type const&)
      {
      }

      // deploymentPlan
      //
      //

      void deploymentPlan::
      traverse (Type& o)
      {
        pre (o);
        if (o.label_p ()) label (o);
        else label_none (o);
        if (o.UUID_p ()) UUID (o);
        else UUID_none (o);
        if (o.realizes_p ()) realizes (o);
        else realizes_none (o);
        implementation (o);
        instance (o);
        connection (o);
        externalProperty (o);
        dependsOn (o);
        artifact (o);
        infoProperty (o);
        localityConstraint (o);
        post (o);
      }

      void deploymentPlan::
      traverse (Type const& o)
      {
        pre (o);
        if (o.label_p ()) label (o);
        else label_none (o);
        if (o.UUID_p ()) UUID (o);
        else UUID_none (o);
        if (o.realizes_p ()) realizes (o);
        else realizes_none (o);
        implementation (o);
        instance (o);
        connection (o);
        externalProperty (o);
        dependsOn (o);
        artifact (o);
        infoProperty (o);
        localityConstraint (o);
        post (o);
      }

      void deploymentPlan::
      pre (Type&)
      {
      }

      void deploymentPlan::
      pre (Type const&)
      {
      }

      void deploymentPlan::
      label (Type& o)
      {
        dispatch (o.label ());
      }

      void deploymentPlan::
      label (Type const& o)
      {
        dispatch (o.label ());
      }

      void deploymentPlan::
      label_none (Type&)
      {
      }

      void deploymentPlan::
      label_none (Type const&)
      {
      }

      void deploymentPlan::
      UUID (Type& o)
      {
        dispatch (o.UUID ());
      }

      void deploymentPlan::
      UUID (Type const& o)
      {
        dispatch (o.UUID ());
      }

      void deploymentPlan::
      UUID_none (Type&)
      {
      }

      void deploymentPlan::
      UUID_none (Type const&)
      {
      }

      void deploymentPlan::
      realizes (Type& o)
      {
        dispatch (o.realizes ());
      }

      void deploymentPlan::
      realizes (Type const& o)
      {
        dispatch (o.realizes ());
      }

      void deploymentPlan::
      realizes_none (Type&)
      {
      }

      void deploymentPlan::
      realizes_none (Type const&)
      {
      }

      void deploymentPlan::
      implementation (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::implementation_iterator b (o.begin_implementation()), e (o.end_implementation());

        if (b != e)
        {
          implementation_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) implementation_next (o);
          }

          implementation_post (o);
        }

        else implementation_none (o);
      }

      void deploymentPlan::
      implementation (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::implementation_const_iterator b (o.begin_implementation()), e (o.end_implementation());

        if (b != e)
        {
          implementation_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) implementation_next (o);
          }

          implementation_post (o);
        }

        else implementation_none (o);
      }

      void deploymentPlan::
      implementation_pre (Type&)
      {
      }

      void deploymentPlan::
      implementation_pre (Type const&)
      {
      }

      void deploymentPlan::
      implementation_next (Type&)
      {
      }

      void deploymentPlan::
      implementation_next (Type const&)
      {
      }

      void deploymentPlan::
      implementation_post (Type&)
      {
      }

      void deploymentPlan::
      implementation_post (Type const&)
      {
      }

      void deploymentPlan::
      implementation_none (Type&)
      {
      }

      void deploymentPlan::
      implementation_none (Type const&)
      {
      }

      void deploymentPlan::
      instance (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::instance_iterator b (o.begin_instance()), e (o.end_instance());

        if (b != e)
        {
          instance_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) instance_next (o);
          }

          instance_post (o);
        }

        else instance_none (o);
      }

      void deploymentPlan::
      instance (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::instance_const_iterator b (o.begin_instance()), e (o.end_instance());

        if (b != e)
        {
          instance_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) instance_next (o);
          }

          instance_post (o);
        }

        else instance_none (o);
      }

      void deploymentPlan::
      instance_pre (Type&)
      {
      }

      void deploymentPlan::
      instance_pre (Type const&)
      {
      }

      void deploymentPlan::
      instance_next (Type&)
      {
      }

      void deploymentPlan::
      instance_next (Type const&)
      {
      }

      void deploymentPlan::
      instance_post (Type&)
      {
      }

      void deploymentPlan::
      instance_post (Type const&)
      {
      }

      void deploymentPlan::
      instance_none (Type&)
      {
      }

      void deploymentPlan::
      instance_none (Type const&)
      {
      }

      void deploymentPlan::
      connection (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::connection_iterator b (o.begin_connection()), e (o.end_connection());

        if (b != e)
        {
          connection_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) connection_next (o);
          }

          connection_post (o);
        }

        else connection_none (o);
      }

      void deploymentPlan::
      connection (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::connection_const_iterator b (o.begin_connection()), e (o.end_connection());

        if (b != e)
        {
          connection_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) connection_next (o);
          }

          connection_post (o);
        }

        else connection_none (o);
      }

      void deploymentPlan::
      connection_pre (Type&)
      {
      }

      void deploymentPlan::
      connection_pre (Type const&)
      {
      }

      void deploymentPlan::
      connection_next (Type&)
      {
      }

      void deploymentPlan::
      connection_next (Type const&)
      {
      }

      void deploymentPlan::
      connection_post (Type&)
      {
      }

      void deploymentPlan::
      connection_post (Type const&)
      {
      }

      void deploymentPlan::
      connection_none (Type&)
      {
      }

      void deploymentPlan::
      connection_none (Type const&)
      {
      }

      void deploymentPlan::
      externalProperty (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::externalProperty_iterator b (o.begin_externalProperty()), e (o.end_externalProperty());

        if (b != e)
        {
          externalProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) externalProperty_next (o);
          }

          externalProperty_post (o);
        }

        else externalProperty_none (o);
      }

      void deploymentPlan::
      externalProperty (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::externalProperty_const_iterator b (o.begin_externalProperty()), e (o.end_externalProperty());

        if (b != e)
        {
          externalProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) externalProperty_next (o);
          }

          externalProperty_post (o);
        }

        else externalProperty_none (o);
      }

      void deploymentPlan::
      externalProperty_pre (Type&)
      {
      }

      void deploymentPlan::
      externalProperty_pre (Type const&)
      {
      }

      void deploymentPlan::
      externalProperty_next (Type&)
      {
      }

      void deploymentPlan::
      externalProperty_next (Type const&)
      {
      }

      void deploymentPlan::
      externalProperty_post (Type&)
      {
      }

      void deploymentPlan::
      externalProperty_post (Type const&)
      {
      }

      void deploymentPlan::
      externalProperty_none (Type&)
      {
      }

      void deploymentPlan::
      externalProperty_none (Type const&)
      {
      }

      void deploymentPlan::
      dependsOn (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::dependsOn_iterator b (o.begin_dependsOn()), e (o.end_dependsOn());

        if (b != e)
        {
          dependsOn_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) dependsOn_next (o);
          }

          dependsOn_post (o);
        }

        else dependsOn_none (o);
      }

      void deploymentPlan::
      dependsOn (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::dependsOn_const_iterator b (o.begin_dependsOn()), e (o.end_dependsOn());

        if (b != e)
        {
          dependsOn_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) dependsOn_next (o);
          }

          dependsOn_post (o);
        }

        else dependsOn_none (o);
      }

      void deploymentPlan::
      dependsOn_pre (Type&)
      {
      }

      void deploymentPlan::
      dependsOn_pre (Type const&)
      {
      }

      void deploymentPlan::
      dependsOn_next (Type&)
      {
      }

      void deploymentPlan::
      dependsOn_next (Type const&)
      {
      }

      void deploymentPlan::
      dependsOn_post (Type&)
      {
      }

      void deploymentPlan::
      dependsOn_post (Type const&)
      {
      }

      void deploymentPlan::
      dependsOn_none (Type&)
      {
      }

      void deploymentPlan::
      dependsOn_none (Type const&)
      {
      }

      void deploymentPlan::
      artifact (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::artifact_iterator b (o.begin_artifact()), e (o.end_artifact());

        if (b != e)
        {
          artifact_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) artifact_next (o);
          }

          artifact_post (o);
        }

        else artifact_none (o);
      }

      void deploymentPlan::
      artifact (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::artifact_const_iterator b (o.begin_artifact()), e (o.end_artifact());

        if (b != e)
        {
          artifact_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) artifact_next (o);
          }

          artifact_post (o);
        }

        else artifact_none (o);
      }

      void deploymentPlan::
      artifact_pre (Type&)
      {
      }

      void deploymentPlan::
      artifact_pre (Type const&)
      {
      }

      void deploymentPlan::
      artifact_next (Type&)
      {
      }

      void deploymentPlan::
      artifact_next (Type const&)
      {
      }

      void deploymentPlan::
      artifact_post (Type&)
      {
      }

      void deploymentPlan::
      artifact_post (Type const&)
      {
      }

      void deploymentPlan::
      artifact_none (Type&)
      {
      }

      void deploymentPlan::
      artifact_none (Type const&)
      {
      }

      void deploymentPlan::
      infoProperty (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::infoProperty_iterator b (o.begin_infoProperty()), e (o.end_infoProperty());

        if (b != e)
        {
          infoProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) infoProperty_next (o);
          }

          infoProperty_post (o);
        }

        else infoProperty_none (o);
      }

      void deploymentPlan::
      infoProperty (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::infoProperty_const_iterator b (o.begin_infoProperty()), e (o.end_infoProperty());

        if (b != e)
        {
          infoProperty_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) infoProperty_next (o);
          }

          infoProperty_post (o);
        }

        else infoProperty_none (o);
      }

      void deploymentPlan::
      infoProperty_pre (Type&)
      {
      }

      void deploymentPlan::
      infoProperty_pre (Type const&)
      {
      }

      void deploymentPlan::
      infoProperty_next (Type&)
      {
      }

      void deploymentPlan::
      infoProperty_next (Type const&)
      {
      }

      void deploymentPlan::
      infoProperty_post (Type&)
      {
      }

      void deploymentPlan::
      infoProperty_post (Type const&)
      {
      }

      void deploymentPlan::
      infoProperty_none (Type&)
      {
      }

      void deploymentPlan::
      infoProperty_none (Type const&)
      {
      }

      void deploymentPlan::
      localityConstraint (Type& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::localityConstraint_iterator b (o.begin_localityConstraint()), e (o.end_localityConstraint());

        if (b != e)
        {
          localityConstraint_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) localityConstraint_next (o);
          }

          localityConstraint_post (o);
        }

        else localityConstraint_none (o);
      }

      void deploymentPlan::
      localityConstraint (Type const& o)
      {
        // VC6 anathema strikes again
        //
        ::CIAO::Config_Handlers::deploymentPlan::localityConstraint_const_iterator b (o.begin_localityConstraint()), e (o.end_localityConstraint());

        if (b != e)
        {
          localityConstraint_pre (o);
          for (; b != e;)
          {
            dispatch (*(*b));
            if (++b != e) localityConstraint_next (o);
          }

          localityConstraint_post (o);
        }

        else localityConstraint_none (o);
      }

      void deploymentPlan::
      localityConstraint_pre (Type&)
      {
      }

      void deploymentPlan::
      localityConstraint_pre (Type const&)
      {
      }

      void deploymentPlan::
      localityConstraint_next (Type&)
      {
      }

      void deploymentPlan::
      localityConstraint_next (Type const&)
      {
      }

      void deploymentPlan::
      localityConstraint_post (Type&)
      {
      }

      void deploymentPlan::
      localityConstraint_post (Type const&)
      {
      }

      void deploymentPlan::
      localityConstraint_none (Type&)
      {
      }

      void deploymentPlan::
      localityConstraint_none (Type const&)
      {
      }

      void deploymentPlan::
      post (Type&)
      {
      }

      void deploymentPlan::
      post (Type const&)
      {
      }
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
    namespace Writer
    {
      // PlanSubcomponentPropertyReference
      //
      //

      PlanSubcomponentPropertyReference::
      PlanSubcomponentPropertyReference (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      PlanSubcomponentPropertyReference::
      PlanSubcomponentPropertyReference ()
      {
      }

      void PlanSubcomponentPropertyReference::
      traverse (Type const& o)
      {
        Traversal::PlanSubcomponentPropertyReference::traverse (o);
      }

      void PlanSubcomponentPropertyReference::
      propertyName (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("propertyName", top_ ()));
        Traversal::PlanSubcomponentPropertyReference::propertyName (o);
        pop_ ();
      }

      void PlanSubcomponentPropertyReference::
      instance (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("instance", top_ ()));
        Traversal::PlanSubcomponentPropertyReference::instance (o);
        pop_ ();
      }

      // PlanPropertyMapping
      //
      //

      PlanPropertyMapping::
      PlanPropertyMapping (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      PlanPropertyMapping::
      PlanPropertyMapping ()
      {
      }

      void PlanPropertyMapping::
      traverse (Type const& o)
      {
        Traversal::PlanPropertyMapping::traverse (o);
      }

      void PlanPropertyMapping::
      name (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("name", top_ ()));
        Traversal::PlanPropertyMapping::name (o);
        pop_ ();
      }

      void PlanPropertyMapping::
      source_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("source", top_ ()));
      }

      void PlanPropertyMapping::
      source_next (Type const& o)
      {
        source_post (o);
        source_pre (o);
      }

      void PlanPropertyMapping::
      source_post (Type const&)
      {
        pop_ ();
      }

      void PlanPropertyMapping::
      externalName (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("externalName", top_ ()));
        Traversal::PlanPropertyMapping::externalName (o);
        pop_ ();
      }

      void PlanPropertyMapping::
      delegatesTo_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("delegatesTo", top_ ()));
      }

      void PlanPropertyMapping::
      delegatesTo_next (Type const& o)
      {
        delegatesTo_post (o);
        delegatesTo_pre (o);
      }

      void PlanPropertyMapping::
      delegatesTo_post (Type const&)
      {
        pop_ ();
      }

      // deploymentPlan
      //
      //

      deploymentPlan::
      deploymentPlan (::XSCRT::XML::Element< ACE_TCHAR >& e)
      : ::XSCRT::Writer< ACE_TCHAR > (e)
      {
      }

      deploymentPlan::
      deploymentPlan ()
      {
      }

      void deploymentPlan::
      traverse (Type const& o)
      {
        Traversal::deploymentPlan::traverse (o);
      }

      void deploymentPlan::
      label (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("label", top_ ()));
        Traversal::deploymentPlan::label (o);
        pop_ ();
      }

      void deploymentPlan::
      UUID (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("UUID", top_ ()));
        Traversal::deploymentPlan::UUID (o);
        pop_ ();
      }

      void deploymentPlan::
      realizes (Type const& o)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("realizes", top_ ()));
        Traversal::deploymentPlan::realizes (o);
        pop_ ();
      }

      void deploymentPlan::
      implementation_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("implementation", top_ ()));
      }

      void deploymentPlan::
      implementation_next (Type const& o)
      {
        implementation_post (o);
        implementation_pre (o);
      }

      void deploymentPlan::
      implementation_post (Type const&)
      {
        pop_ ();
      }

      void deploymentPlan::
      instance_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("instance", top_ ()));
      }

      void deploymentPlan::
      instance_next (Type const& o)
      {
        instance_post (o);
        instance_pre (o);
      }

      void deploymentPlan::
      instance_post (Type const&)
      {
        pop_ ();
      }

      void deploymentPlan::
      connection_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("connection", top_ ()));
      }

      void deploymentPlan::
      connection_next (Type const& o)
      {
        connection_post (o);
        connection_pre (o);
      }

      void deploymentPlan::
      connection_post (Type const&)
      {
        pop_ ();
      }

      void deploymentPlan::
      externalProperty_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("externalProperty", top_ ()));
      }

      void deploymentPlan::
      externalProperty_next (Type const& o)
      {
        externalProperty_post (o);
        externalProperty_pre (o);
      }

      void deploymentPlan::
      externalProperty_post (Type const&)
      {
        pop_ ();
      }

      void deploymentPlan::
      dependsOn_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("dependsOn", top_ ()));
      }

      void deploymentPlan::
      dependsOn_next (Type const& o)
      {
        dependsOn_post (o);
        dependsOn_pre (o);
      }

      void deploymentPlan::
      dependsOn_post (Type const&)
      {
        pop_ ();
      }

      void deploymentPlan::
      artifact_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("artifact", top_ ()));
      }

      void deploymentPlan::
      artifact_next (Type const& o)
      {
        artifact_post (o);
        artifact_pre (o);
      }

      void deploymentPlan::
      artifact_post (Type const&)
      {
        pop_ ();
      }

      void deploymentPlan::
      infoProperty_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("infoProperty", top_ ()));
      }

      void deploymentPlan::
      infoProperty_next (Type const& o)
      {
        infoProperty_post (o);
        infoProperty_pre (o);
      }

      void deploymentPlan::
      infoProperty_post (Type const&)
      {
        pop_ ();
      }

      void deploymentPlan::
      localityConstraint_pre (Type const&)
      {
        push_ (::XSCRT::XML::Element< ACE_TCHAR > ("localityConstraint", top_ ()));
      }

      void deploymentPlan::
      localityConstraint_next (Type const& o)
      {
        localityConstraint_post (o);
        localityConstraint_pre (o);
      }

      void deploymentPlan::
      localityConstraint_post (Type const&)
      {
        pop_ ();
      }
    }
  }
}

namespace CIAO
{
  namespace Config_Handlers
  {
  }
}

