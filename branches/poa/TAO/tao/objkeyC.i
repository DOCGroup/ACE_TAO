// ******  Code generated by the The ACE ORB (TAO) IDL Compiler *******
// TAO ORB and the TAO IDL Compiler have been developed by Washington 
// University Computer Science's Distributed Object Computing Group.
//
// Information on TAO is available at
//                 http://www.cs.wustl.edu/~schmidt/TAO.html

ACE_INLINE CORBA::Octet *
TAO::_tao__seq_ObjectKey::allocbuf (CORBA::ULong nelems)
{
  return new CORBA::Octet[nelems]; // allocate from heap
}

ACE_INLINE void
TAO::_tao__seq_ObjectKey::freebuf (CORBA::Octet *seq)
{
  delete [] seq;
}

//default constructor
ACE_INLINE 
TAO::_tao__seq_ObjectKey::_tao__seq_ObjectKey (void)
	: maximum_ (0),
	  length_ (0),
	  buffer_ (0),
	  release_ (0) // does not own
{}

// constructor for unbounded seq
ACE_INLINE 
TAO::_tao__seq_ObjectKey::_tao__seq_ObjectKey(CORBA::ULong max )
	: maximum_ (max),
	  length_ (0),
	  buffer_ (TAO::_tao__seq_ObjectKey::allocbuf (max)),
	  release_ (1) // owns
{}

// constructor from data buffer
ACE_INLINE 
TAO::_tao__seq_ObjectKey::_tao__seq_ObjectKey (CORBA::ULong max, CORBA::ULong length, 
	CORBA::Octet *value, CORBA::Boolean release)
	: maximum_ (max),
	  length_ (length),
	  buffer_ (value),
	  release_ (release) // ownership depends on release
{}

ACE_INLINE CORBA::ULong
TAO::_tao__seq_ObjectKey::maximum (void) const
{
  return this->maximum_;
}

ACE_INLINE CORBA::ULong
TAO::_tao__seq_ObjectKey::length  (void) const
{
  return this->length_;
}

ACE_INLINE CORBA::Octet &
TAO::_tao__seq_ObjectKey::operator[] (CORBA::ULong index) // read/write
{
  return this->buffer_[index];
}

ACE_INLINE const CORBA::Octet &
TAO::_tao__seq_ObjectKey::operator[] (CORBA::ULong index) const // read
{
  return this->buffer_[index];
}

// *************************************************************
// Inline operations for class TAO::_tao__seq_ObjectKey_var
// *************************************************************

ACE_INLINE
TAO::_tao__seq_ObjectKey_var::_tao__seq_ObjectKey_var (void) // default constructor
	: ptr_ (0)
{}

ACE_INLINE
TAO::_tao__seq_ObjectKey_var::_tao__seq_ObjectKey_var (TAO::_tao__seq_ObjectKey_ptr p)
	: ptr_ (p)
{}

ACE_INLINE
TAO::_tao__seq_ObjectKey_var::_tao__seq_ObjectKey_var (const TAO::_tao__seq_ObjectKey_var &p) // copy constructor
{
  if (p.ptr_)
  	this->ptr_ = new TAO::_tao__seq_ObjectKey(*p.ptr_);
  else
  	this->ptr_ = 0;
}

ACE_INLINE
TAO::_tao__seq_ObjectKey_var::~_tao__seq_ObjectKey_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE TAO::_tao__seq_ObjectKey_var &
TAO::_tao__seq_ObjectKey_var::operator= (TAO::_tao__seq_ObjectKey *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE TAO::_tao__seq_ObjectKey_var &
TAO::_tao__seq_ObjectKey_var::operator= (const TAO::_tao__seq_ObjectKey_var &p) // deep copy
{
  if (this != &p)
  {
    delete this->ptr_;
    this->ptr_ = new TAO::_tao__seq_ObjectKey (*p.ptr_);
  }
  return *this;
}

ACE_INLINE const TAO::_tao__seq_ObjectKey *
TAO::_tao__seq_ObjectKey_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE TAO::_tao__seq_ObjectKey *
TAO::_tao__seq_ObjectKey_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
TAO::_tao__seq_ObjectKey_var::operator const TAO::_tao__seq_ObjectKey &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
TAO::_tao__seq_ObjectKey_var::operator TAO::_tao__seq_ObjectKey &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
TAO::_tao__seq_ObjectKey_var::operator TAO::_tao__seq_ObjectKey &() const// cast 
{
  return *this->ptr_;
}

ACE_INLINE CORBA::Octet&
TAO::_tao__seq_ObjectKey_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const TAO::_tao__seq_ObjectKey &
TAO::_tao__seq_ObjectKey_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE TAO::_tao__seq_ObjectKey &
TAO::_tao__seq_ObjectKey_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE TAO::_tao__seq_ObjectKey *&
TAO::_tao__seq_ObjectKey_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE TAO::_tao__seq_ObjectKey *
TAO::_tao__seq_ObjectKey_var::_retn (void)
{
  TAO::_tao__seq_ObjectKey *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE TAO::_tao__seq_ObjectKey *
TAO::_tao__seq_ObjectKey_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class TAO::_tao__seq_ObjectKey_out
// *************************************************************

ACE_INLINE
TAO::_tao__seq_ObjectKey_out::_tao__seq_ObjectKey_out (TAO::_tao__seq_ObjectKey *&p)
	: ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
TAO::_tao__seq_ObjectKey_out::_tao__seq_ObjectKey_out (TAO::_tao__seq_ObjectKey_var &p) // constructor from _var
	: ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
TAO::_tao__seq_ObjectKey_out::_tao__seq_ObjectKey_out (TAO::_tao__seq_ObjectKey_out &p) // copy constructor
	: ptr_ (p.ptr_)
{}

ACE_INLINE TAO::_tao__seq_ObjectKey_out &
TAO::_tao__seq_ObjectKey_out::operator= (TAO::_tao__seq_ObjectKey_out &p)
{
  this->ptr_ = p.ptr_;
  return *this;
}

ACE_INLINE TAO::_tao__seq_ObjectKey_out &
TAO::_tao__seq_ObjectKey_out::operator= (TAO::_tao__seq_ObjectKey *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
TAO::_tao__seq_ObjectKey_out::operator TAO::_tao__seq_ObjectKey *&() // cast
{
  return this->ptr_;
}

ACE_INLINE TAO::_tao__seq_ObjectKey *&
TAO::_tao__seq_ObjectKey_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE TAO::_tao__seq_ObjectKey *
TAO::_tao__seq_ObjectKey_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE CORBA::Octet& 
TAO::_tao__seq_ObjectKey_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

