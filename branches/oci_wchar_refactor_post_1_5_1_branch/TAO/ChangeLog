Fri May  5 15:47:05 2006  Ciju John  <john_c@ociweb.com>

          This entry deals with the refactoring work on the ACE wide char
          support specifically how it affects the TAO & orbservices. See
          entry
          Fri May  5 14:33:29 UTC 2006  Ciju John  <john_c@ociweb.com>

          The most significant change was the addition of string_dup's
          that perform conversion. Much of the char type points of
          transition are between narrow TAO services and TCHAR-as-wide Orb
          Services.

          The orbservices were NOT redesigned to be specifically char,
          wchar, or ACE_TCHAR. Changes were made solely to make
          ACE_USES_WCHAR work. Conversions were added in the appropriate
          places. All mains are now ACE_TMAINS.


        * TAO/CIAO/CCF/Example/CIDL/LocalExecutorMapping/cidlc.cpp:

        * TAO/CIAO/CIDLC/cidlc.cpp:

        * TAO/CIAO/DAnCE/ExecutionManager/Execution_Manager.cpp:

        * TAO/CIAO/DAnCE/NodeApplication/NodeApplication.cpp:

        * TAO/CIAO/DAnCE/NodeManager/Node_Manager.cpp:

        * TAO/CIAO/DAnCE/Plan_Launcher/Plan_Launcher.cpp:

        * TAO/CIAO/DAnCE/RTNodeApplication/RTNodeApplication.cpp:

        * TAO/CIAO/DAnCE/tests/NodeApplicationTest/NodeAppTest.mpc:
        * TAO/CIAO/DAnCE/tests/NodeApplicationTest/NodeApp_test_client.cpp:
        * TAO/CIAO/DAnCE/tests/NodeApplicationTest/NodeApp_test_client_ex.cpp:
        * TAO/CIAO/DAnCE/tests/NodeApplicationTest/NodeApp_test_client_simple.cpp:

        * TAO/CIAO/docs/tutorials/Quoter/Simple/Broker/Broker.cpp:

        * TAO/CIAO/docs/tutorials/Quoter/Simple/Distributor/Distributor.cpp:

        * TAO/CIAO/examples/BasicSP/EC/client.cpp:
        * TAO/CIAO/examples/BasicSP/EC/controller.cpp:

        * TAO/CIAO/examples/Display/RateGen/controller.cpp:

        * TAO/CIAO/examples/Hello/Sender/starter.cpp:

        * TAO/CIAO/examples/Swapping/Sender/starter.cpp:

        * TAO/CIAO/performance-tests/Benchmark/Multi_Threaded/client.cpp:

        * TAO/CIAO/performance-tests/Benchmark/RoundTrip/client.cpp:

        * TAO/CIAO/performance-tests/Benchmark/RoundTripClient/client.cpp:

        * TAO/CIAO/performance-tests/Benchmark/RoundTripServer/server.cpp:

        * TAO/CIAO/performance-tests/Benchmark/server.cpp:

        * TAO/CIAO/performance-tests/Protocols/Controller/Controller.cpp:

        * TAO/CIAO/tools/Config_Handlers/RT-CCM/test.cpp:

        * TAO/CIAO/tools/Config_Handlers/test.cpp:

        * TAO/TAO_IDL/ast/ast_generator.cpp:

        * TAO/TAO_IDL/fe/fe_init.cpp:

        * TAO/TAO_IDL/tao_idl.mpc:
        * TAO/TAO_IDL/tao_idl.cpp:

        * TAO/docs/tutorials/Quoter/AMI/client.cpp:
        * TAO/docs/tutorials/Quoter/AMI/server.cpp:

        * TAO/docs/tutorials/Quoter/Event_Service/client.cpp:
        * TAO/docs/tutorials/Quoter/Event_Service/server.cpp:

        * TAO/docs/tutorials/Quoter/Naming_Service/client.cpp:
        * TAO/docs/tutorials/Quoter/Naming_Service/server.cpp:

        * TAO/docs/tutorials/Quoter/On_Demand_Activation/client.cpp:
        * TAO/docs/tutorials/Quoter/On_Demand_Activation/server.cpp:

        * TAO/docs/tutorials/Quoter/RT_Event_Service/client.cpp:
        * TAO/docs/tutorials/Quoter/RT_Event_Service/server.cpp:

        * TAO/docs/tutorials/Quoter/Simple/Client/client.cpp:

        * TAO/docs/tutorials/Quoter/Simple/Impl-Repo/client.cpp:
        * TAO/docs/tutorials/Quoter/Simple/Impl-Repo/server.cpp:

        * TAO/docs/tutorials/Quoter/Simple/ImprovedServer/server.cpp:

        * TAO/docs/tutorials/Quoter/Simple/Persistent/client.cpp:
        * TAO/docs/tutorials/Quoter/Simple/Persistent/server.cpp:

        * TAO/docs/tutorials/Quoter/Simple/Server/server.cpp:

        * TAO/examples/AMH/Sink_Server/AMH_Servant.cpp:
        * TAO/examples/AMH/Sink_Server/Base_Server.cpp:
        * TAO/examples/AMH/Sink_Server/Client_Task.cpp:
        * TAO/examples/AMH/Sink_Server/MT_AMH_Server.cpp:
        * TAO/examples/AMH/Sink_Server/client.cpp:
        * TAO/examples/AMH/Sink_Server/mt_server.cpp:
        * TAO/examples/AMH/Sink_Server/st_server.cpp:

        * TAO/examples/AMI/FL_Callback/peer.cpp:
        * TAO/examples/AMI/FL_Callback/progress.cpp:

        * TAO/examples/Advanced/ch_12/client.cpp:
        * TAO/examples/Advanced/ch_12/server.cpp:

        * TAO/examples/Advanced/ch_18/client.cpp:
        * TAO/examples/Advanced/ch_18/server.cpp:

        * TAO/examples/Advanced/ch_21/client.cpp:
        * TAO/examples/Advanced/ch_21/server.cpp:

        * TAO/examples/Advanced/ch_3/client.cpp:
        * TAO/examples/Advanced/ch_3/server.cpp:

        * TAO/examples/Advanced/ch_8_and_10/client.cpp:
        * TAO/examples/Advanced/ch_8_and_10/server.cpp:

        * TAO/examples/Buffered_AMI/client.cpp:
        * TAO/examples/Buffered_AMI/server.cpp:

        * TAO/examples/Buffered_Oneways/client.cpp:
        * TAO/examples/Buffered_Oneways/server.cpp:

        * TAO/examples/CSD_Strategy/ThreadPool3/ClientApp.cpp:

        * TAO/examples/Callback_Quoter/Consumer_Handler.cpp:
        * TAO/examples/Callback_Quoter/Notifier_Input_Handler.cpp:
        * TAO/examples/Callback_Quoter/Supplier_i.cpp:
        * TAO/examples/Callback_Quoter/consumer.cpp:
        * TAO/examples/Callback_Quoter/notifier.cpp:
        * TAO/examples/Callback_Quoter/supplier.cpp:
        * TAO/examples/Content_Server/AMI_Iterator/Content_Iterator_i.cpp:
        * TAO/examples/Content_Server/AMI_Iterator/client.cpp:
        * TAO/examples/Content_Server/AMI_Iterator/server.cpp:

        * TAO/examples/Content_Server/AMI_Observer/Callback_Handler.cpp:
        * TAO/examples/Content_Server/AMI_Observer/client.cpp:
        * TAO/examples/Content_Server/AMI_Observer/server.cpp:

        * TAO/examples/Content_Server/SMI_Iterator/Content_Iterator_i.cpp:
        * TAO/examples/Content_Server/SMI_Iterator/client.cpp:
        * TAO/examples/Content_Server/SMI_Iterator/server.cpp:

        * TAO/examples/Event_Comm/consumer.cpp:
        * TAO/examples/Event_Comm/notifier.cpp:
        * TAO/examples/Event_Comm/supplier.cpp:

        * TAO/examples/Kokyu_dsrt_schedulers/Task_Stats.h:
        * TAO/examples/Kokyu_dsrt_schedulers/Task_Stats.cpp:

        * TAO/examples/Kokyu_dsrt_schedulers/fp_example/client.cpp:
        * TAO/examples/Kokyu_dsrt_schedulers/fp_example/server.cpp:

        * TAO/examples/Kokyu_dsrt_schedulers/mif_example/client.cpp:
        * TAO/examples/Kokyu_dsrt_schedulers/mif_example/server.cpp:

        * TAO/examples/Kokyu_dsrt_schedulers/muf_example/client.cpp:
        * TAO/examples/Kokyu_dsrt_schedulers/muf_example/server.cpp:

        * TAO/examples/Load_Balancing/Identity_Client.cpp:
        * TAO/examples/Load_Balancing/Identity_Server.cpp:
        * TAO/examples/Load_Balancing/Load_Balancing_Service.cpp:

        * TAO/examples/Load_Balancing_persistent/Identity_Client.cpp:
        * TAO/examples/Load_Balancing_persistent/Identity_Server.cpp:
        * TAO/examples/Load_Balancing_persistent/Load_Balancer_i.cpp:
        * TAO/examples/Load_Balancing_persistent/Load_Balancing_Service.cpp:

        * TAO/examples/Logging/Logger_i.cpp:
        * TAO/examples/Logging/Logging_Service.cpp:
        * TAO/examples/Logging/Logging_Service_i.cpp:
        * TAO/examples/Logging/Logging_Test.cpp:
        * TAO/examples/Logging/Logging_Test_i.cpp:

        * TAO/examples/OBV/Simple_util.cpp:

        * TAO/examples/OBV/Typed_Events/Client_i.cpp:
        * TAO/examples/OBV/Typed_Events/client.cpp:
        * TAO/examples/OBV/Typed_Events/server.cpp:

        * TAO/examples/POA/Adapter_Activator/server.cpp:

        * TAO/examples/POA/DSI/client.cpp:
        * TAO/examples/POA/DSI/server.cpp:

        * TAO/examples/POA/Default_Servant/client.cpp:
        * TAO/examples/POA/Default_Servant/server.cpp:

        * TAO/examples/POA/Explicit_Activation/server.cpp:

        * TAO/examples/POA/FindPOA/FindPOA.cpp:

        * TAO/examples/POA/Forwarding/client.cpp:
        * TAO/examples/POA/Forwarding/server.cpp:

        * TAO/examples/POA/Generic_Servant/client.cpp:

        * TAO/examples/POA/Loader/Servant_Activator.cpp:
        * TAO/examples/POA/Loader/Servant_Locator.cpp:
        * TAO/examples/POA/Loader/Server_Manager.cpp:
        * TAO/examples/POA/Loader/server.cpp:

        * TAO/examples/POA/NewPOA/NewPOA.cpp:

        * TAO/examples/POA/On_Demand_Activation/server.cpp:

        * TAO/examples/POA/On_Demand_Loading/Servant_Manager.cpp:
        * TAO/examples/POA/On_Demand_Loading/Server_Manager.cpp:
        * TAO/examples/POA/On_Demand_Loading/server.cpp:

        * TAO/examples/POA/POA_BiDir/POA_BiDir.cpp:

        * TAO/examples/POA/Reference_Counted_Servant/server.cpp:

        * TAO/examples/POA/RootPOA/RootPOA.cpp:

        * TAO/examples/POA/TIE/client.cpp:
        * TAO/examples/POA/TIE/server.cpp:

        * TAO/examples/Persistent_Grid/Grid_Client_i.cpp:
        * TAO/examples/Persistent_Grid/Grid_i.cpp:
        * TAO/examples/Persistent_Grid/Persistent_Client_i.cpp:
        * TAO/examples/Persistent_Grid/Simple_util.cpp:
        * TAO/examples/Persistent_Grid/client.cpp:
        * TAO/examples/Persistent_Grid/persistent_client.cpp:
        * TAO/examples/Persistent_Grid/server.cpp:

        * TAO/examples/PluggableUDP/tests/Basic/UDP_Client_i.cpp:
        * TAO/examples/PluggableUDP/tests/Basic/client.cpp:
        * TAO/examples/PluggableUDP/tests/Basic/server.cpp:

        * TAO/examples/PluggableUDP/tests/Performance/UDP_PerformanceClient.cpp:
        * TAO/examples/PluggableUDP/tests/Performance/client.cpp:
        * TAO/examples/PluggableUDP/tests/Performance/server.cpp:

        * TAO/examples/PluggableUDP/tests/SimplePerformance/client.cpp:
        * TAO/examples/PluggableUDP/tests/SimplePerformance/server.cpp:

        * TAO/examples/Quoter/Factory_Finder.cpp:
        * TAO/examples/Quoter/Generic_Factory.cpp:
        * TAO/examples/Quoter/client.cpp:
        * TAO/examples/Quoter/server.cpp:

        * TAO/examples/RTCORBA/Activity/Activity.cpp:
        * TAO/examples/RTCORBA/Activity/Builder.h:
        * TAO/examples/RTCORBA/Activity/Builder.cpp:
        * TAO/examples/RTCORBA/Activity/Job_i.h:
        * TAO/examples/RTCORBA/Activity/Job_i.cpp:
        * TAO/examples/RTCORBA/Activity/POA_Holder.h:
        * TAO/examples/RTCORBA/Activity/POA_Holder.cpp:
        * TAO/examples/RTCORBA/Activity/Periodic_Task.h:
        * TAO/examples/RTCORBA/Activity/Periodic_Task.cpp:
        * TAO/examples/RTCORBA/Activity/Task_Stats.h:
        * TAO/examples/RTCORBA/Activity/Task_Stats.cpp:

        * TAO/examples/RTScheduling/DT_Creator.h:
        * TAO/examples/RTScheduling/DT_Creator.cpp:

        * TAO/examples/RTScheduling/Fixed_Priority_Scheduler/FP_Scheduler.cpp:
        * TAO/examples/RTScheduling/Fixed_Priority_Scheduler/test.cpp:

        * TAO/examples/RTScheduling/Job_i.h:
        * TAO/examples/RTScheduling/Job_i.cpp:

        * TAO/examples/RTScheduling/MIF_Scheduler/MIF_Task.cpp:
        * TAO/examples/RTScheduling/MIF_Scheduler/test.cpp:

        * TAO/examples/RTScheduling/POA_Holder.h:
        * TAO/examples/RTScheduling/POA_Holder.cpp:
        * TAO/examples/RTScheduling/Starter.cpp:
        * TAO/examples/RTScheduling/Task_Stats.h:
        * TAO/examples/RTScheduling/Task_Stats.cpp:
        * TAO/examples/RTScheduling/Thread_Task.cpp:

        * TAO/examples/Simple/Simple_util.cpp:

        * TAO/examples/Simple/bank/client.cpp:
        * TAO/examples/Simple/bank/server.cpp:

        * TAO/examples/Simple/chat/Client_i.cpp:
        * TAO/examples/Simple/chat/Server_i.cpp:
        * TAO/examples/Simple/chat/client.cpp:
        * TAO/examples/Simple/chat/server.cpp:

        * TAO/examples/Simple/echo/client.cpp:
        * TAO/examples/Simple/echo/server.cpp:

        * TAO/examples/Simple/grid/Grid_Client_i.cpp:
        * TAO/examples/Simple/grid/client.cpp:
        * TAO/examples/Simple/grid/server.cpp:

        * TAO/examples/Simple/time-date/Time_Date.cpp:
        * TAO/examples/Simple/time-date/client.cpp:
        * TAO/examples/Simple/time-date/server.cpp:

        * TAO/examples/Simple/time/Time_Client_i.cpp:
        * TAO/examples/Simple/time/client.cpp:
        * TAO/examples/Simple/time/server.cpp:

        * TAO/examples/Simulator/Event_Supplier/DualEC_Sup.cpp:
        * TAO/examples/Simulator/Event_Supplier/Event_Con.cpp:
        * TAO/examples/Simulator/Event_Supplier/Event_Sup.cpp:
        * TAO/examples/Simulator/Event_Supplier/Logging_Sup.cpp:

        * TAO/examples/TypeCode_Creation/main.cpp:

        * TAO/examples/ior_corbaloc/client.cpp:
        * TAO/examples/ior_corbaloc/corbaname_client.cpp:
        * TAO/examples/ior_corbaloc/server.cpp:

        * TAO/examples/mfc/client.cpp:

        * TAO/interop-tests/wchar/client.cpp:
        * TAO/interop-tests/wchar/server.cpp:
        * TAO/interop-tests/wchar/wchar_reference.h:
        * TAO/interop-tests/wchar/wchar_reference.cpp:

        * TAO/orbsvcs/Concurrency_Service/Concurrency_Service.h:
        * TAO/orbsvcs/Concurrency_Service/Concurrency_Service.cpp:

        * TAO/orbsvcs/Event_Service/Event_Service.cpp:

        * TAO/orbsvcs/FTRT_Event_Service/Event_Service/FT_EventService.cpp:

        * TAO/orbsvcs/FTRT_Event_Service/Factory_Service/EventChannelFactory_i.cpp:
        * TAO/orbsvcs/FTRT_Event_Service/Factory_Service/FTRTEC_Factory_Service.cpp:

        * TAO/orbsvcs/FTRT_Event_Service/Gateway_Service/FTRTEC_Gateway_Service.cpp:

        * TAO/orbsvcs/FT_ReplicationManager/FT_DefaultFaultAnalyzer.cpp:
        * TAO/orbsvcs/FT_ReplicationManager/FT_FaultConsumer.cpp:
        * TAO/orbsvcs/FT_ReplicationManager/FT_FaultEventDescriptor.cpp:
        * TAO/orbsvcs/FT_ReplicationManager/FT_ReplicationManager.cpp:
        * TAO/orbsvcs/FT_ReplicationManager/FT_ReplicationManagerFaultAnalyzer.cpp:

        * TAO/orbsvcs/Fault_Detector/FT_FaultDetectorFactory_i.cpp:

        * TAO/orbsvcs/Fault_Notifier/FT_Notifier_i.cpp:

        * TAO/orbsvcs/IFR_Service/IFR_Server.cpp:
        * TAO/orbsvcs/IFR_Service/IFR_Service.mpc:

        * TAO/orbsvcs/ImplRepo_Service/Activator_NT_Service.h:
        * TAO/orbsvcs/ImplRepo_Service/Activator_Options.h:
        * TAO/orbsvcs/ImplRepo_Service/Activator_Options.cpp:

        * TAO/orbsvcs/ImplRepo_Service/ImR_Activator.cpp:
        * TAO/orbsvcs/ImplRepo_Service/ImR_Activator_i.cpp:
        * TAO/orbsvcs/ImplRepo_Service/ImR_Locator.cpp:
        * TAO/orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
        * TAO/orbsvcs/ImplRepo_Service/Locator_NT_Service.h:
        * TAO/orbsvcs/ImplRepo_Service/Locator_Options.h:
        * TAO/orbsvcs/ImplRepo_Service/Locator_Options.cpp:
        * TAO/orbsvcs/ImplRepo_Service/Locator_Repository.h:
        * TAO/orbsvcs/ImplRepo_Service/Locator_Repository.cpp:
        * TAO/orbsvcs/ImplRepo_Service/Locator_XMLHandler.h:
        * TAO/orbsvcs/ImplRepo_Service/Locator_XMLHandler.cpp:
        * TAO/orbsvcs/ImplRepo_Service/tao_imr_i.h:
        * TAO/orbsvcs/ImplRepo_Service/tao_imr_i.cpp:

        * TAO/orbsvcs/LifeCycle_Service/Criteria_Evaluator.cpp:
        * TAO/orbsvcs/LifeCycle_Service/LifeCycle_Service.cpp:

        * TAO/orbsvcs/LoadBalancer/LoadManager.cpp:
        * TAO/orbsvcs/LoadBalancer/LoadMonitor.cpp:

        * TAO/orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.h:
        * TAO/orbsvcs/Logging_Service/Basic_Logging_Service/Basic_Logging_Service.cpp:

        * TAO/orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.h:
        * TAO/orbsvcs/Logging_Service/Event_Logging_Service/Event_Logging_Service.cpp:

        * TAO/orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.h:
        * TAO/orbsvcs/Logging_Service/Notify_Logging_Service/Notify_Logging_Service.cpp:

        * TAO/orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.h:
        * TAO/orbsvcs/Logging_Service/RTEvent_Logging_Service/RTEvent_Logging_Service.cpp:

        * TAO/orbsvcs/Naming_Service/NT_Naming_Server.cpp:
        * TAO/orbsvcs/Naming_Service/NT_Naming_Service.h:
        * TAO/orbsvcs/Naming_Service/NT_Naming_Service.cpp:
        * TAO/orbsvcs/Naming_Service/Naming_Service.cpp:

        * TAO/orbsvcs/Notify_Service/NT_Notify_Server.cpp:
        * TAO/orbsvcs/Notify_Service/NT_Notify_Service.h:
        * TAO/orbsvcs/Notify_Service/NT_Notify_Service.cpp:
        * TAO/orbsvcs/Notify_Service/Notify_Service.h:
        * TAO/orbsvcs/Notify_Service/Notify_Service.cpp:

        * TAO/orbsvcs/PSS/psdl_tao.cpp:

        * TAO/orbsvcs/Scheduling_Service/Scheduling_Service.cpp:

        * TAO/orbsvcs/Time_Service/Clerk_i.cpp:
        * TAO/orbsvcs/Time_Service/Server_i.cpp:

        * TAO/orbsvcs/examples/CosEC/Factory/FactoryClient.cpp:
        * TAO/orbsvcs/examples/CosEC/Factory/FactoryDriver.h:
        * TAO/orbsvcs/examples/CosEC/Factory/FactoryDriver.cpp:
        * TAO/orbsvcs/examples/CosEC/Factory/main.cpp:

        * TAO/orbsvcs/examples/CosEC/RtEC_Based/bin/RtEC_Based_CosEC.h:
        * TAO/orbsvcs/examples/CosEC/RtEC_Based/bin/RtEC_Based_CosEC.cpp:

        * TAO/orbsvcs/examples/CosEC/RtEC_Based/tests/Basic/Basic.cpp:

        * TAO/orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Consumer.h:
        * TAO/orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Consumer.cpp:
        * TAO/orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Multiple.h:
        * TAO/orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Multiple.cpp:
        * TAO/orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Supplier.h:
        * TAO/orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Supplier.cpp:

        * TAO/orbsvcs/examples/CosEC/Simple/Consumer.cpp:
        * TAO/orbsvcs/examples/CosEC/Simple/Service.cpp:
        * TAO/orbsvcs/examples/CosEC/Simple/Supplier.cpp:

        * TAO/orbsvcs/examples/CosEC/TypedSimple/Consumer.cpp:
        * TAO/orbsvcs/examples/CosEC/TypedSimple/Supplier.cpp:

        * TAO/orbsvcs/examples/FaultTolerance/RolyPoly/client.cpp:
        * TAO/orbsvcs/examples/FaultTolerance/RolyPoly/server.cpp:

        * TAO/orbsvcs/examples/ImR/Advanced/TestClient.cpp:
        * TAO/orbsvcs/examples/ImR/Advanced/TestServer.cpp:
        * TAO/orbsvcs/examples/ImR/Advanced/client_main.cpp:
        * TAO/orbsvcs/examples/ImR/Advanced/manager_main.cpp:
        * TAO/orbsvcs/examples/ImR/Advanced/server_main.cpp:

        * TAO/orbsvcs/examples/ImR/Combined_Service/combined.cpp:
        * TAO/orbsvcs/examples/ImR/Combined_Service/controller.cpp:
        * TAO/orbsvcs/examples/ImR/Combined_Service/dynserver.h:
        * TAO/orbsvcs/examples/ImR/Combined_Service/dynserver.cpp:
        * TAO/orbsvcs/examples/ImR/Combined_Service/test.cpp:
        * TAO/orbsvcs/examples/ImR/Combined_Service/test_server.cpp:

        * TAO/orbsvcs/examples/LoadBalancing/client.cpp:
        * TAO/orbsvcs/examples/LoadBalancing/server.cpp:

        * TAO/orbsvcs/examples/Log/Basic/TLS_Client.h:
        * TAO/orbsvcs/examples/Log/Basic/TLS_Client.cpp:
        * TAO/orbsvcs/examples/Log/Basic/main.cpp:

        * TAO/orbsvcs/examples/Log/Event/Event_Consumer.cpp:
        * TAO/orbsvcs/examples/Log/Event/Event_Supplier.cpp:

        * TAO/orbsvcs/examples/Log/Notify/Notify_Consumer.cpp:
        * TAO/orbsvcs/examples/Log/Notify/Notify_Supplier.cpp:

        * TAO/orbsvcs/examples/Log/RTEvent/RTEvent_Consumer.cpp:
        * TAO/orbsvcs/examples/Log/RTEvent/RTEvent_Supplier.cpp:

        * TAO/orbsvcs/examples/Notify/Federation/Agent/Agent.cpp:

        * TAO/orbsvcs/examples/Notify/Federation/SpaceCraft/SpaceCraft.cpp:

        * TAO/orbsvcs/examples/Notify/Filter/Filter.h:
        * TAO/orbsvcs/examples/Notify/Filter/Filter.cpp:
        * TAO/orbsvcs/examples/Notify/Filter/main.cpp:

        * TAO/orbsvcs/examples/Notify/Lanes/Consumer_Client.cpp:
        * TAO/orbsvcs/examples/Notify/Lanes/Supplier_Client.cpp:

        * TAO/orbsvcs/examples/Notify/Subscribe/Subscribe.h:
        * TAO/orbsvcs/examples/Notify/Subscribe/Subscribe.cpp:
        * TAO/orbsvcs/examples/Notify/Subscribe/main.cpp:

        * TAO/orbsvcs/examples/Notify/ThreadPool/Consumer_Client.cpp:
        * TAO/orbsvcs/examples/Notify/ThreadPool/Supplier_Client.cpp:

        * TAO/orbsvcs/examples/ORT/client.cpp:
        * TAO/orbsvcs/examples/ORT/gateway_server.cpp:
        * TAO/orbsvcs/examples/ORT/server.cpp:

        * TAO/orbsvcs/examples/PSS/Simple_Naming.cpp:
        * TAO/orbsvcs/examples/PSS/client.cpp:
        * TAO/orbsvcs/examples/PSS/server.cpp:

        * TAO/orbsvcs/examples/RtEC/IIOPGateway/Consumer.cpp:
        * TAO/orbsvcs/examples/RtEC/IIOPGateway/EC.cpp:
        * TAO/orbsvcs/examples/RtEC/IIOPGateway/Gateway.cpp:
        * TAO/orbsvcs/examples/RtEC/IIOPGateway/Supplier.cpp:

        * TAO/orbsvcs/examples/RtEC/Kokyu/Service.cpp:

        * TAO/orbsvcs/examples/RtEC/MCast/MCast.cpp:

        * TAO/orbsvcs/examples/RtEC/Schedule/Service.cpp:

        * TAO/orbsvcs/examples/RtEC/Simple/Consumer.cpp:
        * TAO/orbsvcs/examples/RtEC/Simple/Service.cpp:
        * TAO/orbsvcs/examples/RtEC/Simple/Supplier.cpp:

        * TAO/orbsvcs/examples/Security/SecurityLevel1/client.cpp:
        * TAO/orbsvcs/examples/Security/SecurityLevel1/server.cpp:

        * TAO/orbsvcs/examples/Security/Send_File/client.cpp:
        * TAO/orbsvcs/examples/Security/Send_File/server.cpp:

        * TAO/orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * TAO/orbsvcs/orbsvcs/AV/Endpoint_Strategy.cpp:
        * TAO/orbsvcs/orbsvcs/AV/FlowSpec_Entry.cpp:
        * TAO/orbsvcs/orbsvcs/AV/QoS_UDP.cpp:
        * TAO/orbsvcs/orbsvcs/AV/TCP.cpp:
        * TAO/orbsvcs/orbsvcs/AV/UDP.cpp:

        * TAO/orbsvcs/orbsvcs/Concurrency/Concurrency_Loader.h:
        * TAO/orbsvcs/orbsvcs/Concurrency/Concurrency_Loader.cpp:

        * TAO/orbsvcs/orbsvcs/CosEvent/CEC_Default_Factory.cpp:
        * TAO/orbsvcs/orbsvcs/CosEvent/CEC_Event_Loader.cpp:

        * TAO/orbsvcs/orbsvcs/Event/ECG_Mcast_Gateway.cpp:
        * TAO/orbsvcs/orbsvcs/Event/EC_Default_Factory.cpp:
        * TAO/orbsvcs/orbsvcs/Event/EC_Dispatching_Task.h:
        * TAO/orbsvcs/orbsvcs/Event/EC_Dispatching_Task.cpp:
        * TAO/orbsvcs/orbsvcs/Event/EC_Gateway_IIOP_Factory.h:
        * TAO/orbsvcs/orbsvcs/Event/EC_Gateway_IIOP_Factory.cpp:
        * TAO/orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.h:
        * TAO/orbsvcs/orbsvcs/Event/EC_RTCORBA_Factory.cpp:
        * TAO/orbsvcs/orbsvcs/Event/EC_TPC_Factory.h:
        * TAO/orbsvcs/orbsvcs/Event/EC_TPC_Factory.cpp:

        * TAO/orbsvcs/orbsvcs/FaultTolerance/FT_Service_Callbacks.cpp:

        * TAO/orbsvcs/orbsvcs/FtRtEvent/ClientORB/FTRT_ClientORB_Loader.cpp:

        * TAO/orbsvcs/orbsvcs/FtRtEvent/EventChannel/AMI_Primary_Replication_Strategy.cpp:
        * TAO/orbsvcs/orbsvcs/FtRtEvent/EventChannel/Basic_Replication_Strategy.cpp:
        * TAO/orbsvcs/orbsvcs/FtRtEvent/EventChannel/FTEC_Group_Manager.cpp:
        * TAO/orbsvcs/orbsvcs/FtRtEvent/EventChannel/Fault_Detector.cpp:
        * TAO/orbsvcs/orbsvcs/FtRtEvent/EventChannel/Fault_Detector_T.cpp:
        * TAO/orbsvcs/orbsvcs/FtRtEvent/EventChannel/ForwardCtrlServerInterceptor.cpp:
        * TAO/orbsvcs/orbsvcs/FtRtEvent/EventChannel/FtEventServiceInterceptor.cpp:
        * TAO/orbsvcs/orbsvcs/FtRtEvent/EventChannel/GroupInfoPublisher.cpp:
        * TAO/orbsvcs/orbsvcs/FtRtEvent/EventChannel/Identification_Service.cpp:
        * TAO/orbsvcs/orbsvcs/FtRtEvent/EventChannel/Replication_Service.cpp:

        * TAO/orbsvcs/orbsvcs/FtRtEvent/Utils/Log.inl:
        * TAO/orbsvcs/orbsvcs/FtRtEvent/Utils/Log.cpp:

        * TAO/orbsvcs/orbsvcs/HTIOP/HTIOP_Acceptor.cpp:
        * TAO/orbsvcs/orbsvcs/HTIOP/HTIOP_Connection_Handler.cpp:
        * TAO/orbsvcs/orbsvcs/HTIOP/HTIOP_Connector.cpp:
        * TAO/orbsvcs/orbsvcs/HTIOP/HTIOP_Factory.cpp:

        * TAO/orbsvcs/orbsvcs/IFRService/Options.cpp:

        * TAO/orbsvcs/orbsvcs/IOR_Multicast.cpp:

        * TAO/orbsvcs/orbsvcs/LoadBalancing/LB_Component.cpp:

        * TAO/orbsvcs/orbsvcs/Log/Hash_LogRecordStore.cpp:

        * TAO/orbsvcs/orbsvcs/Naming/Flat_File_Persistence.cpp:
        * TAO/orbsvcs/orbsvcs/Naming/Naming_Server.cpp:
        * TAO/orbsvcs/orbsvcs/Naming/Storable_Naming_Context.cpp:
        * TAO/orbsvcs/orbsvcs/Naming/Storable_Naming_Context_Activator.cpp:

        * TAO/orbsvcs/orbsvcs/Notify/CosNotify_Service.cpp:
        * TAO/orbsvcs/orbsvcs/Notify/EventType.cpp:
        * TAO/orbsvcs/orbsvcs/Notify/Name_Value_Pair.cpp:
        * TAO/orbsvcs/orbsvcs/Notify/Topology_Object.h:
        * TAO/orbsvcs/orbsvcs/Notify/XML_Loader.cpp:
        * TAO/orbsvcs/orbsvcs/Notify/XML_Saver.cpp:
        * TAO/orbsvcs/orbsvcs/Notify/XML_Topology_Factory.cpp:

        * TAO/orbsvcs/orbsvcs/PortableGroup/PG_FactoryRegistry.cpp:
        * TAO/orbsvcs/orbsvcs/PortableGroup/Portable_Group_Map.cpp:
        * TAO/orbsvcs/orbsvcs/PortableGroup/UIPMC_Factory.h:
        * TAO/orbsvcs/orbsvcs/PortableGroup/UIPMC_Factory.cpp:

        * TAO/orbsvcs/orbsvcs/Property/CosPropertyService_i.cpp:

        * TAO/orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.h:
        * TAO/orbsvcs/orbsvcs/SSLIOP/SSLIOP_Factory.cpp:

        * TAO/orbsvcs/orbsvcs/Sched/DynSched.cpp:

        * TAO/orbsvcs/orbsvcs/Scheduler_Factory.cpp:

        * TAO/orbsvcs/orbsvcs/Trader/Trader_Interfaces.cpp:
        * TAO/orbsvcs/orbsvcs/Trader/Trader_Utils.cpp:

        * TAO/orbsvcs/performance-tests/LoadBalancing/LBPerf/CPU/client.cpp:
        * TAO/orbsvcs/performance-tests/LoadBalancing/LBPerf/CPU/server.cpp:

        * TAO/orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/client.cpp:
        * TAO/orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/server.cpp:

        * TAO/orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/compare_histo.cpp:
        * TAO/orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/driver.cpp:

        * TAO/orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/client.cpp:
        * TAO/orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/server.cpp:

        * TAO/orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/client.cpp:
        * TAO/orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/server.cpp:

        * TAO/orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/client.cpp:
        * TAO/orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/server.cpp:

        * TAO/orbsvcs/performance-tests/RTEvent/Roundtrip/client.cpp:
        * TAO/orbsvcs/performance-tests/RTEvent/Roundtrip/server.cpp:

        * TAO/orbsvcs/performance-tests/RTEvent/TCP_Baseline/client.cpp:
        * TAO/orbsvcs/performance-tests/RTEvent/TCP_Baseline/server.cpp:

        * TAO/orbsvcs/performance-tests/RTEvent/lib/Client_Options.h:
        * TAO/orbsvcs/performance-tests/RTEvent/lib/Client_Options.cpp:

        * TAO/orbsvcs/performance-tests/perf.mwc:

        * TAO/orbsvcs/tests/AVStreams/Asynch_Three_Stage/Connection_Manager.cpp:
        * TAO/orbsvcs/tests/AVStreams/Asynch_Three_Stage/distributer.cpp:
        * TAO/orbsvcs/tests/AVStreams/Asynch_Three_Stage/receiver.cpp:
        * TAO/orbsvcs/tests/AVStreams/Asynch_Three_Stage/sender.cpp:

        * TAO/orbsvcs/tests/AVStreams/Bidirectional_Flows/receiver.cpp:
        * TAO/orbsvcs/tests/AVStreams/Bidirectional_Flows/sender.cpp:

        * TAO/orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:
        * TAO/orbsvcs/tests/AVStreams/Component_Switching/receiver.cpp:
        * TAO/orbsvcs/tests/AVStreams/Component_Switching/sender.cpp:

        * TAO/orbsvcs/tests/AVStreams/Full_Profile/ftp.h:
        * TAO/orbsvcs/tests/AVStreams/Full_Profile/ftp.cpp:
        * TAO/orbsvcs/tests/AVStreams/Full_Profile/server.h:
        * TAO/orbsvcs/tests/AVStreams/Full_Profile/server.cpp:

        * TAO/orbsvcs/tests/AVStreams/Latency/control.cpp:
        * TAO/orbsvcs/tests/AVStreams/Latency/ping.cpp:
        * TAO/orbsvcs/tests/AVStreams/Latency/pong.cpp:

        * TAO/orbsvcs/tests/AVStreams/Modify_QoS/receiver.cpp:
        * TAO/orbsvcs/tests/AVStreams/Modify_QoS/sender.cpp:

        * TAO/orbsvcs/tests/AVStreams/Multicast/ftp.h:
        * TAO/orbsvcs/tests/AVStreams/Multicast/ftp.cpp:
        * TAO/orbsvcs/tests/AVStreams/Multicast/server.h:
        * TAO/orbsvcs/tests/AVStreams/Multicast/server.cpp:

        * TAO/orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.h:
        * TAO/orbsvcs/tests/AVStreams/Multicast_Full_Profile/ftp.cpp:
        * TAO/orbsvcs/tests/AVStreams/Multicast_Full_Profile/server.h:
        * TAO/orbsvcs/tests/AVStreams/Multicast_Full_Profile/server.cpp:

        * TAO/orbsvcs/tests/AVStreams/Multiple_Flows/receiver.cpp:
        * TAO/orbsvcs/tests/AVStreams/Multiple_Flows/sender.cpp:

        * TAO/orbsvcs/tests/AVStreams/Pluggable/ftp.h:
        * TAO/orbsvcs/tests/AVStreams/Pluggable/ftp.cpp:
        * TAO/orbsvcs/tests/AVStreams/Pluggable/server.cpp:

        * TAO/orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/receiver.cpp:
        * TAO/orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/sender.cpp:

        * TAO/orbsvcs/tests/AVStreams/Simple_Three_Stage/distributer.cpp:
        * TAO/orbsvcs/tests/AVStreams/Simple_Three_Stage/receiver.cpp:
        * TAO/orbsvcs/tests/AVStreams/Simple_Three_Stage/sender.cpp:

        * TAO/orbsvcs/tests/AVStreams/Simple_Two_Stage/receiver.cpp:
        * TAO/orbsvcs/tests/AVStreams/Simple_Two_Stage/sender.cpp:

        * TAO/orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/receiver.cpp:
        * TAO/orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/sender.cpp:

        * TAO/orbsvcs/tests/BiDir_CORBALOC/TimeServer.cpp:

        * TAO/orbsvcs/tests/Bug_1334_Regression/client.cpp:

        * TAO/orbsvcs/tests/Bug_1393_Regression/client.cpp:

        * TAO/orbsvcs/tests/Bug_1395_Regression/client.cpp:
        * TAO/orbsvcs/tests/Bug_1395_Regression/server.cpp:

        * TAO/orbsvcs/tests/Bug_1630_Regression/testclient.cpp:

        * TAO/orbsvcs/tests/Bug_2137_Regression/client.cpp:

        * TAO/orbsvcs/tests/Bug_2247_Regression/Manager.cpp:
        * TAO/orbsvcs/tests/Bug_2247_Regression/server.cpp:

        * TAO/orbsvcs/tests/Bug_2248_Regression/Bug_2248_Regression.mpc:
        * TAO/orbsvcs/tests/Bug_2248_Regression/client.cpp:
        * TAO/orbsvcs/tests/Bug_2248_Regression/server.cpp:

        * TAO/orbsvcs/tests/Concurrency/CC_client.h:
        * TAO/orbsvcs/tests/Concurrency/CC_client.cpp:

        * TAO/orbsvcs/tests/CosEvent/Basic/Disconnect.cpp:
        * TAO/orbsvcs/tests/CosEvent/Basic/MT_Disconnect.cpp:
        * TAO/orbsvcs/tests/CosEvent/Basic/Pull_Push_Event.cpp:
        * TAO/orbsvcs/tests/CosEvent/Basic/Push_Event.cpp:
        * TAO/orbsvcs/tests/CosEvent/Basic/Random.cpp:
        * TAO/orbsvcs/tests/CosEvent/Basic/Shutdown.cpp:

        * TAO/orbsvcs/tests/EC_Custom_Marshal/ECM_Consumer.cpp:
        * TAO/orbsvcs/tests/EC_Custom_Marshal/ECM_Supplier.cpp:

        * TAO/orbsvcs/tests/EC_MT_Mcast/Consumer.cpp:
        * TAO/orbsvcs/tests/EC_MT_Mcast/MCast.cpp:
        * TAO/orbsvcs/tests/EC_MT_Mcast/Supplier.cpp:

        * TAO/orbsvcs/tests/EC_Mcast/EC_Mcast.cpp:

        * TAO/orbsvcs/tests/EC_Multiple/EC_Multiple.cpp:

        * TAO/orbsvcs/tests/EC_Throughput/ECT_Consumer.cpp:
        * TAO/orbsvcs/tests/EC_Throughput/ECT_Consumer_Driver.cpp:
        * TAO/orbsvcs/tests/EC_Throughput/ECT_Supplier.cpp:
        * TAO/orbsvcs/tests/EC_Throughput/ECT_Supplier_Driver.cpp:
        * TAO/orbsvcs/tests/EC_Throughput/ECT_Throughput.cpp:

        * TAO/orbsvcs/tests/Event/Basic/Atomic_Reconnect.cpp:
        * TAO/orbsvcs/tests/Event/Basic/BCast.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Bitmask.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Complex.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Control.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Disconnect.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Gateway.cpp:
        * TAO/orbsvcs/tests/Event/Basic/MT_Disconnect.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Negation.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Observer.h:
        * TAO/orbsvcs/tests/Event/Basic/Observer.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Random.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Reconnect.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Schedule.h:
        * TAO/orbsvcs/tests/Event/Basic/Schedule.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Shutdown.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Timeout.cpp:
        * TAO/orbsvcs/tests/Event/Basic/Wildcard.cpp:

        * TAO/orbsvcs/tests/Event/Mcast/Common/Gateway_EC.cpp:

        * TAO/orbsvcs/tests/Event/Mcast/Complex/consumer.cpp:
        * TAO/orbsvcs/tests/Event/Mcast/Complex/gateway-ec.cpp:
        * TAO/orbsvcs/tests/Event/Mcast/Complex/supplier.cpp:

        * TAO/orbsvcs/tests/Event/Mcast/Simple/consumer.cpp:
        * TAO/orbsvcs/tests/Event/Mcast/Simple/gateway-ec.cpp:
        * TAO/orbsvcs/tests/Event/Mcast/Simple/supplier.cpp:

        * TAO/orbsvcs/tests/Event/Mcast/Two_Way/application.cpp:
        * TAO/orbsvcs/tests/Event/Mcast/Two_Way/gateway-ec.cpp:

        * TAO/orbsvcs/tests/Event/Performance/Connect.cpp:
        * TAO/orbsvcs/tests/Event/Performance/Inversion.cpp:
        * TAO/orbsvcs/tests/Event/Performance/Latency.cpp:
        * TAO/orbsvcs/tests/Event/Performance/Latency_Server.cpp:
        * TAO/orbsvcs/tests/Event/Performance/Throughput.cpp:

        * TAO/orbsvcs/tests/Event/lib/Driver.cpp:

        * TAO/orbsvcs/tests/FT_App/FTAPP_Analyzer_Main.cpp:
        * TAO/orbsvcs/tests/FT_App/FTAPP_FactoryRegistry_Main.cpp:
        * TAO/orbsvcs/tests/FT_App/FTAPP_FaultConsumer_Main.cpp:
        * TAO/orbsvcs/tests/FT_App/FTAPP_Notifier_Main.cpp:
        * TAO/orbsvcs/tests/FT_App/FT_Client.cpp:
        * TAO/orbsvcs/tests/FT_App/FT_Creator.cpp:
        * TAO/orbsvcs/tests/FT_App/FT_Replica.cpp:
        * TAO/orbsvcs/tests/FT_App/FT_ReplicaFactory_i.cpp:
        * TAO/orbsvcs/tests/FT_App/FT_ReplicationManagerController.cpp:
        * TAO/orbsvcs/tests/FT_App/FT_TestReplica_i.cpp:
        * TAO/orbsvcs/tests/FT_App/ReplicationManagerFaultConsumerAdapter.cpp:
        * TAO/orbsvcs/tests/FT_App/StubBatchConsumer.cpp:
        * TAO/orbsvcs/tests/FT_App/StubFaultAnalyzer.cpp:
        * TAO/orbsvcs/tests/FT_App/StubFaultConsumer.cpp:
        * TAO/orbsvcs/tests/FT_App/StubFaultNotifier.cpp:
        * TAO/orbsvcs/tests/FT_App/TAO_Object_Group_Creator.cpp:

        * TAO/orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/client.cpp:
        * TAO/orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/server.cpp:

        * TAO/orbsvcs/tests/FaultTolerance/IOGR/Manager.cpp:
        * TAO/orbsvcs/tests/FaultTolerance/IOGR/server.cpp:

        * TAO/orbsvcs/tests/FaultTolerance/IOGRManipulation/IOGRTest.cpp:

        * TAO/orbsvcs/tests/FtRtEvent/consumer.cpp:
        * TAO/orbsvcs/tests/FtRtEvent/supplier.cpp:

        * TAO/orbsvcs/tests/HTIOP/AMI/Test_Output.cpp:
        * TAO/orbsvcs/tests/HTIOP/AMI/client.cpp:
        * TAO/orbsvcs/tests/HTIOP/AMI/server.cpp:
        * TAO/orbsvcs/tests/HTIOP/AMI/simple_client.cpp:

        * TAO/orbsvcs/tests/HTIOP/BiDirectional/Test_Output.cpp:
        * TAO/orbsvcs/tests/HTIOP/BiDirectional/client.cpp:
        * TAO/orbsvcs/tests/HTIOP/BiDirectional/server.cpp:

        * TAO/orbsvcs/tests/HTIOP/Hello/Test_Output.cpp:
        * TAO/orbsvcs/tests/HTIOP/Hello/client.cpp:
        * TAO/orbsvcs/tests/HTIOP/Hello/server.cpp:

        * TAO/orbsvcs/tests/HTIOP/test_config.h:

        * TAO/orbsvcs/tests/IOR_MCast/IOR_MCast.mpc:
        * TAO/orbsvcs/tests/IOR_MCast/client.cpp:
        * TAO/orbsvcs/tests/IOR_MCast/ior_mcast_client_i.cpp:
        * TAO/orbsvcs/tests/IOR_MCast/server.cpp:
        * TAO/orbsvcs/tests/IOR_MCast/server_i.cpp:

        * TAO/orbsvcs/tests/ImplRepo/ImplRepo.mpc:

        * TAO/orbsvcs/tests/ImplRepo/NameService/test.cpp:

        * TAO/orbsvcs/tests/ImplRepo/airplane_client.cpp:
        * TAO/orbsvcs/tests/ImplRepo/airplane_client_i.cpp:
        * TAO/orbsvcs/tests/ImplRepo/airplane_server.cpp:
        * TAO/orbsvcs/tests/ImplRepo/airplane_server_i.cpp:
        * TAO/orbsvcs/tests/ImplRepo/nestea_client.cpp:
        * TAO/orbsvcs/tests/ImplRepo/nestea_client_i.cpp:
        * TAO/orbsvcs/tests/ImplRepo/nestea_i.cpp:
        * TAO/orbsvcs/tests/ImplRepo/nestea_server.cpp:
        * TAO/orbsvcs/tests/ImplRepo/nestea_server_i.cpp:

        * TAO/orbsvcs/tests/ImplRepo/scale/client.cpp:
        * TAO/orbsvcs/tests/ImplRepo/scale/server.cpp:
        * TAO/orbsvcs/tests/ImplRepo/scale/server_i.cpp:

        * TAO/orbsvcs/tests/InterfaceRepo/Application_Test/client.cpp:
        * TAO/orbsvcs/tests/InterfaceRepo/Application_Test/ifr_dii_client.cpp:
        * TAO/orbsvcs/tests/InterfaceRepo/Application_Test/server.cpp:

        * TAO/orbsvcs/tests/InterfaceRepo/IDL3_Test/client.cpp:
        * TAO/orbsvcs/tests/InterfaceRepo/IDL3_Test/idl3_client.cpp:

        * TAO/orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:
        * TAO/orbsvcs/tests/InterfaceRepo/IFR_Test/client.cpp:

        * TAO/orbsvcs/tests/InterfaceRepo/Latency_Test/Latency_Query_Client.cpp:
        * TAO/orbsvcs/tests/InterfaceRepo/Latency_Test/client.cpp:

        * TAO/orbsvcs/tests/InterfaceRepo/Persistence_Test/Ptest.cpp:
        * TAO/orbsvcs/tests/InterfaceRepo/Persistence_Test/test.cpp:

        * TAO/orbsvcs/tests/Interoperable_Naming/client.cpp:
        * TAO/orbsvcs/tests/Interoperable_Naming/ncontextext_client_i.cpp:

        * TAO/orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/LB_server.cpp:
        * TAO/orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/client.cpp:
        * TAO/orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/server.cpp:

        * TAO/orbsvcs/tests/LoadBalancing/GenericFactory/Infrastructure_Controlled/LB_server.cpp:
        * TAO/orbsvcs/tests/LoadBalancing/GenericFactory/Infrastructure_Controlled/client.cpp:
        * TAO/orbsvcs/tests/LoadBalancing/GenericFactory/Infrastructure_Controlled/server.cpp:

        * TAO/orbsvcs/tests/LoadBalancing/GenericFactory/Manage_Object_Group/server.cpp:

        * TAO/orbsvcs/tests/LoadBalancing/LoadMonitor/CPU/client.cpp:

        * TAO/orbsvcs/tests/Log/Basic_Log_Test/Basic_Log_Test.cpp:
        * TAO/orbsvcs/tests/Log/Basic_Log_Test/client.cpp:

        * TAO/orbsvcs/tests/Miop/McastHello/client.cpp:
        * TAO/orbsvcs/tests/Miop/McastHello/server.cpp:

        * TAO/orbsvcs/tests/Notify/Basic/AdminProperties.cpp:
        * TAO/orbsvcs/tests/Notify/Basic/ConnectDisconnect.h:
        * TAO/orbsvcs/tests/Notify/Basic/ConnectDisconnect.cpp:
        * TAO/orbsvcs/tests/Notify/Basic/Events.h:
        * TAO/orbsvcs/tests/Notify/Basic/Events.cpp:
        * TAO/orbsvcs/tests/Notify/Basic/Filter.h:
        * TAO/orbsvcs/tests/Notify/Basic/Filter.cpp:
        * TAO/orbsvcs/tests/Notify/Basic/IdAssignment.cpp:
        * TAO/orbsvcs/tests/Notify/Basic/LifeCycle.cpp:
        * TAO/orbsvcs/tests/Notify/Basic/MultiTypes.h:
        * TAO/orbsvcs/tests/Notify/Basic/MultiTypes.cpp:
        * TAO/orbsvcs/tests/Notify/Basic/Sequence.h:
        * TAO/orbsvcs/tests/Notify/Basic/Sequence.cpp:
        * TAO/orbsvcs/tests/Notify/Basic/Simple.h:
        * TAO/orbsvcs/tests/Notify/Basic/Simple.cpp:
        * TAO/orbsvcs/tests/Notify/Basic/Updates.h:
        * TAO/orbsvcs/tests/Notify/Basic/Updates.cpp:
        * TAO/orbsvcs/tests/Notify/Basic/run_test.pl:

        * TAO/orbsvcs/tests/Notify/Blocking/Notify_Structured_Push_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Blocking/Structured_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Blocking/Structured_Supplier.cpp:

        * TAO/orbsvcs/tests/Notify/Destroy/main.cpp:

        * TAO/orbsvcs/tests/Notify/Discarding/Notify_Structured_Push_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Discarding/Sequence_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Discarding/Sequence_Supplier.cpp:
        * TAO/orbsvcs/tests/Notify/Discarding/Structured_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Discarding/Structured_Supplier.cpp:

        * TAO/orbsvcs/tests/Notify/Driver/main.cpp:

        * TAO/orbsvcs/tests/Notify/MT_Dispatching/Structured_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/MT_Dispatching/Structured_Supplier.cpp:

        * TAO/orbsvcs/tests/Notify/Ordering/Sequence_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Ordering/Sequence_Supplier.cpp:
        * TAO/orbsvcs/tests/Notify/Ordering/Structured_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Ordering/Structured_Supplier.cpp:

        * TAO/orbsvcs/tests/Notify/PluggableTopology/main.cpp:

        * TAO/orbsvcs/tests/Notify/RT_lib/RT_POA_Command.h:
        * TAO/orbsvcs/tests/Notify/RT_lib/RT_POA_Command.cpp:

        * TAO/orbsvcs/tests/Notify/Reconnecting/Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Reconnecting/Supplier.cpp:

        * TAO/orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Notify_Sequence_Push_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Sequence_Supplier.cpp:

        * TAO/orbsvcs/tests/Notify/Sequence_Multi_Filter/Notify_Sequence_Push_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Sequence_Multi_Filter/Sequence_Supplier.cpp:

        * TAO/orbsvcs/tests/Notify/Structured_Filter/Structured_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Structured_Filter/Structured_Supplier.cpp:

        * TAO/orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/Structured_Multi_Filter/Structured_Supplier.cpp:

        * TAO/orbsvcs/tests/Notify/Test_Filter/RT_Test_Filter.cpp:

        * TAO/orbsvcs/tests/Notify/XML_Persistence/main.cpp:

        * TAO/orbsvcs/tests/Notify/lib/Activation_Manager.h:
        * TAO/orbsvcs/tests/Notify/lib/Activation_Manager.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Application_Command.h:
        * TAO/orbsvcs/tests/Notify/lib/Application_Command.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Command.h:
        * TAO/orbsvcs/tests/Notify/lib/Command.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Command_Builder.h:
        * TAO/orbsvcs/tests/Notify/lib/Command_Builder.cpp:
        * TAO/orbsvcs/tests/Notify/lib/ConsumerAdmin_Command.h:
        * TAO/orbsvcs/tests/Notify/lib/ConsumerAdmin_Command.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Driver.h:
        * TAO/orbsvcs/tests/Notify/lib/Driver.cpp:
        * TAO/orbsvcs/tests/Notify/lib/EventChannel_Command.h:
        * TAO/orbsvcs/tests/Notify/lib/EventChannel_Command.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Filter_Command.h:
        * TAO/orbsvcs/tests/Notify/lib/Filter_Command.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Name.h:
        * TAO/orbsvcs/tests/Notify/lib/Name.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Notify_Test_Client.h:
        * TAO/orbsvcs/tests/Notify/lib/Notify_Test_Client.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Options_Parser.h:
        * TAO/orbsvcs/tests/Notify/lib/Options_Parser.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Peer.h:
        * TAO/orbsvcs/tests/Notify/lib/Peer.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Peer_T.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Periodic_Consumer.h:
        * TAO/orbsvcs/tests/Notify/lib/Periodic_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Periodic_Consumer_Command.h:
        * TAO/orbsvcs/tests/Notify/lib/Periodic_Consumer_Command.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Periodic_Supplier.h:
        * TAO/orbsvcs/tests/Notify/lib/Periodic_Supplier.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Periodic_Supplier_Command.h:
        * TAO/orbsvcs/tests/Notify/lib/Periodic_Supplier_Command.cpp:
        * TAO/orbsvcs/tests/Notify/lib/SupplierAdmin_Command.h:
        * TAO/orbsvcs/tests/Notify/lib/SupplierAdmin_Command.cpp:
        * TAO/orbsvcs/tests/Notify/lib/Task_Stats.h:
        * TAO/orbsvcs/tests/Notify/lib/Task_Stats.cpp:

        * TAO/orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/performance-tests/Filter/Sequence_Supplier.cpp:
        * TAO/orbsvcs/tests/Notify/performance-tests/Filter/Structured_Consumer.cpp:
        * TAO/orbsvcs/tests/Notify/performance-tests/Filter/Structured_Supplier.cpp:

        * TAO/orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.h:
        * TAO/orbsvcs/tests/Notify/performance-tests/RedGreen/RedGreen_Test.cpp:
        * TAO/orbsvcs/tests/Notify/performance-tests/RedGreen/main.cpp:

        * TAO/orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.h:
        * TAO/orbsvcs/tests/Notify/performance-tests/Throughput/Throughput.cpp:

        * TAO/orbsvcs/tests/Property/client.h:
        * TAO/orbsvcs/tests/Property/client.cpp:
        * TAO/orbsvcs/tests/Property/main.cpp:
        * TAO/orbsvcs/tests/Property/server.cpp:

        * TAO/orbsvcs/tests/RTCosScheduling/client.cpp:
        * TAO/orbsvcs/tests/RTCosScheduling/server.cpp:

        * TAO/orbsvcs/tests/Redundant_Naming/client.cpp:

        * TAO/orbsvcs/tests/Sched/DynSched_Test.cpp:

        * TAO/orbsvcs/tests/Sched_Conf/Sched_Conf.cpp:
        * TAO/orbsvcs/tests/Sched_Conf/Sched_Conf_Anomalies.cpp:
        * TAO/orbsvcs/tests/Sched_Conf/Sched_Conf_Runtime.cpp:

        * TAO/orbsvcs/tests/Security/BiDirectional/client.cpp:
        * TAO/orbsvcs/tests/Security/BiDirectional/server.cpp:

        * TAO/orbsvcs/tests/Security/Big_Request/client.cpp:
        * TAO/orbsvcs/tests/Security/Big_Request/server.cpp:

        * TAO/orbsvcs/tests/Security/Callback/client.cpp:
        * TAO/orbsvcs/tests/Security/Callback/server.cpp:

        * TAO/orbsvcs/tests/Security/Crash_Test/client.cpp:
        * TAO/orbsvcs/tests/Security/Crash_Test/server.cpp:

        * TAO/orbsvcs/tests/Security/MT_IIOP_SSL/client.cpp:
        * TAO/orbsvcs/tests/Security/MT_IIOP_SSL/server.cpp:

        * TAO/orbsvcs/tests/Security/MT_SSLIOP/client.cpp:
        * TAO/orbsvcs/tests/Security/MT_SSLIOP/run_test_harsh.pl:
        * TAO/orbsvcs/tests/Security/MT_SSLIOP/server.cpp:

        * TAO/orbsvcs/tests/Security/Secure_Invocation/client.cpp:
        * TAO/orbsvcs/tests/Security/Secure_Invocation/server.cpp:

        * TAO/orbsvcs/tests/Security/ssliop_corbaloc/client.cpp:

        * TAO/orbsvcs/tests/Simple_Naming/Simple_Naming.mpc:
        * TAO/orbsvcs/tests/Simple_Naming/client.cpp:

        * TAO/orbsvcs/tests/Time/Client_i.cpp:
        * TAO/orbsvcs/tests/Time/client.cpp:

        * TAO/orbsvcs/tests/Trading/Offer_Importer.cpp:
        * TAO/orbsvcs/tests/Trading/TT_Info.h:
        * TAO/orbsvcs/tests/Trading/TT_Info.cpp:
        * TAO/orbsvcs/tests/Trading/colocated_test.cpp:
        * TAO/orbsvcs/tests/Trading/export_test.cpp:
        * TAO/orbsvcs/tests/Trading/import_test.cpp:

        * TAO/orbsvcs/tests/ior_corbaname/client.cpp:
        * TAO/orbsvcs/tests/ior_corbaname/ior_corbaname_client_i.cpp:
        * TAO/orbsvcs/tests/ior_corbaname/server.cpp:

        * TAO/orbsvcs/tests/tests_svc_loader/tests_svc_loader.cpp:

        * TAO/performance-tests/Anyop/anyop.cpp:

        * TAO/performance-tests/Callback/client.cpp:
        * TAO/performance-tests/Callback/server.cpp:

        * TAO/performance-tests/Cubit/TAO/DII_Cubit/client.cpp:

        * TAO/performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Client.cpp:
        * TAO/performance-tests/Cubit/TAO/IDL_Cubit/Cubit_Server.cpp:
        * TAO/performance-tests/Cubit/TAO/IDL_Cubit/client.cpp:
        * TAO/performance-tests/Cubit/TAO/IDL_Cubit/collocation_test.cpp:
        * TAO/performance-tests/Cubit/TAO/IDL_Cubit/server.cpp:

        * TAO/performance-tests/Cubit/TAO/MT_Cubit/Globals.cpp:
        * TAO/performance-tests/Cubit/TAO/MT_Cubit/Task_Client.cpp:
        * TAO/performance-tests/Cubit/TAO/MT_Cubit/client.cpp:
        * TAO/performance-tests/Cubit/TAO/MT_Cubit/server.cpp:

        * TAO/performance-tests/Latency/AMH_Single_Threaded/client.cpp:
        * TAO/performance-tests/Latency/AMH_Single_Threaded/server.cpp:

        * TAO/performance-tests/Latency/AMI/client.cpp:
        * TAO/performance-tests/Latency/AMI/server.cpp:

        * TAO/performance-tests/Latency/Collocation/Collocated_Test.cpp:

        * TAO/performance-tests/Latency/DII/client.cpp:
        * TAO/performance-tests/Latency/DII/server.cpp:

        * TAO/performance-tests/Latency/DSI/client.cpp:
        * TAO/performance-tests/Latency/DSI/server.cpp:

        * TAO/performance-tests/Latency/Deferred/client.cpp:
        * TAO/performance-tests/Latency/Deferred/server.cpp:

        * TAO/performance-tests/Latency/Single_Threaded/client.cpp:
        * TAO/performance-tests/Latency/Single_Threaded/server.cpp:

        * TAO/performance-tests/Latency/Thread_Per_Connection/client.cpp:
        * TAO/performance-tests/Latency/Thread_Per_Connection/server.cpp:

        * TAO/performance-tests/Latency/Thread_Pool/client.cpp:
        * TAO/performance-tests/Latency/Thread_Pool/server.cpp:

        * TAO/performance-tests/Memory/IORsize/client.cpp:
        * TAO/performance-tests/Memory/IORsize/server.cpp:

        * TAO/performance-tests/Memory/Single_Threaded/client.cpp:
        * TAO/performance-tests/Memory/Single_Threaded/server.cpp:

        * TAO/performance-tests/POA/Create_Reference/create_reference.cpp:

        * TAO/performance-tests/POA/Demux/client.cpp:
        * TAO/performance-tests/POA/Demux/demux_stats.cpp:
        * TAO/performance-tests/POA/Demux/demux_test_client.cpp:
        * TAO/performance-tests/POA/Demux/demux_test_server.cpp:
        * TAO/performance-tests/POA/Demux/server.cpp:
        * TAO/performance-tests/POA/Demux/write_names.cpp:

        * TAO/performance-tests/POA/Implicit_Activation/client.cpp:
        * TAO/performance-tests/POA/Implicit_Activation/collocated.cpp:
        * TAO/performance-tests/POA/Implicit_Activation/server.cpp:

        * TAO/performance-tests/POA/Object_Creation_And_Registration/registration.cpp:

        * TAO/performance-tests/Pluggable/PP_Test_Client.cpp:
        * TAO/performance-tests/Pluggable/PP_Test_Server.cpp:
        * TAO/performance-tests/Pluggable/client.cpp:
        * TAO/performance-tests/Pluggable/server.cpp:

        * TAO/performance-tests/Protocols/distributor.cpp:
        * TAO/performance-tests/Protocols/receiver.cpp:
        * TAO/performance-tests/Protocols/sender.cpp:

        * TAO/performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/client.cpp:
        * TAO/performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/server.cpp:

        * TAO/performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/client.cpp:
        * TAO/performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/server.cpp:

        * TAO/performance-tests/RTCorba/Oneways/Reliable/client.cpp:
        * TAO/performance-tests/RTCorba/Oneways/Reliable/server.cpp:

        * TAO/performance-tests/RTCorba/Thread_Pool/client.cpp:
        * TAO/performance-tests/RTCorba/Thread_Pool/server.cpp:

        * TAO/performance-tests/Sequence_Latency/AMH_Single_Threaded/client.cpp:
        * TAO/performance-tests/Sequence_Latency/AMH_Single_Threaded/server.cpp:

        * TAO/performance-tests/Sequence_Latency/AMI/client.cpp:
        * TAO/performance-tests/Sequence_Latency/AMI/server.cpp:

        * TAO/performance-tests/Sequence_Latency/DII/client.cpp:
        * TAO/performance-tests/Sequence_Latency/DII/server.cpp:

        * TAO/performance-tests/Sequence_Latency/DSI/client.cpp:
        * TAO/performance-tests/Sequence_Latency/DSI/server.cpp:

        * TAO/performance-tests/Sequence_Latency/Deferred/client.cpp:
        * TAO/performance-tests/Sequence_Latency/Deferred/server.cpp:

        * TAO/performance-tests/Sequence_Latency/Single_Threaded/client.cpp:
        * TAO/performance-tests/Sequence_Latency/Single_Threaded/server.cpp:

        * TAO/performance-tests/Sequence_Latency/Thread_Per_Connection/client.cpp:
        * TAO/performance-tests/Sequence_Latency/Thread_Per_Connection/server.cpp:

        * TAO/performance-tests/Sequence_Latency/Thread_Pool/client.cpp:
        * TAO/performance-tests/Sequence_Latency/Thread_Pool/server.cpp:

        * TAO/performance-tests/Throughput/client.cpp:
        * TAO/performance-tests/Throughput/server.cpp:

        * TAO/performance-tests/perf.mwc:

        * TAO/tao/Acceptor_Registry.cpp:

        * TAO/tao/AnyTypeCode/Any.cpp:
        * TAO/tao/AnyTypeCode/NVList.cpp:

        * TAO/tao/CORBALOC_Parser.cpp:

        * TAO/tao/Codeset/Codeset_Descriptor.cpp:
        * TAO/tao/Codeset/Codeset_Manager_i.cpp:

        * TAO/tao/Connector_Registry.cpp:
        * TAO/tao/DLL_Parser.h:

        * TAO/tao/DynamicAny/DynAny_i.cpp:
        * TAO/tao/DynamicAny/DynCommon.cpp:

        * TAO/tao/Environment.cpp:
        * TAO/tao/Exception.h:
        * TAO/tao/Exception.cpp:
        * TAO/tao/FILE_Parser.cpp:
        * TAO/tao/GIOP_Message_Base.cpp:
        * TAO/tao/GIOP_Message_Lite.cpp:
        * TAO/tao/IIOP_Acceptor.cpp:
        * TAO/tao/IIOP_Connection_Handler.cpp:
        * TAO/tao/IIOP_Connector.cpp:

        * TAO/tao/IORInterceptor/IORInterceptor_Adapter_Impl.cpp:

        * TAO/tao/ImR_Client/ImR_Client.cpp:

        * TAO/tao/MCAST_Parser.cpp:
        * TAO/tao/ORB.cpp:
        * TAO/tao/ORB_Core.cpp:
        * TAO/tao/Object_Ref_Table.cpp:

        * TAO/tao/PortableServer/Operation_Table_Perfect_Hash.cpp:
        * TAO/tao/PortableServer/PortableServer_WFunctions.cpp:
        * TAO/tao/PortableServer/Root_POA.cpp:

        * TAO/tao/RTCORBA/RT_ORBInitializer.cpp:

        * TAO/tao/RTPortableServer/RT_Servant_Dispatcher.cpp:

        * TAO/tao/RTScheduling/Request_Interceptor.cpp:

        * TAO/tao/Resume_Handle.cpp:

        * TAO/tao/Strategies/DIOP_Acceptor.cpp:
        * TAO/tao/Strategies/DIOP_Connection_Handler.cpp:
        * TAO/tao/Strategies/DIOP_Transport.cpp:
        * TAO/tao/Strategies/SCIOP_Acceptor.cpp:
        * TAO/tao/Strategies/SCIOP_Connection_Handler.cpp:
        * TAO/tao/Strategies/SCIOP_Connector.cpp:
        * TAO/tao/Strategies/SHMIOP_Acceptor.cpp:
        * TAO/tao/Strategies/SHMIOP_Connector.cpp:
        * TAO/tao/Strategies/advanced_resource.cpp:

        * TAO/tao/Synch_Invocation.cpp:
        * TAO/tao/SystemException.cpp:
        * TAO/tao/TAO_Internal.cpp:
        * TAO/tao/Transport.cpp:
        * TAO/tao/Transport_Connector.cpp:

        * TAO/tao/TypeCodeFactory/TypeCodeFactory_i.cpp:

        * TAO/tao/default_resource.cpp:

        * TAO/tests/AMH_Exceptions/AMH_Exceptions.mpc:
        * TAO/tests/AMH_Exceptions/client.cpp:
        * TAO/tests/AMH_Exceptions/server.cpp:

        * TAO/tests/AMH_Oneway/AMH_Oneway.mpc:
        * TAO/tests/AMH_Oneway/client.cpp:
        * TAO/tests/AMH_Oneway/server.cpp:

        * TAO/tests/AMI/AMI.mpc:
        * TAO/tests/AMI/client.cpp:
        * TAO/tests/AMI/server.cpp:
        * TAO/tests/AMI/simple_client.cpp:

        * TAO/tests/AMI_Buffering/admin.cpp:
        * TAO/tests/AMI_Buffering/client.cpp:
        * TAO/tests/AMI_Buffering/server.cpp:

        * TAO/tests/AMI_Timeouts/AMI_Timeouts.mpc:
        * TAO/tests/AMI_Timeouts/client.cpp:
        * TAO/tests/AMI_Timeouts/server.cpp:

        * TAO/tests/Abstract_Interface/client.cpp:
        * TAO/tests/Abstract_Interface/server.cpp:

        * TAO/tests/Any/Recursive/client.cpp:
        * TAO/tests/Any/Recursive/server.cpp:

        * TAO/tests/BiDirectional/client.cpp:
        * TAO/tests/BiDirectional/server.cpp:

        * TAO/tests/BiDirectional_MultipleORB/destroy.cpp:

        * TAO/tests/BiDirectional_NestedUpcall/BiDir_NestedUpcall.mpc:
        * TAO/tests/BiDirectional_NestedUpcall/client.cpp:
        * TAO/tests/BiDirectional_NestedUpcall/server.cpp:

        * TAO/tests/Big_AMI/client.cpp:
        * TAO/tests/Big_AMI/server.cpp:

        * TAO/tests/Big_Oneways/Big_Oneways.mpc:
        * TAO/tests/Big_Oneways/client.cpp:
        * TAO/tests/Big_Oneways/server.cpp:

        * TAO/tests/Big_Reply/client.cpp:
        * TAO/tests/Big_Reply/server.cpp:

        * TAO/tests/Big_Request_Muxing/client.cpp:
        * TAO/tests/Big_Request_Muxing/server.cpp:

        * TAO/tests/Big_Twoways/Big_Twoways.mpc:
        * TAO/tests/Big_Twoways/client.cpp:
        * TAO/tests/Big_Twoways/server.cpp:

        * TAO/tests/Blocking_Sync_None/client.cpp:
        * TAO/tests/Blocking_Sync_None/server.cpp:

        * TAO/tests/Bug_1020_Basic_Regression/client.cpp:
        * TAO/tests/Bug_1020_Basic_Regression/server.cpp:

        * TAO/tests/Bug_1020_Regression/Bug_1020_Regression.mpc:
        * TAO/tests/Bug_1020_Regression/client.cpp:
        * TAO/tests/Bug_1020_Regression/server.cpp:

        * TAO/tests/Bug_1269_Regression/client.cpp:
        * TAO/tests/Bug_1269_Regression/server.cpp:
        * TAO/tests/Bug_1269_Regression/shutdown.cpp:

        * TAO/tests/Bug_1270_Regression/Bug_1270_Regression.mpc:
        * TAO/tests/Bug_1270_Regression/client.cpp:
        * TAO/tests/Bug_1270_Regression/server.cpp:
        * TAO/tests/Bug_1270_Regression/shutdown.cpp:

        * TAO/tests/Bug_1330_Regression/client.cpp:
        * TAO/tests/Bug_1330_Regression/server.cpp:

        * TAO/tests/Bug_1361_Regression/Bug_1361_Regression.mpc:
        * TAO/tests/Bug_1361_Regression/client.cpp:
        * TAO/tests/Bug_1361_Regression/server.cpp:
        * TAO/tests/Bug_1361_Regression/shutdown.cpp:

        * TAO/tests/Bug_1476_Regression/client.cpp:
        * TAO/tests/Bug_1476_Regression/server.cpp:

        * TAO/tests/Bug_1482_Regression/client.cpp:
        * TAO/tests/Bug_1482_Regression/server.cpp:

        * TAO/tests/Bug_1495_Regression/Server_Task.cpp:
        * TAO/tests/Bug_1495_Regression/Threaded_Client.cpp:
        * TAO/tests/Bug_1495_Regression/Threaded_Server.cpp:

        * TAO/tests/Bug_1535_Regression/bug_1535_regression.cpp:

        * TAO/tests/Bug_1551_Regression/client.cpp:
        * TAO/tests/Bug_1551_Regression/server.cpp:

        * TAO/tests/Bug_1568_Regression/client.cpp:
        * TAO/tests/Bug_1568_Regression/server.cpp:

        * TAO/tests/Bug_1627_Regression/client.cpp:
        * TAO/tests/Bug_1627_Regression/server.cpp:

        * TAO/tests/Bug_1635_Regression/client.cpp:

        * TAO/tests/Bug_1636_Regression/client.cpp:

        * TAO/tests/Bug_1639_Regression/struct_client.cpp:

        * TAO/tests/Bug_1670_Regression/client.cpp:
        * TAO/tests/Bug_1670_Regression/server.cpp:

        * TAO/tests/Bug_1693_Test/client.cpp:

        * TAO/tests/Bug_1812_Regression/test.cpp:

        * TAO/tests/Bug_1813_Regression/test.cpp:

        * TAO/tests/Bug_2122_Regression/test.cpp:

        * TAO/tests/Bug_2124_Regression/test.cpp:

        * TAO/tests/Bug_2126_Regression/test.cpp:

        * TAO/tests/Bug_2144_Regression/test.cpp:

        * TAO/tests/Bug_2174_Regression/client.cpp:
        * TAO/tests/Bug_2174_Regression/server.cpp:

        * TAO/tests/Bug_2183_Regression/client.cpp:
        * TAO/tests/Bug_2183_Regression/server.cpp:

        * TAO/tests/Bug_2222_Regression/test.cpp:

        * TAO/tests/Bug_2234_Regression/client.cpp:
        * TAO/tests/Bug_2234_Regression/server.cpp:

        * TAO/tests/CDR/alignment.cpp:
        * TAO/tests/CDR/allocator.cpp:
        * TAO/tests/CDR/basic_types.cpp:
        * TAO/tests/CDR/growth.cpp:
        * TAO/tests/CDR/octet_sequence.cpp:
        * TAO/tests/CDR/tc.cpp:

        * TAO/tests/Cache_Growth_Test/client.cpp:
        * TAO/tests/Cache_Growth_Test/server.cpp:

        * TAO/tests/CallbackTest/client.cpp:
        * TAO/tests/CallbackTest/server.cpp:

        * TAO/tests/Client_Leaks/Process_Factory.cpp:
        * TAO/tests/Client_Leaks/child.cpp:
        * TAO/tests/Client_Leaks/client.cpp:
        * TAO/tests/Client_Leaks/server.cpp:

        * TAO/tests/CodeSets/simple/client.cpp:
        * TAO/tests/CodeSets/simple/server.cpp:

        * TAO/tests/Codec/client.cpp:

        * TAO/tests/Collocation/Collocation.cpp:

        * TAO/tests/Collocation_Exception_Test/Collocated_Test.cpp:
        * TAO/tests/Collocation_Exception_Test/Server_Task.cpp:

        * TAO/tests/Collocation_Oneway_Tests/Collocated_Test.cpp:
        * TAO/tests/Collocation_Oneway_Tests/Server_Task.cpp:

        * TAO/tests/Collocation_Opportunities/Collocation_Opportunities.cpp:

        * TAO/tests/Collocation_Tests/Collocated_Test.cpp:
        * TAO/tests/Collocation_Tests/Server_Task.cpp:

        * TAO/tests/Connect_Strategy_Test/client.cpp:
        * TAO/tests/Connect_Strategy_Test/server.cpp:

        * TAO/tests/Connection_Failure/client.cpp:

        * TAO/tests/Connection_Purging/client.cpp:
        * TAO/tests/Connection_Purging/server.cpp:

        * TAO/tests/Connection_Timeout/client.cpp:

        * TAO/tests/Crash_On_Write/client.cpp:
        * TAO/tests/Crash_On_Write/server.cpp:

        * TAO/tests/Crashed_Callback/client.cpp:
        * TAO/tests/Crashed_Callback/server.cpp:

        * TAO/tests/DLL_ORB/DLL_ORB.mpc:
        * TAO/tests/DLL_ORB/Test_Client_Module.h:
        * TAO/tests/DLL_ORB/Test_Client_Module.cpp:
        * TAO/tests/DLL_ORB/Test_Server_Module.h:
        * TAO/tests/DLL_ORB/Test_Server_Module.cpp:
        * TAO/tests/DLL_ORB/client.cpp:
        * TAO/tests/DLL_ORB/server.cpp:

        * TAO/tests/DSI_Gateway/DSI_Gateway.mpc:
        * TAO/tests/DSI_Gateway/client.cpp:
        * TAO/tests/DSI_Gateway/gateway.cpp:
        * TAO/tests/DSI_Gateway/server.cpp:

        * TAO/tests/DynAny_Test/driver.cpp:
        * TAO/tests/DynAny_Test/test_dynsequence.cpp:
        * TAO/tests/DynAny_Test/test_dynstruct.cpp:

        * TAO/tests/Explicit_Event_Loop/client.cpp:
        * TAO/tests/Explicit_Event_Loop/server.cpp:

        * TAO/tests/Exposed_Policies/Exposed_Policies.mpc:
        * TAO/tests/Exposed_Policies/Policy_Tester.cpp:
        * TAO/tests/Exposed_Policies/Policy_Verifier.cpp:
        * TAO/tests/Exposed_Policies/RT_Properties.cpp:
        * TAO/tests/Exposed_Policies/client.cpp:
        * TAO/tests/Exposed_Policies/server.cpp:

        * TAO/tests/FL_Cube/client.cpp:
        * TAO/tests/FL_Cube/server.cpp:

        * TAO/tests/Faults/Faults.mpc:
        * TAO/tests/Faults/client.cpp:
        * TAO/tests/Faults/middle.cpp:
        * TAO/tests/Faults/ping.cpp:
        * TAO/tests/Faults/pong.cpp:
        * TAO/tests/Faults/server.cpp:

        * TAO/tests/File_IO/client.cpp:
        * TAO/tests/File_IO/server.cpp:

        * TAO/tests/Forwarding/client.cpp:
        * TAO/tests/Forwarding/server.cpp:

        * TAO/tests/GIOP_Fragments/Java_Big_Reply/client.cpp:

        * TAO/tests/GIOP_Fragments/Java_Big_Request/server.cpp:

        * TAO/tests/GIOP_Fragments/PMB_With_Fragments/server.cpp:

        * TAO/tests/Hang_Shutdown/client.cpp:
        * TAO/tests/Hang_Shutdown/server.cpp:

        * TAO/tests/Hello/client.cpp:
        * TAO/tests/Hello/server.cpp:

        * TAO/tests/ICMG_Any_Bug/client.cpp:
        * TAO/tests/ICMG_Any_Bug/server.cpp:

        * TAO/tests/IDL_Test/main.cpp:

        * TAO/tests/IORManipulation/IORTest.cpp:

        * TAO/tests/IOR_Endpoint_Hostnames/generate_ior.cpp:
        * TAO/tests/IOR_Endpoint_Hostnames/list_interfaces.cpp:

        * TAO/tests/IPV6/client.cpp:
        * TAO/tests/IPV6/server.cpp:

        * TAO/tests/InterOp-Naming/INS_test_client.cpp:
        * TAO/tests/InterOp-Naming/INS_test_server.cpp:
        * TAO/tests/InterOp-Naming/Server_i.h:
        * TAO/tests/InterOp-Naming/Server_i.cpp:

        * TAO/tests/Leader_Followers/client.cpp:
        * TAO/tests/Leader_Followers/server.cpp:

        * TAO/tests/LongUpcalls/LongUpcalls.mpc:
        * TAO/tests/LongUpcalls/ami_client.cpp:
        * TAO/tests/LongUpcalls/ami_server.cpp:
        * TAO/tests/LongUpcalls/blocking_client.cpp:
        * TAO/tests/LongUpcalls/blocking_server.cpp:

        * TAO/tests/MProfile/client.cpp:
        * TAO/tests/MProfile/server.cpp:

        * TAO/tests/MProfile_Connection_Timeout/client.cpp:
        * TAO/tests/MProfile_Connection_Timeout/server.cpp:

        * TAO/tests/MProfile_Forwarding/Manager.cpp:
        * TAO/tests/MProfile_Forwarding/client.cpp:
        * TAO/tests/MProfile_Forwarding/server.cpp:

        * TAO/tests/MT_BiDir/MT_BiDir.mpc:
        * TAO/tests/MT_BiDir/client.cpp:
        * TAO/tests/MT_BiDir/server.cpp:

        * TAO/tests/MT_Client/client.cpp:
        * TAO/tests/MT_Client/orb_creation.cpp:
        * TAO/tests/MT_Client/server.cpp:

        * TAO/tests/MT_Server/client.cpp:
        * TAO/tests/MT_Server/server.cpp:

        * TAO/tests/MT_Timeout/MT_Timeout.mpc:
        * TAO/tests/MT_Timeout/client.cpp:
        * TAO/tests/MT_Timeout/server.cpp:

        * TAO/tests/Multiple/Multiple.mpc:
        * TAO/tests/Multiple/client.cpp:
        * TAO/tests/Multiple/server.cpp:

        * TAO/tests/Multiple_Inheritance/client.cpp:
        * TAO/tests/Multiple_Inheritance/server.cpp:

        * TAO/tests/Muxed_GIOP_Versions/client.cpp:
        * TAO/tests/Muxed_GIOP_Versions/server.cpp:

        * TAO/tests/Muxing/client.cpp:
        * TAO/tests/Muxing/server.cpp:

        * TAO/tests/Native_Exceptions/client.cpp:
        * TAO/tests/Native_Exceptions/server.cpp:

        * TAO/tests/NestedUpcall/MT_Client_Test/MT_Client_Test.mpc:
        * TAO/tests/NestedUpcall/MT_Client_Test/client.h:
        * TAO/tests/NestedUpcall/MT_Client_Test/client.cpp:
        * TAO/tests/NestedUpcall/MT_Client_Test/local_server.h:
        * TAO/tests/NestedUpcall/MT_Client_Test/local_server.cpp:
        * TAO/tests/NestedUpcall/MT_Client_Test/server.h:
        * TAO/tests/NestedUpcall/MT_Client_Test/server.cpp:

        * TAO/tests/NestedUpcall/Simple/Simple.mpc:
        * TAO/tests/NestedUpcall/Simple/client.cpp:
        * TAO/tests/NestedUpcall/Simple/server.cpp:
        * TAO/tests/NestedUpcall/Simple/simple-client.cpp:

        * TAO/tests/NestedUpcall/Triangle_Test/TT.mpc:
        * TAO/tests/NestedUpcall/Triangle_Test/initiator.h:
        * TAO/tests/NestedUpcall/Triangle_Test/initiator.cpp:
        * TAO/tests/NestedUpcall/Triangle_Test/server_A.h:
        * TAO/tests/NestedUpcall/Triangle_Test/server_A.cpp:
        * TAO/tests/NestedUpcall/Triangle_Test/server_B.h:
        * TAO/tests/NestedUpcall/Triangle_Test/server_B.cpp:

        * TAO/tests/Nested_Event_Loop/Nested_Event_Loop.mpc:
        * TAO/tests/Nested_Event_Loop/client.cpp:
        * TAO/tests/Nested_Event_Loop/server.cpp:

        * TAO/tests/Nested_Upcall_Crash/client.cpp:
        * TAO/tests/Nested_Upcall_Crash/scavenger.cpp:
        * TAO/tests/Nested_Upcall_Crash/server.cpp:

        * TAO/tests/No_Server_MT_Connect_Test/client.cpp:
        * TAO/tests/No_Server_MT_Connect_Test/server.cpp:

        * TAO/tests/OBV/Any/OBV_Any.mpc:
        * TAO/tests/OBV/Any/client.cpp:
        * TAO/tests/OBV/Any/server.cpp:

        * TAO/tests/OBV/Collocated/Forward/Collocated_Test.cpp:
        * TAO/tests/OBV/Collocated/Forward/Server_Task.cpp:

        * TAO/tests/OBV/Factory/client.cpp:
        * TAO/tests/OBV/Factory/server.cpp:

        * TAO/tests/OBV/Forward/client.cpp:
        * TAO/tests/OBV/Forward/server.cpp:

        * TAO/tests/OBV/Supports/Supports_Test_impl.h:
        * TAO/tests/OBV/Supports/client.cpp:
        * TAO/tests/OBV/Supports/server.cpp:

        * TAO/tests/OBV/TC_Alignment/client.cpp:
        * TAO/tests/OBV/TC_Alignment/server.cpp:

        * TAO/tests/OBV/ValueBox/client.cpp:
        * TAO/tests/OBV/ValueBox/server.cpp:

        * TAO/tests/ORB_destroy/ORB_destroy.cpp:

        * TAO/tests/ORB_init/ORB_init.cpp:

        * TAO/tests/ORB_init/Portspan/server.cpp:

        * TAO/tests/ORB_shutdown/server.cpp:

        * TAO/tests/ORT/ServerRequestInterceptor.cpp:
        * TAO/tests/ORT/client.cpp:
        * TAO/tests/ORT/server.cpp:

        * TAO/tests/Object_Loader/Loader.h:
        * TAO/tests/Object_Loader/Loader.cpp:
        * TAO/tests/Object_Loader/Object_Loader.mpc:
        * TAO/tests/Object_Loader/driver.cpp:

        * TAO/tests/Objref_Sequence_Test/client.cpp:
        * TAO/tests/Objref_Sequence_Test/server.cpp:

        * TAO/tests/OctetSeq/OctetSeq.cpp:
        * TAO/tests/OctetSeq/client.cpp:
        * TAO/tests/OctetSeq/server.cpp:

        * TAO/tests/Oneway_Buffering/Oneway_Buffering.mpc:
        * TAO/tests/Oneway_Buffering/admin.cpp:
        * TAO/tests/Oneway_Buffering/client.cpp:
        * TAO/tests/Oneway_Buffering/server.cpp:

        * TAO/tests/Oneways_Invoking_Twoways/Oneways_Invoking_Twoways.mpc:
        * TAO/tests/Oneways_Invoking_Twoways/client.cpp:
        * TAO/tests/Oneways_Invoking_Twoways/server.cpp:

        * TAO/tests/POA/Current/Current.cpp:

        * TAO/tests/POA/Deactivate_Object/server.cpp:

        * TAO/tests/POA/Default_Servant/Default_Servant.cpp:

        * TAO/tests/POA/Etherealization/Etherealization.cpp:

        * TAO/tests/POA/Excessive_Object_Deactivations/Excessive_Object_Deactivations.mpc:
        * TAO/tests/POA/Excessive_Object_Deactivations/Excessive_Object_Deactivations.cpp:

        * TAO/tests/POA/Identity/Identity.cpp:

        * TAO/tests/POA/MT_Servant_Locator/MT_Servant_Locator.cpp:
        * TAO/tests/POA/MT_Servant_Locator/MT_Servant_Locator.mpc:

        * TAO/tests/POA/Nested_Non_Servant_Upcalls/Nested_Non_Servant_Upcalls.cpp:
        * TAO/tests/POA/Nested_Non_Servant_Upcalls/Nested_Non_Servant_Upcalls.mpc:

        * TAO/tests/POA/Non_Servant_Upcalls/Non_Servant_Upcalls.cpp:
        * TAO/tests/POA/Non_Servant_Upcalls/Non_Servant_Upcalls.mpc:

        * TAO/tests/POA/Object_Reactivation/Object_Reactivation.cpp:
        * TAO/tests/POA/Object_Reactivation/Object_Reactivation.mpc:

        * TAO/tests/POA/POA_Destruction/POA_Destruction.cpp:
        * TAO/tests/POA/POA_Destruction/POA_Destruction.mpc:

        * TAO/tests/POA/Persistent_ID/client.cpp:
        * TAO/tests/POA/Persistent_ID/server.cpp:

        * TAO/tests/POA/Policies/Policies.cpp:
        * TAO/tests/POA/Policies/Policies.mpc:

        * TAO/tests/POA/Reference_Counting/test.cpp:

        * TAO/tests/POA/Single_Threaded_POA/Single_Threaded_POA.mpc:
        * TAO/tests/POA/Single_Threaded_POA/Single_Threaded_POA.cpp:

        * TAO/tests/POA/wait_for_completion/wait_for_completion.cpp:

        * TAO/tests/Param_Test/anyop.cpp:
        * TAO/tests/Param_Test/bd_str_seq.cpp:
        * TAO/tests/Param_Test/complex_any.cpp:
        * TAO/tests/Param_Test/driver.cpp:
        * TAO/tests/Param_Test/helper.cpp:
        * TAO/tests/Param_Test/nested_struct.cpp:
        * TAO/tests/Param_Test/objref_struct.cpp:
        * TAO/tests/Param_Test/options.cpp:
        * TAO/tests/Param_Test/param_test_i.cpp:
        * TAO/tests/Param_Test/server.cpp:
        * TAO/tests/Param_Test/ub_str_seq.cpp:
        * TAO/tests/Param_Test/ub_wstring.cpp:
        * TAO/tests/Param_Test/var_struct.cpp:

        * TAO/tests/Policies/Manipulation.cpp:

        * TAO/tests/Portable_Interceptors/AMI/client.cpp:
        * TAO/tests/Portable_Interceptors/AMI/server.cpp:

        * TAO/tests/Portable_Interceptors/AdvSlot/server.cpp:

        * TAO/tests/Portable_Interceptors/AdvSlotDblCpy/server.cpp:

        * TAO/tests/Portable_Interceptors/AdvSlotExt/server.cpp:

        * TAO/tests/Portable_Interceptors/Benchmark/Interceptor_Type.cpp:
        * TAO/tests/Portable_Interceptors/Benchmark/client.cpp:
        * TAO/tests/Portable_Interceptors/Benchmark/marker.cpp:
        * TAO/tests/Portable_Interceptors/Benchmark/server.cpp:

        * TAO/tests/Portable_Interceptors/Bug_1559/client.cpp:
        * TAO/tests/Portable_Interceptors/Bug_1559/server.cpp:

        * TAO/tests/Portable_Interceptors/Bug_2088/client.cpp:

        * TAO/tests/Portable_Interceptors/Collocated/Dynamic/Collocated_Test.cpp:
        * TAO/tests/Portable_Interceptors/Collocated/Dynamic/Server_Task.cpp:

        * TAO/tests/Portable_Interceptors/Collocated/Service_Context_Manipulation/Collocated_Test.cpp:
        * TAO/tests/Portable_Interceptors/Collocated/Service_Context_Manipulation/Server_Task.cpp:

        * TAO/tests/Portable_Interceptors/Dynamic/client.cpp:
        * TAO/tests/Portable_Interceptors/Dynamic/server.cpp:

        * TAO/tests/Portable_Interceptors/ForwardRequest/Client_ORBInitializer.cpp:
        * TAO/tests/Portable_Interceptors/ForwardRequest/client.cpp:
        * TAO/tests/Portable_Interceptors/ForwardRequest/server.cpp:

        * TAO/tests/Portable_Interceptors/IORInterceptor/client.cpp:
        * TAO/tests/Portable_Interceptors/IORInterceptor/server.cpp:

        * TAO/tests/Portable_Interceptors/ORB_Shutdown/client.cpp:
        * TAO/tests/Portable_Interceptors/ORB_Shutdown/server.cpp:

        * TAO/tests/Portable_Interceptors/PICurrent/client.cpp:
        * TAO/tests/Portable_Interceptors/PICurrent/server.cpp:

        * TAO/tests/Portable_Interceptors/PolicyFactory/server.cpp:

        * TAO/tests/Portable_Interceptors/Recursive_ORBInitializer/client.cpp:

        * TAO/tests/Portable_Interceptors/Register_Initial_References/server.cpp:

        * TAO/tests/Portable_Interceptors/Request_Interceptor_Flow/client.cpp:
        * TAO/tests/Portable_Interceptors/Request_Interceptor_Flow/server.cpp:

        * TAO/tests/Portable_Interceptors/Service_Context_Manipulation/client.cpp:
        * TAO/tests/Portable_Interceptors/Service_Context_Manipulation/server.cpp:

        * TAO/tests/QtTests/client.h:
        * TAO/tests/QtTests/client.cpp:
        * TAO/tests/QtTests/server.cpp:

        * TAO/tests/Queued_Message_Test/Queued_Message_Test.cpp:

        * TAO/tests/RTCORBA/Activate_Object_Multiple_ORBs/test.cpp:

        * TAO/tests/RTCORBA/Banded_Connections/RTCORBA_Banded_Conn.mpc:
        * TAO/tests/RTCORBA/Banded_Connections/client.cpp:
        * TAO/tests/RTCORBA/Banded_Connections/server.cpp:

        * TAO/tests/RTCORBA/Client_Propagated/RTCORBA_Client_Propagated.mpc:
        * TAO/tests/RTCORBA/Client_Propagated/client.cpp:
        * TAO/tests/RTCORBA/Client_Propagated/server.cpp:

        * TAO/tests/RTCORBA/Client_Protocol/RTCORBA_Client_Protocol.mpc:
        * TAO/tests/RTCORBA/Client_Protocol/client.cpp:
        * TAO/tests/RTCORBA/Client_Protocol/server.cpp:

        * TAO/tests/RTCORBA/Collocation/Collocation.cpp:
        * TAO/tests/RTCORBA/Collocation/RTCORBA_Collocation.mpc:

        * TAO/tests/RTCORBA/Destroy_Thread_Pool/Destroy_Thread_Pool.cpp:
        * TAO/tests/RTCORBA/Destroy_Thread_Pool/RTCORBA_Destroy_Thread_Pool.mpc:

        * TAO/tests/RTCORBA/Diffserv/RTCORBA_Diffserv.mpc:
        * TAO/tests/RTCORBA/Diffserv/client.cpp:
        * TAO/tests/RTCORBA/Diffserv/server.cpp:

        * TAO/tests/RTCORBA/Dynamic_Thread_Pool/RT_Dynamic_Thread_Pool.mpc:

        * TAO/tests/RTCORBA/Explicit_Binding/RTCORBA_Explicit_Binding.mpc:
        * TAO/tests/RTCORBA/Explicit_Binding/client.cpp:
        * TAO/tests/RTCORBA/Explicit_Binding/server.cpp:

        * TAO/tests/RTCORBA/Linear_Priority/RTCORBA_Linear_Priority.mpc:
        * TAO/tests/RTCORBA/Linear_Priority/client.cpp:
        * TAO/tests/RTCORBA/Linear_Priority/server.cpp:

        * TAO/tests/RTCORBA/MT_Client_Protocol_Priority/RTCORBA_MT_Client_Proto_Prio.mpc:
        * TAO/tests/RTCORBA/MT_Client_Protocol_Priority/client.cpp:
        * TAO/tests/RTCORBA/MT_Client_Protocol_Priority/server.cpp:

        * TAO/tests/RTCORBA/ORB_init/ORB_init.cpp:

        * TAO/tests/RTCORBA/Persistent_IOR/RTCORBA_Persistent_IOR.mpc:
        * TAO/tests/RTCORBA/Persistent_IOR/client.cpp:
        * TAO/tests/RTCORBA/Persistent_IOR/server.cpp:

        * TAO/tests/RTCORBA/Policies/Policies.cpp:
        * TAO/tests/RTCORBA/Policies/Policies.mpc:

        * TAO/tests/RTCORBA/Policy_Combinations/RTCORBA_Policy_Combinations.mpc:
        * TAO/tests/RTCORBA/Policy_Combinations/client.cpp:
        * TAO/tests/RTCORBA/Policy_Combinations/server.cpp:

        * TAO/tests/RTCORBA/Priority_Inversion_With_Bands/Priority_Inversion_With_Bands.mpc:
        * TAO/tests/RTCORBA/Priority_Inversion_With_Bands/client.cpp:
        * TAO/tests/RTCORBA/Priority_Inversion_With_Bands/server.cpp:

        * TAO/tests/RTCORBA/Private_Connection/RTCORBA_Private_Connection.mpc:
        * TAO/tests/RTCORBA/Private_Connection/client.cpp:
        * TAO/tests/RTCORBA/Private_Connection/server.cpp:

        * TAO/tests/RTCORBA/Profile_And_Endpoint_Selection/PaE_Selection.mpc:
        * TAO/tests/RTCORBA/Profile_And_Endpoint_Selection/client.cpp:
        * TAO/tests/RTCORBA/Profile_And_Endpoint_Selection/server.cpp:

        * TAO/tests/RTCORBA/RTMutex/RTCORBA_RTMutex.mpc:
        * TAO/tests/RTCORBA/RTMutex/server.cpp:

        * TAO/tests/RTCORBA/Server_Declared/RTCORBA_Server_Declared.mpc:
        * TAO/tests/RTCORBA/Server_Declared/client.cpp:
        * TAO/tests/RTCORBA/Server_Declared/server.cpp:

        * TAO/tests/RTCORBA/Server_Protocol/RTCORBA_Server_Protocol.mpc:
        * TAO/tests/RTCORBA/Server_Protocol/client.cpp:
        * TAO/tests/RTCORBA/Server_Protocol/server.cpp:

        * TAO/tests/RTCORBA/Thread_Pool/RTCORBA_Thread_Pool.mpc:
        * TAO/tests/RTCORBA/Thread_Pool/client.cpp:
        * TAO/tests/RTCORBA/Thread_Pool/server.cpp:

        * TAO/tests/RTCORBA/common_args.cpp:

        * TAO/tests/RTScheduling/Current/test.cpp:

        * TAO/tests/RTScheduling/DT_Spawn/Thread_Action.h:
        * TAO/tests/RTScheduling/DT_Spawn/test.cpp:

        * TAO/tests/RTScheduling/Scheduler.cpp:

        * TAO/tests/RTScheduling/Scheduling_Interceptor/test_client.cpp:
        * TAO/tests/RTScheduling/Scheduling_Interceptor/test_server.cpp:

        * TAO/tests/RTScheduling/Thread_Cancel/test.cpp:

        * TAO/tests/RTScheduling/VoidData/test_client.cpp:

        * TAO/tests/Reliable_Oneways/Reliable_Oneways.mpc:
        * TAO/tests/Reliable_Oneways/client.cpp:
        * TAO/tests/Reliable_Oneways/server.cpp:

        * TAO/tests/Sequence_Unit_Tests/Bounded_Simple_Types.cpp:
        * TAO/tests/Sequence_Unit_Tests/Bounded_String.cpp:
        * TAO/tests/Sequence_Unit_Tests/Unbounded_Simple_Types.cpp:

        * TAO/tests/Servant_To_Reference_Test/Servant_to_Reference.mpc:
        * TAO/tests/Servant_To_Reference_Test/server.cpp:

        * TAO/tests/Server_Connection_Purging/client.cpp:
        * TAO/tests/Server_Connection_Purging/server.cpp:

        * TAO/tests/Server_Leaks/client.cpp:
        * TAO/tests/Server_Leaks/server.cpp:

        * TAO/tests/Server_Port_Zero/server.cpp:

        * TAO/tests/Single_Read/client.cpp:
        * TAO/tests/Single_Read/server.cpp:

        * TAO/tests/Smart_Proxies/Benchmark/client.cpp:
        * TAO/tests/Smart_Proxies/Benchmark/server.cpp:

        * TAO/tests/Smart_Proxies/Collocation/main.cpp:

        * TAO/tests/Smart_Proxies/On_Demand/client.cpp:
        * TAO/tests/Smart_Proxies/On_Demand/server.cpp:

        * TAO/tests/Smart_Proxies/Policy/client.cpp:
        * TAO/tests/Smart_Proxies/Policy/server.cpp:

        * TAO/tests/Smart_Proxies/client.cpp:

        * TAO/tests/Smart_Proxies/dtor/client.cpp:
        * TAO/tests/Smart_Proxies/dtor/server.cpp:

        * TAO/tests/Smart_Proxies/server.cpp:

        * TAO/tests/Stack_Recursion/client.cpp:
        * TAO/tests/Stack_Recursion/server.cpp:

        * TAO/tests/Strategies/client.cpp:
        * TAO/tests/Strategies/server.cpp:

        * TAO/tests/Timed_Buffered_Oneways/Timed_Buffered_Oneways.mpc:
        * TAO/tests/Timed_Buffered_Oneways/client.cpp:
        * TAO/tests/Timed_Buffered_Oneways/server.cpp:

        * TAO/tests/Timeout/client.cpp:
        * TAO/tests/Timeout/server.cpp:

        * TAO/tests/Two_Objects/client.cpp:
        * TAO/tests/Two_Objects/server.cpp:

        * TAO/tests/Typedef_String_Array/client.cpp:
        * TAO/tests/Typedef_String_Array/server.cpp:

        * TAO/tests/UNKNOWN_Exception/client.cpp:
        * TAO/tests/UNKNOWN_Exception/server.cpp:

        * TAO/tests/Xt_Stopwatch/Client.h:
        * TAO/tests/Xt_Stopwatch/client.cpp:
        * TAO/tests/Xt_Stopwatch/server.cpp:

        * TAO/utils/NamingViewer/BindDialog.cpp:
        * TAO/utils/NamingViewer/BindNewContext.cpp:
        * TAO/utils/NamingViewer/NamingTreeCtrl.cpp:
        * TAO/utils/NamingViewer/NamingViewer.cpp:
        * TAO/utils/NamingViewer/NamingViewerDlg.cpp:
        * TAO/utils/NamingViewer/ViewIORDialog.cpp:

        * TAO/utils/catior/catior.cpp:

        * TAO/utils/nslist/nsadd.cpp:
        * TAO/utils/nslist/nsdel.cpp:
        * TAO/utils/nslist/nslist.cpp:

          Apply the new wchar macros.
          Remove ACE_HAS_WCHAR usage. wchar_t will always get defined.
          Using template ACE_Get_Arg_Opt.
          Replaced main() with ACE_TMAIN().
          Using ACE_Argv_Type_Converter to match argv type to varying API.

Mon May  8 15:52:31 UTC 2006  Jeff Parsons <j.parsons@vanderbilt.edu>

        * TAO_IDL/be_visitor_union_branch/cdr_op_cs.cpp (visit_enum):

          Added code generation to initialize an enum member of a
          union when it is declared for demarshaling. This change
          eliminates warnings in gcc 4.0.2 and possibly other
          compilers.

Mon May  8 10:06:12 UTC 2006  Martin Corino  <mcorino@remedy.nl>

        * docs/Options.html:
        * docs/ORBEndpoint.html:
        * docs/INS.html:
          Added IPv6 specific info regarding endpoint and corbaloc
          definitions.
          Added some links for easier crossreferencing.

Mon May  8 09:22:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Hello/run_test.pl:
          Added support for a -debug commandline arugment, if this is
          passed when starting this script then -ORBDebugLevel 10 is
          passed to client and server.

Sun May  7 21:39:30 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bunch/Test.cpp:

          Removed a misplaced semicolon.

Sun May  7 14:56:20 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bunch/Test.cpp:

          Removed semicolons after if() - cleaning the residue from
          replacing the ACE_ASSERTs.

Sun May  7 06:59:54 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tao/ORB_Core.cpp:

          Replaced 'new' with ACE_NEW.

        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:
        * tests/ORB_Local_Config/Shared/Test.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/run_test.pl:
        * tests/ORB_Local_Config/lib/Service_Configuration_Per_ORB.h:

          Minor edits and cleanup.

Fri Apr 28 10:47:26 2006  Douglas C. Schmidt  <schmidt@cse.wustl.edu>

        * tao/Stub.cpp: Added a #include of "tao/CDR.h" to support SunC++.
          Thanks to Vladimir Panov <gbr at voidland dot org> for reporting
          this.

Fri Apr 14 17:47:18 2006  Douglas C. Schmidt  <schmidt@cse.wustl.edu>

        * docs/releasenotes/index.html: Updated the documentation to
          include more pluggable protocols.  Thanks to Willie Chen
          <wchen12 at ucla dot edu> for motivating this.

Fri May  5 18:48:45 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/TAO_Internal.cpp:
        * tao/default_resource.cpp:
          In addtion to the reorganization Iliyan did, it was discovered
          that the codeset library was not getting properly
          initialized. When the codeset negotiation feature was made
          optional for footprint considerations, the loading of the
          codeset library was put into the default Resource
          Factory. However now that we have the potential for multiple
          service repositories, it was no longer sufficient do such late
          initialization of the codeset library. Doing so put it codeset
          manager and default translators in the configuration context of
          the first ORB, not in the global configuration context. Moving
          the bootstrap loading of the Codeset library to TAO internals
          resolves that. The -ORBNegotiateCodeset flag is still evaluated
          making codeset loading optional. It will be loaded to the global
          configuration context by the first ORB that needs it.

Fri May  5 18:05:04 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bug_1459/Test.cpp:
        * tests/ORB_Local_Config/Bunch/Test.cpp:
        * tests/ORB_Local_Config/Limits/Test.cpp:
        * tests/ORB_Local_Config/Separation/Test.cpp:
        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:
        * tests/ORB_Local_Config/Shared/Test.cpp:
        * tests/ORB_Local_Config/Simple/Test.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/Test.cpp:

          Eliminating the use of ACE_ASSERT and replacing with if's and
          ACE_ERROR. The ACE_ASSERT may cause an abort(), which will cause
          resources to not be cleaned correctly on embedded targets like
          VxWorks. Thanks to Johnny Willemsen <jwillemsen@remedy.nl> for
          clarifying this.

        * tests/ORB_Local_Config/lib/Service_Configuration_Per_ORB.h:

          A little cleanup.

Fri May  5 16:12:17 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tao/ORB_Core.cpp:
        * tao/TAO_Internal.cpp:

          The initialization of the additional services, which runs right
          after the global repository initialization (open()) was supposed
          to execute in the context of that same global repository. This
          is necessary in case the initialization causes additional
          services to be registered. Fixes a problem with
          $TAO_ROOT/tests/RTCORBA/ORB_init.

Fri May  5 11:26:42 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Asynch_Queued_Message.{h,cpp}:
        * tao/Synch_Queued_Message.{h,cpp}:
          Changed is_heap_allocated to a real bool so that it matches
          the base class.

        * tao/Unbounded_Octet_Sequence_T.h:
          Small const improvment

        * tao/GIOP_Message_Base.cpp:
          Fixed typo in comment

        * tao/DynamicInterface/Request.h:
          Removed commented out method

Thu May  4 16:22:42 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Two_DLL_ORB/ORB_DLL_Export.h:

          Regenerated the file to fix a problem with building the test in
          static builds.

Thu May  4 13:36:00 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:

          Eliminated a "magic" constant, used for the number of expected
          services, because it can vary dependent on the particular TAO
          configuration, like mincorba, static, etc.

Thu May  4 08:53:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/PI/ClientRequestInfo.cpp:
          Fixed bug 2510 in such a way that TAO doesn't crash but it seems
          we then miss some functionalify. The reporter will extend the test
          to detect the missing functionality. Thanks to Martin Cornelius
          <Martin dot Cornelius at smiths-heimann dot com>
          for reporting this bug and providing a regression test

Thu May  4 07:54:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/EndpointPolicy/Endpoint_Acceptor_Filter.cpp:
          Fixed warning in VxWorks 5.5.1 builds

Thu May  4 00:45:45 UTC 2006  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Removed EndpointPolicy/EndpointPolicyC.inl.

Wed May  3 21:26:07 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/TAO_Internal.cpp:
          The order of initialization of static services was modified as
          multi-orb configuration feature implementation. Somehow during
          that refactoring some services that are required to be initialized
          ended up having that done before the svc.conf file is processed.
          For instance RT_ORB_Loader. This change breaks up the loading of
          and initializing of these services to ensure that svc.conf always
          gets processed first before doing any default initialization.

Wed May  3 19:14:12 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Two_DLL_ORB/Two_DLL_ORB.mpc:

          Updated to resolve buld failures (vc71+Windows) - the two DLLs
          produced, now contain identical code. It determines at runtime,
          whether to act as a client or as a server - a decision
          influenced by a command-line option, in the service
          configuration file.

Wed May  3 18:32:29 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/POA/EndpointPolicy/run_test.pl:
          The test was failing on Windows because TAO apparently gets
          built with -ORBDottedDecimalAddresses defaulted to 1. The
          current version of the endpoint policy is very simple in that it
          uses literal string comparisons for determining the suitability
          of a given candidate profile endpoint. The test is specificly
          trying to match "localhost" but fails when the server
          substitutes "127.0.0.1" Perhaps an alternative solution would be
          to test both literal strings.

Wed May  3 16:54:41 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * TAO_IDL/be/be_visitor_sequence/serializer_op_cs.cpp:

          Fix an apparent typo introduced the previous commit.

Wed May  3 16:06:56 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bug_1459/Bug_1459.mpc:
        * tests/ORB_Local_Config/Bunch/Bunch.mpc:
        * tests/ORB_Local_Config/Limits/Limits.mpc:
        * tests/ORB_Local_Config/Separation/Separation.mpc:
        * tests/ORB_Local_Config/Service_Dependency/Service_Dependency.mpc:
        * tests/ORB_Local_Config/Shared/Shared.mpc:
        * tests/ORB_Local_Config/Simple/Simple.mpc:
        * tests/ORB_Local_Config/Two_DLL_ORB/Two_DLL_ORB.mpc:

          Removed the dependency on ACE test_output library to make it
          possible to build the TAO tests without having to build ACE
          tests. This is often the case on embedded platforms (VxWorks),
          where part of the tests run outside the host platform. Thanks to
          Johnny Willemsen for pointing that out.

        * tests/ORB_Local_Config/Bug_1459/Test.cpp:
        * tests/ORB_Local_Config/Bunch/Test.cpp:
        * tests/ORB_Local_Config/Limits/Test.cpp:
        * tests/ORB_Local_Config/Separation/Test.cpp:
        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:
        * tests/ORB_Local_Config/Shared/Test.cpp:
        * tests/ORB_Local_Config/Simple/Test.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/ORB_DLL.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/Test.cpp:

          Updated the code to use its own ACE_MAIN and fixed some typos.

Wed May  3 15:42:14 UTC 2006  Yan Dai  <dai_y@ociweb.com>

        * TAO_IDL/be/be_visitor_sequence/serializer_op_cs.cpp:

          Fixed the DDS compilation errors due to the recent
          unbounded string sequence implementation changes.

Wed May  3 13:03:03 UTC 2006  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Regenerated.

        * tao/tao.mpc:

          Fix yet another typo.

Wed May  3 09:56:10 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Portable_Interceptors/Bug_2510_Regression/client.cpp:
          At the end of the test shutdown the server

Wed May  3 03:35:10 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/LF_Multi_Event.h:
        * tao/LF_Multi_Event.cpp:
        * tao/PortableServer/POAManagerFactory.h:
        * tao/PortableServer/POAManagerFactory.cpp:
        * tao/PortableServer/POAManagerFactoryC.h:
          Adding in Versioned namespace macros.

Tue May  2 22:01:51 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/ORB_Local_Config/Two_DLL_ORB/Two_DLL_ORB.mpc:
          Added the portableserver base project to both the client lib and
          server lib projects, since both require client and server
          behavior. This is required for windows builds where apparently
          DLLs must have all symbols fully resolved at link time, unlike
          .so's where they only need to be satisfied at runtime.

Tue May  2 19:08:18 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Two_DLL_ORB/ORB_DLL.h:

        Changing auto_ptr to ACE_Auto_Ptr, because some platforms
        (WinXP64_Intel90_64bit) provide an auto_ptr<> without the reset
        method.

Tue May  2 15:30:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Sequence_Unit_Tests/bounded_sequence_cdr_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_sequence_cdr_ut.cpp:
          Added missing includes. Thanks to Carlos O'Ryan for
          reporting this

Tue May  2 13:24:26 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/tao.mpc:
          Reverted J.T.'s change from Mon May  1 20:03:59 UTC 2006
          to flush out the cvs conflict markers and reapplied just his
          typo fix.

Tue May  2 11:47:55 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Separation/Test.cpp:
        * tests/ORB_Local_Config/Shared/Test.cpp:
        * tests/ORB_Local_Config/Simple/Test.cpp:

          The test don't need more specialized type than the base
          ACE_Service_Object, in order to demonstrate the intent.

Tue May  2 08:05:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/driver/drv_preproc.cpp:
          When we can't remove the input or output file use %p to print
          the error so that the info from the OS why this couldn't be
          done is also reported to the user.

Tue May  2 03:59:17 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/IIOP_Connector.h:
        * tao/IIOP_Connector.cpp:
        * tao/Transport_Descriptor_Interface.h:
        * tao/Transport_Descriptor_Interface.cpp:

          This fix resolves a problem exposed by the
          performance-tests/RTCorba/Oneway/Reliable test. That failure was
          showing up as a pure virtual function call, but the root cause
          was related to the changes to the IIOP_Connector in how it
          cached new transports. I was creating a new transport descriptor
          out of the successful endpoint, but using creating a new
          Base_Transport_Descriptor rather than reusing the supplied
          transport descriptor. This broke RT tests in that subsequent
          invocations would fail to find the cached endpoint since the
          type was different. I've resolved that by adding the new
          reset_endpoint method on the Transport_Descriptor_Interface
          which allows the transport connector to set a new endpoint to
          the existing transport descriptor before caching the value.

Mon May  1 21:54:05 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bunch/Test.cpp:

          Modified the test not to require the ability to fully
          instantiate TAO_CORBANAME_Parser, etc. which is a class in
          another library and it is not declared so that it is "visible"
          outside of it. The test does not require that in order to be
          functional - using the base class ACE_Service_Object.

        * tests/ORB_Local_Config/Two_DLL_ORB/client.cpp:

          Added some more logging.

Mon May  1 20:03:59 UTC 2006  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Regenerated.

        * tao/tao.mpc:

          Fix typo.

Mon May  1 19:39:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/OBV/Simple/OBV_Simple.mpc:
          This test isn't dependent on minimum_corba

Mon May  1 18:55:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnyTypeCode/TypeCode.{h,cpp}:
          Made type TypeCode_ptr argument of operator << const so that
          the signature is the same as declared in DynamicA.h

Mon May  1 15:33:00 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/OBV/Truncatable/client.cpp:
          This is an improvement to what I committed earlier. Since the
          valuetypes are passed by value, it is perfectly reasonable to
          allocate them on the stack locally. That way I could get away
          from the use of the var to store a reference to the local value
          instance, and also avoid the awkward initialization code used to
          avoid the ambiguity BCB6 was complaining about.

        * tests/POA/POAManagerFactory/POAManagerFactory.cpp:
          Changed the name of an internal catch value. I'm not sure, but I
          suspect this is what was causing the BCB compiler to complain at
          the point of ACE_CATCHANY.

Mon May  1 12:04:17 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/OBV/Truncatable/client.cpp:
        * tests/POA/POAManagerFactory/POAManagerFactory.cpp:
          The Borland BCB6 compiler has trouble with var types and const
          vs. non-const assignment or comparisons. These changes are an
          attempt to address this trouble. I don't like the nature of
          these changes as they are moving away from the built-in type
          safety C++ is supposed to provide.

Mon May  1 03:43:57 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/Parallel_Connect_Strategy/run_test.pl:
          The fix for this test was to ensure the CORBALOC parser put all
          the listed endpoints into a single Profile.

Sun Apr 30 22:53:37 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/ORB_Core.cpp:
          Somehow when I applied my patch for the alternate connection
          timeout hook, used allow either or both the AMI connection
          timeout policy or the optimized connection endpoint selector to
          set the connection timeout hook, I managed to apply my change to
          the relative round trip timeout hook. This change addresses that
          and fixes the AMI_Timeout test.

Sun Apr 30 20:24:39 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bug_1459/Bug_1459.mpc:
        * tests/ORB_Local_Config/Bunch/Bunch.mpc:
        * tests/ORB_Local_Config/Limits/Limits.mpc:
        * tests/ORB_Local_Config/Separation/Separation.mpc:
        * tests/ORB_Local_Config/Service_Dependency/Service_Dependency.mpc:
        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:
        * tests/ORB_Local_Config/Shared/Shared.mpc:
        * tests/ORB_Local_Config/Simple/Simple.mpc:
        * tests/ORB_Local_Config/Two_DLL_ORB/Test.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/Two_DLL_ORB.mpc:
        * tests/ORB_Local_Config/lib/Service_Configuration_Per_ORB.h:

          Updated to simplify the tests and the build process

        * tests/ORB_Local_Config/lib/Service_Configuration_Per_ORB.cpp:
        * tests/ORB_Local_Config/lib/lib.mpc:

          Removed these files.

Sun Apr 30 15:36:21 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * examples/CSD_Strategy/ThreadPool4/ClientTask.cpp:
        * examples/CSD_Strategy/ThreadPool5/ClientTask.cpp:
          Fixed the assignment to the sequence to hand a buffer the
          sequence can properly release.

Sun Apr 30 14:24:20 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * TAO/tao/Profile_Transport_Resolver.cpp:
          Removed invalid semicolons.

        * TAO/tests/ORB_Local_Config/Two_DLL_ORB/Two_DLL_ORB.mpc:
          Fixed the dynamic flag for windows builds.

Sun Apr 30 04:54:25 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bug_1459/Test.cpp:

          Cleaned up the test a bit to clarify the intent.

Sun Apr 30 00:47:10 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/ORB_Local_Config/Bug_1459/Test.cpp:
          Undoing the damage caused by my too-hasty previous checkin.

        * examples/CSD_Strategy/ThreadPool4/ClientTask.cpp:
        * examples/CSD_Strategy/ThreadPool5/ClientTask.cpp:
          Addressing some more compiler warnings

Sat Apr 29 15:34:15 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/PortableServer/POAManagerFactory.cpp:

        * tests/ORB_Local_Config/Bug_1459/Test.cpp:

        * tests/ORB_Local_Config/Service_Dependency/Service_Config_Test.conf:
        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:

        * tests/ORB_Local_Config/Two_DLL_ORB/ORB_DLL.h:
        * tests/ORB_Local_Config/Two_DLL_ORB/ORB_DLL.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/client.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/server.cpp:

        * tests/ORT/ORT_test_IORInterceptor.cpp:

        * tests/POA/EndpointPolicy/server.cpp:

          Fixes for various build-specific errors/warnings.

Sat Apr 29 14:17:32 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bug_1459/Test.cpp:

          Removed references  to <iostream> and unreferenced variables.

Sat Apr 29 13:13:20 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/ORB_Local_Config/Bug_1459/Test.cpp:
        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:
          Fuzz cleanup.

Sat Apr 29 02:26:49 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/EndpointPolicy/EndpointPolicy_i.cpp:
          Removed the apparently redundant ACE_NESTED_CLASS macros.

Fri Apr 28 22:25:57 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bunch/Test.cpp:
        * tests/ORB_Local_Config/Limits/Test.cpp:
        * tests/ORB_Local_Config/Separation/Test.cpp:
        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:
        * tests/ORB_Local_Config/Shared/Test.cpp:
        * tests/ORB_Local_Config/Simple/Test.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/Test.cpp:

          Modified to eliminate warnings about unused variables on
          ACE_NDEBUG builds.

Fri Apr 28 22:04:50 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bug_1459/Bug_1459.mpc:
        * tests/ORB_Local_Config/Bug_1459/README:
        * tests/ORB_Local_Config/Bug_1459/Test.cpp:
        * tests/ORB_Local_Config/Bug_1459/a.conf:
        * tests/ORB_Local_Config/Bug_1459/b.conf:
        * tests/ORB_Local_Config/Bug_1459/m.conf:
        * tests/ORB_Local_Config/Bug_1459/m1.conf:
        * tests/ORB_Local_Config/Bug_1459/run_test.pl:
        * tests/ORB_Local_Config/Bug_1459/server_cert.pem:
        * tests/ORB_Local_Config/Bug_1459/server_key.pem:

          Added a test I borrowed from bugzilla 1459. It tests the ability
          to have two differently configured ORBs in the same process.

        * examples/Simple/time-date/Time_Date.cpp:

          Provided an ID for the ORB, initialized in a code that was
          loaded from the DLL. The ORB-specific Service Repo changes
          eliminated the need to make TAO_Singleton_Manager not register
          with the Object Manager, when initialized from a DLL.

Fri Apr 28 15:14:04 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bunch/Service_Config_Test.UTF-16.conf:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.UTF-16.conf.xml:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.WCHAR_T.conf:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.WCHAR_T.conf.xml:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.conf:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.conf.xml:

          Moved these files to Service_Dependency, which also received the
          code that uses these.

        * tests/ORB_Local_Config/Service_Dependency/Service_Config_Test.UTF-16.conf:
        * tests/ORB_Local_Config/Service_Dependency/Service_Config_Test.UTF-16.conf.xml:
        * tests/ORB_Local_Config/Service_Dependency/Service_Config_Test.WCHAR_T.conf:
        * tests/ORB_Local_Config/Service_Dependency/Service_Config_Test.WCHAR_T.conf.xml:
        * tests/ORB_Local_Config/Service_Dependency/Service_Config_Test.conf:
        * tests/ORB_Local_Config/Service_Dependency/Service_Config_Test.conf.xml:
        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:

          Moved here the config files from the Bunch test as it may be run
          in single threaded builds and the code that uses these config
          files requires multiple threads.

Fri Apr 28 14:51:20 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tao/TAO_Internal.cpp:

          Fixed an error, that prevented the initialization of static
          services during Service_Config::open, The override for the
          default argument (ignore_static_svcs = 1) was missed during the
          refactoring.

Fri Apr 28 13:46:43 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bunch/Test.cpp:
        * tests/ORB_Local_Config/Limits/Test.cpp:
        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:
        * tests/ORB_Local_Config/Shared/Test.cpp:
        * tests/ORB_Local_Config/Simple/Test.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/Test.cpp:

          Updated to shut up unused variable warnings on builds where
          ACE_NDEBUG has been defined.

Thu Apr 27 21:09:51 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Profile.cpp:
          Fix a problem that caused the endpoint selector to spin when
          using shared profiles and none of the endpoints were valid.

Thu Apr 27 15:03:08 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * tests/ORB_Local_Config/Bunch/Test.cpp:
        * tests/ORB_Local_Config/Limits/Test.cpp:
        * tests/ORB_Local_Config/Simple/Test.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/Test.cpp:

          Fixed fuzz issues (unmatched ACE_TRACE)

        * tests/ORB_Local_Config/Service_Dependency/Service_Config_DLL.cpp:
        * tests/ORB_Local_Config/Service_Dependency/Service_Dependency.mpc:

          Modified to change the DLL name to avoid name conflict with the
          one in ACE_ROOT/tests.

Thu Apr 27 14:20:02 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/IIOP_Endpoint.cpp:
          Fixed a recursion problem with the IPv6 endpoint selection.

        * tao/PortableServer/POAManagerFactory.cpp:
          Cleaned up compiler warnings.

Thu Apr 27 06:55:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/ORB_Local_Config/lib/lib.mpc:
          Added base project, this would at least get our builds running again

Thu Apr 27 03:46:34 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/EndpointPolicy/Endpoint_Acceptor_Filter.cpp:

          Found the trouble that was crashing the endpoint test. It was
          nothing wierd with the new sequence code, it was merely an
          incorrect index variable - i should have been j.

Thu Apr 27 03:05:31 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/params.cpp:

          One of my patches inadvertently flipped the sense of the
          share_profiles default from 0 to 1. However, I think that 1
          should be the default, since it generates more compact IORs. It
          has been that way for years in the OCI version of TAO, but I am
          keeping the default 0 here for tradition. This value is
          overridden by using -ORBUseSharedProfile [0|1] ORB_init option.

Thu Apr 27 02:58:23 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/EndpointPolicy/Endpoint_Value_Impl.cpp:
        * tao/EndpointPolicy/Endpoint_Value_Impl.h:

          Added a virtual destructor to this otherwise abstract base
          class.

Wed Apr 26 21:24:54 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

        * NEWS:

          Added an entry to the NEWS file.

Wed Apr 26 20:21:49 UTC 2006  Iliyan Jeliazkov  <iliyan@ociweb.com>

          The motivation for these changes was to enable support for
          ORB-local Service Objects. This for instance, makes it possible
          for differently configured ORBs to coexist within the same
          proces.

          In order to accomplish this, each orb (core) owns a "Gestalt",
          i.e. a service object repository instance. There is also a
          process-wide, or "global" gestalt, which is the default
          repository where service objects are registered. The latter
          retains the interface and behavioral compatibility with any
          existing code. As a consequence of this design choice, any
          un-named orb(s) will default to using the ubergestalt, which is
          consistent with the prior behavior.

        * tao/DLL_Parser.cpp:

          Fixed the parse_string() method to use the correct ORB gestalt
          when looking up a dynamic service object. That resolves a
          failure in TAO/tests/Object_Loader test.

        * tao/ORB.cpp:

          Relocated some aging comments about having first to instantiate
          the singleton manager to the correct place (ORB_init). Added a
          gestalt parameter to the call to open_services. Edited a few
          lines to fit within the standard length requirement.

        * tao/ORB_Core.h:
        * tao/ORB_Core.i:
        * tao/ORB_Core.cpp:

          Added a member and an accessors for the private service gestalt,
          owned by the core. Replaced the call to methods that use the
          implicit ubergestalt with ones that specify the gestalt to use
          for service objects.

          Added an ACE_Service_Config_Guard to make sure the ORB
          initialization uses the correct repository.

          Updated more references to process_directive() and instance() to
          use ACE_TCHAR.  Updated references to process_directive() to use
          ACE_TCHAR for consistency.

          Added #if !defined(TAO_AS_STATIC_LIBS)/#endif around code, which
          is only meaningful when TAO is _not_ statically compiled;
          Updated the service and DLL symbol names used to load the
          CodecFactory_Loader, PolicyFactory_Loader and
          TypeCodeFactory_Loader dynamic services, in the cases where
          those services are not statically linked and TAO supports
          dynamic linking. (Thanks Ossama, for pointing that out.)  Added
          code to try and explicitly load an IORInterceptor adapter and
          Concrete_IORInterceptor_Adapter_Factory, if TAO supports (is
          built with) dynamic linking;

          Updated the code that loads the IORTable adapter to be exception
          safe; Edited a few lines to fit within the standard length
          requirement.

        * tao/Parser_Registry.cpp:

          Updated to explicitly specify the correct gestalt for the ORB.

        * tao/TAO_Internal.h:
        * tao/TAO_Internal.cpp:

          Refactored the initialization code to separate process-wide
          aspects of initialization from those having to do with the ORB
          instance. It is necessary to deal with global initialization
          because of the large number of use cases, where the first thing
          a process does is to call ORB_init, and consequently -
          open_services. There are also cases where a process calls
          Service_Config::open, initializing the process-wide
          configuration and only then proceeds to call ORB_init - for
          example when using Service Configurator to load a DLL that uses
          an ORB. The close_service is now only responsible for calling
          close in the ORB's own gestalt, the ACE Object Manager is the
          one that is clobering the process-wide Service Configuration.
          Updated to explicitly specify the correct gestalt to be used.

        * tao/default_resource.h:
        * tao/default_resource.cpp:

          Added the ACE_Dynamic_Service_Dependency member to the default
          resource factory to expressly maintain the factory's dependance
          on TAO_Codeset library, because the order of destruction may be
          reversed in some cases. The member help us keep our access to
          TAO_Codeset_Manager instances by upping the ref count on
          TAO_Codeset's DLL. This is far from elegant, but a complete
          reference counting scheme for the ORB services is a more complex
          undertaking than what the available resources currently permit.

        * tao/CSD_ThreadPool/CSD_TP_Strategy_Factory.cpp:

          Fixed an (unrelated) issue arising from a call to strcmp() with
          two different character types - only visible when ACE_USES_WCHAR
          is in effect.

        * tao/Codeset/Codeset_Manager_i.h:
        * tao/Codeset/Codeset_Manager_i.cpp:

          (minor) Added void as argument to the ctor and dtor.

        * tao/PI/ORBInitializer_Registry_Impl.h:
        * tao/PI/ORBInitializer_Registry_Impl.cpp:

          Implemented an init() method, which registers all the static
          services, usually taken for granted with the loading of
          TAO_PI. Previously, static initializers were used, however the
          dependent static services were being registered only globally,
          which broke the ORBs that needed ORB-local services.

        * tao/PI/PI.h:
        * tao/PI/PI.cpp:
        * tao/PI/PolicyFactory_Loader.h:
        * tao/PI/PolicyFactory_Loader.cpp:

          Removed the static initializers code and made it part of the
          dynamic service's init method. See the comment above.

        * tao/PortableServer/Root_POA.cpp:

          Explicitly specified the gestalt to be used for registering
          dynamic services.

        * tests/DLL_ORB/Test_Client_Module.cpp:
        * tests/DLL_ORB/Test_Server_Module.cpp:

          Provided an ID for the client and server's ORB.  In the future,
          an option may be devised so that the user can specify if they
          want any ORB to use its own gestalt, even if it does not have an
          ID. The reverse would be to force all ORBs to use the global SR,
          even if they have an ID.  Fixed a a SEGV upon process
          termination. The first thing a client process does in its main()
          is to load a dynamic service - Test_Client_Module, using a call
          to ACE_Service_Config::process_directive(). The service does
          call ORB_init(), which causes the population of the SR with a
          number of static and dynamic SOs. At process termination now
          however, any services registered following the ORB_init () call
          are destroyed first and will be unavailable when the
          Test_Client_Module is finalized. Like the Resource Factory, for
          example.

          The solution is to provide and ORB id for any ORB, which will
          loaded as part of a dynamic service.  Since the service gestalt
          is tied to the ORB id, this will cause the new ORBs to create
          and manage the lifetime of their own Service Repositories. The
          ORB_init() will be invoked in the context of each distinct SR
          and any SO an ORB needs will go there. At process termination,
          the Test_Client_Module will be finalized, which will clobber the
          ORB's SR and any SO registered there.

        * tests/ORB_Local_Config/ORB_Local_Config.mwc:
        * tests/ORB_Local_Config/README:
        * tests/ORB_Local_Config/run_tests_all.pl:

          Added tests and examples of the functionality affected by the
          introduction of the multiple private (per-ORB) service
          configuration repositories.

        * tests/ORB_Local_Config/lib/Service_Configuration_Per_ORB.h:
        * tests/ORB_Local_Config/lib/Service_Configuration_Per_ORB.cpp:
        * tests/ORB_Local_Config/lib/lib.mpc:

          Common test code.

        * tests/ORB_Local_Config/Bunch/Bunch.mpc:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.UTF-16.conf:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.UTF-16.conf.xml:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.WCHAR_T.conf:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.WCHAR_T.conf.xml:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.conf:
        * tests/ORB_Local_Config/Bunch/Service_Config_Test.conf.xml:
        * tests/ORB_Local_Config/Bunch/Test.cpp:
        * tests/ORB_Local_Config/Bunch/run_test.pl:

          A collection of miscellaneous tests for compatibility of the new
          interfaces with the old; Processing of the command-line
          directives; Loading dynamic services in a local repository;
          Loading the ORBInitializer_Registry locally; Test the helper
          components used to implement the temporary substitution of the
          repository currently used as "global" for the sake of
          registering static services, which are dependent on a dynamic
          service;

        * tests/ORB_Local_Config/Limits/Limits.mpc:
        * tests/ORB_Local_Config/Limits/Test.cpp:
        * tests/ORB_Local_Config/Limits/run_test.pl:

          Testing the size limits of a gestalt.

        * tests/ORB_Local_Config/Separation/Separation.mpc:
        * tests/ORB_Local_Config/Separation/Test.cpp:
        * tests/ORB_Local_Config/Separation/run_test.pl:

          Services registered with separate repositories must remain
          separate and inaccessible through anyone but the gestalt they
          were registered with.

        * tests/ORB_Local_Config/Service_Dependency/Service_Config_DLL.h:
        * tests/ORB_Local_Config/Service_Dependency/Service_Config_DLL.cpp:
        * tests/ORB_Local_Config/Service_Dependency/Service_Config_DLL_Export.h:
        * tests/ORB_Local_Config/Service_Dependency/Service_Dependency.mpc:
        * tests/ORB_Local_Config/Service_Dependency/Test.cpp:
        * tests/ORB_Local_Config/Service_Dependency/run_test.pl:

          Tests the working of the ACE_Dynamic_Service_Dependency class

        * tests/ORB_Local_Config/Shared/Shared.mpc:
        * tests/ORB_Local_Config/Shared/Test.cpp:
        * tests/ORB_Local_Config/Shared/run_test.pl:

          Test that the default repository is available through any
          Service Gestalt, created with its default ctor.

        * tests/ORB_Local_Config/Simple/Simple.mpc:
        * tests/ORB_Local_Config/Simple/Test.cpp:
        * tests/ORB_Local_Config/Simple/run_test.pl:

        * tests/ORB_Local_Config/Two_DLL_ORB/ORB_DLL.h:
        * tests/ORB_Local_Config/Two_DLL_ORB/ORB_DLL.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/ORB_DLL_Export.h:
        * tests/ORB_Local_Config/Two_DLL_ORB/Service_Config_ORB_Test.conf:
        * tests/ORB_Local_Config/Two_DLL_ORB/Service_Config_ORB_Test2.conf:
        * tests/ORB_Local_Config/Two_DLL_ORB/Test.idl:
        * tests/ORB_Local_Config/Two_DLL_ORB/Test.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/Test_i.h:
        * tests/ORB_Local_Config/Two_DLL_ORB/Test_i.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/Two_DLL_ORB.mpc:
        * tests/ORB_Local_Config/Two_DLL_ORB/client.cpp:
        * tests/ORB_Local_Config/Two_DLL_ORB/run_test.pl:
        * tests/ORB_Local_Config/Two_DLL_ORB/server.cpp:

          Testing the loading a dynamic service, which initializes its own
          ORB. The test is a variant of the Hello test with the twist that
          both the client and the server are service objects, loaded by
          the Service Configuration mechanism.

Wed Apr 26 20:09:33 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/EndpointPolicy/EndpointPolicyC.h:
        * tao/EndpointPolicy/EndpointPolicyC.cpp:

          Fixed fuzz errors.

        * tao/EndpointPolicy/EndpointPolicyC.inl:

          Removed this file.

Wed Apr 26 19:44:36 UTC 2006  J.T. Conklin  <jtc@acorntoolworks.com>

        * tao/Makefile.am:

          Regenerated.

        * tao/EndpointPolicy.mpc:

          Added Pkgconfig_Files definition.

        * tao/EndpointPolicy/TAO_EndpointPolicy.pc.in:

          New file, pkg-config *.pc template for TAO_EndpointPolicy
          library.

Wed Apr 26 19:08:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/OBV/Simple/Client_i.h:
          Fixed casing of include

Wed Apr 26 19:13:02 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/IIOP_Connection_Handler.cpp:
        * tao/ORB_Core.cpp:
        * tao/params.h:
        * tao/params.i:
        * tao/params.cpp:

          This change was of OCI by David.Gibbs@igindex.co.uk. He had
          previously requested the addition of support for SO_KEEPALIVE
          and as a result we found that the framework existed for
          communicating a value of SO_DONTROUTE, so it was decided that we
          go ahead and add the feature. I consider this change provisional
          in that it isn't strictly required and so if someone strongly
          objects to its existence it can be pulled. Otherwise it is
          simply completing what someone else had started a while ago by
          adding configuration values for socket options to IIOP protocol
          properties definition.

Wed Apr 26 18:47:23 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/ORB_Core.cpp:
        * tao/ORB_Core.h:

          Add an alternate connection timeout hook. This is necessary for
          users of the Optimized Connect Endpoint Selector with its
          timeout while also using CORBA messaging and the Connection
          Timeout policy. Both of these connection timeouts are
          dynamically loaded and one would override the other. This change
          allows both to be loaded, and if both are initialized to nonzero
          values, the lesser of the two timeouts is used. This results
          from a bug originally reported to OCI by friedhelm.wolf@homag.de.

        * tao/Strategies/OC_Endpoint_Selector_Loader.cpp:
        * tao/Strategies/OC_Endpoint_Selector_Loader.h:

          Cleaned up the initializer to be more consistent with others.

        * tao/Strategies/Optimized_Connection_Endpoint_Selector.cpp:

          Fixed wihtespace in debug output.

Wed Apr 26 16:42:45 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * docs/Options.html:

          Adding text for the new commandline options used to control the
          parallel connect feature.

        * tao/Blocked_Connect_Strategy.h:
        * tao/Blocked_Connect_Strategy.cpp:
        * tao/CORBALOC_Parser.cpp:
        * tao/Client_Strategy_Factory.h:
        * tao/Client_Strategy_Factory.cpp:
        * tao/Connect_Strategy.h:
        * tao/Connect_Strategy.cpp:
        * tao/Endpoint.h:
        * tao/Endpoint.cpp:
        * tao/IIOP_Connection_Handler.h:
        * tao/IIOP_Connection_Handler.cpp:
        * tao/IIOP_Connector.h:
        * tao/IIOP_Connector.cpp:
        * tao/IIOP_Endpoint.h:
        * tao/IIOP_Endpoint.cpp:
        * tao/IIOP_Profile.h:
        * tao/IIOP_Profile.cpp:
        * tao/Invocation_Endpoint_Selectors.h:
        * tao/Invocation_Endpoint_Selectors.cpp:
        * tao/LF_CH_Event.h:
        * tao/LF_Connect_Strategy.h:
        * tao/LF_Connect_Strategy.cpp:
        * tao/LF_Event.h:
        * tao/LF_Multi_Event.h:
        * tao/LF_Multi_Event.cpp:
        * tao/MProfile.h:
        * tao/MProfile.i:
        * tao/MProfile.cpp:
        * tao/ORB_Core.cpp:
        * tao/Profile.h:
        * tao/Profile.cpp:
        * tao/Profile_Transport_Resolver.h:
        * tao/Profile_Transport_Resolver.cpp:
        * tao/Reactive_Connect_Strategy.h:
        * tao/Reactive_Connect_Strategy.cpp:
        * tao/Transport.cpp:
        * tao/Transport_Connector.h:
        * tao/Transport_Connector.cpp:
        * tao/Transport_Descriptor_Interface.h:
        * tao/Transport_Descriptor_Interface.inl:
        * tao/Transport_Descriptor_Interface.cpp:
        * tao/default_client.h:
        * tao/default_client.cpp:
        * tao/params.h:
        * tao/params.i:
        * tao/params.cpp:
        * tao/tao.mpc:

          These changes support a new technique for active connection
          establishment when presented with a profile containing multiple
          possible endpoints. This commit resolves bugzilla bug #2485.

          The technique in question is "parallel connects" meaning
          attempting to connect to many endpoints simultaniously. It was
          conceived as a way to deal with timeouts when the Invocation
          Endpoint Selector would first try to connect to one or more
          unreachable endpoints. If those endpoints were defined as IP
          addresses (not hostnames) or as resolvable hostnames that
          pointed to unreachable IP addresses, the connection
          establishment would take potentially several minutes to time out
          and eventually encounter a reachable endpoint. In the case of
          shared profiles (those using TAG_ALTERNATE_IIOP_ENDPOINT) this
          delay impacts every single invocation.

          This parallel connect feature (also referred to somewhat
          inacurately as a strategy) avoids this by supplying all the
          endpoints in a profile to the connector and letting it first
          test to see if any are already cached and available, and if not,
          to open connections to each and wait for a winner. When the
          first connection completes, any pending connections are
          terminated.

          In order to minimize the use of pending connections, an iterator
          traverses the list of endpoints creating new connections and
          also checking any existing connections for completion. If the
          first endpoint happens to be reachable and the server responds
          quickly enough, the client may not open any more connections.

          If the server does not respond immediately, a wait strategy is
          entered. This wait strategy may be Reactive or Leader/Follower
          based. In either case, a specal "multi event" type is used to
          allow a single thread to wait on one of many connectors, and
          then to clean up those that didn't finish in time. The parallel
          connect feature is also available using blocking connects, but
          the only advantage there is in checking the cache for all
          endpoints in the profile, there is no performance gain during
          actual connection establishment.

          The parallel connect strategy differs from another endpoint
          selection optimization, available in
          tao/Strategies/Optimized_Connection_Endpoint_Selector.*. That
          strategy works by examining all profiles simultaniously, this
          feature still treats separate profiles separately. This profile
          separation is necessary to support Load Balancing and Fault
          Tolerence. Also, this feature requires additional support to be
          built into protocol specific connectors (IIOP is currently the
          only protocol supporting parallel connects) whereas the other
          feature works regardless of the protocol.

          As this is a new feature, it is disabled by default. Use the
          -ORBUseParallelConnects option to enable its use. A second
          option, -ORBParallelConnectDelay, is used to introduce a small
          delay between the opening of new potential connections if the
          server is particularly busy. This is useful to minimize the
          impact on a busy server if more than one of the available
          endpoints is reachable. Also, because this feature only focuses
          on one profile at a time, the server must be run with
          -ORBUseSharedProfiles enabled (it is disabled by default).

        * tests/Parallel_Connect_Strategy/Parallel_Connect_Strategy.mpc:
        * tests/Parallel_Connect_Strategy/README:
        * tests/Parallel_Connect_Strategy/Test.idl:
        * tests/Parallel_Connect_Strategy/Test_i.h:
        * tests/Parallel_Connect_Strategy/Test_i.cpp:
        * tests/Parallel_Connect_Strategy/blocked.conf:
        * tests/Parallel_Connect_Strategy/client.cpp:
        * tests/Parallel_Connect_Strategy/reactive.conf:
        * tests/Parallel_Connect_Strategy/run_test.pl:
        * tests/Parallel_Connect_Strategy/server.cpp:

          This is a new test for the parallel connect feature. It works by
          having the server open two endpoints, one aliased to something
          unreachable. The client then uses different wait strategies to
          make invocations on the server and records the time for
          each. These tests also include counter-examples in which
          parallel connects are not used, and these take several minutes
          to run. On my Linux machine the timeout period is about 3
          minutes which causes the overall test to take about 9 minutes to
          run.

Wed Apr 26 16:30:56 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/PortableServer/POAManagerFactory.cpp:

          Correct a bug found by the Borland compiler.

Wed Apr 26 13:47:28 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/EndpointPolicy.mpc:
        * tao/EndpointPolicy/EndpointPolicy.h:
        * tao/EndpointPolicy/EndpointPolicy.pidl:
        * tao/EndpointPolicy/EndpointPolicy.cpp:
        * tao/EndpointPolicy/EndpointPolicyA.h:
        * tao/EndpointPolicy/EndpointPolicyA.cpp:
        * tao/EndpointPolicy/EndpointPolicyC.h:
        * tao/EndpointPolicy/EndpointPolicyC.inl:
        * tao/EndpointPolicy/EndpointPolicyC.cpp:
        * tao/EndpointPolicy/EndpointPolicyType.pidl:
        * tao/EndpointPolicy/EndpointPolicyTypeA.h:
        * tao/EndpointPolicy/EndpointPolicyTypeA.cpp:
        * tao/EndpointPolicy/EndpointPolicyTypeC.h:
        * tao/EndpointPolicy/EndpointPolicyTypeC.cpp:
        * tao/EndpointPolicy/EndpointPolicy_Export.h:
        * tao/EndpointPolicy/EndpointPolicy_Factory.h:
        * tao/EndpointPolicy/EndpointPolicy_Factory.cpp:
        * tao/EndpointPolicy/EndpointPolicy_ORBInitializer.h:
        * tao/EndpointPolicy/EndpointPolicy_ORBInitializer.cpp:
        * tao/EndpointPolicy/EndpointPolicy_i.h:
        * tao/EndpointPolicy/EndpointPolicy_i.cpp:
        * tao/EndpointPolicy/Endpoint_Acceptor_Filter.h:
        * tao/EndpointPolicy/Endpoint_Acceptor_Filter.cpp:
        * tao/EndpointPolicy/Endpoint_Acceptor_Filter_Factory.h:
        * tao/EndpointPolicy/Endpoint_Acceptor_Filter_Factory.cpp:
        * tao/EndpointPolicy/Endpoint_Value_Impl.h:
        * tao/EndpointPolicy/IIOPEndpointValue.pidl:
        * tao/EndpointPolicy/IIOPEndpointValueA.h:
        * tao/EndpointPolicy/IIOPEndpointValueA.cpp:
        * tao/EndpointPolicy/IIOPEndpointValueC.h:
        * tao/EndpointPolicy/IIOPEndpointValueC.cpp:
        * tao/EndpointPolicy/IIOPEndpointValue_i.h:
        * tao/EndpointPolicy/IIOPEndpointValue_i.cpp:

          The EndpointPolicy is a new, TAO-specific policy that is applied
          to POAManagers via the POAManagerFactory. This commit resolves
          Bugzilla bug #2484.

          The Endpoint policy acts as a filter for constraining the final
          endpoints or profiles listed in an IOR when it is created by a
          POA associated with the POAManager containing the policy. The
          EndpointPolicy value is a sequence, allow multiple endpoints to
          be published.

          The way this works is that the ORB is initialized with all the
          -ORBEndpoint options it needs to provide access to all the
          objects it will serve. Then POAManagers are created with
          Endpoint policies that contain only the endpoints that are to be
          used for its subset of objects. For instance, the ORB could
          define one endpoint for insecure, internal-use-only objects, and
          another for secure internet-facing objects. Using the Endpoint
          Policy these different objects would only get one or the other
          endpoint. Mechanically what happens is that first all Acceptors
          are queried to construct an MProfile, then the resulting
          profiles/endpoints are compared to entries in the policy, those
          not matching are eliminated. It is possible that an endpoint
          policy will exclude all the profiles, which would result in an
          exception being raised at object reference construction time.

          Endpoints are matched in their final form. This means that if an
          IIOP Endpoint makes use of the hostname_in_ior attribute, that
          is the name the policy will use to match.

          Endpoint values are protocol specific. A value for IIOP is
          provided, but new values must be defined to support other
          protocols. The Endpoint value is a local object. New protocol
          specific values do not have to be added to the
          TAO_EndpointPolicy library, but they must specialize
          EndpointPolicy::ValueBase and the implementation must derive
          from TAO_Endpoint_Value_Impl.

        * tao/IIOP_Endpoint.h:
        * tao/IIOP_Endpoint.cpp:
        * tao/IIOP_Profile.h:
        * tao/IIOP_Profile.cpp:
        * tao/Profile.h:
        * tao/Profile.cpp:

          The profile contains the base endpoint as an attribute. This
          caused a problem for the endpoint removal scheme mentioned
          above. If a profile contains two or more endpoints, and the base
          happens to be the one to be eliminated as a result of the
          endpoint comparison, the only thing that could be done is to
          copy the contents of the first alternate into the base, then
          eliminate the duplicate.

        * tao/orbconf.h:

          Added a tag for the new policy.

        * tests/POA/EndpointPolicy/EndpointPolicy.mpc:
        * tests/POA/EndpointPolicy/Hello.h:
        * tests/POA/EndpointPolicy/Hello.cpp:
        * tests/POA/EndpointPolicy/README:
        * tests/POA/EndpointPolicy/Test.idl:
        * tests/POA/EndpointPolicy/client.cpp:
        * tests/POA/EndpointPolicy/run_test.pl:
        * tests/POA/EndpointPolicy/server.cpp:
        * tests/POA/README:

          A new test case for the endpoint policy. This test currently
          fails due to an unresolved interaction with the sequence
          code. The error appears to be related to memory corruption, but
          the cause has not yet been determined. The error only manifests
          when the multiple profiles portion of the test is being
          run. This is where an unmodified IOR would contain two profiles,
          each with one endpoint. The problem does not occur when a single
          profile has two endpoints.

Wed Apr 26 14:04:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Smart_Proxies/client.cpp:
        * tests/Smart_Proxies/Benchmark/client.cpp:
        * tests/Smart_Proxies/dtor/client.cpp:
        * tests/Smart_Proxies/Policy/client.cpp:
          Removed remarks about the KAI compiler, more compilers do
          give these warnings and support for the KAI compilers
          has been removed

Wed Apr 26 13:29:44 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/examples/ORT/Server_IORInterceptor.h:
        * orbsvcs/examples/ORT/Server_IORInterceptor.cpp:

        * orbsvcs/orbsvcs/LoadBalancing/LB_IORInterceptor.h:
        * orbsvcs/orbsvcs/LoadBalancing/LB_IORInterceptor.cpp:

        * orbsvcs/orbsvcs/PortableGroup/GOA.h:
        * orbsvcs/orbsvcs/PortableGroup/GOA.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PG_Servant_Dispatcher.h:
        * orbsvcs/orbsvcs/PortableGroup/PG_Servant_Dispatcher.cpp:

        * tao/AnyTypeCode/PI_ForwardA.h:

        * tao/CSD_Framework/CSD_Default_Servant_Dispatcher.h:
        * tao/CSD_Framework/CSD_Default_Servant_Dispatcher.cpp:
        * tao/CSD_Framework/CSD_POA.h:
        * tao/CSD_Framework/CSD_POA.cpp:

        * tao/IORInterceptor/IORInfo.h:
        * tao/IORInterceptor/IORInfo.cpp:
        * tao/IORInterceptor/IORInfoC.h:
        * tao/IORInterceptor/IORInterceptorC.h:
        * tao/IORInterceptor/IORInterceptor_Adapter_Impl.h:
        * tao/IORInterceptor/IORInterceptor_Adapter_Impl.cpp:

        * tao/IORInterceptor_Adapter.h:
        * tao/PI_Forward.pidl:
        * tao/PI_ForwardC.h:

        * tao/RTPortableServer/RT_POA.h:
        * tao/RTPortableServer/RT_POA.cpp:
        * tao/RTPortableServer/RT_Servant_Dispatcher.h:
        * tao/RTPortableServer/RT_Servant_Dispatcher.cpp:

        * tests/ORT/ORT_test_IORInterceptor.h:
        * tests/ORT/ORT_test_IORInterceptor.cpp:

        * tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.h:
        * tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.cpp:

          These are more changes related to the POAManagerFactory. They
          are coupled with my 13:10:59 utc checkin.

Wed Apr 26 13:10:59 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/PortableServer/Acceptor_Filter_Factory.h:
        * tao/PortableServer/Acceptor_Filter_Factory.cpp:
        * tao/PortableServer/Default_Acceptor_Filter.h:
        * tao/PortableServer/Default_Servant_Dispatcher.h:
        * tao/PortableServer/Default_Servant_Dispatcher.cpp:
        * tao/PortableServer/Object_Adapter.h:
        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/POAManager.h:
        * tao/PortableServer/POAManager.i:
        * tao/PortableServer/POAManager.pidl:
        * tao/PortableServer/POAManager.cpp:
        * tao/PortableServer/POAManagerC.h:
        * tao/PortableServer/POAManagerFactory.h:
        * tao/PortableServer/POAManagerFactory.cpp:
        * tao/PortableServer/POAManagerFactory.pidl:
        * tao/PortableServer/POAManagerFactoryC.h:
        * tao/PortableServer/POAManagerFactoryC.cpp:
        * tao/PortableServer/PortableServer.h:
        * tao/PortableServer/PortableServer.pidl:
        * tao/PortableServer/PortableServerC.h:
        * tao/PortableServer/Regular_POA.h:
        * tao/PortableServer/Regular_POA.cpp:
        * tao/PortableServer/Root_POA.h:
        * tao/PortableServer/Root_POA.cpp:
        * tao/PortableServer/Servant_Dispatcher.h:

          These files are new/updated to support the POAManagerFactory,
          which was added to the CORBA 3.0.2 specification. The PMF is
          used to allow for the explicit creation of POA Managers which
          can then be supplied to POAs during POA creation. POA Managers
          may now also carry policies which will influence all POAs
          associated with it. This work builds on the effort originally
          started by Johnny Willemsen back in the pre-1.4.8 era. This
          commit resolves Bugzilla bug #1785.

        * tests/POA/POAManagerFactory/POAManagerFactory.cpp:
        * tests/POA/POAManagerFactory/POAManagerFactory.mpc:
        * tests/POA/POAManagerFactory/run_test.pl:

          This is a new test for the POAManagerFactory.

Wed Apr 26 13:01:48 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Valuetype/AbstractBase.cpp:
        * tao/Valuetype/AbstractBase.h:
          The _tao_marshal_v method is supposed to be const.

Wed Apr 26 13:01:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/POA/Bug_2511_Regression/*:
          Added new regression for bug 2511. Thanks to Martin Cornelius
          <Martin at Cornelius at smiths-heimann dot com> for creating
          this regression

Wed Apr 26 12:20:51 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tests/AMI/ami_test.idl:
        * tests/AMI/ami_test_i.cpp:
        * tests/AMI/simple_client.cpp:
          Reverting earlier test changes. They were causing problems on
          some platforms and I don't have a clear enough memory of the
          original motivation for the change.

Wed Apr 26 11:46:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/AVStreams/Pluggable/ftp.cpp:
        * orbsvcs/tests/AVStreams/Multicast/ftp.cpp:
          Fixed a bug in these tests, in the test code for element 0 of
          a string sequence was set and after that the length was set to 1.
          The setting of 0 is possible because the OMG doesn't define
          exceptions for this so it is allowed, then setting the length to
          1 does reinitialize element 0 so that we don't get old values.
          This was not done with the old sequences, then just the old
          value was returned and things worked then.

Wed Apr 26 11:21:57 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Valuetype/ValueBase.cpp:

          Fix for errant removal of throw, this corrects the OBV/Factory
          test.

Wed Apr 26 10:41:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Unbounded_Sequence_CDR_T.h:
          Added missing include of SystemException

Wed Apr 26 10:03:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/OBV/Simple/*:
          Added very simple OBV test

Wed Apr 26 09:53:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Portable_Interceptors/Bug_2510_Regression:
          New regression test, thanks to Martin Cornelius
          <Martin at Cornelius at smiths-heimann dot com> for creating
          this test. This bug is not fixed yet.

Wed Apr 26 09:44:12 UTC 2006  Kees van Marle  <kvmarle@remedy.nl>

        * tao/Bounded_Sequence_CDR_T.h:
        * tao/Unbounded_Sequence_CDR_T.h:
          Check in all marshal_sequence methods if we aren't trying to
          marshal a nill sequence, this can happen when the user doesn't
          initialize an out argument. In that case we throw a BAD_PARAM
          exception as described in the C++ spec. This fixes bugzilla bug
          1676.

Wed Apr 26 08:42:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ObjRefTemplate/ObjectReferenceTemplateC.h:
        * tao/ObjRefTemplate/Default_ORTC.h:
        * tao/Messaging/ExceptionHolderC.h:
          Include the Valuetype_Adapter_Factory_Impl.h so that the
          Valuetype library gets linked in a static build, this is
          already updated earlier in the IDL compiler

Wed Apr 26 08:17:12 UTC 2006  Kees van Marle  <kvmarle@remedy.nl>

        * tests/Bug_1676_Regression/client.cpp:
          Extended this test to explicitly test for BAD_PARAM exception
          when the server not initializes an out argument

Wed Apr 26 07:24:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.h:
          Removed invalid template export

Wed Apr 26 03:46:16 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * tao/Valuetype/AbstractBase.cpp:

          Fixed scoreboard detected warning.

Tue Apr 25 19:24:48 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:

          Missed a patch from the earlier commit.

Tue Apr 25 19:09:08 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/examples/ORT/Server_IORInterceptor.h:
        * orbsvcs/examples/ORT/Server_IORInterceptor.cpp:

        * orbsvcs/orbsvcs/LoadBalancing/LB_IORInterceptor.h:
        * orbsvcs/orbsvcs/LoadBalancing/LB_IORInterceptor.cpp:

        * orbsvcs/orbsvcs/PortableGroup/GOA.h:
        * orbsvcs/orbsvcs/PortableGroup/GOA.cpp:
        * orbsvcs/orbsvcs/PortableGroup/PG_Servant_Dispatcher.h:
        * orbsvcs/orbsvcs/PortableGroup/PG_Servant_Dispatcher.cpp:

        * tao/AnyTypeCode/PI_ForwardA.h:

        * tao/CSD_Framework/CSD_Default_Servant_Dispatcher.h:
        * tao/CSD_Framework/CSD_Default_Servant_Dispatcher.cpp:
        * tao/CSD_Framework/CSD_POA.h:
        * tao/CSD_Framework/CSD_POA.cpp:

        * tao/IIOP_Endpoint.h:
        * tao/IIOP_Endpoint.cpp:
        * tao/IIOP_Profile.h:
        * tao/IIOP_Profile.cpp:

        * tao/IORInterceptor/IORInfo.h:
        * tao/IORInterceptor/IORInfo.cpp:
        * tao/IORInterceptor/IORInfoC.h:
        * tao/IORInterceptor/IORInterceptorC.h:
        * tao/IORInterceptor/IORInterceptor_Adapter_Impl.h:
        * tao/IORInterceptor/IORInterceptor_Adapter_Impl.cpp:

        * tao/IORInterceptor_Adapter.h:
        * tao/PI_Forward.pidl:
        * tao/PI_ForwardC.h:

        * tao/PortableServer/Default_Acceptor_Filter.h:
        * tao/PortableServer/Default_Servant_Dispatcher.h:
        * tao/PortableServer/Default_Servant_Dispatcher.cpp:
        * tao/PortableServer/Object_Adapter.h:
        * tao/PortableServer/Object_Adapter.cpp:
        * tao/PortableServer/POAManager.h:
        * tao/PortableServer/POAManager.i:
        * tao/PortableServer/POAManager.cpp:
        * tao/PortableServer/POAManager.pidl:
        * tao/PortableServer/POAManagerC.h:
        * tao/PortableServer/PortableServer.h:
        * tao/PortableServer/PortableServer.pidl:
        * tao/PortableServer/PortableServerC.h:
        * tao/PortableServer/Regular_POA.h:
        * tao/PortableServer/Regular_POA.cpp:
        * tao/PortableServer/Root_POA.h:
        * tao/PortableServer/Root_POA.cpp:
        * tao/PortableServer/Servant_Dispatcher.h:

        * tao/Profile.h:
        * tao/Profile.cpp:

        * tao/RTPortableServer/RT_POA.h:
        * tao/RTPortableServer/RT_POA.cpp:
        * tao/RTPortableServer/RT_Servant_Dispatcher.h:
        * tao/RTPortableServer/RT_Servant_Dispatcher.cpp:

        * tao/orbconf.h:
        * tao/params.cpp:

        * tests/ORT/ORT_test_IORInterceptor.h:
        * tests/ORT/ORT_test_IORInterceptor.cpp:

        * tests/POA/EndpointPolicy/EndpointPolicy.mpc:
        * tests/POA/EndpointPolicy/Hello.h:
        * tests/POA/EndpointPolicy/Hello.cpp:
        * tests/POA/EndpointPolicy/README:
        * tests/POA/EndpointPolicy/Test.idl:
        * tests/POA/EndpointPolicy/client.cpp:
        * tests/POA/EndpointPolicy/run_test.pl:
        * tests/POA/EndpointPolicy/server.cpp:

        * tests/POA/POAManagerFactory/POAManagerFactory.cpp:
        * tests/POA/POAManagerFactory/POAManagerFactory.mpc:
        * tests/POA/POAManagerFactory/run_test.pl:

        * tests/POA/README:

        * tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.h:
        * tests/Portable_Interceptors/IORInterceptor/FOO_IORInterceptor.cpp:

Tue Apr 25 17:38:34 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

        * TAO_IDL/be/be_visitor_valuebox/valuebox_ch.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * tao/Messaging/ExceptionHolderC.h:
        * tao/Messaging/ExceptionHolderC.cpp:
        * tao/ObjRefTemplate/Default_ORTC.h:
        * tao/ObjRefTemplate/Default_ORTC.cpp:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.cpp:
        * tao/Valuetype/AbstractBase.h:
        * tao/Valuetype/AbstractBase.cpp:
        * tao/Valuetype/StringValueC.h:
        * tao/Valuetype/StringValueC.inl:
        * tao/Valuetype/ValueBase.h:
        * tao/Valuetype/ValueBase.cpp:

          These are further valuetype changes that are related to Bugzilla
          #2162. The problem is that TAO assumes that a valuetype's
          typecode is always encoded as 0x7FFFFF02 <repID> but that is not
          compliant with the spec. It is also valid to encode a valuetype
          typecode as 0x7FFFFF00 which indicates that the actual type of
          the value matches the formal type for the argument for which the
          value is a parameter.  TAO already had most of the hooks in
          place to support this, but was missing a key bit of
          functionality. This patch adds that functionality, the ability
          to test that the formal type matches the actual type when
          marshaling values.

          Valuetypes encoded this way are substantially more efficient, if
          the type can be implied then there is no need to carry the
          actual type id.  Unfortunately to do so blindly would break
          backwards compatibility with all previous versions of TAO.
          For the time being, the effective code to cause TAO to marshal
          values using the more efficient typecode is disabled using a new
          compile-time flag, TAO_HAS_OPTIMIMIZED_VALUETYPE_MARSHALING,
          which must be defined to give TAO the opportunity to use this
          new technique. THIS FLAG BREAKS BACKWARDS COMPATIBILITY. It is
          not a violation of the spec to always encode the valuetype's
          type ID when marshaling, so TAO can continue being backwards
          compatible and not be in violation of the spec. The only
          violation comes when failing to unmarshal a value which is using
          an implied type ID.

          I would prefer to not have a compiler flag to guard the use of
          optimized marshaling, but I don't know any other way to do it.
          At the point where the decision is made, there is no reference
          to an ORB Core so there is no easy way to set a dynamic option
          that could be used to selectively control this optimization.

Tue Apr 25 15:14:13 UTC 2006  Phil Mesnier  <mesnier_p@ociweb.com>

          Merging in truncatable valuetype support. This work was done on
          an OCI controlled patch then brought in via patch. The premise
          is to support the "truncatable" keyword for valuetypes as
          defined in sections 3.9.1.3, 5.2.5.3 and 15.3.4.1 of the CORBA
          3.0.3 specification. Practically, this means supporting the
          marshaling of typecode lists and chunked values. Chunked values
          requires the retention of state, namely nesting level, during
          the marshaling. This was handled by creating a new ChunkInfo
          type that is created on the stack during the marshaling of a
          valuetype and is passed through all the intermediate marshal
          methods. This commit resolves Bugzilla #2483

        * TAO_IDL/be/be_visitor_valuebox/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuebox/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_ch.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_cs.cpp:

          Valueboxes by definition cannot be made truncatable, but they
          derive from the same valuebase, thus they must support the same
          signature for creating a list of repository ids. Otherwise these
          are whitespace only changes.

        * TAO_IDL/be/be_visitor_valuetype/cdr_op_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ci.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_ch.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp:

          These are changes for generating code that manages the chunkinfo
          data as it passes through the value members.

        * TAO_IDL/be/be_visitor_valuetype_fwd/cdr_op_ch.cpp:

          Whitespace changes.

        * TAO_IDL/fe/y.tab.cpp:
        * TAO_IDL/fe/idl.yy:

          Removed the warning about support for truncatables.

        * tao/AnyTypeCode/skip.cpp:

          Fixed the type for the valuetag.

        * tao/Messaging/ExceptionHolderC.h:
        * tao/Messaging/ExceptionHolderC.cpp:
        * tao/ObjRefTemplate/Default_ORTC.h:
        * tao/ObjRefTemplate/Default_ORTC.cpp:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.h:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.cpp:

          These are the changes required by the truncatable support that
          would ordinarily be generated by the IDL compiler.

        * tao/Valuetype/AbstractBase.h:
        * tao/Valuetype/AbstractBase.cpp:
        * tao/Valuetype/StringValueC.h:
        * tao/Valuetype/StringValueC.cpp:
        * tao/Valuetype/ValueBase.h:
        * tao/Valuetype/ValueBase.inl:
        * tao/Valuetype/ValueBase.cpp:
        * tao/Valuetype/Value_CORBA_methods.h:

          The changes for StringValue and AbstractBase are the same as the
          generated code. The changes in ValueBase are those common to all
          value types, used to determine how to marshal values if the
          truncatable keyword was defined or not. This also includes the
          definintion of the new ChunkInfo type.

        * tests/AMI/ami_test.idl:
        * tests/AMI/ami_test_i.cpp:
        * tests/AMI/simple_client.cpp:

          Changes test misc. fixes for support of wchar data in exceptions.

        * tests/OBV/Truncatable/OBV_Truncatable.mpc:
        * tests/OBV/Truncatable/README:
        * tests/OBV/Truncatable/Truncatable.idl:
        * tests/OBV/Truncatable/TruncatableS_impl.h:
        * tests/OBV/Truncatable/TruncatableS_impl.cpp:
        * tests/OBV/Truncatable/client.cpp:
        * tests/OBV/Truncatable/run_test.pl:
        * tests/OBV/Truncatable/server.cpp:

          A new test specific to validating the truncatable valuetypes.
          Note this test is also added to the ace/bin/tao_orb_tests.lst.

        * tests/Param_Test/svc.conf:

          Remove the explicit override of the wchar codeset for the

Tue Apr 25 14:25:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        Reverted this change below, this change broke this test

        Fri Apr 21 08:11:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>
        * orbsvcs/tests/Trading/TTest.idl:
          Use the CORBA predefined sequence types

Tue Apr 25 12:20:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Sequence_Unit_Tests/Sequence_Unit_Tests.mpc:
          Added missing unbouded array unit test

Tue Apr 25 11:40:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Trader/Constraint_Visitors.cpp
        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Offer_Database.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Service_Type_Repository.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader.h
        * orbsvcs/orbsvcs/Trader/Trader_Constraint_Visitors.cpp
        * orbsvcs/orbsvcs/Trader/Trader_Interfaces.{h,cpp}:
        * orbsvcs/orbsvcs/Trader/Trader_Utils.{h,cpp}:
          Fixed duplicate symbols when linking with vc7/vc8. The trading
          service used the TAO_String_Hash_Key class to store strings
          in hash maps, this class is derived from CORBA::String_var which
          has been refactored to a template. This causes problems with
          vc7/vc8 because the base template is exported from multiple
          libraries. This has been resolved by usign CORBA::String_var
          in the hash map and deliver an ACE_Hash, ACE_Equal_To and
          ACE_Less_Then template specialization. This solves now the
          link problems, the runtime issue that appeared after the
          sequence merge has not been fixed yet. Also see bugzilla bug
          2520 for more info.

Tue Apr 25 08:46:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ORB.cpp:
          Removed runtime check of the sizes of the basic data types. We
          now always use bool for CORBA::Boolean independent of the size
          of bool, see also bugzilla 2515

Tue Apr 25 06:37:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Object.{h,cpp}:
          Made the signature of the static marshal method the same in the
          definition and the implementation.

Mon Apr 24 19:05:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Trader/Interpreter_Utils.h:
          Explicitly export the base template to fix duplicate symbol
          errors with vc71/vc8

Mon Apr 24 14:16:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.cpp:
          Improved debug messages so that we can see if a string is empty
          or not.

        * orbsvcs/orbsvcs/AV/FlowSpec_Entry.h:
          Doxygen cleanup

        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
          Improved debugging output to resolve bug that seems to be introduced
          by the sequence changes, the flowspec sequence has length of 1 but
          just an empty string as value

Mon Apr 24 13:12:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/params.cpp:
          Small const improvement

        * tao/ORB.{h,cpp}:
          Updated CORBA::ORB::RequestSeq to CORBA::RequestSeq as the spec
          describes. Fixes bugzilla bug 2512.

Mon Apr 24 12:02:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ORB.cpp:
          Added include of ObjectIdListC.h to resolve compile errors related
          to this type with Sun Studio 10

Mon Apr 24 11:56:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        Reverted change below, set method is IDL generated.

        Mon Apr 24 09:39:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>
        * orbsvcs/orbsvcs/Runtime_Scheduler.{h,cpp}:
          Made the arguments of the set method a const reference, this fixes
          the internal backend errors in the BCB2006 release builds.

Mon Apr 24 11:31:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ORB_Core.cpp:
          When we can't get a valuetype adapter throw an internal corba
          exception

        * TAO_IDL/be/be_codegen.cpp:
          Updated include generated for the valuetype library, makes sure
          that the valuetype library gets linked into the executable when
          building static.

Mon Apr 24 10:16:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_1676_Regression/*:
          Added regression for bug 1676 written by Kees van Marle. This bug
          seems not to be fixed yet.

Mon Apr 24 09:39:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/Runtime_Scheduler.{h,cpp}:
          Made the arguments of the set method a const reference, this fixes
          the internal backend errors in the BCB2006 release builds.

Mon Apr 24 06:59:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/FaultTolerance/FT_ServerPolicy_i.inl:
          Removed some left over ACE_NESTED_CLASS usage

Sun Apr 23 11:26:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.cpp:
          Removed some left over ACE_NESTED_CLASS usage

Fri Apr 21 20:43:24 UTC 2006  J.T. Conklin  <jtc@acorntoolworks.com>

        * examples/Makefile.am:
        * performance-tests/Makefile.am:

          Remove handful of subdirectories that have not yet been updated
          to work with autoconf builds.

Fri Apr 21 19:32:27 UTC 2006  J.T. Conklin  <jtc@acorntoolworks.com>

        * configure.ac:

          Added orbsvcs/tests/Bug_2377_Regression/Makefile to
          AC_CONFIG_FILES.

        * orbsvcs/tests/Bug_2377_Regression/Makefile.am:

          New file.

Fri Apr 21 14:07:51 UTC 2006  J.T. Conklin  <jtc@acorntoolworks.com>

        * TAO_IDL/Makefile.am:
        * docs/Makefile.am:
        * docs/tutorials/Makefile.am:
        * docs/tutorials/Quoter/Makefile.am:
        * docs/tutorials/Quoter/AMI/Makefile.am:
        * docs/tutorials/Quoter/Event_Service/Makefile.am:
        * docs/tutorials/Quoter/Naming_Service/Makefile.am:
        * docs/tutorials/Quoter/On_Demand_Activation/Makefile.am:
        * docs/tutorials/Quoter/RT_Event_Service/Makefile.am:
        * docs/tutorials/Quoter/Simple/Makefile.am:
        * docs/tutorials/Quoter/Simple/Client/Makefile.am:
        * docs/tutorials/Quoter/Simple/Impl-Repo/Makefile.am:
        * docs/tutorials/Quoter/Simple/ImprovedServer/Makefile.am:
        * docs/tutorials/Quoter/Simple/Persistent/Makefile.am:
        * docs/tutorials/Quoter/Simple/Server/Makefile.am:
        * docs/tutorials/Quoter/idl/Makefile.am:
        * examples/Makefile.am:
        * examples/AMH/Makefile.am:
        * examples/AMH/Sink_Server/Makefile.am:
        * examples/AMI/Makefile.am:
        * examples/AMI/FL_Callback/Makefile.am:
        * examples/Advanced/Makefile.am:
        * examples/Advanced/ch_3/Makefile.am:
        * examples/Buffered_AMI/Makefile.am:
        * examples/Buffered_Oneways/Makefile.am:
        * examples/CSD_Strategy/Makefile.am:
        * examples/CSD_Strategy/ThreadPool/Makefile.am:
        * examples/CSD_Strategy/ThreadPool2/Makefile.am:
        * examples/CSD_Strategy/ThreadPool3/Makefile.am:
        * examples/CSD_Strategy/ThreadPool4/Makefile.am:
        * examples/CSD_Strategy/ThreadPool5/Makefile.am:
        * examples/CSD_Strategy/ThreadPool6/Makefile.am:
        * examples/Callback_Quoter/Makefile.am:
        * examples/Content_Server/Makefile.am:
        * examples/Content_Server/AMI_Iterator/Makefile.am:
        * examples/Content_Server/AMI_Observer/Makefile.am:
        * examples/Content_Server/SMI_Iterator/Makefile.am:
        * examples/Event_Comm/Makefile.am:
        * examples/Kokyu_dsrt_schedulers/Makefile.am:
        * examples/Kokyu_dsrt_schedulers/fp_example/Makefile.am:
        * examples/Kokyu_dsrt_schedulers/mif_example/Makefile.am:
        * examples/Kokyu_dsrt_schedulers/muf_example/Makefile.am:
        * examples/Load_Balancing/Makefile.am:
        * examples/Load_Balancing_persistent/Makefile.am:
        * examples/Logging/Makefile.am:
        * examples/OBV/Makefile.am:
        * examples/OBV/Typed_Events/Makefile.am:
        * examples/POA/Makefile.am:
        * examples/POA/Adapter_Activator/Makefile.am:
        * examples/POA/DSI/Makefile.am:
        * examples/POA/Default_Servant/Makefile.am:
        * examples/POA/Explicit_Activation/Makefile.am:
        * examples/POA/Explicit_Activation/Alt_Resources/Makefile.am:
        * examples/POA/FindPOA/Makefile.am:
        * examples/POA/Forwarding/Makefile.am:
        * examples/POA/Generic_Servant/Makefile.am:
        * examples/POA/Loader/Makefile.am:
        * examples/POA/NewPOA/Makefile.am:
        * examples/POA/On_Demand_Activation/Makefile.am:
        * examples/POA/On_Demand_Loading/Makefile.am:
        * examples/POA/POA_BiDir/Makefile.am:
        * examples/POA/Reference_Counted_Servant/Makefile.am:
        * examples/POA/RootPOA/Makefile.am:
        * examples/POA/TIE/Makefile.am:
        * examples/Persistent_Grid/Makefile.am:
        * examples/PluggableUDP/Makefile.am:
        * examples/PluggableUDP/tests/Makefile.am:
        * examples/PluggableUDP/tests/Basic/Makefile.am:
        * examples/PluggableUDP/tests/Performance/Makefile.am:
        * examples/PluggableUDP/tests/SimplePerformance/Makefile.am:
        * examples/Quoter/Makefile.am:
        * examples/RTCORBA/Makefile.am:
        * examples/RTCORBA/Activity/Makefile.am:
        * examples/RTScheduling/Makefile.am:
        * examples/RTScheduling/Fixed_Priority_Scheduler/Makefile.am:
        * examples/RTScheduling/MIF_Scheduler/Makefile.am:
        * examples/Simple/Makefile.am:
        * examples/Simple/bank/Makefile.am:
        * examples/Simple/chat/Makefile.am:
        * examples/Simple/echo/Makefile.am:
        * examples/Simple/grid/Makefile.am:
        * examples/Simple/time/Makefile.am:
        * examples/Simple/time-date/Makefile.am:
        * examples/Simulator/Makefile.am:
        * examples/Simulator/Event_Supplier/Makefile.am:
        * examples/TypeCode_Creation/Makefile.am:
        * examples/ior_corbaloc/Makefile.am:
        * examples/mfc/Makefile.am:
        * interop-tests/Makefile.am:
        * interop-tests/wchar/Makefile.am:
        * orbsvcs/Makefile.am:
        * orbsvcs/Concurrency_Service/Makefile.am:
        * orbsvcs/CosEvent_Service/Makefile.am:
        * orbsvcs/Dump_Schedule/Makefile.am:
        * orbsvcs/Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Event_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Factory_Service/Makefile.am:
        * orbsvcs/FTRT_Event_Service/Gateway_Service/Makefile.am:
        * orbsvcs/FT_ReplicationManager/Makefile.am:
        * orbsvcs/Fault_Detector/Makefile.am:
        * orbsvcs/Fault_Notifier/Makefile.am:
        * orbsvcs/IFR_Service/Makefile.am:
        * orbsvcs/ImplRepo_Service/Makefile.am:
        * orbsvcs/LoadBalancer/Makefile.am:
        * orbsvcs/Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Basic_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Event_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/Notify_Logging_Service/Makefile.am:
        * orbsvcs/Logging_Service/RTEvent_Logging_Service/Makefile.am:
        * orbsvcs/Naming_Service/Makefile.am:
        * orbsvcs/Notify_Service/Makefile.am:
        * orbsvcs/Scheduling_Service/Makefile.am:
        * orbsvcs/TAO_Service/Makefile.am:
        * orbsvcs/Time_Service/Makefile.am:
        * orbsvcs/Trading_Service/Makefile.am:
        * orbsvcs/examples/Makefile.am:
        * orbsvcs/examples/CosEC/Makefile.am:
        * orbsvcs/examples/CosEC/Factory/Makefile.am:
        * orbsvcs/examples/CosEC/RtEC_Based/Makefile.am:
        * orbsvcs/examples/CosEC/RtEC_Based/bin/Makefile.am:
        * orbsvcs/examples/CosEC/RtEC_Based/lib/Makefile.am:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Makefile.am:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Basic/Makefile.am:
        * orbsvcs/examples/CosEC/RtEC_Based/tests/Multiple/Makefile.am:
        * orbsvcs/examples/CosEC/Simple/Makefile.am:
        * orbsvcs/examples/CosEC/TypedSimple/Makefile.am:
        * orbsvcs/examples/FaultTolerance/Makefile.am:
        * orbsvcs/examples/FaultTolerance/RolyPoly/Makefile.am:
        * orbsvcs/examples/ImR/Makefile.am:
        * orbsvcs/examples/ImR/Advanced/Makefile.am:
        * orbsvcs/examples/ImR/Combined_Service/Makefile.am:
        * orbsvcs/examples/LoadBalancing/Makefile.am:
        * orbsvcs/examples/Log/Makefile.am:
        * orbsvcs/examples/Log/Basic/Makefile.am:
        * orbsvcs/examples/Log/Event/Makefile.am:
        * orbsvcs/examples/Log/Notify/Makefile.am:
        * orbsvcs/examples/Log/RTEvent/Makefile.am:
        * orbsvcs/examples/Notify/Makefile.am:
        * orbsvcs/examples/Notify/Federation/Makefile.am:
        * orbsvcs/examples/Notify/Federation/Agent/Makefile.am:
        * orbsvcs/examples/Notify/Federation/Gate/Makefile.am:
        * orbsvcs/examples/Notify/Federation/SpaceCraft/Makefile.am:
        * orbsvcs/examples/Notify/Filter/Makefile.am:
        * orbsvcs/examples/Notify/Lanes/Makefile.am:
        * orbsvcs/examples/Notify/Subscribe/Makefile.am:
        * orbsvcs/examples/Notify/ThreadPool/Makefile.am:
        * orbsvcs/examples/ORT/Makefile.am:
        * orbsvcs/examples/RtEC/Makefile.am:
        * orbsvcs/examples/RtEC/IIOPGateway/Makefile.am:
        * orbsvcs/examples/RtEC/Kokyu/Makefile.am:
        * orbsvcs/examples/RtEC/MCast/Makefile.am:
        * orbsvcs/examples/RtEC/Schedule/Makefile.am:
        * orbsvcs/examples/RtEC/Simple/Makefile.am:
        * orbsvcs/examples/Security/Makefile.am:
        * orbsvcs/examples/Security/Send_File/Makefile.am:
        * orbsvcs/orbsvcs/Makefile.am:
        * orbsvcs/performance-tests/Makefile.am:
        * orbsvcs/performance-tests/LoadBalancing/Makefile.am:
        * orbsvcs/performance-tests/LoadBalancing/LBPerf/Makefile.am:
        * orbsvcs/performance-tests/LoadBalancing/LBPerf/RPS/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Colocated_Roundtrip/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Federated_Roundtrip/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Baseline/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/RTCORBA_Callback/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/Roundtrip/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/TCP_Baseline/Makefile.am:
        * orbsvcs/performance-tests/RTEvent/lib/Makefile.am:
        * orbsvcs/tests/Makefile.am:
        * orbsvcs/tests/AVStreams/Makefile.am:
        * orbsvcs/tests/AVStreams/Asynch_Three_Stage/Makefile.am:
        * orbsvcs/tests/AVStreams/Bidirectional_Flows/Makefile.am:
        * orbsvcs/tests/AVStreams/Component_Switching/Makefile.am:
        * orbsvcs/tests/AVStreams/Full_Profile/Makefile.am:
        * orbsvcs/tests/AVStreams/Latency/Makefile.am:
        * orbsvcs/tests/AVStreams/Modify_QoS/Makefile.am:
        * orbsvcs/tests/AVStreams/Multicast/Makefile.am:
        * orbsvcs/tests/AVStreams/Multicast_Full_Profile/Makefile.am:
        * orbsvcs/tests/AVStreams/Multiple_Flows/Makefile.am:
        * orbsvcs/tests/AVStreams/Pluggable/Makefile.am:
        * orbsvcs/tests/AVStreams/Pluggable_Flow_Protocol/Makefile.am:
        * orbsvcs/tests/AVStreams/Simple_Three_Stage/Makefile.am:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage/Makefile.am:
        * orbsvcs/tests/AVStreams/Simple_Two_Stage_With_QoS/Makefile.am:
        * orbsvcs/tests/BiDir_CORBALOC/Makefile.am:
        * orbsvcs/tests/Bug_1334_Regression/Makefile.am:
        * orbsvcs/tests/Bug_1393_Regression/Makefile.am:
        * orbsvcs/tests/Bug_1395_Regression/Makefile.am:
        * orbsvcs/tests/Bug_1630_Regression/Makefile.am:
        * orbsvcs/tests/Bug_2074_Regression/Makefile.am:
        * orbsvcs/tests/Bug_2137_Regression/Makefile.am:
        * orbsvcs/tests/Bug_2247_Regression/Makefile.am:
        * orbsvcs/tests/Bug_2248_Regression/Makefile.am:
        * orbsvcs/tests/Bug_2285_Regression/Makefile.am:
        * orbsvcs/tests/Bug_2287_Regression/Makefile.am:
        * orbsvcs/tests/Bug_2316_Regression/Makefile.am:
        * orbsvcs/tests/Concurrency/Makefile.am:
        * orbsvcs/tests/CosEvent/Makefile.am:
        * orbsvcs/tests/CosEvent/Basic/Makefile.am:
        * orbsvcs/tests/CosEvent/lib/Makefile.am:
        * orbsvcs/tests/EC_Custom_Marshal/Makefile.am:
        * orbsvcs/tests/EC_MT_Mcast/Makefile.am:
        * orbsvcs/tests/EC_Mcast/Makefile.am:
        * orbsvcs/tests/EC_Multiple/Makefile.am:
        * orbsvcs/tests/EC_Throughput/Makefile.am:
        * orbsvcs/tests/Event/Makefile.am:
        * orbsvcs/tests/Event/Basic/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Common/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Complex/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Simple/Makefile.am:
        * orbsvcs/tests/Event/Mcast/Two_Way/Makefile.am:
        * orbsvcs/tests/Event/Performance/Makefile.am:
        * orbsvcs/tests/Event/lib/Makefile.am:
        * orbsvcs/tests/FT_App/Makefile.am:
        * orbsvcs/tests/FaultTolerance/Makefile.am:
        * orbsvcs/tests/FaultTolerance/GroupRef_Manipulation/Makefile.am:
        * orbsvcs/tests/FaultTolerance/IOGR/Makefile.am:
        * orbsvcs/tests/FaultTolerance/IOGRManipulation/Makefile.am:
        * orbsvcs/tests/FtRtEvent/Makefile.am:
        * orbsvcs/tests/HTIOP/Makefile.am:
        * orbsvcs/tests/HTIOP/AMI/Makefile.am:
        * orbsvcs/tests/HTIOP/BiDirectional/Makefile.am:
        * orbsvcs/tests/HTIOP/Hello/Makefile.am:
        * orbsvcs/tests/IOR_MCast/Makefile.am:
        * orbsvcs/tests/ImplRepo/Makefile.am:
        * orbsvcs/tests/ImplRepo/NameService/Makefile.am:
        * orbsvcs/tests/ImplRepo/scale/Makefile.am:
        * orbsvcs/tests/InterfaceRepo/Makefile.am:
        * orbsvcs/tests/InterfaceRepo/Application_Test/Makefile.am:
        * orbsvcs/tests/InterfaceRepo/IDL3_Test/Makefile.am:
        * orbsvcs/tests/InterfaceRepo/IFR_Inheritance_Test/Makefile.am:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Makefile.am:
        * orbsvcs/tests/InterfaceRepo/Latency_Test/Makefile.am:
        * orbsvcs/tests/InterfaceRepo/Persistence_Test/Makefile.am:
        * orbsvcs/tests/Interoperable_Naming/Makefile.am:
        * orbsvcs/tests/LoadBalancing/Makefile.am:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Makefile.am:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Application_Controlled/Makefile.am:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Infrastructure_Controlled/Makefile.am:
        * orbsvcs/tests/LoadBalancing/GenericFactory/Manage_Object_Group/Makefile.am:
        * orbsvcs/tests/LoadBalancing/LoadMonitor/Makefile.am:
        * orbsvcs/tests/LoadBalancing/LoadMonitor/CPU/Makefile.am:
        * orbsvcs/tests/Log/Makefile.am:
        * orbsvcs/tests/Log/Basic_Log_Test/Makefile.am:
        * orbsvcs/tests/Miop/Makefile.am:
        * orbsvcs/tests/Miop/McastHello/Makefile.am:
        * orbsvcs/tests/Notify/Makefile.am:
        * orbsvcs/tests/Notify/Basic/Makefile.am:
        * orbsvcs/tests/Notify/Blocking/Makefile.am:
        * orbsvcs/tests/Notify/Destroy/Makefile.am:
        * orbsvcs/tests/Notify/Discarding/Makefile.am:
        * orbsvcs/tests/Notify/Driver/Makefile.am:
        * orbsvcs/tests/Notify/MT_Dispatching/Makefile.am:
        * orbsvcs/tests/Notify/Ordering/Makefile.am:
        * orbsvcs/tests/Notify/PluggableTopology/Makefile.am:
        * orbsvcs/tests/Notify/RT_lib/Makefile.am:
        * orbsvcs/tests/Notify/Reconnecting/Makefile.am:
        * orbsvcs/tests/Notify/Sequence_Multi_ETCL_Filter/Makefile.am:
        * orbsvcs/tests/Notify/Sequence_Multi_Filter/Makefile.am:
        * orbsvcs/tests/Notify/Structured_Filter/Makefile.am:
        * orbsvcs/tests/Notify/Structured_Multi_Filter/Makefile.am:
        * orbsvcs/tests/Notify/Test_Filter/Makefile.am:
        * orbsvcs/tests/Notify/XML_Persistence/Makefile.am:
        * orbsvcs/tests/Notify/lib/Makefile.am:
        * orbsvcs/tests/Notify/performance-tests/Makefile.am:
        * orbsvcs/tests/Notify/performance-tests/Filter/Makefile.am:
        * orbsvcs/tests/Notify/performance-tests/RedGreen/Makefile.am:
        * orbsvcs/tests/Notify/performance-tests/Throughput/Makefile.am:
        * orbsvcs/tests/Property/Makefile.am:
        * orbsvcs/tests/Redundant_Naming/Makefile.am:
        * orbsvcs/tests/Sched/Makefile.am:
        * orbsvcs/tests/Sched_Conf/Makefile.am:
        * orbsvcs/tests/Security/Makefile.am:
        * orbsvcs/tests/Security/BiDirectional/Makefile.am:
        * orbsvcs/tests/Security/Big_Request/Makefile.am:
        * orbsvcs/tests/Security/Callback/Makefile.am:
        * orbsvcs/tests/Security/Crash_Test/Makefile.am:
        * orbsvcs/tests/Security/MT_IIOP_SSL/Makefile.am:
        * orbsvcs/tests/Security/MT_SSLIOP/Makefile.am:
        * orbsvcs/tests/Security/Secure_Invocation/Makefile.am:
        * orbsvcs/tests/Security/ssliop_corbaloc/Makefile.am:
        * orbsvcs/tests/Simple_Naming/Makefile.am:
        * orbsvcs/tests/Time/Makefile.am:
        * orbsvcs/tests/Trading/Makefile.am:
        * orbsvcs/tests/ior_corbaname/Makefile.am:
        * orbsvcs/tests/tests_svc_loader/Makefile.am:
        * performance-tests/Makefile.am:
        * performance-tests/Anyop/Makefile.am:
        * performance-tests/CSD_Strategy/Makefile.am:
        * performance-tests/CSD_Strategy/TestApps/Makefile.am:
        * performance-tests/CSD_Strategy/TestInf/Makefile.am:
        * performance-tests/CSD_Strategy/TestServant/Makefile.am:
        * performance-tests/Callback/Makefile.am:
        * performance-tests/Cubit/Makefile.am:
        * performance-tests/Cubit/TAO/Makefile.am:
        * performance-tests/Cubit/TAO/DII_Cubit/Makefile.am:
        * performance-tests/Cubit/TAO/IDL_Cubit/Makefile.am:
        * performance-tests/Cubit/TAO/MT_Cubit/Makefile.am:
        * performance-tests/Latency/Makefile.am:
        * performance-tests/Latency/AMH_Single_Threaded/Makefile.am:
        * performance-tests/Latency/AMI/Makefile.am:
        * performance-tests/Latency/Collocation/Makefile.am:
        * performance-tests/Latency/DII/Makefile.am:
        * performance-tests/Latency/DSI/Makefile.am:
        * performance-tests/Latency/Deferred/Makefile.am:
        * performance-tests/Latency/Single_Threaded/Makefile.am:
        * performance-tests/Latency/Thread_Per_Connection/Makefile.am:
        * performance-tests/Latency/Thread_Pool/Makefile.am:
        * performance-tests/Memory/Makefile.am:
        * performance-tests/Memory/IORsize/Makefile.am:
        * performance-tests/Memory/Single_Threaded/Makefile.am:
        * performance-tests/POA/Makefile.am:
        * performance-tests/POA/Create_Reference/Makefile.am:
        * performance-tests/POA/Demux/Makefile.am:
        * performance-tests/POA/Implicit_Activation/Makefile.am:
        * performance-tests/POA/Object_Creation_And_Registration/Makefile.am:
        * performance-tests/Pluggable/Makefile.am:
        * performance-tests/Protocols/Makefile.am:
        * performance-tests/RTCorba/Makefile.am:
        * performance-tests/RTCorba/Multiple_Endpoints/Makefile.am:
        * performance-tests/RTCorba/Multiple_Endpoints/Common/Makefile.am:
        * performance-tests/RTCorba/Multiple_Endpoints/Orb_Per_Priority/Makefile.am:
        * performance-tests/RTCorba/Multiple_Endpoints/Single_Endpoint/Makefile.am:
        * performance-tests/RTCorba/Oneways/Makefile.am:
        * performance-tests/RTCorba/Oneways/Reliable/Makefile.am:
        * performance-tests/RTCorba/Thread_Pool/Makefile.am:
        * performance-tests/Sequence_Latency/Makefile.am:
        * performance-tests/Sequence_Latency/AMH_Single_Threaded/Makefile.am:
        * performance-tests/Sequence_Latency/AMI/Makefile.am:
        * performance-tests/Sequence_Latency/DII/Makefile.am:
        * performance-tests/Sequence_Latency/DSI/Makefile.am:
        * performance-tests/Sequence_Latency/Deferred/Makefile.am:
        * performance-tests/Sequence_Latency/Single_Threaded/Makefile.am:
        * performance-tests/Sequence_Latency/Thread_Per_Connection/Makefile.am:
        * performance-tests/Sequence_Latency/Thread_Pool/Makefile.am:
        * performance-tests/Throughput/Makefile.am:
        * tao/Makefile.am:
        * utils/Makefile.am:
        * utils/catior/Makefile.am:
        * utils/nslist/Makefile.am:

          Regenerate with latest MPC and *.mpc/*.mpb changes.

Fri Apr 21 09:25:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport_Connector.cpp:
          Removed the fix for bug 2417, according to the test stats things
          didn't got fixed.

Fri Apr 21 08:18:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/String_Traits_Base_T.h:
          Disabled the warning when wchar_t is not a native type. This
          makes the vxworks logs unreadable.

Fri Apr 21 08:11:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/tests/Trading/TTest.idl:
          Use the CORBA predefined sequence types

Fri Apr 21 07:38:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/IFRService/IFR_BaseS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_BasicS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.cpp:
        * orbsvcs/orbsvcs/IFRService/IFR_ExtendedS.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Connector.cpp:
        * orbsvcs/orbsvcs/FaultTolerance/FT_ClientPolicy_i.inl:
        * orbsvcs/orbsvcs/Notify/ETCL_Filter.h:
        * orbsvcs/orbsvcs/Notify/EventTypeSeq.cpp:
        * examples/Kokyu_dsrt_schedulers/FP_Scheduler.cpp:
        * examples/Kokyu_dsrt_schedulers/MIF_Scheduler.cpp:
        * examples/Kokyu_dsrt_schedulers/MUF_Scheduler.cpp:
        * tests/Smart_Proxies/Collocation/Smart_Proxy_Impl.cpp:
          Removed usage of ACE_NESTED_CLASS

Thu Apr 20 14:41:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/extra_core.mpb:
        * tao/tao.mpc:
          Moved ServicesC.cpp to tao.mpc

Thu Apr 20 14:24:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Bounded_Sequence_CDR_T.h:
        * tao/Unbounded_Sequence_CDR_T.h:
          Include orbconf.h instead of one of the sequence header files

Thu Apr 20 13:37:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Asynch_Reply_Dispatcher_Base.{h,cpp}:
        * tao/ObjectKey_Table.cpp:
        * tao/Refcounted_ObjectKey.{h,cpp,inl}:
          Made the refcounts CORBA::ULong and only return the refcount
          from the incr/decr methods when really needed, using the refcount
          form external is always tricky. Fixes bugzilla bug 2505.

Thu Apr 20 12:28:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        Integrated ondemand branch to cvs head. This makes an ondemand write
        possible. The user specified maximum is at this moment not a hard
        maximum, it is more an indication how large the GIOP fragments
        should become, we can send out smaller and larger fragments if needed.

        * tao/tests/Ondemand_Write/*:
          New test

        Mon Apr  3 12:30:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/On_Demand_Fragmentation_Strategy.cpp:
          Print the debug message after we padded it so that sizes do match
          in the logs

        * tao/GIOP_Message_Base.cpp:
          For fragments also retrieve the request/reply id

        * tests/Ondemand_Write:
          Simple test for ondemand write, needs now inspection of output to
          check if things work ok

        Mon Apr  3 07:19:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/CDR.h:
          Commented out write_octet_array decleration, there is no
          implementation yet.

        Thu Mar 30 13:02:18 UTC 2006  Chad Elliott  <elliott_c@ociweb.com>

        * orbsvcs/orbsvcs/PortableGroup/UIPMC_Transport.cpp:
          Added the missing transport parameter to the TAO_GIOP_Message_Base
          constructor.

        Thu Mar 30 12:41:17 UTC 2006  Chad Elliott  <elliott_c@ociweb.com>

        * tao/CDR.cpp:
        * tao/On_Demand_Fragmentation_Strategy.cpp:

          Fixed checks for return values.

        Wed Mar 22 20:13:22 UTC 2006  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/Messaging/Asynch_Invocation.cpp (remote_invocation):

          Added missing GIOP fragmentation support.

        Wed Mar 22 13:53:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/ORB_Core.h:
          Fixed warning of the Intel compiler

        Wed Mar 22 01:33:47 UTC 2006  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/CDR.cpp:
        * tao/CDR.h:
        * tao/CDR.i:
        * tao/GIOP_Message_Base.cpp:
        * tao/GIOP_Message_Base.h:
        * tao/GIOP_Message_Generator_Parser.h:
        * tao/GIOP_Message_Generator_Parser_10.cpp:
        * tao/GIOP_Message_Generator_Parser_10.h:
        * tao/GIOP_Message_Generator_Parser_12.cpp:
        * tao/GIOP_Message_Generator_Parser_12.h:
        * tao/GIOP_Message_Lite.cpp:
        * tao/GIOP_Message_Lite.h:
        * tao/ORB_Core.cpp:
        * tao/On_Demand_Fragmentation_Strategy.cpp:
        * tao/Pluggable_Messaging.h:
        * tao/Remote_Invocation.cpp:
        * tao/Synch_Invocation.cpp:
        * tao/TAO_Server_Request.cpp:
        * tao/default_resource.cpp:
        * tao/PortableServer/Upcall_Wrapper.cpp:

          Added remaining code necessary to send fragments through the
          underlying transport.

          Added missing outgoing GIOP reply fragment support.

        Tue Mar 21 22:18:45 UTC 2006  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * docs/Options.html:

          Document new "-ORBMaxMessageSize" ORB option.

        Tue Mar 21 15:16:43 UTC 2006  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/GIOP_Message_Base.cpp (set_giop_flags):

          Cast CDR stream buffer to an array of octets.

        * tao/GIOP_Message_Base.h (set_giop_flags):

          Added missing method declaration.

        * tao/Resource_Factory.h (fragmentation_strategy):
        * tao/default_resource.cpp:
        * tao/default_resource.h:

          Made factory method name consistent with existing naming
          convention, i.e. create_fragmentation_strategy().

          Corrected return value.  It should have been
          auto_ptr<TAO_GIOP_Fragmentation_Strategy>, not
          TAO_GIOP_Fragmentation_Strategy *.

        * tao/IIOP_Transport.cpp:
        * tao/Strategies/DIOP_Transport.cpp:
        * tao/Strategies/SCIOP_Transport.cpp:
        * tao/Strategies/SHMIOP_Transport.cpp:
        * tao/Strategies/UIOP_Transport.cpp:
        * orbsvcs/orbsvcs/HTIOP/HTIOP_Transport.cpp:
        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_Transport.cpp:

          The TAO_GIOP_Message_Base constructor now accepts a pointer to
          TAO_Transport parameter.  Updated constructor call accordingly.

        * tao/CDR.h:
        * tao/CDR.i:
        * tao/CDR.cpp:

          Added missing fragmentation-enabling constructor and
          fragmentation flag accessors.

          Removed legacy initial implementa code.  Addresses build
          errors.

        * tao/GIOP_Fragmentation_Strategy.h (TAO_GIOP_Fragmentation_Strategy):

          Export to allow users to provide their own implementation
          through the resource factory.

          (fragment):

          Return an "int" instead of "void".  Allows the error status of
          the underlying transport send to be propagated up the stack.

        * tao/Null_Fragmentation_Strategy.h (fragment):
        * tao/Null_Fragmentation_Strategy.cpp (fragment):
        * tao/On_Demand_Fragmentation_Strategy.h (fragment):
        * tao/On_Demand_Fragmentation_Strategy.cpp (fragment):

          Likewise.

        * tao/operation_details.cpp (marshal_args):

          Mark the CDR as having no other fragments to send after all
          arguments have been marshaled, not before the last one is
          marshaled.

        * ORB_Core.h (fragmentation_Strategy):

          Added missing transport parameter.

          Removed const qualifier.  The resource_factory() accessor isn't
          a const method.

        * ORB_Core.cpp (fragmentation_strategy):

          Likewise.

        * params.h:
        * params.i:
        * params.cpp:

          Added missing max_message_size attribute.

        Fri Mar 17 10:59:02 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Resource_Factory.h:
          Added missing include of Basic_Types and added forward declarations

        * tao/On_Demand_Fragmentation_Strategy.h:
          Fixed copy constructor/assignment operators

        * tao/CDR.h:
          Removed do_fragmentation method, there is no implementation, added
          fragment_stream

        * tao/CDR.i:
          Fixed typo

        * tao/default_resource.cpp:
          Added missing includes and updated signature of
          create_fragmentation_strategy to match header file

        Fri Mar 17 07:48:02 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

          Updated code after update from Ossama Othman

        * tao/On_Demand_Fragmentation_Strategy.{h,cpp}:
          New files

        * tao/default_resource.{h,cpp}:
          Added create_fragmentation_strategy

        * tao/GIOP_Fragmentation_Strategy.h:
          Doxygen improvements

        * tao/Resource_Factory.h:
          Added pure virtual fragmentation_strategy method

        * tao/ORB_Core.{h,cpp}:
          Added fragmentation_strategy accessor method

        * tao/GIOP_Message_Base.{h,cpp}:
          Added TAO_Transport to the constructor arguments

        * tao/GIOP_Message_Base.cpp:
          Added come comments

        * tao/True_Fragmentation_Strategy.{h,cpp}:
          Removed again, replaced by On_Demand so far as I can tell

        * tao/tao.mpc:
          Added new files

        Thu Mar 16 07:48:02 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

          Integrated first set of code from Ossama Othman

        * tao/GIOP_Fragmentation_Strategy.{h,cpp}:
        * tao/Null_Fragmentation_Strategy.{h,cpp}:
        * tao/True_Fragmentation_Strategy.{h,cpp}:
          New files

        * tao/operation_details.cpp:
          When marshaling the last argument put this information on the
          cdr_stream

        * tao/GIOP_Message_Base.cpp:
          Some refactoring

        * tao/CDR.{h,cpp,i}:
          Call fragment_stream as part of the streaming calls

Thu Apr 20 11:50:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/sfp.idl:
          Use CORBA::OctetSeq and CORBA::ULongSeq

        * tao/Strategies/SCIOP_Profile.cpp:
          Fixed compile error

Thu Apr 20 08:32:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/examples/FaultTolerance/RolyPoly/ReplicaController.cpp:
          Fixed compile error

Thu Apr 20 07:15:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/SSLIOP/ssl_endpointsC.h:
          Fixed template instantiation

Wed Apr 19 18:24:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/UShortSeqC.h:
        * tao/OctetSeqC.h:
          Do an explicit export of the base template

Wed Apr 19 16:01:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Messaging/ExceptionHolderC.{h,cpp}:
          Added constructor that accepts all values as generated now by the
          IDL compiler

        * tao/Messaging/ExceptionHolder_i.cpp:
          Use the new constructor

Wed Apr 19 14:19:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Exception.h:
          Made the copy constructor public again, vc7.1 complains when
          it is protected. Made a todo in this file again, have to retest
          this later.

Wed Apr 19 13:28:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/SSLIOP/SSLIOP_CredentialsAcquirer.cpp:
        * examples/Advanced/ch_12/icp.cpp:
        * examples/Advanced/ch_21/icp.cpp:
        * examples/Advanced/ch_18/icp.cpp:
        * examples/Advanced/ch_8_and_10/icp.cpp:
        * orbsvcs/orbsvcs/SSLIOP/params_dup.h:
          Removed workarounds for vc6

Wed Apr 19 13:16:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Valuetype/AbstractBase.cpp:
          Use true/false, const improvements

        * tao/Valuetype/AbstractBase.cpp:
          Use C++ cast instead of C cast

Wed Apr 19 13:03:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/AnyTypeCode/Any_Unknown_IDL_Type.h:
          Removed not needed forward declarations

        * tao/AnyTypeCode/Any.cpp:
        * tao/AnyTypeCode/Any_Impl.cpp:
        * tao/BiDir_GIOP/BiDirPolicy_Validator.cpp:
          Use false/true instead of 0/1 for bool

        * tao/PortableServer/Object_Adapter.h:
          Don't export poa_name_iterator and iteratable_poa_name

        * tao/PortableServer/Object_Adapter.cpp:
          Use true/false and when the object adapter can't be found
          throw a OBJECT_NOT_EXIST with minor code 2

Wed Apr 19 12:56:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport_Timer.h:
          No need to export this class from the TAO lib

        * tao/ORB.h:
          Use false for the default of the shutdown method

Wed Apr 19 12:51:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/RTScheduling/MIF_Scheduler/MIF_Scheduler.mpc:
        * examples/RTScheduling/Fixed_Priority_Scheduler/Fixed_Priority_Scheduler.mpc:
          Made these projects dependent on each other to make sure
          that they don't build in parallel and generate the same idl
          file twice at the same moment. Thanks to Chad Elliot for the
          info how to do this the easiest

Wed Apr 19 12:42:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_interface/tie_sh.cpp:
          Generate doxygen documentation style and use true instead of 1

        * TAO_IDL/be/be_visitor_valuetype/any_op_cs.cpp:
          Generate true for boolean instead of 1

        * TAO_IDL/be/be_visitor_valuetype/field_ch.cpp:
          Generate also argument names in the header file so that doxygen
          can parse IDL generated code

Wed Apr 19 12:38:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushConsumer.{h,cpp,i}:
        * orbsvcs/orbsvcs/CosEvent/CEC_ProxyPushSupplier.{h,i}:
          Use bool and prefix increment/decrement

Wed Apr 19 11:58:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Big_Oneways/run_test.pl:
        * tests/Hello/run_test.pl:
        * performance-tests/Throughput/run_test.pl:
          Check the return value of spawn, speedsup the builds when no
          executable is build

        * performance-tests/Throughput/Receiver.cpp:
          Prefix increment

        * performance-tests/Throughput/Receiver_Factory.cpp:
          Initialise pointer with 0

        * performance-tests/Throughput/Throughput.mpc:
          Simplified

Wed Apr 19 11:39:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        Integrated iioptbranch. This fixes bugzilla 2467

        * tao/RTPortableServer/RT_Servant_Dispatcher.cpp:
        No need to include IIOP files, just use the base classes

        Wed Mar 29 08:01:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/default_resource.cpp
        * tao/IIOP_Acceptor.cpp
        * tao/IIOP_Acceptor.h
        * tao/IIOP_Acceptor.i
        * tao/IIOP_Connection_Handler.cpp
        * tao/IIOP_Connection_Handler.h
        * tao/IIOP_Connector.cpp
        * tao/IIOP_Connector.h
        * tao/IIOP_Endpoint.cpp
        * tao/IIOP_Endpoint.h
        * tao/IIOP_Endpoint.i
        * tao/IIOP_Factory.cpp
        * tao/IIOP_Factory.h
        * tao/IIOP_Lite_Factory.cpp
        * tao/IIOP_Lite_Factory.h
        * tao/IIOP_Profile.cpp
        * tao/IIOP_Profile.h
        * tao/IIOP_Transport.cpp
        * tao/IIOP_Transport.h
        * tao/orbconf.h
        * tao/TAO_Internal.cpp
        Added TAO_HAS_IIOP. This is default set to 1 but can be overridden
        in the config.h file to 0 meaning we don't support IIOP. This is
        usefull for embedded systems that support one of the other
        pluggable protocols and don't need IIOP support at all. With
        TAO_HAS_IIOP set to 0 not everything will compile, just the
        core libs itself.

Wed Apr 19 07:48:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        Integrated sequpdate3 branch. Thanks to Carlos O'Ryan for the initial
        work for this new sequence implementation which I merged to cvs head
        and finished

        This fixes the following bugzilla entries:
        2492 - Simplify TAO_Seq_Out_T
        2493 - Simplify _reset method on union generated code
        2352 - Valuefactory operations not safe
        2353 - Valuefactories stored per process instead of per orb
        2349 - ORB::destroy() should throw BAD_INV_ORDER if called during a
        2315 - Reimplement (w)string_var/_out as templates
        1989 - Footprint reduction issue, split Sequence files
        2273 - Deprecate old AMI support
        2300 - Simplify serialize/deserialize of sequences
        2299 - Reimplement string/wstring managers as templates
        1936 - Unnecessary usage of virtual functions in sequence implementation
        1673 - operator[] of sequence<string> returns TAO_SeqElem_String_Manager
        instead of TAO_String_Manager. Thanks to Mark Paulus <mark dot paulus
        at mci dot com> for reporting this one.
        1930 - Assignment operator for sequences is not exception safe.
        1931 - The length() member function for sequences is not exception-safe.
        1933 - Incomplete implementation of freebuf() for reference types.
        1934 - const version of operator[] for string sequences allows assignment
        1938 - Possible incorrect duplication in sequences of references
        1928 - Assignment from T_mgr to sequence elements does not duplicate
        2417 - Double delete on Transport when using oneways with sync_none
        Thanks to Jan Ohlenburg <jan dot ohlenburg at fit dot fraunhofer dot de>
        for reporting this.
        2355 - oneway op. with timeout crashes client due to server termination
        Thans to Jan Zima <jan dot zima at sofis dot cz> for reporting this.

        Also did several const changes throughout the code

        Fri Apr  7 08:03:12 UTC 2006  Kees van Marle  <kvmarle@remedy.nl>

        * tao/Valuetype_Adapter_Factory.{h,cpp}:
        New files, value type adapter factory

        * tao/tao.mpc:
        Added new files

        * tao/Valuetype/Valuetype_Adapter_Factory_Impl.h:
        Value type adapter factory implementation

        * tao/Valuetype/ValueFactory_Map.{h,cpp}:
        Map isn't a singleton anymore and guard access with a mutex

        * tao/Valuetype/Valuetype_Adapter_Impl.{h,cpp}:
        The value type adapter isn't loaded with service configurator
        anymore, the value type factory is now the one we load on demand

        * tao/ORB.cpp:
        Updated the value type methods to use the new ORB_Core method
        to get the valuetype adapter, is the ORB_Core can't get the
        adapter it will throw already the internal exception

        * tao/ORB_Core.{h,cpp,i}:
        Get the value type adapter factory with svc conf instead of the
        adapter itself. Create a unique instance per orb.

        * tao/AnyTypeCode/Any_Unknown_IDL_Type.cpp:
        * tao/AnyTypeCode/append.cpp:
        * tao/AnyTypeCode/skip.cpp:
        Changed the way we get the valuetype adapter

        Store the value type factories per orb and made things thread safe.
        This fixes bugzilla bugs 2352 and 23253.

        Thu Apr  6 09:17:25 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport_Connector.cpp:
        Applied fix of bug 2417, let us see what the results are in the
        branch build

        Thu Apr  6 09:08:25 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * examples/POA/FindPOA/FindPOA.cpp:
        * tests/Bug_2349_Regression/client.cpp:
        * tests/Bug_2349_Regression/foo.idl:
        * tests/Bug_2349_Regression/server.cpp:
        Improved tests

        * tao/Adapter_Registry.{h,cpp}:
        Remove the empty throw spec for close and check_close. This way
        exceptions from lower layers are propagated up.

        * tao/ORB_Core.{h,cpp}:
        Removed empty throw spec from shutdown, if there are exceptions from
        a lower layer and as a result we can't shutdown, let the user be
        aware of it. This fixes bugzilla bug 2349

        Mon Apr  3 07:59:25 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO/IDL/be/be_visitor_union/discriminant_ci.cpp
        * TAO/IDL/be/be_visitor_union/union_ch.cpp
        * TAO/IDL/be/be_visitor_union/union_cs.cpp
        * TAO/IDL/be/be_visitor_union_branch/public_ci.cpp
        * tao/GIOPC.{h,cpp,inl}:
        Removed arguments from the _reset method on the union generated,
        these are not used.

        Sun Apr  2 18:56:25 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * TAO_IDL/be/be_visitor_exception/exception_ch.cpp
        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp
        * TAO_IDL/be/be_visitor_valuebox/valuebox_ch.cpp
        * tao/BooleanSeqC.h
        * tao/CONV_FRAMEC.h
        * tao/CharSeqC.h
        * tao/DomainC.h
        * tao/DoubleSeqC.h
        * tao/FloatSeqC.h
        * tao/IIOPC.h
        * tao/IIOP_EndpointsC.h
        * tao/IOP_IORC.h
        * tao/LongDoubleSeqC.h
        * tao/LongLongSeqC.h
        * tao/LongSeqC.h
        * tao/Messaging_PolicyValueC.h
        * tao/ORB.h
        * tao/ObjectIdListC.h
        * tao/Object_KeyC.h
        * tao/OctetSeqC.h
        * tao/Policy_ForwardC.h
        * tao/Seq_Out_T.h
        * tao/Seq_Out_T.inl
        * tao/ServicesC.h
        * tao/ShortSeqC.h
        * tao/StringSeqC.h
        * tao/ULongLongSeqC.h
        * tao/ULongSeqC.h
        * tao/UShortSeqC.h
        * tao/WCharSeqC.h
        * tao/WStringSeqC.h
        * tao/AnyTypeCode/AnySeqC.h
        * tao/AnyTypeCode/DynamicC.h
        * tao/DynamicAny/DynamicAnyC.h
        * tao/IFR_Client/IFR_BaseC.h
        * tao/IFR_Client/IFR_BasicC.h
        * tao/IFR_Client/IFR_ComponentsC.h
        * tao/IFR_Client/IFR_ExtendedC.h
        * tao/IORManipulation/IORC.h
        * tao/ImR_Client/ImplRepoC.h
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.h
        * tao/PortableServer/PortableServerC.h
        * tao/RTCORBA/RTCORBAC.h
        * tao/RTScheduling/RTSchedulerC.h
        * tao/Strategies/sciop_endpointsC.h
        * tao/Strategies/uiop_endpointsC.h
        Simplified TAO_Seq_Out_T to just use one template argument. Updated
        the IDL compiler for this. Also use false for the release argument
        of generated sequence constructors and add an argument to
        _tao_encode/_tao_decode when generated in a header file to help
        doxygen.

        * TAO_Objref_Out_T.{h,inl}:
        Assinging _var to _out is not allowed according to the spec

        * tao/Messaging/*:
        Removed old AMI mapping. Fixes partly bugzilla bug 2273, need to
        update the IDL compiler yet

        * tao/Exception.h:
        Moved constructors, assignment operator and copy constructor to
        protected now vc6 has been dropped. Also moved
        create_system_exception from TAO_Exceptions class to TAO namespace

        * tao/Messaging/Messaging.cpp:
        * tao/Sync_Invocation.cpp:
        * tao/SystemException.cpp:
        Updated because of the create_system_exception move

        * tao/String_Manager_T.h:
        Renamed String_Manager to String_Manager_T, this way we can have
        TAO::String_Manager and TAO::WString_Manager. These replace
        TAO_String_Manager and TAO_WString_Manager

        * CIAO/tools/Config_Handlers/DnC_Dump.cpp
        * CIAO/tools/Config_Handlers/DnC_Dump.h
        * TAO_IDL/be/be_visitor_array/array.cpp
        * TAO_IDL/be/be_visitor_field/field_ch.cpp
        * orbsvcs/PSS/PSDL_Exception_Visitor.cpp
        * orbsvcs/PSS/PSDL_Node.h
        * orbsvcs/PSS/PSDL_Struct_Visitor.cpp
        * orbsvcs/orbsvcs/HTIOP/htiop_endpointsC.h
        * orbsvcs/orbsvcs/Metrics/Metrics_UpcallMonitor_T.h
        * orbsvcs/orbsvcs/Metrics/Metrics_UpcallMonitor_T.i
        * orbsvcs/orbsvcs/Notify/ETCL_Filter.cpp
        * orbsvcs/orbsvcs/PortableGroup/PG_Object_Group.h
        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.cpp
        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.h
        * tao/CORBA_String.h
        * tao/IIOPC.h
        * tao/IIOP_EndpointsC.h
        * tao/IOP_IORC.h
        * tao/String_Manager_T.h
        * tao/String_Traits_Base_T.h
        * tao/Tagged_Profile.h
        * tao/DynamicAny/DynamicAnyC.h
        * tao/IFR_Client/IFR_BaseC.h
        * tao/IFR_Client/IFR_BasicC.h
        * tao/IFR_Client/IFR_ComponentsC.h
        * tao/IFR_Client/IFR_ExtendedC.h
        * tao/ImR_Client/ImplRepoC.h
        * tao/PI/ORBInitInfoC.h
        * tao/Strategies/sciop_endpointsC.h
        * tao/Strategies/uiop_endpointsC.h
        Updated all these files because of TAO::String_Manager and
        TAO::WString_Manager introduction

        * tests/Sequence_Unit_Tests/mock_reference.cpp:
        * tests/Sequence_Unit_Tests/mock_reference.hpp:
        Added counter to count number of marshal calls

        * tests/Sequence_Unit_Tests/bounded_sequence_cdr_ut.cpp:
        * tests/Sequence_Unit_Tests/unbounded_sequence_cdr_ut.cpp:
        Check the right counter, should be marshal.

        * tao/PI/ClientRequestDetails.cpp:
        * tao/PI_Server/ServerRequestDetails.cpp:
        Added missing duplicate call

        * TAO_IDL/be/be_interface.cpp
        * TAO_IDL/be/be_visitor_component/component_cs.cpp
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp
        * TAO_IDL/be/be_visitor_interface/tie_si.cpp
        * TAO_IDL/be/be_visitor_root/root.cpp
        * tao/CurrentC.cpp
        * tao/DomainC.cpp
        * tao/ORB_Core.cpp
        * tao/Object.cpp
        * tao/Object_Ref_Table.cpp
        * tao/PolicyC.cpp
        * tao/Pseudo_VarOut_T.cpp
        * tao/Pseudo_VarOut_T.inl
        * tao/TAOC.cpp
        * tao/AnyTypeCode/Any_Array_Impl_T.cpp
        * tao/AnyTypeCode/Any_Basic_Impl.cpp
        * tao/AnyTypeCode/Any_Basic_Impl_T.cpp
        * tao/AnyTypeCode/Any_Dual_Impl_T.cpp
        * tao/AnyTypeCode/Any_Impl.cpp
        * tao/AnyTypeCode/Any_Impl_T.cpp
        * tao/AnyTypeCode/Any_Special_Impl_T.cpp
        * tao/AnyTypeCode/Any_Unknown_IDL_Type.cpp
        * tao/AnyTypeCode/TypeCode.cpp
        * tao/AnyTypeCode/TypeCode.inl
        * tao/BiDir_GIOP/BiDirPolicyC.cpp
        * tao/CSD_Framework/CSD_Default_Servant_Dispatcher.cpp
        * tao/CSD_Framework/CSD_FrameworkC.cpp
        * tao/CSD_Framework/CSD_POA.cpp
        * tao/CodecFactory/IOP_CodecC.cpp
        * tao/DynamicAny/DynamicAnyC.cpp
        * tao/DynamicInterface/Dynamic_Implementation.cpp
        * tao/DynamicInterface/ExceptionList.cpp
        * tao/DynamicInterface/Request.cpp
        * tao/DynamicInterface/Server_Request.cpp
        * tao/IFR_Client/IFR_BaseC.cpp
        * tao/IFR_Client/IFR_BasicC.cpp
        * tao/IFR_Client/IFR_Client_Adapter_Impl.cpp
        * tao/IFR_Client/IFR_ComponentsC.cpp
        * tao/IFR_Client/IFR_ExtendedC.cpp
        * tao/IORInterceptor/IORInfoC.cpp
        * tao/IORInterceptor/IORInterceptorC.cpp
        * tao/IORManipulation/IORC.cpp
        * tao/IORManipulation/IORManipulation.cpp
        * tao/IORTable/IORTableC.cpp
        * tao/IORTable/Table_Adapter.cpp
        * tao/ImR_Client/ImplRepoC.cpp
        * tao/ImR_Client/ServerObjectC.cpp
        * tao/Messaging/MessagingC.cpp
        * tao/Messaging/Messaging_No_ImplC.cpp
        * tao/Messaging/Messaging_RT_PolicyC.cpp
        * tao/Messaging/Messaging_SyncScope_PolicyC.cpp
        * tao/Messaging/PollableC.cpp
        * tao/Messaging/TAO_ExtC.cpp
        * tao/PI/ClientRequestInfoC.cpp
        * tao/PI/ClientRequestInterceptorC.cpp
        * tao/PI/InterceptorC.cpp
        * tao/PI/ORBInitInfo.cpp
        * tao/PI/ORBInitInfoC.cpp
        * tao/PI/ORBInitializerC.cpp
        * tao/PI/PICurrentC.cpp
        * tao/PI/PolicyFactoryC.cpp
        * tao/PI/PolicyFactory_Registry.cpp
        * tao/PI/ProcessingModePolicyC.cpp
        * tao/PI/RequestInfoC.cpp
        * tao/PI_Server/ServerRequestInfoC.cpp
        * tao/PI_Server/ServerRequestInterceptorC.cpp
        * tao/PortableServer/AdapterActivatorC.cpp
        * tao/PortableServer/IdAssignmentPolicyC.cpp
        * tao/PortableServer/IdUniquenessPolicyC.cpp
        * tao/PortableServer/ImplicitActivationPolicyC.cpp
        * tao/PortableServer/LifespanPolicyC.cpp
        * tao/PortableServer/Object_Adapter.cpp
        * tao/PortableServer/POAManager.cpp
        * tao/PortableServer/POAManagerC.cpp
        * tao/PortableServer/PS_CurrentC.cpp
        * tao/PortableServer/PortableServerC.cpp
        * tao/PortableServer/RequestProcessingPolicyC.cpp
        * tao/PortableServer/Root_POA.cpp
        * tao/PortableServer/ServantActivatorC.cpp
        * tao/PortableServer/ServantLocatorC.cpp
        * tao/PortableServer/ServantManagerC.cpp
        * tao/PortableServer/ServantRetentionPolicyC.cpp
        * tao/PortableServer/ThreadPolicyC.cpp
        * tao/RTCORBA/RTCORBAC.cpp
        * tao/RTPortableServer/RTPortableServerC.cpp
        * tao/RTScheduling/Current.cpp
        * tao/RTScheduling/RTSchedulerC.cpp
        * tao/TypeCodeFactory/TypeCodeFactoryC.cpp
        * tao/Utils/Server_Main.cpp
        * tao/Valuetype/AbstractBase.cpp:
        Use :: before ::CORBA

        * TAO_IDL/be/be_interface.cpp
        * tao/DomainC.cpp
        * tao/DomainC.inl
        * tao/GIOPC.h
        * tao/PolicyC.cpp
        * tao/PolicyC.h
        * tao/PolicyC.inl
        * tao/WrongTransactionC.cpp
        * tao/AnyTypeCode/Alias_TypeCode.inl
        * tao/AnyTypeCode/Alias_TypeCode_Static.inl
        * tao/AnyTypeCode/BoundsC.cpp
        * tao/AnyTypeCode/Empty_Param_TypeCode.inl
        * tao/AnyTypeCode/Enum_TypeCode.inl
        * tao/AnyTypeCode/Enum_TypeCode_Static.inl
        * tao/AnyTypeCode/Fixed_TypeCode.inl
        * tao/AnyTypeCode/Objref_TypeCode.inl
        * tao/AnyTypeCode/Objref_TypeCode_Static.inl
        * tao/AnyTypeCode/Recursive_Type_TypeCode.cpp
        * tao/AnyTypeCode/Sequence_TypeCode.inl
        * tao/AnyTypeCode/Sequence_TypeCode_Static.inl
        * tao/AnyTypeCode/String_TypeCode.inl
        * tao/AnyTypeCode/String_TypeCode_Static.inl
        * tao/AnyTypeCode/Struct_TypeCode.inl
        * tao/AnyTypeCode/Struct_TypeCode_Static.inl
        * tao/AnyTypeCode/Union_TypeCode.inl
        * tao/AnyTypeCode/Union_TypeCode_Static.inl
        * tao/AnyTypeCode/Value_TypeCode.inl
        * tao/AnyTypeCode/Value_TypeCode_Static.inl
        * tao/BiDir_GIOP/BiDir_Policy_i.cpp
        * tao/CodecFactory/IOP_CodecC.cpp
        * tao/Domain/DomainS.cpp
        * tao/DynamicAny/DynamicAnyC.cpp
        * tao/IFR_Client/IFR_BaseC.cpp
        * tao/IFR_Client/IFR_BaseC.h
        * tao/IFR_Client/IFR_BaseC.inl
        * tao/IFR_Client/IFR_BasicC.cpp
        * tao/IFR_Client/IFR_BasicC.h
        * tao/IFR_Client/IFR_BasicC.inl
        * tao/IFR_Client/IFR_ComponentsC.cpp
        * tao/IFR_Client/IFR_ComponentsC.inl
        * tao/IFR_Client/IFR_ExtendedC.cpp
        * tao/IFR_Client/IFR_ExtendedC.h
        * tao/IFR_Client/IFR_ExtendedC.inl
        * tao/IORManipulation/IORC.cpp
        * tao/IORTable/IORTableC.cpp
        * tao/ImR_Client/ImplRepoC.cpp
        * tao/ImR_Client/ImplRepoC.inl
        * tao/ImR_Client/ServerObjectC.cpp
        * tao/ImR_Client/ServerObjectC.inl
        * tao/Messaging/Connection_Timeout_Policy_i.cpp
        * tao/Messaging/MessagingC.cpp
        * tao/Messaging/MessagingC.inl
        * tao/Messaging/Messaging_Policy_i.cpp
        * tao/Messaging/PollableC.cpp
        * tao/PI/InvalidSlotC.cpp
        * tao/PI/ORBInitInfoC.cpp
        * tao/PI/PIForwardRequestC.cpp
        * tao/PortableServer/ForwardRequestC.cpp
        * tao/PortableServer/POAManagerC.cpp
        * tao/PortableServer/PS_CurrentC.cpp
        * tao/PortableServer/PortableServerC.cpp
        * tao/RTCORBA/RTCORBAC.cpp
        * tao/RTCORBA/RT_Policy_i.cpp
        * tao/RTScheduling/RTSchedulerC.cpp
        * tao/TypeCodeFactory/Recursive_TypeCode.inl
        * tao/Valuetype/StringValueC.inl
        Removed ACE_NESTED_CLASS

        * TAO_IDL/ast/ast_type.cpp
        * TAO_IDL/be/be_interface.cpp
        * TAO_IDL/be/be_visitor_component/component_ci.cpp
        * TAO_IDL/be/be_visitor_component/component_cs.cpp
        * TAO_IDL/be/be_visitor_exception/exception_cs.cpp
        * TAO_IDL/be/be_visitor_interface/amh_ss.cpp
        * TAO_IDL/be/be_visitor_interface/interface_ci.cpp
        * TAO_IDL/be/be_visitor_interface/interface_cs.cpp
        * TAO_IDL/be/be_visitor_interface/interface_is.cpp
        * TAO_IDL/be/be_visitor_operation/ami_cs.cpp
        * TAO_IDL/be/be_visitor_operation/operation.cpp
        * TAO_IDL/be/be_visitor_valuebox/valuebox_ci.cpp
        * TAO_IDL/be/be_visitor_valuetype/marshal_cs.cpp
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp
        * TAO_IDL/be/be_visitor_valuetype/valuetype_obv_cs.cpp
        * TAO_IDL/be/be_visitor_valuetype/valuetype_ss.cpp
        Removed generation of ACE_NESTED_CLASS, just use A::B instead

        All changes below is the merge of the branch sequenceupdate to
        sequpdate2. This is the new sequence implementation for TAO.

        * tao/Array_VarOut_T.h:
        Only do an empty forward declaration of Array_Traits. This will
        make sure that we have to do each specialization explicitly, if
        we lack one, we get a compile error instead of this empty default
        one.

        * tao/Objref_VarOut_T.h:
        Only do an empty forward declaration of Objref_Traits. This will
        make sure that we have to do each specialization explicitly, if
        we lack one, we get a compile error instead of this empty default
        one.

        * tao/Basic_Types.h:
        Updated the string types, these are implemented by a template now.

        * tao/BooleanSeqC.{h,cpp}:
        * tao/CharSeqC.{h,cpp}:
        * tao/CONV_FRAMEC.{h,cpp}:
        * tao/CurrentC.{h,cpp}:
        * tao/DomainC.{h,cpp}:
        * tao/DoubleSeqC.{h,cpp}:
        * tao/FloatSeqC.{h,cpp}:
        * tao/WStringSeqC.{h,cpp}:
        * tao/LongSeqC.{h,cpp}:
        * tao/WCharSeqC.{h,cpp}:
        * tao/Object_KeyC.{h,cpp}:
        * tao/ObjectIdListC.{h,cpp}:
        * tao/IIOP_EndpointsC.{h,cpp}:
        * tao/LongLongSeqC.{h,cpp}:
        * tao/IIOPC.{h,cpp}:
        * tao/IOP_IORC.{h,cpp}:
        * tao/LongDoubleSeqC.{h,cpp}:
        * tao/Messaging_PolicyValueC.{h,cpp}:
        * tao/OctetSeqC.{h,cpp}:
        * tao/Policy_ForwardC.{h,cpp}:
        * tao/PolicyC.{h,cpp}:
        * tao/ServicesC.{h,cpp}:
        * tao/ShortSeqC.{h,cpp}:
        * tao/StringSeqC.{h,cpp}:
        * tao/TAOC.{h,cpp}:
        * tao/ULongLongSeqC.{h,cpp}:
        * tao/ULongSeqC.{h,cpp}:
        * tao/UShortSeqC.{h,cpp}:
        * tao/AnyTypeCode/AnySeqC.{h,cpp}:
        * tao/AnyTypeCode/DynamicC.{h,cpp}:
        * tao/DynamicAny/DynamicAnyC.{h,cpp}:
        * tao/IFR_Client/IFR_ExtendedC.{h,cpp}:
        * tao/IFR_Client/IFR_ComponentsC.{h,cpp}:
        * tao/IFR_Client/IFR_BasicC.{h,cpp}:
        * tao/IFR_Client/IFR_BaseC.{h,cpp}:
        * tao/ImR_Client/ImplRepoC.{h,cpp}:
        * tao/IORManipulation/IORC.{h,cpp}:
        * tao/ObjRefTemplate/ObjectReferenceTemplateC.{h,cpp}:
        * tao/PortableServer/PortableServerC.{h,cpp}:
        * tao/RTCORBA/RTCORBAC.{h,cpp}:
        * tao/RTScheduling/RTSchedulerC.{h,cpp}:
        * tao/Strategies/sciop_endpointsC.{h,cpp}:
        * tao/Strategies/uiop_endpointsC.{h,cpp}:
        * orbsvcs/orbsvcs/HTIOP/htiop_endpointsC.{h,cpp}:
        Updated all these files because of the changes to the sequence
        implementation. The base classes are changed including the way we
        marshal and demarshal sequences. The argument to the marshal method
        is also const.

        * tao/Bounded_Array_Allocation_Traits.h:
        * tao/Bounded_Reference_Allocation_Traits_T.h:
        * tao/Bounded_Value_Allocation_Traits_T.h:
        New allocation traits for bounded sequences

        * tao/Value_Traits_T.h:
        New value traits.

        * tao/Bounded_Array_Sequence_T.h:
        New template for Bounded Array Sequences

        * tao/Bounded_Basic_String_Sequence_T.h:
        * tao/Bounded_String_Sequence_T.h:
        * tao/Bounded_Wstring_Sequence_T.h:
        New template for bounded strings, derived are string and wstring
        bounded sequences

        * tao/Bounded_Object_Reference_Sequence_T.h:
        New template for bounded object reference sequences

        New allocation traits for bounded reference

        * tao/Bounded_Sequence_CDR_T.h:
        Template method for sequence marshal/demarshal

        * tao/corba.h:
        Updated includes, Managed_Types.h is replaced with
        String_Manager_T.h

        * tao/CORBA_String.{h,cpp,inl}:
        The CORBA::String_var/_out and CORBA::WString_var/_out are now
        implemented with the new TAO::String_var/_out template

        * tao/Generic_Sequence_T.h:
        New generic sequence template

        * tao/Managed_Types.{h,cpp,i}:
        Removed these files

        * tao/MProfile.cpp:
        Initialise pointers with 0 and fixed retrieval of a policy

        * tao/Object.{h,cpp}:
        Made the argument of the marshal method const

        * tao/operation_details.i:
        Changed the way we reset the service info

        * tao/ORB.h:
        Updated all typedefs in this file

        * tao/Policy_Set.{h,cpp.i}:
        Made the get_policy_by_index const and fixed the
        set_policy_overrides to work with the new sequences, as a result
        the workarounds could be removed

        * tao/Sequence_T.{cpp,i}:
        Removed these files

        * tao/Sequence_T.h:
        Include all new sequence template files, makes it easy for old apps
        to keep compiling

        * tao/String_Alloc.{h,cpp}:
        All string allocation methods

        * tao/VarOut_T.h:
        Removed THIS_OUT_TYPE typedef

        * tao/DynamicInterface/Request.h:
        Removed include of Sequence.h, not needed

        * tao/Profile.h:
        Updated typedef for TAO_opaque

        * tao/Object_Reference_Sequence_Element_T.h:
        * tao/Object_Reference_Traits_Base_T.h:
        * tao/Object_Reference_Traits_T.h:
        * tao/Range_Checking_T.h:
        New files

        * tao/Seq_Out_T.{h,inl}:
        Removed TAO_MngSeq_Out_T, not needed anymore

        * tao/Sequence.{h,cpp,i}:
        Removed

        * tao/Seq_Var_T.{h,cpp.inl}:
        Removed TAO_MngSeq_Var_T, not needed anymore

        * tao/String_Manager_T.h:
        TAO string manager as template, new file

        * tao/String_Sequence_Element_T.h:
        Element in a string sequence

        * tao/String_Traits_Base_T.h:
        * tao/String_Traits_T.h:
        String traits

        * tao/Unbounded_Array_Allocation_Traits_T.h
        * tao/Unbounded_Array_Sequence_T.h
        * tao/Unbounded_Basic_String_Sequence_T.h
        * tao/Unbounded_Object_Reference_Sequence_T.h
        * tao/Unbounded_Octet_Sequence_T.h
        * tao/Unbounded_Reference_Allocation_Traits_T.h
        * tao/Unbounded_Sequence_CDR_T.h
        * tao/Unbounded_String_Sequence_T.h
        * tao/Unbounded_Value_Allocation_Traits_T.h
        * tao/Unbounded_Value_Sequence_T.h
        * tao/Unbounded_Wstring_Sequence_T.h
        Unbounded sequence files

        * tao/diffs/Object_Key.diff:
        Updated

        * tao/PI/ClientRequestInfo.cpp:
        * tao/PI_Server/ServerRequestInfo.cpp:
        Removed temporary object usage

        * tao/RTCORBA/RT_Stub.cpp:
        * tao/RTScheduling/Request_Interceptor.cpp:
        * tao/TypeCodeFactory/TypeCodeFactory_i.cpp:
        Updated for the fact that an object sequence now returns a _ptr
        on the subscript operators instead of the _var which wasn't
        confirming to the CORBA C++ mapping

        * tao/RTScheduling/Current.h:
        Updated IdType typedef

        * tao/Valuetype/Bounded_Valuetype_Allocation_Traits_T.h
        * tao/Valuetype/Bounded_Valuetype_Sequence_T.h
        * tao/Valuetype/Unbounded_Valuetype_Allocation_Traits_T.h
        * tao/Valuetype/Unbounded_Valuetype_Sequence_T.h
        * tao/Valuetype/Valuetype_Sequence_Element_T.h
        * tao/Valuetype/Valuetype_Traits_Base_T.h
        * tao/Valuetype/Valuetype_Traits_T.h
        New sequence implementated for valuetypes

        * tao/Valuetype/Sequence_T.{cpp,inl}:
        Removed

        * tao/Valuetype/Sequence_T.h:
        Just include the new files, easier for backward compatibility

        * tao/Valuetype/Value_VarOut_T.{h,cpp}:
        Just define an empty Value_Traits, make sure we get all
        specializations

        * TAO_IDL/be/be_codegen.cpp:
        * TAO_IDL/be/be_sequence.cpp:
        * TAO_IDL/be/be_visitor_traits.cpp:
        * TAO_IDL/be/be_visitor_array/array_ch.cpp:
        * TAO_IDL/be/be_visitor_array/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/cdr_op_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array_cs.cpp:
        * TAO_IDL/be/be_visitor_array/array_ci.cpp:
        * TAO_IDL/be/be_visitor_sequence/sequence_ch.cpp:
        * TAO_IDL/be/be_visitor_sequence/serializer_op_cs.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:
        * TAO_IDL/be/be_visitor_typedef/typedef_ci.cpp:
        * TAO_IDL/be/be_visitor_valuebox/valuebox_cs.cpp:
        * TAO_IDL/be/be_visitor_valuetype/valuetype_cs.cpp:
        * TAO_IDL/be_include/be_visitor_traits.h:
        Updated for new sequence implementation

        * examples/CSD_Strategy/ThreadPool4/ClientTask.cpp:
        * examples/CSD_Strategy/ThreadPool5/ClientTask.cpp:
        * examples/Load_Balancing/Identity_Client.cpp:
        * examples/Load_Balancing_persistent/Identity_Client.cpp:
        * examples/POA/NewPOA/NewPOA.cpp:
        * examples/POA/POA_BiDir/POA_BiDir.cpp:
        * tests/CSD_Strategy_Tests/TP_Foo_B/Foo_B_ClientEngine.cpp:
        * tests/DynAny_Test/test_dynsequence.cpp:
        * tests/Sequence_Unit_Tests/*:
        * tests/ORT/ServerRequestInterceptor.cpp:
        * tests/Param_Test/big_union.cpp:
        *
        tests/Portable_Interceptors/ForwardRequest/Client_ORBInitializer.cpp:
        * orbsvcs/IFR_Service/ifr_adding_visitor.cpp:
        * orbsvcs/orbsvcs/DsLogAdmin.idl:
        * orbsvcs/orbsvcs/AV/AVStreams_i.cpp:
        * orbsvcs/orbsvcs/CosEvent/CEC_TypedEventChannel.{cpp,i}:
        * orbsvcs/orbsvcs/ETCL/ETCL_Constraint.{h,cpp,i}
        * orbsvcs/orbsvcs/IFRService/ComponentContainer_i.cpp
        * orbsvcs/orbsvcs/IFRService/ComponentDef_i.cpp
        * orbsvcs/orbsvcs/IFRService/Container_i.cpp
        * orbsvcs/orbsvcs/IFRService/EnumDef_i.cpp
        * orbsvcs/orbsvcs/IFRService/ExtValueDef_i.cpp
        * orbsvcs/orbsvcs/IFRService/HomeDef_i.cpp
        * orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.cpp
        * orbsvcs/orbsvcs/IFRService/InterfaceDef_i.cpp
        * orbsvcs/orbsvcs/IFRService/OperationDef_i.cpp
        * orbsvcs/orbsvcs/IFRService/ValueDef_i.cpp
        * orbsvcs/orbsvcs/LoadBalancing/LB_LoadManager.cpp:
        * orbsvcs/orbsvcs/LoadBalancing/LB_ObjectReferenceFactory.cpp:
        * orbsvcs/orbsvcs/Log/Log_i.h:
        * orbsvcs/orbsvcs/Property/CosPropertyService_i.h:
        * orbsvcs/orbsvcs/Trader/Constraint_Nodes.{h,cpp}
        * orbsvcs/tests/AVStreams/Component_Switching/distributer.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/receiver.cpp:
        * orbsvcs/tests/AVStreams/Component_Switching/sender.cpp:
        * orbsvcs/tests/Bug_1393_Regression/client.cpp:
        * orbsvcs/tests/FT_App/FT_Client.cpp:
        * orbsvcs/tests/InterfaceRepo/IDL3_Test/idl3_client.cpp:
        * orbsvcs/tests/InterfaceRepo/IFR_Test/Admin_Client.cpp:
        *
        orbsvcs/orbsvcs/FtRtEvent/EventChannel/AMI_Primary_Replication_Strategy.cpp:
        * orbsvcs/orbsvcs/FtRtEvent/EventChannel/IOGR_Maker.cpp:
        * tests/RTScheduling/Current/Thread_Task.cpp:
        * tests/RTScheduling/Thread_Cancel/Thread_Task.cpp:
        Updated for sequence implementation

        * tests/Sequence_Unit_Tests/*:
        Removed files that are now in the core TAO lib

Wed Apr 19 07:48:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Bug_2503_Regression/*:
          New regression for bug 2503. Thanks to Carlos O'Ryan for creating
          this test

Tue Apr 18 20:51:48 2006  Wallace Zhang  <zhangw@ociweb.com>

        * TAO version 1.5.1 released.

Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
