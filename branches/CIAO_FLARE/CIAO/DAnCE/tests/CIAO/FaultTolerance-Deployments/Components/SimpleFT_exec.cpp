// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#include "SimpleFT_exec.h"

#include <sstream>
#include <ace/Env_Value_T.h>
#include <ace/Throughput_Stats.h>
#include <orbsvcs/CosNamingC.h>
#include "ciao/CIAO_common.h"
#include "ciao/FTComponentServer/Name_Helper_T.h"
#include "ciao/FTComponentServer/CommonIDL/ReplicationManagerC.h"
#include "ciao/Containers/Container_Base.h"
#include "SimpleFT_svnt.h"

namespace CIDL_SimpleFT_Impl
{
  //==================================================================
  // Component Executor Implementation Class:   SimpleFT_exec_i
  //==================================================================

  SimpleFT_exec_i::SimpleFT_exec_i (void)
    : app_name_ ("SimpleFT_Application"),
      load_ (0.4),
      primary_ (true),
      orb_ (CORBA::ORB::_nil ()),
      agent_ (StateSynchronizationAgent::_nil ()),
      history_ (50),
      state_ (0)
  {
    CIAO_TRACE ("SimpleFT_exec_i::SimpleFT_exec_i (void)");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::SimpleFT_exec_i (void)\n"));
  }

  SimpleFT_exec_i::~SimpleFT_exec_i (void)
  {
    CIAO_TRACE ("SimpleFT_exec_i::~SimpleFT_exec_i");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::~SimpleFT_exec_i\n"));
  }

  // Supported or inherited operations.

  // Attribute operations.

  // Port operations.

  // Operations from Components::SessionComponent

  void
  SimpleFT_exec_i::set_session_context (
    ::Components::SessionContext_ptr ctx)
  {
    CIAO_TRACE ("SimpleFT_exec_i::set_session_context");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::set_session_context\n"));
    this->context_ =
      ::Simple::CCM_SimpleFT_Context::_narrow (ctx);

    if (CORBA::is_nil (this->context_.in ()))
    {
      throw ::CORBA::INTERNAL ();
    }

    CIDL_SimpleFT_Impl::SimpleFT_Context * ft_context = 
      CIDL_SimpleFT_Impl::SimpleFT_Context::_narrow (context_.in ());

    if (0 == ft_context)
      {
	CIAO_ERROR ((LM_ERROR, "could not narrow to SimpleFT_Context\n"));
	return;
      }

    CIAO::Container_var container = ft_context->_ciao_the_Container ();

    CIAO::Container_i * ci = dynamic_cast <CIAO::Container_i*> (container.in ());

    if (ci == 0)
      {
	CIAO_ERROR ((LM_WARNING, "could not cast to Container_i\n"));
	return;
      }

    orb_ = ci->the_ORB ();
  }

  void
  SimpleFT_exec_i::configuration_complete ()
  {
    CIAO_TRACE ("SimpleFT_exec_i::configuration_complete\n");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::configuration_complete\n"));
    // Your code here.
  }

  void
  SimpleFT_exec_i::ccm_activate ()
  {
    CIAO_TRACE ("SimpleFT_exec_i::ccm_activate");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::ccm_activate\n"));

    try 
      {
	if (CORBA::is_nil (orb_.in ()))
	  {
	    CIAO_ERROR ((LM_WARNING, "SimpleFT_exec_i::ccm_activate - orb_ member is nil.\n"));
	    return;
	  }

	// register application with StateSynchronizationAgent
	Name_Helper_T <StateSynchronizationAgent> nh (orb_.in (), true);

	CIAO_DEBUG ((LM_DEBUG, "resolving the StateSynchronizationAgent in the NamingService.\n"));

	std::string ssa_path = "FLARe/" + nh.escape_dots (this->get_hostname ()) + "/" + 
	                       this->get_process_id () + "/StateSynchronizationAgent";

	CIAO_DEBUG ((LM_DEBUG, "\tpath = %s\n", ssa_path.c_str ()));

	agent_ = nh.resolve (ssa_path);

	if (CORBA::is_nil (agent_.in ()))
	  {
	    CIAO_ERROR ((LM_WARNING, "SimpleFT_exec_i::ccm_activate - could not find agent.\n"));
	    return;
	  }
	
	CIAO_DEBUG ((LM_DEBUG, "registering the application with the agent.\n"));
	    
	ReplicatedApplication_var myself = ReplicatedApplication::_narrow (this);

	if (CORBA::is_nil (myself.in ()))
	  {
	    CIAO_ERROR ((LM_WARNING, "SimpleFT_exec_i::ccm_activate - could not get reference to itself.\n"));
	    return;
	  }

	agent_->register_application (app_name_.c_str (), myself.in ());

	// register application with ReplicationManager

	CIAO_DEBUG ((LM_DEBUG, "resolving the ReplicationManager in the NamingService.\n"));

	Name_Helper_T <ReplicationManager> rmh (orb_.in (), true);

	ReplicationManager_var rm = rmh.resolve ("FLARe/ReplicationManager");

	std::string hn = this->get_hostname ();
	std::string pid = this->get_process_id ();

	CORBA::Object_var self_obj = CORBA::Object::_narrow (this);

	rm->register_application (app_name_.c_str (),
				  load_,
				  hn.c_str (),
				  pid.c_str (),
				  (primary_ ? 1 : 2),
				  self_obj.in ());
      }
    catch (Name_Helper_Exception & ex)
      {
	CIAO_ERROR ((LM_ERROR, 
		     "SimpleFT_exec_i::ccm_activate - "
		     "caught Name_Helper_Exception: %s", 
		     ex.what ()));
      }
    catch (CORBA::Exception &ex)
      {
	CIAO_ERROR ((LM_ERROR, "SimpleFT_exec_i::ccm_activate - caught: %s", ex._info ().c_str ()));
      }
  }

  void
  SimpleFT_exec_i::ccm_passivate ()
  {
    CIAO_TRACE ("SimpleFT_exec_i::ccm_passivate");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::ccm_passivate\n"));
    // Your code here.
  }

  void
  SimpleFT_exec_i::ccm_remove ()
  {
    CIAO_TRACE ("SimpleFT_exec_i::ccm_remove");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::ccm_remove\n"));
    // Your code here.
  }

  //==================================================================
  // Home Executor Implementation Class:   SimpleFTHome_exec_i
  //==================================================================

  SimpleFTHome_exec_i::SimpleFTHome_exec_i (void)
  {
    CIAO_TRACE ("SimpleFTHome_exec_i::SimpleFTHome_exec_i");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFTHome_exec_i::SimpleFTHome_exec_i\n"));
  }

  SimpleFTHome_exec_i::~SimpleFTHome_exec_i (void)
  {
    CIAO_TRACE ("SimpleFTHome_exec_i::~SimpleFTHome_exec_i");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFTHome_exec_i::~SimpleFTHome_exec_i\n"));
  }

  // Attribute operations

  char *
  SimpleFT_exec_i::object_id (void)
  {
    char * name = new char[app_name_.length ()];
    ACE_OS::strcpy (name, app_name_.c_str ());    

    return name;
  }

  void 
  SimpleFT_exec_i::object_id (const char * object_id)
  {
    app_name_ = object_id;
  }

  CORBA::Double
  SimpleFT_exec_i::load ()
  {
    return load_;
  }
    
  void
  SimpleFT_exec_i::load (CORBA::Double load)
  {
    load_ = load;
  }
    
  CORBA::Short
  SimpleFT_exec_i::role ()
  {
    if (primary_)
      return 1;
    else
      return 2;
  }
    
  void
  SimpleFT_exec_i::role (CORBA::Short role)
  {
    primary_ = (role == 1);
  }

  // Supported or inherited operations.

  void 
  SimpleFT_exec_i::set_state (const CORBA::Any & state_value)
  {
    // extract value to an intermediate long variable since it's not possible
    // to extract to a long & directly
    CORBA::Long value;

    if (state_value >>= value)
      state_ = value;
    else
      CIAO_DEBUG ((LM_WARNING,
		  "ReplicatedApplication_i::set_state () "
		  "could not extract satet value from Any."));

    CIAO_DEBUG ((LM_TRACE, "test_i::set_state (%d) called.\n", value));

  }
    
  CORBA::Any *
  SimpleFT_exec_i::get_state ()
  {
    // create new any object
    CORBA::Any_var state (new CORBA::Any);

    // create intermediate object with the value
    CORBA::Long value = state_;

    ACE_DEBUG ((LM_DEBUG, "test_i::get_state returns %d.\n", value));

    // insert value into the any object
    *state <<= value;

    return state._retn ();
  }

  void
  SimpleFT_exec_i::method (CORBA::ULong test_start, CORBA::ULong test_end,
			   CORBA::ULong work,
			   CORBA::ULong prime_number,
			   CORBA::ULong)
  {
  static int i = 0;
  CIAO_DEBUG ((LM_DEBUG, "%d\n",i++));

  if (test_start == 1)
    {
      this->start_ = ACE_OS::gethrtime ();
    }

  ACE_hrtime_t start = ACE_OS::gethrtime ();
  
  for (; work != 0; work--)
    ACE::is_prime (prime_number,
                   2,
                   prime_number / 2);
  ACE_hrtime_t end = ACE_OS::gethrtime ();

  ++state_;

  if (!CORBA::is_nil (agent_.in ()))
    agent_->state_changed (app_name_.c_str ());

  this->history_.sample (end - start);
  
  if (test_end == 1)
    {
      this->end_ = ACE_OS::gethrtime ();
    }
  }

  void
  SimpleFT_exec_i::dump (void)
  {
    ACE_UINT32 gsf = ACE_High_Res_Timer::global_scale_factor ();
    ACE_Basic_Stats stats;
    this->history_.collect_basic_stats (stats);
    stats.dump_results ("Total", gsf);
    ACE_Throughput_Stats::dump_throughput ("Total", gsf,
					   this->end_ - this->start_,
					   stats.samples_count ());
  }
  
  void
  SimpleFT_exec_i::shutdown (void)
  {
    // not implemented
  }

  std::string
  SimpleFT_exec_i::get_hostname ()
  {
    char hn_str [100];
    gethostname (hn_str, sizeof (hn_str));
    
    return std::string (hn_str);
  }


  std::string
  SimpleFT_exec_i::get_process_id ()
  {
    pid_t pid = ACE_OS::getpid ();
    std::stringstream ss;
    ss << pid;
    
    return ss.str ();
  }

  // Home operations.

  // Factory and finder operations.

  // Attribute operations.

  // Implicit operations.

  ::Components::EnterpriseComponent_ptr
  SimpleFTHome_exec_i::create ()
  {
    CIAO_TRACE ("SimpleFTHome_exec_i::create");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFTHome_exec_i::create\n"));
    ::Components::EnterpriseComponent_ptr retval =
      ::Components::EnterpriseComponent::_nil ();

    ACE_NEW_THROW_EX (
      retval,
      SimpleFT_exec_i,
      ::CORBA::NO_MEMORY ());

    return retval;
  }

  extern "C" SIMPLEFT_EXEC_Export ::Components::HomeExecutorBase_ptr
  create_Simple_SimpleFTHome_Impl (void)
  {
    CIAO_TRACE ("create_Simple_SimpleFTHome_Impl");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - create_Simple_SimpleFTHome_Impl\n"));
    ::Components::HomeExecutorBase_ptr retval =
      ::Components::HomeExecutorBase::_nil ();

    ACE_NEW_RETURN (
      retval,
      SimpleFTHome_exec_i,
      ::Components::HomeExecutorBase::_nil ());

    return retval;
  }
}

