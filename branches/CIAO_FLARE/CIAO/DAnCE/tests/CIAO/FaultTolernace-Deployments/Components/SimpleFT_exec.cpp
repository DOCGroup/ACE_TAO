// $Id$
//
// ****              Code generated by the                 ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#include "SimpleFT_exec.h"
#include <ace/Env_Value_T.h>
#include <orbsvcs/CosNamingC.h>
#include "ciao/CIAO_common.h"
#include "ciao/Containers/Container_Base.h"
#include "ciao/Contexts/Context_Impl_Base.h"


namespace CIDL_SimpleFT_Impl
{
  //==================================================================
  // Component Executor Implementation Class:   SimpleFT_exec_i
  //==================================================================

  SimpleFT_exec_i::SimpleFT_exec_i (void)
  {
    CIAO_TRACE ("SimpleFT_exec_i::SimpleFT_exec_i (void)");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::SimpleFT_exec_i (void)\n"));
  }

  SimpleFT_exec_i::~SimpleFT_exec_i (void)
  {
    CIAO_TRACE ("SimpleFT_exec_i::~SimpleFT_exec_i");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::~SimpleFT_exec_i\n"));
  }

  // Supported or inherited operations.

  // Attribute operations.

  // Port operations.

  // Operations from Components::SessionComponent

  void
  SimpleFT_exec_i::set_session_context (
    ::Components::SessionContext_ptr ctx)
  {
    CIAO_TRACE ("SimpleFT_exec_i::set_session_context");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::set_session_context\n"));
    this->context_ =
      ::Simple::CCM_SimpleFT_Context::_narrow (ctx);

    if (CORBA::is_nil (this->context_.in ()))
    {
      throw ::CORBA::INTERNAL ();
    }
  }

  void
  SimpleFT_exec_i::configuration_complete ()
  {
    CIAO_TRACE ("SimpleFT_exec_i::configuration_complete\n");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::configuration_complete\n"));
    // Your code here.
  }

  void
  SimpleFT_exec_i::ccm_activate ()
  {
    CIAO_TRACE ("SimpleFT_exec_i::ccm_activate");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::ccm_activate\n"));

    CIAO_DEBUG ((LM_DEBUG, "resolving name service reference\n"));
#ifdef RESOLVE_INITIAL_REFERENCE_IS_IMPLEMENTED
    CORBA::Object_var ns_obj = context_->resolve_service_reference ("NameService");
#else
    std::string ns_ior = ACE_Env_Value <std::string> ("NameServiceIOR", std::string ());

    if (ns_ior.empty ())
      {
	CIAO_ERROR ((LM_WARNING, "SimpleFT_exec_i::ccm_activate - could find NameServiceIOR env variable.\n"));
	return;
      }
#endif
#if 0    
    CIAO::Context_Impl_Base * base_context = 
      dynamic_cast <CIAO::Context_Impl_Base*> (context_.in ());
    CORBA::Object_var ns_obj = base_context->_ciao_the_Container ()->the_ORB ()->string_to_object (ns_ior.c_str ());

    CIAO_DEBUG ((LM_DEBUG, "narrowing name servic\n"));
    CosNaming::NamingContextExt_var ns = CosNaming::NamingContextExt::_narrow (ns_obj.in ());
#endif
  }

  void
  SimpleFT_exec_i::ccm_passivate ()
  {
    CIAO_TRACE ("SimpleFT_exec_i::ccm_passivate");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::ccm_passivate\n"));
    // Your code here.
  }

  void
  SimpleFT_exec_i::ccm_remove ()
  {
    CIAO_TRACE ("SimpleFT_exec_i::ccm_remove");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFT_exec_i::ccm_remove\n"));
    // Your code here.
  }

  //==================================================================
  // Home Executor Implementation Class:   SimpleFTHome_exec_i
  //==================================================================

  SimpleFTHome_exec_i::SimpleFTHome_exec_i (void)
  {
    CIAO_TRACE ("SimpleFTHome_exec_i::SimpleFTHome_exec_i");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFTHome_exec_i::SimpleFTHome_exec_i\n"));
  }

  SimpleFTHome_exec_i::~SimpleFTHome_exec_i (void)
  {
    CIAO_TRACE ("SimpleFTHome_exec_i::~SimpleFTHome_exec_i");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFTHome_exec_i::~SimpleFTHome_exec_i\n"));
  }

  // Supported or inherited operations.

  void 
  SimpleFT_exec_i::set_state (const CORBA::Any & state_value)
  {
    // extract value to an intermediate long variable since it's not possible
    // to extract to a long & directly
    CORBA::Long value;

    if (state_value >>= value)
      state_ = value;
    else
      CIAO_DEBUG ((LM_WARNING,
		  "ReplicatedApplication_i::set_state () "
		  "could not extract satet value from Any."));

    CIAO_DEBUG ((LM_TRACE, "test_i::set_state (%d) called.\n", value));

  }
    
  CORBA::Any *
  SimpleFT_exec_i::get_state ()
  {
    // create new any object
    CORBA::Any_var state (new CORBA::Any);

    // create intermediate object with the value
    CORBA::Long value = state_;

    ACE_DEBUG ((LM_DEBUG, "test_i::get_state returns %d.\n", value));

    // insert value into the any object
    *state <<= value;

    return state._retn ();
  }

  void
  SimpleFT_exec_i::method (CORBA::ULong test_start, CORBA::ULong test_end,
			   CORBA::ULong work,
			   CORBA::ULong prime_number,
			   CORBA::ULong kill)
  {
#ifdef JUST_COPIED
    static int i = 0;
    ACE_DEBUG ((LM_DEBUG, "%d\n",i++));
    
    if (kill && stop_)
      ACE_OS::exit (1);
    if (test_start == 1)
      {
	this->start_ = ACE_OS::gethrtime ();
      }
    ACE_hrtime_t start = ACE_OS::gethrtime ();
  
    for (; work != 0; work--)
      ACE::is_prime (prime_number,
		     2,
		     prime_number / 2);
    ACE_hrtime_t end = ACE_OS::gethrtime ();

    ++state_;

    if (!CORBA::is_nil (agent_.in ()))
      agent_->state_changed (object_id_.c_str ());

    // ACE_DEBUG ((LM_DEBUG, "Time taken = %d\n", end - start));
    this->history_.sample (end - start);
    if (test_end == 1)
      {
	this->end_ = ACE_OS::gethrtime ();
      }
#endif
  }

  void
  SimpleFT_exec_i::dump (void)
  {
#ifdef JUST_COPIED
    ACE_UINT32 gsf = ACE_High_Res_Timer::global_scale_factor ();
    ACE_Basic_Stats stats;
    this->history_.collect_basic_stats (stats);
    stats.dump_results ("Total", gsf);
    ACE_Throughput_Stats::dump_throughput ("Total", gsf,
					   this->end_ - this->start_,
					   stats.samples_count ());
#endif
  }
  
  void
  SimpleFT_exec_i::shutdown (void)
  {
#ifdef JUST_COPIED
    this->orb_->shutdown (0);
#endif
  }

  // Home operations.

  // Factory and finder operations.

  // Attribute operations.

  // Implicit operations.

  ::Components::EnterpriseComponent_ptr
  SimpleFTHome_exec_i::create ()
  {
    CIAO_TRACE ("SimpleFTHome_exec_i::create");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - SimpleFTHome_exec_i::create\n"));
    ::Components::EnterpriseComponent_ptr retval =
      ::Components::EnterpriseComponent::_nil ();

    ACE_NEW_THROW_EX (
      retval,
      SimpleFT_exec_i,
      ::CORBA::NO_MEMORY ());

    return retval;
  }

  extern "C" SIMPLEFT_EXEC_Export ::Components::HomeExecutorBase_ptr
  create_Simple_SimpleFTHome_Impl (void)
  {
    CIAO_TRACE ("create_Simple_SimpleFTHome_Impl");
    CIAO_DEBUG ((LM_EMERGENCY, "SimpleFT - Test - Lifecycle event - create_Simple_SimpleFTHome_Impl\n"));
    ::Components::HomeExecutorBase_ptr retval =
      ::Components::HomeExecutorBase::_nil ();

    ACE_NEW_RETURN (
      retval,
      SimpleFTHome_exec_i,
      ::Components::HomeExecutorBase::_nil ());

    return retval;
  }
}

