// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.5
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 *       http://doc.ece.uci.edu/
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:134

#ifndef _TAO_IDL_PARAM_TESTC_H_
#define _TAO_IDL_PARAM_TESTC_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/BooleanSeqA.h"
#include "tao/AnyTypeCode/CharSeqA.h"
#include "tao/AnyTypeCode/DoubleSeqA.h"
#include "tao/AnyTypeCode/FloatSeqA.h"
#include "tao/AnyTypeCode/LongDoubleSeqA.h"
#include "tao/AnyTypeCode/LongSeqA.h"
#include "tao/AnyTypeCode/OctetSeqA.h"
#include "tao/AnyTypeCode/ShortSeqA.h"
#include "tao/AnyTypeCode/StringSeqA.h"
#include "tao/AnyTypeCode/ULongSeqA.h"
#include "tao/AnyTypeCode/UShortSeqA.h"
#include "tao/AnyTypeCode/WCharSeqA.h"
#include "tao/AnyTypeCode/WStringSeqA.h"
#include "tao/AnyTypeCode/LongLongSeqA.h"
#include "tao/AnyTypeCode/ULongLongSeqA.h"
#include "tao/AnyTypeCode/PolicyA.h"
#include "tao/AnyTypeCode/Policy_ManagerA.h"
#include "tao/AnyTypeCode/Policy_CurrentA.h"
#include "tao/AnyTypeCode/ServicesA.h"
#include "tao/AnyTypeCode/ParameterModeA.h"
#include "tao/AnyTypeCode/orb_typesA.h"
#include "tao/AnyTypeCode/Typecode_typesA.h"
#include "tao/AnyTypeCode/WrongTransactionA.h"
#include "tao/AnyTypeCode/AnySeqA.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/BooleanSeqC.h"
#include "tao/CharSeqC.h"
#include "tao/DoubleSeqC.h"
#include "tao/FloatSeqC.h"
#include "tao/LongDoubleSeqC.h"
#include "tao/LongSeqC.h"
#include "tao/OctetSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/ULongSeqC.h"
#include "tao/UShortSeqC.h"
#include "tao/WCharSeqC.h"
#include "tao/WStringSeqC.h"
#include "tao/LongLongSeqC.h"
#include "tao/ULongLongSeqC.h"
#include "tao/PolicyC.h"
#include "tao/Policy_ManagerC.h"
#include "tao/Policy_CurrentC.h"
#include "tao/ServicesC.h"
#include "tao/ParameterModeC.h"
#include "tao/orb_typesC.h"
#include "tao/Typecode_typesC.h"
#include "tao/WrongTransactionC.h"
#include "tao/AnyTypeCode/AnySeqC.h"

#include <string>
#include <vector>

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_root/root_ch.cpp:62
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_interface.cpp:643

#if !defined (_COFFEE__VAR_OUT_CH_)
#define _COFFEE__VAR_OUT_CH_

class Coffee;
typedef Coffee *Coffee_ptr;

typedef
  TAO_Objref_Var_T<
      Coffee
    >
  Coffee_var;

typedef
  TAO_Objref_Out_T<
      Coffee
    >
  Coffee_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:50

class  Coffee
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Coffee>;
  typedef Coffee_ptr _ptr_type;
  typedef Coffee_var _var_type;
  typedef Coffee_out _out_type;
  
  // The static operations.
  static Coffee_ptr _duplicate (Coffee_ptr obj);
  
  static void _tao_release (Coffee_ptr obj);
  
  static Coffee_ptr _narrow (::CORBA::Object_ptr obj);
  static Coffee_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Coffee_ptr _nil (void)
  {
    return static_cast<Coffee_ptr> (0);
  }
  
  static void _tao_any_destructor (void *);
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  struct Desc;
  
  typedef
    TAO_Var_Var_T<
        Desc
      >
    Desc_var;
  
  typedef
    TAO_Out_T<
        Desc
      >
    Desc_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct  Desc
  {
    typedef Desc_var _var_type;
    typedef Desc_out _out_type;
    
    static void _tao_any_destructor (void *);
    TAO::String_Manager name;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Desc;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Coffee::Desc *
  description (void);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual void
  description (
    const ::Coffee::Desc & description);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:209
  
  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
private:
  TAO::Collocation_Proxy_Broker *the_TAO_Coffee_Proxy_Broker_;

protected:
  // Concrete interface only.
  Coffee (void);
  
  // These methods traverse the inheritance tree and set the
  // parents piece of the given class in the right mode.
  virtual void Coffee_setup_collocation (void);
  
  // Concrete non-local interface only.
  Coffee (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Coffee (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);
  
  virtual ~Coffee (void);

private:
  // Private and unimplemented for concrete interfaces.
  Coffee (const Coffee &);
  
  void operator= (const Coffee &);
};

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49

extern  ::CORBA::TypeCode_ptr const _tc_Coffee;

// TAO_IDL - Generated from
// .\be\be_interface.cpp:643

#if !defined (_PARAM_TEST__VAR_OUT_CH_)
#define _PARAM_TEST__VAR_OUT_CH_

class Param_Test;
typedef Param_Test *Param_Test_ptr;

typedef
  TAO_Objref_Var_T<
      Param_Test
    >
  Param_Test_var;

typedef
  TAO_Objref_Out_T<
      Param_Test
    >
  Param_Test_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:50

class  Param_Test
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Param_Test>;
  typedef Param_Test_ptr _ptr_type;
  typedef Param_Test_var _var_type;
  typedef Param_Test_out _out_type;
  
  // The static operations.
  static Param_Test_ptr _duplicate (Param_Test_ptr obj);
  
  static void _tao_release (Param_Test_ptr obj);
  
  static Param_Test_ptr _narrow (::CORBA::Object_ptr obj);
  static Param_Test_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Param_Test_ptr _nil (void)
  {
    return static_cast<Param_Test_ptr> (0);
  }
  
  static void _tao_any_destructor (void *);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::Short
  test_short (
    ::CORBA::Short s1,
    ::CORBA::Short & s2,
    ::CORBA::Short_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::ULongLong
  test_ulonglong (
    ::CORBA::ULongLong s1,
    ::CORBA::ULongLong & s2,
    ::CORBA::ULongLong_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual char *
  test_unbounded_string (
    const char * s1,
    char *& s2,
    ::CORBA::String_out s3);
    
  //================================================
  // Another version of test_unbounded_string, this
  // one using std::string.
    
  virtual std::string
  test_unbounded_string (
    const std::string s1,
    std::string &s2,
    std::string &s3);
    
  //================================================
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:413
  
  typedef char * short_string;
  typedef ::CORBA::String_var short_string_var;
  typedef ::CORBA::String_out short_string_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_short_string;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual char *
  test_bounded_string (
    const char * s1,
    char *& s2,
    ::CORBA::String_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::WChar *
  test_unbounded_wstring (
    const ::CORBA::WChar * ws1,
    ::CORBA::WChar *& ws2,
    ::CORBA::WString_out ws3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:413
  
  typedef ::CORBA::WChar * short_wstring;
  typedef ::CORBA::WString_var short_wstring_var;
  typedef ::CORBA::WString_out short_wstring_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_short_wstring;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::WChar *
  test_bounded_wstring (
    const ::CORBA::WChar * ws1,
    ::CORBA::WChar *& ws2,
    ::CORBA::WString_out ws3);
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  struct Fixed_Struct;
  
  typedef
    TAO_Fixed_Var_T<
        Fixed_Struct
      >
    Fixed_Struct_var;
  
  typedef
    Fixed_Struct &
    Fixed_Struct_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct  Fixed_Struct
  {
    typedef Fixed_Struct_var _var_type;
    typedef Fixed_Struct_out _out_type;
    
    static void _tao_any_destructor (void *);
    ::CORBA::Long l;
    ::CORBA::Char c;
    ::CORBA::Short s;
    ::CORBA::Octet o;
    ::CORBA::Float f;
    ::CORBA::Boolean b;
    ::CORBA::Double d;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Fixed_Struct;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Fixed_Struct
  test_fixed_struct (
    const ::Param_Test::Fixed_Struct & s1,
    ::Param_Test::Fixed_Struct & s2,
    ::Param_Test::Fixed_Struct_out s3);
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  struct NameComponent;
  
  typedef
    TAO_Var_Var_T<
        NameComponent
      >
    NameComponent_var;
  
  typedef
    TAO_Out_T<
        NameComponent
      >
    NameComponent_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct  NameComponent
  {
    typedef NameComponent_var _var_type;
    typedef NameComponent_out _out_type;
    
    static void _tao_any_destructor (void *);
    TAO::String_Manager id;
    TAO::String_Manager kind;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_NameComponent;
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  struct Step;
  
  typedef
    TAO_Var_Var_T<
        Step
      >
    Step_var;
  
  typedef
    TAO_Out_T<
        Step
      >
    Step_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct  Step
  {
    typedef Step_var _var_type;
    typedef Step_out _out_type;
    
    static void _tao_any_destructor (void *);
    Param_Test::NameComponent name;
    ::CORBA::Boolean process;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Step;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_PATHSPEC_CH_)
#define _PARAM_TEST_PATHSPEC_CH_
  
  class PathSpec;
  
  typedef
    TAO_VarSeq_Var_T<
        PathSpec
      >
    PathSpec_var;
  
  typedef
    TAO_Seq_Out_T<
        PathSpec
      >
    PathSpec_out;
  
  class  PathSpec
    : public
        TAO::unbounded_value_sequence<
            Step
          >
  {
  public:
    PathSpec (void);
    PathSpec ( ::CORBA::ULong max);
    PathSpec (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Step* buffer, 
      ::CORBA::Boolean release = false);
    PathSpec (const PathSpec &);
    virtual ~PathSpec (void);
    
    static void _tao_any_destructor (void *);
    
    typedef PathSpec_var _var_type;
    typedef PathSpec_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_PathSpec;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::PathSpec *
  test_unbounded_struct_sequence (
    const ::Param_Test::PathSpec & s1,
    ::Param_Test::PathSpec & s2,
    ::Param_Test::PathSpec_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::ShortSeq *
  test_short_sequence (
    const ::CORBA::ShortSeq & s1,
    ::CORBA::ShortSeq & s2,
    ::CORBA::ShortSeq_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_BOUNDED_SHORT_SEQ_CH_)
#define _PARAM_TEST_BOUNDED_SHORT_SEQ_CH_
  
  class Bounded_Short_Seq;
  
  typedef
    TAO_FixedSeq_Var_T<
        Bounded_Short_Seq
      >
    Bounded_Short_Seq_var;
  
  typedef
    TAO_Seq_Out_T<
        Bounded_Short_Seq
      >
    Bounded_Short_Seq_out;
  
  class  Bounded_Short_Seq
    : public
        TAO::bounded_value_sequence<
            ::CORBA::Short,
            32
          >
  {
  public:
    Bounded_Short_Seq (void);
    Bounded_Short_Seq (
      ::CORBA::ULong length,
      ::CORBA::Short* buffer, 
      ::CORBA::Boolean release = false);
    Bounded_Short_Seq (const Bounded_Short_Seq &);
    virtual ~Bounded_Short_Seq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef Bounded_Short_Seq_var _var_type;
    typedef Bounded_Short_Seq_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Bounded_Short_Seq;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Bounded_Short_Seq *
  test_bounded_short_sequence (
    const ::Param_Test::Bounded_Short_Seq & s1,
    ::Param_Test::Bounded_Short_Seq & s2,
    ::Param_Test::Bounded_Short_Seq_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::LongSeq *
  test_long_sequence (
    const ::CORBA::LongSeq & s1,
    ::CORBA::LongSeq & s2,
    ::CORBA::LongSeq_out s3);
    
  //===========================================================
  // Another version of test_long_sequence, this one using
  // std::vector.
    
  typedef std::vector< ::CORBA::Long> UB_Long_Seq;
    
  virtual UB_Long_Seq
  test_long_sequence (
    UB_Long_Seq &s1,
    UB_Long_Seq &s2,
    UB_Long_Seq &s3);
    
  //===========================================================
    
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_BOUNDED_LONG_SEQ_CH_)
#define _PARAM_TEST_BOUNDED_LONG_SEQ_CH_
  
  class Bounded_Long_Seq;
  
  typedef
    TAO_FixedSeq_Var_T<
        Bounded_Long_Seq
      >
    Bounded_Long_Seq_var;
  
  typedef
    TAO_Seq_Out_T<
        Bounded_Long_Seq
      >
    Bounded_Long_Seq_out;
  
  class  Bounded_Long_Seq
    : public
        TAO::bounded_value_sequence<
            ::CORBA::Long,
            32
          >
  {
  public:
    Bounded_Long_Seq (void);
    Bounded_Long_Seq (
      ::CORBA::ULong length,
      ::CORBA::Long* buffer, 
      ::CORBA::Boolean release = false);
    Bounded_Long_Seq (const Bounded_Long_Seq &);
    virtual ~Bounded_Long_Seq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef Bounded_Long_Seq_var _var_type;
    typedef Bounded_Long_Seq_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Bounded_Long_Seq;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Bounded_Long_Seq *
  test_bounded_long_sequence (
    const ::Param_Test::Bounded_Long_Seq & s1,
    ::Param_Test::Bounded_Long_Seq & s2,
    ::Param_Test::Bounded_Long_Seq_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::StringSeq *
  test_strseq (
    const ::CORBA::StringSeq & s1,
    ::CORBA::StringSeq & s2,
    ::CORBA::StringSeq_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_BOUNDED_STRSEQ_CH_)
#define _PARAM_TEST_BOUNDED_STRSEQ_CH_
  
  class Bounded_StrSeq;
  
  typedef
    TAO_VarSeq_Var_T<
        Bounded_StrSeq
      >
    Bounded_StrSeq_var;
  
  typedef
    TAO_Seq_Out_T<
        Bounded_StrSeq
      >
    Bounded_StrSeq_out;
  
  class  Bounded_StrSeq
    : public
        TAO::bounded_basic_string_sequence<char, 32>
  {
  public:
    Bounded_StrSeq (void);
    Bounded_StrSeq (
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer, 
      ::CORBA::Boolean release = false);
    Bounded_StrSeq (const Bounded_StrSeq &);
    virtual ~Bounded_StrSeq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef Bounded_StrSeq_var _var_type;
    typedef Bounded_StrSeq_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Bounded_StrSeq;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Bounded_StrSeq *
  test_bounded_strseq (
    const ::Param_Test::Bounded_StrSeq & s1,
    ::Param_Test::Bounded_StrSeq & s2,
    ::Param_Test::Bounded_StrSeq_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::WStringSeq *
  test_wstrseq (
    const ::CORBA::WStringSeq & ws1,
    ::CORBA::WStringSeq & ws2,
    ::CORBA::WStringSeq_out ws3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_BOUNDED_WSTRSEQ_CH_)
#define _PARAM_TEST_BOUNDED_WSTRSEQ_CH_
  
  class Bounded_WStrSeq;
  
  typedef
    TAO_VarSeq_Var_T<
        Bounded_WStrSeq
      >
    Bounded_WStrSeq_var;
  
  typedef
    TAO_Seq_Out_T<
        Bounded_WStrSeq
      >
    Bounded_WStrSeq_out;
  
  class  Bounded_WStrSeq
    : public
        TAO::bounded_basic_string_sequence<CORBA::WChar, 32>
  {
  public:
    Bounded_WStrSeq (void);
    Bounded_WStrSeq (
      ::CORBA::ULong length,
      ::CORBA::WChar ** buffer, 
      ::CORBA::Boolean release = false);
    Bounded_WStrSeq (const Bounded_WStrSeq &);
    virtual ~Bounded_WStrSeq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef Bounded_WStrSeq_var _var_type;
    typedef Bounded_WStrSeq_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Bounded_WStrSeq;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Bounded_WStrSeq *
  test_bounded_wstrseq (
    const ::Param_Test::Bounded_WStrSeq & ws1,
    ::Param_Test::Bounded_WStrSeq & ws2,
    ::Param_Test::Bounded_WStrSeq_out ws3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_STRUCTSEQ_CH_)
#define _PARAM_TEST_STRUCTSEQ_CH_
  
  class StructSeq;
  
  typedef
    TAO_FixedSeq_Var_T<
        StructSeq
      >
    StructSeq_var;
  
  typedef
    TAO_Seq_Out_T<
        StructSeq
      >
    StructSeq_out;
  
  class  StructSeq
    : public
        TAO::unbounded_value_sequence<
            Fixed_Struct
          >
  {
  public:
    StructSeq (void);
    StructSeq ( ::CORBA::ULong max);
    StructSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Fixed_Struct* buffer, 
      ::CORBA::Boolean release = false);
    StructSeq (const StructSeq &);
    virtual ~StructSeq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef StructSeq_var _var_type;
    typedef StructSeq_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_StructSeq;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::StructSeq *
  test_struct_sequence (
    const ::Param_Test::StructSeq & s1,
    ::Param_Test::StructSeq & s2,
    ::Param_Test::StructSeq_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_BOUNDED_STRUCTSEQ_CH_)
#define _PARAM_TEST_BOUNDED_STRUCTSEQ_CH_
  
  class Bounded_StructSeq;
  
  typedef
    TAO_FixedSeq_Var_T<
        Bounded_StructSeq
      >
    Bounded_StructSeq_var;
  
  typedef
    TAO_Seq_Out_T<
        Bounded_StructSeq
      >
    Bounded_StructSeq_out;
  
  class  Bounded_StructSeq
    : public
        TAO::bounded_value_sequence<
            Fixed_Struct,
            32
          >
  {
  public:
    Bounded_StructSeq (void);
    Bounded_StructSeq (
      ::CORBA::ULong length,
      Fixed_Struct* buffer, 
      ::CORBA::Boolean release = false);
    Bounded_StructSeq (const Bounded_StructSeq &);
    virtual ~Bounded_StructSeq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef Bounded_StructSeq_var _var_type;
    typedef Bounded_StructSeq_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Bounded_StructSeq;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Bounded_StructSeq *
  test_bounded_struct_sequence (
    const ::Param_Test::Bounded_StructSeq & s1,
    ::Param_Test::Bounded_StructSeq & s2,
    ::Param_Test::Bounded_StructSeq_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_COFFEE_MIX_CH_)
#define _PARAM_TEST_COFFEE_MIX_CH_
  
  class Coffee_Mix;
  
  typedef
    TAO_VarSeq_Var_T<
        Coffee_Mix
      >
    Coffee_Mix_var;
  
  typedef
    TAO_Seq_Out_T<
        Coffee_Mix
      >
    Coffee_Mix_out;
  
  class  Coffee_Mix
    : public
        TAO::unbounded_object_reference_sequence<
            Coffee,
            Coffee_var
          >
  {
  public:
    Coffee_Mix (void);
    Coffee_Mix ( ::CORBA::ULong max);
    Coffee_Mix (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Coffee_ptr* buffer, 
      ::CORBA::Boolean release = false);
    Coffee_Mix (const Coffee_Mix &);
    virtual ~Coffee_Mix (void);
    
    static void _tao_any_destructor (void *);
    
    typedef Coffee_Mix_var _var_type;
    typedef Coffee_Mix_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Coffee_Mix;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Coffee_Mix *
  test_coffe_mix (
    const ::Param_Test::Coffee_Mix & s1,
    ::Param_Test::Coffee_Mix & s2,
    ::Param_Test::Coffee_Mix_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_BOUNDED_COFFEE_MIX_CH_)
#define _PARAM_TEST_BOUNDED_COFFEE_MIX_CH_
  
  class Bounded_Coffee_Mix;
  
  typedef
    TAO_VarSeq_Var_T<
        Bounded_Coffee_Mix
      >
    Bounded_Coffee_Mix_var;
  
  typedef
    TAO_Seq_Out_T<
        Bounded_Coffee_Mix
      >
    Bounded_Coffee_Mix_out;
  
  class  Bounded_Coffee_Mix
    : public
        TAO::bounded_object_reference_sequence<
            Coffee,
            Coffee_var,
            32
          >
  {
  public:
    Bounded_Coffee_Mix (void);
    Bounded_Coffee_Mix (
      ::CORBA::ULong length,
      Coffee_ptr* buffer, 
      ::CORBA::Boolean release = false);
    Bounded_Coffee_Mix (const Bounded_Coffee_Mix &);
    virtual ~Bounded_Coffee_Mix (void);
    
    static void _tao_any_destructor (void *);
    
    typedef Bounded_Coffee_Mix_var _var_type;
    typedef Bounded_Coffee_Mix_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Bounded_Coffee_Mix;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Bounded_Coffee_Mix *
  test_bounded_coffe_mix (
    const ::Param_Test::Bounded_Coffee_Mix & s1,
    ::Param_Test::Bounded_Coffee_Mix & s2,
    ::Param_Test::Bounded_Coffee_Mix_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::AnySeq *
  test_anyseq (
    const ::CORBA::AnySeq & s1,
    ::CORBA::AnySeq & s2,
    ::CORBA::AnySeq_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:413
  
  typedef char * DUMMY;
  typedef ::CORBA::String_var DUMMY_var;
  typedef ::CORBA::String_out DUMMY_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_DUMMY;
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  struct Var_Struct;
  
  typedef
    TAO_Var_Var_T<
        Var_Struct
      >
    Var_Struct_var;
  
  typedef
    TAO_Out_T<
        Var_Struct
      >
    Var_Struct_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct  Var_Struct
  {
    typedef Var_Struct_var _var_type;
    typedef Var_Struct_out _out_type;
    
    static void _tao_any_destructor (void *);
    ::CORBA::Double dbl;
    TAO::String_Manager dummy1;
    ::CORBA::Boolean boole;
    TAO::String_Manager dummy2;
    ::CORBA::Short shrt;
    CORBA::StringSeq seq;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Var_Struct;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Var_Struct *
  test_var_struct (
    const ::Param_Test::Var_Struct & s1,
    ::Param_Test::Var_Struct & s2,
    ::Param_Test::Var_Struct_out s3);
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  struct Nested_Struct;
  
  typedef
    TAO_Var_Var_T<
        Nested_Struct
      >
    Nested_Struct_var;
  
  typedef
    TAO_Out_T<
        Nested_Struct
      >
    Nested_Struct_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct  Nested_Struct
  {
    typedef Nested_Struct_var _var_type;
    typedef Nested_Struct_out _out_type;
    
    static void _tao_any_destructor (void *);
    Param_Test::Var_Struct vs;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Nested_Struct;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Nested_Struct *
  test_nested_struct (
    const ::Param_Test::Nested_Struct & s1,
    ::Param_Test::Nested_Struct & s2,
    ::Param_Test::Nested_Struct_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Coffee_ptr
  make_coffee (void);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Coffee_ptr
  test_objref (
    ::Coffee_ptr o1,
    ::Coffee_ptr & o2,
    ::Coffee_out o3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::TypeCode_ptr
  test_typecode (
    ::CORBA::TypeCode_ptr t1,
    ::CORBA::TypeCode_ptr & t2,
    ::CORBA::TypeCode_out t3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::Any *
  test_any (
    const ::CORBA::Any & a1,
    ::CORBA::Any & a2,
    ::CORBA::Any_out a3);
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  struct Objref_Struct;
  
  typedef
    TAO_Var_Var_T<
        Objref_Struct
      >
    Objref_Struct_var;
  
  typedef
    TAO_Out_T<
        Objref_Struct
      >
    Objref_Struct_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct  Objref_Struct
  {
    typedef Objref_Struct_var _var_type;
    typedef Objref_Struct_out _out_type;
    
    static void _tao_any_destructor (void *);
    ::CORBA::Long x;
    Coffee_var y;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Objref_Struct;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Objref_Struct *
  test_objref_struct (
    const ::Param_Test::Objref_Struct & t1,
    ::Param_Test::Objref_Struct & t2,
    ::Param_Test::Objref_Struct_out t3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  static const CORBA::ULong DIM1 = 10U;
  
  // TAO_IDL - Generated from 
  // w:\tao\tao_idl\be\be_visitor_array/array_ch.cpp:62
  
  typedef ::CORBA::Long Fixed_Array[10];
  typedef ::CORBA::Long Fixed_Array_slice;
  struct Fixed_Array_tag {};
  
  
  typedef
    TAO_FixedArray_Var_T<
        Fixed_Array,
        Fixed_Array_slice,
        Fixed_Array_tag
      >
    Fixed_Array_var;
  
  typedef
    Fixed_Array
    Fixed_Array_out;
  
  typedef
    TAO_Array_Forany_T<
        Fixed_Array,
        Fixed_Array_slice,
        Fixed_Array_tag
      >
    Fixed_Array_forany;
  
  static Fixed_Array_slice *
  Fixed_Array_alloc (void);
  
  static void
  Fixed_Array_free (
      Fixed_Array_slice *_tao_slice 
    );
  
  static Fixed_Array_slice *
  Fixed_Array_dup (
      const Fixed_Array_slice *_tao_slice
    );
  
  static void
  Fixed_Array_copy (
      Fixed_Array_slice *_tao_to,
      const Fixed_Array_slice *_tao_from
    );
  
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Fixed_Array;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Fixed_Array_slice *
  test_fixed_array (
    const ::Param_Test::Fixed_Array l1,
    ::Param_Test::Fixed_Array l2,
    ::Param_Test::Fixed_Array_out l3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  static const CORBA::ULong DIM2 = 5U;
  
  // TAO_IDL - Generated from 
  // w:\tao\tao_idl\be\be_visitor_array/array_ch.cpp:62
  
  typedef TAO::String_Manager Var_Array[5];
  typedef TAO::String_Manager Var_Array_slice;
  struct Var_Array_tag {};
  
  
  typedef
    TAO_VarArray_Var_T<
        Var_Array,
        Var_Array_slice,
        Var_Array_tag
      >
    Var_Array_var;
  
  typedef
    TAO_Array_Out_T<
        Var_Array,
        Var_Array_var,
        Var_Array_slice,
        Var_Array_tag
      >
    Var_Array_out;
  
  typedef
    TAO_Array_Forany_T<
        Var_Array,
        Var_Array_slice,
        Var_Array_tag
      >
    Var_Array_forany;
  
  static Var_Array_slice *
  Var_Array_alloc (void);
  
  static void
  Var_Array_free (
      Var_Array_slice *_tao_slice 
    );
  
  static Var_Array_slice *
  Var_Array_dup (
      const Var_Array_slice *_tao_slice
    );
  
  static void
  Var_Array_copy (
      Var_Array_slice *_tao_to,
      const Var_Array_slice *_tao_from
    );
  
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Var_Array;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Var_Array_slice *
  test_var_array (
    const ::Param_Test::Var_Array v1,
    ::Param_Test::Var_Array v2,
    ::Param_Test::Var_Array_out v3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_ARRAYSEQ_CH_)
#define _PARAM_TEST_ARRAYSEQ_CH_
  
  class ArraySeq;
  
  typedef
    TAO_FixedSeq_Var_T<
        ArraySeq
      >
    ArraySeq_var;
  
  typedef
    TAO_Seq_Out_T<
        ArraySeq
      >
    ArraySeq_out;
  
  class  ArraySeq
    : public
        TAO::unbounded_array_sequence<
            Fixed_Array,
            Fixed_Array_slice,
            Fixed_Array_tag
          >
  {
  public:
    ArraySeq (void);
    ArraySeq ( ::CORBA::ULong max);
    ArraySeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Fixed_Array* buffer, 
      ::CORBA::Boolean release = false);
    ArraySeq (const ArraySeq &);
    virtual ~ArraySeq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef ArraySeq_var _var_type;
    typedef ArraySeq_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_ArraySeq;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::ArraySeq *
  test_array_sequence (
    const ::Param_Test::ArraySeq & s1,
    ::Param_Test::ArraySeq & s2,
    ::Param_Test::ArraySeq_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_BOUNDED_ARRAYSEQ_CH_)
#define _PARAM_TEST_BOUNDED_ARRAYSEQ_CH_
  
  class Bounded_ArraySeq;
  
  typedef
    TAO_FixedSeq_Var_T<
        Bounded_ArraySeq
      >
    Bounded_ArraySeq_var;
  
  typedef
    TAO_Seq_Out_T<
        Bounded_ArraySeq
      >
    Bounded_ArraySeq_out;
  
  class  Bounded_ArraySeq
    : public
        TAO::bounded_array_sequence<
            Fixed_Array,
            Fixed_Array_slice,
            Fixed_Array_tag,
            32
          >
  {
  public:
    Bounded_ArraySeq (void);
    Bounded_ArraySeq (
      ::CORBA::ULong length,
      Fixed_Array* buffer, 
      ::CORBA::Boolean release = false);
    Bounded_ArraySeq (const Bounded_ArraySeq &);
    virtual ~Bounded_ArraySeq (void);
    
    static void _tao_any_destructor (void *);
    
    typedef Bounded_ArraySeq_var _var_type;
    typedef Bounded_ArraySeq_out _out_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Bounded_ArraySeq;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Bounded_ArraySeq *
  test_bounded_array_sequence (
    const ::Param_Test::Bounded_ArraySeq & s1,
    ::Param_Test::Bounded_ArraySeq & s2,
    ::Param_Test::Bounded_ArraySeq_out s3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53
  
  class  Ooops : public ::CORBA::UserException
  {
  public:
    
    TAO::String_Manager reason;
    ::CORBA::ULong input;
    Ooops (void);
    Ooops (const Ooops &);
    ~Ooops (void);

    Ooops &operator= (const Ooops &);
    
    static void _tao_any_destructor (void *);
    
    static Ooops *_downcast ( ::CORBA::Exception *);
    static const Ooops *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:66
    
    Ooops (
        const char * _tao_reason,
        ::CORBA::ULong _tao_input
      );
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Ooops;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:53
  
  class  BadBoy : public ::CORBA::UserException
  {
  public:
    
    BadBoy (void);
    BadBoy (const BadBoy &);
    ~BadBoy (void);

    BadBoy &operator= (const BadBoy &);
    
    static void _tao_any_destructor (void *);
    
    static BadBoy *_downcast ( ::CORBA::Exception *);
    static const BadBoy *_downcast ( ::CORBA::Exception const *);
    
    static ::CORBA::Exception *_alloc (void);
    
    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    
    
    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_BadBoy;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::ULong
  test_exception (
    ::CORBA::ULong s1,
    ::CORBA::ULong & s2,
    ::CORBA::ULong_out s3);
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  class Big_Union;
  
  typedef
    TAO_Var_Var_T<
        Big_Union
      >
    Big_Union_var;
  
  typedef
    TAO_Out_T<
        Big_Union
      >
    Big_Union_out;
  
  class  Big_Union
  {
  public:
    Big_Union (void);
    Big_Union (const Big_Union &);
    ~Big_Union (void);
    static void _tao_any_destructor (void*);
    
    Big_Union &operator= (const Big_Union &);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/discriminant_ch.cpp:114
    
    void _d ( ::CORBA::Short);
    ::CORBA::Short _d (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/union_ch.cpp:110
    
    typedef Big_Union_var _var_type;
    typedef Big_Union_out _out_type;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:137
    
    void the_array (Param_Test::Fixed_Array);
    Param_Test::Fixed_Array_slice * the_array (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:244
    
    void the_interface (Coffee_ptr);
    Coffee_ptr the_interface (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:460
    
    void the_long ( ::CORBA::Long);
    ::CORBA::Long the_long (void) const;
    
    // TAO_IDL - Generated from 
    // w:\tao\tao_idl\be\be_visitor_array/array_ch.cpp:62
    
    typedef ::CORBA::Short _another_array[32];
    typedef ::CORBA::Short _another_array_slice;
    struct _another_array_tag {};
    
    
    typedef
      TAO_Array_Forany_T<
          _another_array,
          _another_array_slice,
          _another_array_tag
        >
      _another_array_forany;
    
    static _another_array_slice *
    _another_array_alloc (void);
    
    static void
    _another_array_free (
        _another_array_slice *_tao_slice
      );
    
    static _another_array_slice *
    _another_array_dup (
        const _another_array_slice *_tao_slice
      );
    
    static void
    _another_array_copy (
        _another_array_slice *_tao_to,
        const _another_array_slice *_tao_from
      );
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:123
    
    void another_array (_another_array);
    _another_array_slice * another_array (void) const; // get method
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:591
    
    void the_string (char *);
    void the_string (const char *);
    void the_string (const ::CORBA::String_var&);
    const char *the_string (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:559
    
    void the_sequence (const CORBA::ShortSeq &);
    const CORBA::ShortSeq &the_sequence (void) const;
    CORBA::ShortSeq &the_sequence (void);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:460
    
    void the_any (const ::CORBA::Any &);
    const ::CORBA::Any &the_any (void) const;
    ::CORBA::Any &the_any (void);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:460
    
    void the_octet ( ::CORBA::Octet);
    ::CORBA::Octet the_octet (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:460
    
    void the_char ( ::CORBA::Char);
    ::CORBA::Char the_char (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:460
    
    void the_boolean ( ::CORBA::Boolean);
    ::CORBA::Boolean the_boolean (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:667
    
    void the_var_struct (const Param_Test::Var_Struct &);
    const Param_Test::Var_Struct &the_var_struct (void) const;
    Param_Test::Var_Struct &the_var_struct (void);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:667
    
    void the_fixed_struct (const Param_Test::Fixed_Struct &);
    const Param_Test::Fixed_Struct &the_fixed_struct (void) const;
    Param_Test::Fixed_Struct &the_fixed_struct (void);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/union_ch.cpp:146
    
    void _default (void);
  private:
    ::CORBA::Short disc_;
    ::CORBA::Short holder_;
    
    union
    {
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:101
      Param_Test::Fixed_Array_slice *the_array_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:190
      Coffee_var *the_interface_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:388
      ::CORBA::Long the_long_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:101
      _another_array_slice *another_array_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:485
      char *the_string_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:455
      CORBA::ShortSeq *the_sequence_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:388
      ::CORBA::Any *the_any_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:388
      ::CORBA::Octet the_octet_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:388
      ::CORBA::Char the_char_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:388
      ::CORBA::Boolean the_boolean_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:530
      Param_Test::Var_Struct *the_var_struct_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:530
      Param_Test::Fixed_Struct the_fixed_struct_;
    } u_;
    
    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Big_Union;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Big_Union *
  test_big_union (
    const ::Param_Test::Big_Union & u1,
    ::Param_Test::Big_Union & u2,
    ::Param_Test::Big_Union_out u3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:57
  
  enum Small_Union_Switch
  {
    A_LONG,
    A_SHORT
  };
  
  typedef Small_Union_Switch &Small_Union_Switch_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Small_Union_Switch;
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  class Small_Union;
  
  typedef
    TAO_Fixed_Var_T<
        Small_Union
      >
    Small_Union_var;
  
  typedef
    Small_Union &
    Small_Union_out;
  
  class  Small_Union
  {
  public:
    Small_Union (void);
    Small_Union (const Small_Union &);
    ~Small_Union (void);
    static void _tao_any_destructor (void*);
    
    Small_Union &operator= (const Small_Union &);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/discriminant_ch.cpp:82
    
    void _d (Param_Test::Small_Union_Switch);
    Param_Test::Small_Union_Switch _d (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/union_ch.cpp:110
    
    typedef Small_Union_var _var_type;
    typedef Small_Union_out _out_type;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:460
    
    void the_long ( ::CORBA::Long);
    ::CORBA::Long the_long (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:460
    
    void the_short ( ::CORBA::Short);
    ::CORBA::Short the_short (void) const;
  private:
    Param_Test::Small_Union_Switch disc_;
    Param_Test::Small_Union_Switch holder_;
    
    union
    {
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:388
      ::CORBA::Long the_long_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:388
      ::CORBA::Short the_short_;
    } u_;
    
    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Small_Union;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Small_Union
  test_small_union (
    const ::Param_Test::Small_Union & u1,
    ::Param_Test::Small_Union & u2,
    ::Param_Test::Small_Union_out u3);
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  struct level4;
  
  typedef
    TAO_Var_Var_T<
        level4
      >
    level4_var;
  
  typedef
    TAO_Out_T<
        level4
      >
    level4_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct  level4
  {
    typedef level4_var _var_type;
    typedef level4_out _out_type;
    
    static void _tao_any_destructor (void *);
    TAO::String_Manager level5_string;
    ::CORBA::Any level5_any;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_level4;
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  struct level8;
  
  typedef
    TAO_Var_Var_T<
        level8
      >
    level8_var;
  
  typedef
    TAO_Out_T<
        level8
      >
    level8_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct  level8
  {
    typedef level8_var _var_type;
    typedef level8_out _out_type;
    
    static void _tao_any_destructor (void *);
    TAO::String_Manager level9_string;
    ::CORBA::Boolean level9_boolean;
    ::CORBA::Short level9_short;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_level8;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::CORBA::Any *
  test_complex_any (
    const ::CORBA::Any & ca1,
    ::CORBA::Any & ca2,
    ::CORBA::Any_out ca3);
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  struct Recursive_Struct;
  
  typedef
    TAO_Var_Var_T<
        Recursive_Struct
      >
    Recursive_Struct_var;
  
  typedef
    TAO_Out_T<
        Recursive_Struct
      >
    Recursive_Struct_out;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:57
  
  struct  Recursive_Struct
  {
    typedef Recursive_Struct_var _var_type;
    typedef Recursive_Struct_out _out_type;
    
    static void _tao_any_destructor (void *);
    ::CORBA::Long x;
    
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_RECURSIVE_STRUCT__TAO_SEQ_PARAM_TEST_RECURSIVE_STRUCT__CH_)
#define _PARAM_TEST_RECURSIVE_STRUCT__TAO_SEQ_PARAM_TEST_RECURSIVE_STRUCT__CH_
    
    class  _tao_seq_Param_Test_Recursive_Struct_
      : public
          TAO::unbounded_value_sequence<
              Param_Test::Recursive_Struct
            >
    {
    public:
      _tao_seq_Param_Test_Recursive_Struct_ (void);
      _tao_seq_Param_Test_Recursive_Struct_ ( ::CORBA::ULong max);
      _tao_seq_Param_Test_Recursive_Struct_ (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Param_Test::Recursive_Struct* buffer, 
        ::CORBA::Boolean release = false);
      _tao_seq_Param_Test_Recursive_Struct_ (const _tao_seq_Param_Test_Recursive_Struct_ &);
      virtual ~_tao_seq_Param_Test_Recursive_Struct_ (void);
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_field/field_ch.cpp:358
    
    typedef _tao_seq_Param_Test_Recursive_Struct_ _children_seq;
    _tao_seq_Param_Test_Recursive_Struct_ children;
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Recursive_Struct;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Recursive_Struct *
  test_recursive_struct (
    const ::Param_Test::Recursive_Struct & rs1,
    ::Param_Test::Recursive_Struct & rs2,
    ::Param_Test::Recursive_Struct_out rs3);
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  class nested_rec_union;
  
  typedef
    TAO_Var_Var_T<
        nested_rec_union
      >
    nested_rec_union_var;
  
  typedef
    TAO_Out_T<
        nested_rec_union
      >
    nested_rec_union_out;
  
  class  nested_rec_union
  {
  public:
    nested_rec_union (void);
    nested_rec_union (const nested_rec_union &);
    ~nested_rec_union (void);
    static void _tao_any_destructor (void*);
    
    nested_rec_union &operator= (const nested_rec_union &);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/discriminant_ch.cpp:114
    
    void _d ( ::CORBA::Short);
    ::CORBA::Short _d (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/union_ch.cpp:110
    
    typedef nested_rec_union_var _var_type;
    typedef nested_rec_union_out _out_type;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:460
    
    void value ( ::CORBA::Long);
    ::CORBA::Long value (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_NESTED_REC_UNION__TAO_SEQ_PARAM_TEST_NESTED_REC_UNION__CH_)
#define _PARAM_TEST_NESTED_REC_UNION__TAO_SEQ_PARAM_TEST_NESTED_REC_UNION__CH_
    
    class  _tao_seq_Param_Test_nested_rec_union_
      : public
          TAO::unbounded_value_sequence<
              Param_Test::nested_rec_union
            >
    {
    public:
      _tao_seq_Param_Test_nested_rec_union_ (void);
      _tao_seq_Param_Test_nested_rec_union_ ( ::CORBA::ULong max);
      _tao_seq_Param_Test_nested_rec_union_ (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Param_Test::nested_rec_union* buffer, 
        ::CORBA::Boolean release = false);
      _tao_seq_Param_Test_nested_rec_union_ (const _tao_seq_Param_Test_nested_rec_union_ &);
      virtual ~_tao_seq_Param_Test_nested_rec_union_ (void);
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:548
    
    typedef _tao_seq_Param_Test_nested_rec_union_ _nested_rec_member_seq;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:559
    
    void nested_rec_member (const _tao_seq_Param_Test_nested_rec_union_ &);
    const _tao_seq_Param_Test_nested_rec_union_ &nested_rec_member (void) const;
    _tao_seq_Param_Test_nested_rec_union_ &nested_rec_member (void);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/union_ch.cpp:146
    
    void _default (void);
  private:
    ::CORBA::Short disc_;
    ::CORBA::Short holder_;
    
    union
    {
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:388
      ::CORBA::Long value_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:455
      _tao_seq_Param_Test_nested_rec_union_ *nested_rec_member_;
    } u_;
    
    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_nested_rec_union;
  
  // TAO_IDL - Generated from
  // .\be\be_type.cpp:269
  
  class Recursive_Union;
  
  typedef
    TAO_Var_Var_T<
        Recursive_Union
      >
    Recursive_Union_var;
  
  typedef
    TAO_Out_T<
        Recursive_Union
      >
    Recursive_Union_out;
  
  class  Recursive_Union
  {
  public:
    Recursive_Union (void);
    Recursive_Union (const Recursive_Union &);
    ~Recursive_Union (void);
    static void _tao_any_destructor (void*);
    
    Recursive_Union &operator= (const Recursive_Union &);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/discriminant_ch.cpp:114
    
    void _d ( ::CORBA::Short);
    ::CORBA::Short _d (void) const;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/union_ch.cpp:110
    
    typedef Recursive_Union_var _var_type;
    typedef Recursive_Union_out _out_type;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_PARAM_TEST_RECURSIVE_UNION__TAO_SEQ_PARAM_TEST_RECURSIVE_UNION__CH_)
#define _PARAM_TEST_RECURSIVE_UNION__TAO_SEQ_PARAM_TEST_RECURSIVE_UNION__CH_
    
    class  _tao_seq_Param_Test_Recursive_Union_
      : public
          TAO::unbounded_value_sequence<
              Param_Test::Recursive_Union
            >
    {
    public:
      _tao_seq_Param_Test_Recursive_Union_ (void);
      _tao_seq_Param_Test_Recursive_Union_ ( ::CORBA::ULong max);
      _tao_seq_Param_Test_Recursive_Union_ (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Param_Test::Recursive_Union* buffer, 
        ::CORBA::Boolean release = false);
      _tao_seq_Param_Test_Recursive_Union_ (const _tao_seq_Param_Test_Recursive_Union_ &);
      virtual ~_tao_seq_Param_Test_Recursive_Union_ (void);
    };

#endif /* end #if !defined */
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:548
    
    typedef _tao_seq_Param_Test_Recursive_Union_ _rec_member_seq;
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:559
    
    void rec_member (const _tao_seq_Param_Test_Recursive_Union_ &);
    const _tao_seq_Param_Test_Recursive_Union_ &rec_member (void) const;
    _tao_seq_Param_Test_Recursive_Union_ &rec_member (void);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:750
    
    void nested_member (const Param_Test::nested_rec_union &);
    const Param_Test::nested_rec_union &nested_member (void) const;
    Param_Test::nested_rec_union &nested_member (void);
    
    // TAO_IDL - Generated from
    // w:\tao\tao_idl\be\be_visitor_union/union_ch.cpp:146
    
    void _default (void);
  private:
    ::CORBA::Short disc_;
    ::CORBA::Short holder_;
    
    union
    {
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:455
      _tao_seq_Param_Test_Recursive_Union_ *rec_member_;
      // TAO_IDL - Generated from
      // w:\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:600
      Param_Test::nested_rec_union *nested_member_;
    } u_;
    
    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Recursive_Union;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Recursive_Union *
  test_recursive_union (
    const ::Param_Test::Recursive_Union & ru1,
    ::Param_Test::Recursive_Union & ru2,
    ::Param_Test::Recursive_Union_out ru3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:52
  
  static const CORBA::ULong DIM3 = 3U;
  
  // TAO_IDL - Generated from 
  // w:\tao\tao_idl\be\be_visitor_array/array_ch.cpp:62
  
  typedef Fixed_Array Multdim_Array[5][3];
  typedef Fixed_Array Multdim_Array_slice[3];
  struct Multdim_Array_tag {};
  
  
  typedef
    TAO_FixedArray_Var_T<
        Multdim_Array,
        Multdim_Array_slice,
        Multdim_Array_tag
      >
    Multdim_Array_var;
  
  typedef
    Multdim_Array
    Multdim_Array_out;
  
  typedef
    TAO_Array_Forany_T<
        Multdim_Array,
        Multdim_Array_slice,
        Multdim_Array_tag
      >
    Multdim_Array_forany;
  
  static Multdim_Array_slice *
  Multdim_Array_alloc (void);
  
  static void
  Multdim_Array_free (
      Multdim_Array_slice *_tao_slice 
    );
  
  static Multdim_Array_slice *
  Multdim_Array_dup (
      const Multdim_Array_slice *_tao_slice
    );
  
  static void
  Multdim_Array_copy (
      Multdim_Array_slice *_tao_to,
      const Multdim_Array_slice *_tao_from
    );
  
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49
  
  static ::CORBA::TypeCode_ptr const _tc_Multdim_Array;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual ::Param_Test::Multdim_Array_slice *
  test_multdim_array (
    const ::Param_Test::Multdim_Array m1,
    ::Param_Test::Multdim_Array m2,
    ::Param_Test::Multdim_Array_out m3);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:42
  
  virtual void
  shutdown (void);
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:209
  
  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
private:
  TAO::Collocation_Proxy_Broker *the_TAO_Param_Test_Proxy_Broker_;

protected:
  // Concrete interface only.
  Param_Test (void);
  
  // These methods traverse the inheritance tree and set the
  // parents piece of the given class in the right mode.
  virtual void Param_Test_setup_collocation (void);
  
  // Concrete non-local interface only.
  Param_Test (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  Param_Test (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);
  
  virtual ~Param_Test (void);

private:
  // Private and unimplemented for concrete interfaces.
  Param_Test (const Param_Test &);
  
  void operator= (const Param_Test &);
};

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:49

extern  ::CORBA::TypeCode_ptr const _tc_Param_Test;

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_root/root.cpp:139

extern 
TAO::Collocation_Proxy_Broker *
(*_TAO_Coffee_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*_TAO_Param_Test_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:64

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COFFEE__TRAITS_)
#define _COFFEE__TRAITS_
  
  template<>
  struct  Objref_Traits< ::Coffee>
  {
    static ::Coffee_ptr duplicate (
        ::Coffee_ptr p
      );
    static void release (
        ::Coffee_ptr p
      );
    static ::Coffee_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Coffee_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_PARAM_TEST__TRAITS_)
#define _PARAM_TEST__TRAITS_
  
  template<>
  struct  Objref_Traits< ::Param_Test>
  {
    static ::Param_Test_ptr duplicate (
        ::Param_Test_ptr p
      );
    static void release (
        ::Param_Test_ptr p
      );
    static ::Param_Test_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Param_Test_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
  template<>
  struct  Array_Traits<
      Param_Test::Fixed_Array_forany
    >
  {
    static void free (
        Param_Test::Fixed_Array_slice * _tao_slice
      );
    static Param_Test::Fixed_Array_slice * dup (
        const Param_Test::Fixed_Array_slice * _tao_slice
      );
    static void copy (
        Param_Test::Fixed_Array_slice * _tao_to,
        const Param_Test::Fixed_Array_slice * _tao_from
      );
    static Param_Test::Fixed_Array_slice * alloc (void);
    static void zero (
        Param_Test::Fixed_Array_slice * _tao_slice
      );
  };
  template<>
  struct  Array_Traits<
      Param_Test::Var_Array_forany
    >
  {
    static void free (
        Param_Test::Var_Array_slice * _tao_slice
      );
    static Param_Test::Var_Array_slice * dup (
        const Param_Test::Var_Array_slice * _tao_slice
      );
    static void copy (
        Param_Test::Var_Array_slice * _tao_to,
        const Param_Test::Var_Array_slice * _tao_from
      );
    static Param_Test::Var_Array_slice * alloc (void);
    static void zero (
        Param_Test::Var_Array_slice * _tao_slice
      );
  };
  template<>
  struct  Array_Traits<
      Param_Test::Big_Union::_another_array_forany
    >
  {
    static void free (
        Param_Test::Big_Union::_another_array_slice * _tao_slice
      );
    static Param_Test::Big_Union::_another_array_slice * dup (
        const Param_Test::Big_Union::_another_array_slice * _tao_slice
      );
    static void copy (
        Param_Test::Big_Union::_another_array_slice * _tao_to,
        const Param_Test::Big_Union::_another_array_slice * _tao_from
      );
    static Param_Test::Big_Union::_another_array_slice * alloc (void);
    static void zero (
        Param_Test::Big_Union::_another_array_slice * _tao_slice
      );
  };
  template<>
  struct  Array_Traits<
      Param_Test::Multdim_Array_forany
    >
  {
    static void free (
        Param_Test::Multdim_Array_slice * _tao_slice
      );
    static Param_Test::Multdim_Array_slice * dup (
        const Param_Test::Multdim_Array_slice * _tao_slice
      );
    static void copy (
        Param_Test::Multdim_Array_slice * _tao_to,
        const Param_Test::Multdim_Array_slice * _tao_from
      );
    static Param_Test::Multdim_Array_slice * alloc (void);
    static void zero (
        Param_Test::Multdim_Array_slice * _tao_slice
      );
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Coffee_ptr); // copying
 void operator<<= (::CORBA::Any &, Coffee_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Coffee_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Coffee::Desc &); // copying version
 void operator<<= (::CORBA::Any &, Coffee::Desc*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Coffee::Desc *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Coffee::Desc *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Param_Test_ptr); // copying
 void operator<<= (::CORBA::Any &, Param_Test_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Fixed_Struct &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::Fixed_Struct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Fixed_Struct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Fixed_Struct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::NameComponent &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::NameComponent*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::NameComponent *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::NameComponent *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Step &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::Step*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Step *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Step *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::PathSpec &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::PathSpec*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::PathSpec *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::PathSpec *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::Bounded_Short_Seq &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::Bounded_Short_Seq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Bounded_Short_Seq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Bounded_Short_Seq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::Bounded_Long_Seq &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::Bounded_Long_Seq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Bounded_Long_Seq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Bounded_Long_Seq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::Bounded_StrSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::Bounded_StrSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Bounded_StrSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Bounded_StrSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::Bounded_WStrSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::Bounded_WStrSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Bounded_WStrSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Bounded_WStrSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::StructSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::StructSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::StructSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::StructSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::Bounded_StructSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::Bounded_StructSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Bounded_StructSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Bounded_StructSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::Coffee_Mix &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::Coffee_Mix*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Coffee_Mix *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Coffee_Mix *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::Bounded_Coffee_Mix &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::Bounded_Coffee_Mix*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Bounded_Coffee_Mix *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Bounded_Coffee_Mix *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Var_Struct &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::Var_Struct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Var_Struct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Var_Struct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Nested_Struct &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::Nested_Struct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Nested_Struct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Nested_Struct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Objref_Struct &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::Objref_Struct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Objref_Struct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Objref_Struct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_array/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Fixed_Array_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Fixed_Array_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_array/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Var_Array_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Var_Array_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::ArraySeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::ArraySeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::ArraySeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::ArraySeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Param_Test::Bounded_ArraySeq &); // copying version
 void operator<<= ( ::CORBA::Any &, Param_Test::Bounded_ArraySeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Bounded_ArraySeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Bounded_ArraySeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:53
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const Param_Test::Ooops &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::Ooops*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Ooops *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Ooops *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:53
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const Param_Test::BadBoy &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::BadBoy*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::BadBoy *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::BadBoy *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_union/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Big_Union &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::Big_Union*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Big_Union *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Big_Union *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:52
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, Param_Test::Small_Union_Switch);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Small_Union_Switch &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_union/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Small_Union &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::Small_Union*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Small_Union *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Small_Union *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::level4 &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::level4*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::level4 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::level4 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::level8 &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::level8*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::level8 *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::level8 *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Recursive_Struct &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::Recursive_Struct*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Recursive_Struct *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Recursive_Struct *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_union/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::nested_rec_union &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::nested_rec_union*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::nested_rec_union *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::nested_rec_union *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_union/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Recursive_Union &); // copying version
 void operator<<= (::CORBA::Any &, Param_Test::Recursive_Union*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Recursive_Union *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Param_Test::Recursive_Union *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_array/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Param_Test::Multdim_Array_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::Multdim_Array_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Coffee_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Coffee_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Coffee::Desc &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Coffee::Desc &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::Fixed_Struct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Fixed_Struct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::NameComponent &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::NameComponent &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::Step &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Step &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_PathSpec_H_
#define _TAO_CDR_OP_Param_Test_PathSpec_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::PathSpec &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::PathSpec &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_PathSpec_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_Bounded_Short_Seq_H_
#define _TAO_CDR_OP_Param_Test_Bounded_Short_Seq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::Bounded_Short_Seq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::Bounded_Short_Seq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_Bounded_Short_Seq_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_Bounded_Long_Seq_H_
#define _TAO_CDR_OP_Param_Test_Bounded_Long_Seq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::Bounded_Long_Seq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::Bounded_Long_Seq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_Bounded_Long_Seq_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_Bounded_StrSeq_H_
#define _TAO_CDR_OP_Param_Test_Bounded_StrSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::Bounded_StrSeq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::Bounded_StrSeq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_Bounded_StrSeq_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_Bounded_WStrSeq_H_
#define _TAO_CDR_OP_Param_Test_Bounded_WStrSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::Bounded_WStrSeq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::Bounded_WStrSeq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_Bounded_WStrSeq_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_StructSeq_H_
#define _TAO_CDR_OP_Param_Test_StructSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::StructSeq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::StructSeq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_StructSeq_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_Bounded_StructSeq_H_
#define _TAO_CDR_OP_Param_Test_Bounded_StructSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::Bounded_StructSeq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::Bounded_StructSeq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_Bounded_StructSeq_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_Coffee_Mix_H_
#define _TAO_CDR_OP_Param_Test_Coffee_Mix_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::Coffee_Mix &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::Coffee_Mix &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_Coffee_Mix_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_Bounded_Coffee_Mix_H_
#define _TAO_CDR_OP_Param_Test_Bounded_Coffee_Mix_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::Bounded_Coffee_Mix &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::Bounded_Coffee_Mix &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_Bounded_Coffee_Mix_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::Var_Struct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Var_Struct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::Nested_Struct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Nested_Struct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::Objref_Struct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Objref_Struct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_array/cdr_op_ch.cpp:116


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Param_Test::Fixed_Array_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Fixed_Array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_array/cdr_op_ch.cpp:116


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Param_Test::Var_Array_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Var_Array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_ArraySeq_H_
#define _TAO_CDR_OP_Param_Test_ArraySeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::ArraySeq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::ArraySeq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_ArraySeq_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_Bounded_ArraySeq_H_
#define _TAO_CDR_OP_Param_Test_Bounded_ArraySeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::Bounded_ArraySeq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::Bounded_ArraySeq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_Bounded_ArraySeq_H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::Ooops &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Ooops &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:52
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::BadBoy &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::BadBoy &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_union/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::Big_Union &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Big_Union &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_array/cdr_op_ch.cpp:116


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Param_Test::Big_Union::_another_array_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Big_Union::_another_array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, Param_Test::Small_Union_Switch _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, Param_Test::Small_Union_Switch &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_union/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::Small_Union &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Small_Union &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::level4 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::level4 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::level8 &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::level8 &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::Recursive_Struct &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Recursive_Struct &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_Recursive_Struct__tao_seq_Param_Test_Recursive_Struct__H_
#define _TAO_CDR_OP_Param_Test_Recursive_Struct__tao_seq_Param_Test_Recursive_Struct__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::Recursive_Struct::_tao_seq_Param_Test_Recursive_Struct_ &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::Recursive_Struct::_tao_seq_Param_Test_Recursive_Struct_ &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_Recursive_Struct__tao_seq_Param_Test_Recursive_Struct__H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_union/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::nested_rec_union &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::nested_rec_union &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_nested_rec_union__tao_seq_Param_Test_nested_rec_union__H_
#define _TAO_CDR_OP_Param_Test_nested_rec_union__tao_seq_Param_Test_nested_rec_union__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::nested_rec_union::_tao_seq_Param_Test_nested_rec_union_ &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::nested_rec_union::_tao_seq_Param_Test_nested_rec_union_ &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_nested_rec_union__tao_seq_Param_Test_nested_rec_union__H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_union/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Param_Test::Recursive_Union &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Recursive_Union &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Param_Test_Recursive_Union__tao_seq_Param_Test_Recursive_Union__H_
#define _TAO_CDR_OP_Param_Test_Recursive_Union__tao_seq_Param_Test_Recursive_Union__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Param_Test::Recursive_Union::_tao_seq_Param_Test_Recursive_Union_ &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Param_Test::Recursive_Union::_tao_seq_Param_Test_Recursive_Union_ &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Param_Test_Recursive_Union__tao_seq_Param_Test_Recursive_Union__H_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_array/cdr_op_ch.cpp:116


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Param_Test::Multdim_Array_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::Multdim_Array_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, const std::string &_tao_string);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, std::string &_tao_string);
 void operator<<= ( ::CORBA::Any &, const std::string);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, std::string &);

TAO_END_VERSIONED_NAMESPACE_DECL

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, const Param_Test::UB_Long_Seq &_tao_vector);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Param_Test::UB_Long_Seq &_tao_array);
 void operator<<= ( ::CORBA::Any &, const Param_Test::UB_Long_Seq);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Param_Test::UB_Long_Seq &);

TAO_END_VERSIONED_NAMESPACE_DECL

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1452
#if defined (__ACE_INLINE__)
#include "param_testC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */


