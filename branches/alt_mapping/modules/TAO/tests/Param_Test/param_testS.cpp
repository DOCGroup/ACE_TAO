// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.5
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 *       http://doc.ece.uci.edu/
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:685

#ifndef _TAO_IDL_PARAM_TESTS_CPP_
#define _TAO_IDL_PARAM_TESTS_CPP_


#include "param_testS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/BD_String_SArgument_T.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/PortableServer/Fixed_Array_SArgument_T.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArgument_T.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Var_Array_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Any_SArg_Traits.h"
#include "tao/PortableServer/TypeCode_SArg_Traits.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Basic_Arguments.h"
#include "tao/BD_String_Argument_T.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Array_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/AnyTypeCode/Any_Arg_Traits.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "param_testS.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  template<>
  class SArg_Traits<Param_Test::UB_Long_Seq>
    : public
        Basic_SArg_Traits_T<
            Param_Test::UB_Long_Seq,
            TAO::Any_Insert_Policy_Stream <Param_Test::UB_Long_Seq>
          >
  {
  };
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_CORBA_SHORTSEQ__SARG_TRAITS_)
#define _CORBA_SHORTSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<CORBA::ShortSeq>
    : public
        Var_Size_SArg_Traits_T<
            CORBA::ShortSeq,
            TAO::Any_Insert_Policy_Stream <CORBA::ShortSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_CORBA_STRINGSEQ__SARG_TRAITS_)
#define _CORBA_STRINGSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<CORBA::StringSeq>
    : public
        Var_Size_SArg_Traits_T<
            CORBA::StringSeq,
            TAO::Any_Insert_Policy_Stream <CORBA::StringSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_CORBA_WSTRINGSEQ__SARG_TRAITS_)
#define _CORBA_WSTRINGSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<CORBA::WStringSeq>
    : public
        Var_Size_SArg_Traits_T<
            CORBA::WStringSeq,
            TAO::Any_Insert_Policy_Stream <CORBA::WStringSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_CORBA_ANYSEQ__SARG_TRAITS_)
#define _CORBA_ANYSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<CORBA::AnySeq>
    : public
        Var_Size_SArg_Traits_T<
            CORBA::AnySeq,
            TAO::Any_Insert_Policy_Stream <CORBA::AnySeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:141

#if !defined (_COFFEE__SARG_TRAITS_)
#define _COFFEE__SARG_TRAITS_
  
  template<>
  class  SArg_Traits<Coffee>
    : public
        Object_SArg_Traits_T<
            Coffee_ptr,
            Coffee_var,
            Coffee_out,
            TAO::Any_Insert_Policy_Stream <Coffee_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_COFFEE_DESC__SARG_TRAITS_)
#define _COFFEE_DESC__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Coffee::Desc>
    : public
        Var_Size_SArg_Traits_T<
            Coffee::Desc,
            TAO::Any_Insert_Policy_Stream <Coffee::Desc>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_SHORT_STRING128__SARG_TRAITS_)
#define _SHORT_STRING128__SARG_TRAITS_
  
  struct short_string_128 {};
  
  template<>
  class SArg_Traits<short_string_128>
    : public
        BD_String_SArg_Traits_T<
            CORBA::String_var,
            128,
            TAO::Any_Insert_Policy_Stream <
                ACE_OutputCDR::from_string
              >
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_SHORT_WSTRING128__SARG_TRAITS_)
#define _SHORT_WSTRING128__SARG_TRAITS_
  
  struct short_wstring_128 {};
  
  template<>
  class SArg_Traits<short_wstring_128>
    : public
        BD_String_SArg_Traits_T<
            CORBA::WString_var,
            128,
            TAO::Any_Insert_Policy_Stream <
                ACE_OutputCDR::from_wstring
              >
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_PARAM_TEST_FIXED_STRUCT__SARG_TRAITS_)
#define _PARAM_TEST_FIXED_STRUCT__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Fixed_Struct>
    : public
        Fixed_Size_SArg_Traits_T<
            Param_Test::Fixed_Struct,
            TAO::Any_Insert_Policy_Stream <Param_Test::Fixed_Struct>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_PATHSPEC__SARG_TRAITS_)
#define _PARAM_TEST_PATHSPEC__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::PathSpec>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::PathSpec,
            TAO::Any_Insert_Policy_Stream <Param_Test::PathSpec>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_SHORT_SEQ__SARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_SHORT_SEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Bounded_Short_Seq>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Bounded_Short_Seq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_Short_Seq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_LONG_SEQ__SARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_LONG_SEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Bounded_Long_Seq>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Bounded_Long_Seq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_Long_Seq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_STRSEQ__SARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_STRSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Bounded_StrSeq>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Bounded_StrSeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_StrSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_WSTRSEQ__SARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_WSTRSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Bounded_WStrSeq>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Bounded_WStrSeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_WStrSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_STRUCTSEQ__SARG_TRAITS_)
#define _PARAM_TEST_STRUCTSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::StructSeq>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::StructSeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::StructSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_STRUCTSEQ__SARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_STRUCTSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Bounded_StructSeq>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Bounded_StructSeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_StructSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_COFFEE_MIX__SARG_TRAITS_)
#define _PARAM_TEST_COFFEE_MIX__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Coffee_Mix>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Coffee_Mix,
            TAO::Any_Insert_Policy_Stream <Param_Test::Coffee_Mix>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_COFFEE_MIX__SARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_COFFEE_MIX__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Bounded_Coffee_Mix>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Bounded_Coffee_Mix,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_Coffee_Mix>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_PARAM_TEST_VAR_STRUCT__SARG_TRAITS_)
#define _PARAM_TEST_VAR_STRUCT__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Var_Struct>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Var_Struct,
            TAO::Any_Insert_Policy_Stream <Param_Test::Var_Struct>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_PARAM_TEST_NESTED_STRUCT__SARG_TRAITS_)
#define _PARAM_TEST_NESTED_STRUCT__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Nested_Struct>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Nested_Struct,
            TAO::Any_Insert_Policy_Stream <Param_Test::Nested_Struct>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_PARAM_TEST_OBJREF_STRUCT__SARG_TRAITS_)
#define _PARAM_TEST_OBJREF_STRUCT__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Objref_Struct>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Objref_Struct,
            TAO::Any_Insert_Policy_Stream <Param_Test::Objref_Struct>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PARAM_TEST_FIXED_ARRAY__SARG_TRAITS_)
#define _PARAM_TEST_FIXED_ARRAY__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Fixed_Array_tag>
    : public
        Fixed_Array_SArg_Traits_T<
            Param_Test::Fixed_Array_var,
            Param_Test::Fixed_Array_forany,
            TAO::Any_Insert_Policy_Stream <Param_Test::Fixed_Array_forany>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PARAM_TEST_VAR_ARRAY__SARG_TRAITS_)
#define _PARAM_TEST_VAR_ARRAY__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Var_Array_tag>
    : public
        Var_Array_SArg_Traits_T<
            Param_Test::Var_Array_out,
            Param_Test::Var_Array_forany,
            TAO::Any_Insert_Policy_Stream <Param_Test::Var_Array_forany>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_ARRAYSEQ__SARG_TRAITS_)
#define _PARAM_TEST_ARRAYSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::ArraySeq>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::ArraySeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::ArraySeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_ARRAYSEQ__SARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_ARRAYSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Bounded_ArraySeq>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Bounded_ArraySeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_ArraySeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:979

#if !defined (_PARAM_TEST_BIG_UNION__SARG_TRAITS_)
#define _PARAM_TEST_BIG_UNION__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Big_Union>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Big_Union,
            TAO::Any_Insert_Policy_Stream <Param_Test::Big_Union>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:979

#if !defined (_PARAM_TEST_SMALL_UNION__SARG_TRAITS_)
#define _PARAM_TEST_SMALL_UNION__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Small_Union>
    : public
        Fixed_Size_SArg_Traits_T<
            Param_Test::Small_Union,
            TAO::Any_Insert_Policy_Stream <Param_Test::Small_Union>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_PARAM_TEST_RECURSIVE_STRUCT__SARG_TRAITS_)
#define _PARAM_TEST_RECURSIVE_STRUCT__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Recursive_Struct>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Recursive_Struct,
            TAO::Any_Insert_Policy_Stream <Param_Test::Recursive_Struct>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:979

#if !defined (_PARAM_TEST_RECURSIVE_UNION__SARG_TRAITS_)
#define _PARAM_TEST_RECURSIVE_UNION__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Recursive_Union>
    : public
        Var_Size_SArg_Traits_T<
            Param_Test::Recursive_Union,
            TAO::Any_Insert_Policy_Stream <Param_Test::Recursive_Union>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PARAM_TEST_MULTDIM_ARRAY__SARG_TRAITS_)
#define _PARAM_TEST_MULTDIM_ARRAY__SARG_TRAITS_
  
  template<>
  class SArg_Traits<Param_Test::Multdim_Array_tag>
    : public
        Fixed_Array_SArg_Traits_T<
            Param_Test::Multdim_Array_var,
            Param_Test::Multdim_Array_forany,
            TAO::Any_Insert_Policy_Stream <Param_Test::Multdim_Array_forany>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  template<>
  class Arg_Traits<Param_Test::UB_Long_Seq>
    : public
        Basic_Arg_Traits_T<
            Param_Test::UB_Long_Seq,
            TAO::Any_Insert_Policy_Stream <Param_Test::UB_Long_Seq>
          >
  {
  };
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_CORBA_SHORTSEQ__ARG_TRAITS_)
#define _CORBA_SHORTSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<CORBA::ShortSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::ShortSeq,
            TAO::Any_Insert_Policy_Stream <CORBA::ShortSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_CORBA_STRINGSEQ__ARG_TRAITS_)
#define _CORBA_STRINGSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<CORBA::StringSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::StringSeq,
            TAO::Any_Insert_Policy_Stream <CORBA::StringSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_CORBA_WSTRINGSEQ__ARG_TRAITS_)
#define _CORBA_WSTRINGSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<CORBA::WStringSeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::WStringSeq,
            TAO::Any_Insert_Policy_Stream <CORBA::WStringSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_CORBA_ANYSEQ__ARG_TRAITS_)
#define _CORBA_ANYSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<CORBA::AnySeq>
    : public
        Var_Size_Arg_Traits_T<
            CORBA::AnySeq,
            TAO::Any_Insert_Policy_Stream <CORBA::AnySeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:141

#if !defined (_COFFEE__ARG_TRAITS_)
#define _COFFEE__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<Coffee>
    : public
        Object_Arg_Traits_T<
            Coffee_ptr,
            Coffee_var,
            Coffee_out,
            TAO::Objref_Traits<Coffee>,
            TAO::Any_Insert_Policy_Stream <Coffee_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_COFFEE_DESC__ARG_TRAITS_)
#define _COFFEE_DESC__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Coffee::Desc>
    : public
        Var_Size_Arg_Traits_T<
            Coffee::Desc,
            TAO::Any_Insert_Policy_Stream <Coffee::Desc>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_SHORT_STRING128__ARG_TRAITS_)
#define _SHORT_STRING128__ARG_TRAITS_
  
  template<>
  class Arg_Traits<short_string_128>
    : public
        BD_String_Arg_Traits_T<
            CORBA::String_var,
            128,
            TAO::Any_Insert_Policy_Stream <
                ACE_OutputCDR::from_string
              >
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_SHORT_WSTRING128__ARG_TRAITS_)
#define _SHORT_WSTRING128__ARG_TRAITS_
  
  template<>
  class Arg_Traits<short_wstring_128>
    : public
        BD_String_Arg_Traits_T<
            CORBA::WString_var,
            128,
            TAO::Any_Insert_Policy_Stream <
                ACE_OutputCDR::from_wstring
              >
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_PARAM_TEST_FIXED_STRUCT__ARG_TRAITS_)
#define _PARAM_TEST_FIXED_STRUCT__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Fixed_Struct>
    : public
        Fixed_Size_Arg_Traits_T<
            Param_Test::Fixed_Struct,
            TAO::Any_Insert_Policy_Stream <Param_Test::Fixed_Struct>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_PATHSPEC__ARG_TRAITS_)
#define _PARAM_TEST_PATHSPEC__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::PathSpec>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::PathSpec,
            TAO::Any_Insert_Policy_Stream <Param_Test::PathSpec>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_SHORT_SEQ__ARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_SHORT_SEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Bounded_Short_Seq>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Bounded_Short_Seq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_Short_Seq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_LONG_SEQ__ARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_LONG_SEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Bounded_Long_Seq>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Bounded_Long_Seq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_Long_Seq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_STRSEQ__ARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_STRSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Bounded_StrSeq>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Bounded_StrSeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_StrSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_WSTRSEQ__ARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_WSTRSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Bounded_WStrSeq>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Bounded_WStrSeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_WStrSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_STRUCTSEQ__ARG_TRAITS_)
#define _PARAM_TEST_STRUCTSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::StructSeq>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::StructSeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::StructSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_STRUCTSEQ__ARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_STRUCTSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Bounded_StructSeq>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Bounded_StructSeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_StructSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_COFFEE_MIX__ARG_TRAITS_)
#define _PARAM_TEST_COFFEE_MIX__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Coffee_Mix>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Coffee_Mix,
            TAO::Any_Insert_Policy_Stream <Param_Test::Coffee_Mix>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_COFFEE_MIX__ARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_COFFEE_MIX__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Bounded_Coffee_Mix>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Bounded_Coffee_Mix,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_Coffee_Mix>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_PARAM_TEST_VAR_STRUCT__ARG_TRAITS_)
#define _PARAM_TEST_VAR_STRUCT__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Var_Struct>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Var_Struct,
            TAO::Any_Insert_Policy_Stream <Param_Test::Var_Struct>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_PARAM_TEST_NESTED_STRUCT__ARG_TRAITS_)
#define _PARAM_TEST_NESTED_STRUCT__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Nested_Struct>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Nested_Struct,
            TAO::Any_Insert_Policy_Stream <Param_Test::Nested_Struct>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_PARAM_TEST_OBJREF_STRUCT__ARG_TRAITS_)
#define _PARAM_TEST_OBJREF_STRUCT__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Objref_Struct>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Objref_Struct,
            TAO::Any_Insert_Policy_Stream <Param_Test::Objref_Struct>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PARAM_TEST_FIXED_ARRAY__ARG_TRAITS_)
#define _PARAM_TEST_FIXED_ARRAY__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Fixed_Array_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            Param_Test::Fixed_Array_var,
            Param_Test::Fixed_Array_forany,
            TAO::Any_Insert_Policy_Stream <Param_Test::Fixed_Array_forany>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PARAM_TEST_VAR_ARRAY__ARG_TRAITS_)
#define _PARAM_TEST_VAR_ARRAY__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Var_Array_tag>
    : public
        Var_Array_Arg_Traits_T<
            Param_Test::Var_Array_out,
            Param_Test::Var_Array_forany,
            TAO::Any_Insert_Policy_Stream <Param_Test::Var_Array_forany>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_ARRAYSEQ__ARG_TRAITS_)
#define _PARAM_TEST_ARRAYSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::ArraySeq>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::ArraySeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::ArraySeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:620

#if !defined (_PARAM_TEST_BOUNDED_ARRAYSEQ__ARG_TRAITS_)
#define _PARAM_TEST_BOUNDED_ARRAYSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Bounded_ArraySeq>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Bounded_ArraySeq,
            TAO::Any_Insert_Policy_Stream <Param_Test::Bounded_ArraySeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:979

#if !defined (_PARAM_TEST_BIG_UNION__ARG_TRAITS_)
#define _PARAM_TEST_BIG_UNION__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Big_Union>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Big_Union,
            TAO::Any_Insert_Policy_Stream <Param_Test::Big_Union>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:979

#if !defined (_PARAM_TEST_SMALL_UNION__ARG_TRAITS_)
#define _PARAM_TEST_SMALL_UNION__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Small_Union>
    : public
        Fixed_Size_Arg_Traits_T<
            Param_Test::Small_Union,
            TAO::Any_Insert_Policy_Stream <Param_Test::Small_Union>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:871

#if !defined (_PARAM_TEST_RECURSIVE_STRUCT__ARG_TRAITS_)
#define _PARAM_TEST_RECURSIVE_STRUCT__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Recursive_Struct>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Recursive_Struct,
            TAO::Any_Insert_Policy_Stream <Param_Test::Recursive_Struct>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:979

#if !defined (_PARAM_TEST_RECURSIVE_UNION__ARG_TRAITS_)
#define _PARAM_TEST_RECURSIVE_UNION__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Recursive_Union>
    : public
        Var_Size_Arg_Traits_T<
            Param_Test::Recursive_Union,
            TAO::Any_Insert_Policy_Stream <Param_Test::Recursive_Union>
          >
  {
  };

#endif /* end #if !defined */

#if !defined (_PARAM_TEST_MULTDIM_ARRAY__ARG_TRAITS_)
#define _PARAM_TEST_MULTDIM_ARRAY__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Param_Test::Multdim_Array_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            Param_Test::Multdim_Array_var,
            Param_Test::Multdim_Array_forany,
            TAO::Any_Insert_Policy_Stream <Param_Test::Multdim_Array_forany>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_interface.cpp:1555

class TAO_Coffee_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Coffee_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Coffee_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17,  0,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17,  0,
     17, 17,  0,  5, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17,  0,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17,  0, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17,
#else
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
     17, 17, 17, 17, 17,  0, 17,  0, 17, 17,
      0,  5, 17, 17, 17, 17, 17, 17, 17, 17,
      0, 17, 17, 17, 17, 17,  0, 17, 17, 17,
     17, 17, 17, 17, 17, 17, 17, 17,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_Coffee_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 16,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 16,
      HASH_VALUE_RANGE = 12,
      DUPLICATES = 2,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_Coffee::_is_a_skel, 0},
      {"_component", &POA_Coffee::_component_skel, 0},
      {"_non_existent", &POA_Coffee::_non_existent_skel, 0},
      {"_repository_id", &POA_Coffee::_repository_id_skel, 0},
      {"_interface", &POA_Coffee::_interface_skel, 0},
      {"_get_description", &POA_Coffee::_get_description_skel, 0},
      {"_set_description", &POA_Coffee::_set_description_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5,  -1,  -1,  -1,  -1,   6, -10,  -2,   7, 
        8,   9, -21, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Coffee_Perfect_Hash_OpTable tao_Coffee_optable;

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:988

TAO::Collocation_Proxy_Broker *
_TAO_Coffee_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
_TAO_Coffee_Proxy_Broker_Factory_Initializer (size_t)
{
  _TAO_Coffee_Proxy_Broker_Factory_function_pointer = 
    _TAO_Coffee_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
_TAO_Coffee_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  _TAO_Coffee_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (_TAO_Coffee_Proxy_Broker_Factory_Initializer)
    );

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:103

POA_Coffee::POA_Coffee (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Coffee_optable;
}

POA_Coffee::POA_Coffee (const POA_Coffee& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_Coffee::~POA_Coffee (void)
{
}


// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class _get_description_Coffee
  : public TAO::Upcall_Command
{
public:
  inline _get_description_Coffee (
    POA_Coffee * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Coffee::Desc>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Coffee::Desc> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->description ();
  }

private:
  POA_Coffee * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Coffee::_get_description_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Coffee::Desc>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Coffee * const impl =
    static_cast<POA_Coffee *> (servant);

  _get_description_Coffee command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class _set_description_Coffee
  : public TAO::Upcall_Command
{
public:
  inline _set_description_Coffee (
    POA_Coffee * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Coffee::Desc>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Coffee::Desc> (
        this->operation_details_,
        this->args_,
        1);
      
    this->servant_->description (
      arg_1);
  }

private:
  POA_Coffee * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Coffee::_set_description_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Coffee::Desc>::in_arg_val _tao_description;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_description
    };
  
  static size_t const nargs = 2;
  
  POA_Coffee * const impl =
    static_cast<POA_Coffee *> (servant);

  _set_description_Coffee command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:169



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class _is_a_Coffee_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _is_a_Coffee_Upcall_Command (
    POA_Coffee * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< char *>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< char *> (
        this->operation_details_,
        this->args_,
        1);
      
    retval =
      this->servant_-> _is_a (
        arg_1);
  }

private:
  POA_Coffee * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

void POA_Coffee::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_Coffee * const impl =
    static_cast<POA_Coffee *> (servant);
  
  _is_a_Coffee_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class _non_existent_Coffee_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _non_existent_Coffee_Upcall_Command (
    POA_Coffee * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _non_existent ();
  }

private:
  POA_Coffee * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

void POA_Coffee::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Coffee * const impl =
    static_cast<POA_Coffee *> (servant);
  
  _non_existent_Coffee_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class _repository_id_Coffee_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _repository_id_Coffee_Upcall_Command (
    POA_Coffee * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< char *>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< char *> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _repository_id ();
  }

private:
  POA_Coffee * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

void POA_Coffee::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Coffee * const impl =
    static_cast<POA_Coffee *> (servant);
  
  _repository_id_Coffee_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:512

void POA_Coffee::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_Coffee * const impl =
    static_cast<POA_Coffee *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);
  
  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class _get_component_Coffee_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _get_component_Coffee_Upcall_Command (
    POA_Coffee * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _get_component ();
  }

private:
  POA_Coffee * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

void POA_Coffee::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Coffee * const impl =
    static_cast<POA_Coffee *> (servant);
  
  _get_component_Coffee_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_Coffee::_is_a (const char* value)
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:Coffee:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Coffee::_interface_repository_id (void) const
{
  return "IDL:Coffee:1.0";
}

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:930

void POA_Coffee::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:856

Coffee *
POA_Coffee::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();
  
  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::Coffee STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_Coffee_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1555

class TAO_Param_Test_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Param_Test_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Param_Test_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 45,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66,  0,
     66, 66,  0, 10,  5, 25, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66,  5, 40,
     66, 66,  0, 66, 66, 66, 66, 66, 66, 66,
     66, 66,  0,  0, 66, 66, 66,  0, 35, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66,
#else
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
     66, 66, 66, 66, 66, 45, 66,  0, 66, 66,
      0, 10,  5, 25, 66, 66, 66, 66, 66,  5,
     40, 66, 66,  0, 66,  0,  0, 66, 66, 66,
      0, 35, 66, 66, 66, 66, 66, 66,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_Param_Test_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 45,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 30,
      MIN_HASH_VALUE = 10,
      MAX_HASH_VALUE = 65,
      HASH_VALUE_RANGE = 56,
      DUPLICATES = 7,
      WORDLIST_SIZE = 55
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"",0,0},
      {"test_short", &POA_Param_Test::test_short_skel, 0},
      {"test_strseq", &POA_Param_Test::test_strseq_skel, 0},
      {"test_anyseq", &POA_Param_Test::test_anyseq_skel, 0},
      {"test_wstrseq", &POA_Param_Test::test_wstrseq_skel, 0},
      {"test_coffe_mix", &POA_Param_Test::test_coffe_mix_skel, 0},
      {"test_var_struct", &POA_Param_Test::test_var_struct_skel, 0},
      {"test_objref", &POA_Param_Test::test_objref_skel, 0},
      {"test_fixed_struct", &POA_Param_Test::test_fixed_struct_skel, 0},
      {"test_nested_struct", &POA_Param_Test::test_nested_struct_skel, 0},
      {"test_objref_struct", &POA_Param_Test::test_objref_struct_skel, 0},
      {"test_bounded_strseq", &POA_Param_Test::test_bounded_strseq_skel, 0},
      {"test_bounded_wstrseq", &POA_Param_Test::test_bounded_wstrseq_skel, 0},
      {"test_recursive_struct", &POA_Param_Test::test_recursive_struct_skel, 0},
      {"test_bounded_coffe_mix", &POA_Param_Test::test_bounded_coffe_mix_skel, 0},
      {"test_typecode", &POA_Param_Test::test_typecode_skel, 0},
      {"make_coffee", &POA_Param_Test::make_coffee_skel, 0},
      {"test_long_sequence", &POA_Param_Test::test_long_sequence_skel, 0},
      {"test_short_sequence", &POA_Param_Test::test_short_sequence_skel, 0},
      {"test_array_sequence", &POA_Param_Test::test_array_sequence_skel, 0},
      {"test_struct_sequence", &POA_Param_Test::test_struct_sequence_skel, 0},
      {"test_bounded_long_sequence", &POA_Param_Test::test_bounded_long_sequence_skel, 0},
      {"test_bounded_short_sequence", &POA_Param_Test::test_bounded_short_sequence_skel, 0},
      {"test_bounded_array_sequence", &POA_Param_Test::test_bounded_array_sequence_skel, 0},
      {"test_bounded_struct_sequence", &POA_Param_Test::test_bounded_struct_sequence_skel, 0},
      {"test_ulonglong", &POA_Param_Test::test_ulonglong_skel, 0},
      {"test_unbounded_struct_sequence", &POA_Param_Test::test_unbounded_struct_sequence_skel, 0},
      {"test_any", &POA_Param_Test::test_any_skel, 0},
      {"test_bounded_string", &POA_Param_Test::test_bounded_string_skel, 0},
      {"test_bounded_wstring", &POA_Param_Test::test_bounded_wstring_skel, 0},
      {"test_unbounded_string", &POA_Param_Test::test_unbounded_string_skel, 0},
      {"test_unbounded_wstring", &POA_Param_Test::test_unbounded_wstring_skel, 0},
      {"shutdown", &POA_Param_Test::shutdown_skel, 0},
      {"test_var_array", &POA_Param_Test::test_var_array_skel, 0},
      {"_is_a", &POA_Param_Test::_is_a_skel, 0},
      {"test_fixed_array", &POA_Param_Test::test_fixed_array_skel, 0},
      {"test_complex_any", &POA_Param_Test::test_complex_any_skel, 0},
      {"test_multdim_array", &POA_Param_Test::test_multdim_array_skel, 0},
      {"test_exception", &POA_Param_Test::test_exception_skel, 0},
      {"test_big_union", &POA_Param_Test::test_big_union_skel, 0},
      {"_component", &POA_Param_Test::_component_skel, 0},
      {"test_small_union", &POA_Param_Test::test_small_union_skel, 0},
      {"_non_existent", &POA_Param_Test::_non_existent_skel, 0},
      {"_repository_id", &POA_Param_Test::_repository_id_skel, 0},
      {"test_recursive_union", &POA_Param_Test::test_recursive_union_skel, 0},
      {"_interface", &POA_Param_Test::_interface_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,  -1, -11,  -2, -18,  -2,  10, -70,  13,  -1, 
       14,  15,  16,  17, -75,  20,  21,  22,  23,  24, -27,  -2,  25,  -1, 
       26, -70,  29,  -1, -31,  -2, -44,  -2,  30, -70,  33,  34,  35, -47, 
       -2,  36,  37,  38,  39,  40,  41,  42,  43, -82,  -1,  46, -78,  49, 
       50,  -1,  51,  52,  53,  -1,  -1,  -1,  -1,  54, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Param_Test_Perfect_Hash_OpTable tao_Param_Test_optable;

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:988

TAO::Collocation_Proxy_Broker *
_TAO_Param_Test_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
_TAO_Param_Test_Proxy_Broker_Factory_Initializer (size_t)
{
  _TAO_Param_Test_Proxy_Broker_Factory_function_pointer = 
    _TAO_Param_Test_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
_TAO_Param_Test_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  _TAO_Param_Test_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (_TAO_Param_Test_Proxy_Broker_Factory_Initializer)
    );

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:103

POA_Param_Test::POA_Param_Test (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Param_Test_optable;
}

POA_Param_Test::POA_Param_Test (const POA_Param_Test& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_Param_Test::~POA_Param_Test (void)
{
}


// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_short_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_short_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Short>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Short> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::Short>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Short> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::Short>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::Short> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::Short>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::Short> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_short (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_short_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Short>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Short>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::CORBA::Short>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::CORBA::Short>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_short_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_ulonglong_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_ulonglong_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::ULongLong>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::ULongLong> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::ULongLong>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::ULongLong> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::ULongLong>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::ULongLong> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_ulonglong (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_ulonglong_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::ULongLong>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::CORBA::ULongLong>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::CORBA::ULongLong>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_ulonglong_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_unbounded_string_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_unbounded_string_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< std::string>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< std::string> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< std::string>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< std::string> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< std::string>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< std::string> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< std::string>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< std::string> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_unbounded_string (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_unbounded_string_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< std::string>::ret_val retval;
  TAO::SArg_Traits< std::string>::in_arg_val _tao_s1;
  TAO::SArg_Traits< std::string>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< std::string>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_unbounded_string_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_bounded_string_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_string_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::TAO::short_string_128>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::TAO::short_string_128> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::TAO::short_string_128>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::TAO::short_string_128> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::TAO::short_string_128>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::TAO::short_string_128> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::TAO::short_string_128>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::TAO::short_string_128> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_bounded_string (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_bounded_string_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::TAO::short_string_128>::ret_val retval;
  TAO::SArg_Traits< ::TAO::short_string_128>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::TAO::short_string_128>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::TAO::short_string_128>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_bounded_string_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_unbounded_wstring_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_unbounded_wstring_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::WChar *>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::WChar *> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::WChar *>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::WChar *> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::WChar *>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::WChar *> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::WChar *>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::WChar *> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_unbounded_wstring (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_unbounded_wstring_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::WChar *>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::WChar *>::in_arg_val _tao_ws1;
  TAO::SArg_Traits< ::CORBA::WChar *>::inout_arg_val _tao_ws2;
  TAO::SArg_Traits< ::CORBA::WChar *>::out_arg_val _tao_ws3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ws1,
      &_tao_ws2,
      &_tao_ws3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_unbounded_wstring_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_bounded_wstring_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_wstring_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::TAO::short_wstring_128>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::TAO::short_wstring_128> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::TAO::short_wstring_128>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::TAO::short_wstring_128> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::TAO::short_wstring_128>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::TAO::short_wstring_128> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::TAO::short_wstring_128>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::TAO::short_wstring_128> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_bounded_wstring (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_bounded_wstring_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::TAO::short_wstring_128>::ret_val retval;
  TAO::SArg_Traits< ::TAO::short_wstring_128>::in_arg_val _tao_ws1;
  TAO::SArg_Traits< ::TAO::short_wstring_128>::inout_arg_val _tao_ws2;
  TAO::SArg_Traits< ::TAO::short_wstring_128>::out_arg_val _tao_ws3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ws1,
      &_tao_ws2,
      &_tao_ws3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_bounded_wstring_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_fixed_struct_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_fixed_struct_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Fixed_Struct> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Fixed_Struct> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Fixed_Struct> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Fixed_Struct> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_fixed_struct (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_fixed_struct_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Fixed_Struct>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_fixed_struct_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_unbounded_struct_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_unbounded_struct_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::PathSpec>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::PathSpec> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::PathSpec>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::PathSpec> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::PathSpec>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::PathSpec> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::PathSpec>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::PathSpec> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_unbounded_struct_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_unbounded_struct_sequence_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::PathSpec>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::PathSpec>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::PathSpec>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::PathSpec>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_unbounded_struct_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_short_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_short_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::ShortSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::ShortSeq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::ShortSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::ShortSeq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::ShortSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::ShortSeq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::ShortSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::ShortSeq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_short_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_short_sequence_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::ShortSeq>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ShortSeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::CORBA::ShortSeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::CORBA::ShortSeq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_short_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_bounded_short_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_short_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_Short_Seq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_Short_Seq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_Short_Seq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_Short_Seq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_bounded_short_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_bounded_short_sequence_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_Short_Seq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_bounded_short_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_long_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_long_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< Param_Test::UB_Long_Seq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< Param_Test::UB_Long_Seq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< Param_Test::UB_Long_Seq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< Param_Test::UB_Long_Seq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< Param_Test::UB_Long_Seq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< Param_Test::UB_Long_Seq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< Param_Test::UB_Long_Seq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< Param_Test::UB_Long_Seq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_long_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_long_sequence_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< Param_Test::UB_Long_Seq>::ret_val retval;
  TAO::SArg_Traits< Param_Test::UB_Long_Seq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< Param_Test::UB_Long_Seq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< Param_Test::UB_Long_Seq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_long_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_bounded_long_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_long_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_Long_Seq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_Long_Seq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_Long_Seq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_Long_Seq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_bounded_long_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_bounded_long_sequence_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_Long_Seq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_bounded_long_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_strseq_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_strseq_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::StringSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::StringSeq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::StringSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::StringSeq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::StringSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::StringSeq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::StringSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::StringSeq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_strseq (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_strseq_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::StringSeq>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::StringSeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::CORBA::StringSeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::CORBA::StringSeq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_strseq_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_bounded_strseq_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_strseq_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_StrSeq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_StrSeq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_StrSeq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_StrSeq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_bounded_strseq (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_bounded_strseq_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_StrSeq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_bounded_strseq_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_wstrseq_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_wstrseq_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::WStringSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::WStringSeq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::WStringSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::WStringSeq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::WStringSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::WStringSeq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::WStringSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::WStringSeq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_wstrseq (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_wstrseq_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::WStringSeq>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::WStringSeq>::in_arg_val _tao_ws1;
  TAO::SArg_Traits< ::CORBA::WStringSeq>::inout_arg_val _tao_ws2;
  TAO::SArg_Traits< ::CORBA::WStringSeq>::out_arg_val _tao_ws3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ws1,
      &_tao_ws2,
      &_tao_ws3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_wstrseq_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_bounded_wstrseq_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_wstrseq_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_WStrSeq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_WStrSeq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_WStrSeq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_WStrSeq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_bounded_wstrseq (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_bounded_wstrseq_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::in_arg_val _tao_ws1;
  TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::inout_arg_val _tao_ws2;
  TAO::SArg_Traits< ::Param_Test::Bounded_WStrSeq>::out_arg_val _tao_ws3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ws1,
      &_tao_ws2,
      &_tao_ws3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_bounded_wstrseq_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_struct_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_struct_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::StructSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::StructSeq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::StructSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::StructSeq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::StructSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::StructSeq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::StructSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::StructSeq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_struct_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_struct_sequence_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::StructSeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::StructSeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::StructSeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::StructSeq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_struct_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_bounded_struct_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_struct_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_StructSeq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_StructSeq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_StructSeq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_StructSeq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_bounded_struct_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_bounded_struct_sequence_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_StructSeq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_bounded_struct_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_coffe_mix_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_coffe_mix_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Coffee_Mix> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Coffee_Mix> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Coffee_Mix> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Coffee_Mix> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_coffe_mix (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_coffe_mix_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Coffee_Mix>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_coffe_mix_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_bounded_coffe_mix_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_coffe_mix_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_Coffee_Mix> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_Coffee_Mix> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_Coffee_Mix> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_Coffee_Mix> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_bounded_coffe_mix (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_bounded_coffe_mix_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_Coffee_Mix>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_bounded_coffe_mix_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_anyseq_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_anyseq_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::AnySeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::AnySeq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::AnySeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::AnySeq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::AnySeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::AnySeq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::AnySeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::AnySeq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_anyseq (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_anyseq_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::AnySeq>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::AnySeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::CORBA::AnySeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::CORBA::AnySeq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_anyseq_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_var_struct_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_var_struct_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Var_Struct>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Var_Struct> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Var_Struct>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Var_Struct> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Var_Struct>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Var_Struct> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Var_Struct>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Var_Struct> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_var_struct (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_var_struct_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Var_Struct>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Var_Struct>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Var_Struct>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Var_Struct>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_var_struct_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_nested_struct_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_nested_struct_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Nested_Struct>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Nested_Struct> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Nested_Struct>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Nested_Struct> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Nested_Struct>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Nested_Struct> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Nested_Struct>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Nested_Struct> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_nested_struct (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_nested_struct_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Nested_Struct>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Nested_Struct>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Nested_Struct>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Nested_Struct>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_nested_struct_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class make_coffee_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline make_coffee_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Coffee>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Coffee> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_->make_coffee ();
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::make_coffee_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Coffee>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  make_coffee_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_objref_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_objref_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Coffee>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Coffee> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Coffee>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Coffee> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Coffee>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Coffee> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Coffee>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Coffee> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_objref (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_objref_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Coffee>::ret_val retval;
  TAO::SArg_Traits< ::Coffee>::in_arg_val _tao_o1;
  TAO::SArg_Traits< ::Coffee>::inout_arg_val _tao_o2;
  TAO::SArg_Traits< ::Coffee>::out_arg_val _tao_o3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_o1,
      &_tao_o2,
      &_tao_o3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_objref_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_typecode_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_typecode_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::TypeCode>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::TypeCode> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::TypeCode>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::TypeCode> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::TypeCode>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::TypeCode> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_typecode (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_typecode_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::TypeCode>::in_arg_val _tao_t1;
  TAO::SArg_Traits< ::CORBA::TypeCode>::inout_arg_val _tao_t2;
  TAO::SArg_Traits< ::CORBA::TypeCode>::out_arg_val _tao_t3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_t1,
      &_tao_t2,
      &_tao_t3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_typecode_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_any_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_any_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::Any>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::Any>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_any (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_any_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_a1;
  TAO::SArg_Traits< ::CORBA::Any>::inout_arg_val _tao_a2;
  TAO::SArg_Traits< ::CORBA::Any>::out_arg_val _tao_a3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_a1,
      &_tao_a2,
      &_tao_a3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_any_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_objref_struct_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_objref_struct_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Objref_Struct>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Objref_Struct> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Objref_Struct>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Objref_Struct> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Objref_Struct>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Objref_Struct> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Objref_Struct>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Objref_Struct> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_objref_struct (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_objref_struct_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Objref_Struct>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Objref_Struct>::in_arg_val _tao_t1;
  TAO::SArg_Traits< ::Param_Test::Objref_Struct>::inout_arg_val _tao_t2;
  TAO::SArg_Traits< ::Param_Test::Objref_Struct>::out_arg_val _tao_t3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_t1,
      &_tao_t2,
      &_tao_t3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_objref_struct_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_fixed_array_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_fixed_array_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Fixed_Array_tag> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Fixed_Array_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Fixed_Array_tag> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Fixed_Array_tag> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_fixed_array (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_fixed_array_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::in_arg_val _tao_l1;
  TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::inout_arg_val _tao_l2;
  TAO::SArg_Traits< ::Param_Test::Fixed_Array_tag>::out_arg_val _tao_l3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_l1,
      &_tao_l2,
      &_tao_l3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_fixed_array_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_var_array_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_var_array_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Var_Array_tag> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Var_Array_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Var_Array_tag> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Var_Array_tag> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_var_array (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_var_array_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::in_arg_val _tao_v1;
  TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::inout_arg_val _tao_v2;
  TAO::SArg_Traits< ::Param_Test::Var_Array_tag>::out_arg_val _tao_v3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_v1,
      &_tao_v2,
      &_tao_v3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_var_array_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_array_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_array_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::ArraySeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::ArraySeq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::ArraySeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::ArraySeq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::ArraySeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::ArraySeq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::ArraySeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::ArraySeq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_array_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_array_sequence_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::ArraySeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::ArraySeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::ArraySeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::ArraySeq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_array_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_bounded_array_sequence_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_bounded_array_sequence_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Bounded_ArraySeq> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Bounded_ArraySeq> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Bounded_ArraySeq> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Bounded_ArraySeq> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_bounded_array_sequence (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_bounded_array_sequence_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::Param_Test::Bounded_ArraySeq>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_bounded_array_sequence_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_exception_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_exception_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::ULong>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::ULong> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::ULong>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::ULong> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_exception (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_exception_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      Param_Test::_tc_Ooops
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_s1;
  TAO::SArg_Traits< ::CORBA::ULong>::inout_arg_val _tao_s2;
  TAO::SArg_Traits< ::CORBA::ULong>::out_arg_val _tao_s3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_s1,
      &_tao_s2,
      &_tao_s3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_exception_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_big_union_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_big_union_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Big_Union>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Big_Union> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Big_Union>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Big_Union> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Big_Union>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Big_Union> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Big_Union>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Big_Union> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_big_union (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_big_union_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Big_Union>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Big_Union>::in_arg_val _tao_u1;
  TAO::SArg_Traits< ::Param_Test::Big_Union>::inout_arg_val _tao_u2;
  TAO::SArg_Traits< ::Param_Test::Big_Union>::out_arg_val _tao_u3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_u1,
      &_tao_u2,
      &_tao_u3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_big_union_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_small_union_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_small_union_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Small_Union>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Small_Union> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Small_Union>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Small_Union> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Small_Union>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Small_Union> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Small_Union>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Small_Union> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_small_union (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_small_union_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Small_Union>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Small_Union>::in_arg_val _tao_u1;
  TAO::SArg_Traits< ::Param_Test::Small_Union>::inout_arg_val _tao_u2;
  TAO::SArg_Traits< ::Param_Test::Small_Union>::out_arg_val _tao_u3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_u1,
      &_tao_u2,
      &_tao_u3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_small_union_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_complex_any_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_complex_any_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::Any>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::Any>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::CORBA::Any> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_complex_any (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_complex_any_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_ca1;
  TAO::SArg_Traits< ::CORBA::Any>::inout_arg_val _tao_ca2;
  TAO::SArg_Traits< ::CORBA::Any>::out_arg_val _tao_ca3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ca1,
      &_tao_ca2,
      &_tao_ca3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_complex_any_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_recursive_struct_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_recursive_struct_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Recursive_Struct> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Recursive_Struct> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Recursive_Struct> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Recursive_Struct> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_recursive_struct (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_recursive_struct_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::in_arg_val _tao_rs1;
  TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::inout_arg_val _tao_rs2;
  TAO::SArg_Traits< ::Param_Test::Recursive_Struct>::out_arg_val _tao_rs3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_rs1,
      &_tao_rs2,
      &_tao_rs3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_recursive_struct_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_recursive_union_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_recursive_union_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Recursive_Union>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Recursive_Union> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Recursive_Union>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Recursive_Union> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Recursive_Union>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Recursive_Union> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Recursive_Union>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Recursive_Union> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_recursive_union (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_recursive_union_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Recursive_Union>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Recursive_Union>::in_arg_val _tao_ru1;
  TAO::SArg_Traits< ::Param_Test::Recursive_Union>::inout_arg_val _tao_ru2;
  TAO::SArg_Traits< ::Param_Test::Recursive_Union>::out_arg_val _tao_ru3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ru1,
      &_tao_ru2,
      &_tao_ru3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_recursive_union_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class test_multdim_array_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline test_multdim_array_Param_Test (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::Param_Test::Multdim_Array_tag> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::Param_Test::Multdim_Array_tag> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::Param_Test::Multdim_Array_tag> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::out_arg_type arg_3 =
      TAO::Portable_Server::get_out_arg< ::Param_Test::Multdim_Array_tag> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->test_multdim_array (
        arg_1
        , arg_2
        , arg_3);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::test_multdim_array_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::ret_val retval;
  TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::in_arg_val _tao_m1;
  TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::inout_arg_val _tao_m2;
  TAO::SArg_Traits< ::Param_Test::Multdim_Array_tag>::out_arg_val _tao_m3;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_m1,
      &_tao_m2,
      &_tao_m3
    };
  
  static size_t const nargs = 4;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  test_multdim_array_Param_Test command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class shutdown_Param_Test
  : public TAO::Upcall_Command
{
public:
  inline shutdown_Param_Test (
    POA_Param_Test * servant)
    : servant_ (servant)
  {
  }
  
  virtual void execute (void)
  {
    this->servant_->shutdown ();
  }

private:
  POA_Param_Test * const servant_;
};

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:190

void POA_Param_Test::shutdown_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);

  shutdown_Param_Test command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:169



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class _is_a_Param_Test_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _is_a_Param_Test_Upcall_Command (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< char *>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< char *> (
        this->operation_details_,
        this->args_,
        1);
      
    retval =
      this->servant_-> _is_a (
        arg_1);
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

void POA_Param_Test::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);
  
  _is_a_Param_Test_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class _non_existent_Param_Test_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _non_existent_Param_Test_Upcall_Command (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _non_existent ();
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

void POA_Param_Test::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);
  
  _non_existent_Param_Test_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class _repository_id_Param_Test_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _repository_id_Param_Test_Upcall_Command (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< char *>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< char *> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _repository_id ();
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

void POA_Param_Test::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);
  
  _repository_id_Param_Test_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:512

void POA_Param_Test::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);
  
  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:136

class _get_component_Param_Test_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _get_component_Param_Test_Upcall_Command (
    POA_Param_Test * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
      , operation_details_ (operation_details)
      , args_ (args)
  {
  }
  
  virtual void execute (void)
  {
    TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _get_component ();
  }

private:
  POA_Param_Test * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};

void POA_Param_Test::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_Param_Test * const impl =
    static_cast<POA_Param_Test *> (servant);
  
  _get_component_Param_Test_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_Param_Test::_is_a (const char* value)
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:Param_Test:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Param_Test::_interface_repository_id (void) const
{
  return "IDL:Param_Test:1.0";
}

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:930

void POA_Param_Test::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:856

Param_Test *
POA_Param_Test::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();
  
  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::Param_Test STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_Param_Test_Proxy_Broker_Factory_function_pointer
      );
}

#endif /* ifndef */

