// $Id$

// ============================================================================
// This version of Param_Test has been modified to use std::string for
// the test_unbounded_string operation, and std::vector for the
// test_long_sequence operation. Since modifications were done to generated
// code, Param_TestC.h, Param_TestC.cpp, Param_TestS.h, and Param_TestS.cpp
// have been added to the repository in this branch, for the time being until
// the branch is merged or until a dedicated test/example is created.
//
// Each data type tested in Param_Test has its own class that plugs into the
// test framework. In this version, the classes in ub_string.{h,cpp} and
// ub_long_sequence.{h,cpp} have also been modified to use the respective
// STL types. These classes handle the nuts and bolts of a particular test -
// initializing and resetting the argument values, and validating the
// results. In this way, a single driver can run any or all of the tests.
// To test the modified data types, use the options '-t ubstring' or
// '-t ub_long_sequence'. All other options work as usual.
//
// Alternate versions of the CDR insertion and extraction operators were
// added, and the appropriate Arg_Traits<> declarations made at the top
// of Param_TestC.cpp. The arg traits specializations are then used in
// the stub code, which is not otherwise modified at all.
// Since the arg traits template classes (in the ORB) are also parameterized
// with an Any insert policy (for interceptors), dummy Any insertion and
// extraction operators had to be added for the std::* types as well.
// Since these operators are currently no-ops, the DII tests of the
// data types in question have been disabled.
//
// One final note, the MPC file for this test has been modified to remove
// the IDL processing step, since the generated stub files have been
// modified by hand. Since these generated files have been added to the
// repository, the test will build normally.
// ============================================================================

This directory contains an application that tests all the parameter
passing conventions in CORBA for a number of OMG IDL data types.

Type "make" to make the application. The server executable is called
"server" and the client executable is called "client".

You should have the TAO IDL compiler and the TAO library installed
before using this application.

The -GA options has been added the IDL compiler command line for this
test. This option moves the generation of implementations for type
codes and Any insertion/extraction operators to a separate file with
the extension *A.cpp. Adding this option tests that it is handled
correctly for all the various IDL types used in this test.

To run the server, type

   server [arguments to ORB_init] [-d] [-o <ior_output_file>]

          arguments to ORB_init start with the letters -ORB. Please
          see TAO documentattion on all the supported arguments

          -d for debugging. 
	  -o <ior_output_file> for outputting the servant IOR to a file.

To run the client, type

   client [arguments to ORB_init] [options for this application]

   Supported options are:

   [-d]                                 debugging
   [-n loopcount]                       number of times to run the test
   [-f servant-IOR-file]		reads the servant-IOR from the
                                        specified file. 
   [-k Param_Test-obj-ref-key]          object key of Param_Test object
   [-i invocation (sii/dii)]            default is static invocation
                                        interface. To use DII, type
                                        -i dii
   [-t data type]
       Data types supported in this version are:

       short                for shorts
       ulonglong            for unsigned long long
       ubstring             for unbounded string
       ubwstring            for unbounded wide string
       bdstring             for bounded string
       bswstring            for bounded wide string
       fixed_struct         for fixed sized structs
       ub_strseq            for sequences of strings
       ub_wstrseq           for sequences of wide strings
       bd_strseq            for bounded sequences of strings
       bd_wstrseq           for bounded sequences of wide strings
       var_struct           for variable structs
       nested_struct        for nested structs
       objref_struct        for object references inside structures
       ub_struct_seq        for sequences of structs
       bd_struct_seq        for bounded sequences of structs
       any                  for Any
       objref               for object references
       objref_sequence      for sequences object references
       any_sequence         for sequences of Any
       ub_short_sequence    for sequences of shorts
       ub_long_sequence     for sequences of shorts
       bd_short_sequence    for bounded sequences of shorts
       bd_long_sequence     for bounded sequences of shorts
       fixed_array          for arrays of fixed sized types (longs)
       var_array            for arrays of var sized types (strings)
       typecode             for typecode
       exception            for exceptions
       multdim_array        for multi dimensional arrays


	There are 2 options of giving the Param_obj-ref-key i.e IOR to
the client:

	1. Using the -f option to read the IOR from a file.

	2. Using the -k option to read the IOR from the 	
	   command line.

run_test.pl:
-----------
	There is a perl script in this directory named run_test.pl to
        test all the types. It starts the server first and then runs
        the client with the different data type parameters. The
        arguments it takes are: 
	
	-n num              -- runs the client num times (default is 5)
        -d                  -- runs each in debug mode
        -onewin             -- keeps all tests in one window on NT
        -h                  -- prints this information
        -t type             -- runs only one type of param test
        -i (dii|sii)        -- Changes the type of invocation (default is sii)
