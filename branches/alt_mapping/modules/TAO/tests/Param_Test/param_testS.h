// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.5
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 *       http://doc.ece.uci.edu/
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:477

#ifndef _TAO_IDL_PARAM_TESTS_H_
#define _TAO_IDL_PARAM_TESTS_H_

#include /**/ "ace/pre.h"

#include "param_testC.h"
#include "tao/BooleanSeqS.h"
#include "tao/CharSeqS.h"
#include "tao/DoubleSeqS.h"
#include "tao/FloatSeqS.h"
#include "tao/LongDoubleSeqS.h"
#include "tao/LongSeqS.h"
#include "tao/OctetSeqS.h"
#include "tao/ShortSeqS.h"
#include "tao/StringSeqS.h"
#include "tao/ULongSeqS.h"
#include "tao/UShortSeqS.h"
#include "tao/WCharSeqS.h"
#include "tao/WStringSeqS.h"
#include "tao/LongLongSeqS.h"
#include "tao/ULongLongSeqS.h"
#include "tao/PolicyS.h"
#include "tao/Policy_ManagerS.h"
#include "tao/Policy_CurrentS.h"
#include "tao/ServicesS.h"
#include "tao/ParameterModeS.h"
#include "tao/orb_typesS.h"
#include "tao/Typecode_typesS.h"
#include "tao/WrongTransactionS.h"
#include "tao/AnyTypeCode/AnySeqS.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87

class POA_Coffee;
typedef POA_Coffee *POA_Coffee_ptr;

class  POA_Coffee
  : public virtual PortableServer::ServantBase
{
protected:
  POA_Coffee (void);

public:
  // Useful for template programming.
  typedef ::Coffee _stub_type;
  typedef ::Coffee_ptr _stub_ptr_type;
  typedef ::Coffee_var _stub_var_type;
  
  POA_Coffee (const POA_Coffee& rhs);
  virtual ~POA_Coffee (void);
  
  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
  
  static void _is_a_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _non_existent_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _interface_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _component_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _repository_id_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant);
  
  virtual void _dispatch (
      TAO_ServerRequest & req,
      void * servant_upcall);
  
  ::Coffee *_this (void);
  
  virtual const char* _interface_repository_id (void) const;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Coffee::Desc * description (void) = 0;
  
  static void _get_description_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual void description (
    const Coffee::Desc & description) = 0;
  
  static void _set_description_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
};

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87

class POA_Param_Test;
typedef POA_Param_Test *POA_Param_Test_ptr;

class  POA_Param_Test
  : public virtual PortableServer::ServantBase
{
protected:
  POA_Param_Test (void);

public:
  // Useful for template programming.
  typedef ::Param_Test _stub_type;
  typedef ::Param_Test_ptr _stub_ptr_type;
  typedef ::Param_Test_var _stub_var_type;
  
  POA_Param_Test (const POA_Param_Test& rhs);
  virtual ~POA_Param_Test (void);
  
  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
  
  static void _is_a_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _non_existent_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _interface_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _component_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _repository_id_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant);
  
  virtual void _dispatch (
      TAO_ServerRequest & req,
      void * servant_upcall);
  
  ::Param_Test *_this (void);
  
  virtual const char* _interface_repository_id (void) const;
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Short test_short (
    CORBA::Short s1,
    CORBA::Short & s2,
    CORBA::Short_out s3) = 0;
  
  static void test_short_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::ULongLong test_ulonglong (
    CORBA::ULongLong s1,
    CORBA::ULongLong & s2,
    CORBA::ULongLong_out s3) = 0;
  
  static void test_ulonglong_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::string test_unbounded_string (
    const std::string s1,
    std::string & s2,
    std::string & s3) = 0;
  
  static void test_unbounded_string_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual char * test_bounded_string (
    const char * s1,
    char *& s2,
    ::CORBA::String_out s3) = 0;
  
  static void test_bounded_string_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::WChar * test_unbounded_wstring (
    const ::CORBA::WChar * ws1,
    ::CORBA::WChar *& ws2,
    ::CORBA::WString_out ws3) = 0;
  
  static void test_unbounded_wstring_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::WChar * test_bounded_wstring (
    const ::CORBA::WChar * ws1,
    ::CORBA::WChar *& ws2,
    ::CORBA::WString_out ws3) = 0;
  
  static void test_bounded_wstring_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Fixed_Struct test_fixed_struct (
    const Param_Test::Fixed_Struct & s1,
    Param_Test::Fixed_Struct & s2,
    Param_Test::Fixed_Struct_out s3) = 0;
  
  static void test_fixed_struct_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<Param_Test::Step> test_unbounded_struct_sequence (
    const std::vector<Param_Test::Step> & s1,
    std::vector<Param_Test::Step> & s2,
    std::vector<Param_Test::Step> & s3) = 0;
  
  static void test_unbounded_struct_sequence_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<CORBA::Short> test_short_sequence (
    const std::vector<CORBA::Short> & s1,
    std::vector<CORBA::Short> & s2,
    std::vector<CORBA::Short> & s3) = 0;
  
  static void test_short_sequence_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<CORBA::Short> test_bounded_short_sequence (
    const std::vector<CORBA::Short> & s1,
    std::vector<CORBA::Short> & s2,
    std::vector<CORBA::Short> & s3) = 0;
  
  static void test_bounded_short_sequence_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<CORBA::Long> test_long_sequence (
    const std::vector<CORBA::Long> & s1,
    std::vector<CORBA::Long> & s2,
    std::vector<CORBA::Long> & s3) = 0;
  
  static void test_long_sequence_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<CORBA::Long> test_bounded_long_sequence (
    const std::vector<CORBA::Long> & s1,
    std::vector<CORBA::Long> & s2,
    std::vector<CORBA::Long> & s3) = 0;
  
  static void test_bounded_long_sequence_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<char *> test_strseq (
    const std::vector<char *> & s1,
    std::vector<char *> & s2,
    std::vector<char *> & s3) = 0;
  
  static void test_strseq_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<char *> test_bounded_strseq (
    const std::vector<char *> & s1,
    std::vector<char *> & s2,
    std::vector<char *> & s3) = 0;
  
  static void test_bounded_strseq_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<CORBA::WChar *> test_wstrseq (
    const std::vector<CORBA::WChar *> & ws1,
    std::vector<CORBA::WChar *> & ws2,
    std::vector<CORBA::WChar *> & ws3) = 0;
  
  static void test_wstrseq_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<CORBA::WChar *> test_bounded_wstrseq (
    const std::vector<CORBA::WChar *> & ws1,
    std::vector<CORBA::WChar *> & ws2,
    std::vector<CORBA::WChar *> & ws3) = 0;
  
  static void test_bounded_wstrseq_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<Param_Test::Fixed_Struct> test_struct_sequence (
    const std::vector<Param_Test::Fixed_Struct> & s1,
    std::vector<Param_Test::Fixed_Struct> & s2,
    std::vector<Param_Test::Fixed_Struct> & s3) = 0;
  
  static void test_struct_sequence_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<Param_Test::Fixed_Struct> test_bounded_struct_sequence (
    const std::vector<Param_Test::Fixed_Struct> & s1,
    std::vector<Param_Test::Fixed_Struct> & s2,
    std::vector<Param_Test::Fixed_Struct> & s3) = 0;
  
  static void test_bounded_struct_sequence_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<Coffee> test_coffe_mix (
    const std::vector<Coffee> & s1,
    std::vector<Coffee> & s2,
    std::vector<Coffee> & s3) = 0;
  
  static void test_coffe_mix_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<Coffee> test_bounded_coffe_mix (
    const std::vector<Coffee> & s1,
    std::vector<Coffee> & s2,
    std::vector<Coffee> & s3) = 0;
  
  static void test_bounded_coffe_mix_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<CORBA::Any> test_anyseq (
    const std::vector<CORBA::Any> & s1,
    std::vector<CORBA::Any> & s2,
    std::vector<CORBA::Any> & s3) = 0;
  
  static void test_anyseq_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Var_Struct * test_var_struct (
    const Param_Test::Var_Struct & s1,
    Param_Test::Var_Struct & s2,
    Param_Test::Var_Struct_out s3) = 0;
  
  static void test_var_struct_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Nested_Struct * test_nested_struct (
    const Param_Test::Nested_Struct & s1,
    Param_Test::Nested_Struct & s2,
    Param_Test::Nested_Struct_out s3) = 0;
  
  static void test_nested_struct_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Coffee_ptr make_coffee (void) = 0;
  
  static void make_coffee_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Coffee_ptr test_objref (
    Coffee_ptr o1,
    Coffee_ptr & o2,
    Coffee_out o3) = 0;
  
  static void test_objref_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::TypeCode_ptr test_typecode (
    CORBA::TypeCode_ptr t1,
    CORBA::TypeCode_ptr & t2,
    CORBA::TypeCode_out t3) = 0;
  
  static void test_typecode_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Any * test_any (
    const CORBA::Any & a1,
    CORBA::Any & a2,
    CORBA::Any_out a3) = 0;
  
  static void test_any_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Objref_Struct * test_objref_struct (
    const Param_Test::Objref_Struct & t1,
    Param_Test::Objref_Struct & t2,
    Param_Test::Objref_Struct_out t3) = 0;
  
  static void test_objref_struct_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Fixed_Array_slice * test_fixed_array (
    const Param_Test::Fixed_Array l1,
    Param_Test::Fixed_Array l2,
    Param_Test::Fixed_Array_out l3) = 0;
  
  static void test_fixed_array_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Var_Array_slice * test_var_array (
    const Param_Test::Var_Array v1,
    Param_Test::Var_Array v2,
    Param_Test::Var_Array_out v3) = 0;
  
  static void test_var_array_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<Param_Test::Fixed_Array> test_array_sequence (
    const std::vector<Param_Test::Fixed_Array> & s1,
    std::vector<Param_Test::Fixed_Array> & s2,
    std::vector<Param_Test::Fixed_Array> & s3) = 0;
  
  static void test_array_sequence_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual std::vector<Param_Test::Fixed_Array> test_bounded_array_sequence (
    const std::vector<Param_Test::Fixed_Array> & s1,
    std::vector<Param_Test::Fixed_Array> & s2,
    std::vector<Param_Test::Fixed_Array> & s3) = 0;
  
  static void test_bounded_array_sequence_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::ULong test_exception (
    CORBA::ULong s1,
    CORBA::ULong & s2,
    CORBA::ULong_out s3) = 0;
  
  static void test_exception_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Big_Union * test_big_union (
    const Param_Test::Big_Union & u1,
    Param_Test::Big_Union & u2,
    Param_Test::Big_Union_out u3) = 0;
  
  static void test_big_union_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Small_Union test_small_union (
    const Param_Test::Small_Union & u1,
    Param_Test::Small_Union & u2,
    Param_Test::Small_Union_out u3) = 0;
  
  static void test_small_union_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Any * test_complex_any (
    const CORBA::Any & ca1,
    CORBA::Any & ca2,
    CORBA::Any_out ca3) = 0;
  
  static void test_complex_any_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Recursive_Struct * test_recursive_struct (
    const Param_Test::Recursive_Struct & rs1,
    Param_Test::Recursive_Struct & rs2,
    Param_Test::Recursive_Struct_out rs3) = 0;
  
  static void test_recursive_struct_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Recursive_Union * test_recursive_union (
    const Param_Test::Recursive_Union & ru1,
    Param_Test::Recursive_Union & ru2,
    Param_Test::Recursive_Union_out ru3) = 0;
  
  static void test_recursive_union_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::Param_Test::Multdim_Array_slice * test_multdim_array (
    const Param_Test::Multdim_Array m1,
    Param_Test::Multdim_Array m2,
    Param_Test::Multdim_Array_out m3) = 0;
  
  static void test_multdim_array_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // w:\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual void shutdown (void) = 0;
  
  static void shutdown_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
};

// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:1520


#if defined (__ACE_INLINE__)
#include "param_testS.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"
#endif /* ifndef */

