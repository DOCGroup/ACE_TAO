/**
 * @file Generic_Container.idl
 * @author Johnny Willemsen
 * $Id$
 * Extends the basic container interface for extension capabilities.
 */

#include "ciao/Containers/Container_Base.idl"
#include "ccm/Extension/CCM_ClientContainerInterceptorRegistration.idl"
#include "ccm/Extension/CCM_ServantContainerInterceptorRegistration.idl"
#include "ccm/Extension/CCM_ServerContainerInterceptorRegistration.idl"
#include "ccm/Extension/CCM_StubContainerInterceptorRegistration.idl"

module CIAO
{
  local interface Generic_Container : Container
  {
    Components::Cookie install_service_reference(in string service_id, in Object objref)
      raises (Components::CCMException);
    Object uninstall_service_reference(in Components::Cookie ck)
      raises (Components::CCMException);

    Components::ContainerPortableInterceptor::ClientContainerInterceptorRegistration
      get_client_interceptor_registration ()
        raises (Components::CCMException);
    Components::ContainerPortableInterceptor::ServerContainerInterceptorRegistration
      get_server_interceptor_registration ()
        raises (Components::CCMException);
    Components::ContainerPortableInterceptor::StubContainerInterceptorRegistration
      get_stub_interceptor_registration()
        raises (Components::CCMException);
    Components::ContainerPortableInterceptor::ServantContainerInterceptorRegistration
      get_servant_interceptor_registration()
        raises (Components::CCMException);
  };

  local interface InstanceManager
  {
    readonly attribute string instance_type;

    readonly attribute ::CORBA::StringSeq dependencies;

    void configure (/*in ::Deployment::Properties config*/);

    void install_instance (/*in ::Deployment::DeploymentPlan plan,*/
                           in unsigned long instanceRef,
                           out any instance_reference);
      /*raises (Deployment::StartError,
              Deployment::InvalidProperty,
              Deployment::InvalidNodeExecParameter,
              Deployment::InvalidComponentExecParameter);*/


    void connect_instance (/*in ::Deployment::DeploymentPlan plan,*/
                           in unsigned long connectionRef,
                           in any provided_reference);
      //raises (Deployment::StartError,
      //        Deployment::InvalidConnection);

    void disconnect_instance (/*in ::Deployment::DeploymentPlan plan,*/
                              in unsigned long connectionRef);
      //raises (::Deployment::StopError);

    void instance_configured (/*in ::Deployment::DeploymentPlan plan,*/
                              in unsigned long instanceRef);
      //raises (Deployment::StartError);

    void activate_instance (/*in ::Deployment::DeploymentPlan plan,*/
                            in unsigned long instanceRef,
                            in any instance_re:Dference);
      //raises (Deployment::StartError);

    void passivate_instance (/*in ::Deployment::DeploymentPlan plan,*/
                             in unsigned long instanceRef,
                             in any instance_reference);
      //raises (Deployment::StopError);

    void remove_instance (/*in ::Deployment::DeploymentPlan plan,*/
                          in unsigned long instanceRef,
                          in any instance_reference);
      //raises (::Deployment::StopError);

    /// Instruct the handler to release any resources prior to deallocation.
    void close ();
  };

};
