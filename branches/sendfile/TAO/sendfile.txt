Fri May  5 08:54:12 2006 UTC  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/MMAP_Allocator.h:
          Documented that offset returns -1 if the pointer is outside the mmap
          area.

        * tao/IIOP_Transport.cpp (sendfile):
          If we don't have an allocator or when the data is not coming from
          the mmap area, just call the regular send method. This way we
          fallback correctly to the regular way of sending data.

        * tao/GIOP_Message_Base.cpp:
          Reverted buffer changes of yesterday, with changes above when the
          buffer is coming from the stack, we fallback to regular send.
          Earlier tests of Ossama showed that sendfile is faster with buffers
          bigger then 16k, so if using sendfile it is a good idea to increase
          ACE_CDR::DEFAULT_BUFSIZE

        * tao/MMAP_Allocator.cpp:
          The ACE_MMAP_Memory_Pool has been extended with an unique flag, if
          this is set to true (default to false) it will create an unique
          filename using mktemp. This way each mmap used for sendfile will
          have its own file and don't interfere with other processes.

Thu May  4 15:13:12 2006 UTC  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/GIOP_Message_Base.cpp:
          Temporarily pass a zero pointer as buffer to the outstream so that
          we get a buffer from the mmap allocator in case of sendfile. For the
          output cdr for the reply also use the output allocators. Both
          changes should get improved but this is just to see if sendfile
          now works under all use cases.

        * tao/GIOP_Message_State.cpp:
          Improved debug message

Wed May  3 14:05:12 2006 UTC  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.cpp:
          Get the output_cdr_buffer_allocator from the orb core, not from the
          resource factory, else we get multiple allocators when just having
          one lane.

Tue May  2 12:06:12 2006 UTC  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/default_resource.cpp (use_local_memory_pool):
          Fixed bug, use assignment

Tue May  2 05:54:05 2006 UTC  Ossama Othman  <ossama@dre.vanderbilt.edu>

        * tao/IIOP_Transport.cpp:
        * tao/IIOP_Transport.h:
        * tao/Transport.cpp:
        * tao/Transport.h:

	  Integrated sendfile() call into queue draining loop.  Allows
	  sendfile() to be used in the same types of requests and replies
	  that the usual send() is used.

        * tao/default_resource.cpp (use_local_memory_pool):

	  If an output CDR buffer allocator type has not been configured,
	  set the allocator type to the local memory pool type.

Fri Apr  7 13:02:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.{h,cpp} (sendfile):
        * tao/IIOP_Transport.{h,cpp} (sendfile):
           Made message block argument const

Fri Apr  7 12:57:12 UTC 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Transport.{h,cpp}:
          Made the argument of drain_queue_i const

Tue Apr  4 10:36:57 2006  Ossama Othman   <ossama@dre.vanderbilt.edu>

	* tao/MMAP_Allocator.cpp:

	  Explicitly configure the underlying memory pool with the desired
	  set of options, including a default size and the MAP_SHARED
	  mmap() flag.  MAP_SHARED must be used instead of MAP_PRIVATE,
	  for example, since the data written to the mmap()ed buffer must
	  be reflected in the backing store file, portions of which may be
	  sent through sendfile().  Addresses a seg fault that occurred
	  when attempting allocate memory through the backing store.

Tue Apr  4 09:22:12 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/default_resource.cpp:
        * tao/orbconf.h:
          Added TAO_USE_OUTPUT_CDR_MMAP_MEMORY_POOL which is set to 0 by
          default, this makes it possible to use sendfile with mmap always
          just by setting this define to 1

Mon Apr  3 15:15:12 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Object.cpp:
          Const improvements

Mon Apr  3 13:55:12 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/Profile.cpp:
          Const improvements

Mon Apr  3 12:58:12 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tao/default_resource.cpp:
          The option ORBZeroCopyWrite has no arguments, corrected the way we
          compare the options

Mon Apr  3 12:46:12 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * tests/Big_Oneways/run_test.pl:
        * tests/Hello/run_test.pl:
        * performance-tests/Throughput/run_test.pl:
          Check the return value of spawn, speedsup the builds when no
          executable is build

Mon Apr  3 12:40:12 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * performance-tests/Throughput/Receiver.cpp:
          Prefix increment

        * performance-tests/Throughput/Receiver_Factory.cpp:
          Initialise pointer with 0

        * performance-tests/Throughput/Throughput.mpc:
          Simplified

Wed Mar 29 13:17:12 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * docs/Options.html:
          Replaced all links to cvs.doc.wustl.edu to local files so that in
          environments where we can't reach the internet we still can see
          the examples

Wed Mar 29 12:48:12 2006  Johnny Willemsen  <jwillemsen@remedy.nl>

        * docs/Options.html:
          Added entries for -ORBZeroCOpyWrite and -ORBOutputCDRAllocator,
          detailed documentation has to be added

Tue Jan 10 18:48:24 2006  Ossama Othman  <ossama@dre.vanderbilt.edu>

	The following changes introduce sendfile()-based zero copy sends
	to TAO.  Benefits are generally only realized when sending large
	blocks of data.

	* tao/IIOP_Transport.cpp:
	* tao/IIOP_Transport.h:
	* tao/Transport.cpp:
	* tao/Transport.h:

	  Invoke sendfile() instead of send() if desired by the user, and
	  if conditions permit.

	* tao/default_resource.cpp:
	* tao/default_resource.h:

	  Added two new options "-ORBZeroCopyWrite" and
	  "-ORBOutputCDRAllocator".  The former indirectly controls the
	  latter.  Provides users with finer grained control over output
	  CDR buffer allocation and send strategies.

	* tao/MMAP_Allocator.cpp:
	* tao/MMAP_Allocator.h:

	  New mmap()-based allocator built that utilitizes
	  ACE_Lite_MMAP_Memory_Pool as its pool implementation.  Only used
	  when sendfile() support is compiled in.

	* tao/tao.mpc:

	  Added new MMAP_Allocator.{h,cpp} source to the list of sources.


Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
