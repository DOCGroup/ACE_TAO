Fri Mar 22 18:16:00 UTC 2013  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/ImplRepo_Service/LiveCheck.cpp:

          Fix for a core-on-exit problem.

Tue Mar 19 13:31:43 UTC 2013  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/ImplRepo_Service/ImR_Locator_i.h:
        * orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
        * orbsvcs/ImplRepo_Service/LiveCheck.h:
        * orbsvcs/ImplRepo_Service/LiveCheck.cpp:

          Adding new mechanism for pinging servers asynchronously. When the IMR is
          interested in the status of a server, it now registers a callback object and
          a ping is scheduled. At the appropriate time, the ping request is sent using
          AMI. The reply or exception is then handled asynchronously.

          For testing in an otherwise synchronous locator, a blocking ping reply waiter
          is used.

Thu Mar 14 21:36:30 UTC 2013  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/ImplRepo_Service/AsyncStartupWaiter_i.cpp:
        * orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:

          Some syntactic clean up and apply a fix for a memory leak Kevin applied to
          the trunk.

        * utils/logWalker/HostProcess.cpp:
        * utils/logWalker/Invocation.h:
        * utils/logWalker/Invocation.cpp:
        * utils/logWalker/Thread.h:
        * utils/logWalker/Thread.cpp:

          Add a new type of by-thread output that highlights nested upcalls and the
          processing impact of delaying action on replies.

Mon Mar 11 16:31:08 UTC 2013  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/ImplRepo_Service/ImR_Locator_i.h:
        * orbsvcs/ImplRepo_Service/ImR_Locator_i.cpp:
        * orbsvcs/ImplRepo_Service/Locator_Options.h:
        * orbsvcs/ImplRepo_Service/Locator_Options.cpp:

          Actually select the DSI/AMH implementation when the asynch
          option is supplied. Avoid confusion with the option by calling
          it --asynch rather than the earlier --use_dsi

        * orbsvcs/tests/ImplRepo/scale_clients/run_test.pl:

          Modify the test to verify that both synchronous and asynch
          implementations work.

Mon Mar 11 01:50:33 UTC 2013  Phil Mesnier  <mesnier_p@ociweb.com>

        * orbsvcs/ImplRepo_Service/Adapter_Activator.h:
        * orbsvcs/ImplRepo_Service/Adapter_Activator.cpp:

          In order to support asynchronous interfaces, the adapter has to use the
          default servant rather than the servant locator. The servant locator does
          not give an opportunity for asynch processing.

        * orbsvcs/ImplRepo_Service/Forwarder.h:
        * orbsvcs/ImplRepo_Service/Forwarder.cpp:

          The initial cut at implementing AMH.

        * orbsvcs/ImplRepo_Service/ImplRepo_Service.mpc:
        * orbsvcs/ImplRepo_Service/Locator_Options.h:
        * orbsvcs/ImplRepo_Service/Locator_Options.cpp:

          The feature is optional for now at least.

        * tao/ImR_Client/ImR_Client.mpc:

          Add support for generating asyncronous stubs and skeletons for working
          with the ImR.

Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
