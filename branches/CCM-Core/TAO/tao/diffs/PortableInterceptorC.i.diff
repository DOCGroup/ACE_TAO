--- orig/PortableInterceptorC.i	Wed Apr 25 00:17:34 2001
+++ PortableInterceptorC.i	Tue Apr 24 13:44:42 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -23,6 +23,49 @@
 #if !defined (_PORTABLEINTERCEPTOR_INTERCEPTOR___CI_)
 #define _PORTABLEINTERCEPTOR_INTERCEPTOR___CI_
 
+ACE_INLINE PortableInterceptor::Interceptor_ptr
+tao_PortableInterceptor_Interceptor_duplicate (
+    PortableInterceptor::Interceptor_ptr p
+  )
+{
+  return PortableInterceptor::Interceptor::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_Interceptor_release (
+    PortableInterceptor::Interceptor_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::Interceptor_ptr
+tao_PortableInterceptor_Interceptor_nil (
+    void
+  )
+{
+  return PortableInterceptor::Interceptor::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::Interceptor_ptr
+tao_PortableInterceptor_Interceptor_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::Interceptor::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_Interceptor_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::Interceptor **tmp =
+    ACE_static_cast (PortableInterceptor::Interceptor **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -38,6 +81,49 @@
 #if !defined (_PORTABLEINTERCEPTOR_CURRENT___CI_)
 #define _PORTABLEINTERCEPTOR_CURRENT___CI_
 
+ACE_INLINE PortableInterceptor::Current_ptr
+tao_PortableInterceptor_Current_duplicate (
+    PortableInterceptor::Current_ptr p
+  )
+{
+  return PortableInterceptor::Current::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_Current_release (
+    PortableInterceptor::Current_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::Current_ptr
+tao_PortableInterceptor_Current_nil (
+    void
+  )
+{
+  return PortableInterceptor::Current::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::Current_ptr
+tao_PortableInterceptor_Current_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::Current::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_Current_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::Current **tmp =
+    ACE_static_cast (PortableInterceptor::Current **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -45,6 +131,49 @@
 #if !defined (_PORTABLEINTERCEPTOR_REQUESTINFO___CI_)
 #define _PORTABLEINTERCEPTOR_REQUESTINFO___CI_
 
+ACE_INLINE PortableInterceptor::RequestInfo_ptr
+tao_PortableInterceptor_RequestInfo_duplicate (
+    PortableInterceptor::RequestInfo_ptr p
+  )
+{
+  return PortableInterceptor::RequestInfo::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_RequestInfo_release (
+    PortableInterceptor::RequestInfo_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::RequestInfo_ptr
+tao_PortableInterceptor_RequestInfo_nil (
+    void
+  )
+{
+  return PortableInterceptor::RequestInfo::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::RequestInfo_ptr
+tao_PortableInterceptor_RequestInfo_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::RequestInfo::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_RequestInfo_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::RequestInfo **tmp =
+    ACE_static_cast (PortableInterceptor::RequestInfo **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -52,6 +181,49 @@
 #if !defined (_PORTABLEINTERCEPTOR_CLIENTREQUESTINFO___CI_)
 #define _PORTABLEINTERCEPTOR_CLIENTREQUESTINFO___CI_
 
+ACE_INLINE PortableInterceptor::ClientRequestInfo_ptr
+tao_PortableInterceptor_ClientRequestInfo_duplicate (
+    PortableInterceptor::ClientRequestInfo_ptr p
+  )
+{
+  return PortableInterceptor::ClientRequestInfo::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_ClientRequestInfo_release (
+    PortableInterceptor::ClientRequestInfo_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::ClientRequestInfo_ptr
+tao_PortableInterceptor_ClientRequestInfo_nil (
+    void
+  )
+{
+  return PortableInterceptor::ClientRequestInfo::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::ClientRequestInfo_ptr
+tao_PortableInterceptor_ClientRequestInfo_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::ClientRequestInfo::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_ClientRequestInfo_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::ClientRequestInfo **tmp =
+    ACE_static_cast (PortableInterceptor::ClientRequestInfo **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -59,6 +231,49 @@
 #if !defined (_PORTABLEINTERCEPTOR_SERVERREQUESTINFO___CI_)
 #define _PORTABLEINTERCEPTOR_SERVERREQUESTINFO___CI_
 
+ACE_INLINE PortableInterceptor::ServerRequestInfo_ptr
+tao_PortableInterceptor_ServerRequestInfo_duplicate (
+    PortableInterceptor::ServerRequestInfo_ptr p
+  )
+{
+  return PortableInterceptor::ServerRequestInfo::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_ServerRequestInfo_release (
+    PortableInterceptor::ServerRequestInfo_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::ServerRequestInfo_ptr
+tao_PortableInterceptor_ServerRequestInfo_nil (
+    void
+  )
+{
+  return PortableInterceptor::ServerRequestInfo::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::ServerRequestInfo_ptr
+tao_PortableInterceptor_ServerRequestInfo_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::ServerRequestInfo::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_ServerRequestInfo_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::ServerRequestInfo **tmp =
+    ACE_static_cast (PortableInterceptor::ServerRequestInfo **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -66,6 +281,49 @@
 #if !defined (_PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR___CI_)
 #define _PORTABLEINTERCEPTOR_CLIENTREQUESTINTERCEPTOR___CI_
 
+ACE_INLINE PortableInterceptor::ClientRequestInterceptor_ptr
+tao_PortableInterceptor_ClientRequestInterceptor_duplicate (
+    PortableInterceptor::ClientRequestInterceptor_ptr p
+  )
+{
+  return PortableInterceptor::ClientRequestInterceptor::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_ClientRequestInterceptor_release (
+    PortableInterceptor::ClientRequestInterceptor_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::ClientRequestInterceptor_ptr
+tao_PortableInterceptor_ClientRequestInterceptor_nil (
+    void
+  )
+{
+  return PortableInterceptor::ClientRequestInterceptor::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::ClientRequestInterceptor_ptr
+tao_PortableInterceptor_ClientRequestInterceptor_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::ClientRequestInterceptor::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_ClientRequestInterceptor_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::ClientRequestInterceptor **tmp =
+    ACE_static_cast (PortableInterceptor::ClientRequestInterceptor **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -73,6 +331,49 @@
 #if !defined (_PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR___CI_)
 #define _PORTABLEINTERCEPTOR_SERVERREQUESTINTERCEPTOR___CI_
 
+ACE_INLINE PortableInterceptor::ServerRequestInterceptor_ptr
+tao_PortableInterceptor_ServerRequestInterceptor_duplicate (
+    PortableInterceptor::ServerRequestInterceptor_ptr p
+  )
+{
+  return PortableInterceptor::ServerRequestInterceptor::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_ServerRequestInterceptor_release (
+    PortableInterceptor::ServerRequestInterceptor_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::ServerRequestInterceptor_ptr
+tao_PortableInterceptor_ServerRequestInterceptor_nil (
+    void
+  )
+{
+  return PortableInterceptor::ServerRequestInterceptor::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::ServerRequestInterceptor_ptr
+tao_PortableInterceptor_ServerRequestInterceptor_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::ServerRequestInterceptor::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_ServerRequestInterceptor_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::ServerRequestInterceptor **tmp =
+    ACE_static_cast (PortableInterceptor::ServerRequestInterceptor **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -80,6 +381,49 @@
 #if !defined (_PORTABLEINTERCEPTOR_IORINFO___CI_)
 #define _PORTABLEINTERCEPTOR_IORINFO___CI_
 
+ACE_INLINE PortableInterceptor::IORInfo_ptr
+tao_PortableInterceptor_IORInfo_duplicate (
+    PortableInterceptor::IORInfo_ptr p
+  )
+{
+  return PortableInterceptor::IORInfo::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_IORInfo_release (
+    PortableInterceptor::IORInfo_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::IORInfo_ptr
+tao_PortableInterceptor_IORInfo_nil (
+    void
+  )
+{
+  return PortableInterceptor::IORInfo::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::IORInfo_ptr
+tao_PortableInterceptor_IORInfo_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::IORInfo::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_IORInfo_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::IORInfo **tmp =
+    ACE_static_cast (PortableInterceptor::IORInfo **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -87,6 +431,49 @@
 #if !defined (_PORTABLEINTERCEPTOR_IORINTERCEPTOR___CI_)
 #define _PORTABLEINTERCEPTOR_IORINTERCEPTOR___CI_
 
+ACE_INLINE PortableInterceptor::IORInterceptor_ptr
+tao_PortableInterceptor_IORInterceptor_duplicate (
+    PortableInterceptor::IORInterceptor_ptr p
+  )
+{
+  return PortableInterceptor::IORInterceptor::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_IORInterceptor_release (
+    PortableInterceptor::IORInterceptor_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::IORInterceptor_ptr
+tao_PortableInterceptor_IORInterceptor_nil (
+    void
+  )
+{
+  return PortableInterceptor::IORInterceptor::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::IORInterceptor_ptr
+tao_PortableInterceptor_IORInterceptor_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::IORInterceptor::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_IORInterceptor_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::IORInterceptor **tmp =
+    ACE_static_cast (PortableInterceptor::IORInterceptor **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -94,6 +481,49 @@
 #if !defined (_PORTABLEINTERCEPTOR_POLICYFACTORY___CI_)
 #define _PORTABLEINTERCEPTOR_POLICYFACTORY___CI_
 
+ACE_INLINE PortableInterceptor::PolicyFactory_ptr
+tao_PortableInterceptor_PolicyFactory_duplicate (
+    PortableInterceptor::PolicyFactory_ptr p
+  )
+{
+  return PortableInterceptor::PolicyFactory::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_PolicyFactory_release (
+    PortableInterceptor::PolicyFactory_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::PolicyFactory_ptr
+tao_PortableInterceptor_PolicyFactory_nil (
+    void
+  )
+{
+  return PortableInterceptor::PolicyFactory::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::PolicyFactory_ptr
+tao_PortableInterceptor_PolicyFactory_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::PolicyFactory::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_PolicyFactory_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::PolicyFactory **tmp =
+    ACE_static_cast (PortableInterceptor::PolicyFactory **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
@@ -109,12 +539,98 @@
 #if !defined (_PORTABLEINTERCEPTOR_ORBINITINFO___CI_)
 #define _PORTABLEINTERCEPTOR_ORBINITINFO___CI_
 
+ACE_INLINE PortableInterceptor::ORBInitInfo_ptr
+tao_PortableInterceptor_ORBInitInfo_duplicate (
+    PortableInterceptor::ORBInitInfo_ptr p
+  )
+{
+  return PortableInterceptor::ORBInitInfo::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_ORBInitInfo_release (
+    PortableInterceptor::ORBInitInfo_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::ORBInitInfo_ptr
+tao_PortableInterceptor_ORBInitInfo_nil (
+    void
+  )
+{
+  return PortableInterceptor::ORBInitInfo::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::ORBInitInfo_ptr
+tao_PortableInterceptor_ORBInitInfo_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::ORBInitInfo::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_ORBInitInfo_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::ORBInitInfo **tmp =
+    ACE_static_cast (PortableInterceptor::ORBInitInfo **, src);
+  return *tmp;
+}
+
 
 #endif /* end #if !defined */
 
 
 #if !defined (_PORTABLEINTERCEPTOR_ORBINITIALIZER___CI_)
 #define _PORTABLEINTERCEPTOR_ORBINITIALIZER___CI_
+
+ACE_INLINE PortableInterceptor::ORBInitializer_ptr
+tao_PortableInterceptor_ORBInitializer_duplicate (
+    PortableInterceptor::ORBInitializer_ptr p
+  )
+{
+  return PortableInterceptor::ORBInitializer::_duplicate (p);
+}
+
+ACE_INLINE void
+tao_PortableInterceptor_ORBInitializer_release (
+    PortableInterceptor::ORBInitializer_ptr p
+  )
+{
+  CORBA::release (p);
+}
+
+ACE_INLINE PortableInterceptor::ORBInitializer_ptr
+tao_PortableInterceptor_ORBInitializer_nil (
+    void
+  )
+{
+  return PortableInterceptor::ORBInitializer::_nil ();
+}
+
+ACE_INLINE PortableInterceptor::ORBInitializer_ptr
+tao_PortableInterceptor_ORBInitializer_narrow (
+    CORBA::Object *p,
+    CORBA::Environment &ACE_TRY_ENV
+  )
+{
+  return PortableInterceptor::ORBInitializer::_narrow (p, ACE_TRY_ENV);
+}
+
+ACE_INLINE CORBA::Object *
+tao_PortableInterceptor_ORBInitializer_upcast (
+    void *src
+  )
+{
+  PortableInterceptor::ORBInitializer **tmp =
+    ACE_static_cast (PortableInterceptor::ORBInitializer **, src);
+  return *tmp;
+}
 
 
 #endif /* end #if !defined */
