// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

ACE_INLINE
registry::registry () // default constructor
{}

ACE_INLINE
registry::~registry () // destructor
{}

ACE_INLINE const char*
registry::_tao_obv_static_repository_id ()
{
  return "IDL:registry:1.0";
}


#if !defined (_REGISTRY___VAR_CI_)
#define _REGISTRY___VAR_CI_

// *************************************************************
// Inline operations for class registry_var
// *************************************************************

ACE_INLINE
registry_var::registry_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
registry_var::registry_var (registry* p)
  : ptr_ (p)
{}

ACE_INLINE
registry_var::registry_var (const registry* p)
  : ptr_ (ACE_const_cast(registry*, p))
{}

ACE_INLINE registry*
registry_var::ptr (void) const
{
  return this->ptr_;
}

ACE_INLINE
registry_var::registry_var (const registry_var &p) // copy constructor
{
  CORBA::add_ref (p.ptr ());
  this->ptr_ = p.ptr ();
}

ACE_INLINE
registry_var::~registry_var (void) // destructor
{
  CORBA::remove_ref (this->ptr_);
}

ACE_INLINE registry_var &
registry_var::operator= (registry* p)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = p;
  return *this;
}

ACE_INLINE registry_var &
registry_var::operator= (const registry_var &p)
{
  if (this != &p)
  {
    CORBA::remove_ref (this->ptr_);
    registry* tmp = p.ptr ();
    CORBA::add_ref (tmp);
    this->ptr_ = tmp;
  }
  return *this;
}

ACE_INLINE
registry_var::operator const registry* () const // cast
{
  return this->ptr_;
}

ACE_INLINE
registry_var::operator registry* () // cast
{
  return this->ptr_;
}

ACE_INLINE registry*
registry_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE registry*
registry_var::in (void) const
{
  return this->ptr_;
}

ACE_INLINE registry* &
registry_var::inout (void)
{
  return this->ptr_;
}

ACE_INLINE registry* &
registry_var::out (void)
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE registry*
registry_var::_retn (void)
{
  // yield ownership of managed obj reference
  registry* tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}


#endif /* end #if !defined */


#if !defined (_REGISTRY___OUT_CI_)
#define _REGISTRY___OUT_CI_

// *************************************************************
// Inline operations for class registry_out
// *************************************************************

ACE_INLINE
registry_out::registry_out (registry* &p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
registry_out::registry_out (registry_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::remove_ref (this->ptr_);
  this->ptr_ = 0;
}

ACE_INLINE
registry_out::registry_out (const registry_out &p) // copy constructor
  : ptr_ (ACE_const_cast (registry_out&,p).ptr_)
{}

ACE_INLINE registry_out &
registry_out::operator= (const registry_out &p)
{
  this->ptr_ = ACE_const_cast (registry_out&,p).ptr_;
  return *this;
}

ACE_INLINE registry_out &
registry_out::operator= (const registry_var &p)
{
  registry* tmp = p.ptr ();
  CORBA::add_ref (tmp);
  this->ptr_ = tmp;
  return *this;
}

ACE_INLINE registry_out &
registry_out::operator= (registry* p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
registry_out::operator registry* &() // cast
{
  return this->ptr_;
}

ACE_INLINE registry* &
registry_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE registry*
registry_out::operator-> (void)
{
  return this->ptr_;
}


#endif /* end #if !defined */


#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_REGISTRIES_CI_)
#define __TAO_UNBOUNDED_OBJECT_SEQUENCE_REGISTRIES_CI_

ACE_INLINE  **
_TAO_Unbounded_Valuetype_Sequence_registries::allocbuf (CORBA::ULong nelems)
{
   **buf = 0;

  ACE_NEW_RETURN (buf, *[nelems], 0);

  for (CORBA::ULong i = 0; i < nelems; i++)
    {
      buf[i] = 0;
    }

  return buf;
}

ACE_INLINE void
_TAO_Unbounded_Valuetype_Sequence_registries::freebuf ( **buffer)
{
  if (buffer == 0)
    return;
  delete[] buffer;
}

ACE_INLINE
_TAO_Unbounded_Valuetype_Sequence_registries::_TAO_Unbounded_Valuetype_Sequence_registries (void)
{
}

ACE_INLINE
_TAO_Unbounded_Valuetype_Sequence_registries::_TAO_Unbounded_Valuetype_Sequence_registries (CORBA::ULong maximum)
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Valuetype_Sequence_registries::allocbuf (maximum))
{
}

ACE_INLINE
_TAO_Unbounded_Valuetype_Sequence_registries::_TAO_Unbounded_Valuetype_Sequence_registries (CORBA::ULong maximum,
  CORBA::ULong length,
  registry_ptr *value,
  CORBA::Boolean release)
: TAO_Unbounded_Base_Sequence (maximum, length, value, release)
{
}

ACE_INLINE
_TAO_Unbounded_Valuetype_Sequence_registries::_TAO_Unbounded_Valuetype_Sequence_registries(const _TAO_Unbounded_Valuetype_Sequence_registries &rhs)
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
  {
     **tmp1 = _TAO_Unbounded_Object_Sequence_registries::allocbuf (this->maximum_);
     ** const tmp2 = ACE_reinterpret_cast ( ** ACE_CAST_CONST, rhs.buffer_);

    for (CORBA::ULong i = 0; i < rhs.length_; ++i)
      {
        tmp2[i]->_add_ref ();
        tmp1[i] = tmp2[i];
      }

    this->buffer_ = tmp1;
  }
  else
  {
    this->buffer_ = 0;
  }
}

ACE_INLINE _TAO_Unbounded_Valuetype_Sequence_registries &
_TAO_Unbounded_Valuetype_Sequence_registries::operator= (const _TAO_Unbounded_Valuetype_Sequence_registries &rhs)
{
  if (this == &rhs)
    return *this;

  if (this->release_)
  {
     **tmp = ACE_reinterpret_cast ( **, this->buffer_);

    for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp[i]->_remove_ref ();
      tmp[i] = 0;
    }
    if (this->maximum_ < rhs.maximum_)
    {
      _TAO_Unbounded_Valuetype_Sequence_registries::freebuf (tmp);
      this->buffer_ = _TAO_Unbounded_Valuetype_Sequence_registries::allocbuf (rhs.maximum_);
    }
  }
  else
    this->buffer_ = _TAO_Unbounded_Valuetype_Sequence_registries::allocbuf (rhs.maximum_);

  TAO_Unbounded_Base_Sequence::operator= (rhs);

   **tmp1 = ACE_reinterpret_cast ( **, this->buffer_);
   ** const tmp2 = ACE_reinterpret_cast ( ** ACE_CAST_CONST, rhs.buffer_);

  for (CORBA::ULong i = 0; i < rhs.length_; ++i)
    {
      tmp2[i]->_add_ref ();
      tmp1[i] = tmp2[i];
    }

  return *this;
}

ACE_INLINE TAO_Valuetype_Manager<registry,registry_var>
_TAO_Unbounded_Valuetype_Sequence_registries::operator[] (CORBA::ULong index) const
// read-write accessor
{
  ACE_ASSERT (index < this->maximum_);
   ** const tmp = ACE_reinterpret_cast ( ** ACE_CAST_CONST, this->buffer_);
  return TAO_Valuetype_Manager<registry,registry_var> (tmp + index, this->release_);
}

ACE_INLINE * *
_TAO_Unbounded_Valuetype_Sequence_registries::get_buffer (CORBA::Boolean orphan)
{
   **result = 0;
  if (orphan == 0)
  {
    // We retain ownership.
    if (this->buffer_ == 0)
    {
      result = _TAO_Unbounded_Valuetype_Sequence_registries::allocbuf (this->maximum_);
      this->buffer_ = result;
      this->release_ = 1;
    }
    else
    {
      result = ACE_reinterpret_cast (**, this->buffer_);
    }
  }
  else // if (orphan == 1)
  {
    if (this->release_ != 0)
    {
      // We set the state back to default and relinquish
      // ownership.
      result = ACE_reinterpret_cast(**,this->buffer_);
      this->maximum_ = 0;
      this->length_ = 0;
      this->buffer_ = 0;
      this->release_ = 0;
    }
  }
  return result;
}

ACE_INLINE const * *
_TAO_Unbounded_Valuetype_Sequence_registries::get_buffer (void) const
{
  return ACE_reinterpret_cast(const  ** ACE_CAST_CONST, this->buffer_);
}


#endif /* end #if !defined */


#endif /* !TAO_USE_SEQUENCE_TEMPLATES */

#if !defined (_REGISTRIES_CI_)
#define _REGISTRIES_CI_

// *************************************************************
// Inline operations for class registries_var
// *************************************************************

ACE_INLINE
registries_var::registries_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
registries_var::registries_var (registries *p)
  : ptr_ (p)
{}

ACE_INLINE
registries_var::registries_var (const ::registries_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::registries (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
registries_var::~registries_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE registries_var &
registries_var::operator= (registries *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::registries_var &
registries_var::operator= (const ::registries_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          registries *deep_copy =
            new registries (*p.ptr_);

          if (deep_copy != 0)
            {
              registries *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }

  return *this;
}

ACE_INLINE const ::registries *
registries_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::registries *
registries_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
registries_var::operator const ::registries &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
registries_var::operator ::registries &() // cast
{
  return *this->ptr_;
}

ACE_INLINE
registries_var::operator ::registries &() const // cast
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
registries_var::operator ::registries *&() // cast
{
  return this->ptr_;
}

ACE_INLINE TAO_Valuetype_Manager<registry,registry_var>
registries_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::registries &
registries_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::registries &
registries_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size
ACE_INLINE ::registries *&
registries_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::registries *
registries_var::_retn (void)
{
  ::registries *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::registries *
registries_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class registries_out
// *************************************************************

ACE_INLINE
registries_out::registries_out (registries *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
registries_out::registries_out (registries_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
registries_out::registries_out (const ::registries_out &p) // copy constructor
  : ptr_ (ACE_const_cast (registries_out&, p).ptr_)
{}

ACE_INLINE ::registries_out &
registries_out::operator= (const ::registries_out &p)
{
  this->ptr_ = ACE_const_cast (registries_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::registries_out &
registries_out::operator= (registries *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
registries_out::operator ::registries *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::registries *&
registries_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::registries *
registries_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_Valuetype_Manager<registry,registry_var>
registries_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_SERIES___CI_)
#define _SERIES___CI_

ACE_INLINE
series::series (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->series_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */

ACE_INLINE CORBA::Boolean
operator<< (TAO_OutputCDR &strm, const registry *_tao_valuetype)
{
  return CORBA_ValueBase::_tao_marshal (strm,
    ACE_const_cast (registry*, _tao_valuetype),
    (ptr_arith_t) &registry::_downcast);
}

ACE_INLINE CORBA::Boolean
operator>> (TAO_InputCDR &strm, registry *&_tao_valuetype)
{
  return registry::_tao_unmarshal (strm, _tao_valuetype);
}

ACE_INLINE CORBA::Boolean
OBV_registry::_tao_marshal_state (TAO_OutputCDR &strm)
{
  if (
    (strm << _pd_value)
  )
    return 1;
  else
    return 0;

}

ACE_INLINE CORBA::Boolean
OBV_registry::_tao_unmarshal_state (TAO_InputCDR &strm)
{
  if (
    (strm >> _pd_value)
  )
    return 1;
  else
    return 0;

}


#if !defined _TAO_CDR_OP_registries_I_
#define _TAO_CDR_OP_registries_I_

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const registries &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    registries &
  );

#endif /* _TAO_CDR_OP_registries_I_ */

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const series_ptr
  );

 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    series_ptr &
  );
