// $Id$
/**
 * @file dds4ccm_Base.idl
 *
 */

#ifndef DDS4CCM_BASE_IDL3
#define DDS4CCM_BASE_IDL3

#include "connectors/dds4ccm/idl/dds_rtf2_dcps.idl"
#include "connectors/dds4ccm/idl/dds4ccm_QueryFilter.idl"

#pragma ciao lem "connectors/dds4ccm/idl/dds4ccm_BaseE.idl"

module CCM_DDS
{
  typedef unsigned long DataNumber_t;   // count or index of data
  typedef sequence<DataNumber_t> DataNumberSeq;
  const DataNumber_t UNLIMITED = 0;

  enum AccessStatus {
    FRESH_INFO,
    ALREADY_SEEN
  };

  enum InstanceStatus {
    INSTANCE_CREATED,
    INSTANCE_FILTERED_IN,
    INSTANCE_UPDATED,
    INSTANCE_FILTERED_OUT,
    INSTANCE_DELETED
  };

  struct ReadInfo {
    DDS::InstanceHandle_t instance_handle;
    DDS::Time_t source_timestamp;
    AccessStatus access_status;
    InstanceStatus instance_status;
  };
  typedef sequence<ReadInfo> ReadInfoSeq;

  enum ListenerMode {
    NOT_ENABLED,
    ONE_BY_ONE,
    MANY_BY_MANY
  };

  exception AlreadyCreated {
    DataNumberSeq indexes; // of the erroneous
  };

  exception NonExistent{
    DataNumberSeq indexes; // of the erroneous
  };

  exception InternalError{
    DDS::ReturnCode_t error_code;
    DataNumber_t index; // of the erroneaous
  };

  exception NonChangeable {
  };

  local interface ContentFilterSetting {
    void set_filter_parameters (in DDS::StringSeq parameters)
      raises (InternalError);
  };
};

#endif
