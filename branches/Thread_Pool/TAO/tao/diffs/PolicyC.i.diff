--- orig/PolicyC.i	Tue Jun 12 17:22:53 2001
+++ PolicyC.i	Thu Jun  7 00:04:48 2001
@@ -1,6 +1,6 @@
 // -*- C++ -*-
 //
-// $Id$
+// $Id$
 
 // ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
 // TAO and the TAO IDL Compiler have been developed by:
@@ -20,11 +20,11 @@
 //     http://www.cs.wustl.edu/~schmidt/TAO.html
 
 // *************************************************************
-// Inline operations for exception CORBA_PolicyError
+// Inline operations for exception CORBA::PolicyError
 // *************************************************************
 
 // *************************************************************
-// Inline operations for exception CORBA_InvalidPolicies
+// Inline operations for exception CORBA::InvalidPolicies
 // *************************************************************
 
 
@@ -35,7 +35,7 @@
 
 // = Static operations.
 ACE_INLINE CORBA::UShort *
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::allocbuf (CORBA::ULong size)
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::allocbuf (CORBA::ULong size)
 // Allocate storage for the sequence.
 {
   CORBA::UShort *retval = 0;
@@ -43,25 +43,25 @@
   return retval;
 }
 
-ACE_INLINE void CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::freebuf (CORBA::UShort *buffer)
+  ACE_INLINE void CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::freebuf (CORBA::UShort *buffer)
 // Free the sequence.
 {
   delete [] buffer;
 }
 
 ACE_INLINE
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (void) // Default constructor.
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (void) // Default constructor.
 {
 }
 
 ACE_INLINE
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (CORBA::ULong maximum) // Constructor using a maximum length value.
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (CORBA::ULong maximum) // Constructor using a maximum length value.
   : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::allocbuf (maximum))
 {
 }
 
 ACE_INLINE
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (CORBA::ULong maximum,
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (CORBA::ULong maximum,
   CORBA::ULong length,
   CORBA::UShort *data,
   CORBA::Boolean release)
@@ -70,7 +70,7 @@
 }
 
 ACE_INLINE
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (const _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &rhs)
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort (const _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &rhs)
 // Copy constructor.
   : TAO_Unbounded_Base_Sequence (rhs)
 {
@@ -90,8 +90,8 @@
   }
 }
 
-ACE_INLINE CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::operator= (const _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &rhs)
+  ACE_INLINE CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::operator= (const _TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort &rhs)
 // Assignment operator.
 {
   if (this == &rhs)
@@ -123,7 +123,7 @@
 
 // = Accessors.
 ACE_INLINE CORBA::UShort &
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::operator[] (CORBA::ULong i)
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::operator[] (CORBA::ULong i)
 // operator []
 {
   ACE_ASSERT (i < this->maximum_);
@@ -132,7 +132,7 @@
 }
 
 ACE_INLINE const CORBA::UShort &
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::operator[] (CORBA::ULong i) const
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::operator[] (CORBA::ULong i) const
 // operator []
 {
   ACE_ASSERT (i < this->maximum_);
@@ -143,7 +143,7 @@
 // Implement the TAO_Base_Sequence methods (see Sequence.h)
 
 ACE_INLINE CORBA::UShort *
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::get_buffer (CORBA::Boolean orphan)
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::get_buffer (CORBA::Boolean orphan)
 {
   CORBA::UShort *result = 0;
   if (orphan == 0)
@@ -177,13 +177,13 @@
 }
 
 ACE_INLINE const CORBA::UShort *
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::get_buffer (void) const
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::get_buffer (void) const
 {
   return ACE_reinterpret_cast(const CORBA::UShort * ACE_CAST_CONST, this->buffer_);
 }
 
 ACE_INLINE void
-CORBA_InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::replace (CORBA::ULong max,
+  CORBA::InvalidPolicies::_TAO_Unbounded_Sequence_CORBA_InvalidPolicies__tao_seq_UShort::replace (CORBA::ULong max,
 CORBA::ULong length,
 CORBA::UShort *data,
 CORBA::Boolean release)
@@ -227,23 +227,23 @@
 #if !defined (__TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CI_)
 #define __TAO_UNBOUNDED_OBJECT_SEQUENCE_CORBA_POLICYLIST_CI_
 
-ACE_INLINE CORBA_Policy **
+  ACE_INLINE CORBA::Policy **
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (CORBA::ULong nelems)
 {
-  CORBA_Policy **buf = 0;
+    CORBA::Policy **buf = 0;
   
-  ACE_NEW_RETURN (buf, CORBA_Policy*[nelems], 0);
+    ACE_NEW_RETURN (buf, CORBA::Policy*[nelems], 0);
   
   for (CORBA::ULong i = 0; i < nelems; i++)
     {
-      buf[i] = CORBA_Policy::_nil ();
+        buf[i] = CORBA::Policy::_nil ();
     }
   
   return buf;
 }
 
 ACE_INLINE void 
-_TAO_Unbounded_Object_Sequence_CORBA_PolicyList::freebuf (CORBA_Policy **buffer)
+  _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::freebuf (CORBA::Policy **buffer)
 {
   if (buffer == 0)
     return;
@@ -264,7 +264,7 @@
 ACE_INLINE
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::_TAO_Unbounded_Object_Sequence_CORBA_PolicyList (CORBA::ULong maximum,
   CORBA::ULong length,
-  CORBA_Policy* *value,
+    CORBA::Policy* *value,
   CORBA::Boolean release)
 : TAO_Unbounded_Base_Sequence (maximum, length, value, release)
 {
@@ -276,12 +276,12 @@
 {
   if (rhs.buffer_ != 0)
   {
-    CORBA_Policy **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (this->maximum_);
-    CORBA_Policy ** const tmp2 = ACE_reinterpret_cast (CORBA_Policy ** ACE_CAST_CONST, rhs.buffer_);
+      CORBA::Policy **tmp1 = _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::allocbuf (this->maximum_);
+      CORBA::Policy ** const tmp2 = ACE_reinterpret_cast (CORBA::Policy ** ACE_CAST_CONST, rhs.buffer_);
     
     for (CORBA::ULong i = 0; i < rhs.length_; ++i)
       {
-        tmp1[i] = CORBA_Policy::_duplicate (tmp2[i]);
+          tmp1[i] = CORBA::Policy::_duplicate (tmp2[i]);
       }
     
     this->buffer_ = tmp1;
@@ -300,12 +300,12 @@
   
   if (this->release_)
   {
-    CORBA_Policy **tmp = ACE_reinterpret_cast (CORBA_Policy **, this->buffer_);
+      CORBA::Policy **tmp = ACE_reinterpret_cast (CORBA::Policy **, this->buffer_);
     
     for (CORBA::ULong i = 0; i < this->length_; ++i)
     {
       CORBA::release (tmp[i]);
-      tmp[i] = CORBA_Policy::_nil ();
+        tmp[i] = CORBA::Policy::_nil ();
     }
     if (this->maximum_ < rhs.maximum_)
     {
@@ -318,30 +318,30 @@
   
   TAO_Unbounded_Base_Sequence::operator= (rhs);
   
-  CORBA_Policy **tmp1 = ACE_reinterpret_cast (CORBA_Policy **, this->buffer_);
-  CORBA_Policy ** const tmp2 = ACE_reinterpret_cast (CORBA_Policy ** ACE_CAST_CONST, rhs.buffer_);
+    CORBA::Policy **tmp1 = ACE_reinterpret_cast (CORBA::Policy **, this->buffer_);
+    CORBA::Policy ** const tmp2 = ACE_reinterpret_cast (CORBA::Policy ** ACE_CAST_CONST, rhs.buffer_);
   
   for (CORBA::ULong i = 0; i < rhs.length_; ++i)
     {
-      tmp1[i] = CORBA_Policy::_duplicate (tmp2[i]);
+        tmp1[i] = CORBA::Policy::_duplicate (tmp2[i]);
     }
   
   return *this;
 }
 
-ACE_INLINE TAO_Object_Manager<CORBA_Policy,CORBA_Policy_var>
+  ACE_INLINE TAO_Object_Manager<CORBA::Policy,CORBA::Policy_var>
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::operator[] (CORBA::ULong index) const
 // read-write accessor
 {
   ACE_ASSERT (index < this->maximum_);
-  CORBA_Policy ** const tmp = ACE_reinterpret_cast (CORBA_Policy ** ACE_CAST_CONST, this->buffer_);
-  return TAO_Object_Manager<CORBA_Policy,CORBA_Policy_var> (tmp + index, this->release_);
+    CORBA::Policy ** const tmp = ACE_reinterpret_cast (CORBA::Policy ** ACE_CAST_CONST, this->buffer_);
+    return TAO_Object_Manager<CORBA::Policy,CORBA::Policy_var> (tmp + index, this->release_);
 }
 
-ACE_INLINE CORBA_Policy* *
+  ACE_INLINE CORBA::Policy* *
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::get_buffer (CORBA::Boolean orphan)
 {
-  CORBA_Policy **result = 0;
+    CORBA::Policy **result = 0;
   if (orphan == 0)
   {
     // We retain ownership.
@@ -353,7 +353,7 @@
     }
     else
     {
-      result = ACE_reinterpret_cast (CORBA_Policy**, this->buffer_);
+        result = ACE_reinterpret_cast (CORBA::Policy**, this->buffer_);
     }
   }
   else // if (orphan == 1)
@@ -362,7 +362,7 @@
     {
       // We set the state back to default and relinquish
       // ownership.
-      result = ACE_reinterpret_cast(CORBA_Policy**,this->buffer_);
+        result = ACE_reinterpret_cast(CORBA::Policy**,this->buffer_);
       this->maximum_ = 0;
       this->length_ = 0;
       this->buffer_ = 0;
@@ -372,10 +372,10 @@
   return result;
 }
 
-ACE_INLINE const CORBA_Policy* *
+  ACE_INLINE const CORBA::Policy* *
 _TAO_Unbounded_Object_Sequence_CORBA_PolicyList::get_buffer (void) const
 {
-  return ACE_reinterpret_cast(const CORBA_Policy ** ACE_CAST_CONST, this->buffer_);
+    return ACE_reinterpret_cast(const CORBA::Policy ** ACE_CAST_CONST, this->buffer_);
 }
 
 
@@ -489,7 +489,7 @@
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<CORBA_Policy, CORBA_Policy_var>
+ACE_INLINE TAO_Object_Manager<CORBA::Policy, CORBA::Policy_var>
 CORBA_PolicyList_var::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
@@ -586,7 +586,7 @@
   return this->ptr_;
 }
 
-ACE_INLINE TAO_Object_Manager<CORBA_Policy, CORBA_Policy_var>
+ACE_INLINE TAO_Object_Manager<CORBA::Policy, CORBA::Policy_var>
 CORBA_PolicyList_out::operator[] (CORBA::ULong index)
 {
   return this->ptr_->operator[] (index);
@@ -776,7 +776,7 @@
 #define _CORBA_POLICYTYPESEQ_CI_
 
 // *************************************************************
-// Inline operations for class CORBA_PolicyTypeSeq_var
+// Inline operations for class CORBA::PolicyTypeSeq_var
 // *************************************************************
 
 ACE_INLINE
@@ -790,17 +790,17 @@
 {}
 
 ACE_INLINE
-CORBA_PolicyTypeSeq_var::CORBA_PolicyTypeSeq_var (const ::CORBA_PolicyTypeSeq_var &p) // copy constructor
+CORBA_PolicyTypeSeq_var::CORBA_PolicyTypeSeq_var (const CORBA_PolicyTypeSeq_var &p) // copy constructor
 {
   if (p.ptr_)
-    ACE_NEW (this->ptr_, ::CORBA_PolicyTypeSeq (*p.ptr_));
+    ACE_NEW (this->ptr_, CORBA_PolicyTypeSeq (*p.ptr_));
   else
     this->ptr_ = 0;
 }
 
 // fixed-size base types only
 ACE_INLINE
-CORBA_PolicyTypeSeq_var::CORBA_PolicyTypeSeq_var (const ::CORBA_PolicyTypeSeq &p)
+CORBA_PolicyTypeSeq_var::CORBA_PolicyTypeSeq_var (const CORBA_PolicyTypeSeq &p)
 {
   ACE_NEW (this->ptr_, ::CORBA_PolicyTypeSeq (p));
 }
@@ -849,42 +849,42 @@
 
 // fixed-size types only
 ACE_INLINE ::CORBA_PolicyTypeSeq_var &
-CORBA_PolicyTypeSeq_var::operator= (const ::CORBA_PolicyTypeSeq &p)
+CORBA_PolicyTypeSeq_var::operator= (const ::CORBA::PolicyTypeSeq &p)
 {
   if (this->ptr_ != &p)
   {
     delete this->ptr_;
-    ACE_NEW_RETURN (this->ptr_, ::CORBA_PolicyTypeSeq (p), *this);
+    ACE_NEW_RETURN (this->ptr_, ::CORBA::PolicyTypeSeq (p), *this);
   }
   return *this;
 }
 
-ACE_INLINE const ::CORBA_PolicyTypeSeq *
+ACE_INLINE const ::CORBA::PolicyTypeSeq *
 CORBA_PolicyTypeSeq_var::operator-> (void) const
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA_PolicyTypeSeq *
+ACE_INLINE ::CORBA::PolicyTypeSeq *
 CORBA_PolicyTypeSeq_var::operator-> (void)
 {
   return this->ptr_;
 }
 
 ACE_INLINE 
-CORBA_PolicyTypeSeq_var::operator const ::CORBA_PolicyTypeSeq &() const // cast
+CORBA_PolicyTypeSeq_var::operator const ::CORBA::PolicyTypeSeq &() const // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-CORBA_PolicyTypeSeq_var::operator ::CORBA_PolicyTypeSeq &() // cast 
+CORBA_PolicyTypeSeq_var::operator ::CORBA::PolicyTypeSeq &() // cast
 {
   return *this->ptr_;
 }
 
 ACE_INLINE 
-CORBA_PolicyTypeSeq_var::operator ::CORBA_PolicyTypeSeq &() const // cast 
+CORBA_PolicyTypeSeq_var::operator ::CORBA::PolicyTypeSeq &() const // cast
 {
   return *this->ptr_;
 }
@@ -901,20 +901,20 @@
   return ACE_const_cast (const CORBA::PolicyType &, this->ptr_->operator[] (index));
 }
 
-ACE_INLINE const ::CORBA_PolicyTypeSeq &
+ACE_INLINE const ::CORBA::PolicyTypeSeq &
 CORBA_PolicyTypeSeq_var::in (void) const
 {
   return *this->ptr_;
 }
 
-ACE_INLINE ::CORBA_PolicyTypeSeq &
+ACE_INLINE ::CORBA::PolicyTypeSeq &
 CORBA_PolicyTypeSeq_var::inout (void)
 {
   return *this->ptr_;
 }
 
 // mapping for variable size 
-ACE_INLINE ::CORBA_PolicyTypeSeq *&
+ACE_INLINE ::CORBA::PolicyTypeSeq *&
 CORBA_PolicyTypeSeq_var::out (void)
 {
   delete this->ptr_;
@@ -922,15 +922,15 @@
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA_PolicyTypeSeq *
+ACE_INLINE ::CORBA::PolicyTypeSeq *
 CORBA_PolicyTypeSeq_var::_retn (void)
 {
-  ::CORBA_PolicyTypeSeq *tmp = this->ptr_;
+  ::CORBA::PolicyTypeSeq *tmp = this->ptr_;
   this->ptr_ = 0;
   return tmp;
 }
 
-ACE_INLINE ::CORBA_PolicyTypeSeq *
+ACE_INLINE ::CORBA::PolicyTypeSeq *
 CORBA_PolicyTypeSeq_var::ptr (void) const
 {
   return this->ptr_;
@@ -975,18 +975,18 @@
 }
 
 ACE_INLINE 
-CORBA_PolicyTypeSeq_out::operator ::CORBA_PolicyTypeSeq *&() // cast
+CORBA_PolicyTypeSeq_out::operator ::CORBA::PolicyTypeSeq *&() // cast
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA_PolicyTypeSeq *&
+ACE_INLINE ::CORBA::PolicyTypeSeq *&
 CORBA_PolicyTypeSeq_out::ptr (void) // ptr
 {
   return this->ptr_;
 }
 
-ACE_INLINE ::CORBA_PolicyTypeSeq *
+ACE_INLINE ::CORBA::PolicyTypeSeq *
 CORBA_PolicyTypeSeq_out::operator-> (void)
 {
   return this->ptr_;
@@ -1022,26 +1022,7 @@
 
 #endif /* end #if !defined */
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::SetOverrideType &_tao_enumval)
-{
-  CORBA::ULong _tao_temp = _tao_enumval;
-  return strm << _tao_temp;
-}
-
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::SetOverrideType &_tao_enumval)
-{
-  CORBA::ULong _tao_temp = 0;
-  CORBA::Boolean _tao_result = strm >> _tao_temp;
-  
-  if (_tao_result == 1)
-    {
-      _tao_enumval = ACE_static_cast (CORBA::SetOverrideType, _tao_temp);
-    }
-  
-  return _tao_result;
-}
-
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA_PolicyError &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::PolicyError &_tao_aggregate)
 {
   // first marshal the repository ID
   if (strm << _tao_aggregate._id ())
@@ -1058,7 +1039,7 @@
     return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,CORBA_PolicyError &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,CORBA::PolicyError &_tao_aggregate)
 {
   // now marshal the members
   if (
@@ -1075,16 +1056,16 @@
 
 CORBA::Boolean TAO_Export operator<< (
     TAO_OutputCDR &,
-    const CORBA_InvalidPolicies::_tao_seq_UShort &
+    const CORBA::InvalidPolicies::_tao_seq_UShort &
   );
 CORBA::Boolean TAO_Export operator>> (
     TAO_InputCDR &,
-    CORBA_InvalidPolicies::_tao_seq_UShort &
+    CORBA::InvalidPolicies::_tao_seq_UShort &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_InvalidPolicies__tao_seq_UShort_I_ */
 
-ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA_InvalidPolicies &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::InvalidPolicies &_tao_aggregate)
 {
   // first marshal the repository ID
   if (strm << _tao_aggregate._id ())
@@ -1101,7 +1082,7 @@
     return 0;
 }
 
-ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,CORBA_InvalidPolicies &_tao_aggregate)
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm,CORBA::InvalidPolicies &_tao_aggregate)
 {
   // now marshal the members
   if (
@@ -1114,12 +1095,12 @@
 
 TAO_Export CORBA::Boolean operator<< (
     TAO_OutputCDR &,
-    const CORBA_Policy_ptr
+    const CORBA::Policy_ptr
   );
 
 TAO_Export CORBA::Boolean operator>> (
     TAO_InputCDR &,
-    CORBA_Policy_ptr &
+    CORBA::Policy_ptr &
   );
 
 
@@ -1143,12 +1124,30 @@
 
 CORBA::Boolean TAO_Export operator<< (
     TAO_OutputCDR &,
-    const CORBA_PolicyTypeSeq &
+    const CORBA::PolicyTypeSeq &
   );
 CORBA::Boolean TAO_Export operator>> (
     TAO_InputCDR &,
-    CORBA_PolicyTypeSeq &
+    CORBA::PolicyTypeSeq &
   );
 
 #endif /* _TAO_CDR_OP_CORBA_PolicyTypeSeq_I_ */
 
+ACE_INLINE CORBA::Boolean operator<< (TAO_OutputCDR &strm, const CORBA::SetOverrideType &_tao_enumval)
+{
+  CORBA::ULong _tao_temp = _tao_enumval;
+  return strm << _tao_temp;
+}
+
+ACE_INLINE CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBA::SetOverrideType &_tao_enumval)
+{
+  CORBA::ULong _tao_temp = 0;
+  CORBA::Boolean _tao_result = strm >> _tao_temp;
+
+  if (_tao_result == 1)
+    {
+      _tao_enumval = ACE_static_cast (CORBA::SetOverrideType, _tao_temp);
+    }
+
+  return _tao_result;
+}
